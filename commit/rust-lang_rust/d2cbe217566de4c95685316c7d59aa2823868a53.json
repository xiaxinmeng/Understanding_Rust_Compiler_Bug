{"sha": "d2cbe217566de4c95685316c7d59aa2823868a53", "node_id": "C_kwDOAAsO6NoAKGQyY2JlMjE3NTY2ZGU0Yzk1Njg1MzE2YzdkNTlhYTI4MjM4NjhhNTM", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T09:06:19Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T09:06:19Z"}, "message": "Handle type params in insig dtors", "tree": {"sha": "6ac77dff861ada93fd33cdbdf4a108ac5e973a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac77dff861ada93fd33cdbdf4a108ac5e973a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2cbe217566de4c95685316c7d59aa2823868a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cbe217566de4c95685316c7d59aa2823868a53", "html_url": "https://github.com/rust-lang/rust/commit/d2cbe217566de4c95685316c7d59aa2823868a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2cbe217566de4c95685316c7d59aa2823868a53/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c989880a19b419a00ddaced40a972ce6b8f2c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c989880a19b419a00ddaced40a972ce6b8f2c7d", "html_url": "https://github.com/rust-lang/rust/commit/1c989880a19b419a00ddaced40a972ce6b8f2c7d"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "039cbaf4982eefc6e41e7512d499ca3cfc4768d2", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2cbe217566de4c95685316c7d59aa2823868a53/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cbe217566de4c95685316c7d59aa2823868a53/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=d2cbe217566de4c95685316c7d59aa2823868a53", "patch": "@@ -3,6 +3,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n@@ -12,7 +13,7 @@ type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let adt_components =\n-        move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n+        move |adt_def: &ty::AdtDef, _| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n \n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n@@ -28,8 +29,9 @@ fn has_significant_drop_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> bool {\n-    let significant_drop_fields =\n-        move |adt_def: &ty::AdtDef| tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter());\n+    let significant_drop_fields = move |adt_def: &ty::AdtDef, _| {\n+        tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter())\n+    };\n     let res = NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields)\n         .next()\n         .is_some();\n@@ -74,7 +76,7 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n \n impl<'tcx, F, I> Iterator for NeedsDropTypes<'tcx, F>\n where\n-    F: Fn(&ty::AdtDef) -> NeedsDropResult<I>,\n+    F: Fn(&ty::AdtDef, SubstsRef<'tcx>) -> NeedsDropResult<I>,\n     I: Iterator<Item = Ty<'tcx>>,\n {\n     type Item = NeedsDropResult<Ty<'tcx>>;\n@@ -138,7 +140,7 @@ where\n                     // `ManuallyDrop`. If it's a struct or enum without a `Drop`\n                     // impl then check whether the field types need `Drop`.\n                     ty::Adt(adt_def, substs) => {\n-                        let tys = match (self.adt_components)(adt_def) {\n+                        let tys = match (self.adt_components)(adt_def, substs) {\n                             Err(e) => return Some(Err(e)),\n                             Ok(tys) => tys,\n                         };\n@@ -185,12 +187,12 @@ enum DtorType {\n // Depending on the implentation of `adt_has_dtor`, it is used to check if the\n // ADT has a destructor or if the ADT only has a significant destructor. For\n // understanding significant destructor look at `adt_significant_drop_tys`.\n-fn adt_drop_tys_helper(\n-    tcx: TyCtxt<'_>,\n+fn adt_drop_tys_helper<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     adt_has_dtor: impl Fn(&ty::AdtDef) -> Option<DtorType>,\n-) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n-    let adt_components = move |adt_def: &ty::AdtDef| {\n+) -> Result<&ty::List<Ty<'tcx>>, AlwaysRequiresDrop> {\n+    let adt_components = move |adt_def: &ty::AdtDef, substs: SubstsRef<'tcx>| {\n         if adt_def.is_manually_drop() {\n             debug!(\"adt_drop_tys: `{:?}` is manually drop\", adt_def);\n             return Ok(Vec::new().into_iter());\n@@ -202,7 +204,11 @@ fn adt_drop_tys_helper(\n                 }\n                 DtorType::Insignificant => {\n                     debug!(\"adt_drop_tys: `{:?}` drop is insignificant\", adt_def);\n-                    return Ok(Vec::new().into_iter());\n+\n+                    // Since the destructor is insignificant, we just want to make sure all of\n+                    // the passed in type parameters are also insignificant.\n+                    // Eg: Vec<T> dtor is insignificant when T=i32 but significant when T=Mutex.\n+                    return Ok(substs.types().collect::<Vec<Ty<'_>>>().into_iter());\n                 }\n             }\n         } else if adt_def.is_union() {"}, {"sha": "d0fad7b07df0e9b91f2ffd75b94a526497226065", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2cbe217566de4c95685316c7d59aa2823868a53/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d2cbe217566de4c95685316c7d59aa2823868a53/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=d2cbe217566de4c95685316c7d59aa2823868a53", "patch": "@@ -9,15 +9,15 @@\n \n struct InsignificantDropPoint {\n     x: i32,\n-    y: Mutex<T>,\n+    y: Mutex<i32>,\n }\n \n impl Drop for InsignificantDropPoint {\n     #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n \n-struct SigDrop { x: () }\n+struct SigDrop;\n \n impl Drop for SigDrop {\n     fn drop(&mut self) {}\n@@ -45,9 +45,10 @@ fn insign_dtor() {\n \n // `SigDrop` implements drop and therefore needs to be migrated.\n fn significant_drop_needs_migration() {\n-    let t = (SigDrop { x: () }, SigDrop { x: () });\n+    let t = (SigDrop {}, SigDrop {});\n \n     let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -64,10 +65,11 @@ fn significant_drop_needs_migration() {\n // consdered to have an significant drop. Since the elements\n // of `GenericStruct` implement drop, migration is required.\n fn generic_struct_with_significant_drop_needs_migration() {\n-    let t = Wrapper(GenericStruct(SigDrop { x: () }, SigDrop { x: () }), 5);\n+    let t = Wrapper(GenericStruct(SigDrop {}, SigDrop {}), 5);\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "c20bd572af87468e312bf48b15f77eb1a1af2261", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d2cbe217566de4c95685316c7d59aa2823868a53/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2cbe217566de4c95685316c7d59aa2823868a53/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=d2cbe217566de4c95685316c7d59aa2823868a53", "patch": "@@ -1,19 +1,45 @@\n-error[E0107]: missing generics for struct `Mutex`\n-  --> $DIR/insignificant_drop_attr_migrations.rs:12:8\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/insignificant_drop_attr_migrations.rs:50:13\n    |\n-LL |     y: Mutex,\n-   |        ^^^^^ expected 1 generic argument\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n-note: struct defined here, with 1 generic parameter: `T`\n-  --> $SRC_DIR/std/src/sync/mutex.rs:LL:COL\n+note: the lint level is defined here\n+  --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n    |\n-LL | pub struct Mutex<T: ?Sized> {\n-   |            ^^^^^ -\n-help: add missing generic argument\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `t` to be fully captured\n+   |\n+LL ~     let c = || {\n+LL +         let _ = &t;\n+   |\n+\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/insignificant_drop_attr_migrations.rs:70:13\n+   |\n+LL |     let c = move || {\n+   |             ^^^^^^^\n+...\n+LL |         let _t = t.1;\n+   |                  --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.1`\n+...\n+LL | }\n+   | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.1` will be dropped here as part of the closure\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `t` to be fully captured\n+   |\n+LL ~     let c = move || {\n+LL +         let _ = &t;\n    |\n-LL |     y: Mutex<T>,\n-   |        ~~~~~~~~\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0107`."}]}