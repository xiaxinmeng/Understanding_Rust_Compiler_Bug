{"sha": "9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOWFhNWI0NmFhMGM4MWE2ZGFkM2EzMzc3ZDZiN2QyZTY1YTkzYzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:13:49Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:09:31Z"}, "message": "Implement Hash for new types\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "8a6f06792fe22e68f08696442deb07f7834eceb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6f06792fe22e68f08696442deb07f7834eceb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "html_url": "https://github.com/rust-lang/rust/commit/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a6df6079c052f789ef8d5e0aaaf855ffbc76f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a6df6079c052f789ef8d5e0aaaf855ffbc76f4", "html_url": "https://github.com/rust-lang/rust/commit/73a6df6079c052f789ef8d5e0aaaf855ffbc76f4"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "21988de90183a0a9df91bd6d830f76e9941b6f28", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "patch": "@@ -74,6 +74,7 @@ for ty::subst::UnpackedKind<'gcx> {\n         match self {\n             ty::subst::UnpackedKind::Lifetime(lt) => lt.hash_stable(hcx, hasher),\n             ty::subst::UnpackedKind::Type(ty) => ty.hash_stable(hcx, hasher),\n+            ty::subst::UnpackedKind::Const(ct) => ct.hash_stable(hcx, hasher),\n         }\n     }\n }\n@@ -134,6 +135,15 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n     }\n }\n \n+impl<'gcx, 'tcx> HashStable<StableHashingContext<'gcx>> for ty::ConstVid<'tcx> {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.index.hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundVar {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -297,6 +307,14 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::VariantFlags {\n     }\n }\n \n+impl_stable_hash_for!(\n+    impl<'tcx> for enum ty::InferConst<'tcx> [ ty::InferConst ] {\n+        Var(vid),\n+        Fresh(i),\n+        Canonical(debruijn, var),\n+    }\n+);\n+\n impl_stable_hash_for!(enum ty::VariantDiscr {\n     Explicit(def_id),\n     Relative(distance)\n@@ -310,11 +328,14 @@ impl_stable_hash_for!(struct ty::FieldDef {\n \n impl_stable_hash_for!(\n     impl<'tcx> for enum mir::interpret::ConstValue<'tcx> [ mir::interpret::ConstValue ] {\n+        Param(param),\n+        Infer(infer),\n         Scalar(val),\n         Slice(a, b),\n         ByRef(ptr, alloc),\n     }\n );\n+\n impl_stable_hash_for!(struct crate::mir::interpret::RawConst<'tcx> {\n     alloc_id,\n     ty,\n@@ -518,6 +539,7 @@ impl_stable_hash_for!(struct ty::GenericParamDef {\n impl_stable_hash_for!(enum ty::GenericParamDefKind {\n     Lifetime,\n     Type { has_default, object_lifetime_default, synthetic },\n+    Const,\n });\n \n impl_stable_hash_for!(\n@@ -736,6 +758,11 @@ for ty::FloatVid\n     }\n }\n \n+impl_stable_hash_for!(struct ty::ParamConst {\n+    index,\n+    name\n+});\n+\n impl_stable_hash_for!(struct ty::ParamTy {\n     idx,\n     name"}]}