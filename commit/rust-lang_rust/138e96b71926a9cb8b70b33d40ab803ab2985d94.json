{"sha": "138e96b71926a9cb8b70b33d40ab803ab2985d94", "node_id": "C_kwDOAAsO6NoAKDEzOGU5NmI3MTkyNmE5Y2I4YjcwYjMzZDQwYWI4MDNhYjI5ODVkOTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-23T16:12:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-23T16:12:43Z"}, "message": "Do not require QueryCtxt for cache_on_disk.", "tree": {"sha": "65b26bb237da92d97786d78bbca7c6d3e8d9cc0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65b26bb237da92d97786d78bbca7c6d3e8d9cc0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/138e96b71926a9cb8b70b33d40ab803ab2985d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/138e96b71926a9cb8b70b33d40ab803ab2985d94", "html_url": "https://github.com/rust-lang/rust/commit/138e96b71926a9cb8b70b33d40ab803ab2985d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/138e96b71926a9cb8b70b33d40ab803ab2985d94/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "html_url": "https://github.com/rust-lang/rust/commit/7c0920f5fbe5d88f0ec32de3763e150aca3227b9"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "5ff12a17887df4bb8793728aa69209959d7bbb58", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=138e96b71926a9cb8b70b33d40ab803ab2985d94", "patch": "@@ -372,7 +372,7 @@ fn add_query_description_impl(\n         quote! {\n             #[allow(unused_variables, unused_braces)]\n             #[inline]\n-            fn cache_on_disk(#tcx: QueryCtxt<'tcx>, #key: &Self::Key) -> bool {\n+            fn cache_on_disk(#tcx: TyCtxt<'tcx>, #key: &Self::Key) -> bool {\n                 #expr\n             }\n \n@@ -384,7 +384,7 @@ fn add_query_description_impl(\n         }\n         quote! {\n             #[inline]\n-            fn cache_on_disk(_: QueryCtxt<'tcx>, _: &Self::Key) -> bool {\n+            fn cache_on_disk(_: TyCtxt<'tcx>, _: &Self::Key) -> bool {\n                 false\n             }\n "}, {"sha": "552906aac31a7f5ac79b3abd45e612dd981f8de4", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=138e96b71926a9cb8b70b33d40ab803ab2985d94", "patch": "@@ -1033,7 +1033,7 @@ where\n         if res.is_err() {\n             return;\n         }\n-        if Q::cache_on_disk(tcx, &key) {\n+        if Q::cache_on_disk(*tcx.dep_context(), &key) {\n             let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n \n             // Record position of the cache entry."}, {"sha": "6282a9dcd52d73fcabf9a7e7cccc8d6fcd7e9a10", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=138e96b71926a9cb8b70b33d40ab803ab2985d94", "patch": "@@ -315,7 +315,7 @@ macro_rules! define_queries {\n                 } else {\n                     tcx.queries.extern_providers.$name\n                 };\n-                let cache_on_disk = Self::cache_on_disk(tcx, key);\n+                let cache_on_disk = Self::cache_on_disk(tcx.tcx, key);\n                 QueryVtable {\n                     anon: is_anon!([$($modifiers)*]),\n                     eval_always: is_eval_always!([$($modifiers)*]),\n@@ -415,7 +415,6 @@ macro_rules! define_queries {\n                     debug_assert!(tcx.dep_graph.is_green(&dep_node));\n \n                     let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    let tcx = QueryCtxt::from_tcx(tcx);\n                     if queries::$name::cache_on_disk(tcx, &key) {\n                         let _ = tcx.$name(key);\n                     }"}, {"sha": "d2b102b6f89681358bca92bfb1cd9b3bf8d53b87", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/138e96b71926a9cb8b70b33d40ab803ab2985d94/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=138e96b71926a9cb8b70b33d40ab803ab2985d94", "patch": "@@ -71,5 +71,5 @@ pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVtable<CTX, Self::Key, Self::Value>;\n \n-    fn cache_on_disk(tcx: CTX, key: &Self::Key) -> bool;\n+    fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n }"}]}