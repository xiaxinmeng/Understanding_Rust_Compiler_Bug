{"sha": "9ff6c77d2f65ea57bbe7d656cf81071645823b90", "node_id": "C_kwDOAAsO6NoAKDlmZjZjNzdkMmY2NWVhNTdiYmU3ZDY1NmNmODEwNzE2NDU4MjNiOTA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-29T08:21:44Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:22Z"}, "message": "tests: avoid inadvertent diffs in diag derive test\n\nIn the diagnostic derive test, a \"the following other types implement\ntrait\" diagnostic is output which lists rustc types that implement\n`IntoDiagnosticArg`. As the output of this test can change due to new\ninternal compiler types like implementing `IntoDiagnosticArg`, it can\nstart failing without indicating a problem to be fixed - so normalize\nthat output away.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "9f11ed6eab28b8c17f2f8d78cf67b2f36f8255ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f11ed6eab28b8c17f2f8d78cf67b2f36f8255ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff6c77d2f65ea57bbe7d656cf81071645823b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff6c77d2f65ea57bbe7d656cf81071645823b90", "html_url": "https://github.com/rust-lang/rust/commit/9ff6c77d2f65ea57bbe7d656cf81071645823b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff6c77d2f65ea57bbe7d656cf81071645823b90/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedd4c63f8d49699b7844490503a63c9207d851a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd4c63f8d49699b7844490503a63c9207d851a", "html_url": "https://github.com/rust-lang/rust/commit/fedd4c63f8d49699b7844490503a63c9207d851a"}], "stats": {"total": 116, "additions": 56, "deletions": 60}, "files": [{"sha": "18283c19cb42c1733e1f87abfd93e108101a263f", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff6c77d2f65ea57bbe7d656cf81071645823b90/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff6c77d2f65ea57bbe7d656cf81071645823b90/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=9ff6c77d2f65ea57bbe7d656cf81071645823b90", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n \n+// normalize-stderr-test \"the following other types implement trait `IntoDiagnosticArg`:(?:.*\\n){0,9}\\s+and \\d+ others\" -> \"normalized in stderr\"\n+\n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n // changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n // the test is just ignored on stable and beta:"}, {"sha": "9e2e34e4bec81b8558f03a7e87e6f557a826c3d1", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 54, "deletions": 60, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/9ff6c77d2f65ea57bbe7d656cf81071645823b90/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ff6c77d2f65ea57bbe7d656cf81071645823b90/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=9ff6c77d2f65ea57bbe7d656cf81071645823b90", "patch": "@@ -1,5 +1,5 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n-  --> $DIR/diagnostic-derive.rs:37:1\n+  --> $DIR/diagnostic-derive.rs:39:1\n    |\n LL | / #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -10,21 +10,21 @@ LL | | }\n    | |_^\n \n error: `#[error = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:46:1\n+  --> $DIR/diagnostic-derive.rs:48:1\n    |\n LL | #[error = \"E0123\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n error: `#[nonsense(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:51:1\n+  --> $DIR/diagnostic-derive.rs:53:1\n    |\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: only `error`, `warning`, `help` and `note` are valid attributes\n \n error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:51:1\n+  --> $DIR/diagnostic-derive.rs:53:1\n    |\n LL | / #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -36,15 +36,15 @@ LL | | struct InvalidStructAttr {}\n    = help: use the `#[error(...)]` attribute to create an error\n \n error: `#[error(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:58:9\n+  --> $DIR/diagnostic-derive.rs:60:9\n    |\n LL | #[error(\"E0123\")]\n    |         ^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:58:1\n+  --> $DIR/diagnostic-derive.rs:60:1\n    |\n LL | / #[error(\"E0123\")]\n LL | |\n@@ -55,15 +55,15 @@ LL | | struct InvalidLitNestedAttr {}\n    = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:69:9\n+  --> $DIR/diagnostic-derive.rs:71:9\n    |\n LL | #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:69:1\n+  --> $DIR/diagnostic-derive.rs:71:1\n    |\n LL | / #[error(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -74,15 +74,15 @@ LL | | struct InvalidNestedStructAttr1 {}\n    = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:75:9\n+  --> $DIR/diagnostic-derive.rs:77:9\n    |\n LL | #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:75:1\n+  --> $DIR/diagnostic-derive.rs:77:1\n    |\n LL | / #[error(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -93,15 +93,15 @@ LL | | struct InvalidNestedStructAttr2 {}\n    = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:81:9\n+  --> $DIR/diagnostic-derive.rs:83:9\n    |\n LL | #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |         ^^^^^^^^^^^^\n    |\n    = help: first argument of the attribute should be the diagnostic slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:81:1\n+  --> $DIR/diagnostic-derive.rs:83:1\n    |\n LL | / #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -112,119 +112,119 @@ LL | | struct InvalidNestedStructAttr3 {}\n    = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: `#[error(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:87:59\n+  --> $DIR/diagnostic-derive.rs:89:59\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n    |                                                           ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: `#[suggestion = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:94:5\n+  --> $DIR/diagnostic-derive.rs:96:5\n    |\n LL |     #[suggestion = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:1\n+  --> $DIR/diagnostic-derive.rs:103:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:1\n+  --> $DIR/diagnostic-derive.rs:102:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:1\n+  --> $DIR/diagnostic-derive.rs:103:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:1\n+  --> $DIR/diagnostic-derive.rs:102:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:101:50\n+  --> $DIR/diagnostic-derive.rs:103:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    |                                                  ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:100:50\n+  --> $DIR/diagnostic-derive.rs:102:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:1\n+  --> $DIR/diagnostic-derive.rs:111:1\n    |\n LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:1\n+  --> $DIR/diagnostic-derive.rs:110:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:1\n+  --> $DIR/diagnostic-derive.rs:111:1\n    |\n LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:1\n+  --> $DIR/diagnostic-derive.rs:110:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:52\n+  --> $DIR/diagnostic-derive.rs:111:52\n    |\n LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n    |                                                    ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:108:50\n+  --> $DIR/diagnostic-derive.rs:110:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:116:66\n+  --> $DIR/diagnostic-derive.rs:118:66\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                                  ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:116:50\n+  --> $DIR/diagnostic-derive.rs:118:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                  ^^^^^^^\n \n error: `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:121:43\n+  --> $DIR/diagnostic-derive.rs:123:43\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:126:1\n+  --> $DIR/diagnostic-derive.rs:128:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the `#[error(...)]` attribute to create an error\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:129:1\n+  --> $DIR/diagnostic-derive.rs:131:1\n    |\n LL | / #[error(code = \"E0456\")]\n LL | |\n@@ -234,33 +234,33 @@ LL | | struct SlugNotProvided {}\n    = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:140:5\n+  --> $DIR/diagnostic-derive.rs:142:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:148:5\n+  --> $DIR/diagnostic-derive.rs:150:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n    |\n    = help: only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:165:5\n+  --> $DIR/diagnostic-derive.rs:167:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:173:45\n+  --> $DIR/diagnostic-derive.rs:175:45\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n    |                                             ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:178:16\n+  --> $DIR/diagnostic-derive.rs:180:16\n    |\n LL | #[derive(SessionDiagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -271,7 +271,7 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:188:15\n+  --> $DIR/diagnostic-derive.rs:190:15\n    |\n LL | #[derive(SessionDiagnostic)]\n    |               ^ unmatched `}` in format string\n@@ -280,29 +280,29 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/diagnostic-derive.rs:208:5\n+  --> $DIR/diagnostic-derive.rs:210:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:233:18\n+  --> $DIR/diagnostic-derive.rs:235:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:241:18\n+  --> $DIR/diagnostic-derive.rs:243:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:263:5\n+  --> $DIR/diagnostic-derive.rs:265:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -312,88 +312,82 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:278:5\n+  --> $DIR/diagnostic-derive.rs:280:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:286:5\n+  --> $DIR/diagnostic-derive.rs:288:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:294:5\n+  --> $DIR/diagnostic-derive.rs:296:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:445:52\n+  --> $DIR/diagnostic-derive.rs:447:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:453:52\n+  --> $DIR/diagnostic-derive.rs:455:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:516:5\n+  --> $DIR/diagnostic-derive.rs:518:5\n    |\n LL |     #[label(typeck::label, foo)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:524:5\n+  --> $DIR/diagnostic-derive.rs:526:5\n    |\n LL |     #[label(typeck::label, foo = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:5\n+  --> $DIR/diagnostic-derive.rs:534:5\n    |\n LL |     #[label(typeck::label, foo(\"...\"))]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:51:3\n+  --> $DIR/diagnostic-derive.rs:53:3\n    |\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:148:7\n+  --> $DIR/diagnostic-derive.rs:150:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`\n-  --> $DIR/diagnostic-derive.rs:64:9\n+  --> $DIR/diagnostic-derive.rs:66:9\n    |\n LL | #[error(nonsense, code = \"E0123\")]\n    |         ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:338:10\n+  --> $DIR/diagnostic-derive.rs:340:10\n    |\n LL | #[derive(SessionDiagnostic)]\n    |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n-   = help: the following other types implement trait `IntoDiagnosticArg`:\n-             &'a str\n-             Ident\n-             String\n-             Symbol\n-             rustc_middle::ty::Ty<'tcx>\n-             usize\n+   = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:538:19\n    |"}]}