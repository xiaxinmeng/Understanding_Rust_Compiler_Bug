{"sha": "854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NGIzYTliNzNjYTc4NTUxYThjYThhOTMzZTA3YTEyYTBlNzdhZWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T08:20:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-20T21:53:28Z"}, "message": "Use ast_map in typeck, instead of building another index", "tree": {"sha": "6ded6b6b33c32ae8af1e601b397195eb681a20a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ded6b6b33c32ae8af1e601b397195eb681a20a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "html_url": "https://github.com/rust-lang/rust/commit/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b", "html_url": "https://github.com/rust-lang/rust/commit/40db3aa6fbe2f0d8d7f9bb85a9fd47b8cca2938b"}], "stats": {"total": 61, "additions": 12, "deletions": 49}, "files": [{"sha": "d265ac2aeeefa3a093f86cf86f491a1e0a980dc3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "patch": "@@ -85,7 +85,7 @@ fn compile_input(session::session sess, eval::env env, str input,\n     auto d =\n         time(time_passes, \"resolution\",\n              bind resolve::resolve_crate(sess, ast_map, crate));\n-    auto ty_cx = ty::mk_ctxt(sess, d._0, d._1);\n+    auto ty_cx = ty::mk_ctxt(sess, d._0, d._1, ast_map);\n     time[()](time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, crate));\n     if (sess.get_opts().run_typestate) {\n@@ -111,7 +111,7 @@ fn pretty_print_input(session::session sess, eval::env env, str input,\n         case (ppm_typed) {\n             auto amap = middle::ast_map::map_crate(*crate);\n             auto d = resolve::resolve_crate(sess, amap, crate);\n-            auto ty_cx = ty::mk_ctxt(sess, d._0, d._1);\n+            auto ty_cx = ty::mk_ctxt(sess, d._0, d._1, amap);\n             typeck::check_crate(ty_cx, crate);\n             mode = ppaux::mo_typed(ty_cx);\n         }"}, {"sha": "77b8639f26057766734984834f105fe92da26567", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "patch": "@@ -190,12 +190,6 @@ type method =\n         controlflow cf,\n         vec[@constr_def] constrs);\n \n-tag any_item {\n-    any_item_rust(@ast::item);\n-    any_item_native(@ast::native_item, ast::native_abi);\n-}\n-\n-type item_table = hashmap[ast::node_id, any_item];\n type constr_table = hashmap[ast::node_id, vec[constr_def]]; \n \n type mt = rec(t ty, ast::mutability mut);\n@@ -210,7 +204,7 @@ type ctxt =\n         session::session sess,\n         resolve::def_map def_map,\n         node_type_table node_types,\n-        item_table items, // Only contains type items\n+        ast_map::map items,\n \n         constr_table fn_constrs,\n         type_cache tcache,\n@@ -395,18 +389,18 @@ fn mk_rcache() -> creader_cache {\n     ret map::mk_hashmap[tup(int, uint, uint), t](h, e);\n }\n \n-fn mk_ctxt(session::session s, resolve::def_map dm, constr_table cs) -> ctxt {\n+fn mk_ctxt(session::session s, resolve::def_map dm, constr_table cs,\n+           ast_map::map amap) -> ctxt {\n     let node_type_table ntt =\n         @smallintmap::mk[ty::ty_param_substs_opt_and_ty]();\n     auto tcache = new_def_hash[ty::ty_param_count_and_ty]();\n-    auto items = new_int_hash[any_item]();\n     auto ts = @interner::mk[raw_t](hash_raw_ty, eq_raw_ty);\n     auto cx =\n         rec(ts=ts,\n             sess=s,\n             def_map=dm,\n             node_types=ntt,\n-            items=items,\n+            items=amap,\n             fn_constrs=cs,\n             tcache=tcache,\n             rcache=mk_rcache(),\n@@ -2691,7 +2685,7 @@ fn tag_variants(&ctxt cx, &ast::def_id id) -> vec[variant_info] {\n     }\n     assert (cx.items.contains_key(id._1));\n     alt (cx.items.get(id._1)) {\n-        case (any_item_rust(?item)) {\n+        case (ast_map::node_item(?item)) {\n             alt (item.node) {\n                 case (ast::item_tag(?variants, _)) {\n                     let vec[variant_info] result = [];"}, {"sha": "381cc442fdc45e08d1ccaeafd24e86448d147246", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854b3a9b73ca78551a8ca8a933e07a12a0e77aeb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=854b3a9b73ca78551a8ca8a933e07a12a0e77aeb", "patch": "@@ -492,9 +492,10 @@ mod collect {\n         auto it = cx.tcx.items.get(id._1);\n         auto tpt;\n         alt (it) {\n-            case (ty::any_item_rust(?item)) { tpt = ty_of_item(cx, item); }\n-            case (ty::any_item_native(?native_item, ?abi)) {\n-                tpt = ty_of_native_item(cx, native_item, abi);\n+            case (ast_map::node_item(?item)) { tpt = ty_of_item(cx, item); }\n+            case (ast_map::node_native_item(?native_item)) {\n+                tpt = ty_of_native_item(cx, native_item,\n+                                        ast::native_abi_cdecl);\n             }\n         }\n         ret tpt;\n@@ -671,30 +672,6 @@ mod collect {\n         ret vec::map[@ast::method,\n                      method](bind ty_of_method(cx, _), object.methods);\n     }\n-    fn collect(ty::item_table id_to_ty_item, &@ast::item i) {\n-        alt (i.node) {\n-            case (ast::item_ty(_, _)) {\n-                id_to_ty_item.insert(i.id, ty::any_item_rust(i));\n-            }\n-            case (ast::item_tag(_, _)) {\n-                id_to_ty_item.insert(i.id, ty::any_item_rust(i));\n-            }\n-            case (ast::item_obj(_, _, _)) {\n-                id_to_ty_item.insert(i.id, ty::any_item_rust(i));\n-            }\n-            case (_) {/* empty */ }\n-        }\n-    }\n-    fn collect_native(ty::item_table id_to_ty_item, &@ast::native_item i) {\n-        alt (i.node) {\n-            case (ast::native_item_ty(_, ?id)) {\n-                // The abi of types is not used.\n-                auto abi = ast::native_abi_cdecl;\n-                id_to_ty_item.insert(id, ty::any_item_native(i, abi));\n-            }\n-            case (_) {/* no-op */ }\n-        }\n-    }\n     fn convert(@ctxt cx, @mutable option::t[ast::native_abi] abi,\n                &@ast::item it) {\n         alt (it.node) {\n@@ -790,20 +767,12 @@ mod collect {\n         }\n     }\n     fn collect_item_types(&ty::ctxt tcx, &@ast::crate crate) {\n-        // First pass: collect all type item IDs.\n-\n-        auto module = crate.node.module;\n-        auto visit =\n-            rec(visit_item_pre=bind collect(tcx.items, _),\n-                visit_native_item_pre=bind collect_native(tcx.items, _)\n-                with walk::default_visitor());\n-        walk::walk_crate(visit, *crate);\n         // We have to propagate the surrounding ABI to the native items\n         // contained within the native module.\n \n         auto abi = @mutable none[ast::native_abi];\n         auto cx = @rec(tcx=tcx);\n-        visit =\n+        auto visit =\n             rec(visit_item_pre=bind convert(cx, abi, _),\n                 visit_native_item_pre=bind convert_native(cx, abi, _)\n                 with walk::default_visitor());"}]}