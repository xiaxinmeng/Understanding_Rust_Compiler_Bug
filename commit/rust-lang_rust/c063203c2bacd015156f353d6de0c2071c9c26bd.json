{"sha": "c063203c2bacd015156f353d6de0c2071c9c26bd", "node_id": "C_kwDOAAsO6NoAKGMwNjMyMDNjMmJhY2QwMTUxNTZmMzUzZDZkZTBjMjA3MWM5YzI2YmQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-07T08:43:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-07T13:38:17Z"}, "message": "ast: Fix naming conventions in AST structures\n\nTraitKind -> Trait\nTyAliasKind -> TyAlias\nImplKind -> Impl\nFnKind -> Fn\n\nAll `*Kind`s in AST are supposed to be enums.\n\nTuple structs are converted to braced structs for the types above, and fields are reordered in syntactic order.\n\nAlso, mutable AST visitor now correctly visit spans in defaultness, unsafety, impl polarity and constness.", "tree": {"sha": "9a5265abfa6229d75f8da5ef99d3217384851080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5265abfa6229d75f8da5ef99d3217384851080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c063203c2bacd015156f353d6de0c2071c9c26bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c063203c2bacd015156f353d6de0c2071c9c26bd", "html_url": "https://github.com/rust-lang/rust/commit/c063203c2bacd015156f353d6de0c2071c9c26bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c063203c2bacd015156f353d6de0c2071c9c26bd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "url": "https://api.github.com/repos/rust-lang/rust/commits/e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "html_url": "https://github.com/rust-lang/rust/commit/e674d0a59924a5c36ce0ccb6e21d6e2419b08145"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "d4ba072807f8f891adb1de3f37b3327d5b9ea0eb", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=c063203c2bacd015156f353d6de0c2071c9c26bd", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n+use rustc_ast::ast::{Async, AttrKind, Attribute, Fn, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -639,7 +639,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(box FnKind(_, sig, _, Some(block))) if item.ident.name == sym::main => {\n+                            ItemKind::Fn(box Fn { sig, body: Some(block), .. }) if item.ident.name == sym::main => {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "09b6e20083889e863ac884636ad2c3b20f08db50", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=c063203c2bacd015156f353d6de0c2071c9c26bd", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::in_macro;\n-use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n+use rustc_ast::ast::{AssocItemKind, Extern, Fn, FnSig, Impl, Item, ItemKind, Trait, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -162,17 +162,17 @@ impl EarlyLintPass for ExcessiveBools {\n                     );\n                 }\n             },\n-            ItemKind::Impl(box ImplKind {\n+            ItemKind::Impl(box Impl {\n                 of_trait: None, items, ..\n             })\n-            | ItemKind::Trait(box TraitKind(.., items)) => {\n+            | ItemKind::Trait(box Trait { items, .. }) => {\n                 for item in items {\n-                    if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n-                        self.check_fn_sig(cx, fn_sig, item.span);\n+                    if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n+                        self.check_fn_sig(cx, sig, item.span);\n                     }\n                 }\n             },\n-            ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n+            ItemKind::Fn(box Fn { sig, .. }) => self.check_fn_sig(cx, sig, item.span),\n             _ => (),\n         }\n     }"}, {"sha": "e28cc49bf2a1a0f955ac3686c132d4c201b2b6ef", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=c063203c2bacd015156f353d6de0c2071c9c26bd", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat, PatKind,\n+    self, Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -357,7 +357,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let ItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n+        if let ItemKind::Fn(box ast::Fn { ref sig, body: Some(ref blk), .. }) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n@@ -367,7 +367,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let AssocItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n+        if let AssocItemKind::Fn(box ast::Fn { ref sig, body: Some(ref blk), .. }) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }"}, {"sha": "b412e15ae4f82c9b474f71837b84cb944ebbd23e", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=c063203c2bacd015156f353d6de0c2071c9c26bd", "patch": "@@ -4,7 +4,7 @@ use std::ops::{Deref, Range};\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n-use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n+use rustc_ast::ast::{Expr, ExprKind, Impl, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -243,7 +243,7 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box ImplKind {\n+        if let ItemKind::Impl(box Impl {\n             of_trait: Some(trait_ref),\n             ..\n         }) = &item.kind"}, {"sha": "1b05a8a35046ede0d99e4a5b439f52659ab2a075", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c063203c2bacd015156f353d6de0c2071c9c26bd/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=c063203c2bacd015156f353d6de0c2071c9c26bd", "patch": "@@ -250,7 +250,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (Mod(lu, lmk), Mod(ru, rmk)) => {\n@@ -266,7 +267,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, eq_str_lit) && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -276,7 +278,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n         },\n-        (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n+        (Trait(box ast::Trait { is_auto: la, unsafety: lu, generics: lg, bounds: lb, items: li }),\n+         Trait(box ast::Trait { is_auto: ra, unsafety: ru, generics: rg, bounds: rb, items: ri })) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && eq_generics(lg, rg)\n@@ -285,7 +288,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, eq_generic_bound),\n         (\n-            Impl(box ImplKind {\n+            Impl(box ast::Impl {\n                 unsafety: lu,\n                 polarity: lp,\n                 defaultness: ld,\n@@ -295,7 +298,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 self_ty: lst,\n                 items: li,\n             }),\n-            Impl(box ImplKind {\n+            Impl(box ast::Impl {\n                 unsafety: ru,\n                 polarity: rp,\n                 defaultness: rd,\n@@ -325,10 +328,12 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -343,10 +348,12 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n+        (Fn(box ast::Fn { defaultness: ld, sig: lf, generics: lg, body: lb }),\n+         Fn(box ast::Fn { defaultness: rd, sig: rf, generics: rg, body: rb })) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)"}]}