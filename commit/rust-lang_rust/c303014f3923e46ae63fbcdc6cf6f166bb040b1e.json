{"sha": "c303014f3923e46ae63fbcdc6cf6f166bb040b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMDMwMTRmMzkyM2U0NmFlNjNmYmNkYzZjZjZmMTY2YmIwNDBiMWU=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-01-15T19:35:42Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-01-15T19:35:42Z"}, "message": "Create new nodes only when applying changes", "tree": {"sha": "5bd9f3c17f87851325565c3fb0aa698d5583f62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd9f3c17f87851325565c3fb0aa698d5583f62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c303014f3923e46ae63fbcdc6cf6f166bb040b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c303014f3923e46ae63fbcdc6cf6f166bb040b1e", "html_url": "https://github.com/rust-lang/rust/commit/c303014f3923e46ae63fbcdc6cf6f166bb040b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c303014f3923e46ae63fbcdc6cf6f166bb040b1e/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "html_url": "https://github.com/rust-lang/rust/commit/a3a722de9ffaefdd0a46194e7ea2edac9754fd38"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "6da1795da63bd09c7c8ba5670cec66d7abda23fd", "filename": "crates/assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c303014f3923e46ae63fbcdc6cf6f166bb040b1e/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c303014f3923e46ae63fbcdc6cf6f166bb040b1e/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=c303014f3923e46ae63fbcdc6cf6f166bb040b1e", "patch": "@@ -32,28 +32,33 @@ pub(crate) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let use_: ast::Use = tree_list.syntax().ancestors().find_map(ast::Use::cast)?;\n     let path = resolve_full_path(&tree)?;\n \n-    let new_use = ast::make::use_(\n-        use_.visibility(),\n-        ast::make::use_tree(path, None, tree.rename(), tree.star_token().is_some()),\n-    );\n-\n-    let mut rewriter = SyntaxRewriter::default();\n-    rewriter += tree.remove();\n-    rewriter.insert_after(use_.syntax(), &ast::make::tokens::single_newline());\n-    if let ident_level @ 1..=usize::MAX = use_.indent_level().0 as usize {\n-        rewriter.insert_after(\n-            use_.syntax(),\n-            &ast::make::tokens::whitespace(&\" \".repeat(4 * ident_level)),\n-        );\n-    }\n-    rewriter.insert_after(use_.syntax(), new_use.syntax());\n-\n     let target = tree.syntax().text_range();\n     acc.add(\n         AssistId(\"unmerge_use\", AssistKind::RefactorRewrite),\n         \"Unmerge use\",\n         target,\n         |builder| {\n+            let new_use = ast::make::use_(\n+                use_.visibility(),\n+                ast::make::use_tree(\n+                    path,\n+                    tree.use_tree_list(),\n+                    tree.rename(),\n+                    tree.star_token().is_some(),\n+                ),\n+            );\n+\n+            let mut rewriter = SyntaxRewriter::default();\n+            rewriter += tree.remove();\n+            rewriter.insert_after(use_.syntax(), &ast::make::tokens::single_newline());\n+            if let ident_level @ 1..=usize::MAX = use_.indent_level().0 as usize {\n+                rewriter.insert_after(\n+                    use_.syntax(),\n+                    &ast::make::tokens::whitespace(&\" \".repeat(4 * ident_level)),\n+                );\n+            }\n+            rewriter.insert_after(use_.syntax(), new_use.syntax());\n+\n             builder.rewrite(rewriter);\n         },\n     )\n@@ -193,6 +198,16 @@ use foo::bar::{baz::{qux$0, foobar}, barbaz};\n             r\"\n use foo::bar::{baz::{foobar}, barbaz};\n use foo::bar::baz::qux;\n+\",\n+        );\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use foo::bar::{baz$0::{qux, foobar}, barbaz};\n+\",\n+            r\"\n+use foo::bar::{barbaz};\n+use foo::bar::baz::{qux, foobar};\n \",\n         );\n     }"}]}