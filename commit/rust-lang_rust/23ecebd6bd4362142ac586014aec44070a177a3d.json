{"sha": "23ecebd6bd4362142ac586014aec44070a177a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZWNlYmQ2YmQ0MzYyMTQyYWM1ODYwMTRhZWM0NDA3MGExNzdhM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-14T23:29:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-14T23:29:51Z"}, "message": "Auto merge of #43174 - RalfJung:refactor-ty, r=nikomatsakis\n\nRefactor: {Lvalue,Rvalue,Operand}::ty only need the locals' types, not the full &Mir\n\nI am writing code that needs to call these `ty` methods while mutating MIR -- which is impossible with the current API.\n\nEven with the refactoring the situation is not great: I am cloning the `local_decls` and then passing the clone to the `ty` methods. I have to clone because `Mir::basic_blocks_mut` borrows the entire `Mir` including the `local_decls`. But even that is better than not being able to get these types at all...\n\nCc @nikomatsakis", "tree": {"sha": "e5ce2c9b5b3f58ba19b194879973b63cb314df6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ce2c9b5b3f58ba19b194879973b63cb314df6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ecebd6bd4362142ac586014aec44070a177a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ecebd6bd4362142ac586014aec44070a177a3d", "html_url": "https://github.com/rust-lang/rust/commit/23ecebd6bd4362142ac586014aec44070a177a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ecebd6bd4362142ac586014aec44070a177a3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d9d82d3dff580d2ec31e4db5cdef73c9625a864", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9d82d3dff580d2ec31e4db5cdef73c9625a864", "html_url": "https://github.com/rust-lang/rust/commit/6d9d82d3dff580d2ec31e4db5cdef73c9625a864"}, {"sha": "0bbc3158300452dbb45931ab8d6740faa840d486", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbc3158300452dbb45931ab8d6740faa840d486", "html_url": "https://github.com/rust-lang/rust/commit/0bbc3158300452dbb45931ab8d6740faa840d486"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "d176ae761e181aa03460c7dc92262196fa8aa7b9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=23ecebd6bd4362142ac586014aec44070a177a3d", "patch": "@@ -66,6 +66,25 @@ macro_rules! newtype_index {\n     )\n }\n \n+/// Types for locals\n+type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n+\n+pub trait HasLocalDecls<'tcx> {\n+    fn local_decls(&self) -> &LocalDecls<'tcx>;\n+}\n+\n+impl<'tcx> HasLocalDecls<'tcx> for LocalDecls<'tcx> {\n+    fn local_decls(&self) -> &LocalDecls<'tcx> {\n+        self\n+    }\n+}\n+\n+impl<'tcx> HasLocalDecls<'tcx> for Mir<'tcx> {\n+    fn local_decls(&self) -> &LocalDecls<'tcx> {\n+        &self.local_decls\n+    }\n+}\n+\n /// Lowered representation of a single function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mir<'tcx> {\n@@ -90,7 +109,7 @@ pub struct Mir<'tcx> {\n     /// The first local is the return value pointer, followed by `arg_count`\n     /// locals for the function arguments, followed by any user-declared\n     /// variables and temporaries.\n-    pub local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    pub local_decls: LocalDecls<'tcx>,\n \n     /// Number of arguments this function takes.\n     ///"}, {"sha": "1af80771fb952ae6c24707e1633a883bfa786eb9", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=23ecebd6bd4362142ac586014aec44070a177a3d", "patch": "@@ -121,31 +121,34 @@ impl<'tcx> TypeFoldable<'tcx> for LvalueTy<'tcx> {\n }\n \n impl<'tcx> Lvalue<'tcx> {\n-    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> LvalueTy<'tcx> {\n+    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> LvalueTy<'tcx>\n+        where D: HasLocalDecls<'tcx>\n+    {\n         match *self {\n             Lvalue::Local(index) =>\n-                LvalueTy::Ty { ty: mir.local_decls[index].ty },\n+                LvalueTy::Ty { ty: local_decls.local_decls()[index].ty },\n             Lvalue::Static(ref data) =>\n                 LvalueTy::Ty { ty: data.ty },\n             Lvalue::Projection(ref proj) =>\n-                proj.base.ty(mir, tcx).projection_ty(tcx, &proj.elem),\n+                proj.base.ty(local_decls, tcx).projection_ty(tcx, &proj.elem),\n         }\n     }\n }\n \n impl<'tcx> Rvalue<'tcx> {\n-    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>\n+    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>\n+        where D: HasLocalDecls<'tcx>\n     {\n         match *self {\n-            Rvalue::Use(ref operand) => operand.ty(mir, tcx),\n+            Rvalue::Use(ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Repeat(ref operand, ref count) => {\n-                let op_ty = operand.ty(mir, tcx);\n+                let op_ty = operand.ty(local_decls, tcx);\n                 let count = count.as_u64(tcx.sess.target.uint_type);\n                 assert_eq!(count as usize as u64, count);\n                 tcx.mk_array(op_ty, count as usize)\n             }\n             Rvalue::Ref(reg, bk, ref lv) => {\n-                let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n+                let lv_ty = lv.ty(local_decls, tcx).to_ty(tcx);\n                 tcx.mk_ref(reg,\n                     ty::TypeAndMut {\n                         ty: lv_ty,\n@@ -156,22 +159,22 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Len(..) => tcx.types.usize,\n             Rvalue::Cast(.., ty) => ty,\n             Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n-                let lhs_ty = lhs.ty(mir, tcx);\n-                let rhs_ty = rhs.ty(mir, tcx);\n+                let lhs_ty = lhs.ty(local_decls, tcx);\n+                let rhs_ty = rhs.ty(local_decls, tcx);\n                 op.ty(tcx, lhs_ty, rhs_ty)\n             }\n             Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n-                let lhs_ty = lhs.ty(mir, tcx);\n-                let rhs_ty = rhs.ty(mir, tcx);\n+                let lhs_ty = lhs.ty(local_decls, tcx);\n+                let rhs_ty = rhs.ty(local_decls, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n                 tcx.intern_tup(&[ty, tcx.types.bool], false)\n             }\n             Rvalue::UnaryOp(UnOp::Not, ref operand) |\n             Rvalue::UnaryOp(UnOp::Neg, ref operand) => {\n-                operand.ty(mir, tcx)\n+                operand.ty(local_decls, tcx)\n             }\n             Rvalue::Discriminant(ref lval) => {\n-                let ty = lval.ty(mir, tcx).to_ty(tcx);\n+                let ty = lval.ty(local_decls, tcx).to_ty(tcx);\n                 if let ty::TyAdt(adt_def, _) = ty.sty {\n                     adt_def.repr.discr_type().to_ty(tcx)\n                 } else {\n@@ -189,7 +192,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                     AggregateKind::Tuple => {\n                         tcx.mk_tup(\n-                            ops.iter().map(|op| op.ty(mir, tcx)),\n+                            ops.iter().map(|op| op.ty(local_decls, tcx)),\n                             false\n                         )\n                     }\n@@ -206,9 +209,11 @@ impl<'tcx> Rvalue<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>\n+        where D: HasLocalDecls<'tcx>\n+    {\n         match self {\n-            &Operand::Consume(ref l) => l.ty(mir, tcx).to_ty(tcx),\n+            &Operand::Consume(ref l) => l.ty(local_decls, tcx).to_ty(tcx),\n             &Operand::Constant(ref c) => c.ty,\n         }\n     }"}, {"sha": "d3fee8045e6e3bd916c9c2831e461cb8e1eb8f63", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=23ecebd6bd4362142ac586014aec44070a177a3d", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     work_list.push(target);\n                     // If the location doesn't actually need dropping, treat it like\n                     // a regular goto.\n-                    let ty = location.ty(&callee_mir, tcx).subst(tcx, callsite.substs);\n+                    let ty = location.ty(callee_mir, tcx).subst(tcx, callsite.substs);\n                     let ty = ty.to_ty(tcx);\n                     if ty.needs_drop(tcx, param_env) {\n                         cost += CALL_PENALTY;"}, {"sha": "9bb29c340d9839de4a3b7454fa0a36d73ef3f37b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=23ecebd6bd4362142ac586014aec44070a177a3d", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::TerminatorKind::Drop { ref location, target, unwind } => {\n-                let ty = location.ty(&self.mir, bcx.tcx()).to_ty(bcx.tcx());\n+                let ty = location.ty(self.mir, bcx.tcx()).to_ty(bcx.tcx());\n                 let ty = self.monomorphize(&ty);\n                 let drop_fn = monomorphize::resolve_drop_in_place(bcx.ccx.shared(), ty);\n \n@@ -438,7 +438,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 let extra_args = &args[sig.inputs().len()..];\n                 let extra_args = extra_args.iter().map(|op_arg| {\n-                    let op_ty = op_arg.ty(&self.mir, bcx.tcx());\n+                    let op_ty = op_arg.ty(self.mir, bcx.tcx());\n                     self.monomorphize(&op_ty)\n                 }).collect::<Vec<_>>();\n "}, {"sha": "af8976967a1e7a9536267260d5f8039abaf9242e", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ecebd6bd4362142ac586014aec44070a177a3d/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=23ecebd6bd4362142ac586014aec44070a177a3d", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n     pub fn monomorphized_lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n         let tcx = self.ccx.tcx();\n-        let lvalue_ty = lvalue.ty(&self.mir, tcx);\n+        let lvalue_ty = lvalue.ty(self.mir, tcx);\n         self.monomorphize(&lvalue_ty.to_ty(tcx))\n     }\n }"}]}