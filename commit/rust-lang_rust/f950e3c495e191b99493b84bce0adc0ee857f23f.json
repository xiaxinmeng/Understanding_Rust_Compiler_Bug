{"sha": "f950e3c495e191b99493b84bce0adc0ee857f23f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NTBlM2M0OTVlMTkxYjk5NDkzYjg0YmNlMGFkYzBlZTg1N2YyM2Y=", "commit": {"author": {"name": "Simon Wollwage", "email": "mail.wollwage@gmail.com", "date": "2014-11-19T23:56:50Z"}, "committer": {"name": "Simon Wollwage", "email": "mail.wollwage@gmail.com", "date": "2014-11-19T23:56:50Z"}, "message": "removed struct_variant feature from tests", "tree": {"sha": "f7ca04f311408ce7873923c0d34ee5d9de360fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ca04f311408ce7873923c0d34ee5d9de360fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f950e3c495e191b99493b84bce0adc0ee857f23f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f950e3c495e191b99493b84bce0adc0ee857f23f", "html_url": "https://github.com/rust-lang/rust/commit/f950e3c495e191b99493b84bce0adc0ee857f23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f950e3c495e191b99493b84bce0adc0ee857f23f/comments", "author": {"login": "Kintaro", "id": 111625, "node_id": "MDQ6VXNlcjExMTYyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kintaro", "html_url": "https://github.com/Kintaro", "followers_url": "https://api.github.com/users/Kintaro/followers", "following_url": "https://api.github.com/users/Kintaro/following{/other_user}", "gists_url": "https://api.github.com/users/Kintaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kintaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kintaro/subscriptions", "organizations_url": "https://api.github.com/users/Kintaro/orgs", "repos_url": "https://api.github.com/users/Kintaro/repos", "events_url": "https://api.github.com/users/Kintaro/events{/privacy}", "received_events_url": "https://api.github.com/users/Kintaro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kintaro", "id": 111625, "node_id": "MDQ6VXNlcjExMTYyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kintaro", "html_url": "https://github.com/Kintaro", "followers_url": "https://api.github.com/users/Kintaro/followers", "following_url": "https://api.github.com/users/Kintaro/following{/other_user}", "gists_url": "https://api.github.com/users/Kintaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kintaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kintaro/subscriptions", "organizations_url": "https://api.github.com/users/Kintaro/orgs", "repos_url": "https://api.github.com/users/Kintaro/repos", "events_url": "https://api.github.com/users/Kintaro/events{/privacy}", "received_events_url": "https://api.github.com/users/Kintaro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a83726517009688440ac99771560968d33d015c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a83726517009688440ac99771560968d33d015c", "html_url": "https://github.com/rust-lang/rust/commit/4a83726517009688440ac99771560968d33d015c"}], "stats": {"total": 82, "additions": 6, "deletions": 76}, "files": [{"sha": "7096146a43af9ebdaee737c33a8b7ee5b546729c", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n pub struct BTree<V> {\n     pub node: TreeItem<V>,\n }"}, {"sha": "c7387dd284ebf3537cb4f1d2db7be36d6f79ebf6", "filename": "src/test/auxiliary/namespaced_enum_emulate_flat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs, struct_variant)]\n+#![feature(globs)]\n \n pub use Foo::*;\n "}, {"sha": "5b21d130d1704eb8198518c7424bca700334141f", "filename": "src/test/auxiliary/namespaced_enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fnamespaced_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fnamespaced_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnamespaced_enums.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant)]\n \n pub enum Foo {\n     A,"}, {"sha": "0bdda23508038a8245d8f3bc8d6b14ef1ee1a6e5", "filename": "src/test/auxiliary/struct_variant_privacy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant)]\n \n enum Bar {\n     Baz { a: int }"}, {"sha": "76fd619f689648adba8e8cc2c444c3e50c8f3099", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -11,8 +11,6 @@\n #![crate_name=\"struct_variant_xc_aux\"]\n #![crate_type = \"lib\"]\n \n-#![feature(struct_variant)]\n-\n pub enum Enum {\n     Variant(u8),\n     StructVariant { arg: u8 }"}, {"sha": "9cda56a774380e2295f8a342db0d56d6850f2abc", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -40,7 +40,6 @@\n // lldb-check:[...]$2 = TheOnlyCase(4820353753753434)\n \n #![allow(unused_variables)]\n-#![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "258c49afcc42c84f4422f7b170cc808b6f5066fc", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -71,8 +71,6 @@\n // lldb-check:[...]$6 = Case1 { x: 0, y: 8970181431921507452 }\n // lldb-command:continue\n \n-#![feature(struct_variant)]\n-\n #[deriving(Clone)]\n struct Struct {\n     a: int,"}, {"sha": "9a42cd92fdc877c7b4e5c151ee73530d595ca7c6", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -64,8 +64,6 @@\n // gdb-command: print nested_variant2\n // gdb-check:$14 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n \n-#![feature(struct_variant)]\n-\n use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n use self::NestedEnum::{NestedVariant1, NestedVariant2};"}, {"sha": "d69d432fcb30f64815e13ec6be10c1aaeb7b78de", "filename": "src/test/debuginfo/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -31,8 +31,6 @@\n // gdb-check:$5 = 5\n // gdb-command:continue\n \n-#![feature(struct_variant)]\n-\n struct Struct {\n     x: int\n }"}, {"sha": "5e967266421722ed7bae849775a2e17851d05801", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -29,8 +29,6 @@\n // gdb-command:print univariant\n // gdb-check:$4 = {{a = -1}}\n \n-#![feature(struct_variant)]\n-\n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;\n "}, {"sha": "d86aa54f451eeb87821ecc666bf9441a9d72a201", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -113,8 +113,6 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n-#![feature(struct_variant)]\n-\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)"}, {"sha": "11c594bac599af4202d698119faaf2bed70cbdf4", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -62,8 +62,6 @@\n // lldb-check:[...]$5 = Void\n \n \n-#![feature(struct_variant)]\n-\n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator.\n // The test cases in this file make sure that something readable is generated for"}, {"sha": "032b8b1fa262fdaba624fb83eb5278e04e3efc7b", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -69,7 +69,6 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n-#![feature(struct_variant)]\n \n use self::Opt::{Empty, Val};\n "}, {"sha": "f808e7f8a90ff578710da5008c23ca1bbab381fd", "filename": "src/test/debuginfo/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -54,8 +54,6 @@\n // lldb-check:[...]$4 = 5\n // lldb-command:continue\n \n-#![feature(struct_variant)]\n-\n struct Struct {\n     x: int\n }"}, {"sha": "48c6c2d79fb43afb30103c8f571721a5d7d475d4", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -49,7 +49,6 @@\n // lldb-check:[...]$3 = TheOnlyCase { a: -1 }\n \n #![allow(unused_variables)]\n-#![feature(struct_variant)]\n \n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;"}, {"sha": "3c0a4a21b4fceb92125e897c1c60e9d72a084c6b", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -42,7 +42,6 @@\n // lldb-check:[...]$2 = TheOnlyCase(123234)\n \n #![allow(unused_variables)]\n-#![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "ac48752b0a944aef659bf9436c40fd8822217eed", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum E {\n     S0 { s: String },\n     S1 { u: uint }"}, {"sha": "0c70102d57e2008381dcf128180810d59d7726a1", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -10,8 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(struct_variant)]\n-\n #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {\n     ES1 { x: T },"}, {"sha": "7bee4bc7b0d20df43ea38164e839bc7777f2823d", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -13,8 +13,6 @@\n \n // ignore-test FIXME(#5121)\n \n-#![feature(struct_variant)]\n-\n extern crate rand;\n extern crate rbml;\n extern crate serialize;"}, {"sha": "544c0052433dc7ee64242b72056f241a2773d4ad", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n use std::rand;\n \n #[deriving(Rand)]"}, {"sha": "df4bc1ae1d09cd6125a6cd9d429c4e6a35f41723", "filename": "src/test/run-pass/deriving-show-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n use std::fmt;\n \n #[deriving(Show)]"}, {"sha": "ccfaac8378fa81e60b3f66ad2fdfa8035ef3d63b", "filename": "src/test/run-pass/deriving-show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant, macro_rules)]\n+#![feature(macro_rules)]\n \n #[deriving(Show)]\n struct Unit;"}, {"sha": "b091787b1ee235237e4c1e94f41f820d917ede8b", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n #[deriving(PartialEq, Show)]\n enum S {\n     X { x: int, y: int },"}, {"sha": "15f028e1716f081232e198ce1d2d61b909b9cc06", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n use std::task;\n \n #[deriving(PartialEq, Show)]"}, {"sha": "4a3a1156698aa32e73bb81e2abc3a97f12e73eae", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n-#![feature(struct_variant)]\n \n enum Animal {\n     Dog (String, f64),"}, {"sha": "9440e0c2874a0cfc1ec1b000bbd2aaa21c30adb0", "filename": "src/test/run-pass/issue-11085.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-11085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-11085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11085.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -10,8 +10,6 @@\n \n // compile-flags: --cfg foo\n \n-#![feature(struct_variant)]\n-\n struct Foo {\n     #[cfg(fail)]\n     bar: baz,"}, {"sha": "687de48474058dd857b1cb5543317b8d68f6a257", "filename": "src/test/run-pass/issue-11577.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-11577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-11577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11577.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n // Destructuring struct variants would ICE where regular structs wouldn't\n \n enum Foo {"}, {"sha": "1155027d426da833262e0f9e1bb80ec4a25d22d5", "filename": "src/test/run-pass/issue-14837.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14837.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n #[deny(dead_code)]\n pub enum Foo {\n     Bar {"}, {"sha": "a9e1ffcb34510ecdc4af67b7a53a4dcd308ffbb6", "filename": "src/test/run-pass/issue-5530.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5530.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Enum {\n     Foo { foo: uint },\n     Bar { bar: uint }"}, {"sha": "b7e6facc58187a44868ea261e697da5a7e61ff83", "filename": "src/test/run-pass/issue-8351-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum E {\n     Foo{f: int},\n     Bar,"}, {"sha": "40e0b3a8eeccb6e9f162597349e3774ea9d21220", "filename": "src/test/run-pass/issue-8351-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum E {\n     Foo{f: int, b: bool},\n     Bar,"}, {"sha": "85fa61266a338fdd5d183cf2a930de49e5881794", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n struct NewBool(bool);\n \n enum Direction {"}, {"sha": "5cc512abfe37c6aa516181a0743a84ea3a9ded86", "filename": "src/test/run-pass/match-enum-struct-0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -10,8 +10,6 @@\n \n // regression test for issue #5625\n \n-#![feature(struct_variant)]\n-\n enum E {\n     Foo{f : int},\n     Bar"}, {"sha": "fdfadf8eb444fd55dbd7851818bdf26747bdb230", "filename": "src/test/run-pass/match-enum-struct-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum E {\n     Foo{f : int},\n     Bar"}, {"sha": "2f8e184033ae74f3d18f35907d58bd5479b6d4be", "filename": "src/test/run-pass/match-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(macro_rules, struct_variant)]\n+#![feature(macro_rules)]\n \n enum Foo {\n     B { b1: int, bb1: int},"}, {"sha": "680cdf14e8f2a8832fe7679e8536f2780f540957", "filename": "src/test/run-pass/namespaced-enum-emulate-flat-xc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat-xc.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:namespaced_enum_emulate_flat.rs\n-#![feature(struct_variant)]\n \n extern crate namespaced_enum_emulate_flat;\n "}, {"sha": "676fe6500818e37f01b2ba6eee9face47eb098bc", "filename": "src/test/run-pass/namespaced-enum-emulate-flat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs, struct_variant)]\n+#![feature(globs)]\n \n pub use Foo::*;\n use nest::{Bar, D, E, F};"}, {"sha": "cc4985927f19025a16c6c9b3a94c5699c0498d44", "filename": "src/test/run-pass/namespaced-enum-glob-import-xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:namespaced_enums.rs\n-#![feature(globs, struct_variant)]\n+#![feature(globs)]\n \n extern crate namespaced_enums;\n "}, {"sha": "137dd543566bd748531c17bcb2e66d65a6424ba4", "filename": "src/test/run-pass/namespaced-enum-glob-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs, struct_variant)]\n+#![feature(globs)]\n \n mod m2 {\n     pub enum Foo {"}, {"sha": "7545908dcbbf6ad71a051a288b6e6c96540b29ec", "filename": "src/test/run-pass/namespaced-enums-xcrate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enums-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enums-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enums-xcrate.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:namespaced_enums.rs\n-#![feature(struct_variant)]\n \n extern crate namespaced_enums;\n "}, {"sha": "13f70f6a740aef76ed24b76fd1a9d67544e73064", "filename": "src/test/run-pass/namespaced-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fnamespaced-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enums.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant)]\n \n enum Foo {\n     A,"}, {"sha": "364c6da980393263bd5075f6e753371738d61858", "filename": "src/test/run-pass/struct-like-variant-construct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Foo {\n     Bar {\n         a: int,"}, {"sha": "3afa44a3142b40b8d40fac406b3cd4417f17946f", "filename": "src/test/run-pass/struct-like-variant-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Foo {\n     Bar {\n         x: int,"}, {"sha": "aad3ba01a487e24c21bdac5c354c0cc1045c54af", "filename": "src/test/run-pass/struct-variant-field-visibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n mod foo {\n     pub enum Foo {\n         Bar { a: int }"}, {"sha": "d28d47c0cfb85f6249850e955c0f8e67d4a92659", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n //\n // ignore-lexer-test FIXME #15879\n-#![feature(struct_variant)]\n-\n \n // Test sized-ness checking in substitution.\n "}, {"sha": "e078fa1485d14978fac563396a35283ea35ee889", "filename": "src/test/run-pass/variant-structs-trivial.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f950e3c495e191b99493b84bce0adc0ee857f23f/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs?ref=f950e3c495e191b99493b84bce0adc0ee857f23f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Foo {\n     Bar { x: int },\n     Baz { y: int }"}]}