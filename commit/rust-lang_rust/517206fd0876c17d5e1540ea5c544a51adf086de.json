{"sha": "517206fd0876c17d5e1540ea5c544a51adf086de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzIwNmZkMDg3NmMxN2Q1ZTE1NDBlYTVjNTQ0YTUxYWRmMDg2ZGU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-09-28T23:55:28Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-09-28T23:55:28Z"}, "message": "Merge pull request #3621 from z0w0/jit-crates\n\nAdd support for crate loading to JIT", "tree": {"sha": "53167bbbac763cdec3c6bbe8a5d0ee5c7776f22c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53167bbbac763cdec3c6bbe8a5d0ee5c7776f22c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517206fd0876c17d5e1540ea5c544a51adf086de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517206fd0876c17d5e1540ea5c544a51adf086de", "html_url": "https://github.com/rust-lang/rust/commit/517206fd0876c17d5e1540ea5c544a51adf086de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517206fd0876c17d5e1540ea5c544a51adf086de/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6fe5ef1a9fc4c2292e2f39825e10f2ad7d7fd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fe5ef1a9fc4c2292e2f39825e10f2ad7d7fd21", "html_url": "https://github.com/rust-lang/rust/commit/a6fe5ef1a9fc4c2292e2f39825e10f2ad7d7fd21"}, {"sha": "00b2086374af127a2ba4fca37bce20c80d2b0dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b2086374af127a2ba4fca37bce20c80d2b0dd2", "html_url": "https://github.com/rust-lang/rust/commit/00b2086374af127a2ba4fca37bce20c80d2b0dd2"}], "stats": {"total": 164, "additions": 107, "deletions": 57}, "files": [{"sha": "592e4ecea35abaafd7f1793a62efb52f7d121219", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=517206fd0876c17d5e1540ea5c544a51adf086de", "patch": "@@ -74,17 +74,47 @@ mod jit {\n             m: ModuleRef,\n             opt: c_int,\n             stacks: bool) unsafe {\n-        let ptr = llvm::LLVMRustJIT(rusti::morestack_addr(),\n-                                    pm, m, opt, stacks);\n+        let manager = llvm::LLVMRustPrepareJIT(rusti::morestack_addr());\n+\n+        // We need to tell JIT where to resolve all linked\n+        // symbols from. The equivalent of -lstd, -lcore, etc.\n+        // By default the JIT will resolve symbols from the std and\n+        // core linked into rustc. We don't want that,\n+        // incase the user wants to use an older std library.\n+\n+        let cstore = sess.cstore;\n+        for cstore::get_used_crate_files(cstore).each |cratepath| {\n+            let path = cratepath.to_str();\n+\n+            debug!(\"linking: %s\", path);\n+\n+            let _: () = str::as_c_str(\n+                path,\n+                |buf_t| {\n+                    if !llvm::LLVMRustLoadCrate(manager, buf_t) {\n+                        llvm_err(sess, ~\"Could not link\");\n+                    }\n+                    debug!(\"linked: %s\", path);\n+                });\n+        }\n+\n+        // The execute function will return a void pointer\n+        // to the _rust_main function. We can do closure\n+        // magic here to turn it straight into a callable rust\n+        // closure. It will also cleanup the memory manager\n+        // for us.\n \n-        if ptr::is_null(ptr) {\n+        let entry = llvm::LLVMRustExecuteJIT(manager,\n+                                             pm, m, opt, stacks);\n+\n+        if ptr::is_null(entry) {\n             llvm_err(sess, ~\"Could not JIT\");\n         } else {\n             let closure = Closure {\n-                code: ptr,\n+                code: entry,\n                 env: ptr::null()\n             };\n-            let func: fn(~[~str]) = cast::transmute(move closure);\n+            let func: fn(++argv: ~[~str]) = cast::transmute(move closure);\n \n             func(~[sess.opts.binary]);\n         }\n@@ -193,30 +223,9 @@ mod write {\n                 // JIT execution takes ownership of the module,\n                 // so don't dispose and return.\n \n-                // We need to tell LLVM where to resolve all linked\n-                // symbols from. The equivalent of -lstd, -lcore, etc.\n-                // By default the JIT will resolve symbols from the std and\n-                // core linked into rustc. We don't want that,\n-                // incase the user wants to use an older std library.\n-                /*let cstore = sess.cstore;\n-                for cstore::get_used_crate_files(cstore).each |cratepath| {\n-                    debug!{\"linking: %s\", cratepath};\n-\n-                    let _: () = str::as_c_str(\n-                        cratepath,\n-                        |buf_t| {\n-                            if !llvm::LLVMRustLoadLibrary(buf_t) {\n-                                llvm_err(sess, ~\"Could not link\");\n-                            }\n-                            debug!{\"linked: %s\", cratepath};\n-                        });\n-                }*/\n-\n                 jit::exec(sess, pm.llpm, llmod, CodeGenOptLevel, true);\n \n-                if sess.time_llvm_passes() {\n-                    llvm::LLVMRustPrintPassTimings();\n-                }\n+                if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n                 return;\n             }\n "}, {"sha": "c16fe31f9335730785a7afafed193536caf78d27", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=517206fd0876c17d5e1540ea5c544a51adf086de", "patch": "@@ -990,15 +990,19 @@ extern mod llvm {\n         call. */\n     fn LLVMRustGetLastError() -> *c_char;\n \n-    /** Load a shared library to resolve symbols against. */\n-    fn LLVMRustLoadLibrary(Filename: *c_char) -> bool;\n-\n-    /** Create and execute the JIT engine. */\n-    fn LLVMRustJIT(__morestack: *(),\n-                   PM: PassManagerRef,\n-                   M: ModuleRef,\n-                   OptLevel: c_int,\n-                   EnableSegmentedStacks: bool) -> *();\n+    /** Prepare the JIT. Returns a memory manager that can load crates. */\n+    fn LLVMRustPrepareJIT(__morestack: *()) -> *();\n+\n+    /** Load a crate into the memory manager. */\n+    fn LLVMRustLoadCrate(MM: *(),\n+                         Filename: *c_char) -> bool;\n+\n+    /** Execute the JIT engine. */\n+    fn LLVMRustExecuteJIT(MM: *(),\n+                          PM: PassManagerRef,\n+                          M: ModuleRef,\n+                          OptLevel: c_int,\n+                          EnableSegmentedStacks: bool) -> *();\n \n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;"}, {"sha": "fc2049507eed970eb1ff3a146335faeca7a14fa0", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=517206fd0876c17d5e1540ea5c544a51adf086de", "patch": "@@ -20,6 +20,7 @@\n #include \"llvm/Transforms/Scalar.h\"\n #include \"llvm/Transforms/IPO.h\"\n #include \"llvm/ADT/Triple.h\"\n+#include \"llvm/ADT/DenseSet.h\"\n #include \"llvm/Assembly/Parser.h\"\n #include \"llvm/Assembly/PrintModulePass.h\"\n #include \"llvm/Support/FormattedStream.h\"\n@@ -42,7 +43,6 @@\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/Object.h\"\n-#include <cstdlib>\n \n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n // to get around glibc issues. See the function for more information.\n@@ -53,6 +53,7 @@\n #endif\n \n using namespace llvm;\n+using namespace llvm::sys;\n \n static const char *LLVMRustError;\n \n@@ -100,18 +101,6 @@ void LLVMRustInitializeTargets() {\n   LLVMInitializeX86AsmParser();\n }\n \n-extern \"C\" bool\n-LLVMRustLoadLibrary(const char* file) {\n-  std::string err;\n-\n-  if(llvm::sys::DynamicLibrary::LoadLibraryPermanently(file, &err)) {\n-    LLVMRustError = err.c_str();\n-    return false;\n-  }\n-\n-  return true;\n-}\n-\n // Custom memory manager for MCJITting. It needs special features\n // that the generic JIT memory manager doesn't entail. Based on\n // code from LLI, change where needed for Rust.\n@@ -121,10 +110,13 @@ class RustMCJITMemoryManager : public JITMemoryManager {\n   SmallVector<sys::MemoryBlock, 16> AllocatedCodeMem;\n   SmallVector<sys::MemoryBlock, 16> FreeCodeMem;\n   void* __morestack;\n+  DenseSet<DynamicLibrary*> crates;\n \n   RustMCJITMemoryManager(void* sym) : __morestack(sym) { }\n   ~RustMCJITMemoryManager();\n \n+  bool loadCrate(const char*, std::string*);\n+\n   virtual uint8_t *allocateCodeSection(uintptr_t Size, unsigned Alignment,\n                                        unsigned SectionID);\n \n@@ -197,6 +189,19 @@ class RustMCJITMemoryManager : public JITMemoryManager {\n   }\n };\n \n+bool RustMCJITMemoryManager::loadCrate(const char* file, std::string* err) {\n+  DynamicLibrary crate = DynamicLibrary::getPermanentLibrary(file,\n+                                                             err);\n+\n+  if(crate.isValid()) {\n+    crates.insert(&crate);\n+\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n uint8_t *RustMCJITMemoryManager::allocateDataSection(uintptr_t Size,\n                                                     unsigned Alignment,\n                                                     unsigned SectionID) {\n@@ -276,6 +281,9 @@ void *RustMCJITMemoryManager::getPointerToNamedFunction(const std::string &Name,\n   if (Name == \"__morestack\") return &__morestack;\n \n   const char *NameStr = Name.c_str();\n+\n+  // Look through loaded crates and main for symbols.\n+\n   void *Ptr = sys::DynamicLibrary::SearchForAddressOfSymbol(NameStr);\n   if (Ptr) return Ptr;\n \n@@ -293,21 +301,49 @@ RustMCJITMemoryManager::~RustMCJITMemoryManager() {\n }\n \n extern \"C\" void*\n-LLVMRustJIT(void* __morestack,\n-            LLVMPassManagerRef PMR,\n-            LLVMModuleRef M,\n-            CodeGenOpt::Level OptLevel,\n-            bool EnableSegmentedStacks) {\n+LLVMRustPrepareJIT(void* __morestack) {\n+  // An execution engine will take ownership of this later\n+  // and clean it up for us.\n+\n+  return (void*) new RustMCJITMemoryManager(__morestack);\n+}\n+\n+extern \"C\" bool\n+LLVMRustLoadCrate(void* mem, const char* crate) {\n+  RustMCJITMemoryManager* manager = (RustMCJITMemoryManager*) mem;\n+  std::string Err;\n+\n+  assert(manager);\n+\n+  if(!manager->loadCrate(crate, &Err)) {\n+    LLVMRustError = Err.c_str();\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+extern \"C\" void*\n+LLVMRustExecuteJIT(void* mem,\n+                   LLVMPassManagerRef PMR,\n+                   LLVMModuleRef M,\n+                   CodeGenOpt::Level OptLevel,\n+                   bool EnableSegmentedStacks) {\n \n   InitializeNativeTarget();\n   InitializeNativeTargetAsmPrinter();\n+  InitializeNativeTargetAsmParser();\n \n   std::string Err;\n   TargetOptions Options;\n+  Options.JITExceptionHandling = true;\n   Options.JITEmitDebugInfo = true;\n   Options.NoFramePointerElim = true;\n   Options.EnableSegmentedStacks = EnableSegmentedStacks;\n   PassManager *PM = unwrap<PassManager>(PMR);\n+  RustMCJITMemoryManager* MM = (RustMCJITMemoryManager*) mem;\n+\n+  assert(MM);\n \n   PM->add(createBasicAliasAnalysisPass());\n   PM->add(createInstructionCombiningPass());\n@@ -318,8 +354,8 @@ LLVMRustJIT(void* __morestack,\n   PM->add(createPromoteMemoryToRegisterPass());\n   PM->run(*unwrap(M));\n \n-  RustMCJITMemoryManager* MM = new RustMCJITMemoryManager(__morestack);\n   ExecutionEngine* EE = EngineBuilder(unwrap(M))\n+    .setErrorStr(&Err)\n     .setTargetOptions(Options)\n     .setJITMemoryManager(MM)\n     .setOptLevel(OptLevel)"}, {"sha": "36833e5175e6d193014287c8131ee58dbe7c7f2f", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/517206fd0876c17d5e1540ea5c544a51adf086de/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=517206fd0876c17d5e1540ea5c544a51adf086de", "patch": "@@ -4,8 +4,9 @@ LLVMRustWriteOutputFile\n LLVMRustGetLastError\n LLVMRustConstSmallInt\n LLVMRustConstInt\n-LLVMRustLoadLibrary\n-LLVMRustJIT\n+LLVMRustLoadCrate\n+LLVMRustPrepareJIT\n+LLVMRustExecuteJIT\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings"}]}