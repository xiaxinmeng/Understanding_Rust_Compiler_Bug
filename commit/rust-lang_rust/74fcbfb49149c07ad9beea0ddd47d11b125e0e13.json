{"sha": "74fcbfb49149c07ad9beea0ddd47d11b125e0e13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmNiZmI0OTE0OWMwN2FkOWJlZWEwZGRkNDdkMTFiMTI1ZTBlMTM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-29T14:11:28Z"}, "message": "liveness: Include upvars in the analysis", "tree": {"sha": "c55bb096e47a526fa0feda24e680cb1980dcd301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55bb096e47a526fa0feda24e680cb1980dcd301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fcbfb49149c07ad9beea0ddd47d11b125e0e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fcbfb49149c07ad9beea0ddd47d11b125e0e13", "html_url": "https://github.com/rust-lang/rust/commit/74fcbfb49149c07ad9beea0ddd47d11b125e0e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fcbfb49149c07ad9beea0ddd47d11b125e0e13/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6301496bbc5d1531369e94a17450c9ad0bbbe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6301496bbc5d1531369e94a17450c9ad0bbbe6", "html_url": "https://github.com/rust-lang/rust/commit/7c6301496bbc5d1531369e94a17450c9ad0bbbe6"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "00dc8a41350b35a12616f65072fd931e8e4a4aef", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/74fcbfb49149c07ad9beea0ddd47d11b125e0e13/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fcbfb49149c07ad9beea0ddd47d11b125e0e13/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=74fcbfb49149c07ad9beea0ddd47d11b125e0e13", "patch": "@@ -244,6 +244,7 @@ struct LocalInfo {\n enum VarKind {\n     Param(HirId, Symbol),\n     Local(LocalInfo),\n+    Upvar(HirId, Symbol),\n }\n \n struct IrMaps<'tcx> {\n@@ -296,7 +297,7 @@ impl IrMaps<'tcx> {\n         self.num_vars += 1;\n \n         match vk {\n-            Local(LocalInfo { id: node_id, .. }) | Param(node_id, _) => {\n+            Local(LocalInfo { id: node_id, .. }) | Param(node_id, _) | Upvar(node_id, _) => {\n                 self.variable_map.insert(node_id, v);\n             }\n         }\n@@ -317,14 +318,14 @@ impl IrMaps<'tcx> {\n \n     fn variable_name(&self, var: Variable) -> String {\n         match self.var_kinds[var.get()] {\n-            Local(LocalInfo { name, .. }) | Param(_, name) => name.to_string(),\n+            Local(LocalInfo { name, .. }) | Param(_, name) | Upvar(_, name) => name.to_string(),\n         }\n     }\n \n     fn variable_is_shorthand(&self, var: Variable) -> bool {\n         match self.var_kinds[var.get()] {\n             Local(LocalInfo { is_shorthand, .. }) => is_shorthand,\n-            Param(..) => false,\n+            Param(..) | Upvar(..) => false,\n         }\n     }\n \n@@ -365,6 +366,14 @@ fn visit_fn<'tcx>(\n \n     let body = ir.tcx.hir().body(body_id);\n \n+    if let Some(upvars) = ir.tcx.upvars_mentioned(def_id) {\n+        for (&var_hir_id, _upvar) in upvars {\n+            debug!(\"adding upvar {:?}\", var_hir_id);\n+            let var_name = ir.tcx.hir().name(var_hir_id);\n+            fn_maps.add_variable(Upvar(var_hir_id, var_name));\n+        }\n+    }\n+\n     for param in body.params {\n         let is_shorthand = match param.pat.kind {\n             rustc_hir::PatKind::Struct(..) => true,\n@@ -450,11 +459,8 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n         // live nodes required for uses or definitions of variables:\n         hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n             debug!(\"expr {}: path that leads to {:?}\", expr.hir_id, path.res);\n-            if let Res::Local(var_hir_id) = path.res {\n-                let upvars = ir.tcx.upvars_mentioned(ir.body_owner);\n-                if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hir_id)) {\n-                    ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n-                }\n+            if let Res::Local(_var_hir_id) = path.res {\n+                ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n             }\n             intravisit::walk_expr(ir, expr);\n         }\n@@ -470,16 +476,9 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n             let mut call_caps = Vec::new();\n             let closure_def_id = ir.tcx.hir().local_def_id(expr.hir_id);\n             if let Some(upvars) = ir.tcx.upvars_mentioned(closure_def_id) {\n-                let parent_upvars = ir.tcx.upvars_mentioned(ir.body_owner);\n-                call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {\n-                    let has_parent =\n-                        parent_upvars.map_or(false, |upvars| upvars.contains_key(&var_id));\n-                    if !has_parent {\n-                        let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n-                        Some(CaptureInfo { ln: upvar_ln, var_hid: var_id })\n-                    } else {\n-                        None\n-                    }\n+                call_caps.extend(upvars.iter().map(|(&var_id, upvar)| {\n+                    let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n+                    CaptureInfo { ln: upvar_ln, var_hid: var_id }\n                 }));\n             }\n             ir.set_captures(expr.hir_id, call_caps);\n@@ -894,6 +893,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\"compute: using id for body, {:?}\", body);\n \n         let s = self.s;\n+\n+        if let Some(upvars) = self.ir.tcx.upvars_mentioned(self.ir.body_owner) {\n+            for (&var_hir_id, upvar) in upvars.iter().rev() {\n+                let var = self.variable(var_hir_id, upvar.span);\n+                self.acc(s.exit_ln, var, ACC_READ | ACC_USE);\n+            }\n+        }\n+\n         let entry_ln = self.propagate_through_expr(body, s.exit_ln);\n \n         // hack to skip the loop unless debug! is enabled:\n@@ -1345,14 +1352,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         acc: u32,\n     ) -> LiveNode {\n         match path.res {\n-            Res::Local(hid) => {\n-                let upvars = self.ir.tcx.upvars_mentioned(self.ir.body_owner);\n-                if !upvars.map_or(false, |upvars| upvars.contains_key(&hid)) {\n-                    self.access_var(hir_id, hid, succ, acc, path.span)\n-                } else {\n-                    succ\n-                }\n-            }\n+            Res::Local(hid) => self.access_var(hir_id, hid, succ, acc, path.span),\n             _ => succ,\n         }\n     }\n@@ -1511,16 +1511,13 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         match expr.kind {\n             hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n                 if let Res::Local(var_hid) = path.res {\n-                    let upvars = self.ir.tcx.upvars_mentioned(self.ir.body_owner);\n-                    if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hid)) {\n-                        // Assignment to an immutable variable or argument: only legal\n-                        // if there is no later assignment. If this local is actually\n-                        // mutable, then check for a reassignment to flag the mutability\n-                        // as being used.\n-                        let ln = self.live_node(expr.hir_id, expr.span);\n-                        let var = self.variable(var_hid, expr.span);\n-                        self.warn_about_dead_assign(vec![expr.span], expr.hir_id, ln, var);\n-                    }\n+                    // Assignment to an immutable variable or argument: only legal\n+                    // if there is no later assignment. If this local is actually\n+                    // mutable, then check for a reassignment to flag the mutability\n+                    // as being used.\n+                    let ln = self.live_node(expr.hir_id, expr.span);\n+                    let var = self.variable(var_hid, expr.span);\n+                    self.warn_about_dead_assign(vec![expr.span], expr.hir_id, ln, var);\n                 }\n             }\n             _ => {"}]}