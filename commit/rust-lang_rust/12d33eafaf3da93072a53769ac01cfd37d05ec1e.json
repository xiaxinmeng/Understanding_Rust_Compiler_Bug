{"sha": "12d33eafaf3da93072a53769ac01cfd37d05ec1e", "node_id": "C_kwDOAAsO6NoAKDEyZDMzZWFmYWYzZGE5MzA3MmE1Mzc2OWFjMDFjZmQzN2QwNWVjMWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-06T20:45:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T20:45:14Z"}, "message": "Merge #10476\n\n10476: feat: Add `replace_try_expr_with_match` assist r=Veykril a=Crauzer\n\nAdds the replace_try_expr_with_match assist\r\n#10424\n\nCo-authored-by: crauzer <filip.quitko@gmail.com>", "tree": {"sha": "63087996d522b1c786f64aa8f8cabc11fc1791df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63087996d522b1c786f64aa8f8cabc11fc1791df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d33eafaf3da93072a53769ac01cfd37d05ec1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXgraCRBK7hj4Ov3rIwAASxIIADVrwqYgO77jmDoYHVyRFLQu\n4h1ai81a5IxmRgGNAVLnAO8Og+mqKrn5zqrGp0hUVCy1VSOKS+dQ7N7O7AdIuR2C\nGDZ7eM0g40WVMfQ6a9hpyQZEkDPVQMfBb+tEmidxCyfERodUvySFYZMIr6gPNMKd\nsqbctpjeCoRzZJ4rEhhoPzdm+XatXWwBuXX+eU0FYwo4Ow34rw9HwvY8ExH6FcNv\nFb63vg27+uDCdktYjLhBsREeP5MCnNmGxiDg76yZPk1XN1clPQt0bvpMt4vWmqtE\nhDyvO1T603rSRvCJf4EjTw0RxkRaSBUvzr/uwoHz3K3rjeSJ4YlRrtT0wWqjmuw=\n=KuoZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 63087996d522b1c786f64aa8f8cabc11fc1791df\nparent eb60836a39bb7cd7f583b18f19cbfcdf36073880\nparent 1161fa45af0444166df8382ae4b0c9c6407e585b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633553114 +0000\ncommitter GitHub <noreply@github.com> 1633553114 +0000\n\nMerge #10476\n\n10476: feat: Add `replace_try_expr_with_match` assist r=Veykril a=Crauzer\n\nAdds the replace_try_expr_with_match assist\r\n#10424\n\nCo-authored-by: crauzer <filip.quitko@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d33eafaf3da93072a53769ac01cfd37d05ec1e", "html_url": "https://github.com/rust-lang/rust/commit/12d33eafaf3da93072a53769ac01cfd37d05ec1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d33eafaf3da93072a53769ac01cfd37d05ec1e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb60836a39bb7cd7f583b18f19cbfcdf36073880", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb60836a39bb7cd7f583b18f19cbfcdf36073880", "html_url": "https://github.com/rust-lang/rust/commit/eb60836a39bb7cd7f583b18f19cbfcdf36073880"}, {"sha": "1161fa45af0444166df8382ae4b0c9c6407e585b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1161fa45af0444166df8382ae4b0c9c6407e585b", "html_url": "https://github.com/rust-lang/rust/commit/1161fa45af0444166df8382ae4b0c9c6407e585b"}], "stats": {"total": 188, "additions": 185, "deletions": 3}, "files": [{"sha": "8aad3e2f52be3de628ee560f3bc978f63b9e45ac", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=12d33eafaf3da93072a53769ac01cfd37d05ec1e", "patch": "@@ -142,7 +142,7 @@ fn make_else_arm(\n         let pattern = match pattern {\n             Some((it, pat)) => {\n                 if does_pat_match_variant(pat, &it.sad_pattern()) {\n-                    it.happy_pattern()\n+                    it.happy_pattern_wildcard()\n                 } else {\n                     it.sad_pattern()\n                 }"}, {"sha": "b8ec83cadd6ede6c1bb26e4a6a9ecf5f1c6dc3f9", "filename": "crates/ide_assists/src/handlers/replace_try_expr_with_match.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs?ref=12d33eafaf3da93072a53769ac01cfd37d05ec1e", "patch": "@@ -0,0 +1,148 @@\n+use std::iter;\n+\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    ty_filter::TryEnum,\n+};\n+use syntax::{\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        make,\n+    },\n+    AstNode, T,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: replace_try_expr_with_match\n+//\n+// Replaces a `try` expression with a `match` expression.\n+//\n+// ```\n+// # //- minicore:option\n+// fn handle() {\n+//     let pat = Some(true)$0?;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn handle() {\n+//     let pat = match Some(true) {\n+//         Some(it) => it,\n+//         None => return None,\n+//     };\n+// }\n+// ```\n+pub(crate) fn replace_try_expr_with_match(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let qm_kw = ctx.find_token_syntax_at_offset(T![?])?;\n+    let qm_kw_parent = qm_kw.parent().and_then(ast::TryExpr::cast)?;\n+\n+    let expr = qm_kw_parent.expr()?;\n+    let expr_type_info = ctx.sema.type_of_expr(&expr)?;\n+\n+    let try_enum = TryEnum::from_ty(&ctx.sema, &expr_type_info.original)?;\n+\n+    let target = qm_kw_parent.syntax().text_range();\n+    acc.add(\n+        AssistId(\"replace_try_expr_with_match\", AssistKind::RefactorRewrite),\n+        \"Replace try expression with match\",\n+        target,\n+        |edit| {\n+            let sad_pat = match try_enum {\n+                TryEnum::Option => make::path_pat(make::ext::ident_path(\"None\")),\n+                TryEnum::Result => make::tuple_struct_pat(\n+                    make::ext::ident_path(\"Err\"),\n+                    iter::once(make::path_pat(make::ext::ident_path(\"err\"))),\n+                )\n+                .into(),\n+            };\n+            let sad_expr = match try_enum {\n+                TryEnum::Option => {\n+                    make::expr_return(Some(make::expr_path(make::ext::ident_path(\"None\"))))\n+                }\n+                TryEnum::Result => make::expr_return(Some(make::expr_call(\n+                    make::expr_path(make::ext::ident_path(\"Err\")),\n+                    make::arg_list(iter::once(make::expr_path(make::ext::ident_path(\"err\")))),\n+                ))),\n+            };\n+\n+            let happy_arm = make::match_arm(\n+                iter::once(\n+                    try_enum.happy_pattern(make::ident_pat(false, false, make::name(\"it\")).into()),\n+                ),\n+                None,\n+                make::expr_path(make::ext::ident_path(\"it\")),\n+            );\n+            let sad_arm = make::match_arm(iter::once(sad_pat), None, sad_expr);\n+\n+            let match_arms = [happy_arm, sad_arm];\n+            let match_arm_list = make::match_arm_list(std::array::IntoIter::new(match_arms));\n+\n+            let expr_match = make::expr_match(expr, match_arm_list)\n+                .indent(IndentLevel::from_node(qm_kw_parent.syntax()));\n+            edit.replace_ast::<ast::Expr>(qm_kw_parent.into(), expr_match);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_replace_try_expr_with_match_not_applicable() {\n+        check_assist_not_applicable(\n+            replace_try_expr_with_match,\n+            r#\"\n+                fn test() {\n+                    let pat: u32 = 25$0;\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_replace_try_expr_with_match_option() {\n+        check_assist(\n+            replace_try_expr_with_match,\n+            r#\"\n+//- minicore:option\n+fn test() {\n+    let pat = Some(true)$0?;\n+}\n+            \"#,\n+            r#\"\n+fn test() {\n+    let pat = match Some(true) {\n+        Some(it) => it,\n+        None => return None,\n+    };\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_replace_try_expr_with_match_result() {\n+        check_assist(\n+            replace_try_expr_with_match,\n+            r#\"\n+//- minicore:result\n+fn test() {\n+    let pat = Ok(true)$0?;\n+}\n+            \"#,\n+            r#\"\n+fn test() {\n+    let pat = match Ok(true) {\n+        Ok(it) => it,\n+        Err(err) => return Err(err),\n+    };\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "a0629afb1dd10d3548415ac2a8f737641266497b", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=12d33eafaf3da93072a53769ac01cfd37d05ec1e", "patch": "@@ -164,6 +164,7 @@ mod handlers {\n     mod remove_unused_param;\n     mod reorder_fields;\n     mod reorder_impl;\n+    mod replace_try_expr_with_match;\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod introduce_named_generic;\n@@ -243,6 +244,7 @@ mod handlers {\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n             reorder_impl::reorder_impl,\n+            replace_try_expr_with_match::replace_try_expr_with_match,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,"}, {"sha": "62c44d70e465b936d7661565bb88c5e5bf377b2a", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=12d33eafaf3da93072a53769ac01cfd37d05ec1e", "patch": "@@ -1720,6 +1720,27 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_replace_try_expr_with_match() {\n+    check_doc_test(\n+        \"replace_try_expr_with_match\",\n+        r#####\"\n+//- minicore:option\n+fn handle() {\n+    let pat = Some(true)$0?;\n+}\n+\"#####,\n+        r#####\"\n+fn handle() {\n+    let pat = match Some(true) {\n+        Some(it) => it,\n+        None => return None,\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_sort_items() {\n     check_doc_test("}, {"sha": "28c01d3173d2ae3b359d84bd354194d827912b72", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d33eafaf3da93072a53769ac01cfd37d05ec1e/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=12d33eafaf3da93072a53769ac01cfd37d05ec1e", "patch": "@@ -5,7 +5,7 @@\n use std::iter;\n \n use hir::Semantics;\n-use syntax::ast::{self, make};\n+use syntax::ast::{self, make, Pat};\n \n use crate::RootDatabase;\n \n@@ -51,7 +51,18 @@ impl TryEnum {\n         }\n     }\n \n-    pub fn happy_pattern(self) -> ast::Pat {\n+    pub fn happy_pattern(self, pat: Pat) -> ast::Pat {\n+        match self {\n+            TryEnum::Result => {\n+                make::tuple_struct_pat(make::ext::ident_path(\"Ok\"), iter::once(pat)).into()\n+            }\n+            TryEnum::Option => {\n+                make::tuple_struct_pat(make::ext::ident_path(\"Some\"), iter::once(pat)).into()\n+            }\n+        }\n+    }\n+\n+    pub fn happy_pattern_wildcard(self) -> ast::Pat {\n         match self {\n             TryEnum::Result => make::tuple_struct_pat(\n                 make::ext::ident_path(\"Ok\"),"}]}