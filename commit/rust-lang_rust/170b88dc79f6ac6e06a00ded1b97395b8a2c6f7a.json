{"sha": "170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MGI4OGRjNzlmNmFjNmUwNmEwMGRlZDFiOTczOTViOGEyYzZmN2E=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-17T16:07:18Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-28T02:18:32Z"}, "message": "rustc_mir: require that Copy(L) satisfies typeof L: Copy.", "tree": {"sha": "87f05c62aa76c37ec97861d7fb8c8354032357ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f05c62aa76c37ec97861d7fb8c8354032357ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "html_url": "https://github.com/rust-lang/rust/commit/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42a118188e5e0d578b78fff3c3efac548f1944e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42a118188e5e0d578b78fff3c3efac548f1944e", "html_url": "https://github.com/rust-lang/rust/commit/c42a118188e5e0d578b78fff3c3efac548f1944e"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "6cbc8b7e61987e640ac5ab55b8d083b27aea0a6e", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::visit::Visitor;\n+use rustc::mir::visit::{LvalueContext, Visitor};\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -107,10 +107,10 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     fn visit_lvalue(\n         &mut self,\n         lvalue: &Lvalue<'tcx>,\n-        _context: visit::LvalueContext,\n+        context: LvalueContext,\n         location: Location,\n     ) {\n-        self.sanitize_lvalue(lvalue, location);\n+        self.sanitize_lvalue(lvalue, location, context);\n     }\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n@@ -164,9 +164,13 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn sanitize_lvalue(&mut self, lvalue: &Lvalue<'tcx>, location: Location) -> LvalueTy<'tcx> {\n+    fn sanitize_lvalue(&mut self,\n+                       lvalue: &Lvalue<'tcx>,\n+                       location: Location,\n+                       context: LvalueContext)\n+                       -> LvalueTy<'tcx> {\n         debug!(\"sanitize_lvalue: {:?}\", lvalue);\n-        match *lvalue {\n+        let lvalue_ty = match *lvalue {\n             Lvalue::Local(index) => LvalueTy::Ty {\n                 ty: self.mir.local_decls[index].ty,\n             },\n@@ -189,7 +193,12 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 LvalueTy::Ty { ty: sty }\n             }\n             Lvalue::Projection(ref proj) => {\n-                let base_ty = self.sanitize_lvalue(&proj.base, location);\n+                let base_context = if context.is_mutating_use() {\n+                    LvalueContext::Projection(Mutability::Mut)\n+                } else {\n+                    LvalueContext::Projection(Mutability::Not)\n+                };\n+                let base_ty = self.sanitize_lvalue(&proj.base, location, base_context);\n                 if let LvalueTy::Ty { ty } = base_ty {\n                     if ty.references_error() {\n                         assert!(self.errors_reported);\n@@ -200,7 +209,15 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 }\n                 self.sanitize_projection(base_ty, &proj.elem, lvalue, location)\n             }\n+        };\n+        if let LvalueContext::Copy = context {\n+            let ty = lvalue_ty.to_ty(self.tcx());\n+            if self.cx.infcx.type_moves_by_default(self.cx.param_env, ty, DUMMY_SP) {\n+                span_mirbug!(self, lvalue,\n+                             \"attempted copy of non-Copy type ({:?})\", ty);\n+            }\n         }\n+        lvalue_ty\n     }\n \n     fn sanitize_projection("}]}