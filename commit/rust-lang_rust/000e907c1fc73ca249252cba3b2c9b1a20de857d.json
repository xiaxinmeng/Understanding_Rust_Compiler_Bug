{"sha": "000e907c1fc73ca249252cba3b2c9b1a20de857d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGU5MDdjMWZjNzNjYTI0OTI1MmNiYTNiMmM5YjFhMjBkZTg1N2Q=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-01-03T07:29:11Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-01-03T07:43:52Z"}, "message": "Span::resolved_at and Span::located_at to combine behavior of two spans\n\nProc macro spans serve two mostly unrelated purposes: controlling name\nresolution and controlling error messages. It can be useful to mix the\nname resolution behavior of one span with the line/column error message\nlocations of a different span.\n\nIn particular, consider the case of a trait brought into scope within\nthe def_site of a custom derive. I want to invoke trait methods on the\nfields of the user's struct. If the field type does not implement the\nright trait, I want the error message to underline the corresponding\nstruct field.\n\nGenerating the method call with the def_site span is not ideal -- it\ncompiles and runs but error messages sadly always point to the derive\nattribute like we saw with Macros 1.1.\n\n```\n  |\n4 | #[derive(HeapSize)]\n  |          ^^^^^^^^\n```\n\nGenerating the method call with the same span as the struct field's\nident or type is not correct -- it shows the right underlines but fails\nto resolve to the trait in scope at the def_site.\n\n```\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nThe correct span for the method call is one that combines the def_site's\nname resolution with the struct field's line/column.\n\n```\nfield.span.resolved_at(Span::def_site())\n\n// equivalently\nSpan::def_site().located_at(field.span)\n```\n\nAdding both because which one is more natural will depend on context.", "tree": {"sha": "071aea346cf84227361c72c28bbf95a2bce98187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071aea346cf84227361c72c28bbf95a2bce98187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000e907c1fc73ca249252cba3b2c9b1a20de857d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJaTIm4AAoJEPm6FDuV/22CHfwQALQdPwZeKy7wrEOHBwwN8vX4\nI81U5KRqHSGs5CiaTDrDiSic7PkoFzJMj9Pno3XQkV64cO7bMK+7YT9/7CAGXFDt\nka1x1oaa3CKcVyVPlCe1M0w4jfbnJrzw7bAQYpbA1zmLQqfRx/wSJBYyYwRqNVhe\n0SmYYWV+/OJmNRQQWUpxADLZrhHMqY+IVaRXCFeLd9SmGMKBzzZfTQWbrVB18DRE\nC03rqrL2my7GAY8RI4jhtYkqqcydgUwryRs2Vri8RafPhBw+JrqSgji1f2zvwap+\negdBrFQGhj+XxddyfzrkTCuEmgHNR1Q0oBOBkf/YTGwjUYmMTkbYUZSf26qEBMsI\nUvEhrpM08MDjUGp40IYimOBoPN7xezvhuStUFu/KBYhkk4likqUchp5RB77IqglN\naMF68vat3ah6nDLxNtmWjEmvMJR0BROKN8AsUr3HYJWgb/ddVFBz/dcCwQB6kcZZ\nPqFVe9RqE7AU974655IAdLhVVFoDk2aTpCOQCOEYtQHSTLSZltXp47cTfRTASQek\nMKrpUJDpqQZWe4F62JSDbvhTpvQ5xNVeRJ0B8z5Z4hZz19SEmslHztUogUVyYcSD\n2VcMxv+ByM/rPZbKXuE9CBNmKnVAv18tVrcn5ZxN9ZN10YeXAG1NvmppGBn7iapG\n+pA6DMjMD/IetZUQ0bKS\n=l8mX\n-----END PGP SIGNATURE-----", "payload": "tree 071aea346cf84227361c72c28bbf95a2bce98187\nparent 0f4ebf9f0a3196420e25cf1558b49ea3f38643c4\nauthor David Tolnay <dtolnay@gmail.com> 1514964551 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1514965432 -0800\n\nSpan::resolved_at and Span::located_at to combine behavior of two spans\n\nProc macro spans serve two mostly unrelated purposes: controlling name\nresolution and controlling error messages. It can be useful to mix the\nname resolution behavior of one span with the line/column error message\nlocations of a different span.\n\nIn particular, consider the case of a trait brought into scope within\nthe def_site of a custom derive. I want to invoke trait methods on the\nfields of the user's struct. If the field type does not implement the\nright trait, I want the error message to underline the corresponding\nstruct field.\n\nGenerating the method call with the def_site span is not ideal -- it\ncompiles and runs but error messages sadly always point to the derive\nattribute like we saw with Macros 1.1.\n\n```\n  |\n4 | #[derive(HeapSize)]\n  |          ^^^^^^^^\n```\n\nGenerating the method call with the same span as the struct field's\nident or type is not correct -- it shows the right underlines but fails\nto resolve to the trait in scope at the def_site.\n\n```\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nThe correct span for the method call is one that combines the def_site's\nname resolution with the struct field's line/column.\n\n```\nfield.span.resolved_at(Span::def_site())\n\n// equivalently\nSpan::def_site().located_at(field.span)\n```\n\nAdding both because which one is more natural will depend on context.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000e907c1fc73ca249252cba3b2c9b1a20de857d", "html_url": "https://github.com/rust-lang/rust/commit/000e907c1fc73ca249252cba3b2c9b1a20de857d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000e907c1fc73ca249252cba3b2c9b1a20de857d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ebf9f0a3196420e25cf1558b49ea3f38643c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ebf9f0a3196420e25cf1558b49ea3f38643c4", "html_url": "https://github.com/rust-lang/rust/commit/0f4ebf9f0a3196420e25cf1558b49ea3f38643c4"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "f2936f2bca83d1cca1b8fd2da575b3ab0c797c18", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/000e907c1fc73ca249252cba3b2c9b1a20de857d/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e907c1fc73ca249252cba3b2c9b1a20de857d/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=000e907c1fc73ca249252cba3b2c9b1a20de857d", "patch": "@@ -254,6 +254,20 @@ impl Span {\n         Some(Span(self.0.to(other.0)))\n     }\n \n+    /// Creates a new span with the same line/column information as `self` but\n+    /// that resolves symbols as though it were at `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn resolved_at(&self, other: Span) -> Span {\n+        Span(self.0.with_ctxt(other.0.ctxt()))\n+    }\n+\n+    /// Creates a new span with the same name resolution behavior as `self` but\n+    /// with the line/column information of `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn located_at(&self, other: Span) -> Span {\n+        other.resolved_at(*self)\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);"}]}