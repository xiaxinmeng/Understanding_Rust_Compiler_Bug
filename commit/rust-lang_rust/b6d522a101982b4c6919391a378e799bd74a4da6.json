{"sha": "b6d522a101982b4c6919391a378e799bd74a4da6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDUyMmExMDE5ODJiNGM2OTE5MzkxYTM3OGU3OTliZDc0YTRkYTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-23T11:59:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "syntax: Pre-intern names of all built-in macros\n\nThey always end up interned anyway", "tree": {"sha": "404fe3b4f4c5c2ececec0aee30bffd6296009837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404fe3b4f4c5c2ececec0aee30bffd6296009837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d522a101982b4c6919391a378e799bd74a4da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d522a101982b4c6919391a378e799bd74a4da6", "html_url": "https://github.com/rust-lang/rust/commit/b6d522a101982b4c6919391a378e799bd74a4da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d522a101982b4c6919391a378e799bd74a4da6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee0ce82cba66305f03725fb73ad381349a9b8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0ce82cba66305f03725fb73ad381349a9b8e4", "html_url": "https://github.com/rust-lang/rust/commit/1ee0ce82cba66305f03725fb73ad381349a9b8e4"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "2a56f3dd7566bc2fa06b0994097c312b868eaf28", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -63,11 +63,11 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n \n     let span = span.with_ctxt(cx.backtrace());\n     item.visit_attrs(|attrs| {\n-        if names.contains(&Symbol::intern(\"Eq\")) && names.contains(&Symbol::intern(\"PartialEq\")) {\n-            let meta = cx.meta_word(span, Symbol::intern(\"structural_match\"));\n+        if names.contains(&sym::Eq) && names.contains(&sym::PartialEq) {\n+            let meta = cx.meta_word(span, sym::structural_match);\n             attrs.push(cx.attribute(span, meta));\n         }\n-        if names.contains(&Symbol::intern(\"Copy\")) {\n+        if names.contains(&sym::Copy) {\n             let meta = cx.meta_word(span, sym::rustc_copy_clone_marker);\n             attrs.push(cx.attribute(span, meta));\n         }"}, {"sha": "d0c4e8d6a5634b6bbbc09b8f252605141423bdc7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -613,7 +613,7 @@ impl<'a> StringReader<'a> {\n         if num_digits == 0 {\n             self.err_span_(start_bpos, self.pos, \"no valid digits found for number\");\n \n-            return (token::Integer, Symbol::intern(\"0\"));\n+            return (token::Integer, sym::integer(0));\n         }\n \n         // might be a float, but don't be greedy if this is actually an"}, {"sha": "e491e93256d1cf776d509b7910ebf11d3cf5e578", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -61,10 +61,10 @@ impl MultiItemModifier for BuiltinDerive {\n }\n \n macro_rules! derive_traits {\n-    ($( [$deprecation:expr] $name:expr => $func:path, )+) => {\n+    ($( [$deprecation:expr] $name:ident => $func:path, )+) => {\n         pub fn is_builtin_trait(name: ast::Name) -> bool {\n-            match &*name.as_str() {\n-                $( $name )|+ => true,\n+            match name {\n+                $( sym::$name )|+ => true,\n                 _ => false,\n             }\n         }\n@@ -80,7 +80,7 @@ macro_rules! derive_traits {\n \n             $(\n                 resolver.add_builtin(\n-                    ast::Ident::with_empty_ctxt(Symbol::intern($name)),\n+                    ast::Ident::with_empty_ctxt(sym::$name),\n                     Lrc::new(SyntaxExtension {\n                         deprecation: $deprecation.map(|msg| Deprecation {\n                             since: Some(Symbol::intern(\"1.0.0\")),\n@@ -100,40 +100,40 @@ macro_rules! derive_traits {\n \n derive_traits! {\n     [None]\n-    \"Clone\" => clone::expand_deriving_clone,\n+    Clone => clone::expand_deriving_clone,\n \n     [None]\n-    \"Hash\" => hash::expand_deriving_hash,\n+    Hash => hash::expand_deriving_hash,\n \n     [None]\n-    \"RustcEncodable\" => encodable::expand_deriving_rustc_encodable,\n+    RustcEncodable => encodable::expand_deriving_rustc_encodable,\n \n     [None]\n-    \"RustcDecodable\" => decodable::expand_deriving_rustc_decodable,\n+    RustcDecodable => decodable::expand_deriving_rustc_decodable,\n \n     [None]\n-    \"PartialEq\" => partial_eq::expand_deriving_partial_eq,\n+    PartialEq => partial_eq::expand_deriving_partial_eq,\n     [None]\n-    \"Eq\" => eq::expand_deriving_eq,\n+    Eq => eq::expand_deriving_eq,\n     [None]\n-    \"PartialOrd\" => partial_ord::expand_deriving_partial_ord,\n+    PartialOrd => partial_ord::expand_deriving_partial_ord,\n     [None]\n-    \"Ord\" => ord::expand_deriving_ord,\n+    Ord => ord::expand_deriving_ord,\n \n     [None]\n-    \"Debug\" => debug::expand_deriving_debug,\n+    Debug => debug::expand_deriving_debug,\n \n     [None]\n-    \"Default\" => default::expand_deriving_default,\n+    Default => default::expand_deriving_default,\n \n     [None]\n-    \"Copy\" => bounds::expand_deriving_copy,\n+    Copy => bounds::expand_deriving_copy,\n \n     // deprecated\n     [Some(\"derive(Encodable) is deprecated in favor of derive(RustcEncodable)\")]\n-    \"Encodable\" => encodable::expand_deriving_encodable,\n+    Encodable => encodable::expand_deriving_encodable,\n     [Some(\"derive(Decodable) is deprecated in favor of derive(RustcDecodable)\")]\n-    \"Decodable\" => decodable::expand_deriving_decodable,\n+    Decodable => decodable::expand_deriving_decodable,\n }\n \n /// Construct a name for the inner type parameter that can't collide with any type parameters of"}, {"sha": "62530f4fe7b336dd11524db94418faff18b6610e", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -74,14 +74,14 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     };\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n-            register(Symbol::intern(stringify!($name)), SyntaxExtension::default(\n+            register(sym::$name, SyntaxExtension::default(\n                 SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)), edition\n             ));\n         )* }\n     }\n     macro_rules! register_unstable {\n         ($( [$feature:expr, $reason:expr, $issue:expr] $name:ident: $f:expr, )*) => { $(\n-            register(Symbol::intern(stringify!($name)), SyntaxExtension {\n+            register(sym::$name, SyntaxExtension {\n                 stability: Some(Stability::unstable(\n                     $feature, Some(Symbol::intern($reason)), $issue\n                 )),\n@@ -144,7 +144,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n \n     // format_args uses `unstable` things internally.\n     let allow_internal_unstable = Some([sym::fmt_internals][..].into());\n-    register(Symbol::intern(\"format_args\"), SyntaxExtension {\n+    register(sym::format_args, SyntaxExtension {\n         allow_internal_unstable: allow_internal_unstable.clone(),\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args)), edition"}, {"sha": "e502735452735d8dca8264ae20b834953a2acdfd", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -548,10 +548,10 @@ impl server::Literal for Rustc<'_> {\n         self.lit(token::Float, Symbol::intern(n), None)\n     }\n     fn f32(&mut self, n: &str) -> Self::Literal {\n-        self.lit(token::Float, Symbol::intern(n), Some(Symbol::intern(\"f32\")))\n+        self.lit(token::Float, Symbol::intern(n), Some(sym::f32))\n     }\n     fn f64(&mut self, n: &str) -> Self::Literal {\n-        self.lit(token::Float, Symbol::intern(n), Some(Symbol::intern(\"f64\")))\n+        self.lit(token::Float, Symbol::intern(n), Some(sym::f64))\n     }\n     fn string(&mut self, string: &str) -> Self::Literal {\n         let mut escaped = String::new();"}, {"sha": "8bb622a68552f66a3324a2fa2e478b6d79fc9a8c", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d522a101982b4c6919391a378e799bd74a4da6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=b6d522a101982b4c6919391a378e799bd74a4da6", "patch": "@@ -141,6 +141,7 @@ symbols! {\n         ArgumentV1,\n         arm_target_feature,\n         asm,\n+        assert,\n         associated_consts,\n         associated_type_bounds,\n         associated_type_defaults,\n@@ -184,8 +185,10 @@ symbols! {\n         cmp,\n         cmpxchg16b_target_feature,\n         cold,\n+        column,\n         compile_error,\n         compiler_builtins,\n+        concat,\n         concat_idents,\n         conservative_impl_trait,\n         console,\n@@ -203,6 +206,7 @@ symbols! {\n         contents,\n         context,\n         convert,\n+        Copy,\n         copy_closures,\n         core,\n         core_intrinsics,\n@@ -217,8 +221,10 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         c_variadic,\n+        Debug,\n         declare_lint_pass,\n         decl_macro,\n+        Decodable,\n         Default,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n@@ -253,9 +259,12 @@ symbols! {\n         eh_personality,\n         eh_unwind_resume,\n         enable,\n+        Encodable,\n+        env,\n         eq,\n         err,\n         Err,\n+        Eq,\n         Equal,\n         except,\n         exclusive_range_pattern,\n@@ -284,6 +293,7 @@ symbols! {\n         fmt_internals,\n         fn_must_use,\n         forbid,\n+        format_args,\n         format_args_nl,\n         from,\n         From,\n@@ -335,6 +345,8 @@ symbols! {\n         index_mut,\n         in_band_lifetimes,\n         include,\n+        include_bytes,\n+        include_str,\n         inclusive_range_syntax,\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n@@ -363,6 +375,7 @@ symbols! {\n         lhs,\n         lib,\n         lifetime,\n+        line,\n         link,\n         linkage,\n         link_args,\n@@ -402,6 +415,7 @@ symbols! {\n         mips_target_feature,\n         mmx_target_feature,\n         module,\n+        module_path,\n         more_struct_aliases,\n         movbe_target_feature,\n         must_use,\n@@ -447,6 +461,7 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         Option,\n+        option_env,\n         opt_out_copy,\n         or,\n         Ord,\n@@ -462,6 +477,7 @@ symbols! {\n         parent_trait,\n         partial_cmp,\n         param_attrs,\n+        PartialEq,\n         PartialOrd,\n         passes,\n         pat,\n@@ -532,6 +548,8 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        RustcDecodable,\n+        RustcEncodable,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n@@ -591,7 +609,6 @@ symbols! {\n         _Self,\n         self_in_typedefs,\n         self_struct_ctor,\n-        Send,\n         should_panic,\n         simd,\n         simd_ffi,\n@@ -613,6 +630,7 @@ symbols! {\n         static_recursion,\n         std,\n         str,\n+        stringify,\n         stmt,\n         stmt_expr_attributes,\n         stop_after_dataflow,"}]}