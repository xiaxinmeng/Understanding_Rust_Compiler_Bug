{"sha": "7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "node_id": "C_kwDOAAsO6NoAKDc2ODdiN2U1MTBkNjhjYTRkZmI5ZTZmYTkzZDc0OGMwNDUwZmE3Nzk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-20T06:37:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-20T06:41:44Z"}, "message": "rustup, fmt", "tree": {"sha": "ea6e8aef7a628d09959f5d54cb9b15cbb60976ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea6e8aef7a628d09959f5d54cb9b15cbb60976ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "html_url": "https://github.com/rust-lang/rust/commit/7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca1f85a2d2c81866250373b912b1a5938517d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca1f85a2d2c81866250373b912b1a5938517d24", "html_url": "https://github.com/rust-lang/rust/commit/5ca1f85a2d2c81866250373b912b1a5938517d24"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "78b9a110aa7c73d5df529993f3b52d712be43e11", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -1 +1 @@\n-2019147c5642c08cdb9ad4cacd97dd1fa4ffa701\n+acb8934fd57b3c2740c4abac0a5728c2c9b1423b"}, {"sha": "d301ced8511732a1c7092fb7a15c19a8ef0d691f", "filename": "src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fsync.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -322,10 +322,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// otherwise returns the value from the closure\n     fn rwlock_get_or_create<F>(&mut self, existing: F) -> InterpResult<'tcx, RwLockId>\n     where\n-        F: FnOnce(\n-            &mut MiriInterpCx<'mir, 'tcx>,\n-            RwLockId,\n-        ) -> InterpResult<'tcx, Option<RwLockId>>,\n+        F: FnOnce(&mut MiriInterpCx<'mir, 'tcx>, RwLockId) -> InterpResult<'tcx, Option<RwLockId>>,\n     {\n         let this = self.eval_context_mut();\n         let next_index = this.machine.threads.sync.rwlocks.next_index();"}, {"sha": "f1a3d19fb4cbc6d09a84e2456d641bedd87fddcd", "filename": "src/concurrency/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fthread.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -32,8 +32,9 @@ pub enum SchedulingAction {\n \n /// Timeout callbacks can be created by synchronization primitives to tell the\n /// scheduler that they should be called once some period of time passes.\n-type TimeoutCallback<'mir, 'tcx> =\n-    Box<dyn FnOnce(&mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx> + 'tcx>;\n+type TimeoutCallback<'mir, 'tcx> = Box<\n+    dyn FnOnce(&mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx> + 'tcx,\n+>;\n \n /// A thread identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]"}, {"sha": "868c85c04a88d5d8367ff2435c98c432f7cef5e9", "filename": "src/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -109,7 +109,8 @@ fn prune_stacktrace<'tcx>(\n             if has_local_frame {\n                 // Remove all frames marked with `caller_location` -- that attribute indicates we\n                 // usually want to point at the caller, not them.\n-                stacktrace.retain(|frame| !frame.instance.def.requires_caller_location(machine.tcx));\n+                stacktrace\n+                    .retain(|frame| !frame.instance.def.requires_caller_location(machine.tcx));\n \n                 // This is part of the logic that `std` uses to select the relevant part of a\n                 // backtrace. But here, we only look for __rust_begin_short_backtrace, not\n@@ -371,56 +372,48 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub fn emit_diagnostic(&self, e: NonHaltingDiagnostic) {\n         use NonHaltingDiagnostic::*;\n \n-        let stacktrace = MiriInterpCx::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n+        let stacktrace =\n+            MiriInterpCx::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n         let (title, diag_level) = match e {\n-            RejectedIsolatedOp(_) =>\n-                (\"operation rejected by isolation\", DiagLevel::Warning),\n+            RejectedIsolatedOp(_) => (\"operation rejected by isolation\", DiagLevel::Warning),\n             Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n             CreatedPointerTag(..)\n             | PoppedPointerTag(..)\n             | CreatedCallId(..)\n             | CreatedAlloc(..)\n             | FreedAlloc(..)\n             | ProgressReport { .. }\n-            | WeakMemoryOutdatedLoad =>\n-                (\"tracking was triggered\", DiagLevel::Note),\n+            | WeakMemoryOutdatedLoad => (\"tracking was triggered\", DiagLevel::Note),\n         };\n \n         let msg = match e {\n-            CreatedPointerTag(tag, None) =>\n-                format!(\"created tag {tag:?}\"),\n+            CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n             CreatedPointerTag(tag, Some((alloc_id, range))) =>\n                 format!(\"created tag {tag:?} at {alloc_id:?}{range:?}\"),\n             PoppedPointerTag(item, tag) =>\n                 match tag {\n-                    None =>\n-                        format!(\n-                            \"popped tracked tag for item {item:?} due to deallocation\",\n-                        ),\n+                    None => format!(\"popped tracked tag for item {item:?} due to deallocation\",),\n                     Some((tag, access)) => {\n                         format!(\n                             \"popped tracked tag for item {item:?} due to {access:?} access for {tag:?}\",\n                         )\n                     }\n                 },\n-            CreatedCallId(id) =>\n-                format!(\"function call with id {id}\"),\n+            CreatedCallId(id) => format!(\"function call with id {id}\"),\n             CreatedAlloc(AllocId(id), size, align, kind) =>\n                 format!(\n                     \"created {kind} allocation of {size} bytes (alignment {align} bytes) with id {id}\",\n                     size = size.bytes(),\n                     align = align.bytes(),\n                 ),\n-            FreedAlloc(AllocId(id)) =>\n-                format!(\"freed allocation with id {id}\"),\n+            FreedAlloc(AllocId(id)) => format!(\"freed allocation with id {id}\"),\n             RejectedIsolatedOp(ref op) =>\n                 format!(\"{op} was made to return an error due to isolation\"),\n             ProgressReport { .. } =>\n                 format!(\"progress report: current operation being executed is here\"),\n-            Int2Ptr { .. } =>\n-                format!(\"integer-to-pointer cast\"),\n+            Int2Ptr { .. } => format!(\"integer-to-pointer cast\"),\n             WeakMemoryOutdatedLoad =>\n                 format!(\"weak memory emulation: outdated value returned from load\"),\n         };\n@@ -429,22 +422,48 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             ProgressReport { block_count } => {\n                 // It is important that each progress report is slightly different, since\n                 // identical diagnostics are being deduplicated.\n-                vec![\n-                    (None, format!(\"so far, {block_count} basic blocks have been executed\")),\n-                ]\n+                vec![(None, format!(\"so far, {block_count} basic blocks have been executed\"))]\n             }\n             _ => vec![],\n         };\n \n         let helps = match e {\n             Int2Ptr { details: true } =>\n                 vec![\n-                    (None, format!(\"This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\")),\n-                    (None, format!(\"which means that Miri might miss pointer bugs in this program.\")),\n-                    (None, format!(\"See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\")),\n-                    (None, format!(\"To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\")),\n-                    (None, format!(\"You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\")),\n-                    (None, format!(\"Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\")),\n+                    (\n+                        None,\n+                        format!(\n+                            \"This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\"\n+                        ),\n+                    ),\n+                    (\n+                        None,\n+                        format!(\"which means that Miri might miss pointer bugs in this program.\"),\n+                    ),\n+                    (\n+                        None,\n+                        format!(\n+                            \"See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\"\n+                        ),\n+                    ),\n+                    (\n+                        None,\n+                        format!(\n+                            \"To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\"\n+                        ),\n+                    ),\n+                    (\n+                        None,\n+                        format!(\n+                            \"You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\"\n+                        ),\n+                    ),\n+                    (\n+                        None,\n+                        format!(\n+                            \"Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\"\n+                        ),\n+                    ),\n                 ],\n             _ => vec![],\n         };"}, {"sha": "22bbe4f816cce1c830109b3b27941d22ea2a8227", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -180,7 +180,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     entry_id: DefId,\n     entry_type: EntryFnType,\n     config: &MiriConfig,\n-) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>, MPlaceTy<'tcx, Provenance>)> {\n+) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>, MPlaceTy<'tcx, Provenance>)>\n+{\n     let param_env = ty::ParamEnv::reveal_all();\n     let layout_cx = LayoutCx { tcx, param_env };\n     let mut ecx = InterpCx::new("}, {"sha": "6006d6c89dbcab993e15237ea55890c7aa916349", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -94,17 +94,17 @@ pub use crate::concurrency::{\n     },\n };\n pub use crate::diagnostics::{\n-    report_error, EvalContextExt as DiagnosticsEvalContextExt,\n-    NonHaltingDiagnostic, TerminationInfo,\n+    report_error, EvalContextExt as DiagnosticsEvalContextExt, NonHaltingDiagnostic,\n+    TerminationInfo,\n };\n pub use crate::eval::{\n     create_ecx, eval_entry, AlignmentCheck, BacktraceStyle, IsolatedOp, MiriConfig, RejectOpWith,\n };\n pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n-    AllocExtra, MiriMachine, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMemoryKind,\n-    Provenance, ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    AllocExtra, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind, Provenance,\n+    ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;"}, {"sha": "0d76ed4e30878c1f24dd8ee686280f3778262e17", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -471,7 +471,9 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n                 Some((orig_tag, kind))\n             }\n         };\n-        self.current_span.machine().emit_diagnostic(NonHaltingDiagnostic::PoppedPointerTag(*item, summary));\n+        self.current_span\n+            .machine()\n+            .emit_diagnostic(NonHaltingDiagnostic::PoppedPointerTag(*item, summary));\n     }\n }\n "}, {"sha": "f7f4b1357f1069ce880d2a6e6966571dfdd015fa", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7687b7e510d68ca4dfb9e6fa93d748c0450fa779/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=7687b7e510d68ca4dfb9e6fa93d748c0450fa779", "patch": "@@ -572,7 +572,8 @@ impl Stacks {\n             // not through a pointer). That is, whenever we directly write to a local, this will pop\n             // everything else off the stack, invalidating all previous pointers,\n             // and in particular, *all* raw pointers.\n-            MemoryKind::Stack => (extra.base_ptr_tag(id, current_span.machine()), Permission::Unique),\n+            MemoryKind::Stack =>\n+                (extra.base_ptr_tag(id, current_span.machine()), Permission::Unique),\n             // Everything else is shared by default.\n             _ => (extra.base_ptr_tag(id, current_span.machine()), Permission::SharedReadWrite),\n         };"}]}