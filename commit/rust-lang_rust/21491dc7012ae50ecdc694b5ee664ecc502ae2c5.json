{"sha": "21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNDkxZGM3MDEyYWU1MGVjZGM2OTRiNWVlNjY0ZWNjNTAyYWUyYzU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-03-21T03:27:08Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-14T04:37:25Z"}, "message": "Properly parse '--extern-private' with name and path", "tree": {"sha": "c9db87cbc1361fcc989fb25b4d263b4843235d10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9db87cbc1361fcc989fb25b4d263b4843235d10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyyuQUACgkQtAh+UQ6Y\nsWSOWA//cDBmGQ4u3n6SlJaVBlpYLqOLnXgZKJeyBHCxmQzUVEtBm1tFL/LbO7pQ\nhCCP5UHlZ7hW/iAU+iwI2FuZ4DI3+pRwDnxaZ8YwYRu1WKWEeqdHzmaihuJR0dh8\nKC9TlpCnmKW59sHp6u4fHXJDUnfpTmcliZvPFh0QS7DvMc2Q/WlQPS2UBg6v4i2f\nkZi31mF8v6T73+3GmiKpxaCE6WK5q/Eq10RutKozXkTKzs/2nSXL/aKqV51h0DDP\n/Ys7LcQ0xEUhlBSUFlR6N6biRAIuKicnMby5G7nmetmqhUR3FiYvBej9R6wNRF15\nvWlP2+1hP6p+Ym2rT5+R7q8WU0eb6k5eg+UEZj+5l383bsnLYPSct9XhQ1GXhqIE\nxtPJiu01wzrUqIV1eqcFIen6oOZkFV+CJKwc9WRyMHwJdK08WY/wtR+9cLUJm4Te\n1bU3AM1simfbf/bvV+lHECdoJX1ZHjp28xWOAKGpuBZW/frTShznegGDHtOVpony\nwb88fl/dlBs3VoBZfxjR5UCDDVa3wXQDk3DlThuO+KLRHeaDJx0saxzYrvyoaOoG\nCDQnSyq37Lge4wUgRQM5Rvcf4p/PxVyjWHsvfI/yC2X/C1mxOuveWmoHK/hnNIUI\nU4r+QUkAtPvLNJ5KcXTlb/UUZxATBJcNvjABrx+x7AL4vqQcX/o=\n=2N1M\n-----END PGP SIGNATURE-----", "payload": "tree c9db87cbc1361fcc989fb25b4d263b4843235d10\nparent ee621f42329069c296b4c2066b3743cc4ff0f369\nauthor Aaron Hill <aa1ronham@gmail.com> 1553138828 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1555216645 -0400\n\nProperly parse '--extern-private' with name and path\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "html_url": "https://github.com/rust-lang/rust/commit/21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee621f42329069c296b4c2066b3743cc4ff0f369", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee621f42329069c296b4c2066b3743cc4ff0f369", "html_url": "https://github.com/rust-lang/rust/commit/ee621f42329069c296b4c2066b3743cc4ff0f369"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "d22de6c6476996ea85f254427de7fbb933b75784", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -199,6 +199,7 @@ pub trait CrateStore {\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n+    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n     fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>;"}, {"sha": "92f9346ef6e47ce835b1adc5abfacc19f4c51cb7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -285,6 +285,7 @@ impl OutputTypes {\n #[derive(Clone, Hash)]\n pub struct Externs(BTreeMap<String, BTreeSet<Option<String>>>);\n \n+\n impl Externs {\n     pub fn new(data: BTreeMap<String, BTreeSet<Option<String>>>) -> Externs {\n         Externs(data)\n@@ -299,6 +300,21 @@ impl Externs {\n     }\n }\n \n+// Similar to 'Externs', but used for the '--extern-private' option\n+#[derive(Clone, Hash)]\n+pub struct ExternPrivates(BTreeMap<String, BTreeSet<String>>);\n+\n+impl ExternPrivates {\n+    pub fn get(&self, key: &str) -> Option<&BTreeSet<String>> {\n+        self.0.get(key)\n+    }\n+\n+    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<String>> {\n+        self.0.iter()\n+    }\n+}\n+\n+\n macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [UNTRACKED]) => ({});\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n@@ -428,9 +444,9 @@ top_level_options!(\n \n         edition: Edition [TRACKED],\n \n-        // The list of crates to consider private when\n+        // The crates to consider private when\n         // checking leaked private dependency types in public interfaces\n-        extern_private: Vec<String> [TRACKED],\n+        extern_private: ExternPrivates [UNTRACKED],\n     }\n );\n \n@@ -633,7 +649,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n-            extern_private: Vec::new()\n+            extern_private: ExternPrivates(BTreeMap::new())\n         }\n     }\n }\n@@ -2315,10 +2331,25 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n-    let extern_private = matches.opt_strs(\"extern-private\");\n+    let mut extern_private: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n+\n+    for arg in matches.opt_strs(\"extern-private\").into_iter() {\n+        let mut parts = arg.splitn(2, '=');\n+        let name = parts.next().unwrap_or_else(||\n+            early_error(error_format, \"--extern-private value must not be empty\"));\n+        let location = parts.next().map(|s| s.to_string()).unwrap_or_else(||\n+            early_error(error_format, \"--extern-private value must include a location\"));\n+\n+\n+        extern_private\n+            .entry(name.to_owned())\n+            .or_default()\n+            .insert(location);\n+\n+    }\n \n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n-    for arg in matches.opt_strs(\"extern\").into_iter().chain(matches.opt_strs(\"extern-private\")) {\n+    for arg in matches.opt_strs(\"extern\").into_iter() {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().unwrap_or_else(||\n             early_error(error_format, \"--extern value must not be empty\"));\n@@ -2386,7 +2417,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n-            extern_private\n+            extern_private: ExternPrivates(extern_private)\n         },\n         cfg,\n     )"}, {"sha": "8bfdd0801d40f712133c088865be5279d219b8c7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -1391,6 +1391,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Returns whether or not the crate with CrateNum 'cnum'\n+    /// is marked as a private dependency\n+    pub fn is_private_dep(self, cnum: CrateNum) -> bool {\n+        if cnum == LOCAL_CRATE {\n+            false\n+        } else {\n+            self.cstore.crate_is_private_dep_untracked(cnum)\n+        }\n+    }\n+\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n         if def_id.is_local() {"}, {"sha": "53348e75aa9327e3f3624b4f171aff7b8e258448", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -195,12 +195,29 @@ impl<'a> CrateLoader<'a> {\n         ident: Symbol,\n         span: Span,\n         lib: Library,\n-        dep_kind: DepKind\n+        dep_kind: DepKind,\n+        name: Symbol\n     ) -> (CrateNum, Lrc<cstore::CrateMetadata>) {\n         let crate_root = lib.metadata.get_root();\n-        info!(\"register crate `extern crate {} as {}`\", crate_root.name, ident);\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n+        let mut private_dep = false;\n+        if let Some(s) = self.sess.opts.extern_private.get(&name.as_str()) {\n+            for path in s {\n+                let p = Some(path.as_str());\n+                if p == lib.dylib.as_ref().and_then(|r| r.0.to_str()) ||\n+                    p == lib.rlib.as_ref().and_then(|r| r.0.to_str()) {\n+\n+                    private_dep = true;\n+                }\n+            }\n+        }\n+\n+\n+        info!(\"register crate `extern crate {} as {}` (private_dep = {})\",\n+            crate_root.name, ident, private_dep);\n+\n+\n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();\n \n@@ -272,7 +289,8 @@ impl<'a> CrateLoader<'a> {\n                 dylib,\n                 rlib,\n                 rmeta,\n-            }\n+            },\n+            private_dep\n         };\n \n         let cmeta = Lrc::new(cmeta);\n@@ -390,7 +408,7 @@ impl<'a> CrateLoader<'a> {\n                 Ok((cnum, data))\n             }\n             (LoadResult::Loaded(library), host_library) => {\n-                Ok(self.register_crate(host_library, root, ident, span, library, dep_kind))\n+                Ok(self.register_crate(host_library, root, ident, span, library, dep_kind, name))\n             }\n             _ => panic!()\n         }"}, {"sha": "22a13f37722b8cfced8117c8d8f7684b62ae7b37", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -79,6 +79,10 @@ pub struct CrateMetadata {\n     pub source: CrateSource,\n \n     pub proc_macros: Option<Vec<(ast::Name, Lrc<SyntaxExtension>)>>,\n+\n+    /// Whether or not this crate should be consider a private dependency\n+    /// for purposes of the 'exported_private_dependencies' lint\n+    pub private_dep: bool\n }\n \n pub struct CStore {\n@@ -114,7 +118,8 @@ impl CStore {\n     }\n \n     pub(super) fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n-        self.metas.borrow()[cnum].clone().unwrap()\n+        self.metas.borrow()[cnum].clone()\n+            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum))\n     }\n \n     pub(super) fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {"}, {"sha": "75671facf9446058851009af744b9f3fcb22d176", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -399,6 +399,7 @@ impl cstore::CStore {\n         r\n     }\n \n+\n     pub fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition {\n         self.get_crate_data(cnum).root.edition\n     }\n@@ -494,6 +495,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name\n     }\n \n+    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).private_dep\n+    }\n+\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n     {\n         self.get_crate_data(cnum).root.disambiguator"}, {"sha": "44621e5dc95d1b2b823f810fc109a6f7c64c780a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -1540,7 +1540,6 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n-    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1622,7 +1621,7 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     /// 2. It comes from a private crate\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n         let ret = self.required_visibility == ty::Visibility::Public &&\n-            self.private_crates.contains(&item_id.krate);\n+            self.tcx.is_private_dep(item_id.krate);\n \n         log::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n         return ret;\n@@ -1640,7 +1639,6 @@ struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a HirIdSet,\n-    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1678,7 +1676,6 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n             in_assoc_ty: false,\n-            private_crates: self.private_crates.clone()\n         }\n     }\n \n@@ -1876,17 +1873,11 @@ fn check_private_in_public<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, krate: CrateNum) {\n         pub_restricted_visitor.has_pub_restricted\n     };\n \n-    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n-        .flat_map(|c| {\n-            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n-        }).collect();\n-\n     // Check for private types and traits in public interfaces.\n     let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n         tcx,\n         has_pub_restricted,\n         old_error_set: &visitor.old_error_set,\n-        private_crates\n     };\n     krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }"}, {"sha": "784615354a95c6f5e105a4b5eb957bac7888d452", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -1,6 +1,6 @@\n  // aux-build:priv_dep.rs\n  // aux-build:pub_dep.rs\n- // compile-flags: --extern-private priv_dep\n+ // extern-private:priv_dep\n #![deny(exported_private_dependencies)]\n \n // This crate is a private dependency"}, {"sha": "c548b1efa75cbdc88953c83b6ad5f057d2b3adb1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -286,6 +286,9 @@ pub struct TestProps {\n     // directory as the test, but for backwards compatibility reasons\n     // we also check the auxiliary directory)\n     pub aux_builds: Vec<String>,\n+    // A list of crates to pass '--extern-private name:PATH' flags for\n+    // This should be a subset of 'aux_build'\n+    pub extern_private: Vec<String>,\n     // Environment settings to use for compiling\n     pub rustc_env: Vec<(String, String)>,\n     // Environment settings to use during execution\n@@ -353,6 +356,7 @@ impl TestProps {\n             run_flags: None,\n             pp_exact: None,\n             aux_builds: vec![],\n+            extern_private: vec![],\n             revisions: vec![],\n             rustc_env: vec![],\n             exec_env: vec![],\n@@ -469,6 +473,10 @@ impl TestProps {\n                 self.aux_builds.push(ab);\n             }\n \n+            if let Some(ep) = config.parse_extern_private(ln) {\n+                self.extern_private.push(ep);\n+            }\n+\n             if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n                 self.exec_env.push(ee);\n             }\n@@ -610,6 +618,10 @@ impl Config {\n             .map(|r| r.trim().to_string())\n     }\n \n+    fn parse_extern_private(&self, line: &str) -> Option<String> {\n+        self.parse_name_value_directive(line, \"extern-private\")\n+    }\n+\n     fn parse_compile_flags(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"compile-flags\")\n     }"}, {"sha": "cec1d83eb0262364251ea4341b87ac6ca715c2e3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21491dc7012ae50ecdc694b5ee664ecc502ae2c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "patch": "@@ -74,6 +74,17 @@ pub fn dylib_env_var() -> &'static str {\n     }\n }\n \n+/// The platform-specific library file extension\n+pub fn lib_extension() -> &'static str {\n+    if cfg!(windows) {\n+        \".dll\"\n+    } else if cfg!(target_os = \"macos\") {\n+        \".dylib\"\n+    } else {\n+        \".so\"\n+    }\n+}\n+\n #[derive(Debug, PartialEq)]\n pub enum DiffLine {\n     Context(String),\n@@ -1585,6 +1596,13 @@ impl<'test> TestCx<'test> {\n             create_dir_all(&aux_dir).unwrap();\n         }\n \n+        for priv_dep in &self.props.extern_private {\n+            let lib_name = format!(\"lib{}{}\", priv_dep, lib_extension());\n+            rustc\n+                .arg(\"--extern-private\")\n+                .arg(format!(\"{}={}\", priv_dep, aux_dir.join(lib_name).to_str().unwrap()));\n+        }\n+\n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n             let aux_props ="}]}