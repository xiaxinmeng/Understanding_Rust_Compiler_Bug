{"sha": "8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDBmMTk5MTc5M2UxYzFlYzBjNDU4OTFiYmNjNWQzYTdiMDVlYmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-27T23:45:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-27T23:45:04Z"}, "message": "Merge branch 'master' of github.com:graydon/rust", "tree": {"sha": "d1d9e712a4ee296df5e1a2f2596660c3a47f60ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d9e712a4ee296df5e1a2f2596660c3a47f60ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "html_url": "https://github.com/rust-lang/rust/commit/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99106e4029860b3937bf82db5fb3e3dcd651243c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99106e4029860b3937bf82db5fb3e3dcd651243c", "html_url": "https://github.com/rust-lang/rust/commit/99106e4029860b3937bf82db5fb3e3dcd651243c"}, {"sha": "a2081deb2d16c58f2b367ad8a8d4a047d80f51a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2081deb2d16c58f2b367ad8a8d4a047d80f51a6", "html_url": "https://github.com/rust-lang/rust/commit/a2081deb2d16c58f2b367ad8a8d4a047d80f51a6"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "380ec150cf6124965ddb907e4a083bd99d0c8a17", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "patch": "@@ -35,7 +35,7 @@ tag def_wrap {\n     def_wrap_import(@ast.view_item);\n     def_wrap_mod(@ast.item);\n     def_wrap_other(def);\n-    def_wrap_expr_field(uint);\n+    def_wrap_expr_field(uint, def);\n     def_wrap_resolving;\n }\n \n@@ -72,6 +72,9 @@ fn unwrap_def(def_wrap d) -> def {\n         case (def_wrap_other(?d)) {\n             ret d;\n         }\n+        case (def_wrap_expr_field(_, ?d)) {\n+            ret d;\n+        }\n     }\n }\n \n@@ -140,9 +143,9 @@ fn find_final_def(&env e, import_map index,\n             case (def_wrap_use(?c)) {\n                 e.sess.span_err(sp, \"Crate access is not implemented\");\n             }\n-            case (_) {\n+            case (def_wrap_other(?d)) {\n                 let uint l = _vec.len[ident](idents);\n-                ret def_wrap_expr_field(l);\n+                ret def_wrap_expr_field(l, d);\n             }\n         }\n         fail;\n@@ -419,26 +422,13 @@ fn fold_pat_tag(&env e, &span sp, ast.path p, vec[@ast.pat] args,\n fn fold_expr_path(&env e, &span sp, &ast.path p, &option.t[def] d,\n                   ann a) -> @ast.expr {\n     auto n_idents = _vec.len[ast.ident](p.node.idents);\n-\n     check (n_idents != 0u);\n-    auto id0 = p.node.idents.(0);\n-\n-    auto d_ = lookup_name(e, id0);\n-\n-    alt (d_) {\n-        case (some[def](_)) {\n-            // log \"resolved name \" + n.node.ident;\n-        }\n-        case (none[def]) {\n-            e.sess.span_err(sp, \"unresolved name: \" + id0);\n-        }\n-    }\n \n     auto index = new_def_hash[def_wrap]();\n     auto d = find_final_def(e, index, sp, p.node.idents, none[ast.def_id]);\n     let uint path_len = 0u;\n     alt (d) {\n-        case (def_wrap_expr_field(?remaining)) {\n+        case (def_wrap_expr_field(?remaining, _)) {\n             path_len = n_idents - remaining + 1u;\n         }\n         case (def_wrap_other(_)) {\n@@ -453,7 +443,8 @@ fn fold_expr_path(&env e, &span sp, &ast.path p, &option.t[def] d,\n     }\n     auto path_elems =\n         _vec.slice[ident](p.node.idents, 0u, path_len);\n-    auto p_ = rec(node=rec(idents = vec(id0) with p.node) with p);\n+    auto p_ = rec(node=rec(idents = path_elems with p.node) with p);\n+    auto d_ = some(unwrap_def(d));\n     auto ex = @fold.respan[ast.expr_](sp, ast.expr_path(p_, d_, a));\n     auto i = path_len;\n     while (i < n_idents) {\n@@ -473,7 +464,7 @@ fn fold_view_item_import(&env e, &span sp,\n     auto last_id = is.(len - 1u);\n     auto d = find_final_def(e, index, sp, is, some(id));\n     alt (d) {\n-        case (def_wrap_expr_field(?remain)) {\n+        case (def_wrap_expr_field(?remain, _)) {\n             auto ident = is.(len - remain);\n             e.sess.span_err(sp, ident + \" is not a module or crate\");\n         }"}]}