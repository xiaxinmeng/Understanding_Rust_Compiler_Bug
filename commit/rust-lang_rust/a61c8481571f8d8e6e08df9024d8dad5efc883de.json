{"sha": "a61c8481571f8d8e6e08df9024d8dad5efc883de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWM4NDgxNTcxZjhkOGU2ZTA4ZGY5MDI0ZDhkYWQ1ZWZjODgzZGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-08T22:11:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-08T22:11:52Z"}, "message": "Merge #5273\n\n5273: Refactor hover tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0b873401a6c76260c30f34a4de583294aa9cdcc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b873401a6c76260c30f34a4de583294aa9cdcc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61c8481571f8d8e6e08df9024d8dad5efc883de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBkSoCRBK7hj4Ov3rIwAAdHIIACHSFqIWR47B0772Wr5KiuSf\n3X3se2Jgx0VLt24F8wz4l/omW7pDwNFgj62k3ADeTMP5ULPWMmDhvCNTYyGN5Q/H\nNG9QJfjow0nBEpGnEqW98HTn8GSBwp9WZzMPngoPeJPSr+Fag1ZE5/V3dyt96l+p\nvK+5GV+7cQe+BOw9G5NY/QE2d7a4dCwErAkzfXe4OKhUMdN3Gs0EeInTtiNYDQEs\nqjIcxB3g70McT2phbkJruTAOZVoyRa8Kz1yNqd8DYsKhFQKDQ0uMWzRGKXHw5JBq\nFp/Ob5CY9O2YxnCZ1mVmCL6EwglrbYmaIMnamvWLHTg3TdxNQu/pya9c7myH3pY=\n=n7Dy\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b873401a6c76260c30f34a4de583294aa9cdcc6\nparent 39182dbc733aa85f210f880fe364ea7d7ec47181\nparent abbb539f973ee4558f6ea7922794887962128987\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594246312 +0000\ncommitter GitHub <noreply@github.com> 1594246312 +0000\n\nMerge #5273\n\n5273: Refactor hover tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61c8481571f8d8e6e08df9024d8dad5efc883de", "html_url": "https://github.com/rust-lang/rust/commit/a61c8481571f8d8e6e08df9024d8dad5efc883de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61c8481571f8d8e6e08df9024d8dad5efc883de/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39182dbc733aa85f210f880fe364ea7d7ec47181", "url": "https://api.github.com/repos/rust-lang/rust/commits/39182dbc733aa85f210f880fe364ea7d7ec47181", "html_url": "https://github.com/rust-lang/rust/commit/39182dbc733aa85f210f880fe364ea7d7ec47181"}, {"sha": "abbb539f973ee4558f6ea7922794887962128987", "url": "https://api.github.com/repos/rust-lang/rust/commits/abbb539f973ee4558f6ea7922794887962128987", "html_url": "https://github.com/rust-lang/rust/commit/abbb539f973ee4558f6ea7922794887962128987"}], "stats": {"total": 3318, "additions": 1684, "deletions": 1634}, "files": [{"sha": "a18c430030865ebb0be0a72a330e16e0549cf3c6", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1620, "deletions": 1612, "changes": 3232, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de"}, {"sha": "6a4f5cb3db16bdf87d01ad87a13cd6f2ecedc763", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -17,6 +17,7 @@ macro_rules! eprintln {\n \n pub mod mock_analysis;\n \n+mod markup;\n mod prime_caches;\n mod status;\n mod completion;\n@@ -68,6 +69,7 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n     hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n+    markup::Markup,\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     syntax_highlighting::{"}, {"sha": "2f2b3cc25a3b2ebf894a759bdeb35f896c9d026a", "filename": "crates/ra_ide/src/markup.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Fmarkup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fra_ide%2Fsrc%2Fmarkup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmarkup.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -0,0 +1,38 @@\n+//! Markdown formatting.\n+//!\n+//! Sometimes, we want to display a \"rich text\" in the UI. At the moment, we use\n+//! markdown for this purpose. It doesn't feel like a right option, but that's\n+//! what is used by LSP, so let's keep it simple.\n+use std::fmt;\n+\n+#[derive(Default, Debug)]\n+pub struct Markup {\n+    text: String,\n+}\n+\n+impl From<Markup> for String {\n+    fn from(markup: Markup) -> Self {\n+        markup.text\n+    }\n+}\n+\n+impl fmt::Display for Markup {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.text, f)\n+    }\n+}\n+\n+impl Markup {\n+    pub fn as_str(&self) -> &str {\n+        self.text.as_str()\n+    }\n+    pub fn is_empty(&self) -> bool {\n+        self.text.is_empty()\n+    }\n+    pub fn push_section(&mut self, section: &str) {\n+        if !self.text.is_empty() {\n+            self.text.push_str(\"\\n\\n___\\n\");\n+        }\n+        self.text.push_str(section);\n+    }\n+}"}, {"sha": "8ce6e1c711a63614c5c08bd2cbe537ed4da13fc3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -12,10 +12,10 @@ use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams, DocumentHighlight,\n-    DocumentSymbol, FoldingRange, FoldingRangeParams, HoverContents, Location, MarkupContent,\n-    MarkupKind, Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensParams,\n-    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n-    TextDocumentIdentifier, Url, WorkspaceEdit,\n+    DocumentSymbol, FoldingRange, FoldingRangeParams, HoverContents, Location, Position,\n+    PrepareRenameResponse, Range, RenameParams, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n+    Url, WorkspaceEdit,\n };\n use ra_ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n@@ -584,13 +584,10 @@ pub(crate) fn handle_hover(\n     let range = to_proto::range(&line_index, info.range);\n     let hover = lsp_ext::Hover {\n         hover: lsp_types::Hover {\n-            contents: HoverContents::Markup(MarkupContent {\n-                kind: MarkupKind::Markdown,\n-                value: crate::markdown::format_docs(&info.info.to_markup()),\n-            }),\n+            contents: HoverContents::Markup(to_proto::markup_content(info.info.markup)),\n             range: Some(range),\n         },\n-        actions: prepare_hover_actions(&snap, position.file_id, info.info.actions()),\n+        actions: prepare_hover_actions(&snap, position.file_id, &info.info.actions),\n     };\n \n     Ok(Some(hover))"}, {"sha": "263f58a00e52cbdf8532e0e0dbf9f5f4d6dc0903", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -6,8 +6,8 @@ use ra_db::{FileId, FileRange};\n use ra_ide::{\n     Assist, AssistKind, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold,\n     FoldKind, FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n-    Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n-    ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n+    Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget,\n+    ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n \n@@ -696,6 +696,10 @@ pub(crate) fn runnable(\n     })\n }\n \n+pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n+    lsp_types::MarkupContent { kind: lsp_types::MarkupKind::Markdown, value: markup.into() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ra_ide::Analysis;"}, {"sha": "72f9285369995b0f5cca49cb4c2d30b5042ca340", "filename": "crates/vfs-notify/src/include.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fvfs-notify%2Fsrc%2Finclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/crates%2Fvfs-notify%2Fsrc%2Finclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Finclude.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -9,8 +9,8 @@ use paths::{RelPath, RelPathBuf};\n ///\n /// It describes the set of files inside some directory.\n ///\n-/// The current implementation is very limited, it allows white-listing file\n-/// globs and black-listing directories.\n+/// The current implementation is very limited, it allows including file globs\n+/// and recursively excluding directories.\n #[derive(Debug, Clone)]\n pub(crate) struct Include {\n     include_files: GlobSet,"}, {"sha": "fcfad609d740e758c2691bac984069bbd8497498", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a61c8481571f8d8e6e08df9024d8dad5efc883de/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c8481571f8d8e6e08df9024d8dad5efc883de/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=a61c8481571f8d8e6e08df9024d8dad5efc883de", "patch": "@@ -50,18 +50,19 @@ fn rust_files_are_tidy() {\n }\n \n fn check_todo(path: &Path, text: &str) {\n-    let whitelist = &[\n-        // This file itself is whitelisted since this test itself contains matches.\n+    let need_todo = &[\n+        // This file itself obviously needs to use todo (<- like this!).\n         \"tests/cli.rs\",\n-        // Some of our assists generate `todo!()` so those files are whitelisted.\n+        // Some of our assists generate `todo!()`.\n         \"tests/generated.rs\",\n         \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_turbo_fish.rs\",\n         \"handlers/generate_function.rs\",\n-        // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make.\n+        // To support generating `todo!()` in assists, we have `expr_todo()` in\n+        // `ast::make`.\n         \"ast/make.rs\",\n     ];\n-    if whitelist.iter().any(|p| path.ends_with(p)) {\n+    if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {\n@@ -139,7 +140,7 @@ impl TidyDocs {\n             )\n         }\n \n-        let whitelist = [\n+        let poorly_documented = [\n             \"ra_hir\",\n             \"ra_hir_expand\",\n             \"ra_ide\",\n@@ -153,9 +154,9 @@ impl TidyDocs {\n         ];\n \n         let mut has_fixmes =\n-            whitelist.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();\n+            poorly_documented.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();\n         'outer: for path in self.contains_fixme {\n-            for krate in whitelist.iter() {\n+            for krate in poorly_documented.iter() {\n                 if path.components().any(|it| it.as_os_str() == *krate) {\n                     has_fixmes.insert(krate, true);\n                     continue 'outer;\n@@ -166,7 +167,7 @@ impl TidyDocs {\n \n         for (krate, has_fixme) in has_fixmes.iter() {\n             if !has_fixme {\n-                panic!(\"crate {} is fully documented, remove it from the white list\", krate)\n+                panic!(\"crate {} is fully documented :tada:, remove it from the list of poorly documented crates\", krate)\n             }\n         }\n     }"}]}