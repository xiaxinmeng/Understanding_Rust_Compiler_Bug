{"sha": "967d815a426dd16354dd42c96ad4b3f2eb036f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2N2Q4MTVhNDI2ZGQxNjM1NGRkNDJjOTZhZDRiM2YyZWIwMzZmMDk=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-07T20:21:56Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-07T20:42:11Z"}, "message": "Extracting `is_expr_identity_function` into `clippy_utils` for reusability", "tree": {"sha": "c2ab685d1ce4788745425564af7583d6a5275c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ab685d1ce4788745425564af7583d6a5275c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967d815a426dd16354dd42c96ad4b3f2eb036f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967d815a426dd16354dd42c96ad4b3f2eb036f09", "html_url": "https://github.com/rust-lang/rust/commit/967d815a426dd16354dd42c96ad4b3f2eb036f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967d815a426dd16354dd42c96ad4b3f2eb036f09/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a1e8524cb3b03e24be800e5abbf5e5a25d268d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a1e8524cb3b03e24be800e5abbf5e5a25d268d", "html_url": "https://github.com/rust-lang/rust/commit/e4a1e8524cb3b03e24be800e5abbf5e5a25d268d"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "9bcb010ff6dff4c5bb68f31b5b321b8f8778ced7", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/967d815a426dd16354dd42c96ad4b3f2eb036f09/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967d815a426dd16354dd42c96ad4b3f2eb036f09/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=967d815a426dd16354dd42c96ad4b3f2eb036f09", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_adjusted, is_qpath_def_path, is_trait_method, match_var, paths, remove_blocks};\n+use clippy_utils::{is_expr_identity_function, is_trait_method};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -74,53 +74,3 @@ fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a\n         }\n     }\n }\n-\n-/// Checks if an expression represents the identity function\n-/// Only examines closures and `std::convert::identity`\n-fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n-        ExprKind::Path(ref path) => is_qpath_def_path(cx, path, expr.hir_id, &paths::CONVERT_IDENTITY),\n-        _ => false,\n-    }\n-}\n-\n-/// Checks if a function's body represents the identity function\n-/// Looks for bodies of the form `|x| x`, `|x| return x`, `|x| { return x }` or `|x| {\n-/// return x; }`\n-fn is_body_identity_function(cx: &LateContext<'_>, func: &Body<'_>) -> bool {\n-    let params = func.params;\n-    let body = remove_blocks(&func.value);\n-\n-    // if there's less/more than one parameter, then it is not the identity function\n-    if params.len() != 1 {\n-        return false;\n-    }\n-\n-    match body.kind {\n-        ExprKind::Path(QPath::Resolved(None, _)) => match_expr_param(cx, body, params[0].pat),\n-        ExprKind::Ret(Some(ret_val)) => match_expr_param(cx, ret_val, params[0].pat),\n-        ExprKind::Block(block, _) => {\n-            if_chain! {\n-                if block.stmts.len() == 1;\n-                if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = block.stmts[0].kind;\n-                if let ExprKind::Ret(Some(ret_val)) = expr.kind;\n-                then {\n-                    match_expr_param(cx, ret_val, params[0].pat)\n-                } else {\n-                    false\n-                }\n-            }\n-        },\n-        _ => false,\n-    }\n-}\n-\n-/// Returns true iff an expression returns the same thing as a parameter's pattern\n-fn match_expr_param(cx: &LateContext<'_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n-    if let PatKind::Binding(_, _, ident, _) = pat.kind {\n-        match_var(expr, ident.name) && !(cx.typeck_results().hir_owner == expr.hir_id.owner && is_adjusted(cx, expr))\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "a765abe6b766d62e9dd133ec1da8780c2f125588", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/967d815a426dd16354dd42c96ad4b3f2eb036f09/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967d815a426dd16354dd42c96ad4b3f2eb036f09/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=967d815a426dd16354dd42c96ad4b3f2eb036f09", "patch": "@@ -1399,6 +1399,60 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     did.map_or(false, |did| must_use_attr(cx.tcx.get_attrs(did)).is_some())\n }\n \n+/// Checks if an expression represents the identity function\n+/// Only examines closures and `std::convert::identity`\n+pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    /// Returns true if the expression is a binding to the given pattern\n+    fn is_expr_pat_binding(cx: &LateContext<'_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n+        if let PatKind::Binding(_, _, ident, _) = pat.kind {\n+            if match_var(expr, ident.name) {\n+                return !(cx.typeck_results().hir_owner == expr.hir_id.owner && is_adjusted(cx, expr));\n+            }\n+        }\n+\n+        false\n+    }\n+\n+    /// Checks if a function's body represents the identity function. Looks for bodies of the form:\n+    /// * `|x| x`\n+    /// * `|x| return x`\n+    /// * `|x| { return x }`\n+    /// * `|x| { return x; }`\n+    fn is_body_identity_function(cx: &LateContext<'_>, func: &Body<'_>) -> bool {\n+        let body = remove_blocks(&func.value);\n+\n+        let value_pat = if let [value_param] = func.params {\n+            value_param.pat\n+        } else {\n+            return false;\n+        };\n+\n+        match body.kind {\n+            ExprKind::Path(QPath::Resolved(None, _)) => is_expr_pat_binding(cx, body, value_pat),\n+            ExprKind::Ret(Some(ret_val)) => is_expr_pat_binding(cx, ret_val, value_pat),\n+            ExprKind::Block(block, _) => {\n+                if_chain! {\n+                    if let &[block_stmt] = &block.stmts;\n+                    if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = block_stmt.kind;\n+                    if let ExprKind::Ret(Some(ret_val)) = expr.kind;\n+                    then {\n+                        is_expr_pat_binding(cx, ret_val, value_pat)\n+                    } else {\n+                        false\n+                    }\n+                }\n+            },\n+            _ => false,\n+        }\n+    }\n+\n+    match expr.kind {\n+        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Path(ref path) => is_qpath_def_path(cx, path, expr.hir_id, &paths::CONVERT_IDENTITY),\n+        _ => false,\n+    }\n+}\n+\n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n     let map = tcx.hir();"}]}