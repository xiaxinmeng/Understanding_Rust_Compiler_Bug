{"sha": "c6374cfbe2de22e46b4e7687fa733549114bf070", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Mzc0Y2ZiZTJkZTIyZTQ2YjRlNzY4N2ZhNzMzNTQ5MTE0YmYwNzA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-12T06:41:00Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-01T11:34:34Z"}, "message": "rustc: use a separate copy of P for HIR than for AST.", "tree": {"sha": "3ad735e3433945a41af49922e6c76c3a3b51602d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad735e3433945a41af49922e6c76c3a3b51602d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6374cfbe2de22e46b4e7687fa733549114bf070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6374cfbe2de22e46b4e7687fa733549114bf070", "html_url": "https://github.com/rust-lang/rust/commit/c6374cfbe2de22e46b4e7687fa733549114bf070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6374cfbe2de22e46b4e7687fa733549114bf070/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a920648a3b616469422ea0a9689297f108e8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a920648a3b616469422ea0a9689297f108e8e3", "html_url": "https://github.com/rust-lang/rust/commit/25a920648a3b616469422ea0a9689297f108e8e3"}], "stats": {"total": 204, "additions": 176, "deletions": 28}, "files": [{"sha": "403e2f02f05454e0d75864e161f7e06ec3ca71a0", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -1,11 +1,11 @@\n use crate::cfg::*;\n use crate::middle::region;\n use rustc_data_structures::graph::implementation as graph;\n-use syntax::ptr::P;\n use crate::ty::{self, TyCtxt};\n \n use crate::hir::{self, PatKind};\n use crate::hir::def_id::DefId;\n+use crate::hir::ptr::P;\n \n struct CFGBuilder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "49a832948f17ceaed361e068cee387e45fbd3c47", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -39,6 +39,7 @@ use crate::hir::map::{DefKey, DefPathData, Definitions};\n use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::def::{Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n+use crate::hir::ptr::P;\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n@@ -61,7 +62,6 @@ use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n-use syntax::ptr::P;\n use syntax::source_map::{self, respan, ExpnInfo, CompilerDesugaringKind, Spanned};\n use syntax::source_map::CompilerDesugaringKind::IfTemporary;\n use syntax::std_inject;\n@@ -1111,7 +1111,7 @@ impl<'a> LoweringContext<'a> {\n             },\n         );\n \n-        lowered_generics.params = lowered_generics\n+        let mut lowered_params: Vec<_> = lowered_generics\n             .params\n             .into_iter()\n             .chain(in_band_defs)\n@@ -1121,14 +1121,16 @@ impl<'a> LoweringContext<'a> {\n         // unsorted generic parameters at the moment, so we make sure\n         // that they're ordered correctly here for now. (When we chain\n         // the `in_band_defs`, we might make the order unsorted.)\n-        lowered_generics.params.sort_by_key(|param| {\n+        lowered_params.sort_by_key(|param| {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n                 hir::GenericParamKind::Type { .. } => ParamKindOrd::Type,\n                 hir::GenericParamKind::Const { .. } => ParamKindOrd::Const,\n             }\n         });\n \n+        lowered_generics.params = lowered_params.into();\n+\n         (lowered_generics, res)\n     }\n \n@@ -1155,13 +1157,13 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         capture_clause: CaptureBy,\n         closure_node_id: NodeId,\n-        ret_ty: Option<&Ty>,\n+        ret_ty: Option<syntax::ptr::P<Ty>>,\n         span: Span,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let capture_clause = self.lower_capture_clause(capture_clause);\n         let output = match ret_ty {\n-            Some(ty) => FunctionRetTy::Ty(P(ty.clone())),\n+            Some(ty) => FunctionRetTy::Ty(ty),\n             None => FunctionRetTy::Default(span),\n         };\n         let ast_decl = FnDecl {\n@@ -3620,7 +3622,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::Item {\n                                 hir_id: new_id,\n                                 ident,\n-                                attrs: attrs.clone(),\n+                                attrs: attrs.into_iter().cloned().collect(),\n                                 node: item,\n                                 vis,\n                                 span,\n@@ -3705,7 +3707,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::Item {\n                                 hir_id: new_hir_id,\n                                 ident,\n-                                attrs: attrs.clone(),\n+                                attrs: attrs.into_iter().cloned().collect(),\n                                 node: item,\n                                 vis,\n                                 span: use_tree.span,\n@@ -4567,7 +4569,7 @@ impl<'a> LoweringContext<'a> {\n                         // `|x: u8| future_from_generator(|| -> X { ... })`.\n                         let body_id = this.lower_fn_body(&outer_decl, |this| {\n                             let async_ret_ty = if let FunctionRetTy::Ty(ty) = &decl.output {\n-                                Some(&**ty)\n+                                Some(ty.clone())\n                             } else { None };\n                             let async_body = this.make_async_expr(\n                                 capture_clause, closure_id, async_ret_ty, body.span,"}, {"sha": "bfbd8398f99f33334470bd01fcbf1a0b99d3b77b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -12,6 +12,7 @@ pub use self::UnsafeSource::*;\n \n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use crate::hir::ptr::P;\n use crate::util::nodemap::{NodeMap, FxHashSet};\n use crate::mir::mono::Linkage;\n \n@@ -23,7 +24,6 @@ use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::ext::hygiene::SyntaxContext;\n-use syntax::ptr::P;\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n@@ -63,6 +63,7 @@ pub mod lowering;\n pub mod map;\n pub mod pat_util;\n pub mod print;\n+pub mod ptr;\n pub mod upvars;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -1979,13 +1980,15 @@ pub struct InlineAsmOutput {\n     pub span: Span,\n }\n \n+// NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n+// it needs to be `Clone` and use plain `Vec<T>` instead of `HirVec<T>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct InlineAsm {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n-    pub outputs: HirVec<InlineAsmOutput>,\n-    pub inputs: HirVec<Symbol>,\n-    pub clobbers: HirVec<Symbol>,\n+    pub outputs: Vec<InlineAsmOutput>,\n+    pub inputs: Vec<Symbol>,\n+    pub clobbers: Vec<Symbol>,\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,"}, {"sha": "3b33de1a1792636ac26e71dfb4be0cbed5909230", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -6,14 +6,14 @@ use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n use syntax::print::pprust::{self, PrintState};\n-use syntax::ptr::P;\n use syntax::symbol::kw;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use crate::hir;\n use crate::hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n use crate::hir::{GenericParam, GenericParamKind, GenericArg};\n+use crate::hir::ptr::P;\n \n use std::borrow::Cow;\n use std::cell::Cell;"}, {"sha": "3a87b36a1b43430486a7d2412f7a0f1d537d71c3", "filename": "src/librustc/hir/ptr.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fhir%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fptr.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -0,0 +1,141 @@\n+// HACK(eddyb) this is a copy of `syntax::ptr`, minus the mutation (the HIR is\n+// frozen anyway). The only reason for doing this instead of replacing `P<T>`\n+// with `Box<T>` in HIR, is that `&Box<[T]>` doesn't implement `IntoIterator`.\n+\n+use std::fmt::{self, Display, Debug};\n+use std::iter::FromIterator;\n+use std::ops::Deref;\n+use std::{slice, vec};\n+\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n+use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n+                                           HashStable};\n+/// An owned smart pointer.\n+#[derive(Hash, PartialEq, Eq)]\n+pub struct P<T: ?Sized> {\n+    ptr: Box<T>\n+}\n+\n+/// Construct a `P<T>` from a `T` value.\n+#[allow(non_snake_case)]\n+pub fn P<T: 'static>(value: T) -> P<T> {\n+    P {\n+        ptr: box value\n+    }\n+}\n+\n+impl<T: 'static> P<T> {\n+    // HACK(eddyb) used by HIR lowering in a few places still.\n+    // NOTE: do not make this more public than `pub(super)`.\n+    pub(super) fn into_inner(self) -> T {\n+        *self.ptr\n+    }\n+}\n+\n+impl<T: ?Sized> Deref for P<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.ptr\n+    }\n+}\n+\n+impl<T: ?Sized + Debug> Debug for P<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Debug::fmt(&self.ptr, f)\n+    }\n+}\n+\n+impl<T: Display> Display for P<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Display::fmt(&**self, f)\n+    }\n+}\n+\n+impl<T: 'static + Decodable> Decodable for P<T> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<P<T>, D::Error> {\n+        Decodable::decode(d).map(P)\n+    }\n+}\n+\n+impl<T: Encodable> Encodable for P<T> {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        (**self).encode(s)\n+    }\n+}\n+\n+impl<T> P<[T]> {\n+    pub const fn new() -> P<[T]> {\n+        // HACK(eddyb) bypass the lack of a `const fn` to create an empty `Box<[T]>`\n+        // (as trait methods, `default` in this case, can't be `const fn` yet).\n+        P {\n+            ptr: unsafe {\n+                use std::ptr::NonNull;\n+                std::mem::transmute(NonNull::<[T; 0]>::dangling() as NonNull<[T]>)\n+            },\n+        }\n+    }\n+\n+    #[inline(never)]\n+    pub fn from_vec(v: Vec<T>) -> P<[T]> {\n+        P { ptr: v.into_boxed_slice() }\n+    }\n+\n+    // HACK(eddyb) used by HIR lowering in a few places still.\n+    // NOTE: do not make this more public than `pub(super)`,\n+    // and do not make this into an `IntoIterator` impl.\n+    pub(super) fn into_iter(self) -> vec::IntoIter<T> {\n+        self.ptr.into_vec().into_iter()\n+    }\n+}\n+\n+\n+impl<T> Default for P<[T]> {\n+    /// Creates an empty `P<[T]>`.\n+    fn default() -> P<[T]> {\n+        P::new()\n+    }\n+}\n+\n+impl<T> From<Vec<T>> for P<[T]> {\n+    fn from(v: Vec<T>) -> Self {\n+        P::from_vec(v)\n+    }\n+}\n+\n+impl<T> FromIterator<T> for P<[T]> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> P<[T]> {\n+        P::from_vec(iter.into_iter().collect())\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a P<[T]> {\n+    type Item = &'a T;\n+    type IntoIter = slice::Iter<'a, T>;\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.ptr.into_iter()\n+    }\n+}\n+\n+impl<T: Encodable> Encodable for P<[T]> {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&**self, s)\n+    }\n+}\n+\n+impl<T: Decodable> Decodable for P<[T]> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<P<[T]>, D::Error> {\n+        Ok(P::from_vec(Decodable::decode(d)?))\n+    }\n+}\n+\n+impl<CTX, T> HashStable<CTX> for P<T>\n+    where T: ?Sized + HashStable<CTX>\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        (**self).hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "21c1a8d28d4c54db8271d18a70f024f6aa77001c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -35,6 +35,8 @@\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_fn)]\n+#![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(inner_deref)]"}, {"sha": "c93cc847adff22fac64491be68705c8c1b4252b4", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -11,14 +11,14 @@ use self::OverloadedCallType::*;\n \n use crate::hir::def::{CtorOf, Res, DefKind};\n use crate::hir::def_id::DefId;\n+use crate::hir::ptr::P;\n use crate::infer::InferCtxt;\n use crate::middle::mem_categorization as mc;\n use crate::middle::region;\n use crate::ty::{self, DefIdTree, TyCtxt, adjustment};\n \n use crate::hir::{self, PatKind};\n use std::rc::Rc;\n-use syntax::ptr::P;\n use syntax_pos::Span;\n use crate::util::nodemap::ItemLocalSet;\n "}, {"sha": "464bc4fd6dfd78a90f2f65d5187ae24aa27e2feb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -99,6 +99,7 @@ use self::VarKind::*;\n \n use crate::hir::def::*;\n use crate::hir::Node;\n+use crate::hir::ptr::P;\n use crate::ty::{self, TyCtxt};\n use crate::ty::query::Providers;\n use crate::lint;\n@@ -111,7 +112,6 @@ use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n "}, {"sha": "c94893d8b7575c1e4c4c9349204820d279b303a3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -8,6 +8,7 @@\n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n+use crate::hir::ptr::P;\n use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n@@ -21,7 +22,6 @@ use std::cell::Cell;\n use std::mem::replace;\n use syntax::ast;\n use syntax::attr;\n-use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n "}, {"sha": "c365cc2ad854416640bfbe8829e871ddbe914c60", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -1,7 +1,7 @@\n use crate::hair::*;\n \n use rustc::hir;\n-use syntax::ptr::P;\n+use rustc::hir::ptr::P;\n \n pub trait ToRef {\n     type Output;"}, {"sha": "f8baf457e9d2caa0e2c6c3dfa93dfca181e15d0b", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -18,12 +18,12 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir::ptr::P;\n use rustc::hir::{self, Pat, PatKind};\n \n use smallvec::smallvec;\n use std::slice;\n \n-use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {"}, {"sha": "6ba2f587768497bf9b89e29e32569ee47227dbcb", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -20,13 +20,13 @@ use rustc::ty::layout::{VariantIdx, Size};\n use rustc::hir::{self, PatKind, RangeEnd};\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n+use rustc::hir::ptr::P;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n use std::cmp::Ordering;\n use std::fmt;\n use syntax::ast;\n-use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n "}, {"sha": "1792716d1fb35e6859aa5d8b792ba423e1f6fce2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -7,6 +7,7 @@ use crate::hir::{self, GenericArg, GenericArgs, ExprKind};\n use crate::hir::def::{CtorOf, Res, DefKind};\n use crate::hir::def_id::DefId;\n use crate::hir::HirVec;\n+use crate::hir::ptr::P;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n@@ -23,7 +24,6 @@ use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};"}, {"sha": "841e73adb0b683ff6494c54eccf8b3a8ec10ebb4", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -5,14 +5,14 @@ use errors::{Applicability, DiagnosticBuilder};\n use rustc::hir::{self, PatKind, Pat, ExprKind};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n+use rustc::hir::ptr::P;\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Kind;\n use syntax::ast;\n use syntax::source_map::Spanned;\n-use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n use syntax_pos::hygiene::CompilerDesugaringKind;"}, {"sha": "94c76deade279c0b248e30d882088b8f3392b740", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -54,6 +54,7 @@ use crate::check::{FnCtxt, Needs};\n use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::ptr::P;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -67,7 +68,6 @@ use rustc::ty::relate::RelateResult;\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n use syntax::feature_gate;\n-use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos;\n "}, {"sha": "ccc20bd9585c9095dfcba4c9c942ddb585741b5b", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -20,13 +20,13 @@ use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n-use syntax::ptr::P;\n use syntax::symbol::{Symbol, LocalInternedString, kw, sym};\n use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n use rustc::hir::{ExprKind, QPath};\n use rustc::hir::def::{CtorKind, Res, DefKind};\n+use rustc::hir::ptr::P;\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::mir::interpret::GlobalId;"}, {"sha": "04364874c10373a5141a6cd59b28b61934d3ff54", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -93,6 +93,7 @@ use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::ptr::P;\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, InferResult};\n@@ -122,7 +123,6 @@ use syntax_pos::hygiene::CompilerDesugaringKind;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use syntax::ptr::P;\n use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym};\n "}, {"sha": "7353c3ec2e557f9026cf0d16d24bbf235ffd61d5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::interpret::{GlobalId, ConstValue};\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::ptr::P;\n use rustc::ty::subst::{InternalSubsts, SubstsRef, UnpackedKind};\n use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n@@ -29,7 +30,6 @@ use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::{dummy_spanned, Spanned};\n-use syntax::ptr::P;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::symbol::InternedString;\n use syntax_pos::{self, Pos, FileName};"}, {"sha": "45a3c8a3c2256ae20eb1e17ced42d1997a612527", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -6,11 +6,11 @@ use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n use syntax::ext::base::MacroKind;\n-use syntax::ptr::P;\n use syntax_pos::{self, Span};\n \n use rustc::hir;\n use rustc::hir::def_id::CrateNum;\n+use rustc::hir::ptr::P;\n \n pub struct Module<'hir> {\n     pub name: Option<Name>,"}, {"sha": "be580dc2e6a7e4aaff0ae4ef00ef235ee9842020", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6374cfbe2de22e46b4e7687fa733549114bf070/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=c6374cfbe2de22e46b4e7687fa733549114bf070", "patch": "@@ -41,8 +41,8 @@ pub struct P<T: ?Sized> {\n     ptr: Box<T>\n }\n \n-#[allow(non_snake_case)]\n /// Construct a `P<T>` from a `T` value.\n+#[allow(non_snake_case)]\n pub fn P<T: 'static>(value: T) -> P<T> {\n     P {\n         ptr: box value"}]}