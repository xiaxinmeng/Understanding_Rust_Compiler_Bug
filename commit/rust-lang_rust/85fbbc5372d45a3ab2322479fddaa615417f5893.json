{"sha": "85fbbc5372d45a3ab2322479fddaa615417f5893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmJiYzUzNzJkNDVhM2FiMjMyMjQ3OWZkZGFhNjE1NDE3ZjU4OTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-22T14:41:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-22T14:54:50Z"}, "message": "internal: incentivize rust-analyzed developers to fix panics\n\nIt's good that rust-analyzer doesn't belly-up on a panic in some random\nassist.\n\nIt is less good that rust-analyzer devs only know that the assists are\nbuggy when they are actively looking at the logs.", "tree": {"sha": "8d55e9bc567eef897c01d237bb739e8c6f1827bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d55e9bc567eef897c01d237bb739e8c6f1827bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fbbc5372d45a3ab2322479fddaa615417f5893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbbc5372d45a3ab2322479fddaa615417f5893", "html_url": "https://github.com/rust-lang/rust/commit/85fbbc5372d45a3ab2322479fddaa615417f5893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fbbc5372d45a3ab2322479fddaa615417f5893/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6baf3dcf8004953dcfbbef814fea3a3deed4cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6baf3dcf8004953dcfbbef814fea3a3deed4cf1", "html_url": "https://github.com/rust-lang/rust/commit/c6baf3dcf8004953dcfbbef814fea3a3deed4cf1"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "031c76c77239b9e9f48dbfc06aa9a6c4d25a4f3c", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=85fbbc5372d45a3ab2322479fddaa615417f5893", "patch": "@@ -1,5 +1,5 @@\n //! A visitor for downcasting arbitrary request (JSON) into a specific type.\n-use std::{fmt, panic};\n+use std::{fmt, panic, thread};\n \n use serde::{de::DeserializeOwned, Serialize};\n \n@@ -32,7 +32,7 @@ impl<'a> RequestDispatcher<'a> {\n         };\n         let global_state = panic::AssertUnwindSafe(&mut *self.global_state);\n \n-        let response = panic::catch_unwind(move || {\n+        let result = panic::catch_unwind(move || {\n             let _ = &global_state;\n             let panic::AssertUnwindSafe(global_state) = global_state;\n             let _pctx = stdx::panic_context::enter(format!(\n@@ -41,10 +41,10 @@ impl<'a> RequestDispatcher<'a> {\n                 R::METHOD,\n                 params\n             ));\n-            let result = f(global_state, params);\n-            result_to_response::<R>(id, result)\n-        })\n-        .map_err(|_err| format!(\"sync task {:?} panicked\", R::METHOD))?;\n+            f(global_state, params)\n+        });\n+        let response = result_to_response::<R>(id, result);\n+\n         self.global_state.respond(response);\n         Ok(self)\n     }\n@@ -56,7 +56,7 @@ impl<'a> RequestDispatcher<'a> {\n     ) -> &mut Self\n     where\n         R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + Send + fmt::Debug + 'static,\n+        R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug + 'static,\n         R::Result: Serialize + 'static,\n     {\n         let (id, params) = match self.parse::<R>() {\n@@ -66,16 +66,18 @@ impl<'a> RequestDispatcher<'a> {\n \n         self.global_state.task_pool.handle.spawn({\n             let world = self.global_state.snapshot();\n-\n             move || {\n-                let _pctx = stdx::panic_context::enter(format!(\n-                    \"\\nversion: {}\\nrequest: {} {:#?}\",\n-                    env!(\"REV\"),\n-                    R::METHOD,\n-                    params\n-                ));\n-                let result = f(world, params);\n-                Task::Response(result_to_response::<R>(id, result))\n+                let result = panic::catch_unwind(move || {\n+                    let _pctx = stdx::panic_context::enter(format!(\n+                        \"\\nversion: {}\\nrequest: {} {:#?}\",\n+                        env!(\"REV\"),\n+                        R::METHOD,\n+                        params\n+                    ));\n+                    f(world, params)\n+                });\n+                let response = result_to_response::<R>(id, result);\n+                Task::Response(response)\n             }\n         });\n \n@@ -122,16 +124,16 @@ impl<'a> RequestDispatcher<'a> {\n \n fn result_to_response<R>(\n     id: lsp_server::RequestId,\n-    result: Result<R::Result>,\n+    result: thread::Result<Result<R::Result>>,\n ) -> lsp_server::Response\n where\n     R: lsp_types::request::Request + 'static,\n     R::Params: DeserializeOwned + 'static,\n     R::Result: Serialize + 'static,\n {\n     match result {\n-        Ok(resp) => lsp_server::Response::new_ok(id, &resp),\n-        Err(e) => match e.downcast::<LspError>() {\n+        Ok(Ok(resp)) => lsp_server::Response::new_ok(id, &resp),\n+        Ok(Err(e)) => match e.downcast::<LspError>() {\n             Ok(lsp_error) => lsp_server::Response::new_err(id, lsp_error.code, lsp_error.message),\n             Err(e) => {\n                 if is_cancelled(&*e) {\n@@ -149,6 +151,21 @@ where\n                 }\n             }\n         },\n+        Err(panic) => {\n+            let mut message = \"server panicked\".to_string();\n+\n+            let panic_message = panic\n+                .downcast_ref::<String>()\n+                .map(String::as_str)\n+                .or_else(|| panic.downcast_ref::<&str>().copied());\n+\n+            if let Some(panic_message) = panic_message {\n+                message.push_str(\": \");\n+                message.push_str(panic_message)\n+            };\n+\n+            lsp_server::Response::new_err(id, lsp_server::ErrorCode::InternalError as i32, message)\n+        }\n     }\n }\n "}, {"sha": "c2b71327da4712ce7a4e17eb9fa8acfbf2d97a0a", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=85fbbc5372d45a3ab2322479fddaa615417f5893", "patch": "@@ -116,6 +116,8 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n+impl std::panic::UnwindSafe for GlobalStateSnapshot {}\n+\n impl GlobalState {\n     pub(crate) fn new(sender: Sender<lsp_server::Message>, config: Config) -> GlobalState {\n         let loader = {\n@@ -262,6 +264,12 @@ impl GlobalState {\n     }\n     pub(crate) fn respond(&mut self, response: lsp_server::Response) {\n         if let Some((method, start)) = self.req_queue.incoming.complete(response.id.clone()) {\n+            if let Some(err) = &response.error {\n+                if err.message.starts_with(\"server panicked\") {\n+                    self.poke_rust_analyzer_developer(format!(\"{}, check the log\", err.message))\n+                }\n+            }\n+\n             let duration = start.elapsed();\n             log::info!(\"handled {} - ({}) in {:0.2?}\", method, response.id, duration);\n             self.send(response.into());"}, {"sha": "29fa3e2d0eff5bc9175d51830fdb8ae6de15ae3f", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=85fbbc5372d45a3ab2322479fddaa615417f5893", "patch": "@@ -42,6 +42,25 @@ impl GlobalState {\n         )\n     }\n \n+    /// rust-analyzer is resilient -- if it fails, this doesn't usually affect\n+    /// the user experience. Part of that is that we deliberately hide panics\n+    /// from the user.\n+    ///\n+    /// We do however want to pester rust-analyzer developers with panics and\n+    /// other \"you really gotta fix that\" messages. The current strategy is to\n+    /// be noisy for \"from source\" builds or when profiling is enabled.\n+    ///\n+    /// It's unclear if making from source `cargo xtask install` builds more\n+    /// panicky is a good idea, let's see if we can keep our awesome bleeding\n+    /// edge users from being upset!\n+    pub(crate) fn poke_rust_analyzer_developer(&mut self, message: String) {\n+        let from_source_build = env!(\"REV\").contains(\"dev\");\n+        let profiling_enabled = std::env::var(\"RA_PROFILE\").is_ok();\n+        if from_source_build || profiling_enabled {\n+            self.show_message(lsp_types::MessageType::Error, message)\n+        }\n+    }\n+\n     pub(crate) fn report_progress(\n         &mut self,\n         title: &str,"}, {"sha": "c2aba3ad70d68406b8a899d7baab309132071a62", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbbc5372d45a3ab2322479fddaa615417f5893/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=85fbbc5372d45a3ab2322479fddaa615417f5893", "patch": "@@ -1,7 +1,7 @@\n //! The main loop of `rust-analyzer` responsible for dispatching LSP\n //! requests/replies and notifications back to the client.\n use std::{\n-    env, fmt,\n+    fmt,\n     sync::Arc,\n     time::{Duration, Instant},\n };\n@@ -487,12 +487,10 @@ impl GlobalState {\n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) {\n             log::warn!(\"overly long loop turn: {:?}\", loop_duration);\n-            if env::var(\"RA_PROFILE\").is_ok() {\n-                self.show_message(\n-                    lsp_types::MessageType::Error,\n-                    format!(\"overly long loop turn: {:?}\", loop_duration),\n-                )\n-            }\n+            self.poke_rust_analyzer_developer(format!(\n+                \"overly long loop turn: {:?}\",\n+                loop_duration\n+            ));\n         }\n         Ok(())\n     }"}]}