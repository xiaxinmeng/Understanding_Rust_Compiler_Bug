{"sha": "32fa51a6a97885491ae0e9bf115291760afc7e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZmE1MWE2YTk3ODg1NDkxYWUwZTliZjExNTI5MTc2MGFmYzdlMTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-09-17T06:32:00Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-19T01:04:35Z"}, "message": "Move Spanned to spanned.rs from lib.rs", "tree": {"sha": "30baa9f039d084ac65961da86fbb6336877081ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30baa9f039d084ac65961da86fbb6336877081ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32fa51a6a97885491ae0e9bf115291760afc7e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32fa51a6a97885491ae0e9bf115291760afc7e16", "html_url": "https://github.com/rust-lang/rust/commit/32fa51a6a97885491ae0e9bf115291760afc7e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32fa51a6a97885491ae0e9bf115291760afc7e16/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7d2be5629b7162426f8a3c6dbf005f228008fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7d2be5629b7162426f8a3c6dbf005f228008fe", "html_url": "https://github.com/rust-lang/rust/commit/df7d2be5629b7162426f8a3c6dbf005f228008fe"}], "stats": {"total": 361, "additions": 188, "deletions": 173}, "files": [{"sha": "699e8091d81f50dd5faae266c70946447d9f7b1d", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -17,7 +17,7 @@ use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, CodeMap, Span};\n use syntax::parse::classify;\n \n-use Spanned;\n+use spanned::Spanned;\n use chains::rewrite_chain;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,"}, {"sha": "4331ea84bc539405597947fbfc7df9e53e648022", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -13,7 +13,7 @@ use std::cmp::Ordering;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;"}, {"sha": "7f2bbe906da1c79ed6dd259c441c867f0f5e1225", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -16,7 +16,7 @@ use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::ImplItem;\n use syntax::codemap::{BytePos, Span};\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};"}, {"sha": "c78aa050984d058fd59c714a2a6cf97dd166b961", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 166, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -34,24 +34,24 @@ use std::rc::Rc;\n \n use errors::{DiagnosticBuilder, Handler};\n use errors::emitter::{ColorConfig, EmitterWriter};\n-use macros::MacroArg;\n use strings::string_buffer::StringBuffer;\n use syntax::ast;\n-use syntax::codemap::{CodeMap, FilePathMapping, Span};\n+use syntax::codemap::{CodeMap, FilePathMapping};\n use syntax::parse::{self, ParseSess};\n \n use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::{isatty, mk_sp, outer_attributes};\n+use utils::isatty;\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n \n #[macro_use]\n mod utils;\n mod shape;\n+mod spanned;\n pub mod config;\n pub mod codemap;\n pub mod filemap;\n@@ -76,169 +76,6 @@ mod patterns;\n mod summary;\n mod vertical;\n \n-/// Spanned returns a span including attributes, if available.\n-pub trait Spanned {\n-    fn span(&self) -> Span;\n-}\n-\n-macro_rules! span_with_attrs_lo_hi {\n-    ($this:ident, $lo:expr, $hi:expr) => {\n-        {\n-            let attrs = outer_attributes(&$this.attrs);\n-            if attrs.is_empty() {\n-                mk_sp($lo, $hi)\n-            } else {\n-                mk_sp(attrs[0].span.lo(), $hi)\n-            }\n-        }\n-    }\n-}\n-\n-macro_rules! span_with_attrs {\n-    ($this:ident) => {\n-        span_with_attrs_lo_hi!($this, $this.span.lo(), $this.span.hi())\n-    }\n-}\n-\n-macro_rules! implement_spanned {\n-    ($this:ty) => {\n-        impl Spanned for $this {\n-            fn span(&self) -> Span {\n-                span_with_attrs!(self)\n-            }\n-        }\n-    }\n-}\n-\n-// Implement `Spanned` for structs with `attrs` field.\n-implement_spanned!(ast::Expr);\n-implement_spanned!(ast::Field);\n-implement_spanned!(ast::ForeignItem);\n-implement_spanned!(ast::Item);\n-implement_spanned!(ast::Local);\n-\n-impl Spanned for ast::Stmt {\n-    fn span(&self) -> Span {\n-        match self.node {\n-            ast::StmtKind::Local(ref local) => mk_sp(local.span().lo(), self.span.hi()),\n-            ast::StmtKind::Item(ref item) => mk_sp(item.span().lo(), self.span.hi()),\n-            ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n-                mk_sp(expr.span().lo(), self.span.hi())\n-            }\n-            ast::StmtKind::Mac(ref mac) => {\n-                let (_, _, ref attrs) = **mac;\n-                if attrs.is_empty() {\n-                    self.span\n-                } else {\n-                    mk_sp(attrs[0].span.lo(), self.span.hi())\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl Spanned for ast::Pat {\n-    fn span(&self) -> Span {\n-        self.span\n-    }\n-}\n-\n-impl Spanned for ast::Ty {\n-    fn span(&self) -> Span {\n-        self.span\n-    }\n-}\n-\n-impl Spanned for ast::Arm {\n-    fn span(&self) -> Span {\n-        span_with_attrs_lo_hi!(self, self.pats[0].span.lo(), self.body.span.hi())\n-    }\n-}\n-\n-impl Spanned for ast::Arg {\n-    fn span(&self) -> Span {\n-        if items::is_named_arg(self) {\n-            utils::mk_sp(self.pat.span.lo(), self.ty.span.hi())\n-        } else {\n-            self.ty.span\n-        }\n-    }\n-}\n-\n-impl Spanned for ast::StructField {\n-    fn span(&self) -> Span {\n-        span_with_attrs_lo_hi!(self, self.span.lo(), self.ty.span.hi())\n-    }\n-}\n-\n-impl Spanned for ast::WherePredicate {\n-    fn span(&self) -> Span {\n-        match *self {\n-            ast::WherePredicate::BoundPredicate(ref p) => p.span,\n-            ast::WherePredicate::RegionPredicate(ref p) => p.span,\n-            ast::WherePredicate::EqPredicate(ref p) => p.span,\n-        }\n-    }\n-}\n-\n-impl Spanned for ast::FunctionRetTy {\n-    fn span(&self) -> Span {\n-        match *self {\n-            ast::FunctionRetTy::Default(span) => span,\n-            ast::FunctionRetTy::Ty(ref ty) => ty.span,\n-        }\n-    }\n-}\n-\n-impl Spanned for ast::TyParam {\n-    fn span(&self) -> Span {\n-        // Note that ty.span is the span for ty.ident, not the whole item.\n-        let lo = if self.attrs.is_empty() {\n-            self.span.lo()\n-        } else {\n-            self.attrs[0].span.lo()\n-        };\n-        if let Some(ref def) = self.default {\n-            return mk_sp(lo, def.span.hi());\n-        }\n-        if self.bounds.is_empty() {\n-            return mk_sp(lo, self.span.hi());\n-        }\n-        let hi = self.bounds[self.bounds.len() - 1].span().hi();\n-        mk_sp(lo, hi)\n-    }\n-}\n-\n-impl Spanned for ast::TyParamBound {\n-    fn span(&self) -> Span {\n-        match *self {\n-            ast::TyParamBound::TraitTyParamBound(ref ptr, _) => ptr.span,\n-            ast::TyParamBound::RegionTyParamBound(ref l) => l.span,\n-        }\n-    }\n-}\n-\n-impl Spanned for ast::LifetimeDef {\n-    fn span(&self) -> Span {\n-        let hi = if self.bounds.is_empty() {\n-            self.lifetime.span.hi()\n-        } else {\n-            self.bounds[self.bounds.len() - 1].span.hi()\n-        };\n-        mk_sp(self.lifetime.span.lo(), hi)\n-    }\n-}\n-\n-impl Spanned for MacroArg {\n-    fn span(&self) -> Span {\n-        match *self {\n-            MacroArg::Expr(ref expr) => expr.span(),\n-            MacroArg::Ty(ref ty) => ty.span(),\n-            MacroArg::Pat(ref pat) => pat.span(),\n-        }\n-    }\n-}\n-\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     LineOverflow(usize, usize),"}, {"sha": "d1b080f4a389e49caa8751a2aaffbfc572f20710", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -12,7 +12,7 @@ use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,"}, {"sha": "6978f2812e6ba662ad85088ba2b0b8eb8bcca3f9", "filename": "src/spanned.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -0,0 +1,178 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+\n+use macros::MacroArg;\n+use utils::{mk_sp, outer_attributes};\n+\n+/// Spanned returns a span including attributes, if available.\n+pub trait Spanned {\n+    fn span(&self) -> Span;\n+}\n+\n+macro_rules! span_with_attrs_lo_hi {\n+    ($this:ident, $lo:expr, $hi:expr) => {\n+        {\n+            let attrs = outer_attributes(&$this.attrs);\n+            if attrs.is_empty() {\n+                mk_sp($lo, $hi)\n+            } else {\n+                mk_sp(attrs[0].span.lo(), $hi)\n+            }\n+        }\n+    }\n+}\n+\n+macro_rules! span_with_attrs {\n+    ($this:ident) => {\n+        span_with_attrs_lo_hi!($this, $this.span.lo(), $this.span.hi())\n+    }\n+}\n+\n+macro_rules! implement_spanned {\n+    ($this:ty) => {\n+        impl Spanned for $this {\n+            fn span(&self) -> Span {\n+                span_with_attrs!(self)\n+            }\n+        }\n+    }\n+}\n+\n+// Implement `Spanned` for structs with `attrs` field.\n+implement_spanned!(ast::Expr);\n+implement_spanned!(ast::Field);\n+implement_spanned!(ast::ForeignItem);\n+implement_spanned!(ast::Item);\n+implement_spanned!(ast::Local);\n+\n+impl Spanned for ast::Stmt {\n+    fn span(&self) -> Span {\n+        match self.node {\n+            ast::StmtKind::Local(ref local) => mk_sp(local.span().lo(), self.span.hi()),\n+            ast::StmtKind::Item(ref item) => mk_sp(item.span().lo(), self.span.hi()),\n+            ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n+                mk_sp(expr.span().lo(), self.span.hi())\n+            }\n+            ast::StmtKind::Mac(ref mac) => {\n+                let (_, _, ref attrs) = **mac;\n+                if attrs.is_empty() {\n+                    self.span\n+                } else {\n+                    mk_sp(attrs[0].span.lo(), self.span.hi())\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::Pat {\n+    fn span(&self) -> Span {\n+        self.span\n+    }\n+}\n+\n+impl Spanned for ast::Ty {\n+    fn span(&self) -> Span {\n+        self.span\n+    }\n+}\n+\n+impl Spanned for ast::Arm {\n+    fn span(&self) -> Span {\n+        span_with_attrs_lo_hi!(self, self.pats[0].span.lo(), self.body.span.hi())\n+    }\n+}\n+\n+impl Spanned for ast::Arg {\n+    fn span(&self) -> Span {\n+        if ::items::is_named_arg(self) {\n+            mk_sp(self.pat.span.lo(), self.ty.span.hi())\n+        } else {\n+            self.ty.span\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::StructField {\n+    fn span(&self) -> Span {\n+        span_with_attrs_lo_hi!(self, self.span.lo(), self.ty.span.hi())\n+    }\n+}\n+\n+impl Spanned for ast::WherePredicate {\n+    fn span(&self) -> Span {\n+        match *self {\n+            ast::WherePredicate::BoundPredicate(ref p) => p.span,\n+            ast::WherePredicate::RegionPredicate(ref p) => p.span,\n+            ast::WherePredicate::EqPredicate(ref p) => p.span,\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::FunctionRetTy {\n+    fn span(&self) -> Span {\n+        match *self {\n+            ast::FunctionRetTy::Default(span) => span,\n+            ast::FunctionRetTy::Ty(ref ty) => ty.span,\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::TyParam {\n+    fn span(&self) -> Span {\n+        // Note that ty.span is the span for ty.ident, not the whole item.\n+        let lo = if self.attrs.is_empty() {\n+            self.span.lo()\n+        } else {\n+            self.attrs[0].span.lo()\n+        };\n+        if let Some(ref def) = self.default {\n+            return mk_sp(lo, def.span.hi());\n+        }\n+        if self.bounds.is_empty() {\n+            return mk_sp(lo, self.span.hi());\n+        }\n+        let hi = self.bounds[self.bounds.len() - 1].span().hi();\n+        mk_sp(lo, hi)\n+    }\n+}\n+\n+impl Spanned for ast::TyParamBound {\n+    fn span(&self) -> Span {\n+        match *self {\n+            ast::TyParamBound::TraitTyParamBound(ref ptr, _) => ptr.span,\n+            ast::TyParamBound::RegionTyParamBound(ref l) => l.span,\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::LifetimeDef {\n+    fn span(&self) -> Span {\n+        let hi = if self.bounds.is_empty() {\n+            self.lifetime.span.hi()\n+        } else {\n+            self.bounds[self.bounds.len() - 1].span.hi()\n+        };\n+        mk_sp(self.lifetime.span.lo(), hi)\n+    }\n+}\n+\n+impl Spanned for MacroArg {\n+    fn span(&self) -> Span {\n+        match *self {\n+            MacroArg::Expr(ref expr) => expr.span(),\n+            MacroArg::Ty(ref ty) => ty.span(),\n+            MacroArg::Pat(ref pat) => pat.span(),\n+        }\n+    }\n+}"}, {"sha": "64f5ba935550dd4ce6e3f560d10bbd479473b760", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::SpanUtils;\n use config::{IndentStyle, Style, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};"}, {"sha": "4f19cd17921a0fb7a111413d0841088a5e59c81d", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -15,7 +15,7 @@ use std::cmp;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;"}, {"sha": "f6f46ca61886495250782bd90f2288d0c160241c", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa51a6a97885491ae0e9bf115291760afc7e16/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=32fa51a6a97885491ae0e9bf115291760afc7e16", "patch": "@@ -16,7 +16,7 @@ use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n-use Spanned;\n+use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, CommentCodeSlices,\n               FindUncommented};"}]}