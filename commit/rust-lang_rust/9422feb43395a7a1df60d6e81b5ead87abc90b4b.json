{"sha": "9422feb43395a7a1df60d6e81b5ead87abc90b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjJmZWI0MzM5NWE3YTFkZjYwZDZlODFiNWVhZDg3YWJjOTBiNGI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T00:52:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T00:52:45Z"}, "message": "Rollup merge of #65416 - spastorino:minor-sync-changes, r=Mark-Simulacrum\n\nMinor sync changes\n\nr? @Mark-Simulacrum", "tree": {"sha": "d58c82d0b3d84633a9452fa78a4c3c136cfa229b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58c82d0b3d84633a9452fa78a4c3c136cfa229b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9422feb43395a7a1df60d6e81b5ead87abc90b4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpRhdCRBK7hj4Ov3rIwAAdHIIAJmBW0pCBWGUF5O8V7O096wh\nzby6c3LXpXtS1Xppz4mZbbZt5OZQ2rzs60Xzpk9e15ZAmUkDgYSPQOS+JzBj2Eec\nRPs3kVsOvlP+6R/lnlZ5dAb67QO4WMZ7fkUap5cddXUh+SQckQhp1daKF4kEgW6i\nOlkwpcXqpV3pnQiNQBrtcgHaXw9xlicZwhJx6TMmrTYWT5lhk2dTmEOdWQEKKDnH\nLWfahzzOiEHnMBQe5Ko9aq9K4wzUl0sKOtn+eFfk6Mau/jadDRj5lvtsEsapAIsv\nSsh++E4GBT/RVv9XBPI06S5K4Uvvdlo6g2T83eFNpAV3Co/f9xHiv66lXzq416I=\n=ai9a\n-----END PGP SIGNATURE-----\n", "payload": "tree d58c82d0b3d84633a9452fa78a4c3c136cfa229b\nparent ae5093d62d1c444dde58c2a89c9ba31a367bb750\nparent b9bc431bd22e8e53398281d1c800fd78fe91e613\nauthor Tyler Mandry <tmandry@gmail.com> 1571100765 -0700\ncommitter GitHub <noreply@github.com> 1571100765 -0700\n\nRollup merge of #65416 - spastorino:minor-sync-changes, r=Mark-Simulacrum\n\nMinor sync changes\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9422feb43395a7a1df60d6e81b5ead87abc90b4b", "html_url": "https://github.com/rust-lang/rust/commit/9422feb43395a7a1df60d6e81b5ead87abc90b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9422feb43395a7a1df60d6e81b5ead87abc90b4b/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5093d62d1c444dde58c2a89c9ba31a367bb750", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5093d62d1c444dde58c2a89c9ba31a367bb750", "html_url": "https://github.com/rust-lang/rust/commit/ae5093d62d1c444dde58c2a89c9ba31a367bb750"}, {"sha": "b9bc431bd22e8e53398281d1c800fd78fe91e613", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bc431bd22e8e53398281d1c800fd78fe91e613", "html_url": "https://github.com/rust-lang/rust/commit/b9bc431bd22e8e53398281d1c800fd78fe91e613"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "9622c290039d5ddac11616b97714f55a47d8abe4", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9422feb43395a7a1df60d6e81b5ead87abc90b4b/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9422feb43395a7a1df60d6e81b5ead87abc90b4b/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=9422feb43395a7a1df60d6e81b5ead87abc90b4b", "patch": "@@ -1,6 +1,6 @@\n //! This module defines types which are thread safe if cfg!(parallel_compiler) is true.\n //!\n-//! `Lrc` is an alias of either Rc or Arc.\n+//! `Lrc` is an alias of `Arc` if cfg!(parallel_compiler) is true, `Rc` otherwise.\n //!\n //! `Lock` is a mutex.\n //! It internally uses `parking_lot::Mutex` if cfg!(parallel_compiler) is true,\n@@ -12,7 +12,7 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_compiler) is false.\n //!\n-//! `MTRef` is a immutable reference if cfg!(parallel_compiler), and an mutable reference otherwise.\n+//! `MTRef` is an immutable reference if cfg!(parallel_compiler), and a mutable reference otherwise.\n //!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_compiler).\n@@ -23,29 +23,6 @@ use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use crate::owning_ref::{Erased, OwningRef};\n \n-pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n-    where A: FnOnce() -> RA,\n-          B: FnOnce() -> RB\n-{\n-    (oper_a(), oper_b())\n-}\n-\n-pub struct SerialScope;\n-\n-impl SerialScope {\n-    pub fn spawn<F>(&self, f: F)\n-        where F: FnOnce(&SerialScope)\n-    {\n-        f(self)\n-    }\n-}\n-\n-pub fn serial_scope<F, R>(f: F) -> R\n-    where F: FnOnce(&SerialScope) -> R\n-{\n-    f(&SerialScope)\n-}\n-\n pub use std::sync::atomic::Ordering::SeqCst;\n pub use std::sync::atomic::Ordering;\n \n@@ -176,8 +153,28 @@ cfg_if! {\n         pub type AtomicU32 = Atomic<u32>;\n         pub type AtomicU64 = Atomic<u64>;\n \n-        pub use self::serial_join as join;\n-        pub use self::serial_scope as scope;\n+        pub fn join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n+            where A: FnOnce() -> RA,\n+                  B: FnOnce() -> RB\n+        {\n+            (oper_a(), oper_b())\n+        }\n+\n+        pub struct SerialScope;\n+\n+        impl SerialScope {\n+            pub fn spawn<F>(&self, f: F)\n+                where F: FnOnce(&SerialScope)\n+            {\n+                f(self)\n+            }\n+        }\n+\n+        pub fn scope<F, R>(f: F) -> R\n+            where F: FnOnce(&SerialScope) -> R\n+        {\n+            f(&SerialScope)\n+        }\n \n         #[macro_export]\n         macro_rules! parallel {"}]}