{"sha": "8ad447c4791807a096b575ccba9baec2e4ec937d", "node_id": "C_kwDOAAsO6NoAKDhhZDQ0N2M0NzkxODA3YTA5NmI1NzVjY2JhOWJhZWMyZTRlYzkzN2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-05T19:43:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-05T19:43:40Z"}, "message": "Rollup merge of #104912 - RalfJung:per, r=Mark-Simulacrum\n\nPartialEq: PERs are homogeneous\n\nPartialEq claims that it corresponds to a PER, but that is only a well-defined statement when `Rhs == Self`. There is no standard notion of PER on a relation between two different sets/types. So move this out of the first paragraph and clarify this.", "tree": {"sha": "59343998f08c1dd5f50db4aa440ae09e0e03e982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59343998f08c1dd5f50db4aa440ae09e0e03e982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad447c4791807a096b575ccba9baec2e4ec937d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjknsCRBK7hj4Ov3rIwAAlQUIAJ6ytC41AyAng4JMcgsQqlwQ\nOydVtN4yB8kja95oOPXG2S0KDryND2Zo3Tx5FnHacv3HAuME+a1mwGqW0b4yx/dx\nxT5crViPy4z3SMIUB9Lx4erg1P+UalYzzS7lQe8WrPY5JAYoZWxrsQImgIMsw7Oz\nZC5vr0GmK6TqgyQU3ZwDPK/AAJQUQc+uUGRKg7Srb3thjiNs7zaQNH9gxoRvVJAW\nnC2JRCwka12SZXqwZgM/6PxMIcOwG5QWXv7OQDe2Eamsd1eGziQuoEuzGqbbV4+t\nuy2uLdIKkC7Y4e8NcHuyNXfNJCuc0dVDn0e0ylwBUT96rxsIp55RIyaP3o6LbJU=\n=/Mqx\n-----END PGP SIGNATURE-----\n", "payload": "tree 59343998f08c1dd5f50db4aa440ae09e0e03e982\nparent 203c8765ea33c65d888febe0e8219c4bb11b0d89\nparent 34de2573f5a66f6f000d71f6933aa190dcfb17a1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670269420 +0100\ncommitter GitHub <noreply@github.com> 1670269420 +0100\n\nRollup merge of #104912 - RalfJung:per, r=Mark-Simulacrum\n\nPartialEq: PERs are homogeneous\n\nPartialEq claims that it corresponds to a PER, but that is only a well-defined statement when `Rhs == Self`. There is no standard notion of PER on a relation between two different sets/types. So move this out of the first paragraph and clarify this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad447c4791807a096b575ccba9baec2e4ec937d", "html_url": "https://github.com/rust-lang/rust/commit/8ad447c4791807a096b575ccba9baec2e4ec937d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad447c4791807a096b575ccba9baec2e4ec937d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203c8765ea33c65d888febe0e8219c4bb11b0d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/203c8765ea33c65d888febe0e8219c4bb11b0d89", "html_url": "https://github.com/rust-lang/rust/commit/203c8765ea33c65d888febe0e8219c4bb11b0d89"}, {"sha": "34de2573f5a66f6f000d71f6933aa190dcfb17a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/34de2573f5a66f6f000d71f6933aa190dcfb17a1", "html_url": "https://github.com/rust-lang/rust/commit/34de2573f5a66f6f000d71f6933aa190dcfb17a1"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "949896e57480677b8192509782d00380558c9ed9", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ad447c4791807a096b575ccba9baec2e4ec937d/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad447c4791807a096b575ccba9baec2e4ec937d/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=8ad447c4791807a096b575ccba9baec2e4ec937d", "patch": "@@ -29,15 +29,16 @@ use crate::marker::StructuralPartialEq;\n \n use self::Ordering::*;\n \n-/// Trait for equality comparisons which are [partial equivalence\n-/// relations](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\n+/// Trait for equality comparisons.\n ///\n /// `x.eq(y)` can also be written `x == y`, and `x.ne(y)` can be written `x != y`.\n /// We use the easier-to-read infix notation in the remainder of this documentation.\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n /// so floating point types implement `PartialEq` but not [`trait@Eq`].\n+/// Formally speaking, when `Rhs == Self`, this trait corresponds to a [partial equivalence\n+/// relation](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\n ///\n /// Implementations must ensure that `eq` and `ne` are consistent with each other:\n ///"}]}