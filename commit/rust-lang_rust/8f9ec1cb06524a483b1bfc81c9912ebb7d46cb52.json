{"sha": "8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOWVjMWNiMDY1MjRhNDgzYjFiZmM4MWM5OTEyZWJiN2Q0NmNiNTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-04-01T21:14:44Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-04-01T21:14:44Z"}, "message": "avoid IdxSets containing garbage above the universe length\n\nThis makes sure that all bits in each IdxSet between the universe length\nand the end of the word are all zero instead of being in an indeterminate state.\n\nThis fixes a crash with RUST_LOG=rustc_mir, and is probably a good idea\nanyway.", "tree": {"sha": "5d203672e9f813655bc05f1fa57193c35a15b9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d203672e9f813655bc05f1fa57193c35a15b9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "html_url": "https://github.com/rust-lang/rust/commit/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2235f20b5295394450f4962fb5f93254e63640c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2235f20b5295394450f4962fb5f93254e63640c", "html_url": "https://github.com/rust-lang/rust/commit/d2235f20b5295394450f4962fb5f93254e63640c"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "c9495587c4687aa6e5d6119b77550b5ec230b095", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "patch": "@@ -121,7 +121,9 @@ impl<T: Idx> IdxSetBuf<T> {\n \n     /// Creates set holding every element whose index falls in range 0..universe_size.\n     pub fn new_filled(universe_size: usize) -> Self {\n-        Self::new(!0, universe_size)\n+        let mut result = Self::new(!0, universe_size);\n+        result.trim_to(universe_size);\n+        result\n     }\n \n     /// Creates set holding no elements.\n@@ -168,6 +170,36 @@ impl<T: Idx> IdxSet<T> {\n         }\n     }\n \n+    /// Sets all elements up to `universe_size`\n+    pub fn set_up_to(&mut self, universe_size: usize) {\n+        for b in &mut self.bits {\n+            *b = !0;\n+        }\n+        self.trim_to(universe_size);\n+    }\n+\n+    /// Clear all elements above `universe_size`.\n+    fn trim_to(&mut self, universe_size: usize) {\n+        let word_bits = mem::size_of::<Word>() * 8;\n+\n+        // `trim_block` is the first block where some bits have\n+        // to be cleared.\n+        let trim_block = universe_size / word_bits;\n+\n+        // all the blocks above it have to be completely cleared.\n+        if trim_block < self.bits.len() {\n+            for b in &mut self.bits[trim_block+1..] {\n+                *b = 0;\n+            }\n+\n+            // at that block, the `universe_size % word_bits` lsbs\n+            // should remain.\n+            let remaining_bits = universe_size % word_bits;\n+            let mask = (1<<remaining_bits)-1;\n+            self.bits[trim_block] &= mask;\n+        }\n+    }\n+\n     /// Removes `elem` from the set `self`; returns true iff this changed `self`.\n     pub fn remove(&mut self, elem: &T) -> bool {\n         self.bits.clear_bit(elem.index())\n@@ -252,3 +284,43 @@ impl<'a, T: Idx> Iterator for Iter<'a, T> {\n         }\n     }\n }\n+\n+#[test]\n+fn test_trim_to() {\n+    use std::cmp;\n+\n+    for i in 0..256 {\n+        let mut idx_buf: IdxSetBuf<usize> = IdxSetBuf::new_filled(128);\n+        idx_buf.trim_to(i);\n+\n+        let elems: Vec<usize> = idx_buf.iter().collect();\n+        let expected: Vec<usize> = (0..cmp::min(i, 128)).collect();\n+        assert_eq!(elems, expected);\n+    }\n+}\n+\n+#[test]\n+fn test_set_up_to() {\n+    for i in 0..128 {\n+        for mut idx_buf in\n+            vec![IdxSetBuf::new_empty(128), IdxSetBuf::new_filled(128)]\n+            .into_iter()\n+        {\n+            idx_buf.set_up_to(i);\n+\n+            let elems: Vec<usize> = idx_buf.iter().collect();\n+            let expected: Vec<usize> = (0..i).collect();\n+            assert_eq!(elems, expected);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_new_filled() {\n+    for i in 0..128 {\n+        let mut idx_buf = IdxSetBuf::new_filled(i);\n+        let elems: Vec<usize> = idx_buf.iter().collect();\n+        let expected: Vec<usize> = (0..i).collect();\n+        assert_eq!(elems, expected);\n+    }\n+}"}, {"sha": "287640439c0e8f9ab39216066e8e64eb38bc64d6", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=8f9ec1cb06524a483b1bfc81c9912ebb7d46cb52", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedPlaces<'a, 'gcx, 'tcx>\n     // sets on_entry bits for Arg places\n     fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n         // set all bits to 1 (uninit) before gathering counterevidence\n-        for e in entry_set.words_mut() { *e = !0; }\n+        entry_set.set_up_to(self.bits_per_block());\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,\n@@ -443,7 +443,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedPlaces<'a, 'gcx, 'tc\n \n     // sets on_entry bits for Arg places\n     fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n-        for e in entry_set.words_mut() { *e = 0; }\n+        entry_set.clear();\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,"}]}