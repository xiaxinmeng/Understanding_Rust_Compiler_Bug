{"sha": "f97e64083b10e06286eb621f9dff918362e03fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2U2NDA4M2IxMGUwNjI4NmViNjIxZjlkZmY5MTgzNjJlMDNmYzE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-09T14:55:04Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-11T13:52:21Z"}, "message": "dlist: Implement size_hint properly for all iterators", "tree": {"sha": "b6677ef32ec06190c7b2c71199a8467370902b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6677ef32ec06190c7b2c71199a8467370902b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97e64083b10e06286eb621f9dff918362e03fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97e64083b10e06286eb621f9dff918362e03fc1", "html_url": "https://github.com/rust-lang/rust/commit/f97e64083b10e06286eb621f9dff918362e03fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97e64083b10e06286eb621f9dff918362e03fc1/comments", "author": null, "committer": null, "parents": [{"sha": "824bb44f929a564dc4dd0590578de3ea04789402", "url": "https://api.github.com/repos/rust-lang/rust/commits/824bb44f929a564dc4dd0590578de3ea04789402", "html_url": "https://github.com/rust-lang/rust/commit/824bb44f929a564dc4dd0590578de3ea04789402"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "ed8ba8105b1e5b1e090912e5c8082a97d8b80fc3", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f97e64083b10e06286eb621f9dff918362e03fc1/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97e64083b10e06286eb621f9dff918362e03fc1/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=f97e64083b10e06286eb621f9dff918362e03fc1", "patch": "@@ -39,24 +39,28 @@ struct Node<T> {\n pub struct ForwardIterator<'self, T> {\n     priv list: &'self List<T>,\n     priv next: &'self Link<T>,\n+    priv nelem: uint,\n }\n \n /// List reverse iterator\n pub struct ReverseIterator<'self, T> {\n     priv list: &'self List<T>,\n     priv next: Rawlink<T>,\n+    priv nelem: uint,\n }\n \n /// List mutable iterator\n pub struct MutForwardIterator<'self, T> {\n     priv list: &'self mut List<T>,\n     priv curs: Rawlink<T>,\n+    priv nelem: uint,\n }\n \n /// List mutable reverse iterator\n pub struct MutReverseIterator<'self, T> {\n     priv list: &'self mut List<T>,\n     priv next: Rawlink<T>,\n+    priv nelem: uint,\n }\n \n /// List consuming iterator\n@@ -287,22 +291,22 @@ impl<T> List<T> {\n \n     /// Provide a forward iterator\n     pub fn iter<'a>(&'a self) -> ForwardIterator<'a, T> {\n-        ForwardIterator{list: self, next: &self.list_head}\n+        ForwardIterator{nelem: self.len(), list: self, next: &self.list_head}\n     }\n \n     /// Provide a reverse iterator\n     pub fn rev_iter<'a>(&'a self) -> ReverseIterator<'a, T> {\n-        ReverseIterator{list: self, next: self.list_tail}\n+        ReverseIterator{nelem: self.len(), list: self, next: self.list_tail}\n     }\n \n     /// Provide a forward iterator with mutable references\n     pub fn mut_iter<'a>(&'a mut self) -> MutForwardIterator<'a, T> {\n-        MutForwardIterator{list: self, curs: None}\n+        MutForwardIterator{nelem: self.len(), list: self, curs: None}\n     }\n \n     /// Provide a reverse iterator with mutable references\n     pub fn mut_rev_iter<'a>(&'a mut self) -> MutReverseIterator<'a, T> {\n-        MutReverseIterator{list: self, next: self.list_tail}\n+        MutReverseIterator{nelem: self.len(), list: self, next: self.list_tail}\n     }\n \n \n@@ -332,14 +336,15 @@ impl<'self, A> Iterator<&'self A> for ForwardIterator<'self, A> {\n         match *self.next {\n             None => None,\n             Some(ref next) => {\n+                self.nelem -= 1;\n                 self.next = &next.next;\n                 Some(&next.value)\n             }\n         }\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        (0, Some(self.list.length))\n+        (self.nelem, Some(self.nelem))\n     }\n }\n \n@@ -353,6 +358,7 @@ impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n                 match self.list.list_head {\n                     None => None,\n                     Some(ref mut head) => {\n+                        self.nelem -= 1;\n                         self.curs = rawlink(&mut **head);\n                         Some(&mut head.value)\n                     }\n@@ -362,6 +368,7 @@ impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n                 match resolve_rawlink(rcurs).next {\n                     None => None,\n                     Some(ref mut head) => {\n+                        self.nelem -= 1;\n                         self.curs = rawlink(&mut **head);\n                         Some(&mut head.value)\n                     }\n@@ -371,7 +378,7 @@ impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        (0, Some(self.list.length))\n+        (self.nelem, Some(self.nelem))\n     }\n }\n \n@@ -381,6 +388,7 @@ impl<'self, A> Iterator<&'self A> for ReverseIterator<'self, A> {\n         match self.next {\n             None => None,\n             Some(rnext) => {\n+                self.nelem -= 1;\n                 let prev = resolve_rawlink(rnext);\n                 self.next = prev.prev;\n                 Some(&prev.value)\n@@ -389,7 +397,7 @@ impl<'self, A> Iterator<&'self A> for ReverseIterator<'self, A> {\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        (0, Some(self.list.length))\n+        (self.nelem, Some(self.nelem))\n     }\n }\n \n@@ -399,6 +407,7 @@ impl<'self, A> Iterator<&'self mut A> for MutReverseIterator<'self, A> {\n         match self.next {\n             None => None,\n             Some(rnext) => {\n+                self.nelem -= 1;\n                 let prev = resolve_rawlink(rnext);\n                 self.next = prev.prev;\n                 Some(&mut prev.value)\n@@ -407,7 +416,7 @@ impl<'self, A> Iterator<&'self mut A> for MutReverseIterator<'self, A> {\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        (0, Some(self.list.length))\n+        (self.nelem, Some(self.nelem))\n     }\n }\n \n@@ -628,7 +637,9 @@ fn test_iterator() {\n     assert_eq!(n.iter().next(), None);\n     n.push_front(4);\n     let mut it = n.iter();\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n     assert_eq!(it.next().unwrap(), &4);\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n \n@@ -642,7 +653,9 @@ fn test_rev_iter() {\n     assert_eq!(n.rev_iter().next(), None);\n     n.push_front(4);\n     let mut it = n.rev_iter();\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n     assert_eq!(it.next().unwrap(), &4);\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n \n@@ -659,7 +672,9 @@ fn test_mut_iter() {\n     assert!(n.mut_iter().next().is_none());\n     n.push_front(4);\n     let mut it = n.mut_iter();\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n     assert!(it.next().is_some());\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n     assert!(it.next().is_none());\n }\n "}]}