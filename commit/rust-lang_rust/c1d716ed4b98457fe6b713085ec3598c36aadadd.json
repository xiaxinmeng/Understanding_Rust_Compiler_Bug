{"sha": "c1d716ed4b98457fe6b713085ec3598c36aadadd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZDcxNmVkNGI5ODQ1N2ZlNmI3MTMwODVlYzM1OThjMzZhYWRhZGQ=", "commit": {"author": {"name": "Dzmitry Malyshau", "email": "kvarkus@gmail.com", "date": "2015-04-04T06:54:49Z"}, "committer": {"name": "Dzmitry Malyshau", "email": "kvarkus@gmail.com", "date": "2015-04-04T22:55:29Z"}, "message": "Renamed Arc::try_unique to get_mut", "tree": {"sha": "e21a8d973844e2c11ca4325cec94739a7f048b8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e21a8d973844e2c11ca4325cec94739a7f048b8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d716ed4b98457fe6b713085ec3598c36aadadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d716ed4b98457fe6b713085ec3598c36aadadd", "html_url": "https://github.com/rust-lang/rust/commit/c1d716ed4b98457fe6b713085ec3598c36aadadd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d716ed4b98457fe6b713085ec3598c36aadadd/comments", "author": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a02736bef069bb8725b9df57055feff704b943", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a02736bef069bb8725b9df57055feff704b943", "html_url": "https://github.com/rust-lang/rust/commit/b8a02736bef069bb8725b9df57055feff704b943"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "0a66327b5acec3d74aeecc99a1a06dd96cc74d49", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c1d716ed4b98457fe6b713085ec3598c36aadadd/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d716ed4b98457fe6b713085ec3598c36aadadd/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=c1d716ed4b98457fe6b713085ec3598c36aadadd", "patch": "@@ -243,27 +243,27 @@ pub fn weak_count<T>(this: &Arc<T>) -> usize { this.inner().weak.load(SeqCst) -\n pub fn strong_count<T>(this: &Arc<T>) -> usize { this.inner().strong.load(SeqCst) }\n \n \n-/// Try accessing a mutable reference to the contents behind an unique `Arc<T>`.\n+/// Returns a mutable reference to the contained value if the `Arc<T>` is unique.\n ///\n-/// The access is granted only if this is the only reference to the object.\n-/// Otherwise, `None` is returned.\n+/// Returns `None` if the `Arc<T>` is not unique.\n ///\n /// # Examples\n ///\n /// ```\n /// # #![feature(alloc)]\n /// extern crate alloc;\n-/// # fn main() {\n-/// use alloc::arc;\n+/// use alloc::arc::{Arc, get_mut};\n ///\n-/// let mut four = arc::Arc::new(4);\n+/// let mut x = Arc::new(3);\n+/// *get_mut(&mut x).unwrap() = 4;\n+/// assert_eq!(*x, 4);\n ///\n-/// arc::unique(&mut four).map(|num| *num = 5);\n-/// # }\n+/// let _y = x.clone();\n+/// assert!(get_mut(&mut x).is_none());\n /// ```\n #[inline]\n #[unstable(feature = \"alloc\")]\n-pub fn unique<T>(this: &mut Arc<T>) -> Option<&mut T> {\n+pub fn get_mut<'a, T>(this: &'a mut Arc<T>) -> Option<&'a mut T> {\n     if strong_count(this) == 1 && weak_count(this) == 0 {\n         // This unsafety is ok because we're guaranteed that the pointer\n         // returned is the *only* pointer that will ever be returned to T. Our\n@@ -347,7 +347,7 @@ impl<T: Clone> Arc<T> {\n            self.inner().weak.load(SeqCst) != 1 {\n             *self = Arc::new((**self).clone())\n         }\n-        // As with `unique()`, the unsafety is ok because our reference was\n+        // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n         let inner = unsafe { &mut **self._ptr };\n         &mut inner.data\n@@ -691,7 +691,7 @@ mod tests {\n     use std::sync::atomic::Ordering::{Acquire, SeqCst};\n     use std::thread;\n     use std::vec::Vec;\n-    use super::{Arc, Weak, weak_count, strong_count, unique};\n+    use super::{Arc, Weak, get_mut, weak_count, strong_count};\n     use std::sync::Mutex;\n \n     struct Canary(*mut atomic::AtomicUsize);\n@@ -728,18 +728,16 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_arc_unique() {\n-        let mut x = Arc::new(10);\n-        assert!(unique(&mut x).is_some());\n-        {\n-            let y = x.clone();\n-            assert!(unique(&mut x).is_none());\n-        }\n-        {\n-            let z = x.downgrade();\n-            assert!(unique(&mut x).is_none());\n-        }\n-        assert!(unique(&mut x).is_some());\n+    fn test_arc_get_mut() {\n+        let mut x = Arc::new(3);\n+        *get_mut(&mut x).unwrap() = 4;\n+        assert_eq!(*x, 4);\n+        let y = x.clone();\n+        assert!(get_mut(&mut x).is_none());\n+        drop(y);\n+        assert!(get_mut(&mut x).is_some());\n+        let _w = x.downgrade();\n+        assert!(get_mut(&mut x).is_none());\n     }\n \n     #[test]"}]}