{"sha": "99de3728f95d1a3fa6063aa4ef2974a45cf35f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZGUzNzI4Zjk1ZDFhM2ZhNjA2M2FhNGVmMjk3NGE0NWNmMzVmNGM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-22T21:22:48Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-22T21:22:48Z"}, "message": "Only use read_unaligned in transmute_copy if necessary", "tree": {"sha": "a827d6cb934704c9c094876dc97d4cc301a373c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a827d6cb934704c9c094876dc97d4cc301a373c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c", "html_url": "https://github.com/rust-lang/rust/commit/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e90d64266b8a4b53935d629786e69610b33f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e90d64266b8a4b53935d629786e69610b33f25", "html_url": "https://github.com/rust-lang/rust/commit/82e90d64266b8a4b53935d629786e69610b33f25"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "e42b73ddd23a99252850bd176ccf2922ac8af658", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99de3728f95d1a3fa6063aa4ef2974a45cf35f4c/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=99de3728f95d1a3fa6063aa4ef2974a45cf35f4c", "patch": "@@ -923,7 +923,12 @@ pub fn drop<T>(_x: T) {}\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    ptr::read_unaligned(src as *const T as *const U)\n+    // If U has a higher alignment requirement, src may not be suitably aligned.\n+    if align_of::<U>() > align_of::<T>() {\n+        ptr::read_unaligned(src as *const T as *const U)\n+    } else {\n+        ptr::read(src as *const T as *const U)\n+    }\n }\n \n /// Opaque type representing the discriminant of an enum."}]}