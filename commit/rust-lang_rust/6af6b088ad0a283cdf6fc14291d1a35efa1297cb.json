{"sha": "6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjZiMDg4YWQwYTI4M2NkZjZmYzE0MjkxZDFhMzVlZmExMjk3Y2I=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:31:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:31:21Z"}, "message": "Port middle/moves.rs from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "02a86ef8a3e75a7019a95a12722929aa4f98da33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a86ef8a3e75a7019a95a12722929aa4f98da33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "html_url": "https://github.com/rust-lang/rust/commit/6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af6b088ad0a283cdf6fc14291d1a35efa1297cb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "html_url": "https://github.com/rust-lang/rust/commit/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "bbf2cdd0e5d58b34234efd86c7af2290ff8b1e52", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6af6b088ad0a283cdf6fc14291d1a35efa1297cb/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af6b088ad0a283cdf6fc14291d1a35efa1297cb/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "patch": "@@ -139,8 +139,8 @@ use std::at_vec;\n use std::hashmap::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;\n-use syntax::oldvisit;\n-use syntax::oldvisit::vt;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n use syntax::codemap::span;\n \n #[deriving(Encodable, Decodable)]\n@@ -190,16 +190,25 @@ enum UseMode {\n     Read         // Read no matter what the type.\n }\n \n+struct ComputeModesVisitor;\n+\n+impl visit::Visitor<VisitContext> for ComputeModesVisitor {\n+    fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&fn_decl, b:&Block, s:span, n:NodeId, e:VisitContext) {\n+        compute_modes_for_fn(*self, fk, fd, b, s, n, e);\n+    }\n+    fn visit_expr(&mut self, ex:@expr, e:VisitContext) {\n+        compute_modes_for_expr(*self, ex, e);\n+    }\n+    fn visit_local(&mut self, l:@Local, e:VisitContext) {\n+        compute_modes_for_local(*self, l, e);\n+    }\n+}\n+\n pub fn compute_moves(tcx: ty::ctxt,\n                      method_map: method_map,\n                      crate: &Crate) -> MoveMaps\n {\n-    let visitor = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_fn: compute_modes_for_fn,\n-        visit_expr: compute_modes_for_expr,\n-        visit_local: compute_modes_for_local,\n-        .. *oldvisit::default_visitor()\n-    });\n+    let mut visitor = ComputeModesVisitor;\n     let visit_cx = VisitContext {\n         tcx: tcx,\n         method_map: method_map,\n@@ -209,7 +218,7 @@ pub fn compute_moves(tcx: ty::ctxt,\n             moved_variables_set: @mut HashSet::new()\n         }\n     };\n-    oldvisit::visit_crate(crate, (visit_cx, visitor));\n+    visit::walk_crate(&mut visitor, crate, visit_cx);\n     return visit_cx.move_maps;\n }\n \n@@ -227,43 +236,44 @@ pub fn moved_variable_node_id_from_def(def: def) -> Option<NodeId> {\n ///////////////////////////////////////////////////////////////////////////\n // Expressions\n \n-fn compute_modes_for_local<'a>(local: @Local,\n-                               (cx, v): (VisitContext,\n-                                         vt<VisitContext>)) {\n+fn compute_modes_for_local<'a>(v: ComputeModesVisitor,\n+                               local: @Local,\n+                               cx: VisitContext) {\n     cx.use_pat(local.pat);\n     for &init in local.init.iter() {\n         cx.use_expr(init, Read, v);\n     }\n }\n \n-fn compute_modes_for_fn(fk: &oldvisit::fn_kind,\n+fn compute_modes_for_fn(v: ComputeModesVisitor,\n+                        fk: &visit::fn_kind,\n                         decl: &fn_decl,\n                         body: &Block,\n                         span: span,\n                         id: NodeId,\n-                        (cx, v): (VisitContext,\n-                                  vt<VisitContext>)) {\n+                        cx: VisitContext) {\n+    let mut v = v;\n     for a in decl.inputs.iter() {\n         cx.use_pat(a.pat);\n     }\n-    oldvisit::visit_fn(fk, decl, body, span, id, (cx, v));\n+    visit::walk_fn(&mut v, fk, decl, body, span, id, cx);\n }\n \n-fn compute_modes_for_expr(expr: @expr,\n-                          (cx, v): (VisitContext,\n-                                    vt<VisitContext>))\n+fn compute_modes_for_expr(v: ComputeModesVisitor,\n+                          expr: @expr,\n+                          cx: VisitContext)\n {\n     cx.consume_expr(expr, v);\n }\n \n impl VisitContext {\n-    pub fn consume_exprs(&self, exprs: &[@expr], visitor: vt<VisitContext>) {\n+    pub fn consume_exprs(&self, exprs: &[@expr], visitor: ComputeModesVisitor) {\n         for expr in exprs.iter() {\n             self.consume_expr(*expr, visitor);\n         }\n     }\n \n-    pub fn consume_expr(&self, expr: @expr, visitor: vt<VisitContext>) {\n+    pub fn consume_expr(&self, expr: @expr, visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that the value of `expr` will be consumed,\n          * meaning either copied or moved depending on its type.\n@@ -281,7 +291,7 @@ impl VisitContext {\n         };\n     }\n \n-    pub fn consume_block(&self, blk: &Block, visitor: vt<VisitContext>) {\n+    pub fn consume_block(&self, blk: &Block, visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that the value of `blk` will be consumed,\n          * meaning either copied or moved depending on its type.\n@@ -290,7 +300,8 @@ impl VisitContext {\n         debug!(\"consume_block(blk.id=%?)\", blk.id);\n \n         for stmt in blk.stmts.iter() {\n-            (visitor.visit_stmt)(*stmt, (*self, visitor));\n+            let mut v = visitor;\n+            v.visit_stmt(*stmt, *self);\n         }\n \n         for tail_expr in blk.expr.iter() {\n@@ -301,7 +312,7 @@ impl VisitContext {\n     pub fn use_expr(&self,\n                     expr: @expr,\n                     expr_mode: UseMode,\n-                    visitor: vt<VisitContext>) {\n+                    visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that `expr` is used with a given mode.  This will\n          * in turn trigger calls to the subcomponents of `expr`.\n@@ -570,7 +581,7 @@ impl VisitContext {\n                                    expr: &expr,\n                                    receiver_expr: @expr,\n                                    arg_exprs: &[@expr],\n-                                   visitor: vt<VisitContext>)\n+                                   visitor: ComputeModesVisitor)\n                                    -> bool {\n         if !self.method_map.contains_key(&expr.id) {\n             return false;\n@@ -587,7 +598,7 @@ impl VisitContext {\n         return true;\n     }\n \n-    pub fn consume_arm(&self, arm: &arm, visitor: vt<VisitContext>) {\n+    pub fn consume_arm(&self, arm: &arm, visitor: ComputeModesVisitor) {\n         for pat in arm.pats.iter() {\n             self.use_pat(*pat);\n         }\n@@ -630,21 +641,21 @@ impl VisitContext {\n \n     pub fn use_receiver(&self,\n                         receiver_expr: @expr,\n-                        visitor: vt<VisitContext>) {\n+                        visitor: ComputeModesVisitor) {\n         self.use_fn_arg(receiver_expr, visitor);\n     }\n \n     pub fn use_fn_args(&self,\n                        _: NodeId,\n                        arg_exprs: &[@expr],\n-                       visitor: vt<VisitContext>) {\n+                       visitor: ComputeModesVisitor) {\n         //! Uses the argument expressions.\n         for arg_expr in arg_exprs.iter() {\n             self.use_fn_arg(*arg_expr, visitor);\n         }\n     }\n \n-    pub fn use_fn_arg(&self, arg_expr: @expr, visitor: vt<VisitContext>) {\n+    pub fn use_fn_arg(&self, arg_expr: @expr, visitor: ComputeModesVisitor) {\n         //! Uses the argument.\n         self.consume_expr(arg_expr, visitor)\n     }"}]}