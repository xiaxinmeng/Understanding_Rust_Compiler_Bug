{"sha": "ee713f3d4350c75bae85749619b0e1508f433e02", "node_id": "C_kwDOAAsO6NoAKGVlNzEzZjNkNDM1MGM3NWJhZTg1NzQ5NjE5YjBlMTUwOGY0MzNlMDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-29T21:22:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-29T21:22:34Z"}, "message": "Check generic argument compatibility when projecting assoc ty", "tree": {"sha": "afe80ad900d57ce9e39f4ae72aa7af0deb8e3f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe80ad900d57ce9e39f4ae72aa7af0deb8e3f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee713f3d4350c75bae85749619b0e1508f433e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee713f3d4350c75bae85749619b0e1508f433e02", "html_url": "https://github.com/rust-lang/rust/commit/ee713f3d4350c75bae85749619b0e1508f433e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee713f3d4350c75bae85749619b0e1508f433e02/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594134d873a1020947da9b73803dcce76b6f5cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/594134d873a1020947da9b73803dcce76b6f5cf1", "html_url": "https://github.com/rust-lang/rust/commit/594134d873a1020947da9b73803dcce76b6f5cf1"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "29172d6caaff678cfe72dc32d8af71289f43da14", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ee713f3d4350c75bae85749619b0e1508f433e02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee713f3d4350c75bae85749619b0e1508f433e02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ee713f3d4350c75bae85749619b0e1508f433e02", "patch": "@@ -2146,10 +2146,10 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     } else {\n         ty.map_bound(|ty| ty.into())\n     };\n-    if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n+    if !check_substs_compatible(tcx, &assoc_ty.item, substs) {\n         let err = tcx.ty_error_with_message(\n             obligation.cause.span,\n-            \"impl item and trait item have different parameter counts\",\n+            \"impl item and trait item have different parameters\",\n         );\n         Progress { term: err.into(), obligations: nested }\n     } else {\n@@ -2158,6 +2158,44 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     }\n }\n \n+// Verify that the trait item and its implementation have compatible substs lists\n+fn check_substs_compatible<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    assoc_ty: &ty::AssocItem,\n+    substs: ty::SubstsRef<'tcx>,\n+) -> bool {\n+    fn check_substs_compatible_inner<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        generics: &'tcx ty::Generics,\n+        args: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> bool {\n+        if generics.count() != args.len() {\n+            return false;\n+        }\n+\n+        let (parent_args, own_args) = args.split_at(generics.parent_count);\n+\n+        if let Some(parent) = generics.parent\n+            && let parent_generics = tcx.generics_of(parent)\n+            && !check_substs_compatible_inner(tcx, parent_generics, parent_args) {\n+            return false;\n+        }\n+\n+        for (param, arg) in std::iter::zip(&generics.params, own_args) {\n+            match (&param.kind, arg.unpack()) {\n+                (ty::GenericParamDefKind::Type { .. }, ty::GenericArgKind::Type(_))\n+                | (ty::GenericParamDefKind::Lifetime, ty::GenericArgKind::Lifetime(_))\n+                | (ty::GenericParamDefKind::Const { .. }, ty::GenericArgKind::Const(_)) => {}\n+                _ => return false,\n+            }\n+        }\n+\n+        true\n+    }\n+\n+    check_substs_compatible_inner(tcx, tcx.generics_of(assoc_ty.def_id), substs.as_slice())\n+}\n+\n fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     selcx: &mut SelectionContext<'_, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "de31737efef52915773a3db1250159b261dbdab9", "filename": "src/test/ui/generic-associated-types/issue-102114.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee713f3d4350c75bae85749619b0e1508f433e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee713f3d4350c75bae85749619b0e1508f433e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs?ref=ee713f3d4350c75bae85749619b0e1508f433e02", "patch": "@@ -0,0 +1,16 @@\n+trait A {\n+    type B<'b>;\n+    fn a() -> Self::B<'static>;\n+}\n+\n+struct C;\n+\n+struct Wrapper<T>(T);\n+\n+impl A for C {\n+    type B<T> = Wrapper<T>;\n+    //~^ ERROR type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+    fn a() -> Self::B<'static> {}\n+}\n+\n+fn main() {}"}, {"sha": "8e41dee54d7e4675e2f927a99e42dad23cf88a07", "filename": "src/test/ui/generic-associated-types/issue-102114.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee713f3d4350c75bae85749619b0e1508f433e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee713f3d4350c75bae85749619b0e1508f433e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr?ref=ee713f3d4350c75bae85749619b0e1508f433e02", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/issue-102114.rs:11:12\n+   |\n+LL |     type B<'b>;\n+   |            -- expected 0 type parameters\n+...\n+LL |     type B<T> = Wrapper<T>;\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}]}