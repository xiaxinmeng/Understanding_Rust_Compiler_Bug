{"sha": "9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjliNTJiMGZmNDhlZWIyYmJjNTFmMDMzZmNmZTJiYjU1ZTUzN2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-22T05:33:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-22T05:33:32Z"}, "message": "Do not suggest using `to_owned()` on `&str += &str`", "tree": {"sha": "c67b33fee7ebb1fc9b35af0b440da9c8aebedae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67b33fee7ebb1fc9b35af0b440da9c8aebedae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "html_url": "https://github.com/rust-lang/rust/commit/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad6179d3b50101cd7530e24eca9995a730ac8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad6179d3b50101cd7530e24eca9995a730ac8d9", "html_url": "https://github.com/rust-lang/rust/commit/0ad6179d3b50101cd7530e24eca9995a730ac8d9"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "89d36d28a10861552a131f6fb876e7a6c54b2192", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "patch": "@@ -300,9 +300,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, true) {\n                                     // This has nothing here because it means we did string\n-                                    // concatenation (e.g. \"Hello \" + \"World!\"). This means\n+                                    // concatenation (e.g. \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::TyParam(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n@@ -374,7 +374,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, false) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -403,13 +403,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         (lhs_ty, rhs_ty, return_ty)\n     }\n \n-    fn check_str_addition(&self,\n-                          expr: &'gcx hir::Expr,\n-                          lhs_expr: &'gcx hir::Expr,\n-                          rhs_expr: &'gcx hir::Expr,\n-                          lhs_ty: Ty<'tcx>,\n-                          rhs_ty: Ty<'tcx>,\n-                          err: &mut errors::DiagnosticBuilder) -> bool {\n+    fn check_str_addition(\n+        &self,\n+        expr: &'gcx hir::Expr,\n+        lhs_expr: &'gcx hir::Expr,\n+        rhs_expr: &'gcx hir::Expr,\n+        lhs_ty: Ty<'tcx>,\n+        rhs_ty: Ty<'tcx>,\n+        err: &mut errors::DiagnosticBuilder,\n+        is_assign: bool,\n+    ) -> bool {\n         let codemap = self.tcx.sess.codemap();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n@@ -421,34 +424,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n             (&TyRef(_, l_ty, _), &TyRef(_, r_ty, _))\n             if l_ty.sty == TyStr && r_ty.sty == TyStr => {\n-                err.span_label(expr.span,\n-                    \"`+` can't be used to concatenate two `&str` strings\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n+                if !is_assign {\n+                    err.span_label(expr.span,\n+                                   \"`+` can't be used to concatenate two `&str` strings\");\n+                    match codemap.span_to_snippet(lhs_expr.span) {\n+                        Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                                                           msg,\n+                                                           format!(\"{}.to_owned()\", lstring)),\n+                        _ => err.help(msg),\n+                    };\n+                }\n                 true\n             }\n             (&TyRef(_, l_ty, _), &TyAdt(..))\n             if l_ty.sty == TyStr && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n-                match codemap.span_to_snippet(rhs_expr.span) {\n-                    Ok(rstring) => {\n-                        err.span_suggestion(rhs_expr.span,\n-                                            \"you also need to borrow the `String` on the right to \\\n-                                             get a `&str`\",\n-                                            format!(\"&{}\", rstring));\n+                match (\n+                    codemap.span_to_snippet(lhs_expr.span),\n+                    codemap.span_to_snippet(rhs_expr.span),\n+                    is_assign,\n+                ) {\n+                    (Ok(l), Ok(r), false) => {\n+                        err.multipart_suggestion(msg, vec![\n+                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                            (rhs_expr.span, format!(\"&{}\", r)),\n+                        ]);\n+                    }\n+                    _ => {\n+                        err.help(msg);\n                     }\n-                    _ => {}\n                 };\n                 true\n             }"}, {"sha": "94d13d5f26858b24cd9c32945afddb3498a6e574", "filename": "src/test/ui/issue-10401.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Ftest%2Fui%2Fissue-10401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Ftest%2Fui%2Fissue-10401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10401.stderr?ref=9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "patch": "@@ -5,11 +5,6 @@ LL |     a += { \"b\" };\n    |     -^^^^^^^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n-   |     `+` can't be used to concatenate two `&str` strings\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n-   |\n-LL |     a.to_owned() += { \"b\" };\n-   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd4e7cf574f62836c2b97dc50896384da63af585", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "patch": "@@ -23,12 +23,8 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-LL |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^\n-help: you also need to borrow the `String` on the right to get a `&str`\n-   |\n-LL |     let x = \"Hello \" + &\"World!\".to_owned();\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}