{"sha": "7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "node_id": "C_kwDOAAsO6NoAKDdlZGQxZDg3OTlhZmY5ZDRkZmVhNzJlMzdjNTAwZWM4ZmRiMGFmYjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-14T12:16:19Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:01:44Z"}, "message": "Replace another lock with an append-only vec", "tree": {"sha": "68afca411d2e137474785cfc7e792d4086f22d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68afca411d2e137474785cfc7e792d4086f22d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "html_url": "https://github.com/rust-lang/rust/commit/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46996326377b100fa461b49b5be0c91a075f55e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/46996326377b100fa461b49b5be0c91a075f55e5", "html_url": "https://github.com/rust-lang/rust/commit/46996326377b100fa461b49b5be0c91a075f55e5"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "64b0aff6ca2d26314177d74dd6741a5fe03ddffc", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "patch": "@@ -76,3 +76,19 @@ impl<T: Copy> AppendOnlyVec<T> {\n         return self.vec.get(i);\n     }\n }\n+\n+impl<T: Copy + PartialEq> AppendOnlyVec<T> {\n+    pub fn contains(&self, val: T) -> bool {\n+        for i in 0.. {\n+            match self.get(i) {\n+                None => return false,\n+                Some(v) => {\n+                    if val == v {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+}"}, {"sha": "6b387df785e7df66b80784e83e8c38ef86db327d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "patch": "@@ -1947,7 +1947,7 @@ impl KeywordIdents {\n         };\n \n         // Don't lint `r#foo`.\n-        if cx.sess().parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n+        if cx.sess().parse_sess.raw_identifier_spans.contains(ident.span) {\n             return;\n         }\n "}, {"sha": "4a7da11a097842ed464a8b70919eda854cc8c223", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "patch": "@@ -175,7 +175,7 @@ impl<'a> StringReader<'a> {\n                     if !sym.can_be_raw() {\n                         self.sess.emit_err(errors::CannotBeRawIdent { span, ident: sym });\n                     }\n-                    self.sess.raw_identifier_spans.borrow_mut().push(span);\n+                    self.sess.raw_identifier_spans.push(span);\n                     token::Ident(sym, true)\n                 }\n                 rustc_lexer::TokenKind::UnknownPrefix => {"}, {"sha": "61ce9291040c759660b64358cc32c1bbf47fb978", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=7edd1d8799aff9d4dfea72e37c500ec8fdb0afb8", "patch": "@@ -194,7 +194,7 @@ pub struct ParseSess {\n     pub edition: Edition,\n     /// Places where raw identifiers were used. This is used to avoid complaining about idents\n     /// clashing with keywords in new editions.\n-    pub raw_identifier_spans: Lock<Vec<Span>>,\n+    pub raw_identifier_spans: AppendOnlyVec<Span>,\n     /// Places where identifiers that contain invalid Unicode codepoints but that look like they\n     /// should be. Useful to avoid bad tokenization when encountering emoji. We group them to\n     /// provide a single error per unique incorrect identifier.\n@@ -247,7 +247,7 @@ impl ParseSess {\n             config: FxIndexSet::default(),\n             check_config: CrateCheckConfig::default(),\n             edition: ExpnId::root().expn_data().edition,\n-            raw_identifier_spans: Lock::new(Vec::new()),\n+            raw_identifier_spans: Default::default(),\n             bad_unicode_identifiers: Lock::new(Default::default()),\n             source_map,\n             buffered_lints: Lock::new(vec![]),"}]}