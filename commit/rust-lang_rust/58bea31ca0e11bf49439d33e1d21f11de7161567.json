{"sha": "58bea31ca0e11bf49439d33e1d21f11de7161567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmVhMzFjYTBlMTFiZjQ5NDM5ZDMzZTFkMjFmMTFkZTcxNjE1Njc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-10-02T05:10:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-10-02T14:02:15Z"}, "message": "tests: remove uses of Gc.", "tree": {"sha": "aff1807b2eab123a85d5fdc66076048a1719c07d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff1807b2eab123a85d5fdc66076048a1719c07d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bea31ca0e11bf49439d33e1d21f11de7161567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bea31ca0e11bf49439d33e1d21f11de7161567", "html_url": "https://github.com/rust-lang/rust/commit/58bea31ca0e11bf49439d33e1d21f11de7161567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bea31ca0e11bf49439d33e1d21f11de7161567/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa59693565efea3d55a6981b135df77c37c361fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa59693565efea3d55a6981b135df77c37c361fc", "html_url": "https://github.com/rust-lang/rust/commit/aa59693565efea3d55a6981b135df77c37c361fc"}], "stats": {"total": 4024, "additions": 322, "deletions": 3702}, "files": [{"sha": "049bf4eb1b02d2103e7ef1baf4ac85483ce794c9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -541,14 +541,6 @@ mod tests {\n         assert!(y.upgrade().is_none());\n     }\n \n-    #[test]\n-    fn gc_inside() {\n-        // see issue #11532\n-        use std::gc::GC;\n-        let a = Rc::new(RefCell::new(box(GC) 1i));\n-        assert!(a.try_borrow_mut().is_some());\n-    }\n-\n     #[test]\n     fn weak_self_cyclic() {\n         struct Cycle {"}, {"sha": "c9c824ac9cebff78a3bd16e7c58920fd796375d5", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -532,7 +532,6 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n mod tests {\n     use std::fmt::Show;\n     use std::prelude::*;\n-    use std::gc::{GC, Gc};\n     use std::hash;\n     use test::Bencher;\n     use test;\n@@ -587,43 +586,6 @@ mod tests {\n         assert_eq!(*d.get(3), 4);\n     }\n \n-    #[test]\n-    #[allow(deprecated)]\n-    fn test_boxes() {\n-        let a: Gc<int> = box(GC) 5;\n-        let b: Gc<int> = box(GC) 72;\n-        let c: Gc<int> = box(GC) 64;\n-        let d: Gc<int> = box(GC) 175;\n-\n-        let mut deq = RingBuf::new();\n-        assert_eq!(deq.len(), 0);\n-        deq.push_front(a);\n-        deq.push_front(b);\n-        deq.push(c);\n-        assert_eq!(deq.len(), 3);\n-        deq.push(d);\n-        assert_eq!(deq.len(), 4);\n-        assert_eq!(deq.front(), Some(&b));\n-        assert_eq!(deq.back(), Some(&d));\n-        assert_eq!(deq.pop_front(), Some(b));\n-        assert_eq!(deq.pop(), Some(d));\n-        assert_eq!(deq.pop(), Some(c));\n-        assert_eq!(deq.pop(), Some(a));\n-        assert_eq!(deq.len(), 0);\n-        deq.push(c);\n-        assert_eq!(deq.len(), 1);\n-        deq.push_front(b);\n-        assert_eq!(deq.len(), 2);\n-        deq.push(d);\n-        assert_eq!(deq.len(), 3);\n-        deq.push_front(a);\n-        assert_eq!(deq.len(), 4);\n-        assert_eq!(*deq.get(0), a);\n-        assert_eq!(*deq.get(1), b);\n-        assert_eq!(*deq.get(2), c);\n-        assert_eq!(*deq.get(3), d);\n-    }\n-\n     #[cfg(test)]\n     fn test_parameterized<T:Clone + PartialEq + Show>(a: T, b: T, c: T, d: T) {\n         let mut deq = RingBuf::new();\n@@ -755,12 +717,6 @@ mod tests {\n         test_parameterized::<int>(5, 72, 64, 175);\n     }\n \n-    #[test]\n-    fn test_param_at_int() {\n-        test_parameterized::<Gc<int>>(box(GC) 5, box(GC) 72,\n-                                      box(GC) 64, box(GC) 175);\n-    }\n-\n     #[test]\n     fn test_param_taggy() {\n         test_parameterized::<Taggy>(One(1), Two(1, 2), Three(1, 2, 3), Two(17, 42));"}, {"sha": "9e47142478e6b6f9f8c6ce2b9b8314065a703e1c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -529,9 +529,8 @@ fn test_rposition() {\n #[test]\n #[should_fail]\n fn test_rposition_fail() {\n-    use std::gc::GC;\n-    let v = [(box 0i, box(GC) 0i), (box 0i, box(GC) 0i),\n-             (box 0i, box(GC) 0i), (box 0i, box(GC) 0i)];\n+    let v = [(box 0i, box 0i), (box 0i, box 0i),\n+             (box 0i, box 0i), (box 0i, box 0i)];\n     let mut i = 0i;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "e27816c81653972aec579f2c68c438e20089cf26", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -572,7 +572,6 @@ fn test_repr() {\n     use std::io::stdio::println;\n     use std::char::is_alphabetic;\n     use std::mem::swap;\n-    use std::gc::GC;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();\n@@ -587,7 +586,6 @@ fn test_repr() {\n     exact_test(&1.234f64, \"1.234f64\");\n     exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n \n-    exact_test(&(box(GC) 10i), \"box(GC) 10\");\n     exact_test(&(box 10i), \"box 10\");\n     exact_test(&(&10i), \"&10\");\n     let mut x = 10i;\n@@ -601,8 +599,6 @@ fn test_repr() {\n                \"&[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(P{a:10, b:1.234}),\n                \"repr::P{a: 10, b: 1.234f64}\");\n-    exact_test(&(box(GC) P{a:10, b:1.234}),\n-               \"box(GC) repr::P{a: 10, b: 1.234f64}\");\n     exact_test(&(box P{a:10, b:1.234}),\n                \"box repr::P{a: 10, b: 1.234f64}\");\n "}, {"sha": "fcef5981f0a35602c9d4e742130ac59bf1d266db", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -411,7 +411,6 @@ mod tests {\n     extern crate test;\n \n     use std::prelude::*;\n-    use std::gc::{Gc, GC};\n     use super::*;\n     use std::task;\n \n@@ -467,25 +466,25 @@ mod tests {\n     #[test]\n     fn test_tls_multiple_types() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 0));\n             int_key.replace(Some(42));\n         });\n     }\n \n     #[test]\n     fn test_tls_overwrite_multiple_types() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n             str_key.replace(Some(\"string data 2\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 0));\n+            box_key.replace(Some(box 1));\n             int_key.replace(Some(42));\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n@@ -498,13 +497,13 @@ mod tests {\n     #[should_fail]\n     fn test_tls_cleanup_on_failure() {\n         static str_key: Key<String> = &KeyValueKey;\n-        static box_key: Key<Gc<()>> = &KeyValueKey;\n+        static box_key: Key<Box<int>> = &KeyValueKey;\n         static int_key: Key<int> = &KeyValueKey;\n         str_key.replace(Some(\"parent data\".to_string()));\n-        box_key.replace(Some(box(GC) ()));\n+        box_key.replace(Some(box 0));\n         task::spawn(proc() {\n             str_key.replace(Some(\"string data\".to_string()));\n-            box_key.replace(Some(box(GC) ()));\n+            box_key.replace(Some(box 2));\n             int_key.replace(Some(42));\n             fail!();\n         });"}, {"sha": "ca5f76cf0d45a5122cdea9f84f877fe1d8c388b3", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -554,23 +554,14 @@ mod test {\n     use super::*;\n     use std::prelude::*;\n     use std::task;\n-    use std::gc::{Gc, GC};\n-\n-    #[test]\n-    fn local_heap() {\n-        let a = box(GC) 5i;\n-        let b = a;\n-        assert!(*a == 5);\n-        assert!(*b == 5);\n-    }\n \n     #[test]\n     fn tls() {\n-        local_data_key!(key: Gc<String>)\n-        key.replace(Some(box(GC) \"data\".to_string()));\n+        local_data_key!(key: String)\n+        key.replace(Some(\"data\".to_string()));\n         assert_eq!(key.get().unwrap().as_slice(), \"data\");\n-        local_data_key!(key2: Gc<String>)\n-        key2.replace(Some(box(GC) \"data\".to_string()));\n+        local_data_key!(key2: String)\n+        key2.replace(Some(\"data\".to_string()));\n         assert_eq!(key2.get().unwrap().as_slice(), \"data\");\n     }\n \n@@ -605,23 +596,6 @@ mod test {\n         assert!(rx.recv() == 10);\n     }\n \n-    #[test]\n-    fn heap_cycles() {\n-        use std::cell::RefCell;\n-\n-        struct List {\n-            next: Option<Gc<RefCell<List>>>,\n-        }\n-\n-        let a = box(GC) RefCell::new(List { next: None });\n-        let b = box(GC) RefCell::new(List { next: Some(a) });\n-\n-        {\n-            let mut a = a.borrow_mut();\n-            a.next = Some(b);\n-        }\n-    }\n-\n     #[test]\n     #[should_fail]\n     fn test_begin_unwind() {"}, {"sha": "bbaf7991fd3cc5510c99ed9e1a5f1bc7529c2537", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n pub struct Entry<A,B> {\n     key: A,\n@@ -19,7 +18,7 @@ pub struct Entry<A,B> {\n \n pub struct alist<A,B> {\n     eq_fn: extern \"Rust\" fn(A,A) -> bool,\n-    data: Gc<RefCell<Vec<Entry<A,B>>>>,\n+    data: Box<RefCell<Vec<Entry<A,B>>>>,\n }\n \n pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n@@ -47,7 +46,7 @@ pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box(GC) RefCell::new(Vec::new()),\n+        data: box RefCell::new(Vec::new()),\n     };\n }\n \n@@ -57,6 +56,6 @@ pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {\n         eq_fn: eq_int,\n-        data: box(GC) RefCell::new(Vec::new()),\n+        data: box RefCell::new(Vec::new()),\n     };\n }"}, {"sha": "5e2a04001b5d6bca59b8ab86bcd2333923925125", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -27,9 +27,8 @@ pub mod name_pool {\n \n pub mod rust {\n     pub use name_pool::add;\n-    use std::gc::Gc;\n \n-    pub type rt = Gc<()>;\n+    pub type rt = Box<()>;\n \n     pub trait cx {\n         fn cx(&self);"}, {"sha": "3bedbd9089ce2638f8eb91e220d3cba776a8b527", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -13,9 +13,9 @@\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::gc::Gc;\n+use std::rc::Rc;\n \n-pub type header_map = HashMap<String, Gc<RefCell<Vec<Gc<String>>>>>;\n+pub type header_map = HashMap<String, Rc<RefCell<Vec<Rc<String>>>>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {"}, {"sha": "d9d393cc7492c010b247d2759bb15bc2049f94b6", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::collections::HashMap;\n-use std::gc::Gc;\n \n-pub type map = Gc<HashMap<uint, uint>>;\n+pub type map = Box<HashMap<uint, uint>>;\n "}, {"sha": "961dad000914a0dfa3022b5520676bd81ba5e2bf", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -56,8 +56,6 @@ pub mod testtypes {\n         VarB(uint, uint)\n     }\n \n-    // Skipping ty_box\n-\n     // Tests ty_uniq (of u8)\n     pub type FooUniq = Box<u8>;\n "}, {"sha": "6729373296b769cf67e450afb34688ad2c997b63", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,18 +10,15 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate collections;\n extern crate time;\n \n use time::precise_time_s;\n use std::os;\n use std::task;\n-use std::vec;\n-use std::gc::{Gc, GC};\n \n #[deriving(Clone)]\n enum List<T> {\n-    Nil, Cons(T, Gc<List<T>>)\n+    Nil, Cons(T, Box<List<T>>)\n }\n \n enum UniqueList {\n@@ -53,23 +50,21 @@ type nillist = List<()>;\n // Filled with things that have to be unwound\n \n struct State {\n-    managed: Gc<nillist>,\n     unique: Box<nillist>,\n-    tuple: (Gc<nillist>, Box<nillist>),\n-    vec: Vec<Gc<nillist>>,\n+    vec: Vec<Box<nillist>>,\n     res: r\n }\n \n struct r {\n-  _l: Gc<nillist>,\n+  _l: Box<nillist>,\n }\n \n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&mut self) {}\n }\n \n-fn r(l: Gc<nillist>) -> r {\n+fn r(l: Box<nillist>) -> r {\n     r {\n         _l: l\n     }\n@@ -85,22 +80,17 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n         let st = match st {\n           None => {\n             State {\n-                managed: box(GC) Nil,\n                 unique: box Nil,\n-                tuple: (box(GC) Nil, box Nil),\n-                vec: vec!(box(GC) Nil),\n-                res: r(box(GC) Nil)\n+                vec: vec!(box Nil),\n+                res: r(box Nil)\n             }\n           }\n           Some(st) => {\n             State {\n-                managed: box(GC) Cons((), st.managed),\n-                unique: box Cons((), box(GC) *st.unique),\n-                tuple: (box(GC) Cons((), st.tuple.ref0().clone()),\n-                        box Cons((), box(GC) *st.tuple.ref1().clone())),\n+                unique: box Cons((), box *st.unique),\n                 vec: st.vec.clone().append(\n-                        &[box(GC) Cons((), *st.vec.last().unwrap())]),\n-                res: r(box(GC) Cons((), st.res._l))\n+                        &[box Cons((), *st.vec.last().unwrap())]),\n+                res: r(box Cons((), st.res._l))\n             }\n           }\n         };"}, {"sha": "7aa3b30ce4919373468783639d78316033c8e4e5", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,30 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n struct clam {\n-    x: Gc<int>,\n-    y: Gc<int>,\n+    x: Box<int>,\n+    y: Box<int>,\n }\n \n struct fish {\n-    a: Gc<int>,\n+    a: Box<int>,\n }\n \n fn main() {\n-    let a: clam = clam{x: box(GC) 1, y: box(GC) 2};\n-    let b: clam = clam{x: box(GC) 10, y: box(GC) 20};\n-    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n-    println!(\"{:?}\", z);\n+    let a: clam = clam{x: box 1, y: box 2};\n+    let b: clam = clam{x: box 10, y: box 20};\n+    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n+    println!(\"{}\", z);\n     assert_eq!(z, 21);\n-    let forty: fish = fish{a: box(GC) 40};\n-    let two: fish = fish{a: box(GC) 2};\n+    let forty: fish = fish{a: box 40};\n+    let two: fish = fish{a: box 2};\n     let answer: int = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n-    println!(\"{:?}\", answer);\n+    //~^ ERROR binary operation `+` cannot be applied to type `Box<int>`\n+    println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "91eb20d19ed9385a34c32961d2e9f45b6b622f22", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-gc-as-mut.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-gc-as-mut.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-struct A;\n-\n-impl A {\n-    fn foo(&mut self) {\n-    }\n-}\n-\n-pub fn main() {\n-    let a = box(GC) A;\n-    a.foo();\n-    //~^ ERROR cannot borrow immutable dereference of `Gc` `*a` as mutable\n-}"}, {"sha": "a8a79056fb13c21963262cc6115f3c105861e98d", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Verify that managed pointers scope is treated like owned pointers.\n-// regression test for #11586\n-\n-\n-use std::gc::{GC, Gc};\n-\n-fn foo(x: &Gc<int>) -> &int {\n-    match x {\n-        &ref y => {\n-            &**y // Do not expect an error here\n-        }\n-    }\n-}\n-\n-fn bar() {\n-    let a = 3i;\n-    let mut y = &a;\n-    if true {\n-        let x = box(GC) 3i;\n-        y = &*x; //~ ERROR `*x` does not live long enough\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "ad1ac3cc15ee344a3ea20cff86a6fe7bca275a4d", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box(GC) F {f: box 3};\n-    borrow(&*x.f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) F {f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "ec52f0588363c73ba40fa9fdf83ae6f536d74d12", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box box(GC) F{f: box 3};\n-    borrow(&*x.f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE  borrow occurs due to use of `x` in closure\n-        *x = box(GC) F{f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "5aff482a32320fb4f04c427351c1af6e4eb47631", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-pub fn main() {\n-    let mut x = box(GC) 3;\n-    borrow(&*x, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) 22;\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "6c3c340b97a0a5e190a535dced91b2434f455830", "filename": "src/test/compile-fail/borrowck-preserve-cond-box.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-cond-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn testfn(cond: bool) {\n-    let mut x = box(GC) 3i;\n-    let mut y = box(GC) 4i;\n-\n-    // borrow x and y\n-    let r_x = &*x;\n-    let r_y = &*y;\n-    let mut r = r_x;\n-    let mut exp = 3;\n-\n-    if cond {\n-        r = r_y;\n-        exp = 4;\n-    }\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-\n-    x = box(GC) 5i; //~ERROR cannot assign to `x` because it is borrowed\n-    y = box(GC) 6i; //~ERROR cannot assign to `y` because it is borrowed\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-    assert_eq!(x, box(GC) 5i);\n-    assert_eq!(y, box(GC) 6i);\n-}\n-\n-pub fn main() {\n-    testfn(true);\n-    testfn(false);\n-}"}, {"sha": "2ad042c69c3bb72e7b988ac10a2e7fec69eb8916", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-\n-use std::gc::GC;\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: Box<int> }\n-\n-pub fn main() {\n-    let mut x = box(GC) F {f: box 3};\n-    borrow(&*(*x).f, |b_x| {\n-    //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);\n-        //~^ NOTE borrow occurs due to use of `x` in closure\n-        x = box(GC) F {f: box 4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *const int != &(*b_x) as *const int);\n-    })\n-}"}, {"sha": "29ee79b0079c32839a36fa083c3d3cf4a287de2e", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(x: T) -> Gc<T> {\n-    box(GC) x  //~ ERROR the parameter type `T` may not live long enough\n-}\n-\n-fn g<T:'static>(x: T) -> Gc<T> {\n-    box(GC) x  // ok\n-}\n-\n-fn main() {}"}, {"sha": "e29be22ca9acc1494cfe3dae5ed86ea28f7fc473", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,7 +11,6 @@\n // Verifies all possible restrictions for static items values.\n \n use std::kinds::marker;\n-use std::gc::{Gc, GC};\n \n struct WithDtor;\n \n@@ -124,9 +123,6 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) =\n static mut STATIC17: SafeEnum = Variant1;\n //~^ ERROR mutable static items are not allowed to have destructors\n \n-static STATIC18: Gc<SafeStruct> = box(GC) SafeStruct{field1: Variant1, field2: Variant2(0)};\n-//~^ ERROR static items are not allowed to have custom pointers\n-\n static STATIC19: Box<int> = box 3;\n //~^ ERROR static items are not allowed to have custom pointers\n "}, {"sha": "d77c552be034c60850fe070e74c322782773eb28", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Testing that we can't store a reference it task-local storage\n+// Testing that we can't store a reference in task-local storage\n \n-use std::gc::{GC, Gc};\n-\n-local_data_key!(key: Gc<&int>)\n+local_data_key!(key: Box<&int>)\n //~^ ERROR missing lifetime specifier\n \n fn main() {}"}, {"sha": "8cbbfb7b83a55bd1e7abd8d14b2c266fc36c631b", "filename": "src/test/compile-fail/issue-14915.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::{GC,Gc};\n-\n fn main() {\n     let x: Box<int> = box 0;\n-    let y: Gc<int> = box (GC) 0;\n \n     println!(\"{}\", x + 1); //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n-    println!(\"{}\", y + 1); //~ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n }"}, {"sha": "30cf7ee7d8888267f46239842a08331fb9193bbe", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,17 +9,14 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-struct t { //~ ERROR this type cannot be instantiated\n-  x: x,\n+struct S { //~ ERROR this type cannot be instantiated\n+  x: X,\n   to_str: (),\n }\n \n-struct x(Gc<t>); //~ ERROR this type cannot be instantiated\n+struct X(Box<S>); //~ ERROR this type cannot be instantiated\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "cccf730095bdfad0ba5ad1a0902c717d934322bd", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::gc::Gc;\n-\n-struct P { child: Option<Gc<P>> }\n+struct P { child: Option<Box<P>> }\n trait PTrait {\n-   fn getChildOption(&self) -> Option<Gc<P>>;\n+   fn getChildOption(&self) -> Option<Box<P>>;\n }\n \n impl PTrait for P {\n-   fn getChildOption(&self) -> Option<Gc<P>> {\n-       static childVal: Gc<P> = self.child.get();\n+   fn getChildOption(&self) -> Option<Box<P>> {\n+       static childVal: Box<P> = self.child.get();\n        //~^ ERROR attempt to use a non-constant value in a constant\n        fail!();\n    }"}, {"sha": "73d42aa0de1ad0871493fbb333aa0b558d99e3dd", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: int\n@@ -29,11 +27,8 @@ fn main() {\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     let _woohoo = (box my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n-    let _woohoo = (box(GC) my_struct).priv_field;\n-    //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     (box my_struct).happyfun();            //~ ERROR method `happyfun` is private\n-    (box(GC) my_struct).happyfun();               //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "c6869c44057f924885e18f2572723d5c7cfe1a52", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::gc::Gc;\n-\n struct BarStruct;\n \n impl<'a> BarStruct {\n-    fn foo(&'a mut self) -> Gc<BarStruct> { self }\n-    //~^ ERROR: error: mismatched types: expected `Gc<BarStruct>`, found `&'a mut BarStruct\n+    fn foo(&'a mut self) -> Box<BarStruct> { self }\n+    //~^ ERROR: error: mismatched types: expected `Box<BarStruct>`, found `&'a mut BarStruct\n }\n \n fn main() {}"}, {"sha": "e29b8bc04d80e1a01fd0becdc406587668b073bc", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,10 +10,9 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n // Regresion test for issue 7364\n-static managed: Gc<RefCell<int>> = box(GC) RefCell::new(0);\n+static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR static items are not allowed to have custom pointers\n \n fn main() { }"}, {"sha": "499144698fb817296d0a5d85203a406cde678c7f", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -12,7 +12,6 @@\n \n \n use std::rc::Rc;\n-use std::gc::Gc;\n \n fn assert_copy<T:Copy>() { }\n trait Dummy { }\n@@ -76,8 +75,7 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     // structs containing non-POD are not ok\n     assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n-    // managed or ref counted types are not ok\n-    assert_copy::<Gc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n+    // ref counted types are not ok\n     assert_copy::<Rc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n }\n "}, {"sha": "26b0c5503e32fac47361f26ddb7b9f0251d77023", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n+use std::rc::Rc;\n \n struct Foo {\n-    f: Gc<int>,\n+    f: Rc<int>,\n }\n \n impl Drop for Foo {"}, {"sha": "6ca3f0174bb7449c524cd393d06c371074110f44", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n-fn foo(_x: Gc<uint>) {}\n+fn foo(_x: Rc<uint>) {}\n \n fn main() {\n-    let x = box(GC) 3u;\n+    let x = Rc::new(3u);\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented"}, {"sha": "375969ffb5267067e9044b58d7125b97d456dc94", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![forbid(heap_memory)]\n-#![allow(dead_code)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Foo {\n-    x: Gc<int>, //~ ERROR type uses managed\n-}\n-\n-struct Bar { x: Box<int> } //~ ERROR type uses owned\n-\n-fn main() {\n-    let _x : Bar = Bar {x : box 10i}; //~ ERROR type uses owned\n-\n-    box(GC) 2i; //~ ERROR type uses managed\n-\n-    box 2i; //~ ERROR type uses owned\n-    fn g(_: Box<Clone>) {} //~ ERROR type uses owned\n-    proc() {}; //~ ERROR type uses owned\n-}"}, {"sha": "0a28242fb1b3a950fb15ef80f013ec3b39c39dc8", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![forbid(managed_heap_memory)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Foo {\n-    x: Gc<int> //~ ERROR type uses managed\n-}\n-\n-fn main() {\n-    let _x : Foo = Foo {x : box(GC) 10};\n-    //~^ ERROR type uses managed\n-}"}, {"sha": "602ffe2680b04a7c7b79e7263d05810c0bc7d573", "filename": "src/test/compile-fail/new-box-syntax-bad.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/* Any copyright is dedicated to the Public Domain.\n- * http://creativecommons.org/publicdomain/zero/1.0/ */\n-\n-// Tests that the new `box` syntax works with unique pointers and GC pointers.\n-\n-use std::gc::{Gc, GC};\n-use std::boxed::{Box, HEAP};\n-\n-pub fn main() {\n-    let x: Gc<int> = box(HEAP) 2;  //~ ERROR mismatched types\n-    let y: Gc<int> = box(HEAP)(1 + 2);  //~ ERROR mismatched types\n-    let z: Box<int> = box(GC)(4 + 5);   //~ ERROR mismatched types\n-}\n-"}, {"sha": "83dbd9ac1bf7282687c0575710d36425891508e3", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n use std::task;\n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n-struct Port<T>(Gc<T>);\n+#[deriving(Show)]\n+struct Port<T>(Rc<T>);\n \n fn main() {\n+    #[deriving(Show)]\n     struct foo {\n       _x: Port<()>,\n     }\n@@ -33,11 +33,11 @@ fn main() {\n         }\n     }\n \n-    let x = foo(Port(box(GC) ()));\n+    let x = foo(Port(Rc::new(())));\n \n     task::spawn(proc() {\n         let y = x;\n         //~^ ERROR `core::kinds::Send` is not implemented\n-        println!(\"{:?}\", y);\n+        println!(\"{}\", y);\n     });\n }"}, {"sha": "2765182225f96183a03ad52d0c6a98f3ec9eaf1c", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::GC;\n \n fn main() {\n     let f;\n     let g;\n     g = f;\n-    f = box(GC) g; //~ ERROR cyclic type of infinite size\n+    f = box g; //~ ERROR cyclic type of infinite size\n }"}, {"sha": "44318b36f4b8a1c82b0137fc749f698e28ba9ead", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn main() {\n     let f;\n-    f = box(GC) f; //~ ERROR cyclic type of infinite size\n+    f = box f; //~ ERROR cyclic type of infinite size\n }"}, {"sha": "0e8bb40e0ffee01357bae2610b948078587603a1", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-extern crate debug;\n-\n-use std::cell::Cell;\n-use std::gc::{Gc, GC};\n-\n-struct r {\n-  i: Gc<Cell<int>>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.i.set(self.i.get() + 1);\n-        }\n-    }\n-}\n-\n-fn r(i: Gc<Cell<int>>) -> r {\n-    r {\n-        i: i\n-    }\n-}\n-\n-struct A {\n-    y: r,\n-}\n-\n-fn main() {\n-    let i = box(GC) Cell::new(0);\n-    {\n-        // Can't do this copy\n-        let x = box box box A {y: r(i)};\n-        let _z = x.clone(); //~ ERROR not implemented\n-        println!(\"{:?}\", x);\n-    }\n-    println!(\"{:?}\", *i);\n-}"}, {"sha": "2c068052c541c0aa9a8055936d61a2fbccfa5e72", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test no-special rooting is used for managed boxes\n-\n-\n-use std::gc::GC;\n-\n-fn testfn(cond: bool) {\n-    let mut x = box(GC) 3i;\n-    let mut y = box(GC) 4i;\n-\n-    let mut a = &*x;\n-\n-    let mut exp = 3i;\n-    if cond {\n-        a = &*y;\n-\n-        exp = 4;\n-    }\n-\n-    x = box(GC) 5i; //~ERROR cannot assign to `x` because it is borrowed\n-    y = box(GC) 6i; //~ERROR cannot assign to `y` because it is borrowed\n-    assert_eq!(*a, exp);\n-    assert_eq!(x, box(GC) 5i);\n-    assert_eq!(y, box(GC) 6i);\n-}\n-\n-pub fn main() {}"}, {"sha": "b710578969b0d8bf6ed1f68585633c36c48174d4", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct point {\n     x: int,\n     y: int,\n@@ -20,7 +18,7 @@ fn x_coord<'r>(p: &'r point) -> &'r int {\n     return &p.x;\n }\n \n-fn foo<'a>(p: Gc<point>) -> &'a int {\n+fn foo<'a>(p: Box<point>) -> &'a int {\n     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;"}, {"sha": "cf1fa2cfc4c2cbd8986f850bf48f8d06becf6086", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n fn borrow<T>(x: &T) -> &T {x}\n \n-fn foo(cond: || -> bool, make_box: || -> Gc<int>) {\n+fn foo(cond: || -> bool, make_box: || -> Box<int>) {\n     let mut y: &int;\n     loop {\n         let x = make_box();"}, {"sha": "f93907f5e5cb00497d4a6c17d2b9850bb664e1df", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -12,27 +12,25 @@\n // Check that we correctly infer that b and c must be region\n // parameterized because they reference a which requires a region.\n \n-use std::gc::Gc;\n-\n type a<'a> = &'a int;\n-type b<'a> = Gc<a<'a>>;\n+type b<'a> = Box<a<'a>>;\n \n struct c<'a> {\n-    f: Gc<b<'a>>\n+    f: Box<b<'a>>\n }\n \n trait set_f<'a> {\n-    fn set_f_ok(&mut self, b: Gc<b<'a>>);\n-    fn set_f_bad(&mut self, b: Gc<b>);\n+    fn set_f_ok(&mut self, b: Box<b<'a>>);\n+    fn set_f_bad(&mut self, b: Box<b>);\n }\n \n impl<'a> set_f<'a> for c<'a> {\n-    fn set_f_ok(&mut self, b: Gc<b<'a>>) {\n+    fn set_f_ok(&mut self, b: Box<b<'a>>) {\n         self.f = b;\n     }\n \n-    fn set_f_bad(&mut self, b: Gc<b>) {\n-        self.f = b; //~ ERROR mismatched types: expected `Gc<Gc<&'a int>>`, found `Gc<Gc<&int>>`\n+    fn set_f_bad(&mut self, b: Box<b>) {\n+        self.f = b; //~ ERROR mismatched types: expected `Box<Box<&'a int>>`, found `Box<Box<&int>>`\n     }\n }\n "}, {"sha": "1e5a5ecc08e0842946d8d255af1f5d6c6d51d768", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box(GC) 3i;\n+    let x = box 3i;\n     f(x);\n     let x = &3i; //~ ERROR borrowed value does not live long enough\n     f(x);"}, {"sha": "2c3d48e9bf735795db5ea8af67e8e67a7b72343f", "filename": "src/test/compile-fail/struct-field-assignability.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,13 +11,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n struct Foo<'a> {\n     x: &'a int\n }\n \n pub fn main() {\n-    let f = Foo { x: &*(box(GC) 3) }; //~ ERROR borrowed value does not live long enough\n+    let f = Foo { x: &*(box 3) }; //~ ERROR borrowed value does not live long enough\n     assert_eq!(*f.x, 3);\n }"}, {"sha": "53ebe1f9b5b64614e0c56ebdf5d6c1ee61099209", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,18 +9,16 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct foo {\n     a: int,\n     b: int,\n }\n \n-type bar = Gc<foo>;\n+type bar = Box<foo>;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo, found Gc-ptr)\n+    want_foo(b); //~ ERROR (expected struct foo, found box)\n }\n \n fn main() {}"}, {"sha": "73224c7b45cec051d46695e80625460d40e734be", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n trait Mumbo {\n-    fn jumbo(&self, x: Gc<uint>) -> uint;\n+    fn jumbo(&self, x: &uint) -> uint;\n }\n \n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n-    unsafe fn jumbo(&self, x: Gc<uint>) { *self + *x; }\n+    unsafe fn jumbo(&self, x: &uint) { *self + *x; }\n     //~^ ERROR expected normal fn, found unsafe fn\n }\n "}, {"sha": "4c2805bf4bd0c4d6c594d09ac8cc45a570e5599f", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n+use std::rc::Rc;\n \n fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box box(GC) 100i;\n+    let i = box Rc::new(100i);\n     f(i); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "79f29c6b359d63629c9184805d7da9186c4695b4", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,16 +10,15 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct r {\n-  i: Gc<Cell<int>>,\n+#[deriving(Show)]\n+struct r<'a> {\n+  i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         unsafe {\n             self.i.set(self.i.get() + 1);\n@@ -31,13 +30,13 @@ fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n }\n \n fn main() {\n-    let i1 = box(GC) Cell::new(0);\n-    let i2 = box(GC) Cell::new(1);\n+    let i1 = &Cell::new(0);\n+    let i2 = &Cell::new(1);\n     let r1 = vec!(box r { i: i1 });\n     let r2 = vec!(box r { i: i2 });\n     f(r1.clone(), r2.clone());\n     //~^ ERROR the trait `core::clone::Clone` is not implemented\n     //~^^ ERROR the trait `core::clone::Clone` is not implemented\n-    println!(\"{:?}\", (r2, i1.get()));\n-    println!(\"{:?}\", (r1, i2.get()));\n+    println!(\"{}\", (r2, i1.get()));\n+    println!(\"{}\", (r1, i2.get()));\n }"}, {"sha": "102cb636550dba42336e365e83559141ddaae89a", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -12,14 +12,14 @@\n // Test that a class with an unsendable field can't be\n // sent\n \n-use std::gc::{Gc, GC};\n+use std::rc::Rc;\n \n struct foo {\n   i: int,\n-  j: Gc<String>,\n+  j: Rc<String>,\n }\n \n-fn foo(i:int, j: Gc<String>) -> foo {\n+fn foo(i:int, j: Rc<String>) -> foo {\n     foo {\n         i: i,\n         j: j\n@@ -29,5 +29,5 @@ fn foo(i:int, j: Gc<String>) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n-  tx.send(foo(42, box(GC) (cat))); //~ ERROR `core::kinds::Send` is not implemented\n+  tx.send(foo(42, Rc::new(cat))); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "a2b8c54c3801d4e5ea618cfeaebfdd4fe8e100b0", "filename": "src/test/debuginfo/borrowed-managed-basic.rs", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,166 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n-// its numerical value.\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-// gdb-command:print *bool_ref\n-// gdb-check:$1 = true\n-\n-// gdb-command:print *int_ref\n-// gdb-check:$2 = -1\n-\n-// gdb-command:print *char_ref\n-// gdb-check:$3 = 97\n-\n-// gdb-command:print/d *i8_ref\n-// gdb-check:$4 = 68\n-\n-// gdb-command:print *i16_ref\n-// gdb-check:$5 = -16\n-\n-// gdb-command:print *i32_ref\n-// gdb-check:$6 = -32\n-\n-// gdb-command:print *i64_ref\n-// gdb-check:$7 = -64\n-\n-// gdb-command:print *uint_ref\n-// gdb-check:$8 = 1\n-\n-// gdb-command:print/d *u8_ref\n-// gdb-check:$9 = 100\n-\n-// gdb-command:print *u16_ref\n-// gdb-check:$10 = 16\n-\n-// gdb-command:print *u32_ref\n-// gdb-check:$11 = 32\n-\n-// gdb-command:print *u64_ref\n-// gdb-check:$12 = 64\n-\n-// gdb-command:print *f32_ref\n-// gdb-check:$13 = 2.5\n-\n-// gdb-command:print *f64_ref\n-// gdb-check:$14 = 3.5\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:type format add -f decimal char\n-// lldb-command:type format add -f decimal 'unsigned char'\n-// lldb-command:run\n-\n-// lldb-command:print *bool_ref\n-// lldb-check:[...]$0 = true\n-\n-// lldb-command:print *int_ref\n-// lldb-check:[...]$1 = -1\n-\n-// LLDB can't handle 32bit chars yet\n-// d ebugger:print *char_ref\n-// c heck:[...]$x = 97\n-\n-// lldb-command:print *i8_ref\n-// lldb-check:[...]$2 = 68\n-\n-// lldb-command:print *i16_ref\n-// lldb-check:[...]$3 = -16\n-\n-// lldb-command:print *i32_ref\n-// lldb-check:[...]$4 = -32\n-\n-// lldb-command:print *i64_ref\n-// lldb-check:[...]$5 = -64\n-\n-// lldb-command:print *uint_ref\n-// lldb-check:[...]$6 = 1\n-\n-// lldb-command:print *u8_ref\n-// lldb-check:[...]$7 = 100\n-\n-// lldb-command:print *u16_ref\n-// lldb-check:[...]$8 = 16\n-\n-// lldb-command:print *u32_ref\n-// lldb-check:[...]$9 = 32\n-\n-// lldb-command:print *u64_ref\n-// lldb-check:[...]$10 = 64\n-\n-// lldb-command:print *f32_ref\n-// lldb-check:[...]$11 = 2.5\n-\n-// lldb-command:print *f64_ref\n-// lldb-check:[...]$12 = 3.5\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-    let bool_box: Gc<bool> = box(GC) true;\n-    let bool_ref: &bool = &*bool_box;\n-\n-    let int_box: Gc<int> = box(GC) -1;\n-    let int_ref: &int = &*int_box;\n-\n-    let char_box: Gc<char> = box(GC) 'a';\n-    let char_ref: &char = &*char_box;\n-\n-    let i8_box: Gc<i8> = box(GC) 68;\n-    let i8_ref: &i8 = &*i8_box;\n-\n-    let i16_box: Gc<i16> = box(GC) -16;\n-    let i16_ref: &i16 = &*i16_box;\n-\n-    let i32_box: Gc<i32> = box(GC) -32;\n-    let i32_ref: &i32 = &*i32_box;\n-\n-    let i64_box: Gc<i64> = box(GC) -64;\n-    let i64_ref: &i64 = &*i64_box;\n-\n-    let uint_box: Gc<uint> = box(GC) 1;\n-    let uint_ref: &uint = &*uint_box;\n-\n-    let u8_box: Gc<u8> = box(GC) 100;\n-    let u8_ref: &u8 = &*u8_box;\n-\n-    let u16_box: Gc<u16> = box(GC) 16;\n-    let u16_ref: &u16 = &*u16_box;\n-\n-    let u32_box: Gc<u32> = box(GC) 32;\n-    let u32_ref: &u32 = &*u32_box;\n-\n-    let u64_box: Gc<u64> = box(GC) 64;\n-    let u64_ref: &u64 = &*u64_box;\n-\n-    let f32_box: Gc<f32> = box(GC) 2.5;\n-    let f32_ref: &f32 = &*f32_box;\n-\n-    let f64_box: Gc<f64> = box(GC) 3.5;\n-    let f64_ref: &f64 = &*f64_box;\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "8b9c790bbbf5875dc1012fa77763a91e29b55549", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -29,15 +29,6 @@\n // gdb-command:print *ref_to_unnamed\n // gdb-check:$4 = {x = 11, y = 24.5}\n \n-// gdb-command:print *managed_val_ref\n-// gdb-check:$5 = {x = 12, y = 25.5}\n-\n-// gdb-command:print *managed_val_interior_ref_1\n-// gdb-check:$6 = 12\n-\n-// gdb-command:print *managed_val_interior_ref_2\n-// gdb-check:$7 = 25.5\n-\n // gdb-command:print *unique_val_ref\n // gdb-check:$8 = {x = 13, y = 26.5}\n \n@@ -64,15 +55,6 @@\n // lldb-command:print *ref_to_unnamed\n // lldb-check:[...]$3 = SomeStruct { x: 11, y: 24.5 }\n \n-// lldb-command:print *managed_val_ref\n-// lldb-check:[...]$4 = SomeStruct { x: 12, y: 25.5 }\n-\n-// lldb-command:print *managed_val_interior_ref_1\n-// lldb-check:[...]$5 = 12\n-\n-// lldb-command:print *managed_val_interior_ref_2\n-// lldb-check:[...]$6 = 25.5\n-\n // lldb-command:print *unique_val_ref\n // lldb-check:[...]$7 = SomeStruct { x: 13, y: 26.5 }\n \n@@ -84,8 +66,6 @@\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct SomeStruct {\n     x: int,\n     y: f64\n@@ -98,11 +78,6 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let managed_val = box(GC) SomeStruct { x: 12, y: 25.5 };\n-    let managed_val_ref: &SomeStruct = &*managed_val;\n-    let managed_val_interior_ref_1: &int = &managed_val.x;\n-    let managed_val_interior_ref_2: &f64 = &managed_val.y;\n-\n     let unique_val = box SomeStruct { x: 13, y: 26.5 };\n     let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &int = &unique_val.x;"}, {"sha": "2c78d14a86c755abc65261f7e3f036f3ef73a38e", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -25,9 +25,6 @@\n // gdb-command:print *ref_to_unnamed\n // gdb-check:$2 = {-15, -20}\n \n-// gdb-command:print *managed_val_ref\n-// gdb-check:$3 = {-16, -21}\n-\n // gdb-command:print *unique_val_ref\n // gdb-check:$4 = {-17, -22}\n \n@@ -42,25 +39,17 @@\n // lldb-command:print *ref_to_unnamed\n // lldb-check:[...]$1 = (-15, -20)\n \n-// lldb-command:print *managed_val_ref\n-// lldb-check:[...]$2 = (-16, -21)\n-\n // lldb-command:print *unique_val_ref\n // lldb-check:[...]$3 = (-17, -22)\n \n \n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);\n     let stack_val_ref: &(i16, f32) = &stack_val;\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n-    let managed_val: Gc<(i16, f32)> = box(GC) (-16, -21f32);\n-    let managed_val_ref: &(i16, f32) = &*managed_val;\n-\n     let unique_val: Box<(i16, f32)> = box() (-17, -22f32);\n     let unique_val_ref: &(i16, f32) = &*unique_val;\n "}, {"sha": "c459b9be3d09ca08660e2435b8ad5a449d2c77d7", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -22,10 +22,6 @@\n // gdb-check:$1 = 1\n // gdb-command:print *b\n // gdb-check:$2 = {2, 3.5}\n-// gdb-command:print c->val\n-// gdb-check:$3 = 4\n-// gdb-command:print d->val\n-// gdb-check:$4 = false\n \n \n // === LLDB TESTS ==================================================================================\n@@ -35,20 +31,12 @@\n // lldb-check:[...]$0 = 1\n // lldb-command:print *b\n // lldb-check:[...]$1 = (2, 3.5)\n-// lldb-command:print c->val\n-// lldb-check:[...]$2 = 4\n-// lldb-command:print d->val\n-// lldb-check:[...]$3 = false\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n fn main() {\n     let a = box 1i;\n     let b = box() (2i, 3.5f64);\n-    let c = box(GC) 4i;\n-    let d = box(GC) false;\n \n     zzz(); // #break\n }"}, {"sha": "a22b9fdea5c8f273a13ab140f174b37283c9e9bd", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -21,15 +21,9 @@\n // gdb-command:print *unique\n // gdb-check:$1 = {x = 99, y = 999, z = 9999, w = 99999}\n \n-// gdb-command:print managed->val\n-// gdb-check:$2 = {x = 88, y = 888, z = 8888, w = 88888}\n-\n // gdb-command:print *unique_dtor\n // gdb-check:$3 = {x = 77, y = 777, z = 7777, w = 77777}\n \n-// gdb-command:print managed_dtor->val\n-// gdb-check:$4 = {x = 33, y = 333, z = 3333, w = 33333}\n-\n \n // === LLDB TESTS ==================================================================================\n \n@@ -38,19 +32,11 @@\n // lldb-command:print *unique\n // lldb-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n \n-// lldb-command:print managed->val\n-// lldb-check:[...]$1 = StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 }\n-\n // lldb-command:print *unique_dtor\n // lldb-check:[...]$2 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n-// lldb-command:print managed_dtor->val\n-// lldb-check:[...]$3 = StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 }\n-\n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct StructWithSomePadding {\n     x: i16,\n     y: i32,\n@@ -72,11 +58,8 @@ impl Drop for StructWithDestructor {\n fn main() {\n \n     let unique = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n-    let managed = box(GC) StructWithSomePadding { x: 88, y: 888, z: 8888, w: 88888 };\n \n     let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n-    let managed_dtor = box(GC) StructWithDestructor { x: 33, y: 333, z: 3333, w: 33333 };\n-\n     zzz(); // #break\n }\n "}, {"sha": "11df00ee4fe2683f3f7bb8376c9dd6a14876499d", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -33,11 +33,6 @@\n // gdb-check:$3 = {4444.5, 5555, 6666, 7777.5}\n // gdb-command:continue\n \n-// gdb-command:finish\n-// gdb-command:print self->val\n-// gdb-check:$4 = 8888\n-// gdb-command:continue\n-\n \n // === LLDB TESTS ==================================================================================\n \n@@ -55,12 +50,6 @@\n // lldb-check:[...]$2 = (4444.5, 5555, 6666, 7777.5)\n // lldb-command:continue\n \n-// lldb-command:print self->val\n-// lldb-check:[...]$3 = 8888\n-// lldb-command:continue\n-\n-use std::gc::{Gc, GC};\n-\n trait Trait {\n     fn method(self) -> Self;\n }\n@@ -91,18 +80,10 @@ impl Trait for (f64, int, int, f64) {\n     }\n }\n \n-impl Trait for Gc<int> {\n-    fn method(self) -> Gc<int> {\n-        zzz(); // #break\n-        self\n-    }\n-}\n-\n fn main() {\n     let _ = (1111 as int).method();\n     let _ = Struct { x: 2222, y: 3333 }.method();\n     let _ = (4444.5, 5555, 6666, 7777.5).method();\n-    let _ = (box(GC) 8888).method();\n }\n \n fn zzz() { () }"}, {"sha": "e5da4d2cdb16f0ffc48524947f66c462c1dd02b9", "filename": "src/test/debuginfo/managed-enum.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-enum.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,85 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print the_a->val\n-// gdb-check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n-\n-// gdb-command:print the_b->val\n-// gdb-check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n-\n-// gdb-command:print univariant->val\n-// gdb-check:$3 = {{-9747455}}\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print the_a->val\n-// lldb-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n-\n-// lldb-command:print the_b->val\n-// lldb-check:[...]$1 = TheB(0, 286331153, 286331153)\n-\n-// lldb-command:print univariant->val\n-// lldb-check:[...]$2 = TheOnlyCase(-9747455)\n-\n-#![allow(unused_variable)]\n-#![feature(struct_variant)]\n-\n-use std::gc::GC;\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum ABC {\n-    TheA { x: i64, y: i64 },\n-    TheB (i64, i32, i32),\n-}\n-\n-// This is a special case since it does not have the implicit discriminant field.\n-enum Univariant {\n-    TheOnlyCase(i64)\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianess trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let the_a = box(GC) TheA { x: 0, y: 8970181431921507452 };\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let the_b = box(GC) TheB (0, 286331153, 286331153);\n-\n-    let univariant = box(GC) TheOnlyCase(-9747455);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "69f3938ecee3cb6eb5583d1e1220ed8b44075748", "filename": "src/test/debuginfo/managed-pointer-within-unique-vec.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique-vec.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print unique.ptr[0]->val\n-// gdb-check:$1 = 10\n-\n-// gdb-command:print unique.ptr[1]->val\n-// gdb-check:$2 = 11\n-\n-// gdb-command:print unique.ptr[2]->val\n-// gdb-check:$3 = 12\n-\n-// gdb-command:print unique.ptr[3]->val\n-// gdb-check:$4 = 13\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print unique.ptr[0]->val\n-// lldb-check:[...]$0 = 10\n-\n-// lldb-command:print unique.ptr[1]->val\n-// lldb-check:[...]$1 = 11\n-\n-// lldb-command:print unique.ptr[2]->val\n-// lldb-check:[...]$2 = 12\n-\n-// lldb-command:print unique.ptr[3]->val\n-// lldb-check:[...]$3 = 13\n-\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-\n-    let unique: Vec<Gc<i64>> = vec!(box(GC) 10, box(GC) 11, box(GC) 12, box(GC) 13);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "2690efb8f8588f6d2004e001175385dda4386791", "filename": "src/test/debuginfo/managed-pointer-within-unique.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,62 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:set print pretty off\n-// gdb-command:rbreak zzz\n-// gdb-command:run\n-// gdb-command:finish\n-\n-// gdb-command:print *ordinary_unique\n-// gdb-check:$1 = {-1, -2}\n-\n-// gdb-command:print managed_within_unique->x\n-// gdb-check:$2 = -3\n-\n-// gdb-command:print managed_within_unique->y->val\n-// gdb-check:$3 = -4\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print *ordinary_unique\n-// lldb-check:[...]$0 = (-1, -2)\n-\n-// lldb-command:print managed_within_unique->x\n-// lldb-check:[...]$1 = -3\n-\n-// lldb-command:print managed_within_unique->y->val\n-// lldb-check:[...]$2 = -4\n-\n-#![allow(unused_variable)]\n-\n-use std::gc::{GC, Gc};\n-\n-struct ContainsManaged {\n-    x: int,\n-    y: Gc<int>,\n-}\n-\n-fn main() {\n-    let ordinary_unique = box() (-1i, -2i);\n-\n-    let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4i };\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "412bdfaaf15aca8dd466929d5bcd150da51f25c6", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -29,11 +29,6 @@\n // gdb-command:print unique_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n // gdb-check:$4 = 3\n \n-// gdb-command:print box_unique->val.value\n-// gdb-check:$5 = 4\n-// gdb-command:print box_unique->val.next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdb-check:$6 = 5\n-\n // gdb-command:print vec_unique[0].value\n // gdb-check:$7 = 6.5\n // gdb-command:print vec_unique[0].next.RUST$ENCODED$ENUM$0$Empty.val->value\n@@ -44,32 +39,6 @@\n // gdb-command:print borrowed_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n // gdb-check:$10 = 9.5\n \n-// MANAGED\n-// gdb-command:print stack_managed.value\n-// gdb-check:$11 = 10\n-// gdb-command:print stack_managed.next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$12 = 11\n-\n-// gdb-command:print unique_managed->value\n-// gdb-check:$13 = 12\n-// gdb-command:print unique_managed->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$14 = 13\n-\n-// gdb-command:print box_managed.val->value\n-// gdb-check:$15 = 14\n-// gdb-command:print box_managed->val->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$16 = 15\n-\n-// gdb-command:print vec_managed[0].value\n-// gdb-check:$17 = 16.5\n-// gdb-command:print vec_managed[0].next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$18 = 17.5\n-\n-// gdb-command:print borrowed_managed->value\n-// gdb-check:$19 = 18.5\n-// gdb-command:print borrowed_managed->next.RUST$ENCODED$ENUM$0$Empty.val->val.value\n-// gdb-check:$20 = 19.5\n-\n // LONG CYCLE\n // gdb-command:print long_cycle1.value\n // gdb-check:$21 = 20\n@@ -106,8 +75,6 @@\n #![allow(unused_variable)]\n #![feature(struct_variant)]\n \n-use std::gc::{Gc, GC};\n-\n enum Opt<T> {\n     Empty,\n     Val { val: T }\n@@ -118,11 +85,6 @@ struct UniqueNode<T> {\n     value: T\n }\n \n-struct ManagedNode<T> {\n-    next: Opt<Gc<ManagedNode<T>>>,\n-    value: T\n-}\n-\n struct LongCycle1<T> {\n     next: Box<LongCycle2<T>>,\n     value: T,\n@@ -184,16 +146,6 @@ fn main() {\n         value: 2,\n     };\n \n-    let box_unique: Gc<UniqueNode<u64>> = box(GC) UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 5,\n-            }\n-        },\n-        value: 4,\n-    };\n-\n     let vec_unique: [UniqueNode<f32>, ..1] = [UniqueNode {\n         next: Val {\n             val: box UniqueNode {\n@@ -214,56 +166,6 @@ fn main() {\n         value: 8.5,\n     };\n \n-    let stack_managed: ManagedNode<u16> = ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 11,\n-            }\n-        },\n-        value: 10,\n-    };\n-\n-    let unique_managed: Box<ManagedNode<u32>> = box ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 13,\n-            }\n-        },\n-        value: 12,\n-    };\n-\n-    let box_managed: Gc<ManagedNode<u64>> = box(GC) ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 15,\n-            }\n-        },\n-        value: 14,\n-    };\n-\n-    let vec_managed: [ManagedNode<f32>, ..1] = [ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 17.5,\n-            }\n-        },\n-        value: 16.5,\n-    }];\n-\n-    let borrowed_managed: &ManagedNode<f64> = &ManagedNode {\n-        next: Val {\n-            val: box(GC) ManagedNode {\n-                next: Empty,\n-                value: 19.5,\n-            }\n-        },\n-        value: 18.5,\n-    };\n-\n     // LONG CYCLE\n     let long_cycle1: LongCycle1<u16> = LongCycle1 {\n         next: box LongCycle2 {"}, {"sha": "89415df3588fa7878c14f4a5c322511ddbd8db19", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -28,8 +28,6 @@\n // gdb-check:$4 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$6 = 7\n // gdb-command:print closure_local\n // gdb-check:$7 = 8\n // gdb-command:continue\n@@ -45,8 +43,6 @@\n // gdb-check:$11 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$12 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$13 = 7\n // gdb-command:print closure_local\n // gdb-check:$14 = 8\n // gdb-command:continue\n@@ -66,8 +62,6 @@\n // lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$5 = 7\n // lldb-command:print closure_local\n // lldb-check:[...]$6 = 8\n // lldb-command:continue\n@@ -82,16 +76,12 @@\n // lldb-check:[...]$10 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$11 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$12 = 7\n // lldb-command:print closure_local\n // lldb-check:[...]$13 = 8\n // lldb-command:continue\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct Struct {\n     a: int,\n     b: f64,\n@@ -110,14 +100,13 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = box(GC) 7;\n \n     let closure = || {\n         let closure_local = 8;\n \n         let nested_closure = || {\n             zzz(); // #break\n-            variable = constant + a_struct.a + struct_ref.a + *owned + *managed + closure_local;\n+            variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };\n \n         zzz(); // #break"}, {"sha": "8ea407fc54470ab0b51a757c43b4d97be56997d2", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -28,8 +28,6 @@\n // gdb-check:$4 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n-// gdb-command:print managed->val\n-// gdb-check:$6 = 7\n \n \n // === LLDB TESTS ==================================================================================\n@@ -46,13 +44,9 @@\n // lldb-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n-// lldb-command:print managed->val\n-// lldb-check:[...]$5 = 7\n \n #![allow(unused_variable)]\n \n-use std::gc::GC;\n-\n struct Struct {\n     a: int,\n     b: f64,\n@@ -71,11 +65,10 @@ fn main() {\n \n     let struct_ref = &a_struct;\n     let owned = box 6;\n-    let managed = box(GC) 7;\n \n     let closure = || {\n         zzz(); // #break\n-        variable = constant + a_struct.a + struct_ref.a + *owned + *managed;\n+        variable = constant + a_struct.a + struct_ref.a + *owned;\n     };\n \n     closure();"}, {"sha": "01fc70c1d2cc1cf9d08540a0e52db0f0b8075c46", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -14,34 +14,33 @@\n \n \n use std::cell::Cell;\n-use std::gc::GC;\n \n-fn test1() { let val = box(GC) 0i; { } *val; }\n+fn test1() { let val = &0i; { } *val; }\n \n-fn test2() -> int { let val = box(GC) 0i; { } *val }\n+fn test2() -> int { let val = &0i; { } *val }\n \n struct S { eax: int }\n \n fn test3() {\n-    let regs = box(GC) Cell::new(S {eax: 0});\n+    let regs = &Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }\n     regs.set(S {eax: 1});\n }\n \n-fn test4() -> bool { let regs = box(GC) true; if true { } *regs || false }\n+fn test4() -> bool { let regs = &true; if true { } *regs || false }\n \n fn test5() -> (int, int) { { } (0, 1) }\n \n fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n-    let regs = box(GC) 0i;\n+    let regs = &0i;\n     match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n-    let val = box(GC) 0i;\n+    let val = &0i;\n     match true {\n         true => { }\n         _    => { }\n@@ -54,12 +53,12 @@ fn test8() -> int {\n }\n \n fn test9() {\n-    let regs = box(GC) Cell::new(0i);\n+    let regs = &Cell::new(0i);\n     match true { true => { } _ => { } } regs.set(regs.get() + 1);\n }\n \n fn test10() -> int {\n-    let regs = box(GC) vec!(0i);\n+    let regs = vec!(0i);\n     match true { true => { } _ => { } }\n     *(*regs).get(0)\n }"}, {"sha": "5e1b7bb69bb2bf29ec81d6f57fa0065f99f62b0e", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,8 +11,6 @@\n \n // error-pattern:meep\n \n-use std::gc::{Gc, GC};\n+fn f(_a: int, _b: int, _c: Box<int>) { fail!(\"moop\"); }\n \n-fn f(_a: int, _b: int, _c: Gc<int>) { fail!(\"moop\"); }\n-\n-fn main() { f(1, fail!(\"meep\"), box(GC) 42); }\n+fn main() { f(1, fail!(\"meep\"), box 42); }"}, {"sha": "87de4d3d3f296c89e1c65b9d3b69f66f8d3d5302", "filename": "src/test/run-fail/issue-2272.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:explicit failure\n-// Issue #2272 - unwind this without leaking the unique pointer\n-\n-use std::gc::{Gc, GC};\n-\n-struct X { y: Y, a: Box<int> }\n-\n-struct Y { z: Gc<int> }\n-\n-fn main() {\n-    let _x = X {\n-        y: Y {\n-            z: box(GC) 0\n-        },\n-        a: box 0\n-    };\n-    fail!();\n-}"}, {"sha": "4947093d10cb8b38221eb0fb1031302ddc230496", "filename": "src/test/run-fail/unwind-assert.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    assert!(false);\n-}"}, {"sha": "7ed58be60720411f8867c93b6217a2ce1a2b100c", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:fail\n-\n-extern crate debug;\n-\n-use std::gc::{GC, Gc};\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let y = box 0i;\n-    let x: Gc<proc():Send> = box(GC) (proc() {\n-        println!(\"{:?}\", y.clone());\n-    });\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "ede8331173237903c4c7272c1a2cfc2414003b80", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::mem;\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-struct r {\n-  v: *const int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _v2: Box<int> = mem::transmute(self.v);\n-        }\n-    }\n-}\n-\n-fn r(v: *const int) -> r {\n-    r {\n-        v: v\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        let i1 = box 0i;\n-        let i1p = mem::transmute_copy(&i1);\n-        mem::forget(i1);\n-        let x = box(GC) r(i1p);\n-        failfn();\n-        println!(\"{:?}\", x);\n-    }\n-}"}, {"sha": "07a8f5d4cfad6d25f2f258f160170015349b5f4f", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) \"hi\".to_string();\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "9aa916a062e77e764596fc935e19484b8bbe0496", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) box box 0i;\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "7135742db34b8f6fdea4e773c6c32a6a262e35bf", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) box 0i;\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "e7d1476c2b6d830017ae7d5f68a485f3acb2618a", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-extern crate debug;\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let x = box(GC) vec!(0i, 1, 2, 3, 4, 5);\n-    failfn();\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "7d93ae5615688beb7c614160d7e3247701229517", "filename": "src/test/run-fail/unwind-box.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    box(GC) 0i;\n-    failfn();\n-}"}, {"sha": "1e19522871af87cfce204e7f15d84f567e90cc8d", "filename": "src/test/run-fail/unwind-fail.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    box(GC) 0i;\n-    fail!();\n-}"}, {"sha": "13ad5d2fae3dc627858849badaf0dbbe7003a689", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::Gc;\n-\n-fn f() -> Gc<int> { fail!(); }\n-\n-fn main() {\n-    let _a: Gc<int> = f();\n-}"}, {"sha": "7294b19ac9acc82911580bfe0410a91eb4a9a40a", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::Gc;\n-\n-fn main() {\n-    let _a: Gc<int> = {\n-        fail!();\n-    };\n-}"}, {"sha": "411b9a56a2f27ff80060036953b7b3f629440b9e", "filename": "src/test/run-fail/unwind-iter.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-#![allow(unreachable_code)]\n-#![allow(unused_variable)]\n-\n-use std::gc::GC;\n-\n-fn x(it: |int|) {\n-    fail!();\n-    it(0);\n-}\n-\n-fn main() {\n-    let a = box(GC) 0i;\n-    x(|_i| { } );\n-}"}, {"sha": "1a2492e0ac8971aa59224dfb6f16b4a5d4f64ad8", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{GC};\n-\n-fn x(it: |int|) {\n-    let _a = box(GC) 0i;\n-    it(1);\n-}\n-\n-fn main() {\n-    x(|_x| fail!() );\n-}"}, {"sha": "e96bc14905e9d69377fa94c087c789c61fbb2ac8", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn main() {\n-    let cheese = \"roquefort\".to_string();\n-    let carrots = box(GC) \"crunchy\".to_string();\n-\n-    let result: |Gc<String>, |String||: 'static = (|tasties, macerate| {\n-        macerate((*tasties).clone());\n-    });\n-    result(carrots, |food| {\n-        let mush = format!(\"{}{}\", food, cheese);\n-        let cheese = cheese.clone();\n-        let f: || = || {\n-            let _chew = format!(\"{}{}\", mush, cheese);\n-            fail!(\"so yummy\")\n-        };\n-        f();\n-    });\n-}"}, {"sha": "a6564a68e19a51f82bb91badee38ebab56f957ed", "filename": "src/test/run-fail/unwind-match.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Issue #945\n-// error-pattern:non-exhaustive match failure\n-\n-\n-use std::gc::GC;\n-\n-fn test_box() {\n-    box(GC) 0i;\n-}\n-fn test_str() {\n-  let res = match false { true => { \"happy\".to_string() },\n-     _ => fail!(\"non-exhaustive match failure\") };\n-  assert_eq!(res, \"happy\".to_string());\n-}\n-fn main() {\n-    test_box();\n-    test_str();\n-}"}, {"sha": "23ec6cd0300a6b20ea172ed616bc3ba17a3a2834", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_NEWRT=1\n-// error-pattern:fail\n-\n-\n-use std::vec;\n-use std::collections;\n-use std::gc::GC;\n-\n-fn main() {\n-    let _count = box(GC) 0u;\n-    let mut map = collections::HashMap::new();\n-    let mut arr = Vec::new();\n-    for _i in range(0u, 10u) {\n-        arr.push(box(GC) \"key stuff\".to_string());\n-        map.insert(arr.clone(),\n-                   arr.clone().append([box(GC) \"value stuff\".to_string()]));\n-        if arr.len() == 5 {\n-            fail!();\n-        }\n-    }\n-}"}, {"sha": "692bf713b405e8768f30595f33392527003d398b", "filename": "src/test/run-fail/unwind-move.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f(_a: Gc<int>) {\n-    fail!();\n-}\n-\n-fn main() {\n-    let a = box(GC) 0;\n-    f(a);\n-}"}, {"sha": "84b727ea20f9f1b22d4ff2f3a172cfcb3098819e", "filename": "src/test/run-fail/unwind-nested.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    {\n-        let _b = box(GC) 0i;\n-        {\n-            fail!();\n-        }\n-    }\n-}"}, {"sha": "366531b9127bc5c495c67ce58aa043c1587ad1fe", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = box(GC) f();\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "725b57af7df5fab428f314c6dd6c3373b7ca41fb", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = box f();\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "627fb3d028ed9f4d33b427795d8eae9a64a7f8bb", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() -> Vec<int> { fail!(); }\n-\n-// Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n-// have been to do with memory allocation patterns.\n-fn prime() {\n-    box(GC) 0i;\n-}\n-\n-fn partial() {\n-    let _x = vec!(vec!(0i), f(), vec!(0i));\n-}\n-\n-fn main() {\n-    prime();\n-    partial();\n-}"}, {"sha": "66fd044d64e7e459ad8d0f51b8df1925b39b48a2", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:squirrel\n-\n-use std::gc::GC;\n-\n-struct r {\n-    i: int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) { fail!(\"squirrel\") }\n-}\n-\n-fn r(i: int) -> r { r { i: i } }\n-\n-fn main() {\n-    box(GC) 0i;\n-    let _r = r(0);\n-}"}, {"sha": "add7fe3f0f35961208f825f310b3720238eb805d", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test leaks\n-// error-pattern:wombat\n-\n-use std::gc::GC;\n-\n-struct r {\n-    i: int,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) { fail!(\"wombat\") }\n-}\n-\n-fn r(i: int) -> r { r { i: i } }\n-\n-fn main() {\n-    box(GC) 0;\n-    let r = r(0);\n-    fail!();\n-}"}, {"sha": "9ec7c4a1eb326c8575f7cce82e979cf3e236b60f", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-// error-pattern:quux\n-\n-use std::gc::{Gc, GC};\n-\n-struct faily_box {\n-    i: Gc<int>\n-}\n-// What happens to the box pointer owned by this class?\n-\n-fn faily_box(i: Gc<int>) -> faily_box { faily_box { i: i } }\n-\n-#[unsafe_destructor]\n-impl Drop for faily_box {\n-    fn drop(&mut self) {\n-        fail!(\"quux\");\n-    }\n-}\n-\n-fn main() {\n-    faily_box(box(GC) 10);\n-}"}, {"sha": "1e1caac0004e2541c11498134749b872455aee04", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() {\n-    let _a = box(GC) 0i;\n-    fail!();\n-}\n-\n-fn g() {\n-    let _b = box(GC) 0i;\n-    f();\n-}\n-\n-fn main() {\n-    let _a = box(GC) 0i;\n-    g();\n-}"}, {"sha": "877e2beb703795c175e57eebc6183c6e9fa0f91f", "filename": "src/test/run-fail/unwind-tup.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::Gc;\n-\n-// error-pattern:fail\n-\n-fn fold_local() -> Gc<Vec<int>> {\n-    fail!();\n-}\n-\n-fn main() {\n-    let _lss = (fold_local(), 0i);\n-}"}, {"sha": "01536233ffe5f90cac38b3d26e4ce5819ddb4191", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// error-pattern:fail\n-\n-fn fold_local() -> Gc<Vec<int>> {\n-    box(GC) vec!(0,0,0,0,0,0)\n-}\n-\n-fn fold_remote() -> Gc<Vec<int>> {\n-    fail!();\n-}\n-\n-fn main() {\n-    let _lss = (fold_local(), fold_remote());\n-}"}, {"sha": "54321e98e734361d0ff17738976d3617f3655140", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-\n-use std::gc::GC;\n-\n-fn f() {\n-    fail!();\n-}\n-\n-fn main() {\n-    f();\n-    let _a = box(GC) 0i;\n-}"}, {"sha": "49a374f343c6fa27e2ad03b98c886d2463940bb6", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n #[deriving(PartialEq, Show)]\n struct Point { x : int }\n \n@@ -19,5 +17,4 @@ pub fn main() {\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n     assert_eq!(box Point{x:34},box Point{x:34});\n     assert_eq!(&Point{x:34},&Point{x:34});\n-    assert_eq!(box(GC) Point{x:34},box(GC) Point{x:34});\n }"}, {"sha": "cc4dd13cf61c9c715fa3c75e4b9775313ee87f75", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::{GC, Gc};\n-\n trait double {\n     fn double(self) -> uint;\n }\n@@ -19,11 +17,11 @@ impl double for uint {\n     fn double(self) -> uint { self }\n }\n \n-impl double for Gc<uint> {\n+impl double for Box<uint> {\n     fn double(self) -> uint { *self * 2u }\n }\n \n pub fn main() {\n-    let x = box(GC) 3u;\n+    let x = box 3u;\n     assert_eq!(x.double(), 6u);\n }"}, {"sha": "7f44bcdb50c1a328e57751b55a85a3c3bea24cb8", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n trait Foo {\n     fn foo(&self) -> String;\n }\n \n-impl<T:Foo> Foo for Gc<T> {\n+impl<T:Foo> Foo for Box<T> {\n     fn foo(&self) -> String {\n-        format!(\"box(GC) {}\", (**self).foo())\n+        format!(\"box {}\", (**self).foo())\n     }\n }\n \n@@ -28,6 +26,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box(GC) 3u;\n-    assert_eq!(x.foo(), \"box(GC) 3\".to_string());\n+    let x = box 3u;\n+    assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "3997c5d3d29b82e7ef051f873c7ae6752494b781", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,9 +10,6 @@\n \n // Binop corner cases\n \n-\n-use std::gc::GC;\n-\n fn test_nil() {\n     assert_eq!((), ());\n     assert!((!(() != ())));\n@@ -45,10 +42,6 @@ fn test_bool() {\n     assert_eq!(true ^ true, false);\n }\n \n-fn test_box() {\n-    assert_eq!(box(GC) 10i, box(GC) 10i);\n-}\n-\n fn test_ptr() {\n     unsafe {\n         let p1: *const u8 = ::std::mem::transmute(0u);\n@@ -98,7 +91,6 @@ fn test_class() {\n pub fn main() {\n     test_nil();\n     test_bool();\n-    test_box();\n     test_ptr();\n     test_class();\n }"}, {"sha": "8c4995e710097b24366935a4c40cebf718c771e4", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n fn borrow(x: &int, f: |x: &int|) {\n     f(x)\n }\n \n-fn test1(x: Gc<Box<int>>) {\n+fn test1(x: &Box<int>) {\n     borrow(&*(*x).clone(), |p| {\n         let x_a = &**x as *const int;\n         assert!((x_a as uint) != (p as *const int as uint));\n@@ -24,5 +22,5 @@ fn test1(x: Gc<Box<int>>) {\n }\n \n pub fn main() {\n-    test1(box(GC) box 22);\n+    test1(&box 22);\n }"}, {"sha": "525a93a4c83de0b86598e0214ed8ea21576c9d7e", "filename": "src/test/run-pass/borrowck-preserve-box-in-moved-value.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-// Test that we root `x` even though it is found in immutable memory,\n-// because it is moved.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn free<T>(x: Gc<T>) {}\n-\n-struct Foo {\n-    f: Gc<Bar>\n-}\n-\n-struct Bar {\n-    g: int\n-}\n-\n-fn lend(x: Gc<Foo>) -> int {\n-    let y = &x.f.g;\n-    free(x); // specifically here, if x is not rooted, it will be freed\n-    *y\n-}\n-\n-pub fn main() {\n-    assert_eq!(lend(box(GC) Foo {f: box(GC) Bar {g: 22}}), 22);\n-}"}, {"sha": "344867568bb7a0e66fed569a4c9e9aafe455ca1e", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-struct F { f: Gc<G> }\n-struct G { g: Vec<int> }\n-\n-pub fn main() {\n-    let rec = box(GC) F {f: box(GC) G {g: vec!(1, 2, 3)}};\n-    while rec.f.g.len() == 23 {}\n-}"}, {"sha": "163ccf5c029599437ce48efea80de3d7c01c3b51", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn borrow<'r,T>(x: &'r T) -> &'r T {x}\n-\n-struct Rec { f: Gc<int> }\n-\n-pub fn main() {\n-    let rec = box(GC) Rec {f: box(GC) 22};\n-    while *borrow(&*rec.f) == 23 {}\n-}"}, {"sha": "129fa8bf7d926f7a6449021ed14d76a5463b5c2a", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::cell::Cell;\n-use std::gc::GC;\n \n enum newtype {\n     newvar(int)\n@@ -21,8 +20,8 @@ pub fn main() {\n     // Test that borrowck treats enums with a single variant\n     // specially.\n \n-    let x = box(GC) Cell::new(5);\n-    let y = box(GC) Cell::new(newvar(3));\n+    let x = &Cell::new(5);\n+    let y = &Cell::new(newvar(3));\n     let z = match y.get() {\n       newvar(b) => {\n         x.set(x.get() + 1);"}, {"sha": "9e8e416d7b07d6707be65925defb78c8addad615", "filename": "src/test/run-pass/box-compare.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-pub fn main() {\n-    assert!((box(GC) 1i < box(GC) 3i));\n-    assert!((box(GC) box(GC) \"hello \".to_string() >\n-             box(GC) box(GC) \"hello\".to_string()));\n-    assert!((box(GC) box(GC) box(GC) \"hello\".to_string() !=\n-             box(GC) box(GC) box(GC) \"there\".to_string()));\n-}"}, {"sha": "8d7bb55028f686d6b7039fc661adc4376283bbac", "filename": "src/test/run-pass/box-in-tup.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() {\n-    let i: (Gc<int>, int) = (box(GC) 10, 10);\n-    let (_a, _) = i;\n-}"}, {"sha": "47c7e7f16f488cfeff4c0095b186ba4dcdb1d0a5", "filename": "src/test/run-pass/box-inside-if.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n-\n-fn is_odd(_n: int) -> bool { return true; }\n-\n-fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n-\n-fn foo(_acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_box(1)) { println!(\"bloop\"); }\n-}\n-\n-pub fn main() { foo(67, 5); }"}, {"sha": "e62050c8ea962f7eb92ea68aa277db7ff60cdd6b", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn some_box(x: int) -> Gc<int> { return box(GC) x; }\n-\n-fn is_odd(_n: int) -> bool { return true; }\n-\n-fn length_is_even(_vs: Gc<int>) -> bool { return true; }\n-\n-fn foo(_acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_box(1)) { println!(\"bloop\"); }\n-}\n-\n-pub fn main() { foo(67, 5); }"}, {"sha": "21d1d2359019a60839d9b444833bb7b343dd2620", "filename": "src/test/run-pass/box-pattern.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let box x = box 3i;\n-    match box 3i {\n-        box y => {\n-            assert!(x == y);\n-            println!(\"{} {}\", x, y);\n-        }\n-    }\n-}\n-"}, {"sha": "bc8afff0cd626117a9bb3097a1d31da062263c6b", "filename": "src/test/run-pass/box-unbox.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Box<T> {c: Gc<T>}\n-\n-fn unbox<T:Clone>(b: Box<T>) -> T { return (*b.c).clone(); }\n-\n-pub fn main() {\n-    let foo: int = 17;\n-    let bfoo: Box<int> = Box {c: box(GC) foo};\n-    println!(\"see what's in our box\");\n-    assert_eq!(unbox::<int>(bfoo), foo);\n-}"}, {"sha": "844b9392ec864095951e73c2a5c9e2a298cd2729", "filename": "src/test/run-pass/box.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() { let x: Gc<int> = box(GC) 10; assert!((*x == 10)); }"}, {"sha": "41ffdd7b4b9ad21eb00e87f1ca9636ccdb987de3", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Regression test that rustc doesn't recurse infinitely substituting\n-// the boxed type parameter\n-\n-\n-use std::gc::Gc;\n-\n-struct Tree<T> {\n-    parent: Option<T>\n-}\n-\n-fn empty<T>() -> Tree<T> { fail!() }\n-\n-struct Box {\n-    tree: Tree<Gc<Box>>\n-}\n-\n-fn Box() -> Box {\n-    Box {\n-        tree: empty()\n-    }\n-}\n-\n-struct LayoutData {\n-    a_box: Option<Gc<Box>>\n-}\n-\n-pub fn main() { }"}, {"sha": "262c19174b18b9edd5f33d16520e59f7e4ea12da", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -13,10 +13,9 @@\n \n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n-use std::gc::GC;\n \n pub fn main() {\n-    let p = box(GC) 22u;\n+    let p = box 22u;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "a54a821a7b9b47bef62c3551c9b3580362a0d3a8", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n struct kitten {\n     cat: Option<cat>,\n }\n@@ -21,6 +19,6 @@ fn kitten(cat: Option<cat>) -> kitten {\n     }\n }\n \n-type cat = Gc<kitten>;\n+type cat = Box<kitten>;\n \n pub fn main() {}"}, {"sha": "3eec506c9e3197f20cfbe66824e9889878913987", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::task;\n-use std::gc::{GC, Gc};\n-\n-fn adder(x: Gc<int>, y: Gc<int>) -> int { return *x + *y; }\n-fn failer() -> Gc<int> { fail!(); }\n-pub fn main() {\n-    assert!(task::try(proc() {\n-        adder(box(GC) 2, failer()); ()\n-    }).is_err());\n-}"}, {"sha": "0088a36eda9a3239019c73e0281eee4d8b1ad0d1", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -17,12 +17,10 @@\n \n extern crate crate_method_reexport_grrrrrrr2;\n \n-use std::gc::GC;\n-\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x = box(GC) ();\n+    let x = box() ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "edcbd21476b42c2e4be56f1b619bc99c8f32f998", "filename": "src/test/run-pass/cycle-collection.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum taggy {\n-    cons(Gc<RefCell<taggy>>),\n-    nil,\n-}\n-\n-fn f() {\n-    let a_box = box(GC) RefCell::new(nil);\n-    *a_box.borrow_mut() = cons(a_box);\n-}\n-\n-pub fn main() {\n-    f();\n-}"}, {"sha": "d9b0940f80b3f328a745ba984ad29ee100ff94b6", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,13 +9,10 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n use std::cell::Cell;\n-use std::gc::GC;\n \n pub fn main() {\n-    let x = box(GC) Cell::new(5i);\n+    let x = box Cell::new(5i);\n     x.set(1000i);\n-    println!(\"{:?}\", x.get());\n+    println!(\"{}\", x.get());\n }"}, {"sha": "117b133a11319fcc55c2dd02a8006e14c2eca9fa", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n pub fn main() {\n-    let x: Gc<int> = box(GC) 10;\n+    let x: Box<int> = box 10;\n     let _y: int = *x;\n }"}, {"sha": "0d5556a867b6d6e0860603380e30906585799387", "filename": "src/test/run-pass/double-unbox.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::Gc;\n-\n-struct Quux {\n-    bar: int\n-}\n-\n-fn g(_i: int) { }\n-fn f(foo: Gc<Gc<Quux>>) { g(foo.bar); }\n-\n-pub fn main() { }"}, {"sha": "c52549d286fd5bc44e6123a8910bc6ff27e5b7ad", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n-enum t { foo(Gc<int>), }\n+enum t { foo(Box<int>), }\n \n pub fn main() {\n-    let tt = foo(box(GC) 10);\n+    let tt = foo(box 10);\n     match tt { foo(_z) => { } }\n }"}, {"sha": "3e22c8331839306de32446ae5827da8fb4910f27", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n use std::mem::size_of;\n \n trait Trait {}\n@@ -33,9 +32,8 @@ fn main() {\n     assert_eq!(size_of::<&Trait>(), size_of::<Option<&Trait>>());\n     assert_eq!(size_of::<&mut Trait>(), size_of::<Option<&mut Trait>>());\n \n-    // Pointers - Box<T> / Gc<T>\n+    // Pointers - Box<T>\n     assert_eq!(size_of::<Box<int>>(), size_of::<Option<Box<int>>>());\n-    assert_eq!(size_of::<Gc<int>>(), size_of::<Option<Gc<int>>>());\n \n \n     // The optimization can't apply to raw pointers"}, {"sha": "24fb503aea3a96ebf549fe9892d789aa0f1272a1", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -15,11 +15,9 @@\n  * represented with nullable pointers could be misoptimized in some cases.\n  */\n \n-use std::gc::{Gc, GC};\n-\n-enum List<X> { Nil, Cons(X, Gc<List<X>>) }\n+enum List<X> { Nil, Cons(X, Box<List<X>>) }\n pub fn main() {\n-    match Cons(10i, box(GC) Nil) {\n+    match Cons(10i, box Nil) {\n         Cons(10i, _) => {}\n         Nil => {}\n         _ => fail!()"}, {"sha": "63e034c0eaa30798beb2ac506d4cdcbdc179faf1", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_assignment)]\n-\n-use std::gc::{Gc, GC};\n-\n-pub fn main() {\n-    let x : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    let _y : [Gc<int>, ..5] = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    let mut z = [box(GC) 1,box(GC) 2,box(GC) 3,box(GC) 4,box(GC) 5];\n-    z = x;\n-    assert_eq!(*z[0], 1);\n-    assert_eq!(*z[4], 5);\n-}"}, {"sha": "94652e30fe64f2ac86fd1419607c1bc114b35610", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n-enum list_cell<T> { cons(Gc<list_cell<T>>), nil }\n+enum list_cell<T> { cons(Box<list_cell<T>>), nil }\n \n pub fn main() { }"}, {"sha": "9b3d2028edffb8d54f76f98d42a47fba7f2f1fc6", "filename": "src/test/run-pass/expr-block-box.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-pub fn main() { let x = { box(GC) 100i }; assert!((*x == 100)); }"}, {"sha": "dfcef1712526a6b0b468a1dcdb93efd160896a63", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = { expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool {\n-        println!(\"{}\", *b1);\n-        println!(\"{}\", *b2);\n-        return *b1 == *b2;\n-    }\n-    test_generic::<bool>(box(GC) true, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "547e7dfa9110ebc16f02622ee2d27d758dae195a", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-    let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_vec(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, compare_vec);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "3d649b17b79372da5eaae8d50483d3b7c66c35e8", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-// Regression test for issue #388\n-pub fn main() { let _x = { { box(GC) 10i } }; }"}, {"sha": "f0b9c85a53d33e713ca0bc8063370c085a2ab7df", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Make sure we drop the refs of the temporaries needed to return the\n-// values from the else if branch\n-pub fn main() {\n-    let y: Gc<uint> = box(GC) 10u;\n-    let _x = if false { y } else if true { y } else { y };\n-    assert_eq!(*y, 10u);\n-}"}, {"sha": "9d4efea7e3d104c5b89981cdcc0049e64d98dd58", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC};\n-\n-// Regression test for issue #388\n-pub fn main() {\n-    let _x = if false {\n-        box(GC) 0u\n-    } else if true {\n-        box(GC) 10u\n-    } else {\n-        box(GC) 0u\n-    };\n-}"}, {"sha": "3def4571e134bda151f1078a3e517f82ab7346e3", "filename": "src/test/run-pass/expr-if-box.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Tests for if as expressions returning boxed types\n-fn test_box() {\n-    let rs = if true { box(GC) 100i } else { box(GC) 101i };\n-    assert_eq!(*rs, 100);\n-}\n-\n-fn test_str() {\n-    let rs = if true { \"happy\".to_string() } else { \"sad\".to_string() };\n-    assert_eq!(rs, \"happy\".to_string());\n-}\n-\n-pub fn main() { test_box(); test_str(); }"}, {"sha": "931f500a3093556e876609ce6682b9489d456231", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, not_expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = if true { expected } else { not_expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(box(GC) true, box(GC) false, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "b8b8c9b89a8adf3c69e0655c7cf3890e19d18910", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n-    let actual: T = if true { expected.clone() } else { not_expected };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, box(GC) 2, compare_box);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "c2ba36006bd039db54da53a395695506a67a61ec", "filename": "src/test/run-pass/expr-match-box.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-// Tests for match as expressions resulting in boxed types\n-fn test_box() {\n-    let res = match true { true => { box(GC) 100i } _ => fail!(\"wat\") };\n-    assert_eq!(*res, 100i);\n-}\n-\n-fn test_str() {\n-    let res = match true { true => { \"happy\".to_string() },\n-                         _ => fail!(\"not happy at all\") };\n-    assert_eq!(res, \"happy\".to_string());\n-}\n-\n-pub fn main() { test_box(); test_str(); }"}, {"sha": "97fa53b5e243905a0d5360d24ae749e2e6201ce5", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |Gc<T>, Gc<T>|: 'static -> bool;\n-\n-fn test_generic<T>(expected: Gc<T>, eq: compare<T>) {\n-    let actual: Gc<T> = match true { true => { expected }, _ => fail!() };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_box() {\n-    fn compare_box(b1: Gc<bool>, b2: Gc<bool>) -> bool { return *b1 == *b2; }\n-    test_generic::<bool>(box(GC) true, compare_box);\n-}\n-\n-pub fn main() { test_box(); }"}, {"sha": "fd8179c59a59369ea32d34bca4701c7b0405bb25", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };\n-    assert!((eq(expected, actual)));\n-}\n-\n-fn test_vec() {\n-    fn compare_box(v1: Gc<int>, v2: Gc<int>) -> bool { return v1 == v2; }\n-    test_generic::<Gc<int>>(box(GC) 1, compare_box);\n-}\n-\n-pub fn main() { test_vec(); }"}, {"sha": "e95c2034131552beed85a747b442bbac4233dfa2", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,19 +10,18 @@\n \n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n struct Point {x: int, y: int, z: int}\n \n-fn f(p: Gc<Cell<Point>>) {\n+fn f(p: &Cell<Point>) {\n     assert!((p.get().z == 12));\n     p.set(Point {x: 10, y: 11, z: 13});\n     assert!((p.get().z == 13));\n }\n \n pub fn main() {\n     let a: Point = Point {x: 10, y: 11, z: 12};\n-    let b: Gc<Cell<Point>> = box(GC) Cell::new(a);\n+    let b: &Cell<Point> = &Cell::new(a);\n     assert_eq!(b.get().z, 12);\n     f(b);\n     assert_eq!(a.z, 12);"}, {"sha": "3faa30c4c8a20e896e0d17e594bdfdffedea91c0", "filename": "src/test/run-pass/fail-during-tld-destroy.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffail-during-tld-destroy.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,45 +9,25 @@\n // except according to those terms.\n \n use std::task;\n-use std::gc::{GC, Gc};\n-use std::cell::RefCell;\n \n static mut DROPS: uint = 0;\n \n-struct Foo(bool);\n+struct Foo;\n impl Drop for Foo {\n     fn drop(&mut self) {\n-        let Foo(fail) = *self;\n         unsafe { DROPS += 1; }\n-        if fail { fail!() }\n+        fail!()\n     }\n }\n \n-fn tld_fail(fail: bool) {\n-    local_data_key!(foo: Foo);\n-    foo.replace(Some(Foo(fail)));\n-}\n-\n-fn gc_fail(fail: bool) {\n-    struct A {\n-        inner: RefCell<Option<Gc<A>>>,\n-        other: Foo,\n-    }\n-    let a = box(GC) A {\n-        inner: RefCell::new(None),\n-        other: Foo(fail),\n-    };\n-    *a.inner.borrow_mut() = Some(a.clone());\n-}\n-\n fn main() {\n     let _ = task::try(proc() {\n-        tld_fail(true);\n-        gc_fail(false);\n+        local_data_key!(foo: Foo);\n+        foo.replace(Some(Foo));\n     });\n \n     unsafe {\n-        assert_eq!(DROPS, 2);\n+        assert_eq!(DROPS, 1);\n     }\n }\n "}, {"sha": "430ee16bc8a26682078697fd3d7fc92d517851a6", "filename": "src/test/run-pass/gc-vec.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgc-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgc-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgc-vec.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::gc::{GC};\n-\n-fn main() {\n-    // A fixed-size array allocated in a garbage-collected box\n-    let x = box(GC) [1i, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(x[0], 1);\n-    assert_eq!(x[6], 7);\n-    assert_eq!(x[9], 10);\n-\n-    let y = x;\n-    assert!(*y == [1i, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n-}"}, {"sha": "325f6a2c8547301e0c1322ff60b6515c386a8fbe", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n-fn id<T>(t: T) -> T { return t; }\n-\n-pub fn main() {\n-    let expected = box(GC) 100;\n-    let actual = id::<Gc<int>>(expected);\n-    println!(\"{:?}\", *actual);\n-    assert_eq!(*expected, *actual);\n-}"}, {"sha": "d5047eb8f863b125559fcd5eb386fe675370e497", "filename": "src/test/run-pass/generic-box.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn box_it<T:'static>(x: Box<T>) -> Gc<Box<T>> { return box(GC) x; }\n-\n-struct Box<T> {x: T, y: T, z: T}\n-\n-pub fn main() {\n-    let x: Gc<Box<int>> = box_it::<int>(Box{x: 1, y: 2, z: 3});\n-    assert_eq!(x.y, 2);\n-}"}, {"sha": "2cc3a89459eba2c4f5da39707ca091913764107b", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Pair { x: Gc<int>, y: Gc<int> }\n-\n-fn f<T>(t: T) { let _t1: T = t; }\n-\n-pub fn main() { let x = Pair {x: box(GC) 10, y: box(GC) 12}; f(x); }"}, {"sha": "2c1ae5d985489f5e9696ed367b34e6cbe62c3197", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Recbox<T> {x: Gc<T>}\n-\n-fn reclift<T:'static>(t: T) -> Recbox<T> { return Recbox {x: box(GC) t}; }\n-\n-pub fn main() {\n-    let foo: int = 17;\n-    let rbfoo: Recbox<int> = reclift::<int>(foo);\n-    assert_eq!(*rbfoo.x, foo);\n-}"}, {"sha": "2164b00e0669131c0aa6bcfb2bb740c06c47df92", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(x: Gc<T>) -> Gc<T> { return x; }\n-\n-pub fn main() { let x = f(box(GC) 3i); println!(\"{:?}\", *x); }"}, {"sha": "68e7b98183b3c3e7aa14e47e34c54f11f5239282", "filename": "src/test/run-pass/generic-ivec.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn f<T>(_v: Gc<T>) { }\n-pub fn main() { f(box(GC) vec!(1i, 2, 3, 4, 5)); }"}, {"sha": "d8777515cecf05e510ba1c89f8684d17d3c5b257", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,14 +11,12 @@\n // ignore-pretty FIXME(#14193)\n \n \n-use std::gc::{Gc, GC};\n-\n-enum list<T> { cons(Gc<T>, Gc<list<T>>), nil, }\n+enum list<T> { cons(Box<T>, Box<list<T>>), nil, }\n \n pub fn main() {\n     let _a: list<int> =\n-        cons::<int>(box(GC) 10,\n-        box(GC) cons::<int>(box(GC) 12,\n-        box(GC) cons::<int>(box(GC) 13,\n-        box(GC) nil::<int>)));\n+        cons::<int>(box 10,\n+        box cons::<int>(box 12,\n+        box cons::<int>(box 13,\n+        box nil::<int>)));\n }"}, {"sha": "52e512e515c589cd311ec59f29b0a0c72b0fc68b", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,11 +11,9 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n-enum option<T> { some(Gc<T>), none, }\n+enum option<T> { some(Box<T>), none, }\n \n pub fn main() {\n-    let mut a: option<int> = some::<int>(box(GC) 10);\n+    let mut a: option<int> = some::<int>(box 10);\n     a = none::<int>;\n }"}, {"sha": "365070f704f8541efa68390296809412658b8741", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -18,7 +18,6 @@\n extern crate debug;\n \n use std::fmt;\n-use std::gc::GC;\n use std::io::MemWriter;\n use std::io;\n use std::str;\n@@ -50,7 +49,6 @@ pub fn main() {\n     t!(format!(\"{:?}\", 1i), \"1\");\n     t!(format!(\"{:?}\", A), \"A\");\n     t!(format!(\"{:?}\", ()), \"()\");\n-    t!(format!(\"{:?}\", box(GC) (box 1i, \"foo\")), \"box(GC) (box 1, \\\"foo\\\")\");\n \n     // Various edge cases without formats\n     t!(format!(\"\"), \"\");"}, {"sha": "752e95f25dc5315d1fdc8664efbf2247c11a4c92", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,89 +11,79 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // Resources can't be copied, but storing into data structures counts\n // as a move unless the stored thing is used afterwards.\n \n-struct r {\n-    i: Gc<Cell<int>>,\n+struct r<'a> {\n+    i: &'a Cell<int>,\n }\n \n-struct Box { x: r }\n+struct BoxR<'a> { x: r<'a> }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1)\n     }\n }\n \n-fn r(i: Gc<Cell<int>>) -> r {\n+fn r(i: &Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n-fn test_box() {\n-    let i = box(GC) Cell::new(0i);\n-    {\n-        let _a = box(GC) r(i);\n-    }\n-    assert_eq!(i.get(), 1);\n-}\n-\n fn test_rec() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n-        let _a = Box {x: r(i)};\n+        let _a = BoxR {x: r(i)};\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tag() {\n-    enum t {\n-        t0(r),\n+    enum t<'a> {\n+        t0(r<'a>),\n     }\n \n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = t0(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = (r(i), 0i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     {\n         let _a = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n-fn test_box_rec() {\n-    let i = box(GC) Cell::new(0i);\n+fn test_unique_rec() {\n+    let i = &Cell::new(0i);\n     {\n-        let _a = box(GC) Box {\n+        let _a = box BoxR {\n             x: r(i)\n         };\n     }\n     assert_eq!(i.get(), 1);\n }\n \n pub fn main() {\n-    test_box();\n     test_rec();\n     test_tag();\n     test_tup();\n     test_unique();\n-    test_box_rec();\n+    test_unique_rec();\n }"}, {"sha": "dd9a7c97c9ab5f5ca8a2431955e28e321607be8d", "filename": "src/test/run-pass/issue-14082.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14082.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![allow(unused_imports, dead_code)]\n \n-use foo::GC;\n+use foo::Foo;\n \n mod foo {\n-    pub use m::GC; // this should shadow d::GC\n+    pub use m::Foo; // this should shadow d::Foo\n }\n \n mod m {\n-    pub struct GC;\n+    pub struct Foo;\n }\n \n mod d {\n-    pub struct GC;\n+    pub struct Foo;\n }\n \n fn main() {}"}, {"sha": "84f046499e439ca1f96c64e15c626a0a401760a2", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,17 +11,16 @@\n \n // aux-build:issue-2631-a.rs\n \n-extern crate collections;\n extern crate req;\n \n use req::request;\n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::gc::GC;\n+use std::rc::Rc;\n \n pub fn main() {\n-  let v = vec!(box(GC) \"hi\".to_string());\n+  let v = vec!(Rc::new(\"hi\".to_string()));\n   let mut m: req::header_map = HashMap::new();\n-  m.insert(\"METHOD\".to_string(), box(GC) RefCell::new(v));\n+  m.insert(\"METHOD\".to_string(), Rc::new(RefCell::new(v)));\n   request::<int>(&m);\n }"}, {"sha": "3ac4b874f3ad8cb00dd48fb3e1622c0d13c10174", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct Font {\n     fontbuf: uint,\n     cairo_font: uint,\n@@ -31,5 +29,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f = box(GC) Font();\n+    let _f = box Font();\n }"}, {"sha": "0d1cf1c339227689787ff76a3712ea3719973ff3", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-3\n-struct defer {\n-    b: Gc<Cell<bool>>,\n+struct defer<'a> {\n+    b: &'a Cell<bool>,\n }\n \n #[unsafe_destructor]\n-impl Drop for defer {\n+impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);\n     }\n }\n \n-fn defer(b: Gc<Cell<bool>>) -> defer {\n+fn defer(b: &Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = box(GC) Cell::new(false);\n+    let dtor_ran = &Cell::new(false);\n     let _  = defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "658183cf6ff5437b64fc1c74f1d58b55aa033b02", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // This test should behave exactly like issue-2735-2\n-struct defer {\n-    b: Gc<Cell<bool>>,\n+struct defer<'a> {\n+    b: &'a Cell<bool>,\n }\n \n #[unsafe_destructor]\n-impl Drop for defer {\n+impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         self.b.set(true);\n     }\n }\n \n-fn defer(b: Gc<Cell<bool>>) -> defer {\n+fn defer(b: &Cell<bool>) -> defer {\n     defer {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let dtor_ran = box(GC) Cell::new(false);\n+    let dtor_ran = &Cell::new(false);\n     defer(dtor_ran);\n     assert!(dtor_ran.get());\n }"}, {"sha": "aa2ce824822b1d580e19a0e5d67a67a067549d7d", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -14,10 +14,9 @@\n extern crate socketlib;\n extern crate libc;\n \n-use std::gc::GC;\n use socketlib::socket;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let _sock = box(GC) socket::socket_handle(fd);\n+    let _sock = box socket::socket_handle(fd);\n }"}, {"sha": "6b320e1474624a5e66b6dcde3ba202701cb01c7e", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }\n enum meal { to_go(order), for_here(order) }\n \n-fn foo(m: Gc<meal>, cond: bool) {\n+fn foo(m: Box<meal>, cond: bool) {\n     match *m {\n       to_go(_) => { }\n       for_here(_) if cond => {}\n@@ -26,5 +24,5 @@ fn foo(m: Gc<meal>, cond: bool) {\n }\n \n pub fn main() {\n-    foo(box(GC) for_here(hamburger), true)\n+    foo(box for_here(hamburger), true)\n }"}, {"sha": "4ebf981e4ee55aef4e4c1195c79b67b07204b5b9", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,13 +10,12 @@\n \n \n use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n \n static S: &'static str = \"str\";\n \n struct list<T> {\n     element: T,\n-    next: Option<Gc<RefCell<list<T>>>>\n+    next: Option<Box<RefCell<list<T>>>>\n }\n \n impl<T:'static> list<T> {\n@@ -26,7 +25,7 @@ impl<T:'static> list<T> {\n             next: None\n         };\n \n-        self.next = Some(box(GC) RefCell::new(newList));\n+        self.next = Some(box RefCell::new(newList));\n     }\n }\n "}, {"sha": "e59cf9f77fa6e9fc82f0555b2e6989fc5dbd2534", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,18 +9,15 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n-use std::gc::{Gc, GC};\n-\n+#[deriving(Show)]\n enum Token {\n-    Text(Gc<String>),\n-    ETag(Gc<Vec<String>> , Gc<String>),\n-    UTag(Gc<Vec<String>> , Gc<String>),\n-    Section(Gc<Vec<String>> , bool, Gc<Vec<Token>>, Gc<String>,\n-            Gc<String>, Gc<String>, Gc<String>, Gc<String>),\n-    IncompleteSection(Gc<Vec<String>> , bool, Gc<String>, bool),\n-    Partial(Gc<String>, Gc<String>, Gc<String>),\n+    Text(String),\n+    ETag(Vec<String>, String),\n+    UTag(Vec<String>, String),\n+    Section(Vec<String>, bool, Vec<Token>, String,\n+            String, String, String, String),\n+    IncompleteSection(Vec<String>, bool, String, bool),\n+    Partial(String, String, String),\n }\n \n fn check_strs(actual: &str, expected: &str) -> bool\n@@ -39,13 +36,13 @@ pub fn main()\n // assert!(check_strs(fmt!(\"%?\", ETag(@~[\"foo\".to_string()], @\"bar\".to_string())),\n //                    \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));\n \n-    let t = Text(box(GC) \"foo\".to_string());\n-    let u = Section(box(GC) vec!(\"alpha\".to_string()),\n-                          true,\n-                          box(GC) vec!(t),\n-                          box(GC) \"foo\".to_string(),\n-                    box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(), box(GC) \"foo\".to_string(),\n-                    box(GC) \"foo\".to_string());\n-    let v = format!(\"{:?}\", u);    // this is the line that causes the seg fault\n+    let t = Text(\"foo\".to_string());\n+    let u = Section(vec![\"alpha\".to_string()],\n+                    true,\n+                    vec![t],\n+                    \"foo\".to_string(),\n+                    \"foo\".to_string(), \"foo\".to_string(), \"foo\".to_string(),\n+                    \"foo\".to_string());\n+    let v = format!(\"{}\", u);    // this is the line that causes the seg fault\n     assert!(v.len() > 0);\n }"}, {"sha": "4010c31eed50a3575394763b677d26458d6038fd", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n pub struct Foo {\n     a: int,\n }\n@@ -20,7 +18,7 @@ struct Bar<'a> {\n     b: &'a Foo,\n }\n \n-fn check(a: Gc<Foo>) {\n+fn check(a: Box<Foo>) {\n     let _ic = Bar{ b: &*a, a: box None };\n }\n "}, {"sha": "7eaaa5ea74eda657b05d3253ca4c7aa35aa5e3aa", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Left(box(GC) 17i) {\n+    match Left(box 17i) {\n         Right(()) => {}\n         _ => {}\n     }"}, {"sha": "3fff58410a41a86e8f9d307a2f6444d5b3a2b25c", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -12,8 +12,6 @@\n \n extern crate debug;\n \n-use std::gc::GC;\n-\n fn assert_repr_eq<T>(obj : T, expected : String) {\n     assert_eq!(expected, format!(\"{:?}\", obj));\n }\n@@ -23,12 +21,10 @@ pub fn main() {\n     let tf = [true, false];\n     let x  = [(), ()];\n     let slice = x[0..1];\n-    let z = box(GC) x;\n \n     assert_repr_eq(abc, \"[1, 2, 3]\".to_string());\n     assert_repr_eq(tf, \"[true, false]\".to_string());\n     assert_repr_eq(x, \"[(), ()]\".to_string());\n     assert_repr_eq(slice, \"&[()]\".to_string());\n     assert_repr_eq(&x, \"&[(), ()]\".to_string());\n-    assert_repr_eq(z, \"box(GC) [(), ()]\".to_string());\n }"}, {"sha": "1291f0b6cd1c78b71835f696835513dba505824c", "filename": "src/test/run-pass/issue-8983.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8983.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::GC;\n-\n-fn main() {\n-    fn f(_: proc()) {}\n-    fn eat<T>(_: T) {}\n-\n-    let x = box(GC) 1i;\n-    f(proc() { eat(x) });\n-}"}, {"sha": "919f0aae38e0acb48a104fe9520d154ff0a75470", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,27 +11,26 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct r {\n-    b: Gc<Cell<int>>,\n+struct r<'a> {\n+    b: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.b.set(self.b.get() + 1);\n     }\n }\n \n-fn r(b: Gc<Cell<int>>) -> r {\n+fn r(b: &Cell<int>) -> r {\n     r {\n         b: b\n     }\n }\n \n pub fn main() {\n-    let b = box(GC) Cell::new(0);\n+    let b = &Cell::new(0);\n     {\n         let _p = Some(r(b));\n     }"}, {"sha": "1083f1b3c71cb6513f2c77e943f381734e67a203", "filename": "src/test/run-pass/issue-980.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    no_pointy,\n-    yes_pointy(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    x: maybe_pointy\n-}\n-\n-pub fn main() {\n-    let m = box(GC) RefCell::new(Pointy { x : no_pointy });\n-    *m.borrow_mut() = Pointy {\n-        x: yes_pointy(m)\n-    };\n-}"}, {"sha": "57b9b2494f5ff044098cbef1dd17f15d6b37e1e6", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-fn leaky<T>(_t: T) { }\n-\n-pub fn main() { let x = box(GC) 10; leaky::<Gc<int>>(x); }"}, {"sha": "3be122b38fa1ec5911e834df4d4aba028cc851d1", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_assignment)]\n-#![allow(unused_variable)]\n-\n-use std::gc::{Gc, GC};\n-\n-enum t { a, b(Gc<int>), }\n-\n-pub fn main() { let mut x = b(box(GC) 10); x = a; }"}, {"sha": "7d0778b685937f0cec8ba27a2bfe9b330de62b40", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n+enum list { cons(int, Box<list>), nil, }\n \n-enum list { cons(int, Gc<list>), nil, }\n-\n-pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }\n+pub fn main() { cons(10, box cons(11, box cons(12, box nil))); }"}, {"sha": "ee91ae124b876f0f5386e7ffdcd69e759ef0e1df", "filename": "src/test/run-pass/mlist.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-enum mlist { cons(int, Gc<mlist>), nil, }\n-\n-pub fn main() { cons(10, box(GC) cons(11, box(GC) cons(12, box(GC) nil))); }"}, {"sha": "6f4ffa51a4677f6434d16e07cab2c19a6c5c84b0", "filename": "src/test/run-pass/move-1.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Triple { x: int, y: int, z: int }\n-\n-fn test(x: bool, foo: Gc<Triple>) -> int {\n-    let bar = foo;\n-    let mut y: Gc<Triple>;\n-    y = bar;\n-    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n-    return y.y;\n-}\n-\n-pub fn main() {\n-    let x = box(GC) Triple {x: 1, y: 2, z: 3};\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(true, x), 2);\n-    assert_eq!(test(false, x), 5);\n-}"}, {"sha": "04540c2f35b29ef05fe73b00c59d5b973a38f4c1", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = box(GC) X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }"}, {"sha": "21a7d57b5631eaf6fd7355ef2ac50097b1876c42", "filename": "src/test/run-pass/move-3.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-struct Triple { x: int, y: int, z: int }\n-\n-fn test(x: bool, foo: Gc<Triple>) -> int {\n-    let bar = foo;\n-    let mut y: Gc<Triple>;\n-    if x { y = bar; } else { y = box(GC) Triple{x: 4, y: 5, z: 6}; }\n-    return y.y;\n-}\n-\n-pub fn main() {\n-    let x = box(GC) Triple{x: 1, y: 2, z: 3};\n-    for _i in range(0u, 10000u) {\n-        assert_eq!(test(true, x), 2);\n-    }\n-    assert_eq!(test(false, x), 5);\n-}"}, {"sha": "5e5d01ae6ee4529d209f1d1b4bb29e8aa470ce78", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-use std::gc::{GC, Gc};\n-\n struct Triple { a: int, b: int, c: int }\n \n-fn test(foo: Gc<Triple>) -> Gc<Triple> {\n+fn test(foo: Box<Triple>) -> Box<Triple> {\n     let foo = foo;\n     let bar = foo;\n     let baz = bar;\n@@ -22,7 +20,7 @@ fn test(foo: Gc<Triple>) -> Gc<Triple> {\n }\n \n pub fn main() {\n-    let x = box(GC) Triple{a: 1, b: 2, c: 3};\n+    let x = box Triple{a: 1, b: 2, c: 3};\n     let y = test(x);\n     assert_eq!(y.c, 3);\n }"}, {"sha": "840a3c2a6ee86caf63b393390eec597a0f360e47", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::gc::{Gc, GC};\n-\n-fn test(foo: Gc<Vec<int>>) { assert!((*foo.get(0) == 10)); }\n+fn test(foo: Box<Vec<int>>) { assert!((*foo.get(0) == 10)); }\n \n pub fn main() {\n-    let x = box(GC) vec!(10);\n+    let x = box vec!(10);\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box(GC) vec!(10));\n+    test(box vec!(10));\n }"}, {"sha": "665303ac487655c73e9987c9079341a15d1ef3bf", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_mut)]\n-\n-use std::gc::{Gc, GC};\n-\n-struct Pair { a: int, b: int}\n-\n-pub fn main() {\n-    // This just tests whether the vec leaks its members.\n-    let mut _pvec: Vec<Gc<Pair>> =\n-        vec!(box(GC) Pair{a: 1, b: 2},\n-             box(GC) Pair{a: 3, b: 4},\n-             box(GC) Pair{a: 5, b: 6});\n-}"}, {"sha": "8444a632fe889c699f0cf932b524f83a1a56be3a", "filename": "src/test/run-pass/mutual-recursion-group.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,14 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n-\n enum colour { red, green, blue, }\n \n-enum tree { children(Gc<list>), leaf(colour), }\n+enum tree { children(Box<list>), leaf(colour), }\n \n-enum list { cons(Gc<tree>, Gc<list>), nil, }\n+enum list { cons(Box<tree>, Box<list>), nil, }\n \n-enum small_list { kons(int, Gc<small_list>), neel, }\n+enum small_list { kons(int, Box<small_list>), neel, }\n \n pub fn main() { }"}, {"sha": "991d0ecdc87a642356d4d3a1ce0e47940b4819b1", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,9 +11,8 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-// Tests that the new `box` syntax works with unique pointers and GC pointers.\n+// Tests that the new `box` syntax works with unique pointers.\n \n-use std::gc::{Gc, GC};\n use std::boxed::{Box, HEAP};\n \n struct Structure {\n@@ -24,12 +23,6 @@ struct Structure {\n pub fn main() {\n     let x: Box<int> = box(HEAP) 2i;\n     let y: Box<int> = box 2i;\n-    let z: Gc<int> = box(GC) 2i;\n-    let a: Gc<Structure> = box(GC) Structure {\n-        x: 10,\n-        y: 20,\n-    };\n     let b: Box<int> = box()(1i + 2);\n     let c = box()(3i + 4);\n-    let d = box(GC)(5i + 6);\n }"}, {"sha": "8c35abad7f1e61e273b53a0595acb7a92e6ee06f", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -13,20 +13,19 @@\n // Make sure the destructor is run for newtype structs.\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct Foo(Gc<Cell<int>>);\n+struct Foo<'a>(&'a Cell<int>);\n \n #[unsafe_destructor]\n-impl Drop for Foo {\n+impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n         let Foo(i) = *self;\n         i.set(23);\n     }\n }\n \n pub fn main() {\n-    let y = box(GC) Cell::new(32);\n+    let y = &Cell::new(32);\n     {\n         let _x = Foo(y);\n     }"}, {"sha": "0c66b139e7c2ede137450ff632631007339c7e13", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,7 +11,6 @@\n #![feature(macro_rules)]\n \n use std::{option, mem};\n-use std::gc::{Gc, GC};\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n@@ -76,7 +75,6 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&17: &int);\n     check_type!(box 18: Box<int>);\n-    check_type!(box(GC) 19: Gc<int>);\n     check_type!(\"foo\".to_string(): String);\n     check_type!(vec!(20, 22): Vec<int> );\n     let mint: uint = unsafe { mem::transmute(main) };"}, {"sha": "5708310abadbfe88e0740d981feed67b5ff0edca", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,7 +11,6 @@\n #![feature(macro_rules)]\n \n use std::mem;\n-use std::gc::Gc;\n \n enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n struct S<T>(int, T);\n@@ -40,6 +39,5 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&'static int);\n     check_type!(Box<int>);\n-    check_type!(Gc<int>);\n     check_type!(extern fn());\n }"}, {"sha": "60c46d17b0699f1561495c72d39bbdcd4da54bc5", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,42 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{Gc, GC};\n-\n-// Test invoked `&self` methods on owned objects where the values\n-// closed over contain managed values. This implies that the boxes\n-// will have headers that must be skipped over.\n-\n-trait FooTrait {\n-    fn foo(&self) -> uint;\n-}\n-\n-struct BarStruct {\n-    x: Gc<uint>\n-}\n-\n-impl FooTrait for BarStruct {\n-    fn foo(&self) -> uint {\n-        *self.x\n-    }\n-}\n-\n-pub fn main() {\n-    let foos: Vec<Box<FooTrait>> = vec!(\n-        box BarStruct{ x: box(GC) 0 } as Box<FooTrait>,\n-        box BarStruct{ x: box(GC) 1 } as Box<FooTrait>,\n-        box BarStruct{ x: box(GC) 2 } as Box<FooTrait>\n-    );\n-\n-    for i in range(0u, foos.len()) {\n-        assert_eq!(i, foos.get(i).foo());\n-    }\n-}"}, {"sha": "8bdae89e523fd3e102c146a7cad8f712d5f488cf", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,16 +11,14 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct dtor {\n-    x: Gc<Cell<int>>,\n+struct dtor<'a> {\n+    x: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for dtor {\n+impl<'a> Drop for dtor<'a> {\n     fn drop(&mut self) {\n-        // abuse access to shared mutable state to write this code\n         self.x.set(self.x.get() - 1);\n     }\n }\n@@ -33,7 +31,7 @@ fn unwrap<T>(o: Option<T>) -> T {\n }\n \n pub fn main() {\n-    let x = box(GC) Cell::new(1);\n+    let x = &Cell::new(1);\n \n     {\n         let b = Some(dtor { x:x });"}, {"sha": "8a10cc8c1ef4b4798d859e01c1e58f25cb279461", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,30 +11,28 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n \n-use std::gc::{Gc, GC};\n-\n struct A { a: int, b: int }\n-struct Abox { a: Gc<int>, b: Gc<int> }\n+struct Abox { a: Box<int>, b: Box<int> }\n \n-fn ret_int_i() -> int { return 10; }\n+fn ret_int_i() -> int { 10 }\n \n-fn ret_ext_i() -> Gc<int> { return box(GC) 10; }\n+fn ret_ext_i() -> Box<int> { box 10 }\n \n-fn ret_int_rec() -> A { return A {a: 10, b: 10}; }\n+fn ret_int_rec() -> A { A {a: 10, b: 10} }\n \n-fn ret_ext_rec() -> Gc<A> { return box(GC) A {a: 10, b: 10}; }\n+fn ret_ext_rec() -> Box<A> { box A {a: 10, b: 10} }\n \n-fn ret_ext_mem() -> Abox { return Abox {a: box(GC) 10, b: box(GC) 10}; }\n+fn ret_ext_mem() -> Abox { Abox {a: box 10, b: box 10} }\n \n-fn ret_ext_ext_mem() -> Gc<Abox> { box(GC) Abox{a: box(GC) 10, b: box(GC) 10} }\n+fn ret_ext_ext_mem() -> Box<Abox> { box Abox{a: box 10, b: box 10} }\n \n pub fn main() {\n     let mut int_i: int;\n-    let mut ext_i: Gc<int>;\n+    let mut ext_i: Box<int>;\n     let mut int_rec: A;\n-    let mut ext_rec: Gc<A>;\n+    let mut ext_rec: Box<A>;\n     let mut ext_mem: Abox;\n-    let mut ext_ext_mem: Gc<Abox>;\n+    let mut ext_ext_mem: Box<Abox>;\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing"}, {"sha": "e6bfc8ec1a53de6be5f18f5fa4b7a8549b4e6622", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,7 +10,6 @@\n \n \n use std::mem;\n-use std::gc::Gc;\n \n #[repr(packed)]\n struct S4 {\n@@ -48,7 +47,7 @@ struct S7_Option {\n     a: f32,\n     b: u8,\n     c: u16,\n-    d: Option<Gc<f64>>\n+    d: Option<Box<f64>>\n }\n \n // Placing packed structs in statics should work\n@@ -62,5 +61,5 @@ pub fn main() {\n     assert_eq!(mem::size_of::<S5>(), 5);\n     assert_eq!(mem::size_of::<S13>(), 13);\n     assert_eq!(mem::size_of::<S3_Foo>(), 3 + mem::size_of::<Foo>());\n-    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<Gc<f64>>>());\n+    assert_eq!(mem::size_of::<S7_Option>(), 7 + mem::size_of::<Option<Box<f64>>>());\n }"}, {"sha": "8967b07ca8823757b788c07edf1e52c79a515f88", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::Gc;\n use std::mem;\n \n #[repr(packed)]\n@@ -30,7 +29,7 @@ enum Foo {\n struct S3_Foo(u8, u16, Foo);\n \n #[repr(packed)]\n-struct S7_Option(f32, u8, u16, Option<Gc<f64>>);\n+struct S7_Option(f32, u8, u16, Option<Box<f64>>);\n \n pub fn main() {\n     assert_eq!(mem::size_of::<S4>(), 4);\n@@ -43,5 +42,5 @@ pub fn main() {\n                3 + mem::size_of::<Foo>());\n \n     assert_eq!(mem::size_of::<S7_Option>(),\n-              7 + mem::size_of::<Option<Gc<f64>>>());\n+              7 + mem::size_of::<Option<Box<f64>>>());\n }"}, {"sha": "88209192422508169b2fd7168d24978ff5ab69fd", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-extern crate debug;\n-\n-use std::gc::{GC, Gc};\n-\n-fn magic(x: A) { println!(\"{:?}\", x); }\n-fn magic2(x: Gc<int>) { println!(\"{:?}\", x); }\n-\n-struct A { a: Gc<int> }\n-\n-pub fn main() {\n-    let a = A {a: box(GC) 10};\n-    let b = box(GC) 10;\n-    magic(a); magic(A {a: box(GC) 20});\n-    magic2(b); magic2(box(GC) 20);\n-}"}, {"sha": "8ad2dbc1acb75965906deb0bbbfa23ce45fa3677", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n trait get {\n     fn get(self) -> int;\n }\n@@ -25,15 +23,6 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = box(GC) 6;\n-    let y = x.get();\n-    assert_eq!(y, 6);\n-\n-    let x = box(GC) 6;\n-    let y = x.get();\n-    println!(\"y={}\", y);\n-    assert_eq!(y, 6);\n-\n     let x = box 6;\n     let y = x.get();\n     println!(\"y={}\", y);"}, {"sha": "9a758c5d8ada48e9f2adfbe2d9f6dfb3007c1e39", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,14 +9,12 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn foo(x: &uint) -> uint {\n     *x\n }\n \n pub fn main() {\n-    let p = box(GC) 22u;\n+    let p = box 22u;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);"}, {"sha": "5b0b7cc5b4ef1a3e9dc501b4aac8cfc3f6b76257", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = box(GC) 3u;\n+    let p = box 3u;\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "1ecaf41702e0642a179c0dfc2885f92d2c22e3a9", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::gc::GC;\n-\n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n-    let x = box(GC) 3i;\n+    let x = box 3i;\n     loop {\n         let y = borrow(&*x);\n         assert_eq!(*x, *y);"}, {"sha": "d3dbca53f605f229c409ea528f788c3d26bed4c4", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,16 +9,14 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n struct Point {x: int, y: int}\n \n fn x_coord(p: &Point) -> &int {\n     return &p.x;\n }\n \n pub fn main() {\n-    let p = box(GC) Point {x: 3, y: 4};\n+    let p = box Point {x: 3, y: 4};\n     let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "5ea22ae76c2c06b904dd0f395d7ef7e0682456e6", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -10,36 +10,34 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-struct r {\n-    i: Gc<Cell<int>>,\n+#[deriving(Show)]\n+struct r<'a> {\n+    i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for r {\n+impl<'a> Drop for r<'a> {\n     fn drop(&mut self) {\n         self.i.set(self.i.get() + 1);\n     }\n }\n \n-fn r(i: Gc<Cell<int>>) -> r {\n+fn r(i: &Cell<int>) -> r {\n     r {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let i = box(GC) Cell::new(0i);\n+    let i = &Cell::new(0i);\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);\n         let b = (a, 10i);\n         let (c, _d) = b;\n-        println!(\"{:?}\", c);\n+        println!(\"{}\", c);\n     }\n     assert_eq!(i.get(), 1);\n }"}, {"sha": "71bf6cc626153d38e962626512f59fd66a4c9c96", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,31 +11,30 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{GC, Gc};\n \n-struct shrinky_pointer {\n-  i: Gc<Gc<Cell<int>>>,\n+struct shrinky_pointer<'a> {\n+  i: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for shrinky_pointer {\n+impl<'a> Drop for shrinky_pointer<'a> {\n     fn drop(&mut self) {\n         println!(\"Hello!\"); self.i.set(self.i.get() - 1);\n     }\n }\n \n-impl shrinky_pointer {\n+impl<'a> shrinky_pointer<'a> {\n     pub fn look_at(&self) -> int { return self.i.get(); }\n }\n \n-fn shrinky_pointer(i: Gc<Gc<Cell<int>>>) -> shrinky_pointer {\n+fn shrinky_pointer(i: &Cell<int>) -> shrinky_pointer {\n     shrinky_pointer {\n         i: i\n     }\n }\n \n pub fn main() {\n-    let my_total = box(GC) box(GC) Cell::new(10);\n+    let my_total = &Cell::new(10);\n     { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n     println!(\"my_total = {}\", my_total.get());\n     assert_eq!(my_total.get(), 9);"}, {"sha": "8e798fc6a0d28738f2c0289786efaa780e59a0a5", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -14,17 +14,16 @@\n // variant\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n-type closable = Gc<Cell<bool>>;\n+type closable<'a> = &'a Cell<bool>;\n \n-struct close_res {\n-  i: closable,\n+struct close_res<'a> {\n+  i: closable<'a>,\n \n }\n \n #[unsafe_destructor]\n-impl Drop for close_res {\n+impl<'a> Drop for close_res<'a> {\n     fn drop(&mut self) {\n         self.i.set(false);\n     }\n@@ -41,7 +40,7 @@ enum option<T> { none, some(T), }\n fn sink(_res: option<close_res>) { }\n \n pub fn main() {\n-    let c = box(GC) Cell::new(true);\n+    let c = &Cell::new(true);\n     sink(none);\n     sink(some(close_res(c)));\n     assert!(!c.get());"}, {"sha": "2d6da26df52a32220c2f0be94bf2b15700cebaf0", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,63 +9,59 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n // Exercises a bug in the shape code that was exposed\n // on x86_64: when there is an enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n \n-use std::gc::{Gc, GC};\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n enum opt_span {\n     //hack (as opposed to option), to make `span` compile\n     os_none,\n-    os_some(Gc<Span>),\n+    os_some(Box<Span>),\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Span {\n     lo: uint,\n     hi: uint,\n     expanded_from: opt_span,\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Spanned<T> {\n     data: T,\n     span: Span,\n }\n \n type ty_ = uint;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Path_ {\n     global: bool,\n     idents: Vec<String> ,\n-    types: Vec<Gc<ty>>,\n+    types: Vec<Box<ty>>,\n }\n \n type path = Spanned<Path_>;\n type ty = Spanned<ty_>;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct X {\n     sp: Span,\n     path: path,\n }\n \n pub fn main() {\n     let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: os_none};\n-    let t: Gc<ty> = box(GC) Spanned { data: 3u, span: sp };\n+    let t: Box<ty> = box Spanned { data: 3u, span: sp.clone() };\n     let p_: Path_ = Path_ {\n         global: true,\n         idents: vec!(\"hi\".to_string()),\n         types: vec!(t),\n     };\n-    let p: path = Spanned { data: p_, span: sp };\n+    let p: path = Spanned { data: p_, span: sp.clone() };\n     let x = X { sp: sp, path: p };\n-    println!(\"{:?}\", x.path.clone());\n-    println!(\"{:?}\", x.clone());\n+    println!(\"{}\", x.path.clone());\n+    println!(\"{}\", x.clone());\n }"}, {"sha": "41a9e6e53f251772d893ab56406fd7c56c000730", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -13,22 +13,21 @@\n // Don't try to clean up uninitialized locals\n \n use std::task;\n-use std::gc::{Gc};\n \n-fn test_break() { loop { let _x: Gc<int> = break; } }\n+fn test_break() { loop { let _x: Box<int> = break; } }\n \n-fn test_cont() { let mut i = 0i; while i < 1 { i += 1; let _x: Gc<int> = continue; } }\n+fn test_cont() { let mut i = 0i; while i < 1 { i += 1; let _x: Box<int> = continue; } }\n \n-fn test_ret() { let _x: Gc<int> = return; }\n+fn test_ret() { let _x: Box<int> = return; }\n \n fn test_fail() {\n-    fn f() { let _x: Gc<int> = fail!(); }\n+    fn f() { let _x: Box<int> = fail!(); }\n     task::try(proc() f() );\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail!(); }\n-    fn g() { let _x: Gc<int> = f(); }\n+    fn g() { let _x: Box<int> = f(); }\n     task::try(proc() g() );\n }\n "}, {"sha": "30acf07ae60c7e2cd113d974ba58bf9f6bc1a77a", "filename": "src/test/run-pass/trait-cast.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty FIXME(#14193)\n-\n-\n-// Test cyclic detector when using trait instances.\n-\n-use std::cell::RefCell;\n-use std::gc::{GC, Gc};\n-\n-struct Tree(Gc<RefCell<TreeR>>);\n-struct TreeR {\n-    left: Option<Tree>,\n-    right: Option<Tree>,\n-    val: Box<to_str+Send>\n-}\n-\n-trait to_str {\n-    fn to_str_(&self) -> String;\n-}\n-\n-impl<T:to_str> to_str for Option<T> {\n-    fn to_str_(&self) -> String {\n-        match *self {\n-          None => { \"none\".to_string() }\n-          Some(ref t) => format!(\"some({})\", t.to_str_()),\n-        }\n-    }\n-}\n-\n-impl to_str for int {\n-    fn to_str_(&self) -> String {\n-        self.to_string()\n-    }\n-}\n-\n-impl to_str for Tree {\n-    fn to_str_(&self) -> String {\n-        let Tree(t) = *self;\n-        let this = t.borrow();\n-        let (l, r) = (this.left, this.right);\n-        let val = &this.val;\n-        format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n-    }\n-}\n-\n-fn foo<T:to_str>(x: T) -> String { x.to_str_() }\n-\n-pub fn main() {\n-    let t1 = Tree(box(GC) RefCell::new(TreeR{left: None,\n-                                       right: None,\n-                                       val: box 1i as Box<to_str+Send>}));\n-    let t2 = Tree(box(GC) RefCell::new(TreeR{left: Some(t1),\n-                                       right: Some(t1),\n-                                       val: box 2i as Box<to_str+Send>}));\n-    let expected =\n-        \"[2, some([1, none, none]), some([1, none, none])]\".to_string();\n-    assert!(t2.to_str_() == expected);\n-    assert!(foo(t2) == expected);\n-\n-    {\n-        let Tree(t1_) = t1;\n-        let mut t1 = t1_.borrow_mut();\n-        t1.left = Some(t2); // create cycle\n-    }\n-}"}, {"sha": "7265ddf661501934187c9d9749d2278fc7a16c37", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }\n fn u_foo<T:Send>(_unique: T) { }\n@@ -31,15 +29,11 @@ fn r(i:int) -> r {\n \n pub fn main() {\n     p_foo(r(10));\n-    p_foo(box(GC) r(10));\n \n     p_foo(box r(10));\n-    p_foo(box(GC) 10i);\n     p_foo(box 10i);\n     p_foo(10i);\n \n-    s_foo(box(GC) r(10));\n-    s_foo(box(GC) 10i);\n     s_foo(box 10i);\n     s_foo(10i);\n "}, {"sha": "6d8e7d1aaf3fdb66fde42ce974851073f0f0484d", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -12,17 +12,15 @@\n // Example from lkuper's intern talk, August 2012 -- now with static\n // methods!\n \n-use std::gc::{GC, Gc};\n-\n trait Equal {\n-    fn isEq(a: Self, b: Self) -> bool;\n+    fn isEq(a: &Self, b: &Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    fn isEq(a: Color, b: Color) -> bool {\n-        match (a, b) {\n+    fn isEq(a: &Color, b: &Color) -> bool {\n+        match (*a, *b) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n           (yellow, yellow)   => { true  }\n@@ -34,35 +32,35 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(Gc<ColorTree>, Gc<ColorTree>)\n+    branch(Box<ColorTree>, Box<ColorTree>)\n }\n \n impl Equal for ColorTree {\n-    fn isEq(a: ColorTree, b: ColorTree) -> bool {\n+    fn isEq(a: &ColorTree, b: &ColorTree) -> bool {\n         match (a, b) {\n-          (leaf(x), leaf(y)) => { Equal::isEq(x, y) }\n-          (branch(l1, r1), branch(l2, r2)) => {\n-            Equal::isEq(*l1, *l2) && Equal::isEq(*r1, *r2)\n+          (&leaf(x), &leaf(y)) => { Equal::isEq(&x, &y) }\n+          (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n+            Equal::isEq(&**l1, &**l2) && Equal::isEq(&**r1, &**r2)\n           }\n           _ => { false }\n         }\n     }\n }\n \n pub fn main() {\n-    assert!(Equal::isEq(cyan, cyan));\n-    assert!(Equal::isEq(magenta, magenta));\n-    assert!(!Equal::isEq(cyan, yellow));\n-    assert!(!Equal::isEq(magenta, cyan));\n+    assert!(Equal::isEq(&cyan, &cyan));\n+    assert!(Equal::isEq(&magenta, &magenta));\n+    assert!(!Equal::isEq(&cyan, &yellow));\n+    assert!(!Equal::isEq(&magenta, &cyan));\n \n-    assert!(Equal::isEq(leaf(cyan), leaf(cyan)));\n-    assert!(!Equal::isEq(leaf(cyan), leaf(yellow)));\n+    assert!(Equal::isEq(&leaf(cyan), &leaf(cyan)));\n+    assert!(!Equal::isEq(&leaf(cyan), &leaf(yellow)));\n \n-    assert!(Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n-                branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n+    assert!(Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n+                &branch(box leaf(magenta), box leaf(cyan))));\n \n-    assert!(!Equal::isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan)),\n-                 branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n+    assert!(!Equal::isEq(&branch(box leaf(magenta), box leaf(cyan)),\n+                 &branch(box leaf(magenta), box leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "cbb85b2b7b814500ca3cdfd4b09089f856c803ab", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,17 +11,15 @@\n \n // Example from lkuper's intern talk, August 2012.\n \n-use std::gc::{GC, Gc};\n-\n trait Equal {\n-    fn isEq(&self, a: Self) -> bool;\n+    fn isEq(&self, a: &Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    fn isEq(&self, a: Color) -> bool {\n-        match (*self, a) {\n+    fn isEq(&self, a: &Color) -> bool {\n+        match (*self, *a) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n           (yellow, yellow)   => { true  }\n@@ -33,35 +31,35 @@ impl Equal for Color {\n \n enum ColorTree {\n     leaf(Color),\n-    branch(Gc<ColorTree>, Gc<ColorTree>)\n+    branch(Box<ColorTree>, Box<ColorTree>)\n }\n \n impl Equal for ColorTree {\n-    fn isEq(&self, a: ColorTree) -> bool {\n-        match (*self, a) {\n-          (leaf(x), leaf(y)) => { x.isEq(y) }\n-          (branch(l1, r1), branch(l2, r2)) => {\n-            (*l1).isEq(*l2) && (*r1).isEq(*r2)\n+    fn isEq(&self, a: &ColorTree) -> bool {\n+        match (self, a) {\n+          (&leaf(x), &leaf(y)) => { x.isEq(&y) }\n+          (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n+            (&**l1).isEq(&**l2) && (&**r1).isEq(&**r2)\n           }\n           _ => { false }\n         }\n     }\n }\n \n pub fn main() {\n-    assert!(cyan.isEq(cyan));\n-    assert!(magenta.isEq(magenta));\n-    assert!(!cyan.isEq(yellow));\n-    assert!(!magenta.isEq(cyan));\n+    assert!(cyan.isEq(&cyan));\n+    assert!(magenta.isEq(&magenta));\n+    assert!(!cyan.isEq(&yellow));\n+    assert!(!magenta.isEq(&cyan));\n \n-    assert!(leaf(cyan).isEq(leaf(cyan)));\n-    assert!(!leaf(cyan).isEq(leaf(yellow)));\n+    assert!(leaf(cyan).isEq(&leaf(cyan)));\n+    assert!(!leaf(cyan).isEq(&leaf(yellow)));\n \n-    assert!(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n-        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(cyan))));\n+    assert!(branch(box leaf(magenta), box leaf(cyan))\n+        .isEq(&branch(box leaf(magenta), box leaf(cyan))));\n \n-    assert!(!branch(box(GC) leaf(magenta), box(GC) leaf(cyan))\n-        .isEq(branch(box(GC) leaf(magenta), box(GC) leaf(magenta))));\n+    assert!(!branch(box leaf(magenta), box leaf(cyan))\n+        .isEq(&branch(box leaf(magenta), box leaf(magenta))));\n \n     println!(\"Assertions all succeeded!\");\n }"}, {"sha": "e342dcb365dfafbe74cdf63c6b4a11cd870937c4", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty FIXME(#14193)\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    none,\n-    p(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    a : maybe_pointy,\n-    d : proc():Send -> uint,\n-}\n-\n-fn make_uniq_closure<A:Send>(a: A) -> proc():Send -> uint {\n-    proc() { &a as *const A as uint }\n-}\n-\n-fn empty_pointy() -> Gc<RefCell<Pointy>> {\n-    return box(GC) RefCell::new(Pointy {\n-        a : none,\n-        d : make_uniq_closure(\"hi\".to_string())\n-    })\n-}\n-\n-pub fn main() {\n-    let v = empty_pointy();\n-    {\n-        let mut vb = v.borrow_mut();\n-        vb.a = p(v);\n-    }\n-}"}, {"sha": "c7aca64c7cb95205a66a3915ae980a01642399d9", "filename": "src/test/run-pass/uniq-cc.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::cell::RefCell;\n-use std::gc::{Gc, GC};\n-\n-enum maybe_pointy {\n-    none,\n-    p(Gc<RefCell<Pointy>>),\n-}\n-\n-struct Pointy {\n-    a : maybe_pointy,\n-    c : Box<int>,\n-    d : proc():Send->(),\n-}\n-\n-fn empty_pointy() -> Gc<RefCell<Pointy>> {\n-    return box(GC) RefCell::new(Pointy {\n-        a : none,\n-        c : box 22,\n-        d : proc() {},\n-    })\n-}\n-\n-pub fn main() {\n-    let v = empty_pointy();\n-    {\n-        let mut vb = v.borrow_mut();\n-        vb.a = p(v);\n-    }\n-}"}, {"sha": "493ec8ddc207d5b7a8763fc6a46fb4f64ad09fb4", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use std::gc::GC;\n-\n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1\n@@ -19,6 +17,4 @@ fn f<T>(t: T) -> T {\n pub fn main() {\n     let t = f(box 100i);\n     assert_eq!(t, box 100i);\n-    let t = f(box box(GC) vec!(100i));\n-    assert_eq!(t, box box(GC) vec!(100i));\n }"}, {"sha": "70c8c5b64e40836e8e5e85a63225c9943ec02b23", "filename": "src/test/run-pass/unwind-box.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::task;\n-use std::gc::GC;\n-\n-fn f() {\n-    let _a = box(GC) 0i;\n-    fail!();\n-}\n-\n-pub fn main() {\n-    task::spawn(f);\n-}"}, {"sha": "6d04c0e26ad0ca752706a199b0b23458d3e2ccdc", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unsafe_destructor)]\n-\n-use std::task;\n-use std::gc::{Gc, GC};\n-\n-struct complainer {\n-  c: Gc<int>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for complainer {\n-    fn drop(&mut self) {}\n-}\n-\n-fn complainer(c: Gc<int>) -> complainer {\n-    complainer {\n-        c: c\n-    }\n-}\n-\n-fn f() {\n-    let _c = complainer(box(GC) 0);\n-    fail!();\n-}\n-\n-pub fn main() {\n-    task::spawn(f);\n-}"}, {"sha": "6cc95a2e548b17b41c0dfb5dac4254a4a2592b0b", "filename": "src/test/run-pass/vec-drop.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa59693565efea3d55a6981b135df77c37c361fc/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=aa59693565efea3d55a6981b135df77c37c361fc", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use std::gc::{GC, Gc};\n-\n-struct Pair { x: int, y: int }\n-\n-pub fn main() {\n-    // This just tests whether the vec leaks its members.\n-\n-    let _pvec: Vec<Gc<Pair>> =\n-        vec!(box(GC) Pair{x: 1, y: 2},\n-             box(GC) Pair{x: 3, y: 4},\n-             box(GC) Pair{x: 5, y: 6});\n-}"}, {"sha": "498ec0e8fbaf1ae8974bea837a057c763bd8ae43", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,28 +11,27 @@\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;\n-use std::gc::{Gc, GC};\n \n // Make sure that destructors get run on slice literals\n-struct foo {\n-    x: Gc<Cell<int>>,\n+struct foo<'a> {\n+    x: &'a Cell<int>,\n }\n \n #[unsafe_destructor]\n-impl Drop for foo {\n+impl<'a> Drop for foo<'a> {\n     fn drop(&mut self) {\n         self.x.set(self.x.get() + 1);\n     }\n }\n \n-fn foo(x: Gc<Cell<int>>) -> foo {\n+fn foo(x: &Cell<int>) -> foo {\n     foo {\n         x: x\n     }\n }\n \n pub fn main() {\n-    let x = box(GC) Cell::new(0);\n+    let x = &Cell::new(0);\n     {\n         let l = &[foo(x)];\n         assert_eq!(l[0].x.get(), 0);"}, {"sha": "72204c28f82ade773eb42141ea6cc504ec2f3df1", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bea31ca0e11bf49439d33e1d21f11de7161567/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=58bea31ca0e11bf49439d33e1d21f11de7161567", "patch": "@@ -11,7 +11,6 @@\n \n use std::cell::Cell;\n use std::mem::swap;\n-use std::gc::{Gc, GC};\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n \n@@ -23,10 +22,10 @@ fn funny() {\n }\n \n fn what() {\n-    fn the(x: Gc<Cell<bool>>) {\n+    fn the(x: &Cell<bool>) {\n         return while !x.get() { x.set(true); };\n     }\n-    let i = box(GC) Cell::new(false);\n+    let i = &Cell::new(false);\n     let dont = {||the(i)};\n     dont();\n     assert!((i.get()));"}]}