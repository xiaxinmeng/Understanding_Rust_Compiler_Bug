{"sha": "00e672a51b0caec9e2bb7004281ce2f57bdbefe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTY3MmE1MWIwY2FlYzllMmJiNzAwNDI4MWNlMmY1N2JkYmVmZTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-11T17:38:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-11T17:38:05Z"}, "message": "Merge #3112\n\n3112: Return early, return often r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5a3715910dbe92240f07bd1fc470f633ea4d267b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3715910dbe92240f07bd1fc470f633ea4d267b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e672a51b0caec9e2bb7004281ce2f57bdbefe5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQuZ9CRBK7hj4Ov3rIwAAdHIIAJHANheMLpBp3neqkYgTUPOv\nnsZjwnbD9v8jOago2AvIXFGVsXBL5RhSmwT2f9ryRAc12UU29KNP05bU+JBt4cVt\n4fCkBrRIY8neuNXMJ/GnAK9KbZ+oprOBWwPkIERD0yPLJ3rLpbCoVfiFSJBwCeNM\n6d5bguy+EIEMgekYJKimRCYpdNcHTrXKsWSY5JWxJIijrAEFhWVmI7yemDoA5tfZ\nYY0mRJhog/9fBFTGnuvF6fJ7yNOGfAAoD9Upf6/lm94ED0gEU341g/Zfox7U7AMm\nOvDx2HxTiMj5EQuL/9Yifb3mjg+aKVJ6KhmY1KaGWnaPkMJ6InjhIvQHpMTmmXw=\n=7QQr\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a3715910dbe92240f07bd1fc470f633ea4d267b\nparent 305d9219823f5c0a6ffe526351b225b410702dfd\nparent f3dd0a05bb9135d4c3b70243d4dde15e02355910\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581442685 +0000\ncommitter GitHub <noreply@github.com> 1581442685 +0000\n\nMerge #3112\n\n3112: Return early, return often r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e672a51b0caec9e2bb7004281ce2f57bdbefe5", "html_url": "https://github.com/rust-lang/rust/commit/00e672a51b0caec9e2bb7004281ce2f57bdbefe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e672a51b0caec9e2bb7004281ce2f57bdbefe5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "305d9219823f5c0a6ffe526351b225b410702dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/305d9219823f5c0a6ffe526351b225b410702dfd", "html_url": "https://github.com/rust-lang/rust/commit/305d9219823f5c0a6ffe526351b225b410702dfd"}, {"sha": "f3dd0a05bb9135d4c3b70243d4dde15e02355910", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dd0a05bb9135d4c3b70243d4dde15e02355910", "html_url": "https://github.com/rust-lang/rust/commit/f3dd0a05bb9135d4c3b70243d4dde15e02355910"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "01fb32b3dfd8b9cc59a23d9e807e862aee01800f", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/00e672a51b0caec9e2bb7004281ce2f57bdbefe5/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e672a51b0caec9e2bb7004281ce2f57bdbefe5/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=00e672a51b0caec9e2bb7004281ce2f57bdbefe5", "patch": "@@ -60,36 +60,15 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n         return;\n     }\n \n-    // Special case that turns something like:\n-    //\n-    // ```\n-    // my_function({<|>\n-    //    <some-expr>\n-    // })\n-    // ```\n-    //\n-    // into `my_function(<some-expr>)`\n-    if join_single_expr_block(edit, token).is_some() {\n-        return;\n-    }\n-    // ditto for\n-    //\n-    // ```\n-    // use foo::{<|>\n-    //    bar\n-    // };\n-    // ```\n-    if join_single_use_tree(edit, token).is_some() {\n-        return;\n-    }\n-\n     // The node is between two other nodes\n     let prev = token.prev_sibling_or_token().unwrap();\n     let next = token.next_sibling_or_token().unwrap();\n     if is_trailing_comma(prev.kind(), next.kind()) {\n         // Removes: trailing comma, newline (incl. surrounding whitespace)\n         edit.delete(TextRange::from_to(prev.text_range().start(), token.text_range().end()));\n-    } else if prev.kind() == T![,] && next.kind() == T!['}'] {\n+        return;\n+    }\n+    if prev.kind() == T![,] && next.kind() == T!['}'] {\n         // Removes: comma, newline (incl. surrounding whitespace)\n         let space = if let Some(left) = prev.prev_sibling_or_token() {\n             compute_ws(left.kind(), next.kind())\n@@ -100,7 +79,10 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n             TextRange::from_to(prev.text_range().start(), token.text_range().end()),\n             space.to_string(),\n         );\n-    } else if let (Some(_), Some(next)) = (\n+        return;\n+    }\n+\n+    if let (Some(_), Some(next)) = (\n         prev.as_token().cloned().and_then(ast::Comment::cast),\n         next.as_token().cloned().and_then(ast::Comment::cast),\n     ) {\n@@ -109,10 +91,34 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n             token.text_range().start(),\n             next.syntax().text_range().start() + TextUnit::of_str(next.prefix()),\n         ));\n-    } else {\n-        // Remove newline but add a computed amount of whitespace characters\n-        edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n+        return;\n+    }\n+\n+    // Special case that turns something like:\n+    //\n+    // ```\n+    // my_function({<|>\n+    //    <some-expr>\n+    // })\n+    // ```\n+    //\n+    // into `my_function(<some-expr>)`\n+    if join_single_expr_block(edit, token).is_some() {\n+        return;\n     }\n+    // ditto for\n+    //\n+    // ```\n+    // use foo::{<|>\n+    //    bar\n+    // };\n+    // ```\n+    if join_single_use_tree(edit, token).is_some() {\n+        return;\n+    }\n+\n+    // Remove newline but add a computed amount of whitespace characters\n+    edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n }\n \n fn has_comma_after(node: &SyntaxNode) -> bool {\n@@ -608,4 +614,27 @@ pub fn handle_find_matching_brace() {\n }\",\n         );\n     }\n+\n+    #[test]\n+    fn test_join_lines_commented_block() {\n+        check_join_lines(\n+            r\"\n+fn main() {\n+    let _ = {\n+        // <|>foo\n+        // bar\n+        92\n+    };\n+}\n+        \",\n+            r\"\n+fn main() {\n+    let _ = {\n+        // <|>foo bar\n+        92\n+    };\n+}\n+        \",\n+        )\n+    }\n }"}]}