{"sha": "8163cb53903dd09e920b6267eba72793394b77d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjNjYjUzOTAzZGQwOWU5MjBiNjI2N2ViYTcyNzkzMzk0Yjc3ZDA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T18:59:46Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-30T18:59:46Z"}, "message": "std::iter: Introduce .by_ref() adaptor\n\nCreates a wrapper around a mutable reference to the iterator.\n\nThis is useful to allow applying iterator adaptors while still\nretaining ownership of the original iterator value.\n\nExample::\n\n   let mut xs = range(0, 10);\n   // sum the first five values\n   let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n   assert!(partial_sum == 10);\n   // xs.next() is now `5`\n   assert!(xs.next() == Some(5));", "tree": {"sha": "b68d1c18f17c947a08af5dcd462fac572474909c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68d1c18f17c947a08af5dcd462fac572474909c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8163cb53903dd09e920b6267eba72793394b77d0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8163cb53903dd09e920b6267eba72793394b77d0", "html_url": "https://github.com/rust-lang/rust/commit/8163cb53903dd09e920b6267eba72793394b77d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8163cb53903dd09e920b6267eba72793394b77d0/comments", "author": null, "committer": null, "parents": [{"sha": "92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e7bb67a8038ff73ad9dc88d8be3d3df4777282", "html_url": "https://github.com/rust-lang/rust/commit/92e7bb67a8038ff73ad9dc88d8be3d3df4777282"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "255f869a9056c239142440c581b9d06e7e538906", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8163cb53903dd09e920b6267eba72793394b77d0/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163cb53903dd09e920b6267eba72793394b77d0/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=8163cb53903dd09e920b6267eba72793394b77d0", "patch": "@@ -405,6 +405,25 @@ pub trait Iterator<A> {\n         Inspect{iter: self, f: f}\n     }\n \n+    /// Creates a wrapper around a mutable reference to the iterator.\n+    ///\n+    /// This is useful to allow applying iterator adaptors while still\n+    /// retaining ownership of the original iterator value.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut xs = range(0, 10);\n+    /// // sum the first five values\n+    /// let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n+    /// assert!(partial_sum == 10);\n+    /// // xs.next() is now `5`\n+    /// assert!(xs.next() == Some(5));\n+    /// ```\n+    fn by_ref<'r>(&'r mut self) -> ByRef<'r, Self> {\n+        ByRef{iter: self}\n+    }\n+\n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n     /// # Example\n@@ -771,6 +790,22 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n     }\n }\n \n+/// A mutable reference to an iterator\n+pub struct ByRef<'self, T> {\n+    priv iter: &'self mut T\n+}\n+\n+impl<'self, A, T: Iterator<A>> Iterator<A> for ByRef<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { self.iter.next() }\n+    // FIXME: #9629 we cannot implement &self methods like size_hint on ByRef\n+}\n+\n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for ByRef<'self, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.iter.next_back() }\n+}\n+\n /// A trait for iterators over elements which can be added together\n pub trait AdditiveIterator<A> {\n     /// Iterates over the entire iterator, summing up all the elements\n@@ -2500,6 +2535,15 @@ mod tests {\n         assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_by_ref() {\n+        let mut xs = range(0, 10);\n+        // sum the first five values\n+        let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n+        assert_eq!(partial_sum, 10);\n+        assert_eq!(xs.next(), Some(5));\n+    }\n+\n     #[test]\n     fn test_invert() {\n         let xs = [2, 4, 6, 8, 10, 12, 14, 16];"}]}