{"sha": "d7a3256d4080ce4f125443f6894a3dfaf108e15b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTMyNTZkNDA4MGNlNGYxMjU0NDNmNjg5NGEzZGZhZjEwOGUxNWI=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-01-10T05:45:58Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-01-12T04:26:45Z"}, "message": "If where is on the same line as the impl, { is put on the same line fixes #650\n\nfactored if clause into a separate function", "tree": {"sha": "1ca8199d96698ff00d08f0fe05a1cc38718b6700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca8199d96698ff00d08f0fe05a1cc38718b6700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a3256d4080ce4f125443f6894a3dfaf108e15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a3256d4080ce4f125443f6894a3dfaf108e15b", "html_url": "https://github.com/rust-lang/rust/commit/d7a3256d4080ce4f125443f6894a3dfaf108e15b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a3256d4080ce4f125443f6894a3dfaf108e15b/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b236819f7222c43749e500970b52ee671d68a67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b236819f7222c43749e500970b52ee671d68a67a", "html_url": "https://github.com/rust-lang/rust/commit/b236819f7222c43749e500970b52ee671d68a67a"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "3e251ad1e39958e848208c7c52fa7e22b29bca34", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7a3256d4080ce4f125443f6894a3dfaf108e15b/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a3256d4080ce4f125443f6894a3dfaf108e15b/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=d7a3256d4080ce4f125443f6894a3dfaf108e15b", "patch": "@@ -270,6 +270,7 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,"}, {"sha": "75eda01c870659d57fc2ff924b5363d627d7640d", "filename": "src/items.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7a3256d4080ce4f125443f6894a3dfaf108e15b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a3256d4080ce4f125443f6894a3dfaf108e15b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d7a3256d4080ce4f125443f6894a3dfaf108e15b", "patch": "@@ -25,6 +25,8 @@ use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, Struct\n use syntax::{ast, abi};\n use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::parse::token;\n+use syntax::ast::ImplItem;\n+use syntax::ptr::P;\n \n // Statements of the form\n // let pat: ty = init;\n@@ -485,8 +487,18 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                                              context.config.where_density,\n                                                              \"{\",\n                                                              None));\n-        if !where_clause_str.contains('\\n') &&\n-           result.len() + where_clause_str.len() + offset.width() > context.config.max_width {\n+\n+        if try_opt!(is_impl_single_line(context, &items, &result, &where_clause_str, &item)) {\n+            result.push_str(&where_clause_str);\n+            if where_clause_str.contains('\\n') {\n+                result.push_str(\"\\n{\\n}\");\n+            } else {\n+                result.push_str(\" {}\");\n+            }\n+            return Some(result);\n+        }\n+\n+        if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') {\n             result.push('\\n');\n             let width = context.block_indent.width() + context.config.tab_spaces - 1;\n             let where_indent = Indent::new(0, width);\n@@ -505,6 +517,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                 }\n             }\n         }\n+\n         result.push('{');\n \n         let snippet = context.snippet(item.span);\n@@ -531,13 +544,31 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n             result.push_str(&outer_indent_str);\n         }\n \n+        if result.chars().last().unwrap() == '{' {\n+            result.push('\\n');\n+        }\n         result.push('}');\n+\n         Some(result)\n     } else {\n         unreachable!();\n     }\n }\n \n+fn is_impl_single_line(context: &RewriteContext,\n+                       items: &Vec<P<ImplItem>>,\n+                       result: &str,\n+                       where_clause_str: &str,\n+                       item: &ast::Item)\n+                       -> Option<bool> {\n+    let snippet = context.snippet(item.span);\n+    let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n+\n+    Some(context.config.impl_empty_single_line && items.is_empty() &&\n+         result.len() + where_clause_str.len() <= context.config.max_width &&\n+         !contains_comment(&snippet[open_pos..]))\n+}\n+\n pub fn format_struct(context: &RewriteContext,\n                      item_name: &str,\n                      ident: ast::Ident,"}, {"sha": "d04b5ce1eebd6969f9f5cd26111ef7bd844aa7a3", "filename": "tests/source/impls.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7a3256d4080ce4f125443f6894a3dfaf108e15b/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a3256d4080ce4f125443f6894a3dfaf108e15b/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=d7a3256d4080ce4f125443f6894a3dfaf108e15b", "patch": "@@ -22,6 +22,12 @@ impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Fooooooooooooooo\n     fn foo() { \"hi\" }    \n }\n \n+impl<T> Foo for Bar<T> where T: Baz \n+{\n+}\n+\n+impl<T> Foo for Bar<T> where T: Baz { /* Comment */ }\n+\n impl Foo {\n     fn foo() {}\n }\n@@ -64,3 +70,10 @@ impl X { fn do_parse(  mut  self : X ) {} }\n impl Y5000 {\n     fn bar(self: X< 'a ,  'b >, y: Y) {}\n }\n+\n+pub impl<T> Foo for Bar<T> where T: Foo\n+{\n+    fn foo() { \"hi\" }\n+}\n+\n+pub impl<T, Z> Foo for Bar<T, Z> where T: Foo, Z: Baz {}"}, {"sha": "33bc7481905016f1b9dd3aa3ec38082a3ebbab0a", "filename": "tests/target/impls.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d7a3256d4080ce4f125443f6894a3dfaf108e15b/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a3256d4080ce4f125443f6894a3dfaf108e15b/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=d7a3256d4080ce4f125443f6894a3dfaf108e15b", "patch": "@@ -16,7 +16,8 @@ pub impl Foo for Bar {\n     // Comment 3\n }\n \n-pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z>\n+pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y>\n+    where X: Foo<'a, Z>\n {\n     fn foo() {\n         \"hi\"\n@@ -31,13 +32,22 @@ impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y>\n     }\n }\n \n-impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Foooooooooooooooooooooooooooo<'a, Z>\n+impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y>\n+    where X: Foooooooooooooooooooooooooooo<'a, Z>\n {\n     fn foo() {\n         \"hi\"\n     }\n }\n \n+impl<T> Foo for Bar<T> where T: Baz {}\n+\n+impl<T> Foo for Bar<T>\n+    where T: Baz\n+{\n+    // Comment\n+}\n+\n impl Foo {\n     fn foo() {}\n }\n@@ -80,3 +90,17 @@ impl X {\n impl Y5000 {\n     fn bar(self: X<'a, 'b>, y: Y) {}\n }\n+\n+pub impl<T> Foo for Bar<T>\n+    where T: Foo\n+{\n+    fn foo() {\n+        \"hi\"\n+    }\n+}\n+\n+pub impl<T, Z> Foo for Bar<T, Z>\n+    where T: Foo,\n+          Z: Baz\n+{\n+}"}]}