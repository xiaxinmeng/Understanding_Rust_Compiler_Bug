{"sha": "0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "node_id": "C_kwDOAAsO6NoAKDAwNDliNWIwYmM4M2M5OWYzMDRlYWM5Y2UwZGZiYTFiYjAyOTY4YTg", "commit": {"author": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-28T02:20:29Z"}, "committer": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-28T02:20:29Z"}, "message": "initial commit", "tree": {"sha": "7e32d503812ce9b9f9f3d61c2fb01859bb7d7dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e32d503812ce9b9f9f3d61c2fb01859bb7d7dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "html_url": "https://github.com/rust-lang/rust/commit/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/comments", "author": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533ca584c31a251bc47f978b55df9b69058dabba", "url": "https://api.github.com/repos/rust-lang/rust/commits/533ca584c31a251bc47f978b55df9b69058dabba", "html_url": "https://github.com/rust-lang/rust/commit/533ca584c31a251bc47f978b55df9b69058dabba"}], "stats": {"total": 218, "additions": 184, "deletions": 34}, "files": [{"sha": "2b1ee58d53bbbc43075beaa606ac9457bd0307bf", "filename": "crates/ide_assists/src/handlers/move_from_mod_rs.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -0,0 +1,131 @@\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    base_db::AnchoredPathBuf,\n+};\n+use syntax::{ast, AstNode, TextRange};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+use crate::utils::trimmed_text_range;\n+\n+// Assist: move_from_mod_rs\n+//\n+// Moves xxx/mod.rs to xxx.rs.\n+//\n+// ```\n+// //- /main.rs\n+// mod a;\n+// //- /a/mod.rs\n+// $0fn t() {}$0\n+// ```\n+// ->\n+// ```\n+// fn t() {}\n+// ```\n+pub(crate) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n+    let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n+    // Enable this assist if the user select all \"meaningful\" content in the source file\n+    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.frange.range);\n+    let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n+    if !module.is_mod_rs(ctx.db()) {\n+        cov_mark::hit!(not_mod_rs);\n+        return None;\n+    }\n+    if trimmed_selected_range != trimmed_file_range {\n+        cov_mark::hit!(not_all_selected);\n+        return None;\n+    }\n+\n+    let target = TextRange::new(\n+        source_file.syntax().text_range().start(),\n+        source_file.syntax().text_range().end(),\n+    );\n+    let module_name = module.name(ctx.db())?.to_string();\n+    let path = format!(\"../{}.rs\", module_name);\n+    let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+    acc.add(\n+        AssistId(\"move_from_mod_rs\", AssistKind::Refactor),\n+        format!(\"Turn {}/mod.rs to {}.rs\", module_name, module_name),\n+        target,\n+        |builder| {\n+            builder.move_file(ctx.frange.file_id, dst);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn trivial() {\n+        check_assist(\n+            move_from_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+$0fn t() {}\n+$0\"#,\n+            r#\"\n+//- /a.rs\n+fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn must_select_all_file() {\n+        cov_mark::check!(not_all_selected);\n+        check_assist_not_applicable(\n+            move_from_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+fn t() {}$0\n+\"#,\n+        );\n+        cov_mark::check!(not_all_selected);\n+        check_assist_not_applicable(\n+            move_from_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+$0fn$0 t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_move_not_mod_rs() {\n+        cov_mark::check!(not_mod_rs);\n+        check_assist_not_applicable(\n+            move_from_mod_rs,\n+            r#\"//- /main.rs\n+mod a;\n+//- /a.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_downgrade_main_and_lib_rs() {\n+        check_assist_not_applicable(\n+            move_from_mod_rs,\n+            r#\"//- /main.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+        check_assist_not_applicable(\n+            move_from_mod_rs,\n+            r#\"//- /lib.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "3f8340b729634c885e4c58962f0254dc033f260d", "filename": "crates/ide_assists/src/handlers/move_to_mod_rs.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -2,38 +2,10 @@ use ide_db::{\n     assists::{AssistId, AssistKind},\n     base_db::AnchoredPathBuf,\n };\n-use syntax::{\n-    ast::{self, Whitespace},\n-    AstNode, AstToken, SourceFile, TextRange, TextSize,\n-};\n+use syntax::{ast, AstNode, TextRange};\n \n use crate::assist_context::{AssistContext, Assists};\n-\n-/// Trim(remove leading and trailing whitespace) `initial_range` in `source_file`, return the trimmed range.\n-fn trimmed_text_range(source_file: &SourceFile, initial_range: TextRange) -> TextRange {\n-    let mut trimmed_range = initial_range;\n-    while source_file\n-        .syntax()\n-        .token_at_offset(trimmed_range.start())\n-        .find_map(Whitespace::cast)\n-        .is_some()\n-        && trimmed_range.start() < trimmed_range.end()\n-    {\n-        let start = trimmed_range.start() + TextSize::from(1);\n-        trimmed_range = TextRange::new(start, trimmed_range.end());\n-    }\n-    while source_file\n-        .syntax()\n-        .token_at_offset(trimmed_range.end())\n-        .find_map(Whitespace::cast)\n-        .is_some()\n-        && trimmed_range.start() < trimmed_range.end()\n-    {\n-        let end = trimmed_range.end() - TextSize::from(1);\n-        trimmed_range = TextRange::new(trimmed_range.start(), end);\n-    }\n-    trimmed_range\n-}\n+use crate::utils::trimmed_text_range;\n \n // Assist: move_to_mod_rs\n //"}, {"sha": "d41d06f2d971ab2034043c2179f13c0bd9186b19", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -154,6 +154,7 @@ mod handlers {\n     mod move_guard;\n     mod move_module_to_file;\n     mod move_to_mod_rs;\n+    mod move_from_mod_rs;\n     mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n@@ -229,6 +230,7 @@ mod handlers {\n             move_guard::move_guard_to_arm_body,\n             move_module_to_file::move_module_to_file,\n             move_to_mod_rs::move_to_mod_rs,\n+            move_from_mod_rs::move_from_mod_rs,\n             pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,"}, {"sha": "7f3c93d74031b50e637094d1b5a35a63f0803162", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -169,7 +169,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n                 let sr = db.source_root(sr);\n                 let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n                 base.pop();\n-                let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                let created_file_path = base.join(&dst.path).unwrap();\n                 format_to!(buf, \"//- {}\\n\", created_file_path);\n                 buf.push_str(&contents);\n             }"}, {"sha": "9ad7b6097a6f7ceaca687cab880545bcbcd07bde", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -1296,6 +1296,22 @@ fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n     )\n }\n \n+#[test]\n+fn doctest_move_from_mod_rs() {\n+    check_doc_test(\n+        \"move_from_mod_rs\",\n+        r#####\"\n+//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+$0fn t() {}$0\n+\"#####,\n+        r#####\"\n+fn t() {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_move_guard_to_arm_body() {\n     check_doc_test("}, {"sha": "5273a3107b190aaa234fd2731c36e773b9da6779", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -14,11 +14,11 @@ use syntax::{\n         self,\n         edit::{self, AstNodeEdit},\n         edit_in_place::AttrsOwnerEdit,\n-        make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds,\n+        make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n-    ted, AstNode, Direction, SmolStr,\n+    ted, AstNode, AstToken, Direction, SmolStr, SourceFile,\n     SyntaxKind::*,\n-    SyntaxNode, TextSize, T,\n+    SyntaxNode, TextRange, TextSize, T,\n };\n \n use crate::assist_context::{AssistBuilder, AssistContext};\n@@ -500,3 +500,29 @@ pub(crate) fn get_methods(items: &ast::AssocItemList) -> Vec<ast::Fn> {\n         .filter(|f| f.name().is_some())\n         .collect()\n }\n+\n+/// Trim(remove leading and trailing whitespace) `initial_range` in `source_file`, return the trimmed range.\n+pub(crate) fn trimmed_text_range(source_file: &SourceFile, initial_range: TextRange) -> TextRange {\n+    let mut trimmed_range = initial_range;\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.start())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let start = trimmed_range.start() + TextSize::from(1);\n+        trimmed_range = TextRange::new(start, trimmed_range.end());\n+    }\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.end())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let end = trimmed_range.end() - TextSize::from(1);\n+        trimmed_range = TextRange::new(trimmed_range.start(), end);\n+    }\n+    trimmed_range\n+}"}, {"sha": "9f704d6ebe52df5ab78c08a2dbd5f4c2878d0913", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0049b5b0bc83c99f304eac9ce0dfba1bb02968a8/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=0049b5b0bc83c99f304eac9ce0dfba1bb02968a8", "patch": "@@ -359,6 +359,9 @@ impl VirtualPath {\n             }\n             path = &path[\"../\".len()..]\n         }\n+        while path.starts_with(\"./\") {\n+            path = &path[\"./\".len()..]\n+        }\n         res.0 = format!(\"{}/{}\", res.0, path);\n         Some(res)\n     }"}]}