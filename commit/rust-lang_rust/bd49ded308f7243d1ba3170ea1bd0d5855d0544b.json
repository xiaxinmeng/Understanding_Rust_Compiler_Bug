{"sha": "bd49ded308f7243d1ba3170ea1bd0d5855d0544b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDlkZWQzMDhmNzI0M2QxYmEzMTcwZWExYmQwZDU4NTVkMDU0NGI=", "commit": {"author": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2020-10-09T09:12:54Z"}, "committer": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2020-10-09T09:12:54Z"}, "message": "Noticed a potential bug in `eat_while()`: it doesn't account for number of UTF8 bytes.\nFixed it by inlining it in the two places where the count is used and simplified the logic there.", "tree": {"sha": "fc049ee4322a30a08cc0e97a6fe70365752cda26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc049ee4322a30a08cc0e97a6fe70365752cda26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd49ded308f7243d1ba3170ea1bd0d5855d0544b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd49ded308f7243d1ba3170ea1bd0d5855d0544b", "html_url": "https://github.com/rust-lang/rust/commit/bd49ded308f7243d1ba3170ea1bd0d5855d0544b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd49ded308f7243d1ba3170ea1bd0d5855d0544b/comments", "author": null, "committer": null, "parents": [{"sha": "d890e64dff3fd2c28635c60cc9315648dd46c8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d890e64dff3fd2c28635c60cc9315648dd46c8f7", "html_url": "https://github.com/rust-lang/rust/commit/d890e64dff3fd2c28635c60cc9315648dd46c8f7"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "c5b59a041abf6a99e620ba33397907eccfa488ee", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd49ded308f7243d1ba3170ea1bd0d5855d0544b/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd49ded308f7243d1ba3170ea1bd0d5855d0544b/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=bd49ded308f7243d1ba3170ea1bd0d5855d0544b", "patch": "@@ -48,6 +48,7 @@ impl Token {\n }\n \n /// Enum representing common lexeme types.\n+// perf note: Changing all `usize` to `u32` doesn't change performance. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum TokenKind {\n     // Multi-char tokens:\n@@ -160,6 +161,7 @@ pub enum LiteralKind {\n /// - `r##~\"abcde\"##`: `InvalidStarter`\n /// - `r###\"abcde\"##`: `NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n /// - Too many `#`s (>65535): `TooManyDelimiters`\n+// perf note: It doesn't matter that this makes `Token` 36 bytes bigger. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum RawStrError {\n     /// Non `#` characters exist between `r` and `\"` eg. `r#~\"..`\n@@ -689,7 +691,12 @@ impl Cursor<'_> {\n         let mut max_hashes = 0;\n \n         // Count opening '#' symbols.\n-        let n_start_hashes = self.eat_while(|c| c == '#');\n+        let mut eaten = 0;\n+        while self.first() == '#' {\n+            eaten += 1;\n+            self.bump();\n+        }\n+        let n_start_hashes = eaten;\n \n         // Check that string is started.\n         match self.bump() {\n@@ -724,16 +731,11 @@ impl Cursor<'_> {\n             // Note that this will not consume extra trailing `#` characters:\n             // `r###\"abcde\"####` is lexed as a `RawStr { n_hashes: 3 }`\n             // followed by a `#` token.\n-            let mut hashes_left = n_start_hashes;\n-            let is_closing_hash = |c| {\n-                if c == '#' && hashes_left != 0 {\n-                    hashes_left -= 1;\n-                    true\n-                } else {\n-                    false\n-                }\n-            };\n-            let n_end_hashes = self.eat_while(is_closing_hash);\n+            let mut n_end_hashes = 0;\n+            while self.first() == '#' && n_end_hashes < n_start_hashes {\n+                n_end_hashes += 1;\n+                self.bump();\n+            }\n \n             if n_end_hashes == n_start_hashes {\n                 return (n_start_hashes, None);\n@@ -807,17 +809,9 @@ impl Cursor<'_> {\n     }\n \n     /// Eats symbols while predicate returns true or until the end of file is reached.\n-    /// Returns amount of eaten symbols.\n-    fn eat_while<F>(&mut self, mut predicate: F) -> usize\n-    where\n-        F: FnMut(char) -> bool,\n-    {\n-        let mut eaten: usize = 0;\n+    fn eat_while(&mut self, mut predicate: impl FnMut(char) -> bool) {\n         while predicate(self.first()) && !self.is_eof() {\n-            eaten += 1;\n             self.bump();\n         }\n-\n-        eaten\n     }\n }"}]}