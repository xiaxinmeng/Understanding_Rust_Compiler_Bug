{"sha": "6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZDhlYTFhNmI4ODU0NWU1OTQ0MmEzNjAzZjFiMjM1Y2Y1N2UzYmE=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-11-09T23:15:02Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-12-01T06:24:53Z"}, "message": "Added run-pass tests for associated generic types", "tree": {"sha": "97cf4d058762be2c18b6aff64d481b23620edbb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97cf4d058762be2c18b6aff64d481b23620edbb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "html_url": "https://github.com/rust-lang/rust/commit/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e25b61d10e359ab1ef0778eb12c33b3f3437fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e25b61d10e359ab1ef0778eb12c33b3f3437fb", "html_url": "https://github.com/rust-lang/rust/commit/19e25b61d10e359ab1ef0778eb12c33b3f3437fb"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "077e547e052889d8a2a3105143778265cf18e045", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -4444,7 +4444,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_trait_item_assoc_ty(&mut self, preceding_attrs: Vec<Attribute>)\n-        -> PResult<'a, (Generics, TyParam)> {\n+        -> PResult<'a, (ast::Generics, TyParam)> {\n         let span = self.span;\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n@@ -4463,7 +4463,7 @@ impl<'a> Parser<'a> {\n         };\n         generics.where_clause = self.parse_where_clause()?;\n \n-        Ok((Generics, TyParam {\n+        Ok((generics, TyParam {\n             attrs: preceding_attrs.into(),\n             ident,\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "d31023605326d0c09315219ff5e294dd3f827b73", "filename": "src/test/run-pass/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    type Bar<'a, 'b>;\n+}\n+\n+trait Baz {\n+    type Quux<'a>;\n+}\n+\n+impl<T> Baz for T where T: Foo {\n+    type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+}\n+\n+fn main() {}"}, {"sha": "f52a77fb25812e80ed93155390d5b39a88229478", "filename": "src/test/run-pass/rfc1598-generic-associated-types/iterable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Iterable {\n+    type Item<'a>;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+}\n+\n+fn main() {}"}, {"sha": "4ec6b418c058abfcbe711497d5055b1f2d7573f0", "filename": "src/test/run-pass/rfc1598-generic-associated-types/pointer_family.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::ops::Deref;\n+\n+trait PointerFamily {\n+    type Pointer<T>: Deref<Target = T>;\n+    fn new<T>(value: T) -> Self::Pointer<T>;\n+}\n+\n+struct ArcFamily;\n+\n+impl PointerFamily for ArcFamily {\n+    type Pointer<T> = Arc<T>;\n+    fn new<T>(value: T) -> Self::Pointer<T> {\n+        Arc::new(value)\n+    }\n+}\n+\n+struct RcFamily;\n+\n+impl PointerFamily for RcFamily {\n+    type Pointer<T> = Rc<T>;\n+    fn new<T>(value: T) -> Self::Pointer<T> {\n+        Rc::new(value)\n+    }\n+}\n+\n+struct Foo<P: PointerFamily> {\n+    bar: P::Pointer<String>,\n+}\n+\n+fn main() {}"}, {"sha": "33be5c1cc6364e22d64376a7b845ea9cc2846cae", "filename": "src/test/run-pass/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::Display;\n+\n+trait StreamingIterator {\n+    type Item<'a>;\n+    // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n+    fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n+}\n+\n+struct Foo<T: StreamingIterator> {\n+    // Applying a concrete lifetime to the constructor outside the trait.\n+    bar: <T as StreamingIterator>::Item<'static>,\n+}\n+\n+// Users can bound parameters by the type constructed by that trait's associated type constructor\n+// of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n+//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { ... }\n+fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n+\n+fn main() {}"}, {"sha": "8fe7ebc13090c22d16b4e43216373614117caf22", "filename": "src/test/run-pass/rfc1598-generic-associated-types/where.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd8ea1a6b88545e59442a3603f1b235cf57e3ba/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1598-generic-associated-types%2Fwhere.rs?ref=6bd8ea1a6b88545e59442a3603f1b235cf57e3ba", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checking the interaction with this other feature\n+#![feature(associated_type_defaults)]\n+\n+use std::fmt::{Display, Debug};\n+\n+trait Foo {\n+    type Assoc where Self: Sized;\n+    type Assoc2<T> where T: Display;\n+    type WithDefault<T> = Iterator<Item=T> where T: Debug;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Assoc = usize;\n+    type Assoc2<T> = Vec<T>;\n+    type WithDefault<'a, T> = &'a Iterator<T>;\n+}\n+\n+fn main() {}"}]}