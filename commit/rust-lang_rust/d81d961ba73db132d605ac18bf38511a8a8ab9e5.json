{"sha": "d81d961ba73db132d605ac18bf38511a8a8ab9e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWQ5NjFiYTczZGIxMzJkNjA1YWMxOGJmMzg1MTFhOGE4YWI5ZTU=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-18T08:00:36Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-18T22:59:44Z"}, "message": "Lint needless take-by-value", "tree": {"sha": "b57a89d78fdc472ce0c5bdecab6ffc968991f5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57a89d78fdc472ce0c5bdecab6ffc968991f5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81d961ba73db132d605ac18bf38511a8a8ab9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81d961ba73db132d605ac18bf38511a8a8ab9e5", "html_url": "https://github.com/rust-lang/rust/commit/d81d961ba73db132d605ac18bf38511a8a8ab9e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81d961ba73db132d605ac18bf38511a8a8ab9e5/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a227c75777bf154ac8fb1673d970133e9a02d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a227c75777bf154ac8fb1673d970133e9a02d56", "html_url": "https://github.com/rust-lang/rust/commit/8a227c75777bf154ac8fb1673d970133e9a02d56"}], "stats": {"total": 270, "additions": 249, "deletions": 21}, "files": [{"sha": "0c829f268c3c10213f827244841301479cb594ca", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -383,6 +383,7 @@ All notable changes to this project will be documented in this file.\n [`needless_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes\n [`needless_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop\n [`needless_return`]: https://github.com/Manishearth/rust-clippy/wiki#needless_return\n+[`needless_take_by_value`]: https://github.com/Manishearth/rust-clippy/wiki#needless_take_by_value\n [`needless_update`]: https://github.com/Manishearth/rust-clippy/wiki#needless_update\n [`neg_multiply`]: https://github.com/Manishearth/rust-clippy/wiki#neg_multiply\n [`never_loop`]: https://github.com/Manishearth/rust-clippy/wiki#never_loop"}, {"sha": "a3f4dcf4a0b770ed4a2d30bda74d916e931992d4", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 191 lints included in this crate:\n+There are 192 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -289,6 +289,7 @@ name\n [needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                             | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n+[needless_take_by_value](https://github.com/Manishearth/rust-clippy/wiki#needless_take_by_value)                       | warn    | taking arguments by value, but only using them by reference\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n [never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | warn    | any loop with an unconditional `break` statement"}, {"sha": "3dbd427d0634e74208902c81edbf72479dcbad71", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -216,12 +216,12 @@ fn constant_negate(o: Constant) -> Option<Constant> {\n     use self::Constant::*;\n     match o {\n         Int(value) => (-value).ok().map(Int),\n-        Float(is, ty) => Some(Float(neg_float_str(is), ty)),\n+        Float(is, ty) => Some(Float(neg_float_str(&is), ty)),\n         _ => None,\n     }\n }\n \n-fn neg_float_str(s: String) -> String {\n+fn neg_float_str(s: &str) -> String {\n     if s.starts_with('-') {\n         s[1..].to_owned()\n     } else {"}, {"sha": "1d497b4ef43f03854fbd8536e1e063ffc40482e4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -107,6 +107,7 @@ pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_borrow;\n+pub mod needless_take_by_value;\n pub mod needless_update;\n pub mod neg_multiply;\n pub mod new_without_default;\n@@ -299,6 +300,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n+    reg.register_late_lint_pass(box needless_take_by_value::NeedlessTakeByValue);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -455,6 +457,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n+        needless_take_by_value::NEEDLESS_TAKE_BY_VALUE,\n         needless_update::NEEDLESS_UPDATE,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,"}, {"sha": "8d2e2dfa0a755eccc37ff2b9541701ad0cd9a529", "filename": "clippy_lints/src/needless_take_by_value.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Fneedless_take_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Fneedless_take_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_take_by_value.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -0,0 +1,178 @@\n+use rustc::hir::*;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::def_id::DefId;\n+use rustc::lint::*;\n+use rustc::ty;\n+use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::mem_categorization as mc;\n+use syntax::ast::NodeId;\n+use syntax_pos::Span;\n+use utils::{in_macro, is_self, is_copy, implements_trait, get_trait_def_id, snippet, span_lint_and_then, paths};\n+use std::collections::HashSet;\n+\n+/// **What it does:** Checks for functions taking arguments by value, but only using them by\n+/// reference.\n+///\n+/// **Why is this bad?**\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(v: Vec<i32>) {\n+///     assert_eq!(v.len(), 42);\n+/// }\n+/// ```\n+declare_lint! {\n+    pub NEEDLESS_TAKE_BY_VALUE,\n+    Warn,\n+    \"taking arguments by value, but only using them by reference\"\n+}\n+\n+pub struct NeedlessTakeByValue;\n+\n+impl LintPass for NeedlessTakeByValue {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![NEEDLESS_TAKE_BY_VALUE]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessTakeByValue {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        span: Span,\n+        node_id: NodeId\n+    ) {\n+        if in_macro(cx, span) {\n+            return;\n+        }\n+\n+        if let FnKind::ItemFn(..) = kind {\n+        } else {\n+            return;\n+        }\n+\n+        // These are usually took by value and only used by reference\n+        let fn_trait = cx.tcx.lang_items.fn_trait().expect(\"failed to find `Fn` trait\");\n+        let asref_trait = get_trait_def_id(cx, &paths::ASREF_TRAIT).expect(\"failed to find `AsRef` trait\");\n+        let borrow_trait = get_trait_def_id(cx, &paths::BORROW_TRAIT).expect(\"failed to find `Borrow` trait\");\n+\n+        // Collect moved variables from the function body\n+        let moved_vars = {\n+            let mut ctx = MovedVariablesCtxt::new(cx);\n+            let infcx = cx.tcx.borrowck_fake_infer_ctxt(body.id());\n+            {\n+                let mut v = euv::ExprUseVisitor::new(&mut ctx, &infcx);\n+                v.consume_body(body);\n+            }\n+            ctx.moved_vars\n+        };\n+\n+        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n+        let param_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n+        let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+        let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, fn_sig);\n+\n+        for ((input, ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n+            if_let_chain! {[\n+                !is_self(arg),\n+                !ty.is_mutable_pointer(),\n+                !is_copy(cx, ty, node_id),\n+                !implements_trait(cx, ty, fn_trait, &[], Some(node_id)),\n+                !implements_trait(cx, ty, asref_trait, &[], Some(node_id)),\n+                !implements_trait(cx, ty, borrow_trait, &[], Some(node_id)),\n+\n+                let PatKind::Binding(mode, defid, ..) = arg.pat.node,\n+                !moved_vars.contains(&defid),\n+            ], {\n+                // Note: `toplevel_ref_arg` warns if `BindByRef`\n+                let m = match mode {\n+                    BindingMode::BindByRef(m) | BindingMode::BindByValue(m) => m,\n+                };\n+                if m == Mutability::MutMutable {\n+                    continue;\n+                }\n+\n+                span_lint_and_then(cx,\n+                          NEEDLESS_TAKE_BY_VALUE,\n+                          input.span,\n+                          \"this function taking a value by value, but only using them by reference\",\n+                          |db| {\n+                              db.span_suggestion(input.span,\n+                                                 \"consider taking a reference instead\",\n+                                                 format!(\"&{}\", snippet(cx, input.span, \"_\")));\n+                          });\n+            }}\n+        }\n+    }\n+}\n+\n+struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    moved_vars: HashSet<DefId>,\n+}\n+\n+impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n+        MovedVariablesCtxt {\n+            cx: cx,\n+            moved_vars: HashSet::new(),\n+        }\n+    }\n+\n+    fn consume_common(\n+        &mut self,\n+        _consume_id: NodeId,\n+        _consume_span: Span,\n+        cmt: mc::cmt<'tcx>,\n+        mode: euv::ConsumeMode\n+    ) {\n+        if_let_chain! {[\n+            let euv::ConsumeMode::Move(_) = mode,\n+            let mc::Categorization::Local(vid) = cmt.cat,\n+        ], {\n+            if let Some(def_id) = self.cx.tcx.hir.opt_local_def_id(vid) {\n+                self.moved_vars.insert(def_id);\n+            }\n+        }}\n+\n+    }\n+}\n+\n+impl<'a, 'tcx: 'a> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n+    fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        self.consume_common(consume_id, consume_span, cmt, mode);\n+    }\n+\n+    fn matched_pat(&mut self, _matched_pat: &Pat, _cmt: mc::cmt, _mode: euv::MatchMode) {}\n+\n+    fn consume_pat(&mut self, consume_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        self.consume_common(consume_pat.id, consume_pat.span, cmt, mode);\n+    }\n+\n+    fn borrow(\n+        &mut self,\n+        _borrow_id: NodeId,\n+        _borrow_span: Span,\n+        _cmt: mc::cmt<'tcx>,\n+        _loan_region: &'tcx ty::Region,\n+        _bk: ty::BorrowKind,\n+        _loan_cause: euv::LoanCause\n+    ) {\n+    }\n+\n+    fn mutate(\n+        &mut self,\n+        _assignment_id: NodeId,\n+        _assignment_span: Span,\n+        _assignee_cmt: mc::cmt<'tcx>,\n+        _mode: euv::MutateMode\n+    ) {\n+    }\n+\n+    fn decl_without_init(&mut self, _id: NodeId, _span: Span) {}\n+}"}, {"sha": "57d2e5a33f102dd6ace1ef27800aa13cb67e2d2f", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,7 +1,9 @@\n //! This module contains paths to types and functions Clippy needs to know about.\n \n+pub const ASREF_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&'static str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BINARY_HEAP: [&'static str; 3] = [\"collections\", \"binary_heap\", \"BinaryHeap\"];\n+pub const BORROW_TRAIT: [&'static str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BOX: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];"}, {"sha": "2d6c8ea384bdc18f3d654bbd172238dcda24b2de", "filename": "tests/issue-825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fissue-825.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -4,7 +4,7 @@\n #![allow(warnings)]\n \n // this should compile in a reasonable amount of time\n-fn rust_type_id(name: String) {\n+fn rust_type_id(name: &str) {\n     if \"bool\" == &name[..] || \"uint\" == &name[..] || \"u8\" == &name[..] || \"u16\" == &name[..] ||\n        \"u32\" == &name[..] || \"f32\" == &name[..] || \"f64\" == &name[..] || \"i8\" == &name[..] ||\n        \"i16\" == &name[..] || \"i32\" == &name[..] ||"}, {"sha": "d4248175aa533d614b4a8343f2f2873c79186d51", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_take_by_value)]\n \n fn main() {\n     const Z: u32 = 0;"}, {"sha": "92304753e58861ff3757f11396cd8799d89c82c3", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy)]\n-#![allow(boxed_local)]\n+#![allow(boxed_local, needless_take_by_value)]\n #![allow(blacklisted_name)]\n \n macro_rules! boxit {"}, {"sha": "64f1b4dcbdbe71cc4cddc6fc6cd33715c1752789", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(unused)]\n+#![allow(unused, needless_take_by_value)]\n #![feature(associated_consts, associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "3661b63ef536153addffde45448adac10a297d4e", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -4,7 +4,7 @@\n \n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(dead_code)]\n+#![allow(dead_code, needless_take_by_value)]\n \n extern crate collections;\n use collections::linked_list::LinkedList;"}, {"sha": "44f6f54bc8c94eda36dbaa1b0a5427cf810fa0e2", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names)]\n+#![allow(toplevel_ref_arg, similar_names, needless_take_by_value)]\n \n use std::mem::{drop, forget};\n "}, {"sha": "495c024f15141f1767c33eae8b685d21ea14bb2b", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused)]\n+#![allow(unused, needless_take_by_value)]\n \n #![deny(map_entry)]\n "}, {"sha": "51fde7d85763e64bc326e26992b7f8be1f6cd677", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_take_by_value)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "9d05e2bbbf92e8d85d64deb5106fd9324b5d7de6", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(needless_lifetimes, unused_lifetimes)]\n-#![allow(dead_code)]\n+#![allow(dead_code, needless_take_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n "}, {"sha": "6f6f576a3c94b75f55a02a01702baa2406d01574", "filename": "tests/ui/needless_take_by_value.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fneedless_take_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fneedless_take_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_take_by_value.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -0,0 +1,26 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(needless_take_by_value)]\n+#![allow(dead_code)]\n+\n+// `v` will be warned\n+// `w`, `x` and `y` are allowed (moved or mutated)\n+fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+    assert_eq!(v.len(), 42);\n+\n+    consume(w);\n+\n+    x.push(T::default());\n+\n+    y\n+}\n+\n+fn consume<T>(_: T) {}\n+\n+// ok\n+fn test_fn<F: Fn(i32) -> i32>(f: F) {\n+    f(1);\n+}\n+\n+fn main() {}"}, {"sha": "d510989c34401244e9a5fd185002ccd4f9e610de", "filename": "tests/ui/needless_take_by_value.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fneedless_take_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fneedless_take_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_take_by_value.stderr?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -0,0 +1,16 @@\n+error: this function taking a value by value, but only using them by reference\n+ --> $DIR/needless_take_by_value.rs:9:23\n+  |\n+9 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+  |                       ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/needless_take_by_value.rs:4:9\n+  |\n+4 | #![deny(needless_take_by_value)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+  | fn foo<T: Default>(v: &Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+\n+error: aborting due to previous error\n+"}, {"sha": "4f66f7cfb5b21e9355ba28a858696116aae4d4ee", "filename": "tests/ui/should_assert_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(needless_take_by_value)]\n #![deny(should_assert_eq)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "6cd729e4035dc5588af4b642197ef482b88b37e0", "filename": "tests/ui/should_assert_eq.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,28 +1,28 @@\n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:13:5\n+  --> $DIR/should_assert_eq.rs:14:5\n    |\n-13 |     assert!(1 == 2);\n+14 |     assert!(1 == 2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/should_assert_eq.rs:4:9\n+  --> $DIR/should_assert_eq.rs:5:9\n    |\n-4  | #![deny(should_assert_eq)]\n+5  | #![deny(should_assert_eq)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate\n \n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:14:5\n+  --> $DIR/should_assert_eq.rs:15:5\n    |\n-14 |     assert!(Debug(1) == Debug(2));\n+15 |     assert!(Debug(1) == Debug(2));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate\n \n error: use `assert_eq` for better reporting\n-  --> $DIR/should_assert_eq.rs:21:5\n+  --> $DIR/should_assert_eq.rs:22:5\n    |\n-21 |     assert!(x == y);\n+22 |     assert!(x == y);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate"}, {"sha": "b3639cf587cc8c231c76416c026ad3162fe95875", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d961ba73db132d605ac18bf38511a8a8ab9e5/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=d81d961ba73db132d605ac18bf38511a8a8ab9e5", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused, dead_code, needless_lifetimes)]\n+#![allow(unused, dead_code, needless_lifetimes, needless_take_by_value)]\n #![deny(unused_lifetimes)]\n \n fn empty() {"}]}