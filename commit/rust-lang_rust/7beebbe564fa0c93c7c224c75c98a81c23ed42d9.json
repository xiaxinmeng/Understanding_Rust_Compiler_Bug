{"sha": "7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZWViYmU1NjRmYTBjOTNjN2MyMjRjNzVjOThhODFjMjNlZDQyZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-22T18:26:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-22T18:26:27Z"}, "message": "Auto merge of #29236 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29170, #29180, #29193, #29207, #29213, #29224, #29230\n- Failed merges:", "tree": {"sha": "d317771e907b58ba09e45e507ec6836c749eb427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d317771e907b58ba09e45e507ec6836c749eb427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "html_url": "https://github.com/rust-lang/rust/commit/7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83cf3ce4981e2ff1a3d7629665b7ec884adbb9de", "url": "https://api.github.com/repos/rust-lang/rust/commits/83cf3ce4981e2ff1a3d7629665b7ec884adbb9de", "html_url": "https://github.com/rust-lang/rust/commit/83cf3ce4981e2ff1a3d7629665b7ec884adbb9de"}, {"sha": "b51d5e10b23faaec609cd3ee9b2662b84625ef64", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51d5e10b23faaec609cd3ee9b2662b84625ef64", "html_url": "https://github.com/rust-lang/rust/commit/b51d5e10b23faaec609cd3ee9b2662b84625ef64"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "9d85487f793ef3389cd752b1d4c91d88b3f987cb", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -72,6 +72,9 @@ Read [\"Installing Rust\"] from [The Book].\n    $ pacman -S mingw-w64-i686-toolchain\n    $ pacman -S mingw-w64-x86_64-toolchain\n \n+   # Make git available in MSYS2 (if not already available on path)\n+   $ pacman -S git\n+\n    $ pacman -S base-devel\n    ```\n "}, {"sha": "1efca08abd094d7b6833a2e4ff47f6a41aed4b23", "filename": "src/doc/nomicon/atomics.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Fnomicon%2Fatomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Fnomicon%2Fatomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fatomics.md?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -1,11 +1,11 @@\n % Atomics\n \n Rust pretty blatantly just inherits C11's memory model for atomics. This is not\n-due this model being particularly excellent or easy to understand. Indeed, this\n-model is quite complex and known to have [several flaws][C11-busted]. Rather, it\n-is a pragmatic concession to the fact that *everyone* is pretty bad at modeling\n-atomics. At very least, we can benefit from existing tooling and research around\n-C.\n+due to this model being particularly excellent or easy to understand. Indeed,\n+this model is quite complex and known to have [several flaws][C11-busted].\n+Rather, it is a pragmatic concession to the fact that *everyone* is pretty bad\n+at modeling atomics. At very least, we can benefit from existing tooling and\n+research around C.\n \n Trying to fully explain the model in this book is fairly hopeless. It's defined\n in terms of madness-inducing causality graphs that require a full book to"}, {"sha": "56dfa17b4e3f21c795c26a7281636de122187adb", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -1545,7 +1545,7 @@ cargo build --release\n \n ## Argument parsing\n \n-Let's get argument parsing out of the way. we won't go into too much\n+Let's get argument parsing out of the way. We won't go into too much\n detail on Getopts, but there is [some good documentation][15]\n describing it. The short story is that Getopts generates an argument\n parser and a help message from a vector of options (The fact that it\n@@ -1855,7 +1855,7 @@ In our program, we accept a single file for input and do one pass over the\n data. This means we probably should be able to accept input on stdin. But maybe\n we like the current format too\u2014so let's have both!\n \n-Adding support for stdin is actually quite easy. There are only two things we\n+Adding support for stdin is actually quite easy. There are only three things we\n have to do:\n \n 1. Tweak the program arguments so that a single parameter\u2014the\n@@ -2057,7 +2057,7 @@ so. This can be a little clumsy, especially if you intend for the program to\n be used in shell scripts.\n \n So let's start by adding the flags. Like before, we need to tweak the usage\n-string and add a flag to the Option variable. Once were done that, Getopts does the rest:\n+string and add a flag to the Option variable. Once we've done that, Getopts does the rest:\n \n ```rust,ignore\n ..."}, {"sha": "2f9166751d96564e9cb7583547291b6a606da870", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -37,8 +37,9 @@ If we\u2019re on Windows and not using PowerShell, the `~` may not work. Consult th\n documentation for our shell for more details.\n \n Let\u2019s make a new source file next. We\u2019ll call our file `main.rs`. Rust files\n-always end in a `.rs` extension. If we\u2019re using more than one word in our\n-filename, use an underscore: `hello_world.rs` rather than `helloworld.rs`.\n+always end in a `.rs` extension, and if we\u2019re using more than one word in a\n+Rust filename, we use an underscore: for example, `linked_list.rs`, not\n+`linkedlist.rs` or `LinkedList.rs`.\n \n Now that we\u2019ve got our file open, type this in:\n "}, {"sha": "0d717992ce8df8cc549e4041a734f080ae35cf0c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -784,9 +784,6 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n ///\n /// unsafe impl<T> Sync for NotThreadSafe<T> {}\n /// ```\n-///\n-/// **NOTE:** `UnsafeCell<T>`'s fields are public to allow static initializers. It is not\n-/// recommended to access its fields directly, `get` should be used instead.\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct UnsafeCell<T: ?Sized> {\n@@ -799,8 +796,7 @@ impl<T> UnsafeCell<T> {\n     /// Constructs a new instance of `UnsafeCell` which will wrap the specified\n     /// value.\n     ///\n-    /// All access to the inner value through methods is `unsafe`, and it is highly discouraged to\n-    /// access the fields directly.\n+    /// All access to the inner value through methods is `unsafe`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e4f00c4874e5fe82001f28701f2f92c571a270ff", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7beebbe564fa0c93c7c224c75c98a81c23ed42d9/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=7beebbe564fa0c93c7c224c75c98a81c23ed42d9", "patch": "@@ -69,7 +69,7 @@ use slice;\n ///     use std::io::Cursor;\n ///     let mut buff = Cursor::new(vec![0; 15]);\n ///\n-///     write_ten_bytes(&mut buff).unwrap();\n+///     write_ten_bytes_at_end(&mut buff).unwrap();\n ///\n ///     assert_eq!(&buff.get_ref()[5..15], &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n /// }"}]}