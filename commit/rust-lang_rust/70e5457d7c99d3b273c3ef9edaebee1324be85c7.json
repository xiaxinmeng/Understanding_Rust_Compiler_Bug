{"sha": "70e5457d7c99d3b273c3ef9edaebee1324be85c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTU0NTdkN2M5OWQzYjI3M2MzZWY5ZWRhZWJlZTEzMjRiZTg1Yzc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-04T22:44:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-04T22:44:15Z"}, "message": "Make box prefix operator and box type carry mutability flag.", "tree": {"sha": "215db03e8e982504f4b182b833140f2a6dcc6c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215db03e8e982504f4b182b833140f2a6dcc6c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e5457d7c99d3b273c3ef9edaebee1324be85c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5457d7c99d3b273c3ef9edaebee1324be85c7", "html_url": "https://github.com/rust-lang/rust/commit/70e5457d7c99d3b273c3ef9edaebee1324be85c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e5457d7c99d3b273c3ef9edaebee1324be85c7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9f45446a747da26382f08f1769ef98b8e43898", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9f45446a747da26382f08f1769ef98b8e43898", "html_url": "https://github.com/rust-lang/rust/commit/bd9f45446a747da26382f08f1769ef98b8e43898"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "61450a1bd9a8b37bf83576b6df96c0a4cdf97fb7", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=70e5457d7c99d3b273c3ef9edaebee1324be85c7", "patch": "@@ -188,7 +188,7 @@ fn binop_to_str(binop op) -> str {\n \n \n tag unop {\n-    box;\n+    box(mutability);\n     deref;\n     bitnot;\n     not;\n@@ -197,7 +197,10 @@ tag unop {\n \n fn unop_to_str(unop op) -> str {\n     alt (op) {\n-        case (box) {ret \"@\";}\n+        case (box(?mt)) {\n+            if (mt == mut) { ret \"@mutable\"; }\n+            ret \"@\";\n+        }\n         case (deref) {ret \"*\";}\n         case (bitnot) {ret \"~\";}\n         case (not) {ret \"!\";}"}, {"sha": "1e0a9042eef2594d10908e4270e8c6e96bf8d29c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=70e5457d7c99d3b273c3ef9edaebee1324be85c7", "patch": "@@ -1074,9 +1074,10 @@ impure fn parse_prefix_expr(parser p) -> @ast.expr {\n \n         case (token.AT) {\n             p.bump();\n+            auto m = parse_mutability(p);\n             auto e = parse_prefix_expr(p);\n             hi = e.span;\n-            ex = ast.expr_unary(ast.box, e, ast.ann_none);\n+            ex = ast.expr_unary(ast.box(m), e, ast.ann_none);\n         }\n \n         case (_) {"}, {"sha": "aeeff1699f6ebd1d9bdc4037fa993a10102aeafe", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=70e5457d7c99d3b273c3ef9edaebee1324be85c7", "patch": "@@ -1424,7 +1424,7 @@ fn trans_malloc_boxed(@block_ctxt cx, @ty.t t) -> result {\n     // Synthesize a fake box type structurally so we have something\n     // to measure the size of.\n     auto boxed_body = ty.plain_tup_ty(vec(plain_ty(ty.ty_int), t));\n-    auto box_ptr = ty.plain_box_ty(t);\n+    auto box_ptr = ty.plain_box_ty(t, ast.imm);\n     auto sz = size_of(cx, boxed_body);\n     auto llty = type_of(cx.fcx.ccx, box_ptr);\n     ret trans_raw_malloc(sz.bcx, llty, sz.val);\n@@ -2005,7 +2005,7 @@ fn iter_structural_ty_full(@block_ctxt cx,\n         auto box_a_ptr = cx.build.Load(box_a_cell);\n         auto box_b_ptr = cx.build.Load(box_b_cell);\n         auto tnil = plain_ty(ty.ty_nil);\n-        auto tbox = ty.plain_box_ty(tnil);\n+        auto tbox = ty.plain_box_ty(tnil, ast.imm);\n \n         auto inner_cx = new_sub_block_ctxt(cx, \"iter box\");\n         auto next_cx = new_sub_block_ctxt(cx, \"next\");\n@@ -2557,7 +2557,7 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n                 ret res(sub.bcx, sub.bcx.build.Neg(sub.val));\n             }\n         }\n-        case (ast.box) {\n+        case (ast.box(_)) {\n             auto e_ty = ty.expr_ty(e);\n             auto e_val = sub.val;\n             auto box_ty = node_ann_type(sub.bcx.fcx.ccx, a);\n@@ -3943,7 +3943,7 @@ fn trans_bind_thunk(@crate_ctxt cx,\n     auto bcx = new_top_block_ctxt(fcx);\n     auto lltop = bcx.llbb;\n \n-    auto llclosure_ptr_ty = type_of(cx, ty.plain_box_ty(closure_ty));\n+    auto llclosure_ptr_ty = type_of(cx, ty.plain_box_ty(closure_ty, ast.imm));\n     auto llclosure = bcx.build.PointerCast(fcx.llenv, llclosure_ptr_ty);\n \n     auto lltarget = GEP_tup_like(bcx, closure_ty, llclosure,\n@@ -5819,7 +5819,7 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n         let @ty.t body_ty = ty.plain_tup_ty(vec(tydesc_ty,\n                                                 typarams_ty,\n                                                 fields_ty));\n-        let @ty.t boxed_body_ty = ty.plain_box_ty(body_ty);\n+        let @ty.t boxed_body_ty = ty.plain_box_ty(body_ty, ast.imm);\n \n         // Malloc a box for the body.\n         auto box = trans_malloc_boxed(bcx, body_ty);"}, {"sha": "24bd647f4503583891b719f650faa8cbd1300031", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=70e5457d7c99d3b273c3ef9edaebee1324be85c7", "patch": "@@ -564,8 +564,8 @@ fn plain_ty(&sty st) -> @t {\n     ret @rec(struct=st, cname=none[str]);\n }\n \n-fn plain_box_ty(@t subty) -> @t {\n-    ret plain_ty(ty_box(rec(ty=subty, mut=ast.imm)));\n+fn plain_box_ty(@t subty, ast.mutability mut) -> @t {\n+    ret plain_ty(ty_box(rec(ty=subty, mut=mut)));\n }\n \n fn plain_tup_ty(vec[@t] elem_tys) -> @t {"}, {"sha": "10cbd6d5be8459224af295f4f01056859ce26a56", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5457d7c99d3b273c3ef9edaebee1324be85c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=70e5457d7c99d3b273c3ef9edaebee1324be85c7", "patch": "@@ -959,7 +959,7 @@ fn strip_boxes(@ty.t t) -> @ty.t {\n fn add_boxes(uint n, @ty.t t) -> @ty.t {\n     auto t1 = t;\n     while (n != 0u) {\n-        t1 = ty.plain_box_ty(t1);\n+        t1 = ty.plain_box_ty(t1, ast.imm);\n         n -= 1u;\n     }\n     ret t1;\n@@ -1728,9 +1728,8 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             auto oper_1 = check_expr(fcx, oper);\n             auto oper_t = expr_ty(oper_1);\n             alt (unop) {\n-                case (ast.box) {\n-                    // TODO: mutable\n-                    oper_t = ty.plain_box_ty(oper_t);\n+                case (ast.box(?mut)) {\n+                    oper_t = ty.plain_box_ty(oper_t, mut);\n                 }\n                 case (ast.deref) {\n                     alt (oper_t.struct) {"}]}