{"sha": "c2e49bf1a279ec704bfe39fa149b64783454d72d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTQ5YmYxYTI3OWVjNzA0YmZlMzlmYTE0OWI2NDc4MzQ1NGQ3MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T03:52:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T03:52:27Z"}, "message": "Auto merge of #60817 - ecstatic-morse:issue-60779, r=Centril\n\nAdd stubs to keyword docs\n\nResolves #60779.\n\nThis commit gives each stable keyword a short entry in the \"Keywords\" section in the docs for `std`. The newly added entries are only a single line each and contain the main purpose of the keyword. I changed some of the existing summary lines for consistency's sake. Each line is either an imperative (\"name the type of a trait object\" for `dyn`), or an object (\"An abstract data type\" for `enum`). I tried to avoid using the keyword itself or the word \"keyword\" in the summary.\n\nLater commits can flesh out each keyword with an example for each context in which it can appear as well as a link to the appropriate part of the rust book.\n\n**edit:**\nHere's the list of keywords and summaries (sans formatting) to ease reviewing. I'll try to keep this up to date as I make changes:\n\nkeyword | summary\n-- | --\nSelf | The implementing type within a `trait` or `impl` block, or the current type within a type definition.\nas | Cast between types, or rename an import.\nasync | ExperimentalReturn a Future instead of blocking the current thread.\nawait | ExperimentalSuspend execution until the result of a Future is ready.\nbreak | Exit early from a loop.\nconst | Compile-time constants and deterministic functions.\ncontinue | Skip to the next iteration of a loop.\ncrate | A Rust binary or library.\ndyn | Name the type of a trait object.\nelse | What to do when an if condition does not hold.\nenum | A type that can be any one of several variants.\nextern | Link to or import external code.\nfalse | A value of type bool representing logical false.\nfn | A function or function pointer.\nfor | Iteration with in, trait implementation with impl, or higher-ranked trait bounds (for<'a>).\nif | Evaluate a block if a condition holds.\nimpl | Implement some functionality for a type.\nin | Iterate over a series of values with for.\nlet | Bind a value to a variable.\nloop | Loop indefinitely.\nmatch | Control flow based on pattern matching.\nmod | Organize code into modules.\nmove | Capture a closure's environment by value.\nmut | A mutable binding, reference, or pointer.\npub | Make an item visible to others.\nref | Bind by reference during pattern matching.\nreturn | Return a value from a function.\nself | The receiver of a method, or the current module.\nstatic | A place that is valid for the duration of a program.\nstruct | A type that is composed of other types.\nsuper | The parent of the current module.\ntrait | A common interface for a class of types.\ntrue | A value of type bool representing logical true.\ntype | Define an alias for an existing type.\nunion | The Rust equivalent of a C-style union.\nunsafe | Code or interfaces whose memory safety cannot be verified by the type system.\nuse | Import or rename items from other crates or modules.\nwhere | Add constraints that must be upheld to use an item.\nwhile | Loop while a condition is upheld.", "tree": {"sha": "417313c9687eefd1589e5b674af3f18d2ea5d70a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/417313c9687eefd1589e5b674af3f18d2ea5d70a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e49bf1a279ec704bfe39fa149b64783454d72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e49bf1a279ec704bfe39fa149b64783454d72d", "html_url": "https://github.com/rust-lang/rust/commit/c2e49bf1a279ec704bfe39fa149b64783454d72d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e49bf1a279ec704bfe39fa149b64783454d72d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bbb1353beac929cb5226d7c0cce95c9d0c021bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbb1353beac929cb5226d7c0cce95c9d0c021bb", "html_url": "https://github.com/rust-lang/rust/commit/1bbb1353beac929cb5226d7c0cce95c9d0c021bb"}, {"sha": "851be33f2ab87a4088dcaf9007bdb20d3370a45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/851be33f2ab87a4088dcaf9007bdb20d3370a45e", "html_url": "https://github.com/rust-lang/rust/commit/851be33f2ab87a4088dcaf9007bdb20d3370a45e"}], "stats": {"total": 294, "additions": 279, "deletions": 15}, "files": [{"sha": "d133c2f5cb11ca07c5797795696d02f4463e5474", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 279, "deletions": 15, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/c2e49bf1a279ec704bfe39fa149b64783454d72d/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e49bf1a279ec704bfe39fa149b64783454d72d/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=c2e49bf1a279ec704bfe39fa149b64783454d72d", "patch": "@@ -1,6 +1,6 @@\n #[doc(keyword = \"as\")]\n //\n-/// The keyword for casting a value to a type.\n+/// Cast between types, or rename an import.\n ///\n /// `as` is most commonly used to turn primitive types into other primitive types, but it has other\n /// uses that include turning pointers into addresses, addresses into pointers, and pointers into\n@@ -29,9 +29,18 @@\n /// [`crate`]: keyword.crate.html\n mod as_keyword { }\n \n+#[doc(keyword = \"break\")]\n+//\n+/// Exit early from a loop.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod break_keyword { }\n+\n #[doc(keyword = \"const\")]\n //\n-/// The keyword for defining constants.\n+/// Compile-time constants and deterministic functions.\n ///\n /// Sometimes a certain value is used many times throughout a program, and it can become\n /// inconvenient to copy it over and over. What's more, it's not always possible or desirable to\n@@ -83,9 +92,18 @@ mod as_keyword { }\n /// [Reference]: ../reference/items/constant-items.html\n mod const_keyword { }\n \n+#[doc(keyword = \"continue\")]\n+//\n+/// Skip to the next iteration of a loop.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod continue_keyword { }\n+\n #[doc(keyword = \"crate\")]\n //\n-/// The `crate` keyword.\n+/// A Rust binary or library.\n ///\n /// The primary use of the `crate` keyword is as a part of `extern crate` declarations, which are\n /// used to specify a dependency on a crate external to the one it's declared in. Crates are the\n@@ -116,14 +134,24 @@ mod const_keyword { }\n /// [Reference]: ../reference/items/extern-crates.html\n mod crate_keyword { }\n \n+#[doc(keyword = \"else\")]\n+//\n+/// What to do when an [`if`] condition does not hold.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`if`]: keyword.if.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod else_keyword { }\n+\n #[doc(keyword = \"enum\")]\n //\n-/// For defining enumerations.\n+/// A type that can be any one of several variants.\n ///\n /// Enums in Rust are similar to those of other compiled languages like C, but have important\n /// differences that make them considerably more powerful. What Rust calls enums are more commonly\n-/// known as [Algebraic Data Types] if you're coming from a functional programming background. The\n-/// important detail is that each enum variant can have data to go along with it.\n+/// known as [Algebraic Data Types][ADT] if you're coming from a functional programming background.\n+/// The important detail is that each enum variant can have data to go along with it.\n ///\n /// ```rust\n /// # struct Coord;\n@@ -166,15 +194,15 @@ mod crate_keyword { }\n ///\n /// For more information, take a look at the [Rust Book] or the [Reference]\n ///\n-/// [Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type\n+/// [ADT]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [`Option`]: option/enum.Option.html\n /// [Rust Book]: ../book/ch06-01-defining-an-enum.html\n /// [Reference]: ../reference/items/enumerations.html\n mod enum_keyword { }\n \n #[doc(keyword = \"extern\")]\n //\n-/// For external connections in Rust code.\n+/// Link to or import external code.\n ///\n /// The `extern` keyword is used in two places in Rust. One is in conjunction with the [`crate`]\n /// keyword to make your Rust code aware of other Rust crates in your project, i.e., `extern crate\n@@ -214,9 +242,19 @@ mod enum_keyword { }\n /// [Reference]: ../reference/items/external-blocks.html\n mod extern_keyword { }\n \n+#[doc(keyword = \"false\")]\n+//\n+/// A value of type [`bool`] representing logical **false**.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`bool`]: primitive.bool.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod false_keyword { }\n+\n #[doc(keyword = \"fn\")]\n //\n-/// The keyword for defining functions.\n+/// A function or function pointer.\n ///\n /// Functions are the primary way code is executed within Rust. Function blocks, usually just\n /// called functions, can be defined in a variety of different places and be assigned many\n@@ -283,7 +321,8 @@ mod fn_keyword { }\n \n #[doc(keyword = \"for\")]\n //\n-/// The `for` keyword.\n+/// Iteration with [`in`], trait implementation with [`impl`], or [higher-ranked trait bounds]\n+/// (`for<'a>`).\n ///\n /// The `for` keyword is used in many syntactic locations:\n ///\n@@ -350,6 +389,7 @@ mod fn_keyword { }\n ///\n /// For more information on for-loops, see the [Rust book] or the [Reference].\n ///\n+/// [`in`]: keyword.in.html\n /// [`impl`]: keyword.impl.html\n /// [higher-ranked trait bounds]: ../reference/trait-bounds.html#higher-ranked-trait-bounds\n /// [`IntoIterator`]: iter/trait.IntoIterator.html\n@@ -360,7 +400,7 @@ mod for_keyword { }\n \n #[doc(keyword = \"if\")]\n //\n-/// If statements and expressions.\n+/// Evaluate a block if a condition holds.\n ///\n /// `if` is a familiar construct to most programmers, and is the main way you'll often do logic in\n /// your code. However, unlike in most languages, `if` blocks can also act as expressions.\n@@ -434,7 +474,7 @@ mod if_keyword { }\n \n #[doc(keyword = \"impl\")]\n //\n-/// The implementation-defining keyword.\n+/// Implement some functionality for a type.\n ///\n /// The `impl` keyword is primarily used to define implementations on types. Inherent\n /// implementations are standalone, while trait implementations are used to implement traits for\n@@ -495,9 +535,19 @@ mod if_keyword { }\n /// [book2]: ../book/ch10-02-traits.html#returning-types-that-implement-traits\n mod impl_keyword { }\n \n+#[doc(keyword = \"in\")]\n+//\n+/// Iterate over a series of values with [`for`].\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`for`]: keyword.for.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod in_keyword { }\n+\n #[doc(keyword = \"let\")]\n //\n-/// The variable binding keyword.\n+/// Bind a value to a variable.\n ///\n /// The primary use for the `let` keyword is in `let` statements, which are used to introduce a new\n /// set of variables into the current scope, as given by a pattern.\n@@ -560,7 +610,7 @@ mod let_keyword { }\n \n #[doc(keyword = \"loop\")]\n //\n-/// The loop-defining keyword.\n+/// Loop indefinitely.\n ///\n /// `loop` is used to define the simplest kind of loop supported in Rust. It runs the code inside\n /// it until the code uses `break` or the program exits.\n@@ -603,9 +653,104 @@ mod let_keyword { }\n /// [Reference]: ../reference/expressions/loop-expr.html\n mod loop_keyword { }\n \n+#[doc(keyword = \"match\")]\n+//\n+/// Control flow based on pattern matching.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod match_keyword { }\n+\n+#[doc(keyword = \"mod\")]\n+//\n+/// Organize code into [modules].\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [modules]: ../reference/items/modules.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod mod_keyword { }\n+\n+#[doc(keyword = \"move\")]\n+//\n+/// Capture a [closure]'s environment by value.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [closure]: ../book/second-edition/ch13-01-closures.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod move_keyword { }\n+\n+#[doc(keyword = \"mut\")]\n+//\n+/// A mutable binding, reference, or pointer.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod mut_keyword { }\n+\n+#[doc(keyword = \"pub\")]\n+//\n+/// Make an item visible to others.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod pub_keyword { }\n+\n+#[doc(keyword = \"ref\")]\n+//\n+/// Bind by reference during pattern matching.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod ref_keyword { }\n+\n+#[doc(keyword = \"return\")]\n+//\n+/// Return a value from a function.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod return_keyword { }\n+\n+#[doc(keyword = \"self\")]\n+//\n+/// The receiver of a method, or the current module.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod self_keyword { }\n+\n+#[doc(keyword = \"Self\")]\n+//\n+/// The implementing type within a [`trait`] or [`impl`] block, or the current type within a type\n+/// definition.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`impl`]: keyword.impl.html\n+/// [`trait`]: keyword.trait.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod self_upper_keyword { }\n+\n+#[doc(keyword = \"static\")]\n+//\n+/// A place that is valid for the duration of a program.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod static_keyword { }\n+\n #[doc(keyword = \"struct\")]\n //\n-/// The keyword used to define structs.\n+/// A type that is composed of other types.\n ///\n /// Structs in Rust come in three flavors: Structs with named fields, tuple structs, and unit\n /// structs.\n@@ -710,3 +855,122 @@ mod loop_keyword { }\n /// [book]: ../book/ch05-01-defining-structs.html\n /// [reference]: ../reference/items/structs.html\n mod struct_keyword { }\n+\n+#[doc(keyword = \"super\")]\n+//\n+/// The parent of the current [module].\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [module]: ../reference/items/modules.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod super_keyword { }\n+\n+#[doc(keyword = \"trait\")]\n+//\n+/// A common interface for a class of types.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod trait_keyword { }\n+\n+#[doc(keyword = \"true\")]\n+//\n+/// A value of type [`bool`] representing logical **true**.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`bool`]: primitive.bool.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod true_keyword { }\n+\n+#[doc(keyword = \"type\")]\n+//\n+/// Define an alias for an existing type.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod type_keyword { }\n+\n+#[doc(keyword = \"unsafe\")]\n+//\n+/// Code or interfaces whose [memory safety] cannot be verified by the type system.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [memory safety]: ../book/ch19-01-unsafe-rust.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod unsafe_keyword { }\n+\n+#[doc(keyword = \"use\")]\n+//\n+/// Import or rename items from other crates or modules.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod use_keyword { }\n+\n+#[doc(keyword = \"where\")]\n+//\n+/// Add constraints that must be upheld to use an item.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod where_keyword { }\n+\n+#[doc(keyword = \"while\")]\n+//\n+/// Loop while a condition is upheld.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod while_keyword { }\n+\n+// 2018 Edition keywords\n+\n+#[unstable(feature = \"async_await\", issue = \"50547\")]\n+#[doc(keyword = \"async\")]\n+//\n+/// Return a [`Future`] instead of blocking the current thread.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`Future`]: ./future/trait.Future.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod async_keyword { }\n+\n+#[unstable(feature = \"async_await\", issue = \"50547\")]\n+#[doc(keyword = \"await\")]\n+//\n+/// Suspend execution until the result of a [`Future`] is ready.\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [`Future`]: ./future/trait.Future.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod await_keyword { }\n+\n+#[doc(keyword = \"dyn\")]\n+//\n+/// Name the type of a [trait object].\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [trait object]: ../book/ch17-02-trait-objects.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod dyn_keyword { }\n+\n+#[doc(keyword = \"union\")]\n+//\n+/// The [Rust equivalent of a C-style union][union].\n+///\n+/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+///\n+/// [union]: ../reference/items/unions.html\n+/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+mod union_keyword { }"}]}