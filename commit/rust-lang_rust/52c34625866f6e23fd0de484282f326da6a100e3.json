{"sha": "52c34625866f6e23fd0de484282f326da6a100e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzM0NjI1ODY2ZjZlMjNmZDBkZTQ4NDI4MmYzMjZkYTZhMTAwZTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-07T10:11:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-17T14:12:55Z"}, "message": "Use the newer snapshot_vec, which has a simplified delegate\ninterface since in practice no delegates had any state.", "tree": {"sha": "9fb362e4f1e4f0c0118344bcfa8a78664d1c0990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb362e4f1e4f0c0118344bcfa8a78664d1c0990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c34625866f6e23fd0de484282f326da6a100e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c34625866f6e23fd0de484282f326da6a100e3", "html_url": "https://github.com/rust-lang/rust/commit/52c34625866f6e23fd0de484282f326da6a100e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c34625866f6e23fd0de484282f326da6a100e3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966e53d8b6272a324c6be3460ae6bf52e47202fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/966e53d8b6272a324c6be3460ae6bf52e47202fe", "html_url": "https://github.com/rust-lang/rust/commit/966e53d8b6272a324c6be3460ae6bf52e47202fe"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "6837483a4220e7695b0ca62dd06846cc7caf2a65", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=52c34625866f6e23fd0de484282f326da6a100e3", "patch": "@@ -142,7 +142,6 @@ pub mod util {\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;\n-    pub mod snapshot_vec;\n     pub mod lev_distance;\n }\n "}, {"sha": "b3e3e016d85c2cbde4a6fa559ccd63b08c49a9a4", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=52c34625866f6e23fd0de484282f326da6a100e3", "patch": "@@ -17,7 +17,7 @@ use std::cmp::min;\n use std::marker::PhantomData;\n use std::mem;\n use std::u32;\n-use util::snapshot_vec as sv;\n+use rustc_data_structures::snapshot_vec as sv;\n \n pub struct TypeVariableTable<'tcx> {\n     values: sv::SnapshotVec<Delegate<'tcx>>,\n@@ -65,7 +65,7 @@ impl RelationDir {\n \n impl<'tcx> TypeVariableTable<'tcx> {\n     pub fn new() -> TypeVariableTable<'tcx> {\n-        TypeVariableTable { values: sv::SnapshotVec::new(Delegate(PhantomData)) }\n+        TypeVariableTable { values: sv::SnapshotVec::new() }\n     }\n \n     fn relations<'a>(&'a mut self, a: ty::TyVid) -> &'a mut Vec<Relation> {\n@@ -201,9 +201,7 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n     type Value = TypeVariableData<'tcx>;\n     type Undo = UndoEntry;\n \n-    fn reverse(&mut self,\n-               values: &mut Vec<TypeVariableData<'tcx>>,\n-               action: UndoEntry) {\n+    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry) {\n         match action {\n             SpecifyVar(vid, relations) => {\n                 values[vid.index as usize].value = Bounded(relations);"}, {"sha": "5aec4227136959ee5f48729a17c6634f26cfa70b", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=52c34625866f6e23fd0de484282f326da6a100e3", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{self, Ty};\n use std::fmt::Debug;\n use std::marker::PhantomData;\n use syntax::ast;\n-use util::snapshot_vec as sv;\n+use rustc_data_structures::snapshot_vec as sv;\n \n /// This trait is implemented by any type that can serve as a type\n /// variable. We call such variables *unification keys*. For example,\n@@ -95,7 +95,7 @@ pub struct Delegate<K>(PhantomData<K>);\n impl<K:UnifyKey> UnificationTable<K> {\n     pub fn new() -> UnificationTable<K> {\n         UnificationTable {\n-            values: sv::SnapshotVec::new(Delegate(PhantomData)),\n+            values: sv::SnapshotVec::new(),\n         }\n     }\n \n@@ -213,7 +213,7 @@ impl<K:UnifyKey> sv::SnapshotVecDelegate for Delegate<K> {\n     type Value = VarValue<K>;\n     type Undo = ();\n \n-    fn reverse(&mut self, _: &mut Vec<VarValue<K>>, _: ()) {\n+    fn reverse(_: &mut Vec<VarValue<K>>, _: ()) {\n         panic!(\"Nothing to reverse\");\n     }\n }"}, {"sha": "5f2f430df5039367b3eddbf0659dcf85cc61dcd5", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=52c34625866f6e23fd0de484282f326da6a100e3", "patch": "@@ -31,3 +31,5 @@\n \n #[macro_use] extern crate log;\n extern crate serialize as rustc_serialize; // used by deriving\n+\n+pub mod snapshot_vec;"}, {"sha": "5ab740f3629aa80238424aef0db1c173d3e23655", "filename": "src/librustc_data_structures/snapshot_vec.rs", "status": "renamed", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34625866f6e23fd0de484282f326da6a100e3/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs?ref=52c34625866f6e23fd0de484282f326da6a100e3", "patch": "@@ -21,6 +21,7 @@\n use self::UndoLog::*;\n \n use std::mem;\n+use std::ops;\n \n pub enum UndoLog<D:SnapshotVecDelegate> {\n     /// Indicates where a snapshot started.\n@@ -42,7 +43,6 @@ pub enum UndoLog<D:SnapshotVecDelegate> {\n pub struct SnapshotVec<D:SnapshotVecDelegate> {\n     values: Vec<D::Value>,\n     undo_log: Vec<UndoLog<D>>,\n-    delegate: D\n }\n \n // Snapshots are tokens that should be created/consumed linearly.\n@@ -55,15 +55,14 @@ pub trait SnapshotVecDelegate {\n     type Value;\n     type Undo;\n \n-    fn reverse(&mut self, values: &mut Vec<Self::Value>, action: Self::Undo);\n+    fn reverse(values: &mut Vec<Self::Value>, action: Self::Undo);\n }\n \n impl<D:SnapshotVecDelegate> SnapshotVec<D> {\n-    pub fn new(delegate: D) -> SnapshotVec<D> {\n+    pub fn new() -> SnapshotVec<D> {\n         SnapshotVec {\n             values: Vec::new(),\n             undo_log: Vec::new(),\n-            delegate: delegate\n         }\n     }\n \n@@ -77,6 +76,10 @@ impl<D:SnapshotVecDelegate> SnapshotVec<D> {\n         }\n     }\n \n+    pub fn len(&self) -> usize {\n+        self.values.len()\n+    }\n+\n     pub fn push(&mut self, elem: D::Value) -> usize {\n         let len = self.values.len();\n         self.values.push(elem);\n@@ -159,7 +162,7 @@ impl<D:SnapshotVecDelegate> SnapshotVec<D> {\n                 }\n \n                 Other(u) => {\n-                    self.delegate.reverse(&mut self.values, u);\n+                    D::reverse(&mut self.values, u);\n                 }\n             }\n         }\n@@ -184,3 +187,21 @@ impl<D:SnapshotVecDelegate> SnapshotVec<D> {\n         }\n     }\n }\n+\n+impl<D:SnapshotVecDelegate> ops::Deref for SnapshotVec<D> {\n+    type Target = [D::Value];\n+    fn deref(&self) -> &[D::Value] { &*self.values }\n+}\n+\n+impl<D:SnapshotVecDelegate> ops::DerefMut for SnapshotVec<D> {\n+    fn deref_mut(&mut self) -> &mut [D::Value] { &mut *self.values }\n+}\n+\n+impl<D:SnapshotVecDelegate> ops::Index<usize> for SnapshotVec<D> {\n+    type Output = D::Value;\n+    fn index(&self, index: usize) -> &D::Value { self.get(index) }\n+}\n+\n+impl<D:SnapshotVecDelegate> ops::IndexMut<usize> for SnapshotVec<D> {\n+    fn index_mut(&mut self, index: usize) -> &mut D::Value { self.get_mut(index) }\n+}", "previous_filename": "src/librustc/util/snapshot_vec.rs"}]}