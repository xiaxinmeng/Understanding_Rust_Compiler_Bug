{"sha": "b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1M2FjZDUzNTZkOTNhZDMxMDlhNGU1ZDRkMGNlMzI4ODBkYmMwZTE=", "commit": {"author": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2014-06-25T05:35:54Z"}, "committer": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2014-06-25T05:35:54Z"}, "message": "compiletest: Remove superfluous to_string calls", "tree": {"sha": "9ca028bb571c0e1fa3f3672c80294e3cfb808f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca028bb571c0e1fa3f3672c80294e3cfb808f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "html_url": "https://github.com/rust-lang/rust/commit/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/comments", "author": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91be86af0952aebb1f7c1811a6abcccd7bd1c26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91be86af0952aebb1f7c1811a6abcccd7bd1c26e", "html_url": "https://github.com/rust-lang/rust/commit/91be86af0952aebb1f7c1811a6abcccd7bd1c26e"}], "stats": {"total": 172, "additions": 77, "deletions": 95}, "files": [{"sha": "4de7b89ba6f29a21d3e9a83cb92b5396ef995cba", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "patch": "@@ -48,9 +48,7 @@ fn start(argc: int, argv: **u8) -> int {\n \n pub fn main() {\n     let args = os::args();\n-    let config = parse_config(args.move_iter()\n-                                  .map(|x| x.to_string())\n-                                  .collect());\n+    let config = parse_config(args);\n     log_config(&config);\n     run_tests(&config);\n }\n@@ -131,17 +129,15 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n     };\n \n     Config {\n-        compile_lib_path: matches.opt_str(\"compile-lib-path\")\n-                                 .unwrap()\n-                                 .to_string(),\n-        run_lib_path: matches.opt_str(\"run-lib-path\").unwrap().to_string(),\n+        compile_lib_path: matches.opt_str(\"compile-lib-path\").unwrap(),\n+        run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| Path::new(s)),\n         llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| Path::new(s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n-        stage_id: matches.opt_str(\"stage-id\").unwrap().to_string(),\n+        stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode: FromStr::from_str(matches.opt_str(\"mode\")\n                                        .unwrap()\n                                        .as_slice()).expect(\"invalid mode\"),\n@@ -155,32 +151,23 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         ratchet_noise_percent:\n             matches.opt_str(\"ratchet-noise-percent\")\n                    .and_then(|s| from_str::<f64>(s.as_slice())),\n-        runtool: matches.opt_str(\"runtool\").map(|x| x.to_string()),\n-        host_rustcflags: matches.opt_str(\"host-rustcflags\")\n-                                .map(|x| x.to_string()),\n-        target_rustcflags: matches.opt_str(\"target-rustcflags\")\n-                                  .map(|x| x.to_string()),\n+        runtool: matches.opt_str(\"runtool\"),\n+        host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n+        target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n         jit: matches.opt_present(\"jit\"),\n-        target: opt_str2(matches.opt_str(\"target\").map(|x| x.to_string())),\n-        host: opt_str2(matches.opt_str(\"host\").map(|x| x.to_string())),\n+        target: opt_str2(matches.opt_str(\"target\")),\n+        host: opt_str2(matches.opt_str(\"host\")),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),\n-        adb_path: opt_str2(matches.opt_str(\"adb-path\")\n-                                  .map(|x| x.to_string())),\n-        adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")\n-                                      .map(|x| x.to_string())),\n+        adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n+        adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n         adb_device_status:\n             \"arm-linux-androideabi\" ==\n-                opt_str2(matches.opt_str(\"target\")\n-                                .map(|x| x.to_string())).as_slice() &&\n+                opt_str2(matches.opt_str(\"target\")).as_slice() &&\n             \"(none)\" !=\n-                opt_str2(matches.opt_str(\"adb-test-dir\")\n-                                .map(|x| x.to_string())).as_slice() &&\n-            !opt_str2(matches.opt_str(\"adb-test-dir\")\n-                             .map(|x| x.to_string())).is_empty(),\n-        lldb_python_dir: matches.opt_str(\"lldb-python-dir\")\n-                                .map(|x| x.to_string()),\n-        test_shard: test::opt_shard(matches.opt_str(\"test-shard\")\n-                                           .map(|x| x.to_string())),\n+                opt_str2(matches.opt_str(\"adb-test-dir\")).as_slice() &&\n+            !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n+        lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n+        test_shard: test::opt_shard(matches.opt_str(\"test-shard\")),\n         verbose: matches.opt_present(\"verbose\")\n     }\n }"}, {"sha": "6ef2a52086e2f2059bdf7409857469c4f0b1d413", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "patch": "@@ -170,23 +170,23 @@ fn iter_header(testfile: &Path, it: |&str| -> bool) -> bool {\n }\n \n fn parse_error_pattern(line: &str) -> Option<String> {\n-    parse_name_value_directive(line, \"error-pattern\".to_string())\n+    parse_name_value_directive(line, \"error-pattern\")\n }\n \n fn parse_aux_build(line: &str) -> Option<String> {\n-    parse_name_value_directive(line, \"aux-build\".to_string())\n+    parse_name_value_directive(line, \"aux-build\")\n }\n \n fn parse_compile_flags(line: &str) -> Option<String> {\n-    parse_name_value_directive(line, \"compile-flags\".to_string())\n+    parse_name_value_directive(line, \"compile-flags\")\n }\n \n fn parse_run_flags(line: &str) -> Option<String> {\n-    parse_name_value_directive(line, \"run-flags\".to_string())\n+    parse_name_value_directive(line, \"run-flags\")\n }\n \n fn parse_check_line(line: &str) -> Option<String> {\n-    parse_name_value_directive(line, \"check\".to_string())\n+    parse_name_value_directive(line, \"check\")\n }\n \n fn parse_force_host(line: &str) -> bool {\n@@ -206,7 +206,7 @@ fn parse_no_pretty_expanded(line: &str) -> bool {\n }\n \n fn parse_exec_env(line: &str) -> Option<(String, String)> {\n-    parse_name_value_directive(line, \"exec-env\".to_string()).map(|nv| {\n+    parse_name_value_directive(line, \"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR\n         let mut strs: Vec<String> = nv.as_slice()\n                                       .splitn('=', 1)\n@@ -225,7 +225,7 @@ fn parse_exec_env(line: &str) -> Option<(String, String)> {\n }\n \n fn parse_pp_exact(line: &str, testfile: &Path) -> Option<Path> {\n-    match parse_name_value_directive(line, \"pp-exact\".to_string()) {\n+    match parse_name_value_directive(line, \"pp-exact\") {\n       Some(s) => Some(Path::new(s)),\n       None => {\n         if parse_name_directive(line, \"pp-exact\") {\n@@ -241,7 +241,7 @@ fn parse_name_directive(line: &str, directive: &str) -> bool {\n     line.contains(directive)\n }\n \n-pub fn parse_name_value_directive(line: &str, directive: String)\n+pub fn parse_name_value_directive(line: &str, directive: &str)\n                                   -> Option<String> {\n     let keycolon = format!(\"{}:\", directive);\n     match line.find_str(keycolon.as_slice()) {"}, {"sha": "ee69ab7cc520609ffb57bb996ebabd4e6630f9d4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "patch": "@@ -73,7 +73,7 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = compile_test(config, props, testfile);\n \n     if proc_res.status.success() {\n-        fatal_proc_rec(\"compile-fail test compiled successfully!\".to_string(),\n+        fatal_proc_rec(\"compile-fail test compiled successfully!\",\n                       &proc_res);\n     }\n \n@@ -82,8 +82,7 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let expected_errors = errors::load_errors(&config.cfail_regex, testfile);\n     if !expected_errors.is_empty() {\n         if !props.error_patterns.is_empty() {\n-            fatal(\"both error pattern and expected errors \\\n-                   specified\".to_string());\n+            fatal(\"both error pattern and expected errors specified\");\n         }\n         check_expected_errors(expected_errors, testfile, &proc_res);\n     } else {\n@@ -97,7 +96,7 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n         let proc_res = compile_test(config, props, testfile);\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(\"compilation failed!\".to_string(), &proc_res);\n+            fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n         exec_compiled_test(config, props, testfile)\n@@ -108,8 +107,7 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     // The value our Makefile configures valgrind to return on failure\n     static VALGRIND_ERR: int = 100;\n     if proc_res.status.matches_exit_status(VALGRIND_ERR) {\n-        fatal_proc_rec(\"run-fail test isn't valgrind-clean!\".to_string(),\n-                      &proc_res);\n+        fatal_proc_rec(\"run-fail test isn't valgrind-clean!\", &proc_res);\n     }\n \n     check_correct_failure_status(&proc_res);\n@@ -121,7 +119,8 @@ fn check_correct_failure_status(proc_res: &ProcRes) {\n     static RUST_ERR: int = 101;\n     if !proc_res.status.matches_exit_status(RUST_ERR) {\n         fatal_proc_rec(\n-            format!(\"failure produced the wrong error: {}\", proc_res.status),\n+            format!(\"failure produced the wrong error: {}\",\n+                    proc_res.status).as_slice(),\n             proc_res);\n     }\n }\n@@ -131,19 +130,19 @@ fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n         let mut proc_res = compile_test(config, props, testfile);\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(\"compilation failed!\".to_string(), &proc_res);\n+            fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n         proc_res = exec_compiled_test(config, props, testfile);\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(\"test run failed!\".to_string(), &proc_res);\n+            fatal_proc_rec(\"test run failed!\", &proc_res);\n         }\n     } else {\n         let proc_res = jit_test(config, props, testfile);\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(\"jit failed!\".to_string(), &proc_res);\n+            fatal_proc_rec(\"jit failed!\", &proc_res);\n         }\n     }\n }\n@@ -172,7 +171,8 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                     \"normal\");\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(format!(\"pretty-printing failed in round {}\", round),\n+            fatal_proc_rec(format!(\"pretty-printing failed in round {}\",\n+                                   round).as_slice(),\n                           &proc_res);\n         }\n \n@@ -204,22 +204,20 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = typecheck_source(config, props, testfile, actual);\n \n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"pretty-printed source does not typecheck\".to_string(),\n-                      &proc_res);\n+        fatal_proc_rec(\"pretty-printed source does not typecheck\", &proc_res);\n     }\n     if props.no_pretty_expanded { return }\n \n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testfile, (*srcs.get(round)).clone(), \"expanded\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(format!(\"pretty-printing (expanded) failed\"), &proc_res);\n+        fatal_proc_rec(\"pretty-printing (expanded) failed\", &proc_res);\n     }\n \n     let ProcRes{ stdout: expanded_src, .. } = proc_res;\n     let proc_res = typecheck_source(config, props, testfile, expanded_src);\n     if !proc_res.status.success() {\n-        fatal_proc_rec(format!(\"pretty-printed source (expanded) does \\\n-                               not typecheck\"),\n+        fatal_proc_rec(\"pretty-printed source (expanded) does not typecheck\",\n                       &proc_res);\n     }\n \n@@ -265,8 +263,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     fn compare_source(expected: &str, actual: &str) {\n         if expected != actual {\n-            error(\"pretty-printed source does not match expected \\\n-                   source\".to_string());\n+            error(\"pretty-printed source does not match expected source\");\n             println!(\"\\n\\\n expected:\\n\\\n ------------------------------------------\\n\\\n@@ -328,7 +325,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     // compile test file (it shoud have 'compile-flags:-g' in the header)\n     let compiler_run_result = compile_test(config, props, testfile);\n     if !compiler_run_result.status.success() {\n-        fatal_proc_rec(\"compilation failed!\".to_string(), &compiler_run_result);\n+        fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n     }\n \n     let exe_file = make_exe_name(config, testfile);\n@@ -412,7 +409,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n             let tool_path = match config.android_cross_path.as_str() {\n                 Some(x) => x.to_string(),\n-                None => fatal(\"cannot find android cross path\".to_string())\n+                None => fatal(\"cannot find android cross path\")\n             };\n \n             let debugger_script = make_out_name(config, testfile, \"debugger.script\");\n@@ -499,7 +496,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     }\n \n     if !debugger_run_result.status.success() {\n-        fatal(\"gdb failed to execute\".to_string());\n+        fatal(\"gdb failed to execute\");\n     }\n \n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n@@ -509,8 +506,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n     use std::io::process::{Command, ProcessOutput};\n \n     if config.lldb_python_dir.is_none() {\n-        fatal(\"Can't run LLDB test because LLDB's python path is not \\\n-               set.\".to_string());\n+        fatal(\"Can't run LLDB test because LLDB's python path is not set.\");\n     }\n \n     let mut config = Config {\n@@ -524,7 +520,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n     // compile test file (it shoud have 'compile-flags:-g' in the header)\n     let compile_result = compile_test(config, props, testfile);\n     if !compile_result.status.success() {\n-        fatal_proc_rec(\"compilation failed!\".to_string(), &compile_result);\n+        fatal_proc_rec(\"compilation failed!\", &compile_result);\n     }\n \n     let exe_file = make_exe_name(config, testfile);\n@@ -567,8 +563,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n     let debugger_run_result = run_lldb(config, &exe_file, &debugger_script);\n \n     if !debugger_run_result.status.success() {\n-        fatal_proc_rec(\"Error while running LLDB\".to_string(),\n-                      &debugger_run_result);\n+        fatal_proc_rec(\"Error while running LLDB\", &debugger_run_result);\n     }\n \n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n@@ -592,7 +587,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n             },\n             Err(e) => {\n                 fatal(format!(\"Failed to setup Python process for \\\n-                               LLDB script: {}\", e))\n+                               LLDB script: {}\", e).as_slice())\n             }\n         };\n \n@@ -633,18 +628,19 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n \n                 header::parse_name_value_directive(\n                         line.as_slice(),\n-                        command_directive.to_string()).map(|cmd| {\n+                        command_directive.as_slice()).map(|cmd| {\n                     commands.push(cmd)\n                 });\n \n                 header::parse_name_value_directive(\n                         line.as_slice(),\n-                        check_directive.to_string()).map(|cmd| {\n+                        check_directive.as_slice()).map(|cmd| {\n                     check_lines.push(cmd)\n                 });\n             }\n             Err(e) => {\n-                fatal(format!(\"Error while parsing debugger commands: {}\", e))\n+                fatal(format!(\"Error while parsing debugger commands: {}\",\n+                              e).as_slice())\n             }\n         }\n         counter += 1;\n@@ -672,8 +668,7 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n         split_maybe_args(options).move_iter()\n                                  .filter(|x| !options_to_remove.contains(x))\n                                  .collect::<Vec<String>>()\n-                                 .connect(\" \")\n-                                 .to_string();\n+                                 .connect(\" \");\n     Some(new_options)\n }\n \n@@ -728,7 +723,7 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n         }\n         if i != num_check_lines {\n             fatal_proc_rec(format!(\"line not found in debugger output: {}\",\n-                                  check_lines.get(i).unwrap()),\n+                                  check_lines.get(i).unwrap()).as_slice(),\n                           debugger_run_result);\n         }\n     }\n@@ -739,11 +734,11 @@ fn check_error_patterns(props: &TestProps,\n                         proc_res: &ProcRes) {\n     if props.error_patterns.is_empty() {\n         fatal(format!(\"no error pattern specified in {}\",\n-                      testfile.display().as_maybe_owned().as_slice()));\n+                      testfile.display()).as_slice());\n     }\n \n     if proc_res.status.success() {\n-        fatal(\"process did not return an error status\".to_string());\n+        fatal(\"process did not return an error status\");\n     }\n \n     let mut next_err_idx = 0u;\n@@ -772,21 +767,21 @@ fn check_error_patterns(props: &TestProps,\n         props.error_patterns.slice(next_err_idx, props.error_patterns.len());\n     if missing_patterns.len() == 1u {\n         fatal_proc_rec(format!(\"error pattern '{}' not found!\",\n-                              missing_patterns[0]),\n+                              missing_patterns[0]).as_slice(),\n                       proc_res);\n     } else {\n         for pattern in missing_patterns.iter() {\n-            error(format!(\"error pattern '{}' not found!\", *pattern));\n+            error(format!(\"error pattern '{}' not found!\",\n+                          *pattern).as_slice());\n         }\n-        fatal_proc_rec(\"multiple error patterns not found\".to_string(),\n-                      proc_res);\n+        fatal_proc_rec(\"multiple error patterns not found\", proc_res);\n     }\n }\n \n fn check_no_compiler_crash(proc_res: &ProcRes) {\n     for line in proc_res.stderr.as_slice().lines() {\n         if line.starts_with(\"error: internal compiler error:\") {\n-            fatal_proc_rec(\"compiler encountered internal error\".to_string(),\n+            fatal_proc_rec(\"compiler encountered internal error\",\n                           proc_res);\n         }\n     }\n@@ -801,7 +796,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         expected_errors.len(), false);\n \n     if proc_res.status.success() {\n-        fatal(\"process did not return an error status\".to_string());\n+        fatal(\"process did not return an error status\");\n     }\n \n     let prefixes = expected_errors.iter().map(|ee| {\n@@ -865,7 +860,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n \n         if !was_expected && is_compiler_error_or_warning(line) {\n             fatal_proc_rec(format!(\"unexpected compiler error or warning: '{}'\",\n-                                  line),\n+                                  line).as_slice(),\n                           proc_res);\n         }\n     }\n@@ -874,7 +869,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         if !flag {\n             let ee = expected_errors.get(i);\n             fatal_proc_rec(format!(\"expected {} on line {} not found: {}\",\n-                                  ee.kind, ee.line, ee.msg),\n+                                  ee.kind, ee.line, ee.msg).as_slice(),\n                           proc_res);\n         }\n     }\n@@ -1059,7 +1054,7 @@ fn compose_and_run_compiler(\n         if !auxres.status.success() {\n             fatal_proc_rec(\n                 format!(\"auxiliary build of {} failed to compile: \",\n-                        abs_ab.display()),\n+                        abs_ab.display()).as_slice(),\n                 &auxres);\n         }\n \n@@ -1296,11 +1291,11 @@ fn maybe_dump_to_stdout(config: &Config, out: &str, err: &str) {\n     }\n }\n \n-fn error(err: String) { println!(\"\\nerror: {}\", err); }\n+fn error(err: &str) { println!(\"\\nerror: {}\", err); }\n \n-fn fatal(err: String) -> ! { error(err); fail!(); }\n+fn fatal(err: &str) -> ! { error(err); fail!(); }\n \n-fn fatal_proc_rec(err: String, proc_res: &ProcRes) -> ! {\n+fn fatal_proc_rec(err: &str, proc_res: &ProcRes) -> ! {\n     print!(\"\\n\\\n error: {}\\n\\\n status: {}\\n\\\n@@ -1573,44 +1568,44 @@ fn run_codegen_test(config: &Config, props: &TestProps,\n                     testfile: &Path, mm: &mut MetricMap) {\n \n     if config.llvm_bin_path.is_none() {\n-        fatal(\"missing --llvm-bin-path\".to_string());\n+        fatal(\"missing --llvm-bin-path\");\n     }\n \n     if config.clang_path.is_none() {\n-        fatal(\"missing --clang-path\".to_string());\n+        fatal(\"missing --clang-path\");\n     }\n \n     let mut proc_res = compile_test_and_save_bitcode(config, props, testfile);\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"compilation failed!\".to_string(), &proc_res);\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n     }\n \n     proc_res = extract_function_from_bitcode(config, props, \"test\", testfile, \"\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"extracting 'test' function failed\".to_string(),\n+        fatal_proc_rec(\"extracting 'test' function failed\",\n                       &proc_res);\n     }\n \n     proc_res = disassemble_extract(config, props, testfile, \"\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"disassembling extract failed\".to_string(), &proc_res);\n+        fatal_proc_rec(\"disassembling extract failed\", &proc_res);\n     }\n \n \n     let mut proc_res = compile_cc_with_clang_and_save_bitcode(config, props, testfile);\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"compilation failed!\".to_string(), &proc_res);\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n     }\n \n     proc_res = extract_function_from_bitcode(config, props, \"test\", testfile, \"clang\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"extracting 'test' function failed\".to_string(),\n+        fatal_proc_rec(\"extracting 'test' function failed\",\n                       &proc_res);\n     }\n \n     proc_res = disassemble_extract(config, props, testfile, \"clang\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"disassembling extract failed\".to_string(), &proc_res);\n+        fatal_proc_rec(\"disassembling extract failed\", &proc_res);\n     }\n \n     let base = output_base_name(config, testfile);"}, {"sha": "c6e02606f74e750fa4eababd3d61c6a05f7941dc", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=b53acd5356d93ad3109a4e5d4d0ce32880dbc0e1", "patch": "@@ -37,7 +37,7 @@ pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n     // maintain the current value while adding our own\n-    match getenv(lib_path_env_var().as_slice()) {\n+    match getenv(lib_path_env_var()) {\n       Some(curr) => {\n         format!(\"{}{}{}\", path, path_div(), curr)\n       }\n@@ -46,10 +46,10 @@ pub fn make_new_path(path: &str) -> String {\n }\n \n #[cfg(target_os = \"win32\")]\n-pub fn lib_path_env_var() -> String { \"PATH\".to_string() }\n+pub fn lib_path_env_var() -> &'static str { \"PATH\" }\n \n #[cfg(target_os = \"win32\")]\n-pub fn path_div() -> String { \";\".to_string() }\n+pub fn path_div() -> &'static str { \";\" }\n \n pub fn logv(config: &Config, s: String) {\n     debug!(\"{}\", s);"}]}