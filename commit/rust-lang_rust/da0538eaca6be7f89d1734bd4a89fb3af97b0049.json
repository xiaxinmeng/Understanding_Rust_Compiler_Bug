{"sha": "da0538eaca6be7f89d1734bd4a89fb3af97b0049", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDUzOGVhY2E2YmU3Zjg5ZDE3MzRiZDRhODlmYjNhZjk3YjAwNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T08:27:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T08:27:05Z"}, "message": "Auto merge of #7330 - xFrednet:0000-refactor-map-identity, r=flip1995\n\nRefactoring identity function lints\n\nI've noticed that we have several lints that all check for identity functions and each used their own check implementation. I moved the `is_expr_identity_function` function to `clippy_utils` and adapted all lints to reuse that one function. This should make the addition of new lints like this also easier in the future.\n\nI've also moved the `map_identity` lint into the `methods` module. It's probably the best to review this PR by checking each commit individually. And that's it, have a great day :upside_down_face:\n\nchangelog: none", "tree": {"sha": "304fa60634612addf60492ea6127bfd992ab3b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304fa60634612addf60492ea6127bfd992ab3b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0538eaca6be7f89d1734bd4a89fb3af97b0049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0538eaca6be7f89d1734bd4a89fb3af97b0049", "html_url": "https://github.com/rust-lang/rust/commit/da0538eaca6be7f89d1734bd4a89fb3af97b0049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0538eaca6be7f89d1734bd4a89fb3af97b0049/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07217e3370868440b17d846dd4b156449ed62920", "url": "https://api.github.com/repos/rust-lang/rust/commits/07217e3370868440b17d846dd4b156449ed62920", "html_url": "https://github.com/rust-lang/rust/commit/07217e3370868440b17d846dd4b156449ed62920"}, {"sha": "5336f88403aae270e1e8bbf0aee31707311c590f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5336f88403aae270e1e8bbf0aee31707311c590f", "html_url": "https://github.com/rust-lang/rust/commit/5336f88403aae270e1e8bbf0aee31707311c590f"}], "stats": {"total": 382, "additions": 178, "deletions": 204}, "files": [{"sha": "c6d9b378603592175b4f0f89c9b3428604116f46", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -254,7 +254,6 @@ mod manual_strip;\n mod manual_unwrap_or;\n mod map_clone;\n mod map_err_ignore;\n-mod map_identity;\n mod map_unit_fn;\n mod match_on_vec_items;\n mod matches;\n@@ -705,7 +704,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         manual_unwrap_or::MANUAL_UNWRAP_OR,\n         map_clone::MAP_CLONE,\n         map_err_ignore::MAP_ERR_IGNORE,\n-        map_identity::MAP_IDENTITY,\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n         match_on_vec_items::MATCH_ON_VEC_ITEMS,\n@@ -765,6 +763,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::MANUAL_STR_REPEAT,\n         methods::MAP_COLLECT_RESULT_UNIT,\n         methods::MAP_FLATTEN,\n+        methods::MAP_IDENTITY,\n         methods::MAP_UNWRAP_OR,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n@@ -1260,7 +1259,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(manual_strip::MANUAL_STRIP),\n         LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n         LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(map_identity::MAP_IDENTITY),\n         LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n@@ -1301,6 +1299,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(methods::MANUAL_STR_REPEAT),\n         LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+        LintId::of(methods::MAP_IDENTITY),\n         LintId::of(methods::NEW_RET_NO_SELF),\n         LintId::of(methods::OK_EXPECT),\n         LintId::of(methods::OPTION_AS_REF_DEREF),\n@@ -1586,7 +1585,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(loops::WHILE_LET_LOOP),\n         LintId::of(manual_strip::MANUAL_STRIP),\n         LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_identity::MAP_IDENTITY),\n         LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(matches::MATCH_AS_REF),\n@@ -1601,6 +1599,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::ITER_COUNT),\n         LintId::of(methods::MANUAL_FILTER_MAP),\n         LintId::of(methods::MANUAL_FIND_MAP),\n+        LintId::of(methods::MAP_IDENTITY),\n         LintId::of(methods::OPTION_AS_REF_DEREF),\n         LintId::of(methods::OPTION_FILTER_MAP),\n         LintId::of(methods::SEARCH_IS_SOME),\n@@ -2039,7 +2038,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         single_char_binding_names_threshold,\n     });\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n-    store.register_late_pass(|| box map_identity::MapIdentity);\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n     store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n     store.register_late_pass(|| box repeat_once::RepeatOnce);"}, {"sha": "41cda23510ea2f9e19e694e534ebf0f98d5e8834", "filename": "clippy_lints/src/map_identity.rs", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/07217e3370868440b17d846dd4b156449ed62920/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07217e3370868440b17d846dd4b156449ed62920/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=07217e3370868440b17d846dd4b156449ed62920", "patch": "@@ -1,126 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_adjusted, is_qpath_def_path, is_trait_method, match_var, paths, remove_blocks};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n-    ///\n-    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// let x = [1, 2, 3];\n-    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// let x = [1, 2, 3];\n-    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n-    /// ```\n-    pub MAP_IDENTITY,\n-    complexity,\n-    \"using iterator.map(|x| x)\"\n-}\n-\n-declare_lint_pass!(MapIdentity => [MAP_IDENTITY]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MapIdentity {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let Some([caller, func]) = get_map_argument(cx, expr);\n-            if is_expr_identity_function(cx, func);\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MAP_IDENTITY,\n-                    expr.span.trim_start(caller.span).unwrap(),\n-                    \"unnecessary map of the identity function\",\n-                    \"remove the call to `map`\",\n-                    String::new(),\n-                    Applicability::MachineApplicable\n-                )\n-            }\n-        }\n-    }\n-}\n-\n-/// Returns the arguments passed into map() if the expression is a method call to\n-/// map(). Otherwise, returns None.\n-fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n-        if args.len() == 2 && method.ident.name == sym::map;\n-        let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n-        if is_trait_method(cx, expr, sym::Iterator)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n-        then {\n-            Some(args)\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Checks if an expression represents the identity function\n-/// Only examines closures and `std::convert::identity`\n-fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n-        ExprKind::Path(ref path) => is_qpath_def_path(cx, path, expr.hir_id, &paths::CONVERT_IDENTITY),\n-        _ => false,\n-    }\n-}\n-\n-/// Checks if a function's body represents the identity function\n-/// Looks for bodies of the form `|x| x`, `|x| return x`, `|x| { return x }` or `|x| {\n-/// return x; }`\n-fn is_body_identity_function(cx: &LateContext<'_>, func: &Body<'_>) -> bool {\n-    let params = func.params;\n-    let body = remove_blocks(&func.value);\n-\n-    // if there's less/more than one parameter, then it is not the identity function\n-    if params.len() != 1 {\n-        return false;\n-    }\n-\n-    match body.kind {\n-        ExprKind::Path(QPath::Resolved(None, _)) => match_expr_param(cx, body, params[0].pat),\n-        ExprKind::Ret(Some(ret_val)) => match_expr_param(cx, ret_val, params[0].pat),\n-        ExprKind::Block(block, _) => {\n-            if_chain! {\n-                if block.stmts.len() == 1;\n-                if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = block.stmts[0].kind;\n-                if let ExprKind::Ret(Some(ret_val)) = expr.kind;\n-                then {\n-                    match_expr_param(cx, ret_val, params[0].pat)\n-                } else {\n-                    false\n-                }\n-            }\n-        },\n-        _ => false,\n-    }\n-}\n-\n-/// Returns true iff an expression returns the same thing as a parameter's pattern\n-fn match_expr_param(cx: &LateContext<'_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n-    if let PatKind::Binding(_, _, ident, _) = pat.kind {\n-        match_var(expr, ident.name) && !(cx.typeck_results().hir_owner == expr.hir_id.owner && is_adjusted(cx, expr))\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "d1b5e945dfdaa83a85b5ce13d776b0d438b88579", "filename": "clippy_lints/src/methods/filter_map_identity.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{is_expr_path_def_path, is_trait_method, path_to_local_id, paths};\n-use if_chain::if_chain;\n+use clippy_utils::{is_expr_identity_function, is_trait_method};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -9,32 +8,15 @@ use rustc_span::{source_map::Span, sym};\n use super::FILTER_MAP_IDENTITY;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, filter_map_arg: &hir::Expr<'_>, filter_map_span: Span) {\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let apply_lint = |message: &str| {\n-            span_lint_and_sugg(\n-                cx,\n-                FILTER_MAP_IDENTITY,\n-                filter_map_span.with_hi(expr.span.hi()),\n-                message,\n-                \"try\",\n-                \"flatten()\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        };\n-\n-        if_chain! {\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = filter_map_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n-\n-            if let hir::PatKind::Binding(_, binding_id, ..) = body.params[0].pat.kind;\n-            if path_to_local_id(&body.value, binding_id);\n-            then {\n-                apply_lint(\"called `filter_map(|x| x)` on an `Iterator`\");\n-            }\n-        }\n-\n-        if is_expr_path_def_path(cx, filter_map_arg, &paths::CONVERT_IDENTITY) {\n-            apply_lint(\"called `filter_map(std::convert::identity)` on an `Iterator`\");\n-        }\n+    if is_trait_method(cx, expr, sym::Iterator) && is_expr_identity_function(cx, filter_map_arg) {\n+        span_lint_and_sugg(\n+            cx,\n+            FILTER_MAP_IDENTITY,\n+            filter_map_span.with_hi(expr.span.hi()),\n+            \"use of `filter_map` with an identity function\",\n+            \"try\",\n+            \"flatten()\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }"}, {"sha": "6f911d79d0bc50880628e5de6f2711802601d58d", "filename": "clippy_lints/src/methods/flat_map_identity.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{is_expr_path_def_path, is_trait_method, paths};\n-use if_chain::if_chain;\n+use clippy_utils::{is_expr_identity_function, is_trait_method};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -15,36 +14,15 @@ pub(super) fn check<'tcx>(\n     flat_map_arg: &'tcx hir::Expr<'_>,\n     flat_map_span: Span,\n ) {\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let apply_lint = |message: &str| {\n-            span_lint_and_sugg(\n-                cx,\n-                FLAT_MAP_IDENTITY,\n-                flat_map_span.with_hi(expr.span.hi()),\n-                message,\n-                \"try\",\n-                \"flatten()\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        };\n-\n-        if_chain! {\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = flat_map_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n-\n-            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.params[0].pat.kind;\n-            if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = body.value.kind;\n-\n-            if path.segments.len() == 1;\n-            if path.segments[0].ident.name == binding_ident.name;\n-\n-            then {\n-                apply_lint(\"called `flat_map(|x| x)` on an `Iterator`\");\n-            }\n-        }\n-\n-        if is_expr_path_def_path(cx, flat_map_arg, &paths::CONVERT_IDENTITY) {\n-            apply_lint(\"called `flat_map(std::convert::identity)` on an `Iterator`\");\n-        }\n+    if is_trait_method(cx, expr, sym::Iterator) && is_expr_identity_function(cx, flat_map_arg) {\n+        span_lint_and_sugg(\n+            cx,\n+            FLAT_MAP_IDENTITY,\n+            flat_map_span.with_hi(expr.span.hi()),\n+            \"use of `flat_map` with an identity function\",\n+            \"try\",\n+            \"flatten()\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }"}, {"sha": "538a12566e3031880a9400f3a1f294cf491a0556", "filename": "clippy_lints/src/methods/map_identity.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_expr_identity_function, is_trait_method};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::{source_map::Span, sym};\n+\n+use super::MAP_IDENTITY;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    caller: &hir::Expr<'_>,\n+    map_arg: &hir::Expr<'_>,\n+    _map_span: Span,\n+) {\n+    let caller_ty = cx.typeck_results().expr_ty(caller);\n+\n+    if_chain! {\n+        if is_trait_method(cx, expr, sym::Iterator)\n+            || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n+            || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n+        if is_expr_identity_function(cx, map_arg);\n+        if let Some(sugg_span) = expr.span.trim_start(caller.span);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_IDENTITY,\n+                sugg_span,\n+                \"unnecessary map of the identity function\",\n+                \"remove the call to `map`\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}"}, {"sha": "d4f8cef4f375d6b8f206e70b0767a5c1c3d4111f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -35,6 +35,7 @@ mod manual_saturating_arithmetic;\n mod manual_str_repeat;\n mod map_collect_result_unit;\n mod map_flatten;\n+mod map_identity;\n mod map_unwrap_or;\n mod ok_expect;\n mod option_as_ref_deref;\n@@ -1561,6 +1562,29 @@ declare_clippy_lint! {\n     \"call to `filter_map` where `flatten` is sufficient\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n+    ///\n+    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n+    /// ```\n+    pub MAP_IDENTITY,\n+    complexity,\n+    \"using iterator.map(|x| x)\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for the use of `.bytes().nth()`.\n     ///\n@@ -1728,6 +1752,7 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP_IDENTITY,\n+    MAP_IDENTITY,\n     MANUAL_FILTER_MAP,\n     MANUAL_FIND_MAP,\n     OPTION_FILTER_MAP,\n@@ -2058,6 +2083,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                         _ => {},\n                     }\n                 }\n+                map_identity::check(cx, expr, recv, m_arg, span);\n             },\n             (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n             (\"next\", []) => {"}, {"sha": "d3efd32d727e5477aa01839a2f079913add98c5b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1401,6 +1401,60 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     did.map_or(false, |did| must_use_attr(cx.tcx.get_attrs(did)).is_some())\n }\n \n+/// Checks if an expression represents the identity function\n+/// Only examines closures and `std::convert::identity`\n+pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    /// Returns true if the expression is a binding to the given pattern\n+    fn is_expr_pat_binding(cx: &LateContext<'_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n+        if let PatKind::Binding(_, _, ident, _) = pat.kind {\n+            if match_var(expr, ident.name) {\n+                return !(cx.typeck_results().hir_owner == expr.hir_id.owner && is_adjusted(cx, expr));\n+            }\n+        }\n+\n+        false\n+    }\n+\n+    /// Checks if a function's body represents the identity function. Looks for bodies of the form:\n+    /// * `|x| x`\n+    /// * `|x| return x`\n+    /// * `|x| { return x }`\n+    /// * `|x| { return x; }`\n+    fn is_body_identity_function(cx: &LateContext<'_>, func: &Body<'_>) -> bool {\n+        let body = remove_blocks(&func.value);\n+\n+        let value_pat = if let [value_param] = func.params {\n+            value_param.pat\n+        } else {\n+            return false;\n+        };\n+\n+        match body.kind {\n+            ExprKind::Path(QPath::Resolved(None, _)) => is_expr_pat_binding(cx, body, value_pat),\n+            ExprKind::Ret(Some(ret_val)) => is_expr_pat_binding(cx, ret_val, value_pat),\n+            ExprKind::Block(block, _) => {\n+                if_chain! {\n+                    if let &[block_stmt] = &block.stmts;\n+                    if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = block_stmt.kind;\n+                    if let ExprKind::Ret(Some(ret_val)) = expr.kind;\n+                    then {\n+                        is_expr_pat_binding(cx, ret_val, value_pat)\n+                    } else {\n+                        false\n+                    }\n+                }\n+            },\n+            _ => false,\n+        }\n+    }\n+\n+    match expr.kind {\n+        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Path(ref path) => is_qpath_def_path(cx, path, expr.hir_id, &paths::CONVERT_IDENTITY),\n+        _ => false,\n+    }\n+}\n+\n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n     let map = tcx.hir();"}, {"sha": "a5860aa49b3bb7f909aeee04e130285188fd0ae8", "filename": "tests/ui/filter_map_identity.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.fixed?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, clippy::needless_return)]\n #![warn(clippy::filter_map_identity)]\n \n fn main() {\n@@ -13,4 +13,7 @@ fn main() {\n     use std::convert::identity;\n     let iterator = vec![Some(1), None, Some(2)].into_iter();\n     let _ = iterator.flatten();\n+\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.flatten();\n }"}, {"sha": "7e998b9cdf7010f4cd6e1fa84af582a3450dd6eb", "filename": "tests/ui/filter_map_identity.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, clippy::needless_return)]\n #![warn(clippy::filter_map_identity)]\n \n fn main() {\n@@ -13,4 +13,7 @@ fn main() {\n     use std::convert::identity;\n     let iterator = vec![Some(1), None, Some(2)].into_iter();\n     let _ = iterator.filter_map(identity);\n+\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.filter_map(|x| return x);\n }"}, {"sha": "43c9fdca4fbe0251b54e6e6c70f4ab2fe3873eb8", "filename": "tests/ui/filter_map_identity.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Ffilter_map_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.stderr?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,22 +1,28 @@\n-error: called `filter_map(|x| x)` on an `Iterator`\n+error: use of `filter_map` with an identity function\n   --> $DIR/filter_map_identity.rs:8:22\n    |\n LL |     let _ = iterator.filter_map(|x| x);\n    |                      ^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n    |\n    = note: `-D clippy::filter-map-identity` implied by `-D warnings`\n \n-error: called `filter_map(std::convert::identity)` on an `Iterator`\n+error: use of `filter_map` with an identity function\n   --> $DIR/filter_map_identity.rs:11:22\n    |\n LL |     let _ = iterator.filter_map(std::convert::identity);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n \n-error: called `filter_map(std::convert::identity)` on an `Iterator`\n+error: use of `filter_map` with an identity function\n   --> $DIR/filter_map_identity.rs:15:22\n    |\n LL |     let _ = iterator.filter_map(identity);\n    |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n \n-error: aborting due to 3 previous errors\n+error: use of `filter_map` with an identity function\n+  --> $DIR/filter_map_identity.rs:18:22\n+   |\n+LL |     let _ = iterator.filter_map(|x| return x);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "1f4b880ef5bcd8fa1cea502a8b9bd5efae1d7ba9", "filename": "tests/ui/flat_map_identity.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.fixed?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, clippy::needless_return)]\n #![warn(clippy::flat_map_identity)]\n \n use std::convert;\n@@ -11,4 +11,7 @@ fn main() {\n \n     let iterator = [[0, 1], [2, 3], [4, 5]].iter();\n     let _ = iterator.flatten();\n+\n+    let iterator = [[0, 1], [2, 3], [4, 5]].iter();\n+    let _ = iterator.flatten();\n }"}, {"sha": "de14a06d4e6b3377a40d277105d073005e68229a", "filename": "tests/ui/flat_map_identity.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.rs?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, clippy::needless_return)]\n #![warn(clippy::flat_map_identity)]\n \n use std::convert;\n@@ -11,4 +11,7 @@ fn main() {\n \n     let iterator = [[0, 1], [2, 3], [4, 5]].iter();\n     let _ = iterator.flat_map(convert::identity);\n+\n+    let iterator = [[0, 1], [2, 3], [4, 5]].iter();\n+    let _ = iterator.flat_map(|x| return x);\n }"}, {"sha": "e776c9fdf512e2bda03316138086e2eabd4e2dcf", "filename": "tests/ui/flat_map_identity.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da0538eaca6be7f89d1734bd4a89fb3af97b0049/tests%2Fui%2Fflat_map_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.stderr?ref=da0538eaca6be7f89d1734bd4a89fb3af97b0049", "patch": "@@ -1,16 +1,22 @@\n-error: called `flat_map(|x| x)` on an `Iterator`\n+error: use of `flat_map` with an identity function\n   --> $DIR/flat_map_identity.rs:10:22\n    |\n LL |     let _ = iterator.flat_map(|x| x);\n    |                      ^^^^^^^^^^^^^^^ help: try: `flatten()`\n    |\n    = note: `-D clippy::flat-map-identity` implied by `-D warnings`\n \n-error: called `flat_map(std::convert::identity)` on an `Iterator`\n+error: use of `flat_map` with an identity function\n   --> $DIR/flat_map_identity.rs:13:22\n    |\n LL |     let _ = iterator.flat_map(convert::identity);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n \n-error: aborting due to 2 previous errors\n+error: use of `flat_map` with an identity function\n+  --> $DIR/flat_map_identity.rs:16:22\n+   |\n+LL |     let _ = iterator.flat_map(|x| return x);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n+\n+error: aborting due to 3 previous errors\n "}]}