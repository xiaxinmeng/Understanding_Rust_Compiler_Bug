{"sha": "1cff5642037b83ce1239a624bbe617a9aa0d59b1", "node_id": "C_kwDOAAsO6NoAKDFjZmY1NjQyMDM3YjgzY2UxMjM5YTYyNGJiZTYxN2E5YWEwZDU5YjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T08:09:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-23T08:09:19Z"}, "message": "Auto merge of #100782 - thomcc:fix-android-sigaddset, r=Mark-Simulacrum\n\nAlign android `sigaddset` impl with the reference impl from Bionic\n\nIn https://github.com/rust-lang/rust/pull/100737 I noticed we were treating the sigset_t as an array of bytes, while referencing code from android (https://github.com/aosp-mirror/platform_bionic/blob/ad8dcd6023294b646e5a8288c0ed431b0845da49/libc/include/android/legacy_signal_inlines.h) which treats it as an array of unsigned long.\n\nThat said, the behavior difference is so subtle here that it's not hard to see why nobody noticed. This fixes the implementation to be equivalent to the one in bionic.", "tree": {"sha": "a84d0dbe1ea7919f43d0404d179da9241206c7df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84d0dbe1ea7919f43d0404d179da9241206c7df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cff5642037b83ce1239a624bbe617a9aa0d59b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cff5642037b83ce1239a624bbe617a9aa0d59b1", "html_url": "https://github.com/rust-lang/rust/commit/1cff5642037b83ce1239a624bbe617a9aa0d59b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cff5642037b83ce1239a624bbe617a9aa0d59b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38528d4dc0a0c079069764f23f11ef9f4fba2f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/38528d4dc0a0c079069764f23f11ef9f4fba2f95", "html_url": "https://github.com/rust-lang/rust/commit/38528d4dc0a0c079069764f23f11ef9f4fba2f95"}, {"sha": "4ecf87619c8e2f6212a46501ea2aff18f5beb8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf87619c8e2f6212a46501ea2aff18f5beb8c5", "html_url": "https://github.com/rust-lang/rust/commit/4ecf87619c8e2f6212a46501ea2aff18f5beb8c5"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "6985f1d78308795ae74262fa4022c0b5f68b8e45", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1cff5642037b83ce1239a624bbe617a9aa0d59b1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cff5642037b83ce1239a624bbe617a9aa0d59b1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=1cff5642037b83ce1239a624bbe617a9aa0d59b1", "patch": "@@ -45,11 +45,31 @@ cfg_if::cfg_if! {\n         }\n         #[allow(dead_code)]\n         pub unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n-            use crate::{slice, mem};\n+            use crate::{\n+                mem::{align_of, size_of},\n+                slice,\n+            };\n+            use libc::{c_ulong, sigset_t};\n+\n+            // The implementations from bionic (android libc) type pun `sigset_t` as an\n+            // array of `c_ulong`. This works, but lets add a smoke check to make sure\n+            // that doesn't change.\n+            const _: () = assert!(\n+                align_of::<c_ulong>() == align_of::<sigset_t>()\n+                    && (size_of::<sigset_t>() % size_of::<c_ulong>()) == 0\n+            );\n \n-            let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<libc::sigset_t>());\n             let bit = (signum - 1) as usize;\n-            raw[bit / 8] |= 1 << (bit % 8);\n+            if set.is_null() || bit >= (8 * size_of::<sigset_t>()) {\n+                crate::sys::unix::os::set_errno(libc::EINVAL);\n+                return -1;\n+            }\n+            let raw = slice::from_raw_parts_mut(\n+                set as *mut c_ulong,\n+                size_of::<sigset_t>() / size_of::<c_ulong>(),\n+            );\n+            const LONG_BIT: usize = size_of::<c_ulong>() * 8;\n+            raw[bit / LONG_BIT] |= 1 << (bit % LONG_BIT);\n             return 0;\n         }\n     } else {"}]}