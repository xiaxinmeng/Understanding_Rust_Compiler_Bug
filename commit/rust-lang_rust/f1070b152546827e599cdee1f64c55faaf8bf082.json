{"sha": "f1070b152546827e599cdee1f64c55faaf8bf082", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMDcwYjE1MjU0NjgyN2U1OTljZGVlMWY2NGM1NWZhYWY4YmYwODI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-02-17T12:53:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-02T12:19:10Z"}, "message": "Replace ToJson with serde", "tree": {"sha": "9c71ce5bf54bdeabffcc1c96a97d9aebd0747697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c71ce5bf54bdeabffcc1c96a97d9aebd0747697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1070b152546827e599cdee1f64c55faaf8bf082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1070b152546827e599cdee1f64c55faaf8bf082", "html_url": "https://github.com/rust-lang/rust/commit/f1070b152546827e599cdee1f64c55faaf8bf082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1070b152546827e599cdee1f64c55faaf8bf082/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15babed8b7936e03ed4cd57afd5c91c44dc4f0be", "url": "https://api.github.com/repos/rust-lang/rust/commits/15babed8b7936e03ed4cd57afd5c91c44dc4f0be", "html_url": "https://github.com/rust-lang/rust/commit/15babed8b7936e03ed4cd57afd5c91c44dc4f0be"}], "stats": {"total": 129, "additions": 51, "deletions": 78}, "files": [{"sha": "58c8a7d82bfb5ff8d9e5f55329ce5a200728b8f9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -1,6 +1,6 @@\n use std::collections::BTreeMap;\n-use std::ffi::OsStr;\n use std::convert::TryFrom;\n+use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n@@ -28,12 +28,12 @@ use crate::theme;\n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum OutputFormat {\n     Json,\n-    HTML,\n+    Html,\n }\n \n impl OutputFormat {\n     pub fn is_json(&self) -> bool {\n-        match *self {\n+        match self {\n             OutputFormat::Json => true,\n             _ => false,\n         }\n@@ -46,7 +46,7 @@ impl TryFrom<&str> for OutputFormat {\n     fn try_from(value: &str) -> Result<Self, Self::Error> {\n         match value {\n             \"json\" => Ok(OutputFormat::Json),\n-            \"html\" => Ok(OutputFormat::HTML),\n+            \"html\" => Ok(OutputFormat::Html),\n             _ => Err(format!(\"unknown output format `{}`\", value)),\n         }\n     }\n@@ -498,14 +498,20 @@ impl Options {\n                         diag.struct_err(\"json output format isn't supported for doc generation\")\n                             .emit();\n                         return Err(1);\n+                    } else if !o.is_json() && show_coverage {\n+                        diag.struct_err(\n+                            \"html output format isn't supported for the --show-coverage option\",\n+                        )\n+                        .emit();\n+                        return Err(1);\n                     }\n                     Some(o)\n                 }\n                 Err(e) => {\n                     diag.struct_err(&e).emit();\n                     return Err(1);\n                 }\n-            }\n+            },\n             None => None,\n         };\n         let crate_name = matches.opt_str(\"crate-name\");"}, {"sha": "f48224512ba4f9b54b45edc88f684dad9afe8aef", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 26, "deletions": 64, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -7,7 +7,8 @@ use crate::passes::Pass;\n use rustc_ast::attr;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n-use serialize::json::{ToJson, Json};\n+use serde::Serialize;\n+use serde_json;\n \n use std::collections::BTreeMap;\n use std::ops;\n@@ -18,16 +19,16 @@ pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n     description: \"counts the number of items with and without documentation\",\n };\n \n-fn calculate_doc_coverage( krate: clean::Crate, ctx: &DocContext<'_>) -> clean::Crate {\n-    let mut calc = CoverageCalculator::new(ctx.renderinfo.borrow().output_format);\n+fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::Crate {\n+    let mut calc = CoverageCalculator::new();\n     let krate = calc.fold_crate(krate);\n \n-    calc.print_results();\n+    calc.print_results(ctx.renderinfo.borrow().output_format);\n \n     krate\n }\n \n-#[derive(Default, Copy, Clone)]\n+#[derive(Default, Copy, Clone, Serialize)]\n struct ItemCount {\n     total: u64,\n     with_docs: u64,\n@@ -68,68 +69,37 @@ impl ops::AddAssign for ItemCount {\n \n struct CoverageCalculator {\n     items: BTreeMap<FileName, ItemCount>,\n-    output_format: Option<OutputFormat>,\n }\n \n fn limit_filename_len(filename: String) -> String {\n-    // if a filename is too long, shorten it so we don't blow out the table\n-    // FIXME(misdreavus): this needs to count graphemes, and probably also track\n-    // double-wide characters...\n-    if filename.len() > 35 {\n-        \"...\".to_string() + &filename[filename.len() - 32..]\n+    let nb_chars = filename.chars().count();\n+    if nb_chars > 35 {\n+        \"...\".to_string()\n+            + &filename[filename.char_indices().nth(nb_chars - 32).map(|x| x.0).unwrap_or(0)..]\n     } else {\n         filename\n     }\n }\n \n-impl ToJson for CoverageCalculator {\n-    fn to_json(&self) -> Json {\n-        let mut total = ItemCount::default();\n-        let mut entries = BTreeMap::default();\n-\n-        entries.insert(\"files\".to_owned(), Json::Array(self.items\n-            .iter()\n-            .filter_map(|(file, &count)| {\n-                count.percentage().map(|percent| {\n-                    (limit_filename_len(file.to_string()), count, percent)\n-                })\n-            })\n-            .map(|(name, count, percentage)| {\n-                let mut fields = BTreeMap::default();\n-\n-                fields.insert(\"documented\".to_owned(), Json::U64(count.with_docs));\n-                fields.insert(\"total\".to_owned(), Json::U64(count.total));\n-                fields.insert(\"percentage\".to_owned(), Json::F64(percentage));\n-\n-                total += count;\n-\n-                let mut obj = BTreeMap::default();\n-                obj.insert(name, Json::Object(fields));\n-\n-                Json::Object(obj)\n-            })\n-            .collect::<Vec<_>>()));\n-        let mut fields = BTreeMap::default();\n-        fields.insert(\"documented\".to_owned(), Json::U64(total.with_docs));\n-        fields.insert(\"total\".to_owned(), Json::U64(total.total));\n-        fields.insert(\"percentage\".to_owned(), Json::F64(total.percentage().unwrap_or(0.0)));\n-\n-        entries.insert(\"total\".to_owned(), Json::Object(fields));\n-        Json::Object(entries)\n+impl CoverageCalculator {\n+    fn new() -> CoverageCalculator {\n+        CoverageCalculator { items: Default::default() }\n     }\n-}\n \n-impl CoverageCalculator {\n-    fn new(output_format: Option<OutputFormat>) -> CoverageCalculator {\n-        CoverageCalculator {\n-            items: Default::default(),\n-            output_format,\n-        }\n+    fn to_json(&self) -> String {\n+        serde_json::to_string(\n+            &self\n+                .items\n+                .iter()\n+                .map(|(k, v)| (k.to_string(), v))\n+                .collect::<BTreeMap<String, &ItemCount>>(),\n+        )\n+        .expect(\"failed to convert JSON data to string\")\n     }\n \n-    fn print_results(&self) {\n-        if self.output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n-            println!(\"{}\", self.to_json().pretty());\n+    fn print_results(&self, output_format: Option<OutputFormat>) {\n+        if output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n+            println!(\"{}\", self.to_json());\n             return;\n         }\n         let mut total = ItemCount::default();\n@@ -154,15 +124,7 @@ impl CoverageCalculator {\n \n         for (file, &count) in &self.items {\n             if let Some(percentage) = count.percentage() {\n-                let mut name = file.to_string();\n-                // if a filename is too long, shorten it so we don't blow out the table\n-                // FIXME(misdreavus): this needs to count graphemes, and probably also track\n-                // double-wide characters...\n-                if name.len() > 35 {\n-                    name = \"...\".to_string() + &name[name.len() - 32..];\n-                }\n-\n-                print_table_record(&name, count, percentage);\n+                print_table_record(&limit_filename_len(file.to_string()), count, percentage);\n \n                 total += count;\n             }"}, {"sha": "181cb4c5061a7fc2db405b7d88abd99abf22bcbd", "filename": "src/test/rustdoc-ui/coverage/html.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags:-Z unstable-options --output-format html --show-coverage\n+\n+/// Foo\n+pub struct Xo;"}, {"sha": "adca375d4bce59e41eb070d91634b618f3080966", "filename": "src/test/rustdoc-ui/coverage/html.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -0,0 +1,2 @@\n+error: html output format isn't supported for the --show-coverage option\n+"}, {"sha": "b1220b32e9194a2a6408bd117976d72b9abd9a19", "filename": "src/test/rustdoc-ui/coverage/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags:-Z unstable-options --show-coverage\n+// compile-flags:-Z unstable-options --output-format json --show-coverage\n \n pub mod foo {\n     /// Hello!"}, {"sha": "63b22a7d94b00f5073577418ceb03fe85b51a8b6", "filename": "src/test/rustdoc-ui/coverage/json.stdout", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -1,7 +1 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...test/rustdoc-ui/coverage/json.rs |          7 |         13 |      53.8% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          7 |         13 |      53.8% |\n-+-------------------------------------+------------+------------+------------+\n+{\"$DIR/json.rs\":{\"total\":13,\"with_docs\":7}}"}, {"sha": "30b525df7635939552fb00d93b209c3a5047b5ce", "filename": "src/test/rustdoc-ui/coverage/output-format-fail-check.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.rs?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -1,5 +1,4 @@\n // compile-flags:-Z unstable-options --output-format\n-// should-fail\n \n /// toudoum!\n pub struct SomeStruct;", "previous_filename": "src/test/rustdoc/output-format-fail-check.rs"}, {"sha": "9e9aa0e05016389e23a89fc5e432c5566e04ed44", "filename": "src/test/rustdoc-ui/coverage/output-format-fail-check.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1070b152546827e599cdee1f64c55faaf8bf082/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Foutput-format-fail-check.stderr?ref=f1070b152546827e599cdee1f64c55faaf8bf082", "patch": "@@ -0,0 +1,6 @@\n+warning: the 'output-format' flag is considered deprecated\n+   |\n+   = warning: see issue #44136 <https://github.com/rust-lang/rust/issues/44136> for more information\n+\n+error: too many file operands\n+"}]}