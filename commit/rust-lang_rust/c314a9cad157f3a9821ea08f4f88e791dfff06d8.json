{"sha": "c314a9cad157f3a9821ea08f4f88e791dfff06d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMTRhOWNhZDE1N2YzYTk4MjFlYTA4ZjRmODhlNzkxZGZmZjA2ZDg=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-22T11:55:28Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-31T02:45:17Z"}, "message": "added more ops to cmath", "tree": {"sha": "ddff5135f9f1ff8e0ed45da9dbeee460ab4c90a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddff5135f9f1ff8e0ed45da9dbeee460ab4c90a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c314a9cad157f3a9821ea08f4f88e791dfff06d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c314a9cad157f3a9821ea08f4f88e791dfff06d8", "html_url": "https://github.com/rust-lang/rust/commit/c314a9cad157f3a9821ea08f4f88e791dfff06d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c314a9cad157f3a9821ea08f4f88e791dfff06d8/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "html_url": "https://github.com/rust-lang/rust/commit/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "8cea074a7c61e37912bb11580b2b58f14ee217be", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=c314a9cad157f3a9821ea08f4f88e791dfff06d8", "patch": "@@ -10,28 +10,44 @@ native mod f64 {\n     pure fn asin(n: f64) -> f64;\n     pure fn atan(n: f64) -> f64;\n     pure fn atan2(a: f64, b: f64) -> f64;\n+    pure fn cbrt(n: f64) -> f64;\n     pure fn ceil(n: f64) -> f64;\n     pure fn cos(n: f64) -> f64;\n     pure fn cosh(n: f64) -> f64;\n+    pure fn erf(n: f64) -> f64;\n+    pure fn erfc(n: f64) -> f64;\n     pure fn exp(n: f64) -> f64;\n+    pure fn expm1(n: f64) -> f64;\n+    pure fn exp2(n: f64) -> f64;\n     #[link_name=\"fabs\"] pure fn abs(n: f64) -> f64;\n+    #[link_name=\"fdim\"] pure fn sub_pos(a: f64, b: f64) -> f64;\n     pure fn floor(n: f64) -> f64;\n+    #[link_name=\"fma\"] pure fn mul_add(a: f64, b: f64, c: f64) -> f64;\n+    #[link_name=\"fmax\"] pure fn max(a: f64, b: f64) -> f64;\n+    #[link_name=\"fmin\"] pure fn min(a: f64, b: f64) -> f64;\n+    pure fn nextafter(x: f64, y: f64) -> f64\n     pure fn fmod(x: f64, y: f64) -> f64;\n     pure fn frexp(n: f64, &value: c_int) -> f64;\n+    pure fn hypot(x: f64, y: f64) -> f64;\n     pure fn ldexp(x: f64, n: c_int) -> f64;\n+    #[link_name=\"lgamma_r\"] pure fn lgamma(n: f64, sign: *c_int) -> f64;\n     #[link_name=\"log\"] pure fn ln(n: f64) -> f64;\n+    pure fn logb(n: f64) -> f64;\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n     pure fn log10(n: f64) -> f64;\n     pure fn log2(n: f64) -> f64;\n+    pure fn ilogb(n: f64) -> c_int;\n     pure fn modf(n: f64, iptr: *f64) -> f64;\n     pure fn pow(n: f64, e: f64) -> f64;\n+    #[link_name=\"remainder\"] pure fn rem(a: f64, b: f64) -> f64;\n     pure fn rint(n: f64) -> f64;\n     pure fn round(n: f64) -> f64;\n     pure fn sin(n: f64) -> f64;\n     pure fn sinh(n: f64) -> f64;\n     pure fn sqrt(n: f64) -> f64;\n     pure fn tan(n: f64) -> f64;\n     pure fn tanh(n: f64) -> f64;\n+    pure fn tgamma(n: f64) -> f64;\n     pure fn trunc(n: f64) -> f64;\n }\n \n@@ -45,31 +61,59 @@ native mod f32 {\n     #[link_name=\"asinf\"] pure fn asin(n: f32) -> f32;\n     #[link_name=\"atanf\"] pure fn atan(n: f32) -> f32;\n     #[link_name=\"atan2f\"] pure fn atan2(a: f32, b: f32) -> f32;\n+    #[link_name=\"cbrtf\"] pure fn cbrt(n: f32) -> f32;\n     #[link_name=\"ceilf\"] pure fn ceil(n: f32) -> f32;\n     #[link_name=\"cosf\"] pure fn cos(n: f32) -> f32;\n     #[link_name=\"coshf\"] pure fn cosh(n: f32) -> f32;\n+    #[link_name=\"erff\"] pure fn erf(n: f32) -> f32;\n+    #[link_name=\"erfcf\"] pure fn erfc(n: f32) -> f32;\n     #[link_name=\"expf\"] pure fn exp(n: f32) -> f32;\n+    #[link_name=\"expm1f\"]pure fn expm1(n: f32) -> f32;\n+    #[link_name=\"exp2f\"] pure fn exp2(n: f32) -> f32;\n     #[link_name=\"fabsf\"] pure fn abs(n: f32) -> f32;\n+    #[link_name=\"fdimf\"] pure fn sub_pos(a: f32, b: f32) -> f32;\n     #[link_name=\"floorf\"] pure fn floor(n: f32) -> f32;\n     #[link_name=\"frexpf\"] pure fn frexp(n: f64, &value: c_int) -> f32;\n+    #[link_name=\"fmaf\"] pure fn mul_add(a: f32, b: f32, c: f32) -> f32;\n+    #[link_name=\"fmaxf\"] pure fn max(a: f32, b: f32) -> f32;\n+    #[link_name=\"fminf\"] pure fn min(a: f32, b: f32) -> f32;\n+    #[link_name=\"nextafterf\"] pure fn nextafter(x: f32, y: f32) -> f32\n     #[link_name=\"fmodf\"] pure fn fmod(x: f32, y: f32) -> f32;\n+    #[link_name=\"hypotf\"] pure fn hypot(x: f32, y: f32) -> f32;\n     #[link_name=\"ldexpf\"] pure fn ldexp(x: f32, n: c_int) -> f32;\n+    #[link_name=\"lgammaf_r\"] pure fn lgamma(n: f32, sign: *c_int) -> f32;\n     #[link_name=\"logf\"] pure fn ln(n: f32) -> f32;\n+    #[link_name=\"logbf\"] pure fn logb(n: f32) -> f32;\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n     #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n     #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n+    #[link_name=\"ilogbf\"] pure fn ilogb(n: f32) -> c_int;\n     #[link_name=\"modff\"] pure fn modf(n: f32, iptr: *f32) -> f32;\n     #[link_name=\"powf\"] pure fn pow(n: f32, e: f32) -> f32;\n+    #[link_name=\"remainderf\"] pure fn rem(a: f32, b: f32) -> f32;\n     #[link_name=\"rintf\"] pure fn rint(n: f32) -> f32;\n     #[link_name=\"roundf\"] pure fn round(n: f32) -> f32;\n     #[link_name=\"sinf\"] pure fn sin(n: f32) -> f32;\n     #[link_name=\"sinhf\"] pure fn sinh(n: f32) -> f32;\n     #[link_name=\"sqrtf\"] pure fn sqrt(n: f32) -> f32;\n     #[link_name=\"tanf\"] pure fn tan(n: f32) -> f32;\n     #[link_name=\"tanhf\"] pure fn tanh(n: f32) -> f32;\n+    #[link_name=\"tgammaf\"] pure fn tgamma(n: f32) -> f32;\n     #[link_name=\"truncf\"] pure fn trunc(n: f32) -> f32;\n }\n \n+#[link_name = \"m\"]\n+#[abi = \"cdecl\"]\n+native mod bessel {\n+    pure fn j0(n: m_float) -> m_float;\n+    pure fn j1(n: m_float) -> m_float;\n+    pure fn jn(i: c_int, n: m_float) -> m_float;\n+\n+    pure fn y0(n: m_float) -> m_float;\n+    pure fn y1(n: m_float) -> m_float;\n+    pure fn yn(i: c_int, n: m_float) -> m_float;\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "8bc39cede0a88822589e01a9cf593ea84eefa5f5", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=c314a9cad157f3a9821ea08f4f88e791dfff06d8", "patch": "@@ -114,3 +114,5 @@ Type: enum\n An unsigned integer with the same size as a C enum\n */\n type enum = u32;\n+\n+"}, {"sha": "a491aca01115b0a6c401fa1bb5d7dfea5d9894b9", "filename": "src/libcore/mtypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fmtypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c314a9cad157f3a9821ea08f4f88e791dfff06d8/src%2Flibcore%2Fmtypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmtypes.rs?ref=c314a9cad157f3a9821ea08f4f88e791dfff06d8", "patch": "@@ -32,7 +32,7 @@ type m_uint = u32;\n #[cfg(target_arch=\"x86_64\")]\n type m_uint = u64;\n \n-// PORT *must* match with \"import m_float = fXX\" in std::math per arch\n+// PORT *must* match with \"import m_float = fXX\" in core::float per arch\n \n /*\n Type: m_float"}]}