{"sha": "4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTFhYWYzNWYxYWQ1NWRkZDA5NGFiNzUxZjYyZGNmMjI3YTMxODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T00:00:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T00:00:21Z"}, "message": "Auto merge of #81042 - sasurau4:fix/unclear-error-with-trait, r=estebank\n\nAdd suggestion for impl_candidates with E0283\n\nFix #42226", "tree": {"sha": "70d41777f7e19862c7155fd31a05315340ab634a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d41777f7e19862c7155fd31a05315340ab634a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "html_url": "https://github.com/rust-lang/rust/commit/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98d2f57d9b98325ff075c343d2c7695b66dfa7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98d2f57d9b98325ff075c343d2c7695b66dfa7d", "html_url": "https://github.com/rust-lang/rust/commit/d98d2f57d9b98325ff075c343d2c7695b66dfa7d"}, {"sha": "8b041cd8f99ba27393d857623f4e9ee502fed29d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b041cd8f99ba27393d857623f4e9ee502fed29d", "html_url": "https://github.com/rust-lang/rust/commit/8b041cd8f99ba27393d857623f4e9ee502fed29d"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "bd43d3c01e218cab88c7a99895eea93822692719", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -429,6 +429,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         body_id: Option<hir::BodyId>,\n         span: Span,\n         arg: GenericArg<'tcx>,\n+        impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n         let arg = self.resolve_vars_if_possible(arg);\n@@ -653,7 +654,44 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n             err.span_label(pattern.span, msg);\n         } else if let Some(e) = local_visitor.found_method_call {\n-            if let ExprKind::MethodCall(segment, ..) = &e.kind {\n+            if let ExprKind::MethodCall(segment, _, exprs, _) = &e.kind {\n+                // Suggest impl candidates:\n+                //\n+                // error[E0283]: type annotations needed\n+                //   --> $DIR/E0283.rs:35:24\n+                //    |\n+                // LL |     let bar = foo_impl.into() * 1u32;\n+                //    |               ---------^^^^--\n+                //    |               |        |\n+                //    |               |        cannot infer type for type parameter `T` declared on the trait `Into`\n+                //    |               this method call resolves to `T`\n+                //    |               help: specify type like: `<Impl as Into<u32>>::into(foo_impl)`\n+                //    |\n+                //    = note: cannot satisfy `Impl: Into<_>`\n+                if !impl_candidates.is_empty() && e.span.contains(span) {\n+                    if let Some(expr) = exprs.first() {\n+                        if let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind {\n+                            if let [path_segment] = &path.segments[..] {\n+                                let candidate_len = impl_candidates.len();\n+                                let suggestions = impl_candidates.iter().map(|candidate| {\n+                                    format!(\n+                                        \"{}::{}({})\",\n+                                        candidate, segment.ident, path_segment.ident\n+                                    )\n+                                });\n+                                err.span_suggestions(\n+                                    e.span,\n+                                    &format!(\n+                                        \"use the fully qualified path for the potential candidate{}\",\n+                                        pluralize!(candidate_len),\n+                                    ),\n+                                    suggestions,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                    };\n+                }\n                 // Suggest specifying type params or point out the return type of the call:\n                 //\n                 // error[E0282]: type annotations needed"}, {"sha": "a42a05c5f028422bb8504774e8f46d3cf637c94e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -1498,11 +1498,18 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0282).emit();\n+                    self.emit_inference_failure_err(body_id, span, subst, vec![], ErrorCode::E0282)\n+                        .emit();\n                     return;\n                 }\n-                let mut err =\n-                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283);\n+                let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                let mut err = self.emit_inference_failure_err(\n+                    body_id,\n+                    span,\n+                    subst,\n+                    impl_candidates,\n+                    ErrorCode::E0283,\n+                );\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n@@ -1566,7 +1573,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282)\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -1577,7 +1584,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, a.into(), vec![], ErrorCode::E0282)\n             }\n             ty::PredicateKind::Projection(data) => {\n                 let trait_ref = bound_predicate.rebind(data).to_poly_trait_ref(self.tcx);\n@@ -1592,6 +1599,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         body_id,\n                         span,\n                         self_ty.into(),\n+                        vec![],\n                         ErrorCode::E0284,\n                     );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));"}, {"sha": "c491ba30841921be8cff6c176ff19f582133a797", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -1479,7 +1479,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282)\n+                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), vec![], E0282)\n                     .note(\"type must be known at this point\")\n                     .emit();\n             }"}, {"sha": "9e6bf5ce52d8afb34b7e356d69f71ff491876d70", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -694,6 +694,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     t.into(),\n+                    vec![],\n                     E0282,\n                 )\n                 .emit();\n@@ -707,6 +708,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     c.into(),\n+                    vec![],\n                     E0282,\n                 )\n                 .emit();"}, {"sha": "4d7c2f2396d75b7d54919a7914742cf6b3a8eccb", "filename": "src/test/ui/error-codes/E0283.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -8,6 +8,18 @@ impl Generator for Impl {\n     fn create() -> u32 { 1 }\n }\n \n+impl Impl {\n+    fn new() -> Self {\n+        Impl{}\n+    }\n+}\n+\n+impl Into<u32> for Impl {\n+    fn into(self) -> u32 { 1 }\n+}\n+\n+fn foo(bar: u32) {}\n+\n struct AnotherImpl;\n \n impl Generator for AnotherImpl {\n@@ -17,3 +29,9 @@ impl Generator for AnotherImpl {\n fn main() {\n     let cont: u32 = Generator::create(); //~ ERROR E0283\n }\n+\n+fn buzz() {\n+    let foo_impl = Impl::new();\n+    let bar = foo_impl.into() * 1u32; //~ ERROR E0283\n+    foo(bar);\n+}"}, {"sha": "2f0dfb6dd8248e8093fb75036b175f9b4fdb4863", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1aaf35f1ad55ddd094ab751f62dcf227a3185/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=4ba1aaf35f1ad55ddd094ab751f62dcf227a3185", "patch": "@@ -1,5 +1,5 @@\n error[E0283]: type annotations needed\n-  --> $DIR/E0283.rs:18:21\n+  --> $DIR/E0283.rs:30:21\n    |\n LL |     fn create() -> u32;\n    |     ------------------- required by `Generator::create`\n@@ -9,6 +9,18 @@ LL |     let cont: u32 = Generator::create();\n    |\n    = note: cannot satisfy `_: Generator`\n \n-error: aborting due to previous error\n+error[E0283]: type annotations needed\n+  --> $DIR/E0283.rs:35:24\n+   |\n+LL |     let bar = foo_impl.into() * 1u32;\n+   |               ---------^^^^--\n+   |               |        |\n+   |               |        cannot infer type for type parameter `T` declared on the trait `Into`\n+   |               this method call resolves to `T`\n+   |               help: use the fully qualified path for the potential candidate: `<Impl as Into<u32>>::into(foo_impl)`\n+   |\n+   = note: cannot satisfy `Impl: Into<_>`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0283`."}]}