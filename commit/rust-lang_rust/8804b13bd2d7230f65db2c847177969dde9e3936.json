{"sha": "8804b13bd2d7230f65db2c847177969dde9e3936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDRiMTNiZDJkNzIzMGY2NWRiMmM4NDcxNzc5NjlkZGU5ZTM5MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-27T04:57:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-27T04:57:35Z"}, "message": "auto merge of #6058 : huonw/rust/rt-isaac-update, r=graydon\n\nThe \"unsigned 4 byte\" `ub4`s are actually 8 bytes on 64-bit platforms\r\nwhich mean that some bits > 2**32 were retained in calculations, these\r\nwould then \"reappear\" after a right shift and so the stream of random numbers\r\nwould differ on 32 bit vs 64 bit platforms.\r\n\r\nhttp://burtleburtle.net/bob/c/randport.c", "tree": {"sha": "3f53c886cbca97e43fbf32bda921828c99815d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f53c886cbca97e43fbf32bda921828c99815d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8804b13bd2d7230f65db2c847177969dde9e3936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8804b13bd2d7230f65db2c847177969dde9e3936", "html_url": "https://github.com/rust-lang/rust/commit/8804b13bd2d7230f65db2c847177969dde9e3936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8804b13bd2d7230f65db2c847177969dde9e3936/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1696b5293370d1ecf563df23b6bb491f17a541", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1696b5293370d1ecf563df23b6bb491f17a541", "html_url": "https://github.com/rust-lang/rust/commit/7c1696b5293370d1ecf563df23b6bb491f17a541"}, {"sha": "1fc8a2f2a45c21247f6d0209ecb6349a2c20e453", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc8a2f2a45c21247f6d0209ecb6349a2c20e453", "html_url": "https://github.com/rust-lang/rust/commit/1fc8a2f2a45c21247f6d0209ecb6349a2c20e453"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "a2928a9b5d08e66998136f9d6a51f4808fa6b884", "filename": "src/rt/isaac/randport.cpp", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8804b13bd2d7230f65db2c847177969dde9e3936/src%2Frt%2Fisaac%2Frandport.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8804b13bd2d7230f65db2c847177969dde9e3936/src%2Frt%2Fisaac%2Frandport.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Frandport.cpp?ref=8804b13bd2d7230f65db2c847177969dde9e3936", "patch": "@@ -6,6 +6,7 @@ rand.c: By Bob Jenkins.  My random number generator, ISAAC.  Public Domain\n   970719: use context, not global variables, for internal state\n   980324: make a portable version\n   010626: Note this is public domain\n+  100725: Mask on use of >32 bits, not on assignment: from Paul Eggert\n ------------------------------------------------------------------------------\n */\n #ifndef STANDARD\n@@ -27,37 +28,37 @@ rand.c: By Bob Jenkins.  My random number generator, ISAAC.  Public Domain\n \n void     isaac(randctx *ctx)\n {\n-   register ub4 a,b,x,y,*m,*mm,*m2,*r,*mend;\n+   ub4 a,b,x,y,*m,*mm,*m2,*r,*mend;\n    mm=ctx->randmem; r=ctx->randrsl;\n-   a = ctx->randa; b = (ctx->randb + (++ctx->randc)) & 0xffffffff;\n+   a = ctx->randa; b = ctx->randb + (++ctx->randc);\n    for (m = mm, mend = m2 = m+(RANDSIZ/2); m<mend; )\n    {\n       rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( a>>6 , a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n       rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( a>>16, a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n    }\n    for (m2 = mm; m2<mend; )\n    {\n       rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( a>>6 , a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n       rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( a>>16, a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n    }\n    ctx->randb = b; ctx->randa = a;\n }\n \n \n #define mix(a,b,c,d,e,f,g,h) \\\n { \\\n-   a^=b<<11; d+=a; b+=c; \\\n-   b^=c>>2;  e+=b; c+=d; \\\n-   c^=d<<8;  f+=c; d+=e; \\\n-   d^=e>>16; g+=d; e+=f; \\\n-   e^=f<<10; h+=e; f+=g; \\\n-   f^=g>>4;  a+=f; g+=h; \\\n-   g^=h<<8;  b+=g; h+=a; \\\n-   h^=a>>9;  c+=h; a+=b; \\\n+   a^=b<<11;              d+=a; b+=c; \\\n+   b^=(c&0xffffffff)>>2;  e+=b; c+=d; \\\n+   c^=d<<8;               f+=c; d+=e; \\\n+   d^=(e&0xffffffff)>>16; g+=d; e+=f; \\\n+   e^=f<<10;              h+=e; f+=g; \\\n+   f^=(g&0xffffffff)>>4;  a+=f; g+=h; \\\n+   g^=h<<8;               b+=g; h+=a; \\\n+   h^=(a&0xffffffff)>>9;  c+=h; a+=b; \\\n }\n \n /* if (flag==TRUE), then use the contents of randrsl[] to initialize mm[]. */\n@@ -81,17 +82,21 @@ void randinit(randctx *ctx, word flag)\n      /* initialize using the contents of r[] as the seed */\n      for (i=0; i<RANDSIZ; i+=8)\n      {\n-       a+=r[i  ]; b+=r[i+1]; c+=r[i+2]; d+=r[i+3];\n-       e+=r[i+4]; f+=r[i+5]; g+=r[i+6]; h+=r[i+7];\n+       a+=r[i  ]; b+=r[i+1];\n+       c+=r[i+2]; d+=r[i+3];\n+       e+=r[i+4]; f+=r[i+5];\n+       g+=r[i+6]; h+=r[i+7];\n        mix(a,b,c,d,e,f,g,h);\n        m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n        m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;\n      }\n      /* do a second pass to make all of the seed affect all of m */\n      for (i=0; i<RANDSIZ; i+=8)\n      {\n-       a+=m[i  ]; b+=m[i+1]; c+=m[i+2]; d+=m[i+3];\n-       e+=m[i+4]; f+=m[i+5]; g+=m[i+6]; h+=m[i+7];\n+       a+=m[i  ]; b+=m[i+1];\n+       c+=m[i+2]; d+=m[i+3];\n+       e+=m[i+4]; f+=m[i+5];\n+       g+=m[i+6]; h+=m[i+7];\n        mix(a,b,c,d,e,f,g,h);\n        m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n        m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;"}, {"sha": "c196a37474b9d3e4adefaebbe4d637b556d7e09d", "filename": "src/rt/isaac/standard.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8804b13bd2d7230f65db2c847177969dde9e3936/src%2Frt%2Fisaac%2Fstandard.h", "raw_url": "https://github.com/rust-lang/rust/raw/8804b13bd2d7230f65db2c847177969dde9e3936/src%2Frt%2Fisaac%2Fstandard.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Fstandard.h?ref=8804b13bd2d7230f65db2c847177969dde9e3936", "patch": "@@ -13,27 +13,32 @@ Standard definitions and types, Bob Jenkins\n #  include <stddef.h>\n #  define STDDEF\n # endif\n-typedef  unsigned long long  ub8;\n+# ifndef STDINT\n+#  include <stdint.h>\n+#  define STDINT\n+# endif\n+\n+typedef  uint64_t  ub8;\n #define UB8MAXVAL 0xffffffffffffffffLL\n #define UB8BITS 64\n-typedef    signed long long  sb8;\n+typedef   int64_t  sb8;\n #define SB8MAXVAL 0x7fffffffffffffffLL\n-typedef  unsigned long  int  ub4;   /* unsigned 4-byte quantities */\n+typedef  uint32_t  ub4;   /* unsigned 4-byte quantities */\n #define UB4MAXVAL 0xffffffff\n-typedef    signed long  int  sb4;\n+typedef   int32_t  sb4;\n #define UB4BITS 32\n #define SB4MAXVAL 0x7fffffff\n-typedef  unsigned short int  ub2;\n+typedef  uint16_t  ub2;\n #define UB2MAXVAL 0xffff\n #define UB2BITS 16\n-typedef    signed short int  sb2;\n+typedef   int16_t  sb2;\n #define SB2MAXVAL 0x7fff\n-typedef  unsigned       char ub1;\n+typedef   uint8_t  ub1;\n #define UB1MAXVAL 0xff\n #define UB1BITS 8\n-typedef    signed       char sb1;   /* signed 1-byte quantities */\n+typedef    int8_t  sb1;   /* signed 1-byte quantities */\n #define SB1MAXVAL 0x7f\n-typedef                 int  word;  /* fastest type available */\n+typedef      int  word;  /* fastest type available */\n \n #define bis(target,mask)  ((target) |=  (mask))\n #define bic(target,mask)  ((target) &= ~(mask))"}]}