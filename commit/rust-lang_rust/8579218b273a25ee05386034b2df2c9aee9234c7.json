{"sha": "8579218b273a25ee05386034b2df2c9aee9234c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzkyMThiMjczYTI1ZWUwNTM4NjAzNGIyZGYyYzlhZWU5MjM0Yzc=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-01-24T15:19:36Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-02-04T21:25:56Z"}, "message": "Improve error message for uninferrable types #38812", "tree": {"sha": "95840ee24ceae9a59b61ca4c19279cf40d34285d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95840ee24ceae9a59b61ca4c19279cf40d34285d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8579218b273a25ee05386034b2df2c9aee9234c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8579218b273a25ee05386034b2df2c9aee9234c7", "html_url": "https://github.com/rust-lang/rust/commit/8579218b273a25ee05386034b2df2c9aee9234c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8579218b273a25ee05386034b2df2c9aee9234c7/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5cb9545cfa4f1e90c92266b802edc4690f584a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cb9545cfa4f1e90c92266b802edc4690f584a", "html_url": "https://github.com/rust-lang/rust/commit/eb5cb9545cfa4f1e90c92266b802edc4690f584a"}], "stats": {"total": 144, "additions": 96, "deletions": 48}, "files": [{"sha": "4d45f82a15863ec7b54bbc30c27d8cabf276d5f3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -39,6 +39,8 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::ast;\n+use hir::{intravisit, Local, Pat};\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use syntax_pos::{DUMMY_SP, Span};\n use errors::DiagnosticBuilder;\n \n@@ -60,6 +62,30 @@ impl<'a, 'gcx, 'tcx> TraitErrorKey<'tcx> {\n     }\n }\n \n+struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    target_ty: &'a Ty<'tcx>,\n+    found_pattern: Option<&'a Pat>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Visitor<'a> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_local(&mut self, local: &'a Local) {\n+        if let Some(&ty) = self.infcx.tables.borrow().node_types.get(&local.id) {\n+            let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n+            let is_match = ty.walk().any(|t| t == *self.target_ty);\n+\n+            if is_match && self.found_pattern.is_none() {\n+                self.found_pattern = Some(&*local.pat);\n+            }\n+        }\n+        intravisit::walk_local(self, local);\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self, errors: &Vec<FulfillmentError<'tcx>>) {\n         for error in errors {\n@@ -775,7 +801,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             self.tcx.lang_items.sized_trait()\n                             .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                         {\n-                            self.need_type_info(obligation.cause.span, self_ty);\n+                            self.need_type_info(obligation, self_ty);\n                         } else {\n                             let mut err = struct_span_err!(self.tcx.sess,\n                                                            obligation.cause.span, E0283,\n@@ -793,7 +819,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    self.need_type_info(obligation.cause.span, ty);\n+                    self.need_type_info(obligation, ty);\n                 }\n             }\n \n@@ -858,26 +884,42 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n \n-    fn need_type_info(&self, span: Span, ty: Ty<'tcx>) {\n+    fn need_type_info(&self,\n+                      obligation: &PredicateObligation<'tcx>,\n+                      ty: Ty<'tcx>) {\n+\n         let ty = self.resolve_type_vars_if_possible(&ty);\n-        let name = if let ty::TyInfer(ty::TyVar(ty_vid)) = ty.sty {\n-            let ty_vars = self.type_variables.borrow();\n-            if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n-                    *ty_vars.var_origin(ty_vid)\n-            {\n-                name.to_string()\n+        let ref cause = obligation.cause;\n+\n+        let mut err = struct_span_err!(self.tcx.sess,\n+                                       cause.span,\n+                                       E0282,\n+                                       \"unable to fully infer type(s)\");\n+\n+        err.note(\"type annotations or generic parameter binding required\");\n+        err.span_label(cause.span, &format!(\"cannot infer type\"));\n+\n+        let expr = self.tcx.hir.expect_expr(cause.body_id);\n+\n+        let mut local_visitor = FindLocalByTypeVisitor {\n+            infcx: &self,\n+            target_ty: &ty,\n+            found_pattern: None\n+        };\n+\n+        local_visitor.visit_expr(expr);\n+\n+        if let Some(pattern) = local_visitor.found_pattern {\n+            let pattern_span = pattern.span;\n+            if let Some(n) = pattern.simple_name() {\n+                err.span_label(pattern_span,\n+                    &format!(\"annotating the type for the variable `{}` would help\", n));\n             } else {\n-                ty.to_string()\n+                err.span_label(pattern_span,\n+                    &format!(\"annotating the type of pattern would help\"));\n             }\n-        } else {\n-            ty.to_string()\n-        };\n+        }\n \n-        let mut err = struct_span_err!(self.tcx.sess, span, E0282,\n-                                       \"unable to infer enough type information about `{}`\",\n-                                       name);\n-        err.note(\"type annotations or generic parameter binding required\");\n-        err.span_label(span, &format!(\"cannot infer type for `{}`\", name));\n         err.emit();\n     }\n "}, {"sha": "8f9b897eae22452dbb4905b974d2c1f31c535b3f", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -14,7 +14,7 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n-    //~| NOTE cannot infer type for `_`\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~| NOTE cannot infer type\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "29ae04a3aaca679840bde14b9d00eb2a993fa887", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -14,7 +14,7 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n-    //~| NOTE cannot infer type for `_`\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~| NOTE cannot infer type\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "332d3fb3e2bedeb86db73c40b2ee29070abf5b18", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -13,6 +13,6 @@ use std::marker;\n struct B<T>(marker::PhantomData<T>);\n \n fn main() {\n-    let foo = B(marker::PhantomData); //~ ERROR unable to infer enough type information\n+    let foo = B(marker::PhantomData); //~ ERROR unable to fully infer type(s)\n     let closure = || foo;\n }"}, {"sha": "7338d2cb41864d0b1f1a69b723856936076d2ee0", "filename": "src/test/compile-fail/issue-18159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x; //~ ERROR unable to infer enough type information\n+    let x; //~ ERROR unable to fully infer type(s)\n }"}, {"sha": "f67d8affd30e7e30cb0c6556b938a0f150a762b5", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -14,6 +14,6 @@ fn main()\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n-                                  //~| NOTE cannot infer type for `_`\n+                                  //~| NOTE cannot infer type\n                                   //~| NOTE type annotations or generic parameter binding required\n }"}, {"sha": "c80923298bca91e4b4877a5f2b106bebb1378d4b", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -25,6 +25,6 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n \n fn main() {\n     let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `VAR`\n+        let_(add(x,x), |y| { //~ ERROR unable to fully infer type(s)\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "edd876ed6639c253564c12ba7b8defb6574cf745", "filename": "src/test/compile-fail/issue-24013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let a = 1;\n     let b = 2;\n     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-    //~^ ERROR unable to infer enough type information about `_`\n+    //~^ ERROR unable to fully infer type(s)\n }"}, {"sha": "e61ca92c78a10cd42dec2cc065d9873ee3224c27", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR unable to fully infer type(s) [E0282]"}, {"sha": "77eb8b3e7a95da381e22b0acd4de5aeb305e0a11", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n }"}, {"sha": "a8ad8951c648130418f72b0ef8a73b6a7dc9f761", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -12,7 +12,7 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n-    //~| NOTE cannot infer type for `U`\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~| NOTE cannot infer type\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "7d1b5cfffe4bfa08d0bc4c31bde9bd33bce14bb5", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -17,8 +17,8 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR unable to infer enough type information about `State` [E0282]\n-   //~| NOTE cannot infer type for `State`\n+   //~^ ERROR unable to fully infer type(s) [E0282]\n+   //~| NOTE cannot infer type\n    //~| NOTE type annotations or generic parameter binding\n }\n "}, {"sha": "c7510f215bed09a6abd7a22a732938400b4bde20", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -10,7 +10,8 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR unable to infer enough type information about `T` [E0282]\n-                       //~| NOTE cannot infer type for `T`\n+    let it = v.iter(); //~ ERROR unable to fully infer type(s) [E0282]\n+                       //~| NOTE cannot infer type\n+                       //~| NOTE annotating the type for the variable `it` would help\n                        //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "eeecefd91aef7a08c8c1f93432141192d17ea261", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n     x.foo();\n }\n "}, {"sha": "6ccd8f66a492c155ecfddd218d64a4e0444c6d85", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -34,8 +34,8 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n-    //~| NOTE cannot infer type for `U`\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~| NOTE cannot infer type\n     //~| NOTE type annotations or generic parameter binding\n }\n "}, {"sha": "49818791d2fc51449ac03d624a88f71dfe8c1415", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -11,7 +11,7 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR unable to infer enough type information about `T` [E0282]\n-          //~| NOTE cannot infer type for `T`\n+    None; //~ ERROR unable to fully infer type(s) [E0282]\n+          //~| NOTE cannot infer type\n           //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "53995af5b86700f8ca274801dd3fa2792ccb3528", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -13,7 +13,7 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR unable to infer enough type information about `T` [E0282]\n-                    //~| NOTE cannot infer type for `T`\n+    S { o: &None }; //~ ERROR unable to fully infer type(s) [E0282]\n+                    //~| NOTE cannot infer type\n                     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "d470f937190bbef1b4a3d6d0a69bd6e8e2b0f6c8", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -11,7 +11,8 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n-    //~| NOTE cannot infer type for `T`\n+    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~| NOTE cannot infer type\n+    //~| NOTE annotating the type for the variable `_foo` would help\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "f0be8d07f49bd4b1dcacd7a9db0a0c55db9960fe", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -1,11 +1,14 @@\n-error[E0282]: unable to infer enough type information about `T`\n+error[E0282]: unable to fully infer type(s)\n   --> $DIR/repair_span_std_macros.rs:12:13\n    |\n 12 |     let x = vec![];\n-   |             ^^^^^^ cannot infer type for `T`\n+   |         -   ^^^^^^ cannot infer type\n+   |         |\n+   |         annotating the type for the variable `x` would help\n    |\n    = note: type annotations or generic parameter binding required\n    = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n \n+"}, {"sha": "df5571787d7bc5110b91ab08027bbf887e142e69", "filename": "src/test/ui/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8579218b273a25ee05386034b2df2c9aee9234c7/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=8579218b273a25ee05386034b2df2c9aee9234c7", "patch": "@@ -1,10 +1,11 @@\n-error[E0282]: unable to infer enough type information about `X`\n+error[E0282]: unable to fully infer type(s)\n   --> $DIR/missing-type-parameter.rs:14:5\n    |\n 14 |     foo();\n-   |     ^^^ cannot infer type for `X`\n+   |     ^^^ cannot infer type\n    |\n    = note: type annotations or generic parameter binding required\n \n error: aborting due to previous error\n \n+"}]}