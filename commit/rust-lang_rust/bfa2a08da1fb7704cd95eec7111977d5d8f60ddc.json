{"sha": "bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "node_id": "C_kwDOAAsO6NoAKGJmYTJhMDhkYTFmYjc3MDRjZDk1ZWVjNzExMTk3N2Q1ZDhmNjBkZGM", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-08T11:24:28Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-08T11:24:28Z"}, "message": "Update for languageclient API changes", "tree": {"sha": "a750257fcae8959b6f90a20ea22daf17574cd648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a750257fcae8959b6f90a20ea22daf17574cd648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "html_url": "https://github.com/rust-lang/rust/commit/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3d62671127daf1b1cc13e040b61f1ec715fd29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d62671127daf1b1cc13e040b61f1ec715fd29b", "html_url": "https://github.com/rust-lang/rust/commit/d3d62671127daf1b1cc13e040b61f1ec715fd29b"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f7520f6c4361d37f2dfe342dbbef27bda90786f7", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "patch": "@@ -90,17 +90,17 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n                 const params: lc.CodeActionParams = {\n                     textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                     range: client.code2ProtocolConverter.asRange(range),\n-                    context: client.code2ProtocolConverter.asCodeActionContext(context)\n+                    context: await client.code2ProtocolConverter.asCodeActionContext(context, token)\n                 };\n-                return client.sendRequest(lc.CodeActionRequest.type, params, token).then((values) => {\n+                return client.sendRequest(lc.CodeActionRequest.type, params, token).then(async (values) => {\n                     if (values === null) return undefined;\n                     const result: (vscode.CodeAction | vscode.Command)[] = [];\n                     const groups = new Map<string, { index: number; items: vscode.CodeAction[] }>();\n                     for (const item of values) {\n                         // In our case we expect to get code edits only from diagnostics\n                         if (lc.CodeAction.is(item)) {\n                             assert(!item.command, \"We don't expect to receive commands in CodeActions\");\n-                            const action = client.protocol2CodeConverter.asCodeAction(item);\n+                            const action = await client.protocol2CodeConverter.asCodeAction(item, token);\n                             result.push(action);\n                             continue;\n                         }"}, {"sha": "4b2ac4480184db0fbbcb2760c09fc30ad385dc04", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bfa2a08da1fb7704cd95eec7111977d5d8f60ddc/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=bfa2a08da1fb7704cd95eec7111977d5d8f60ddc", "patch": "@@ -127,8 +127,8 @@ export function joinLines(ctx: Ctx): Cmd {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n-        await editor.edit((builder) => {\n-            client.protocol2CodeConverter.asTextEdits(items).forEach((edit: any) => {\n+        await editor.edit(async (builder) => {\n+            (await client.protocol2CodeConverter.asTextEdits(items)).forEach((edit: any) => {\n                 builder.replace(edit.range, edit.newText);\n             });\n         });\n@@ -157,7 +157,7 @@ export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n \n         if (!lcEdits) return;\n \n-        const edits = client.protocol2CodeConverter.asTextEdits(lcEdits);\n+        const edits = await client.protocol2CodeConverter.asTextEdits(lcEdits);\n         await applySnippetTextEdits(editor, edits);\n     };\n }\n@@ -180,7 +180,7 @@ export function onEnter(ctx: Ctx): Cmd {\n         });\n         if (!lcEdits) return false;\n \n-        const edits = client.protocol2CodeConverter.asTextEdits(lcEdits);\n+        const edits = await client.protocol2CodeConverter.asTextEdits(lcEdits);\n         await applySnippetTextEdits(editor, edits);\n         return true;\n     }\n@@ -277,12 +277,12 @@ export function ssr(ctx: Ctx): Cmd {\n             location: vscode.ProgressLocation.Notification,\n             title: \"Structured search replace in progress...\",\n             cancellable: false,\n-        }, async (_progress, _token) => {\n+        }, async (_progress, token) => {\n             const edit = await client.sendRequest(ra.ssr, {\n                 query: request, parseOnly: false, textDocument, position, selections,\n             });\n \n-            await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n+            await vscode.workspace.applyEdit(await client.protocol2CodeConverter.asWorkspaceEdit(edit, token));\n         });\n     };\n }\n@@ -728,11 +728,11 @@ export function resolveCodeAction(ctx: Ctx): Cmd {\n             return;\n         }\n         const itemEdit = item.edit;\n-        const edit = client.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n+        const edit = await client.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n         // filter out all text edits and recreate the WorkspaceEdit without them so we can apply\n         // snippet edits on our own\n         const lcFileSystemEdit = { ...itemEdit, documentChanges: itemEdit.documentChanges?.filter(change => \"kind\" in change) };\n-        const fileSystemEdit = client.protocol2CodeConverter.asWorkspaceEdit(lcFileSystemEdit);\n+        const fileSystemEdit = await client.protocol2CodeConverter.asWorkspaceEdit(lcFileSystemEdit);\n         await vscode.workspace.applyEdit(fileSystemEdit);\n         await applySnippetWorkspaceEdit(edit);\n     };"}]}