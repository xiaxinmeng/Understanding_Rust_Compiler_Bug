{"sha": "8f781e782c7e16aa323672620753ec31526d2b90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNzgxZTc4MmM3ZTE2YWEzMjM2NzI2MjA3NTNlYzMxNTI2ZDJiOTA=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-04-22T12:27:56Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-04-22T12:27:56Z"}, "message": "Autodetect rust library source file map", "tree": {"sha": "acc48eaf35c2794483c9c95591357b71711883d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc48eaf35c2794483c9c95591357b71711883d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f781e782c7e16aa323672620753ec31526d2b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f781e782c7e16aa323672620753ec31526d2b90", "html_url": "https://github.com/rust-lang/rust/commit/8f781e782c7e16aa323672620753ec31526d2b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f781e782c7e16aa323672620753ec31526d2b90/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c9bd134df23aadc7d3fea7907269d841db9063", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c9bd134df23aadc7d3fea7907269d841db9063", "html_url": "https://github.com/rust-lang/rust/commit/d1c9bd134df23aadc7d3fea7907269d841db9063"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "fe8ec1be45411d4b85b2a8a7604802bf939167cb", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f781e782c7e16aa323672620753ec31526d2b90/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8f781e782c7e16aa323672620753ec31526d2b90/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=8f781e782c7e16aa323672620753ec31526d2b90", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n import * as path from 'path';\n import * as ra from './lsp_ext';\n \n-import { Cargo } from './toolchain';\n+import { Cargo, sysrootForDir as getSysroot } from './toolchain';\n import { Ctx } from \"./ctx\";\n import { prepareEnv } from \"./run\";\n \n@@ -104,7 +104,15 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n \n     const executable = await getDebugExecutable(runnable);\n     const env = prepareEnv(runnable, ctx.config.runnableEnv);\n-    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, debugOptions.sourceFileMap);\n+    let sourceFileMap = debugOptions.sourceFileMap;\n+    if ( !sourceFileMap || Object.keys(sourceFileMap).length === 0 ) {\n+        // let's try to use the default toolchain\n+        const sysroot = await getSysroot(wsFolder);\n+        const rustlib_src = path.normalize(sysroot + \"/lib/rustlib/src/rust\");\n+        sourceFileMap = { \"/rustc/*\": rustlib_src };\n+    }\n+\n+    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {"}, {"sha": "b746da1d92c574f403806821f5b2fe156cd87779", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f781e782c7e16aa323672620753ec31526d2b90/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8f781e782c7e16aa323672620753ec31526d2b90/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=8f781e782c7e16aa323672620753ec31526d2b90", "patch": "@@ -121,6 +121,27 @@ export class Cargo {\n     }\n }\n \n+/** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n+export function sysrootForDir(dir: string): Promise<string> {\n+    const rustc_path = getPathForExecutable(\"rustc\");\n+\n+    return new Promise((resolve, reject) => {\n+        cp.exec(`${rustc_path} --print sysroot`, { cwd: dir }, (err, stdout, stderr) => {\n+            if (err) {\n+                reject(err);\n+                return;\n+            }\n+\n+            if (stderr) {\n+                reject(new Error(stderr));\n+                return;\n+            }\n+\n+            resolve(stdout.trimEnd());\n+        });\n+    });\n+}\n+\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): string {\n     return getPathForExecutable(\"cargo\");"}]}