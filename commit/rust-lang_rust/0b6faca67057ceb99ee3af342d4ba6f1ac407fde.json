{"sha": "0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "node_id": "C_kwDOAAsO6NoAKDBiNmZhY2E2NzA1N2NlYjk5ZWUzYWYzNDJkNGJhNmYxYWM0MDdmZGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-29T11:19:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T11:19:45Z"}, "message": "Rollup merge of #101000 - m-ou-se:count-is-star, r=nagisa\n\nSeparate CountIsStar from CountIsParam in rustc_parse_format.\n\n`rustc_parse_format`'s parser would result in the exact same output for `{:.*}` and `{:.0$}`, making it hard for diagnostics to handle these cases properly.\n\nThis splits those cases by adding a new `CountIsStar` enum variant.\n\nThis fixes #100995\n\nPrerequisite for https://github.com/rust-lang/rust/pull/100996", "tree": {"sha": "2ca8afd1a123f358dc5938f8305289ec24add362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ca8afd1a123f358dc5938f8305289ec24add362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDKDRCRBK7hj4Ov3rIwAA+ecIAAmTqiJR31dc/D8a/YmP0HX8\nrCtV5xhhfk2bOteY+EBYxWtknJEniwY5kkyE0N8NneUieKtpbYzQmEdE9DZbN8c5\nsin6cJ/RHIBPO+3rpTG6uOP3KllCVgiowbLpX6Mn8NWnMKX8ALoXFUhkNCXEj5a2\nMRmbu8/NkwMlP9sXDTq25l0MY6XYa44edE80mBOX6+LOp4zLVV4OvzcSVsknSGqk\n/5mCSEdj183Ua4dHun3rGlTQrG98gzSzDGY+mVFtSDbyWT+mSnLHGCwczt1+LEzS\nAUIfJJtz907bRsbr7qWblKLahQHrMa86C2PKFIlQNYfJlMQ/hSe8QzA2kdCMye0=\n=4wq0\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ca8afd1a123f358dc5938f8305289ec24add362\nparent 141728fc61254fafe14dbe8387ec08c5ecc046a9\nparent aebad394142aba6f5dc11a1fad5731e12c351c00\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661771985 +0530\ncommitter GitHub <noreply@github.com> 1661771985 +0530\n\nRollup merge of #101000 - m-ou-se:count-is-star, r=nagisa\n\nSeparate CountIsStar from CountIsParam in rustc_parse_format.\n\n`rustc_parse_format`'s parser would result in the exact same output for `{:.*}` and `{:.0$}`, making it hard for diagnostics to handle these cases properly.\n\nThis splits those cases by adding a new `CountIsStar` enum variant.\n\nThis fixes #100995\n\nPrerequisite for https://github.com/rust-lang/rust/pull/100996\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "html_url": "https://github.com/rust-lang/rust/commit/0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141728fc61254fafe14dbe8387ec08c5ecc046a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/141728fc61254fafe14dbe8387ec08c5ecc046a9", "html_url": "https://github.com/rust-lang/rust/commit/141728fc61254fafe14dbe8387ec08c5ecc046a9"}, {"sha": "aebad394142aba6f5dc11a1fad5731e12c351c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebad394142aba6f5dc11a1fad5731e12c351c00", "html_url": "https://github.com/rust-lang/rust/commit/aebad394142aba6f5dc11a1fad5731e12c351c00"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "210048710751702a4c278b844536e16a85c97968", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     ) {\n         match c {\n             parse::CountImplied | parse::CountIs(..) => {}\n-            parse::CountIsParam(i) => {\n+            parse::CountIsParam(i) | parse::CountIsStar(i) => {\n                 self.unused_names_lint.maybe_add_positional_named_arg(\n                     self.args.get(i),\n                     named_arg_type,\n@@ -589,7 +589,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             + self\n                 .arg_with_formatting\n                 .iter()\n-                .filter(|fmt| matches!(fmt.precision, parse::CountIsParam(_)))\n+                .filter(|fmt| matches!(fmt.precision, parse::CountIsStar(_)))\n                 .count();\n         if self.names.is_empty() && !numbered_position_args && count != self.num_args() {\n             e = self.ecx.struct_span_err(\n@@ -639,7 +639,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.precision_span {\n                 let span = self.fmtsp.from_inner(InnerSpan::new(span.start, span.end));\n                 match fmt.precision {\n-                    parse::CountIsParam(pos) if pos > self.num_args() => {\n+                    parse::CountIsParam(pos) if pos >= self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -651,12 +651,12 @@ impl<'a, 'b> Context<'a, 'b> {\n                         );\n                         zero_based_note = true;\n                     }\n-                    parse::CountIsParam(pos) => {\n+                    parse::CountIsStar(pos) => {\n                         let count = self.pieces.len()\n                             + self\n                                 .arg_with_formatting\n                                 .iter()\n-                                .filter(|fmt| matches!(fmt.precision, parse::CountIsParam(_)))\n+                                .filter(|fmt| matches!(fmt.precision, parse::CountIsStar(_)))\n                                 .count();\n                         e.span_label(\n                             span,\n@@ -837,7 +837,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n         match c {\n             parse::CountIs(i) => count(sym::Is, Some(self.ecx.expr_usize(sp, i))),\n-            parse::CountIsParam(i) => {\n+            parse::CountIsParam(i) | parse::CountIsStar(i) => {\n                 // This needs mapping too, as `i` is referring to a macro\n                 // argument. If `i` is not found in `count_positions` then\n                 // the error had already been emitted elsewhere."}, {"sha": "a9e502016aa8d4ac2392a8ce4fada05db3d14563", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "patch": "@@ -167,6 +167,8 @@ pub enum Count<'a> {\n     CountIsName(&'a str, InnerSpan),\n     /// The count is specified by the argument at the given index.\n     CountIsParam(usize),\n+    /// The count is specified by a star (like in `{:.*}`) that refers to the argument at the given index.\n+    CountIsStar(usize),\n     /// The count is implied and cannot be explicitly specified.\n     CountImplied,\n }\n@@ -618,7 +620,7 @@ impl<'a> Parser<'a> {\n                 // We can do this immediately as `position` is resolved later.\n                 let i = self.curarg;\n                 self.curarg += 1;\n-                spec.precision = CountIsParam(i);\n+                spec.precision = CountIsStar(i);\n             } else {\n                 spec.precision = self.count(start + 1);\n             }"}, {"sha": "2f8c229c68ffe1e7ab48eb5dd818b462782ca103", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "patch": "@@ -244,7 +244,7 @@ fn format_counts() {\n                 fill: None,\n                 align: AlignUnknown,\n                 flags: 0,\n-                precision: CountIsParam(0),\n+                precision: CountIsStar(0),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n                 width_span: None,"}, {"sha": "f00cb05c9ebc378b7c9135d5b15254926fc3e8b1", "filename": "src/test/ui/fmt/ifmt-bad-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs?ref=0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "patch": "@@ -94,4 +94,6 @@ tenth number: {}\",\n     // doesn't exist.\n     println!(\"{:.*}\");\n     //~^ ERROR 2 positional arguments in format string, but no arguments were given\n+    println!(\"{:.0$}\");\n+    //~^ ERROR 1 positional argument in format string, but no arguments were given\n }"}, {"sha": "dbb4bc6d9370e9f377cb1cc8e241e9f070ba6589", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b6faca67057ceb99ee3af342d4ba6f1ac407fde/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=0b6faca67057ceb99ee3af342d4ba6f1ac407fde", "patch": "@@ -273,6 +273,17 @@ LL |     println!(\"{:.*}\");\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/ifmt-bad-arg.rs:97:15\n+   |\n+LL |     println!(\"{:.0$}\");\n+   |               ^^---^\n+   |                 |\n+   |                 this precision flag expects an `usize` argument at position 0, but no arguments were given\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n error[E0425]: cannot find value `foo` in this scope\n   --> $DIR/ifmt-bad-arg.rs:27:18\n    |\n@@ -339,7 +350,7 @@ LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 38 previous errors\n \n Some errors have detailed explanations: E0308, E0425.\n For more information about an error, try `rustc --explain E0308`."}]}