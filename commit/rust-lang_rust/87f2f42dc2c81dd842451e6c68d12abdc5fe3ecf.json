{"sha": "87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjJmNDJkYzJjODFkZDg0MjQ1MWU2YzY4ZDEyYWJkYzVmZTNlY2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-28T09:51:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:29Z"}, "message": "Make projection wf check the predicates for the projection", "tree": {"sha": "0d18d300ea4b5711ea4499ce0857276d1d36aacd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d18d300ea4b5711ea4499ce0857276d1d36aacd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "html_url": "https://github.com/rust-lang/rust/commit/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "url": "https://api.github.com/repos/rust-lang/rust/commits/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617", "html_url": "https://github.com/rust-lang/rust/commit/f958e6c24615c4b1f1e77b0ee3d4f32383fb3617"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "165e45aa94ae42379f4e1ca75c3a34964f30892a", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=87f2f42dc2c81dd842451e6c68d12abdc5fe3ecf", "patch": "@@ -327,17 +327,31 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::ProjectionTy<'tcx>) {\n-        // A projection is well-formed if (a) the trait ref itself is\n-        // WF and (b) the trait-ref holds.  (It may also be\n-        // normalizable and be WF that way.)\n-        let trait_ref = data.trait_ref(self.infcx.tcx);\n-        self.compute_trait_ref(&trait_ref, Elaborate::None);\n-\n-        if !data.has_escaping_bound_vars() {\n-            let predicate = trait_ref.without_const().to_predicate(self.infcx.tcx);\n-            let cause = self.cause(traits::ProjectionWf(data));\n-            self.out.push(traits::Obligation::new(cause, self.param_env, predicate));\n-        }\n+        // A projection is well-formed if\n+        // (a) its predicates hold\n+        // (b) its substs are wf\n+        let obligations = self.nominal_obligations(data.item_def_id, data.substs);\n+        self.out.extend(obligations);\n+\n+        let tcx = self.tcx();\n+        let cause = self.cause(traits::MiscObligation);\n+        let param_env = self.param_env;\n+\n+        self.out.extend(\n+            data.substs\n+                .iter()\n+                .filter(|arg| {\n+                    matches!(arg.unpack(), GenericArgKind::Type(..) | GenericArgKind::Const(..))\n+                })\n+                .filter(|arg| !arg.has_escaping_bound_vars())\n+                .map(|arg| {\n+                    traits::Obligation::new(\n+                        cause.clone(),\n+                        param_env,\n+                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                    )\n+                }),\n+        );\n     }\n \n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {"}]}