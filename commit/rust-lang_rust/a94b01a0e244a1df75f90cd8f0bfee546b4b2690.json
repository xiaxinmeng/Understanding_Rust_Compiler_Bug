{"sha": "a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NGIwMWEwZTI0NGExZGY3NWY5MGNkOGYwYmZlZTU0NmI0YjI2OTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-30T12:28:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:40Z"}, "message": "connect MIR borrowck with NLL", "tree": {"sha": "657a4bf90f715e6a2062a05c22e995e2853b422c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657a4bf90f715e6a2062a05c22e995e2853b422c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "html_url": "https://github.com/rust-lang/rust/commit/a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81449174f3fdc3c932f5a5560c91c2930616f6e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/81449174f3fdc3c932f5a5560c91c2930616f6e0", "html_url": "https://github.com/rust-lang/rust/commit/81449174f3fdc3c932f5a5560c91c2930616f6e0"}], "stats": {"total": 242, "additions": 232, "deletions": 10}, "files": [{"sha": "8b5f1539ac002f13433ee8c5be19d3fa8413919f", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -17,7 +17,8 @@ use rustc::ty::maps::Providers;\n use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue, Local};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n-use rustc::mir::transform::{MirSource};\n+use rustc::mir::transform::MirSource;\n+use transform::nll;\n \n use rustc_data_structures::indexed_set::{self, IdxSetBuf};\n use rustc_data_structures::indexed_vec::{Idx};\n@@ -62,7 +63,7 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n }\n \n fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                   mir: &Mir<'gcx>,\n+                                   input_mir: &Mir<'gcx>,\n                                    def_id: DefId,\n                                    src: MirSource)\n {\n@@ -72,7 +73,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n \n     let id = src.item_id();\n \n-    let move_data: MoveData<'tcx> = match MoveData::gather_moves(mir, tcx, param_env) {\n+    let move_data: MoveData<'tcx> = match MoveData::gather_moves(input_mir, tcx, param_env) {\n         Ok(move_data) => move_data,\n         Err((move_data, move_errors)) => {\n             for move_error in move_errors {\n@@ -100,10 +101,23 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         }\n     };\n \n+    // Make our own copy of the MIR. This copy will be modified (in place) to\n+    // contain non-lexical lifetimes. It will have a lifetime tied\n+    // to the inference context.\n+    let mut mir: Mir<'tcx> = input_mir.clone();\n+    let mir = &mut mir;\n+\n+    // If we are in non-lexical mode, compute the non-lexical lifetimes.\n+    let opt_regioncx = if !tcx.sess.opts.debugging_opts.nll {\n+        None\n+    } else {\n+        Some(nll::compute_regions(infcx, src, mir))\n+    };\n+\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let flow_borrows = do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n-                                   Borrows::new(tcx, mir),\n+                                   Borrows::new(tcx, mir, opt_regioncx.as_ref()),\n                                    |bd, i| bd.location(i));\n     let flow_inits = do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n                                  MaybeInitializedLvals::new(tcx, mir, &mdpe),"}, {"sha": "17aa8c054181e4a904a0ca7566cbccf9633a243f", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -21,6 +21,8 @@ use rustc_data_structures::indexed_vec::{IndexVec};\n \n use dataflow::{BitDenotation, BlockSets, DataflowOperator};\n pub use dataflow::indexes::BorrowIndex;\n+use transform::nll::region_infer::RegionInferenceContext;\n+use transform::nll::ToRegionIndex;\n \n use syntax_pos::Span;\n \n@@ -36,6 +38,7 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     location_map: FxHashMap<Location, BorrowIndex>,\n     region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n     region_span_map: FxHashMap<RegionKind, Span>,\n+    nonlexical_regioncx: Option<&'a RegionInferenceContext>,\n }\n \n // temporarily allow some dead fields: `kind` and `region` will be\n@@ -64,7 +67,10 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+               mir: &'a Mir<'tcx>,\n+               nonlexical_regioncx: Option<&'a RegionInferenceContext>)\n+               -> Self {\n         let mut visitor = GatherBorrows { idx_vec: IndexVec::new(),\n                                           location_map: FxHashMap(),\n                                           region_map: FxHashMap(),\n@@ -75,7 +81,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                          borrows: visitor.idx_vec,\n                          location_map: visitor.location_map,\n                          region_map: visitor.region_map,\n-                         region_span_map: visitor.region_span_map};\n+                         region_span_map: visitor.region_span_map,\n+                         nonlexical_regioncx };\n \n         struct GatherBorrows<'tcx> {\n             idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n@@ -121,9 +128,26 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     /// meaning there.  Otherwise, it should return some.\n     pub fn opt_region_end_span(&self, region: &Region) -> Option<Span> {\n         let opt_span = self.region_span_map.get(region);\n-        assert!(opt_span.is_some(), \"end region not found for {:?}\", region);\n+        assert!(self.nonlexical_regioncx.is_some() ||\n+                opt_span.is_some(), \"end region not found for {:?}\", region);\n         opt_span.map(|s| s.end_point())\n     }\n+\n+    /// Add all borrows to the kill set, if those borrows are out of scope at `location`.\n+    fn kill_loans_out_of_scope_at_location(&self,\n+                                           sets: &mut BlockSets<BorrowIndex>,\n+                                           location: Location) {\n+        if let Some(regioncx) = self.nonlexical_regioncx {\n+            for (borrow_index, borrow_data) in self.borrows.iter_enumerated() {\n+                let borrow_region = regioncx.region_value(borrow_data.region.to_region_index());\n+                if !borrow_region.may_contain(location) && location != borrow_data.location {\n+                    debug!(\"kill_loans_out_of_scope_at_location: kill{:?} \\\n+                           location={:?} borrow_data={:?}\", borrow_index, location, borrow_data);\n+                    sets.kill(&borrow_index);\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n@@ -149,6 +173,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n         match stmt.kind {\n             mir::StatementKind::EndRegion(region_scope) => {\n                 if let Some(borrow_indexes) = self.region_map.get(&ReScope(region_scope)) {\n+                    assert!(self.nonlexical_regioncx.is_none());\n                     for idx in borrow_indexes { sets.kill(&idx); }\n                 } else {\n                     // (if there is no entry, then there are no borrows to be tracked)\n@@ -175,11 +200,14 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::Nop => {}\n \n         }\n+\n+        self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n+\n     fn terminator_effect(&self,\n-                         _sets: &mut BlockSets<BorrowIndex>,\n-                         _location: Location) {\n-        // no terminators start nor end region scopes.\n+                         sets: &mut BlockSets<BorrowIndex>,\n+                         location: Location) {\n+        self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n \n     fn propagate_call_return(&self,"}, {"sha": "c02977f22ea4b3c500f58c1ed95355a7829edb98", "filename": "src/test/compile-fail/nll/loan_ends_mid_block_pair.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// compile-flags:-Zborrowck-mir -Znll\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+\n+fn main() {\n+}\n+\n+fn nll_fail() {\n+    let mut data = ('a', 'b', 'c');\n+    let c = &mut data.0;\n+    capitalize(c);\n+    data.0 = 'e';\n+    //~^ ERROR (Ast) [E0506]\n+    //~| ERROR (Mir) [E0506]\n+    data.0 = 'f';\n+    //~^ ERROR (Ast) [E0506]\n+    //~| ERROR (Mir) [E0506]\n+    data.0 = 'g';\n+    //~^ ERROR (Ast) [E0506]\n+    //~| ERROR (Mir) [E0506]\n+    capitalize(c);\n+}\n+\n+fn nll_ok() {\n+    let mut data = ('a', 'b', 'c');\n+    let c = &mut data.0;\n+    capitalize(c);\n+    data.0 = 'e';\n+    //~^ ERROR (Ast) [E0506]\n+    data.0 = 'f';\n+    //~^ ERROR (Ast) [E0506]\n+    data.0 = 'g';\n+    //~^ ERROR (Ast) [E0506]\n+}\n+\n+fn capitalize(_: &mut char) {\n+}"}, {"sha": "5e3a003b54eb03a9ee9a0e1642e26dbaa23ebd3a", "filename": "src/test/compile-fail/nll/loan_ends_mid_block_vec.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// compile-flags:-Zborrowck-mir -Znll\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+}\n+\n+fn nll_fail() {\n+    let mut data = vec!['a', 'b', 'c'];\n+    let slice = &mut data;\n+    capitalize(slice);\n+    data.push('d');\n+    //~^ ERROR (Ast) [E0499]\n+    //~| ERROR (Mir) [E0499]\n+    data.push('e');\n+    //~^ ERROR (Ast) [E0499]\n+    //~| ERROR (Mir) [E0499]\n+    data.push('f');\n+    //~^ ERROR (Ast) [E0499]\n+    //~| ERROR (Mir) [E0499]\n+    capitalize(slice);\n+}\n+\n+fn nll_ok() {\n+    let mut data = vec!['a', 'b', 'c'];\n+    let slice = &mut data;\n+    capitalize(slice);\n+    data.push('d');\n+    //~^ ERROR (Ast) [E0499]\n+    data.push('e');\n+    //~^ ERROR (Ast) [E0499]\n+    data.push('f');\n+    //~^ ERROR (Ast) [E0499]\n+}\n+\n+fn capitalize(_: &mut [char]) {\n+}"}, {"sha": "dbc35fa99b0251e17433fe2727457820fbb4cd76", "filename": "src/test/compile-fail/nll/region-ends-after-if-condition.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for liveness constraints: the region (`R1`) that appears\n+// in the type of `p` includes the points after `&v[0]` up to (but not\n+// including) the call to `use_x`. The `else` branch is not included.\n+\n+// compile-flags:-Zborrowck-mir -Znll\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+struct MyStruct {\n+    field: String\n+}\n+\n+fn main() {\n+    let mut my_struct = MyStruct { field: format!(\"Hello\") };\n+\n+    let value = &my_struct.field;\n+    if value.is_empty() {\n+        my_struct.field.push_str(\"Hello, world!\");\n+        //~^ ERROR cannot borrow (Ast)\n+    }\n+}"}, {"sha": "6b287fd22720135bf20a3ec937cb0dde0dfea534", "filename": "src/test/compile-fail/nll/return_from_loop.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b01a0e244a1df75f90cd8f0bfee546b4b2690/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs?ref=a94b01a0e244a1df75f90cd8f0bfee546b4b2690", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for liveness constraints: the region (`R1`) that appears\n+// in the type of `p` includes the points after `&v[0]` up to (but not\n+// including) the call to `use_x`. The `else` branch is not included.\n+\n+// compile-flags:-Zborrowck-mir -Znll\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+struct MyStruct {\n+    field: String\n+}\n+\n+fn main() {\n+}\n+\n+fn nll_fail() {\n+    let mut my_struct = MyStruct { field: format!(\"Hello\") };\n+\n+    let value = &mut my_struct.field;\n+    loop {\n+        my_struct.field.push_str(\"Hello, world!\");\n+        //~^ ERROR (Ast) [E0499]\n+        //~| ERROR (Mir) [E0499]\n+        value.len();\n+        return;\n+    }\n+}\n+\n+fn nll_ok() {\n+    let mut my_struct = MyStruct { field: format!(\"Hello\") };\n+\n+    let value = &mut my_struct.field;\n+    loop {\n+        my_struct.field.push_str(\"Hello, world!\");\n+        //~^ ERROR (Ast) [E0499]\n+        return;\n+    }\n+}"}]}