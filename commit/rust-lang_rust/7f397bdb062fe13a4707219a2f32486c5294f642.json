{"sha": "7f397bdb062fe13a4707219a2f32486c5294f642", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzk3YmRiMDYyZmUxM2E0NzA3MjE5YTJmMzI0ODZjNTI5NGY2NDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-19T05:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-19T05:46:46Z"}, "message": "Auto merge of #43919 - frewsxcv:frewsxcv-char-primitive, r=QuietMisdreavus\n\nMinor rewrite of char primitive unicode intro.\n\nOpened primarily to address #36998.\n\nDespite my love for emoji, the heart example is a little confusing because both heart characters start with the same code point and there can be stark rendering differences across browsers. I also spelled out what each of the code points is in the code block, which (hopefully) sheds light why one character is one code point while the other is two.\n\nVery much open to suggestion and improvements. I'm pretty tired when I wrote this so I might wake up and realize that this is making things more confusing \ud83d\ude05", "tree": {"sha": "92d3a1f24950bc3dbec0cd389c6b0bb294400373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d3a1f24950bc3dbec0cd389c6b0bb294400373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f397bdb062fe13a4707219a2f32486c5294f642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f397bdb062fe13a4707219a2f32486c5294f642", "html_url": "https://github.com/rust-lang/rust/commit/7f397bdb062fe13a4707219a2f32486c5294f642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f397bdb062fe13a4707219a2f32486c5294f642/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e3c7932c5d76a59d494797fe71530daf534ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e3c7932c5d76a59d494797fe71530daf534ed3", "html_url": "https://github.com/rust-lang/rust/commit/c7e3c7932c5d76a59d494797fe71530daf534ed3"}, {"sha": "1065ad418e9693a8bbd4592237f858bc862d2482", "url": "https://api.github.com/repos/rust-lang/rust/commits/1065ad418e9693a8bbd4592237f858bc862d2482", "html_url": "https://github.com/rust-lang/rust/commit/1065ad418e9693a8bbd4592237f858bc862d2482"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "6746754ebc3449fa8d26b97cc57692cb3bd0c110", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7f397bdb062fe13a4707219a2f32486c5294f642/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f397bdb062fe13a4707219a2f32486c5294f642/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=7f397bdb062fe13a4707219a2f32486c5294f642", "patch": "@@ -103,26 +103,31 @@ mod prim_bool { }\n /// [`String`]: string/struct.String.html\n ///\n /// As always, remember that a human intuition for 'character' may not map to\n-/// Unicode's definitions. For example, emoji symbols such as '\u2764\ufe0f' can be more\n-/// than one Unicode code point; this \u2764\ufe0f in particular is two:\n+/// Unicode's definitions. For example, despite looking similar, the '\u00e9'\n+/// character is one Unicode code point while '\u00e9' is two Unicode code points:\n ///\n /// ```\n-/// let s = String::from(\"\u2764\ufe0f\");\n+/// let mut chars = \"\u00e9\".chars();\n+/// // U+00e9: 'latin small letter e with acute'\n+/// assert_eq!(Some('\\u{00e9}'), chars.next());\n+/// assert_eq!(None, chars.next());\n ///\n-/// // we get two chars out of a single \u2764\ufe0f\n-/// let mut iter = s.chars();\n-/// assert_eq!(Some('\\u{2764}'), iter.next());\n-/// assert_eq!(Some('\\u{fe0f}'), iter.next());\n-/// assert_eq!(None, iter.next());\n+/// let mut chars = \"e\u0301\".chars();\n+/// // U+0065: 'latin small letter e'\n+/// assert_eq!(Some('\\u{0065}'), chars.next());\n+/// // U+0301: 'combining acute accent'\n+/// assert_eq!(Some('\\u{0301}'), chars.next());\n+/// assert_eq!(None, chars.next());\n /// ```\n ///\n-/// This means it won't fit into a `char`. Trying to create a literal with\n-/// `let heart = '\u2764\ufe0f';` gives an error:\n+/// This means that the contents of the first string above _will_ fit into a\n+/// `char` while the contents of the second string _will not_. Trying to create\n+/// a `char` literal with the contents of the second string gives an error:\n ///\n /// ```text\n-/// error: character literal may only contain one codepoint: '\u2764\n-/// let heart = '\u2764\ufe0f';\n-///             ^~\n+/// error: character literal may only contain one codepoint: 'e\u0301'\n+/// let c = 'e\u0301';\n+///         ^^^^\n /// ```\n ///\n /// Another implication of the 4-byte fixed size of a `char` is that"}]}