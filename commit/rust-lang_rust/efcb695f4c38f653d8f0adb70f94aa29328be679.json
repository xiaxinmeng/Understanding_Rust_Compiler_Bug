{"sha": "efcb695f4c38f653d8f0adb70f94aa29328be679", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2I2OTVmNGMzOGY2NTNkOGYwYWRiNzBmOTRhYTI5MzI4YmU2Nzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T20:34:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-17T21:37:10Z"}, "message": "Further HashStable_Generic derives.", "tree": {"sha": "1699802ebabf1f2d26a3fe7fe9244d4382a54404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1699802ebabf1f2d26a3fe7fe9244d4382a54404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcb695f4c38f653d8f0adb70f94aa29328be679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcb695f4c38f653d8f0adb70f94aa29328be679", "html_url": "https://github.com/rust-lang/rust/commit/efcb695f4c38f653d8f0adb70f94aa29328be679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcb695f4c38f653d8f0adb70f94aa29328be679/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd5133dce33fed1cffea9bc6fb6ee4f37dc7053", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd5133dce33fed1cffea9bc6fb6ee4f37dc7053", "html_url": "https://github.com/rust-lang/rust/commit/1dd5133dce33fed1cffea9bc6fb6ee4f37dc7053"}], "stats": {"total": 64, "additions": 11, "deletions": 53}, "files": [{"sha": "bf716dbf0619aed1672004709cd81bc9a84017aa", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=efcb695f4c38f653d8f0adb70f94aa29328be679", "patch": "@@ -17,13 +17,6 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::MacroKind {\n-    Bang,\n-    Attr,\n-    Derive,\n-});\n-\n-\n impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Cdecl,\n     Stdcall,\n@@ -47,57 +40,17 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Unadjusted\n });\n \n-impl_stable_hash_for!(struct ::syntax::attr::Deprecation { since, note });\n-impl_stable_hash_for!(struct ::syntax::attr::Stability {\n-    level,\n-    feature,\n-    rustc_depr,\n-    promotable,\n-    allow_const_fn_ptr,\n-    const_stability\n-});\n-\n impl_stable_hash_for!(enum ::syntax::edition::Edition {\n     Edition2015,\n     Edition2018,\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ::syntax::attr::StabilityLevel {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match *self {\n-            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue, ref is_soft } => {\n-                reason.hash_stable(hcx, hasher);\n-                issue.hash_stable(hcx, hasher);\n-                is_soft.hash_stable(hcx, hasher);\n-            }\n-            ::syntax::attr::StabilityLevel::Stable { ref since } => {\n-                since.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n-\n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n     span\n });\n \n-impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n-    Str(value, style),\n-    ByteStr(value),\n-    Byte(value),\n-    Char(value),\n-    Int(value, lit_int_type),\n-    Float(value, lit_float_type),\n-    Bool(value),\n-    Err(value)\n-});\n-\n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n \n impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });"}, {"sha": "19a8398ae78af5bc83cc76e7b652304a138bdd30", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=efcb695f4c38f653d8f0adb70f94aa29328be679", "patch": "@@ -1474,7 +1474,7 @@ pub enum LitFloatType {\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n // Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),"}, {"sha": "6032e8a5b216af6c2be3a98c4480a79159ae92ab", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=efcb695f4c38f653d8f0adb70f94aa29328be679", "patch": "@@ -141,7 +141,8 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n-#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug,\n+         PartialEq, Eq, Hash, HashStable_Generic)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -157,7 +158,8 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd,\n+         Copy, Clone, Debug, Eq, Hash, HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n@@ -181,7 +183,8 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd,\n+         Copy, Clone, Debug, Eq, Hash, HashStable_Generic)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,\n@@ -636,7 +639,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Clone)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, HashStable_Generic)]\n pub struct Deprecation {\n     pub since: Option<Symbol>,\n     pub note: Option<Symbol>,"}, {"sha": "daabd0569dc0b5b70cfe585a66c3b9adcbf91510", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb695f4c38f653d8f0adb70f94aa29328be679/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=efcb695f4c38f653d8f0adb70f94aa29328be679", "patch": "@@ -30,6 +30,7 @@ use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n \n+use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -707,7 +708,8 @@ impl ExpnKind {\n }\n \n /// The kind of macro invocation or definition.\n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable,\n+         Hash, Debug, HashStable_Generic)]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,"}]}