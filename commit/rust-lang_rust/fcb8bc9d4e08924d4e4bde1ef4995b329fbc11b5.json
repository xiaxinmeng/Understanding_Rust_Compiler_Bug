{"sha": "fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYjhiYzlkNGUwODkyNGQ0ZTRiZGUxZWY0OTk1YjMyOWZiYzExYjU=", "commit": {"author": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-12T21:45:07Z"}, "committer": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-13T14:34:13Z"}, "message": "Remove recursion from `define_{provider|map}_struct`", "tree": {"sha": "8db65827b7301f5411e82b536b407f7f6d842675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db65827b7301f5411e82b536b407f7f6d842675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "html_url": "https://github.com/rust-lang/rust/commit/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5/comments", "author": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2160bab0dac479e72f49932c1c71cb3d01f4e9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2160bab0dac479e72f49932c1c71cb3d01f4e9f6", "html_url": "https://github.com/rust-lang/rust/commit/2160bab0dac479e72f49932c1c71cb3d01f4e9f6"}], "stats": {"total": 103, "additions": 4, "deletions": 99}, "files": [{"sha": "3f215303ccbeeade0af0793f4dc80253b34b814d", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 4, "deletions": 99, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "patch": "@@ -468,8 +468,7 @@ macro_rules! define_maps {\n \n         define_provider_struct! {\n             tcx: $tcx,\n-            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*),\n-            output: ()\n+            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*)\n         }\n \n         impl<$tcx> Copy for Providers<$tcx> {}\n@@ -480,78 +479,19 @@ macro_rules! define_maps {\n }\n \n macro_rules! define_map_struct {\n-    // Initial state\n     (tcx: $tcx:tt,\n-     input: $input:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ()\n-        }\n-    };\n-\n-    // Final output\n-    (tcx: $tcx:tt,\n-     input: (),\n-     output: ($($output:tt)*)) => {\n+     input: ($(([$(modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n-            $($output)*\n-        }\n-    };\n-\n-    // Field recognized and ready to shift into the output\n-    (tcx: $tcx:tt,\n-     ready: ([$($pub:tt)*] [$($attr:tt)*] [$name:ident]),\n-     input: $input:tt,\n-     output: ($($output:tt)*)) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ($($output)*\n-                     $(#[$attr])* $($pub)* $name: RefCell<QueryMap<queries::$name<$tcx>>>,)\n-        }\n-    };\n-\n-    // No modifiers left? This is a private item.\n-    (tcx: $tcx:tt,\n-     input: (([] $attrs:tt $name:tt) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            ready: ([] $attrs $name),\n-            input: ($($input)*),\n-            output: $output\n-        }\n-    };\n-\n-    // Skip other modifiers\n-    (tcx: $tcx:tt,\n-     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: (([$($modifiers)*] $($fields)*) $($input)*),\n-            output: $output\n+            $($(#[$attr])*  $name: RefCell<QueryMap<queries::$name<$tcx>>>,)*\n         }\n     };\n }\n \n macro_rules! define_provider_struct {\n-    // Initial state:\n-    (tcx: $tcx:tt, input: $input:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ()\n-        }\n-    };\n-\n-    // Final state:\n     (tcx: $tcx:tt,\n-     input: (),\n-     output: ($(([$name:ident] [$K:ty] [$R:ty]))*)) => {\n+     input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n         pub struct Providers<$tcx> {\n             $(pub $name: for<'a> fn(TyCtxt<'a, $tcx, $tcx>, $K) -> $R,)*\n         }\n@@ -566,41 +506,6 @@ macro_rules! define_provider_struct {\n             }\n         }\n     };\n-\n-    // Something ready to shift:\n-    (tcx: $tcx:tt,\n-     ready: ($name:tt $K:tt $V:tt),\n-     input: $input:tt,\n-     output: ($($output:tt)*)) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ($($output)* ($name $K $V))\n-        }\n-    };\n-\n-    // Regular queries produce a `V` only.\n-    (tcx: $tcx:tt,\n-     input: (([] $name:tt $K:tt $V:tt) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            ready: ($name $K $V),\n-            input: ($($input)*),\n-            output: $output\n-        }\n-    };\n-\n-    // Skip modifiers.\n-    (tcx: $tcx:tt,\n-     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: (([$($modifiers)*] $($fields)*) $($input)*),\n-            output: $output\n-        }\n-    };\n }\n \n "}]}