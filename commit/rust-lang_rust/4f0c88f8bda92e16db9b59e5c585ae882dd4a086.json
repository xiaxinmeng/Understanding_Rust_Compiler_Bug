{"sha": "4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "node_id": "C_kwDOAAsO6NoAKDRmMGM4OGY4YmRhOTJlMTZkYjliNTllNWM1ODVhZTg4MmRkNGEwODY", "commit": {"author": {"name": "Dmitri Gribenko", "email": "dmitrig@google.com", "date": "2023-01-11T15:39:01Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2023-01-11T16:25:15Z"}, "message": "rustc_llvm: replace llvm::makeArrayRef with ArrayRef constructors.\n\nLLVM upstream has deprecated llvm::makeArrayRef and will remove it.", "tree": {"sha": "16cf5bb40b6463869d71aa2d5e829902f0f916d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16cf5bb40b6463869d71aa2d5e829902f0f916d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "html_url": "https://github.com/rust-lang/rust/commit/4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c88f8bda92e16db9b59e5c585ae882dd4a086/comments", "author": {"login": "gribozavr", "id": 1120569, "node_id": "MDQ6VXNlcjExMjA1Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/1120569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gribozavr", "html_url": "https://github.com/gribozavr", "followers_url": "https://api.github.com/users/gribozavr/followers", "following_url": "https://api.github.com/users/gribozavr/following{/other_user}", "gists_url": "https://api.github.com/users/gribozavr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gribozavr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gribozavr/subscriptions", "organizations_url": "https://api.github.com/users/gribozavr/orgs", "repos_url": "https://api.github.com/users/gribozavr/repos", "events_url": "https://api.github.com/users/gribozavr/events{/privacy}", "received_events_url": "https://api.github.com/users/gribozavr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "03e6d2149e96984846c0c90e83b0a67323e38b49", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f0c88f8bda92e16db9b59e5c585ae882dd4a086/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f0c88f8bda92e16db9b59e5c585ae882dd4a086/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "patch": "@@ -28,8 +28,8 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n   for (size_t i = 0; i < FilenamesLen; i++) {\n     FilenameRefs.push_back(std::string(Filenames[i]));\n   }\n-  auto FilenamesWriter = coverage::CoverageFilenamesSectionWriter(\n-    makeArrayRef(FilenameRefs));\n+  auto FilenamesWriter =\n+      coverage::CoverageFilenamesSectionWriter(ArrayRef<std::string>(FilenameRefs));\n   RawRustStringOstream OS(BufferOut);\n   FilenamesWriter.write(OS);\n }\n@@ -45,15 +45,16 @@ extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n   // Convert from FFI representation to LLVM representation.\n   SmallVector<coverage::CounterMappingRegion, 0> MappingRegions;\n   MappingRegions.reserve(NumMappingRegions);\n-  for (const auto &Region : makeArrayRef(RustMappingRegions, NumMappingRegions)) {\n+  for (const auto &Region : ArrayRef<LLVMRustCounterMappingRegion>(\n+           RustMappingRegions, NumMappingRegions)) {\n     MappingRegions.emplace_back(\n         Region.Count, Region.FalseCount, Region.FileID, Region.ExpandedFileID,\n         Region.LineStart, Region.ColumnStart, Region.LineEnd, Region.ColumnEnd,\n         Region.Kind);\n   }\n   auto CoverageMappingWriter = coverage::CoverageMappingWriter(\n-      makeArrayRef(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n-      makeArrayRef(Expressions, NumExpressions),\n+      ArrayRef<unsigned>(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n+      ArrayRef<coverage::CounterExpression>(Expressions, NumExpressions),\n       MappingRegions);\n   RawRustStringOstream OS(BufferOut);\n   CoverageMappingWriter.write(OS);"}, {"sha": "8f94e8a4ab2e1d2422d009ec6665eeb7e209ab88", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f0c88f8bda92e16db9b59e5c585ae882dd4a086/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f0c88f8bda92e16db9b59e5c585ae882dd4a086/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4f0c88f8bda92e16db9b59e5c585ae882dd4a086", "patch": "@@ -257,7 +257,7 @@ template<typename T> static inline void AddAttributes(T *t, unsigned Index,\n   PALNew = PAL.addAttributes(t->getContext(), Index, B);\n #else\n   AttrBuilder B(t->getContext());\n-  for (LLVMAttributeRef Attr : makeArrayRef(Attrs, AttrsLen))\n+  for (LLVMAttributeRef Attr : ArrayRef<LLVMAttributeRef>(Attrs, AttrsLen))\n     B.addAttribute(unwrap(Attr));\n   PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n #endif\n@@ -1064,7 +1064,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n     const uint64_t Value[2], unsigned SizeInBits, bool IsUnsigned) {\n   return wrap(Builder->createEnumerator(StringRef(Name, NameLen),\n-      APSInt(APInt(SizeInBits, makeArrayRef(Value, 2)), IsUnsigned)));\n+      APSInt(APInt(SizeInBits, ArrayRef<uint64_t>(Value, 2)), IsUnsigned)));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n@@ -1477,7 +1477,7 @@ extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,\n                                                            unsigned NumInputs) {\n-  return new OperandBundleDef(Name, makeArrayRef(unwrap(Inputs), NumInputs));\n+  return new OperandBundleDef(Name, ArrayRef<Value*>(unwrap(Inputs), NumInputs));\n }\n \n extern \"C\" void LLVMRustFreeOperandBundleDef(OperandBundleDef *Bundle) {\n@@ -1491,8 +1491,8 @@ extern \"C\" LLVMValueRef LLVMRustBuildCall(LLVMBuilderRef B, LLVMTypeRef Ty, LLVM\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n   return wrap(unwrap(B)->CreateCall(\n-      FTy, Callee, makeArrayRef(unwrap(Args), NumArgs),\n-      makeArrayRef(*OpBundles, NumOpBundles)));\n+      FTy, Callee, ArrayRef<Value*>(unwrap(Args), NumArgs),\n+      ArrayRef<OperandBundleDef>(*OpBundles, NumOpBundles)));\n }\n \n extern \"C\" LLVMValueRef LLVMRustGetInstrProfIncrementIntrinsic(LLVMModuleRef M) {\n@@ -1537,8 +1537,8 @@ LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Fn,\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n   return wrap(unwrap(B)->CreateInvoke(FTy, Callee, unwrap(Then), unwrap(Catch),\n-                                      makeArrayRef(unwrap(Args), NumArgs),\n-                                      makeArrayRef(*OpBundles, NumOpBundles),\n+                                      ArrayRef<Value*>(unwrap(Args), NumArgs),\n+                                      ArrayRef<OperandBundleDef>(*OpBundles, NumOpBundles),\n                                       Name));\n }\n "}]}