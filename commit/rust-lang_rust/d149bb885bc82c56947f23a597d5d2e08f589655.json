{"sha": "d149bb885bc82c56947f23a597d5d2e08f589655", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDliYjg4NWJjODJjNTY5NDdmMjNhNTk3ZDVkMmUwOGY1ODk2NTU=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-03T11:45:30Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-03T11:45:30Z"}, "message": "Add parser unit tests", "tree": {"sha": "ed0124438e3766bf3575f2c8a821f38fe90fbb26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0124438e3766bf3575f2c8a821f38fe90fbb26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d149bb885bc82c56947f23a597d5d2e08f589655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d149bb885bc82c56947f23a597d5d2e08f589655", "html_url": "https://github.com/rust-lang/rust/commit/d149bb885bc82c56947f23a597d5d2e08f589655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d149bb885bc82c56947f23a597d5d2e08f589655/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725805dc795159399c90a5c9b6f11ffeadec2e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/725805dc795159399c90a5c9b6f11ffeadec2e0f", "html_url": "https://github.com/rust-lang/rust/commit/725805dc795159399c90a5c9b6f11ffeadec2e0f"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "2c75b7b4fced5f1f2d8e4a700a6cff73c1de1532", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=d149bb885bc82c56947f23a597d5d2e08f589655", "patch": "@@ -26,7 +26,7 @@ pub use tt::{Delimiter, Punct};\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum ParseError {\n-    ParseError,\n+    Expected(String),\n }\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "e3669f66cbeb52fb4bec6d1bcec9a3b45f4eb1b0", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=d149bb885bc82c56947f23a597d5d2e08f589655", "patch": "@@ -77,18 +77,70 @@ fn parse_repeat(p: &mut TtCursor) -> Result<crate::Repeat, ParseError> {\n     let subtree = p.eat_subtree().unwrap();\n     let mut subtree = parse_subtree(subtree)?;\n     subtree.delimiter = crate::Delimiter::None;\n-    let sep = p.eat_punct().ok_or(ParseError::ParseError)?;\n+    let sep = p.eat_punct().ok_or(ParseError::Expected(String::from(\"separator\")))?;\n     let (separator, rep) = match sep.char {\n         '*' | '+' | '?' => (None, sep.char),\n-        char => (Some(char), p.eat_punct().ok_or(ParseError::ParseError)?.char),\n+        char => {\n+            (Some(char), p.eat_punct().ok_or(ParseError::Expected(String::from(\"separator\")))?.char)\n+        }\n     };\n \n     let kind = match rep {\n         '*' => crate::RepeatKind::ZeroOrMore,\n         '+' => crate::RepeatKind::OneOrMore,\n         '?' => crate::RepeatKind::ZeroOrOne,\n-        _ => return Err(ParseError::ParseError),\n+        _ => return Err(ParseError::Expected(String::from(\"repeat\"))),\n     };\n     p.bump();\n     Ok(crate::Repeat { subtree, kind, separator })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_syntax::{ast, AstNode};\n+\n+    use super::*;\n+    use crate::ast_to_token_tree;\n+\n+    #[test]\n+    fn test_invalid_parse() {\n+        expect_err(\"invalid\", \"subtree\");\n+\n+        is_valid(\"($i:ident) => ()\");\n+        expect_err(\"$i:ident => ()\", \"subtree\");\n+        expect_err(\"($i:ident) ()\", \"`=`\");\n+        expect_err(\"($($i:ident)_) => ()\", \"separator\");\n+    }\n+\n+    fn expect_err(macro_body: &str, expected: &str) {\n+        assert_eq!(\n+            create_rules(&format_macro(macro_body)),\n+            Err(ParseError::Expected(String::from(expected)))\n+        );\n+    }\n+\n+    fn is_valid(macro_body: &str) {\n+        assert!(create_rules(&format_macro(macro_body)).is_ok());\n+    }\n+\n+    fn format_macro(macro_body: &str) -> String {\n+        format!(\n+            \"\n+        macro_rules! foo {{\n+            {}\n+        }}\n+\",\n+            macro_body\n+        )\n+    }\n+\n+    fn create_rules(macro_definition: &str) -> Result<crate::MacroRules, ParseError> {\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition =\n+            source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        parse(&definition_tt)\n+    }\n+\n+}"}, {"sha": "3128cb9ae2e96eb7e26370ebe7d77d46d80fc12d", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d149bb885bc82c56947f23a597d5d2e08f589655/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=d149bb885bc82c56947f23a597d5d2e08f589655", "patch": "@@ -60,7 +60,7 @@ impl<'a> TtCursor<'a> {\n                 self.bump();\n                 Ok(sub)\n             }\n-            _ => Err(ParseError::ParseError),\n+            _ => Err(ParseError::Expected(String::from(\"subtree\"))),\n         }\n     }\n \n@@ -83,7 +83,7 @@ impl<'a> TtCursor<'a> {\n             self.bump();\n             Ok(())\n         } else {\n-            Err(ParseError::ParseError)\n+            Err(ParseError::Expected(format!(\"`{}`\", char)))\n         }\n     }\n }"}]}