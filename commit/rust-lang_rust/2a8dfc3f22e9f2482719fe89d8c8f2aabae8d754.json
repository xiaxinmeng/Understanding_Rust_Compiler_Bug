{"sha": "2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOGRmYzNmMjJlOWYyNDgyNzE5ZmU4OWQ4YzhmMmFhYmFlOGQ3NTQ=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-12-01T00:54:28Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-12-01T00:54:28Z"}, "message": "Implement DoubleEndedIterator for MutChunkIter.", "tree": {"sha": "54d1bcadc5475a1927678e527126a403c009844f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d1bcadc5475a1927678e527126a403c009844f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754", "html_url": "https://github.com/rust-lang/rust/commit/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754/comments", "author": null, "committer": null, "parents": [{"sha": "f2a01ea27734c9b20389f75d2b0c0da34f4ba5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a01ea27734c9b20389f75d2b0c0da34f4ba5b7", "html_url": "https://github.com/rust-lang/rust/commit/f2a01ea27734c9b20389f75d2b0c0da34f4ba5b7"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "45667bdad2ef67d6999d56e810e08fd63ac9f00b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2a8dfc3f22e9f2482719fe89d8c8f2aabae8d754", "patch": "@@ -2611,6 +2611,23 @@ impl<'self, T> Iterator<&'self mut [T]> for MutChunkIter<'self, T> {\n     }\n }\n \n+impl<'self, T> DoubleEndedIterator<&'self mut [T]> for MutChunkIter<'self, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'self mut [T]> {\n+        if self.remaining == 0 {\n+            None\n+        } else {\n+            let remainder = self.remaining % self.chunk_size;\n+            let sz = if remainder != 0 { remainder } else { self.chunk_size };\n+            let tmp = util::replace(&mut self.v, &mut []);\n+            let (head, tail) = tmp.mut_split(self.remaining - sz);\n+            self.v = head;\n+            self.remaining -= sz;\n+            Some(tail)\n+        }\n+    }\n+}\n+\n /// An iterator that moves out of a vector.\n #[deriving(Clone)]\n pub struct MoveIterator<T> {\n@@ -4033,6 +4050,18 @@ mod tests {\n         assert_eq!(v, result);\n     }\n \n+    #[test]\n+    fn test_mut_chunks_invert() {\n+        let mut v = [0u8, 1, 2, 3, 4, 5, 6];\n+        for (i, chunk) in v.mut_chunks(3).invert().enumerate() {\n+            for x in chunk.mut_iter() {\n+                *x = i as u8;\n+            }\n+        }\n+        let result = [2u8, 2, 2, 1, 1, 1, 0];\n+        assert_eq!(v, result);\n+    }\n+\n     #[test]\n     #[should_fail]\n     fn test_mut_chunks_0() {"}]}