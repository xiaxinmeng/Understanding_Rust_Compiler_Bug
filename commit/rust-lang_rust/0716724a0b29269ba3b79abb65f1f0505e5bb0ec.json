{"sha": "0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTY3MjRhMGIyOTI2OWJhM2I3OWFiYjY1ZjFmMDUwNWU1YmIwZWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-11-03T06:27:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-03T06:27:03Z"}, "message": "Rollup merge of #78376 - Aaron1011:feature/consistent-empty-expr, r=petrochenkov\n\nTreat trailing semicolon as a statement in macro call\n\nSee #61733 (comment)\n\nWe now preserve the trailing semicolon in a macro invocation, even if\nthe macro expands to nothing. As a result, the following code no longer\ncompiles:\n\n```rust\nmacro_rules! empty {\n    () => { }\n}\n\nfn foo() -> bool { //~ ERROR mismatched\n    { true } //~ ERROR mismatched\n    empty!();\n}\n```\n\nPreviously, `{ true }` would be considered the trailing expression, even\nthough there's a semicolon in `empty!();`\n\nThis makes macro expansion more token-based.", "tree": {"sha": "d9e9e635c41b6d29e9edf0c90ff7cf02e563d23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9e9e635c41b6d29e9edf0c90ff7cf02e563d23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoPg3CRBK7hj4Ov3rIwAAdHIIAFaAZ0vGdsYySwbBdMiACnmY\nTRBAg0loySHSQ+IgYwU0AdURUCaA0cPag8H7d9J7J+P+rLIX+wQtjz9ovtEowumj\nb53Rw5F69f4ZR/jqO69xlN2D4/ho43z7jdosSRA4sw+/Y/Ridj6NvLgNyRPTAnv+\nb/95G0D7AanC83i6na9NIByTcpMrndh5RpO9Fi3qeVbQP/87waiAaoFsJL5gI7St\nV/uUgQN+yS+G8DjysCLANXfKjTYMwy/zDZBO/hqgqNUBkhtcEc+qhJlZ4lukfomw\nrrYZFeAfKoyopBVm+Ij5cptkSXuz9Eaaaapj7Srrfs/c3iaMeBe13aZr1UwUO00=\n=aLv8\n-----END PGP SIGNATURE-----\n", "payload": "tree d9e9e635c41b6d29e9edf0c90ff7cf02e563d23e\nparent 4c0c5e099a3b1f1c6ad53115189c2710495588b3\nparent e78e9d4a06192cfbb9e1417fdd7a0753d51684a3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1604384823 +0900\ncommitter GitHub <noreply@github.com> 1604384823 +0900\n\nRollup merge of #78376 - Aaron1011:feature/consistent-empty-expr, r=petrochenkov\n\nTreat trailing semicolon as a statement in macro call\n\nSee #61733 (comment)\n\nWe now preserve the trailing semicolon in a macro invocation, even if\nthe macro expands to nothing. As a result, the following code no longer\ncompiles:\n\n```rust\nmacro_rules! empty {\n    () => { }\n}\n\nfn foo() -> bool { //~ ERROR mismatched\n    { true } //~ ERROR mismatched\n    empty!();\n}\n```\n\nPreviously, `{ true }` would be considered the trailing expression, even\nthough there's a semicolon in `empty!();`\n\nThis makes macro expansion more token-based.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "html_url": "https://github.com/rust-lang/rust/commit/0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0c5e099a3b1f1c6ad53115189c2710495588b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0c5e099a3b1f1c6ad53115189c2710495588b3", "html_url": "https://github.com/rust-lang/rust/commit/4c0c5e099a3b1f1c6ad53115189c2710495588b3"}, {"sha": "e78e9d4a06192cfbb9e1417fdd7a0753d51684a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78e9d4a06192cfbb9e1417fdd7a0753d51684a3", "html_url": "https://github.com/rust-lang/rust/commit/e78e9d4a06192cfbb9e1417fdd7a0753d51684a3"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "f13d67b9c15840178eb35adf6e9fd90fd87c47e1", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -905,6 +905,13 @@ pub struct Stmt {\n }\n \n impl Stmt {\n+    pub fn has_trailing_semicolon(&self) -> bool {\n+        match &self.kind {\n+            StmtKind::Semi(_) => true,\n+            StmtKind::MacCall(mac) => matches!(mac.style, MacStmtStyle::Semicolon),\n+            _ => false,\n+        }\n+    }\n     pub fn add_trailing_semicolon(mut self) -> Self {\n         self.kind = match self.kind {\n             StmtKind::Expr(expr) => StmtKind::Semi(expr),"}, {"sha": "0cffca17271247d3d1f5e622c04b5fb586608623", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -310,8 +310,44 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         };\n \n         if style == ast::MacStmtStyle::Semicolon {\n+            // Implement the proposal described in\n+            // https://github.com/rust-lang/rust/issues/61733#issuecomment-509626449\n+            //\n+            // The macro invocation expands to the list of statements.\n+            // If the list of statements is empty, then 'parse'\n+            // the trailing semicolon on the original invocation\n+            // as an empty statement. That is:\n+            //\n+            // `empty();` is parsed as a single `StmtKind::Empty`\n+            //\n+            // If the list of statements is non-empty, see if the\n+            // final statement alreayd has a trailing semicolon.\n+            //\n+            // If it doesn't have a semicolon, then 'parse' the trailing semicolon\n+            // from the invocation as part of the final statement,\n+            // using `stmt.add_trailing_semicolon()`\n+            //\n+            // If it does have a semicolon, then 'parse' the trailing semicolon\n+            // from the invocation as a new StmtKind::Empty\n+\n+            // FIXME: We will need to preserve the original\n+            // semicolon token and span as part of #15701\n+            let empty_stmt = ast::Stmt {\n+                id: ast::DUMMY_NODE_ID,\n+                kind: ast::StmtKind::Empty,\n+                span: DUMMY_SP,\n+                tokens: None,\n+            };\n+\n             if let Some(stmt) = stmts.pop() {\n-                stmts.push(stmt.add_trailing_semicolon());\n+                if stmt.has_trailing_semicolon() {\n+                    stmts.push(stmt);\n+                    stmts.push(empty_stmt);\n+                } else {\n+                    stmts.push(stmt.add_trailing_semicolon());\n+                }\n+            } else {\n+                stmts.push(empty_stmt);\n             }\n         }\n "}, {"sha": "84cc7b68d4ca9ef45bc9f14b8395b54347638fab", "filename": "compiler/rustc_lint/src/redundant_semicolon.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -42,6 +42,11 @@ impl EarlyLintPass for RedundantSemicolons {\n \n fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, bool)>) {\n     if let Some((span, multiple)) = seq.take() {\n+        // FIXME: Find a better way of ignoring the trailing\n+        // semicolon from macro expansion\n+        if span == rustc_span::DUMMY_SP {\n+            return;\n+        }\n         cx.struct_span_lint(REDUNDANT_SEMICOLONS, span, |lint| {\n             let (msg, rem) = if multiple {\n                 (\"unnecessary trailing semicolons\", \"remove these semicolons\")"}, {"sha": "3d78ed4a4759a2515bf201d54cb6b6a4012adf46", "filename": "src/test/ui/macros/empty-trailing-stmt.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.rs?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! empty {\n+    () => { }\n+}\n+\n+fn foo() -> bool { //~ ERROR mismatched\n+    { true } //~ ERROR mismatched\n+    empty!();\n+}\n+\n+fn main() {}"}, {"sha": "e88b12712fb8c8ef7c1769d14c8b68c0d82459b4", "filename": "src/test/ui/macros/empty-trailing-stmt.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/empty-trailing-stmt.rs:6:7\n+   |\n+LL |     { true }\n+   |       ^^^^ expected `()`, found `bool`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/empty-trailing-stmt.rs:5:13\n+   |\n+LL | fn foo() -> bool {\n+   |    ---      ^^^^ expected `bool`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a067b7b5411dd87e05f1b5c0df6f7b506e78f7f7", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0716724a0b29269ba3b79abb65f1f0505e5bb0ec/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=0716724a0b29269ba3b79abb65f1f0505e5bb0ec", "patch": "@@ -40,7 +40,7 @@ macro_rules! produce_it\n     }\n }\n \n-fn main /* 0#0 */() { }\n+fn main /* 0#0 */() { ; }\n \n /*\n Expansions:"}]}