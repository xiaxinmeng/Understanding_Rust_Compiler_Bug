{"sha": "1cf0194b4636b734d4b42e54c9325467da82a7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZjAxOTRiNDYzNmI3MzRkNGI0MmU1NGM5MzI1NDY3ZGE4MmE3ZmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-18T21:16:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T21:16:28Z"}, "message": "Rollup merge of #69211 - petrochenkov:prevtok, r=Centril\n\nparser: Simplify treatment of macro variables in `Parser::bump`\n\nFollow-up to https://github.com/rust-lang/rust/pull/69006.\n\nToken normalization for `$ident` and `$lifetime` is merged directly into `bump`.\nSpecial \"unknown macro variable\" diagnostic for unexpected `$`s is removed as preventing legal code from compiling (as a result `bump` also doesn't call itself recursively anymore and can't make `prev_token` inconsistent).\n\nr? @Centril", "tree": {"sha": "0d3b398393c017f39367879e2fa811a07ceb715d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3b398393c017f39367879e2fa811a07ceb715d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf0194b4636b734d4b42e54c9325467da82a7fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTFQsCRBK7hj4Ov3rIwAAdHIIAG8Oxd0V4fDL1Bv/4Vx2zP6c\njcCzI8aLqYj00LQEncNsBodLHpQh8cMrUXzjL1grtY/xBzmZL4wzEnAcJuCdrU7S\n8uoLTi4nG8W0lJSRtlsSNmWnHVFUcV5CPokwvq90o8RkgUDPS2EeBU4N+HIPtcvf\nm29FNdBtx7r543RBW6Ap9+xxCOQNs6y+44dVwVqkfP7vTcvMc4qJlNFgcnOU6v3v\nTg0StOMhIhUd5mMfSzBZEJH0t4g1vMQ3HW6p9YwIsg3MCzVH2aylH7c0Maru38LU\nAun/9mx47JKYSdQ/V0h62TR7IWU9pnlxhnNLkhoZNH1hh4/pnRHh7Th5V1pD8to=\n=ruiq\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d3b398393c017f39367879e2fa811a07ceb715d\nparent b864d23f3484aad297e998f3cd50a4277122d070\nparent 950845c5b1079c83e56db0ca2b4bb8fe050ee2f5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582060588 +0100\ncommitter GitHub <noreply@github.com> 1582060588 +0100\n\nRollup merge of #69211 - petrochenkov:prevtok, r=Centril\n\nparser: Simplify treatment of macro variables in `Parser::bump`\n\nFollow-up to https://github.com/rust-lang/rust/pull/69006.\n\nToken normalization for `$ident` and `$lifetime` is merged directly into `bump`.\nSpecial \"unknown macro variable\" diagnostic for unexpected `$`s is removed as preventing legal code from compiling (as a result `bump` also doesn't call itself recursively anymore and can't make `prev_token` inconsistent).\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf0194b4636b734d4b42e54c9325467da82a7fd", "html_url": "https://github.com/rust-lang/rust/commit/1cf0194b4636b734d4b42e54c9325467da82a7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf0194b4636b734d4b42e54c9325467da82a7fd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b864d23f3484aad297e998f3cd50a4277122d070", "url": "https://api.github.com/repos/rust-lang/rust/commits/b864d23f3484aad297e998f3cd50a4277122d070", "html_url": "https://github.com/rust-lang/rust/commit/b864d23f3484aad297e998f3cd50a4277122d070"}, {"sha": "950845c5b1079c83e56db0ca2b4bb8fe050ee2f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/950845c5b1079c83e56db0ca2b4bb8fe050ee2f5", "html_url": "https://github.com/rust-lang/rust/commit/950845c5b1079c83e56db0ca2b4bb8fe050ee2f5"}], "stats": {"total": 170, "additions": 88, "deletions": 82}, "files": [{"sha": "6599e92222c75da0e453862eec407fdfd686e212", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -856,8 +856,6 @@ fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     if name == sym::tt {\n         return token::NtTT(p.parse_token_tree());\n     }\n-    // check at the beginning and the parser checks after each bump\n-    p.process_potential_macro_variable();\n     match parse_nt_inner(p, sp, name) {\n         Ok(nt) => nt,\n         Err(mut err) => {"}, {"sha": "52e581e30f5378d403fb225ebe8c6ae87215427b", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -267,7 +267,6 @@ fn generic_extension<'cx>(\n                     cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n-                p.process_potential_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n                 return Box::new(ParserAnyMacro {"}, {"sha": "a0b8415b3e17e5f9e66767ca87ae7886ff554ac2", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n use rustc_span::{FileName, SourceFile, Span};\n use syntax::ast;\n-use syntax::token::{self, Nonterminal};\n+use syntax::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n use std::path::{Path, PathBuf};\n@@ -170,8 +170,9 @@ fn maybe_source_file_to_parser(\n     let (stream, unclosed_delims) = maybe_file_to_stream(sess, source_file, None)?;\n     let mut parser = stream_to_parser(sess, stream, None);\n     parser.unclosed_delims = unclosed_delims;\n-    if parser.token == token::Eof && parser.token.span.is_dummy() {\n-        parser.token.span = Span::new(end_pos, end_pos, parser.token.span.ctxt());\n+    if parser.token == token::Eof {\n+        let span = Span::new(end_pos, end_pos, parser.token.span.ctxt());\n+        parser.set_token(Token::new(token::Eof, span));\n     }\n \n     Ok(parser)"}, {"sha": "97daa91eed196ee08c351b18f3a632908b3ae473", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -166,7 +166,7 @@ impl<'a> Parser<'a> {\n         while let Some(op) = self.check_assoc_op() {\n             // Adjust the span for interpolated LHS to point to the `$lhs` token\n             // and not to what it refers to.\n-            let lhs_span = match self.unnormalized_prev_token().kind {\n+            let lhs_span = match self.unnormalized_prev_token.kind {\n                 TokenKind::Interpolated(..) => self.prev_span,\n                 _ => lhs.span,\n             };\n@@ -527,7 +527,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, (Span, P<Expr>)> {\n         expr.map(|e| {\n             (\n-                match self.unnormalized_prev_token().kind {\n+                match self.unnormalized_prev_token.kind {\n                     TokenKind::Interpolated(..) => self.prev_span,\n                     _ => e.span,\n                 },"}, {"sha": "4dcde2f92db6eba9aed8aca179e6e40a0b23cd8e", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -1374,8 +1374,9 @@ impl<'a> Parser<'a> {\n     }\n \n     fn report_invalid_macro_expansion_item(&self, args: &MacArgs) {\n+        let span = args.span().expect(\"undelimited macro call\");\n         let mut err = self.struct_span_err(\n-            self.prev_span,\n+            span,\n             \"macros that expand to items must be delimited with braces or followed by a semicolon\",\n         );\n         if self.unclosed_delims.is_empty() {\n@@ -1390,14 +1391,14 @@ impl<'a> Parser<'a> {\n             );\n         } else {\n             err.span_suggestion(\n-                self.prev_span,\n+                span,\n                 \"change the delimiters to curly braces\",\n                 \" { /* items */ }\".to_string(),\n                 Applicability::HasPlaceholders,\n             );\n         }\n         err.span_suggestion(\n-            self.prev_span.shrink_to_hi(),\n+            span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "937e5e3cd695b24670c1454ae8d9e97bfb34c9ea", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 36, "deletions": 64, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -93,18 +93,16 @@ pub struct Parser<'a> {\n     /// Use span from this token if you need an isolated span.\n     pub token: Token,\n     /// The current non-normalized token if it's different from `token`.\n-    /// Preferable use is through the `unnormalized_token()` getter.\n     /// Use span from this token if you need to concatenate it with some neighbouring spans.\n-    unnormalized_token: Option<Token>,\n+    unnormalized_token: Token,\n     /// The previous normalized token.\n     /// Use span from this token if you need an isolated span.\n     prev_token: Token,\n     /// The previous non-normalized token if it's different from `prev_token`.\n-    /// Preferable use is through the `unnormalized_prev_token()` getter.\n     /// Use span from this token if you need to concatenate it with some neighbouring spans.\n-    unnormalized_prev_token: Option<Token>,\n-    /// Equivalent to `unnormalized_prev_token().span`.\n-    /// FIXME: Remove in favor of `(unnormalized_)prev_token().span`.\n+    unnormalized_prev_token: Token,\n+    /// Equivalent to `unnormalized_prev_token.span`.\n+    /// FIXME: Remove in favor of `(unnormalized_)prev_token.span`.\n     pub prev_span: Span,\n     restrictions: Restrictions,\n     /// Used to determine the path to externally loaded source files.\n@@ -378,9 +376,9 @@ impl<'a> Parser<'a> {\n         let mut parser = Parser {\n             sess,\n             token: Token::dummy(),\n-            unnormalized_token: None,\n+            unnormalized_token: Token::dummy(),\n             prev_token: Token::dummy(),\n-            unnormalized_prev_token: None,\n+            unnormalized_prev_token: Token::dummy(),\n             prev_span: DUMMY_SP,\n             restrictions: Restrictions::empty(),\n             recurse_into_file_modules,\n@@ -404,7 +402,8 @@ impl<'a> Parser<'a> {\n             subparser_name,\n         };\n \n-        parser.token = parser.next_tok();\n+        // Make parser point to the first token.\n+        parser.bump();\n \n         if let Some(directory) = directory {\n             parser.directory = directory;\n@@ -418,27 +417,18 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        parser.process_potential_macro_variable();\n         parser\n     }\n \n-    fn unnormalized_token(&self) -> &Token {\n-        self.unnormalized_token.as_ref().unwrap_or(&self.token)\n-    }\n-\n-    fn unnormalized_prev_token(&self) -> &Token {\n-        self.unnormalized_prev_token.as_ref().unwrap_or(&self.prev_token)\n-    }\n-\n-    fn next_tok(&mut self) -> Token {\n+    fn next_tok(&mut self, fallback_span: Span) -> Token {\n         let mut next = if self.desugar_doc_comments {\n             self.token_cursor.next_desugared()\n         } else {\n             self.token_cursor.next()\n         };\n         if next.span.is_dummy() {\n             // Tweak the location for better diagnostics, but keep syntactic context intact.\n-            next.span = self.unnormalized_token().span.with_ctxt(next.span.ctxt());\n+            next.span = fallback_span.with_ctxt(next.span.ctxt());\n         }\n         next\n     }\n@@ -896,6 +886,23 @@ impl<'a> Parser<'a> {\n         self.parse_delim_comma_seq(token::Paren, f)\n     }\n \n+    // Interpolated identifier (`$i: ident`) and lifetime (`$l: lifetime`)\n+    // tokens are replaced with usual identifier and lifetime tokens,\n+    // so the former are never encountered during normal parsing.\n+    crate fn set_token(&mut self, token: Token) {\n+        self.unnormalized_token = token;\n+        self.token = match &self.unnormalized_token.kind {\n+            token::Interpolated(nt) => match **nt {\n+                token::NtIdent(ident, is_raw) => {\n+                    Token::new(token::Ident(ident.name, is_raw), ident.span)\n+                }\n+                token::NtLifetime(ident) => Token::new(token::Lifetime(ident.name), ident.span),\n+                _ => self.unnormalized_token.clone(),\n+            },\n+            _ => self.unnormalized_token.clone(),\n+        }\n+    }\n+\n     /// Advance the parser by one token.\n     pub fn bump(&mut self) {\n         if self.prev_token.kind == TokenKind::Eof {\n@@ -905,16 +912,15 @@ impl<'a> Parser<'a> {\n         }\n \n         // Update the current and previous tokens.\n-        let next_token = self.next_tok();\n-        self.prev_token = mem::replace(&mut self.token, next_token);\n+        self.prev_token = self.token.take();\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n+        let next_token = self.next_tok(self.unnormalized_prev_token.span);\n+        self.set_token(next_token);\n \n         // Update fields derived from the previous token.\n-        self.prev_span = self.unnormalized_prev_token().span;\n+        self.prev_span = self.unnormalized_prev_token.span;\n \n         self.expected_tokens.clear();\n-        // Check after each token.\n-        self.process_potential_macro_variable();\n     }\n \n     /// Advances the parser using provided token as a next one. Use this when\n@@ -924,12 +930,12 @@ impl<'a> Parser<'a> {\n     /// Correct token kinds and spans need to be calculated instead.\n     fn bump_with(&mut self, next: TokenKind, span: Span) {\n         // Update the current and previous tokens.\n-        let next_token = Token::new(next, span);\n-        self.prev_token = mem::replace(&mut self.token, next_token);\n+        self.prev_token = self.token.take();\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n+        self.set_token(Token::new(next, span));\n \n         // Update fields derived from the previous token.\n-        self.prev_span = self.unnormalized_prev_token().span.with_hi(span.lo());\n+        self.prev_span = self.unnormalized_prev_token.span.with_hi(span.lo());\n \n         self.expected_tokens.clear();\n     }\n@@ -1066,39 +1072,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn process_potential_macro_variable(&mut self) {\n-        let normalized_token = match self.token.kind {\n-            token::Dollar\n-                if self.token.span.from_expansion() && self.look_ahead(1, |t| t.is_ident()) =>\n-            {\n-                self.bump();\n-                let name = match self.token.kind {\n-                    token::Ident(name, _) => name,\n-                    _ => unreachable!(),\n-                };\n-                let span = self.prev_span.to(self.token.span);\n-                self.struct_span_err(span, &format!(\"unknown macro variable `{}`\", name))\n-                    .span_label(span, \"unknown macro variable\")\n-                    .emit();\n-                self.bump();\n-                return;\n-            }\n-            token::Interpolated(ref nt) => {\n-                // Interpolated identifier and lifetime tokens are replaced with usual identifier\n-                // and lifetime tokens, so the former are never encountered during normal parsing.\n-                match **nt {\n-                    token::NtIdent(ident, is_raw) => {\n-                        Token::new(token::Ident(ident.name, is_raw), ident.span)\n-                    }\n-                    token::NtLifetime(ident) => Token::new(token::Lifetime(ident.name), ident.span),\n-                    _ => return,\n-                }\n-            }\n-            _ => return,\n-        };\n-        self.unnormalized_token = Some(mem::replace(&mut self.token, normalized_token));\n-    }\n-\n     /// Parses a single token tree from the input.\n     pub fn parse_token_tree(&mut self) -> TokenTree {\n         match self.token.kind {\n@@ -1107,15 +1080,14 @@ impl<'a> Parser<'a> {\n                     &mut self.token_cursor.frame,\n                     self.token_cursor.stack.pop().unwrap(),\n                 );\n-                self.token.span = frame.span.entire();\n+                self.set_token(Token::new(TokenKind::CloseDelim(frame.delim), frame.span.close));\n                 self.bump();\n                 TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream.into())\n             }\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {\n-                let token = self.token.clone();\n                 self.bump();\n-                TokenTree::Token(token)\n+                TokenTree::Token(self.prev_token.clone())\n             }\n         }\n     }"}, {"sha": "18e57c6a5d49fd7039e96fcce8b4089cd537b911", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -134,7 +134,7 @@ impl<'a> Parser<'a> {\n             path\n         });\n \n-        let lo = self.unnormalized_token().span;\n+        let lo = self.unnormalized_token.span;\n         let mut segments = Vec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();\n         if self.eat(&token::ModSep) {"}, {"sha": "25f1d6500726ee7b962d1312f2e575061b180eb6", "filename": "src/test/ui/issues/issue-6596-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -1,7 +1,7 @@\n macro_rules! e {\n     ($inp:ident) => (\n         $nonexistent\n-        //~^ ERROR unknown macro variable `nonexistent`\n+        //~^ ERROR expected expression, found `$`\n     );\n }\n "}, {"sha": "216fe6472a5033187e793bb4f92067544ed6475c", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -1,8 +1,8 @@\n-error: unknown macro variable `nonexistent`\n+error: expected expression, found `$`\n   --> $DIR/issue-6596-1.rs:3:9\n    |\n LL |         $nonexistent\n-   |         ^^^^^^^^^^^^ unknown macro variable\n+   |         ^^^^^^^^^^^^ expected expression\n ...\n LL |     e!(foo);\n    |     -------- in this macro invocation"}, {"sha": "8f7c98d9a67a77baaee8f3f6332d56869631439c", "filename": "src/test/ui/issues/issue-6596-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -3,7 +3,7 @@\n macro_rules! g {\n     ($inp:ident) => (\n         { $inp $nonexistent }\n-        //~^ ERROR unknown macro variable `nonexistent`\n+        //~^ ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `$`\n     );\n }\n "}, {"sha": "3d13c64f762ea5e6885fd16ffb52d0a2d08d8e27", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -1,8 +1,8 @@\n-error: unknown macro variable `nonexistent`\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `$`\n   --> $DIR/issue-6596-2.rs:5:16\n    |\n LL |         { $inp $nonexistent }\n-   |                ^^^^^^^^^^^^ unknown macro variable\n+   |                ^^^^^^^^^^^^ expected one of 8 possible tokens\n ...\n LL |     g!(foo);\n    |     -------- in this macro invocation"}, {"sha": "c9f0664c3a3ac3c8d27d1b386a70e50d4b4f1826", "filename": "src/test/ui/proc-macro/auxiliary/generate-dollar-ident.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-dollar-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-dollar-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-dollar-ident.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -0,0 +1,17 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_quote)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn dollar_ident(input: TokenStream) -> TokenStream {\n+    let black_hole = input.into_iter().next().unwrap();\n+    quote! {\n+        $black_hole!($$var);\n+    }\n+}"}, {"sha": "b838be9fb9f2c5121b607455fbd86ce7e750b21f", "filename": "src/test/ui/proc-macro/generate-dollar-ident.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-dollar-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0194b4636b734d4b42e54c9325467da82a7fd/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-dollar-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-dollar-ident.rs?ref=1cf0194b4636b734d4b42e54c9325467da82a7fd", "patch": "@@ -0,0 +1,18 @@\n+// Proc macros can generate token sequence `$ IDENT`\n+// without it being recognized as an unknown macro variable.\n+\n+// check-pass\n+// aux-build:generate-dollar-ident.rs\n+\n+extern crate generate_dollar_ident;\n+use generate_dollar_ident::*;\n+\n+macro_rules! black_hole {\n+    ($($tt:tt)*) => {};\n+}\n+\n+black_hole!($var);\n+\n+dollar_ident!(black_hole);\n+\n+fn main() {}"}]}