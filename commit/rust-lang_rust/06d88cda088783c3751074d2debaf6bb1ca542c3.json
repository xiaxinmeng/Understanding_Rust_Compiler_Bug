{"sha": "06d88cda088783c3751074d2debaf6bb1ca542c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDg4Y2RhMDg4NzgzYzM3NTEwNzRkMmRlYmFmNmJiMWNhNTQyYzM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-29T18:31:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:30:10Z"}, "message": "rustc: rename mir::LocalDecl's syntactic_source_info to source_info.", "tree": {"sha": "2b29b90e80af50de67df0d6b82bed563a3437dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b29b90e80af50de67df0d6b82bed563a3437dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d88cda088783c3751074d2debaf6bb1ca542c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d88cda088783c3751074d2debaf6bb1ca542c3", "html_url": "https://github.com/rust-lang/rust/commit/06d88cda088783c3751074d2debaf6bb1ca542c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d88cda088783c3751074d2debaf6bb1ca542c3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5397247856d49d89712f9d0c208c1981e9b72d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5397247856d49d89712f9d0c208c1981e9b72d", "html_url": "https://github.com/rust-lang/rust/commit/6c5397247856d49d89712f9d0c208c1981e9b72d"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "f43ac7ad0dd5a4afd5afab40ee23b21e4889cf72", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -25,7 +25,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     mutability,\n     ty,\n     name,\n-    syntactic_source_info,\n+    source_info,\n     visibility_scope,\n     internal,\n     is_user_variable"}, {"sha": "b2ff36cb87c78f8876a6613c5e5038ecaa39b777", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -556,7 +556,7 @@ pub struct LocalDecl<'tcx> {\n     /// `drop(x)`, we want it to refer to `x: u32`.\n     ///\n     /// To allow both uses to work, we need to have more than a single scope\n-    /// for a local. We have the `syntactic_source_info.scope` represent the\n+    /// for a local. We have the `source_info.scope` represent the\n     /// \"syntactic\" lint scope (with a variable being under its let\n     /// block) while the `visibility_scope` represents the \"local variable\"\n     /// scope (where the \"rest\" of a block is under all prior let-statements).\n@@ -570,10 +570,10 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502{ #[allow(unused_mut] } // this is actually split into 2 scopes\n     ///  \u2502 \u2502                        // in practice because I'm lazy.\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502\u2190 x.syntactic_source_info.scope\n+    ///  \u2502 \u2502\u2190 x.source_info.scope\n     ///  \u2502 \u2502\u2190 `x.parse().unwrap()`\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.syntactic_source_info.scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.source_info.scope\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502 \u2502{ let y: u32 }\n     ///  \u2502 \u2502 \u2502\n@@ -584,10 +584,10 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502\u2190 x.visibility_scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n     /// ```\n-    pub syntactic_source_info: SourceInfo,\n+    pub source_info: SourceInfo,\n \n     /// Source scope within which the local is visible (for debuginfo)\n-    /// (see `syntactic_source_info` for more details).\n+    /// (see `source_info` for more details).\n     pub visibility_scope: SourceScope,\n }\n \n@@ -599,7 +599,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty,\n             name: None,\n-            syntactic_source_info: SourceInfo {\n+            source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -616,7 +616,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty,\n             name: None,\n-            syntactic_source_info: SourceInfo {\n+            source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -634,7 +634,7 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n-            syntactic_source_info: SourceInfo {\n+            source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -2191,7 +2191,7 @@ BraceStructTypeFoldableImpl! {\n         internal,\n         ty,\n         name,\n-        syntactic_source_info,\n+        source_info,\n         visibility_scope,\n     }\n }"}, {"sha": "758d887cd7b3ef59730f278a56c7007575ee9b65", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -714,17 +714,17 @@ macro_rules! make_mir_visitor {\n                     mutability: _,\n                     ref $($mutability)* ty,\n                     name: _,\n-                    ref $($mutability)* syntactic_source_info,\n+                    ref $($mutability)* source_info,\n                     ref $($mutability)* visibility_scope,\n                     internal: _,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty, TyContext::LocalDecl {\n                     local,\n-                    source_info: *syntactic_source_info,\n+                    source_info: *source_info,\n                 });\n-                self.visit_source_info(syntactic_source_info);\n+                self.visit_source_info(source_info);\n                 self.visit_source_scope(visibility_scope);\n             }\n "}, {"sha": "f9be91b4f3f13d93d2ae1ad16f66b31c1e03cbc0", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -277,7 +277,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n                 let place = PlaceRef::alloca(&bx, layout, &name.as_str());\n                 if dbg {\n                     let (scope, span) = fx.debug_loc(mir::SourceInfo {\n-                        span: decl.syntactic_source_info.span,\n+                        span: decl.source_info.span,\n                         scope: decl.visibility_scope,\n                     });\n                     declare_local(&bx, &fx.debug_context, name, layout.ty, scope,"}, {"sha": "9061af1b68ca4717c9f4c562d22da3b79fb45013", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -398,7 +398,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let borrow_span = self.mir.source_info(borrow.reserve_location).span;\n         let proper_span = match *root_place {\n-            Place::Local(local) => self.mir.local_decls[local].syntactic_source_info.span,\n+            Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => drop_span,\n         };\n "}, {"sha": "5efbdeafd1bbfe3144065b41dc8afb31e5dbc160", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -306,12 +306,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                 None => continue,\n             }\n \n-            let span = local_decl.syntactic_source_info.span;\n+            let span = local_decl.source_info.span;\n             let mut_span = tcx.sess.codemap().span_until_non_whitespace(span);\n \n             tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n-                vsi[local_decl.syntactic_source_info.scope].lint_root,\n+                vsi[local_decl.source_info.scope].lint_root,\n                 span,\n                 \"variable does not need to be mutable\"\n             )"}, {"sha": "2807a4e8857e0b91421dbf09506b2598f16fb48a", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                             None => {\n                                 err.span_label(\n-                                    mir.local_decls[local].syntactic_source_info.span,\n+                                    mir.local_decls[local].source_info.span,\n                                     \"borrow may end up in a temporary, created here\",\n                                 );\n "}, {"sha": "04f5024b76946602cd2341f393ac30ba921fe7eb", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -1201,7 +1201,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        let span = local_decl.syntactic_source_info.span;\n+        let span = local_decl.source_info.span;\n         let ty = local_decl.ty;\n \n         // Erase the regions from `ty` to get a global type.  The"}, {"sha": "fbd771fbe500d7eb8fab1b18401ad1873a271d2a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         mutability: Mutability::Mut,\n                         ty: ptr_ty,\n                         name: None,\n-                        syntactic_source_info: source_info,\n+                        source_info,\n                         visibility_scope: source_info.scope,\n                         internal: true,\n                         is_user_variable: false"}, {"sha": "062a48a8c434d02e5029eedadb1cb1705ab884af", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -306,26 +306,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             -> Option<SourceScope> {\n         assert!(!(visibility_scope.is_some() && lint_level.is_explicit()),\n                 \"can't have both a visibility and a lint scope at the same time\");\n-        let mut syntactic_scope = self.source_scope;\n+        let mut scope = self.source_scope;\n         self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n             if visibility_scope.is_none() {\n                 visibility_scope = Some(this.new_source_scope(scope_span,\n                                                            LintLevel::Inherited,\n                                                            None));\n                 // If we have lints, create a new source scope\n                 // that marks the lints for the locals. See the comment\n-                // on the `syntactic_source_info` field for why this is needed.\n+                // on the `source_info` field for why this is needed.\n                 if lint_level.is_explicit() {\n-                    syntactic_scope =\n+                    scope =\n                         this.new_source_scope(scope_span, lint_level, None);\n                 }\n             }\n-            let syntactic_source_info = SourceInfo {\n+            let source_info = SourceInfo {\n                 span,\n-                scope: syntactic_scope,\n+                scope,\n             };\n             let visibility_scope = visibility_scope.unwrap();\n-            this.declare_binding(syntactic_source_info, visibility_scope, mutability, name, var,\n+            this.declare_binding(source_info, visibility_scope, mutability, name, var,\n                                  ty, has_guard);\n         });\n         visibility_scope\n@@ -1114,7 +1114,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// `&T`. The second local is a binding for occurrences of `var`\n     /// in the arm body, which will have type `T`.\n     fn declare_binding(&mut self,\n-                       syntactic_source_info: SourceInfo,\n+                       source_info: SourceInfo,\n                        visibility_scope: SourceScope,\n                        mutability: Mutability,\n                        name: Name,\n@@ -1123,15 +1123,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                        has_guard: ArmHasGuard)\n     {\n         debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_scope={:?}, \\\n-                syntactic_source_info={:?})\",\n-               var_id, name, var_ty, visibility_scope, syntactic_source_info);\n+                source_info={:?})\",\n+               var_id, name, var_ty, visibility_scope, source_info);\n \n         let tcx = self.hir.tcx();\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n-            syntactic_source_info,\n+            source_info,\n             visibility_scope,\n             internal: false,\n             is_user_variable: true,\n@@ -1143,7 +1143,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 mutability,\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n                 name: Some(name),\n-                syntactic_source_info,\n+                source_info,\n                 visibility_scope,\n                 internal: false,\n                 is_user_variable: true,"}, {"sha": "ca7a2daf39d2ecb9bef31b465c8710bc89aa3ec6", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -664,7 +664,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n-                syntactic_source_info: source_info,\n+                source_info,\n                 visibility_scope: source_info.scope,\n                 name,\n                 internal: false,"}, {"sha": "2ff22842141d9bfc806bff4ae7ca4b3f7f8b46c2", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     fn gather_args(&mut self) {\n         for arg in self.mir.args_iter() {\n             let path = self.data.rev_lookup.locals[arg];\n-            let span = self.mir.local_decls[arg].syntactic_source_info.span;\n+            let span = self.mir.local_decls[arg].source_info.span;\n \n             let init = self.data.inits.push(Init {\n                 path, span, kind: InitKind::Deep"}, {"sha": "d4a9b2cdd1fbf4022b819540a16387dca7211e8a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -141,7 +141,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability, ty, name: None,\n-        syntactic_source_info: source_info,\n+        source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false"}, {"sha": "fedd0774df44cb20595283d211f029877b0c2de4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         // Internal locals are used in the `move_val_init` desugaring.\n                         // We want to check unsafety against the source info of the\n                         // desugaring, rather than the source info of the RHS.\n-                        self.source_info = self.mir.local_decls[local].syntactic_source_info;\n+                        self.source_info = self.mir.local_decls[local].source_info;\n                     }\n                 }\n                 let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);"}, {"sha": "7ac3b7beb06d5358dc797eda9763208e3bc5d11a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -300,7 +300,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n         name: None,\n-        syntactic_source_info: source_info,\n+        source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n@@ -641,7 +641,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         mutability: Mutability::Mut,\n         ty: tcx.mk_nil(),\n         name: None,\n-        syntactic_source_info: source_info,\n+        source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n@@ -657,7 +657,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n             mutbl: hir::Mutability::MutMutable,\n         }),\n         name: None,\n-        syntactic_source_info: source_info,\n+        source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,"}, {"sha": "a1845f7ef268cd15a0b304c1ca67d1ad5cd092af", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -398,9 +398,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 for loc in callee_mir.vars_and_temps_iter() {\n                     let mut local = callee_mir.local_decls[loc].clone();\n \n-                    local.syntactic_source_info.scope =\n-                        scope_map[local.syntactic_source_info.scope];\n-                    local.syntactic_source_info.span = callsite.location.span;\n+                    local.source_info.scope =\n+                        scope_map[local.source_info.scope];\n+                    local.source_info.span = callsite.location.span;\n                     local.visibility_scope = scope_map[local.visibility_scope];\n \n                     let idx = caller_mir.local_decls.push(local);"}, {"sha": "8dc6539b65d6a8178ec2f1d8074991fc7522bae8", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let no_stmts = self.source[loc.block].statements.len();\n         let new_temp = self.promoted.local_decls.push(\n             LocalDecl::new_temp(self.source.local_decls[temp].ty,\n-                                self.source.local_decls[temp].syntactic_source_info.span));\n+                                self.source.local_decls[temp].source_info.span));\n \n         debug!(\"promote({:?} @ {:?}/{:?}, {:?})\",\n                temp, loc, no_stmts, self.keep_original);\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // This is because `*r` requires `r` to be a local,\n                             // otherwise we would use the `promoted` directly.\n                             let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n-                            promoted_ref.syntactic_source_info = statement.source_info;\n+                            promoted_ref.source_info = statement.source_info;\n                             promoted_ref.visibility_scope = statement.source_info.scope;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);"}, {"sha": "719630129440a6defacbbe1cc3928914cb937e92", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -1046,7 +1046,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n                     if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n-                        Some(self.mir.local_decls[local].syntactic_source_info.span)\n+                        Some(self.mir.local_decls[local].source_info.span)\n                     } else {\n                         None\n                     }\n@@ -1102,7 +1102,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     let mut err = feature_err(\n                         &self.tcx.sess.parse_sess,\n                         \"const_let\",\n-                        decl.syntactic_source_info.span,\n+                        decl.source_info.span,\n                         GateIssue::Language,\n                         \"arguments of constant functions can only be immutable by-value bindings\"\n                     );"}, {"sha": "8176c644dd7457b392b1fd07a62af275cd304e24", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d88cda088783c3751074d2debaf6bb1ca542c3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=06d88cda088783c3751074d2debaf6bb1ca542c3", "patch": "@@ -467,8 +467,8 @@ fn write_scope_tree(\n         // User variable types (including the user's name in a comment).\n         for local in mir.vars_iter() {\n             let var = &mir.local_decls[local];\n-            let (name, source_info) = if var.syntactic_source_info.scope == child {\n-                (var.name.unwrap(), var.syntactic_source_info)\n+            let (name, source_info) = if var.source_info.scope == child {\n+                (var.name.unwrap(), var.source_info)\n             } else {\n                 // Not a variable or not declared in this scope.\n                 continue;"}]}