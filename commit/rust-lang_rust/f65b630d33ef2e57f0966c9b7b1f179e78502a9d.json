{"sha": "f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWI2MzBkMzNlZjJlNTdmMDk2NmM5YjdiMWYxNzllNzg1MDJhOWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-10-23T00:04:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T00:10:07Z"}, "message": "constify parts of libstd.", "tree": {"sha": "ea421979aa80d87b2bf353247f29191c05754721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea421979aa80d87b2bf353247f29191c05754721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "html_url": "https://github.com/rust-lang/rust/commit/f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061d345c1657a86a9d94e90f916a0be8c966d062", "url": "https://api.github.com/repos/rust-lang/rust/commits/061d345c1657a86a9d94e90f916a0be8c966d062", "html_url": "https://github.com/rust-lang/rust/commit/061d345c1657a86a9d94e90f916a0be8c966d062"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": null, "filename": "src/libcore/time.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d"}, {"sha": "b95449d11eac372900526e1d758506f47402e6aa", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -36,7 +36,7 @@ struct DefaultResizePolicy;\n \n impl DefaultResizePolicy {\n     #[inline]\n-    fn new() -> DefaultResizePolicy {\n+    const fn new() -> DefaultResizePolicy {\n         DefaultResizePolicy\n     }\n \n@@ -69,7 +69,7 @@ impl DefaultResizePolicy {\n \n     /// The capacity of the given raw capacity.\n     #[inline]\n-    fn capacity(&self, raw_cap: usize) -> usize {\n+    const fn capacity(&self, raw_cap: usize) -> usize {\n         // This doesn't have to be checked for overflow since allocation size\n         // in bytes will overflow earlier than multiplication by 10.\n         //\n@@ -3013,7 +3013,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     /// assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n     /// ```\n     #[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]\n-    pub fn key(&self) -> &K {\n+    pub const fn key(&self) -> &K {\n         &self.key\n     }\n "}, {"sha": "0df20395b012b36669da69fe570f971b09a4f163", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -247,7 +247,7 @@ impl<K, V> RawBucket<K, V> {\n // Buckets hold references to the table.\n impl<K, V, M> FullBucket<K, V, M> {\n     /// Borrow a reference to the table.\n-    pub fn table(&self) -> &M {\n+    pub const fn table(&self) -> &M {\n         &self.table\n     }\n     /// Borrow a mutable reference to the table.\n@@ -259,18 +259,18 @@ impl<K, V, M> FullBucket<K, V, M> {\n         self.table\n     }\n     /// Get the raw index.\n-    pub fn index(&self) -> usize {\n+    pub const fn index(&self) -> usize {\n         self.raw.idx\n     }\n     /// Get the raw bucket.\n-    pub fn raw(&self) -> RawBucket<K, V> {\n+    pub const fn raw(&self) -> RawBucket<K, V> {\n         self.raw\n     }\n }\n \n impl<K, V, M> EmptyBucket<K, V, M> {\n     /// Borrow a reference to the table.\n-    pub fn table(&self) -> &M {\n+    pub const fn table(&self) -> &M {\n         &self.table\n     }\n     /// Borrow a mutable reference to the table.\n@@ -281,7 +281,7 @@ impl<K, V, M> EmptyBucket<K, V, M> {\n \n impl<K, V, M> Bucket<K, V, M> {\n     /// Get the raw index.\n-    pub fn index(&self) -> usize {\n+    pub const fn index(&self) -> usize {\n         self.raw.idx\n     }\n     /// get the table.\n@@ -772,7 +772,7 @@ impl<K, V> RawTable<K, V> {\n \n     /// The number of elements ever `put` in the hashtable, minus the number\n     /// of elements ever `take`n.\n-    pub fn size(&self) -> usize {\n+    pub const fn size(&self) -> usize {\n         self.size\n     }\n "}, {"sha": "feff65bff3f2acbed7b75be49cbbb422425569aa", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -265,12 +265,12 @@ enum FromBytesWithNulErrorKind {\n }\n \n impl FromBytesWithNulError {\n-    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+    const fn interior_nul(pos: usize) -> FromBytesWithNulError {\n         FromBytesWithNulError {\n             kind: FromBytesWithNulErrorKind::InteriorNul(pos),\n         }\n     }\n-    fn not_nul_terminated() -> FromBytesWithNulError {\n+    const fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError {\n             kind: FromBytesWithNulErrorKind::NotNulTerminated,\n         }\n@@ -833,7 +833,7 @@ impl NulError {\n     /// assert_eq!(nul_error.nul_position(), 7);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn nul_position(&self) -> usize { self.0 }\n+    pub const fn nul_position(&self) -> usize { self.0 }\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n@@ -909,7 +909,7 @@ impl IntoStringError {\n \n     /// Access the underlying UTF-8 error that was the cause of this error.\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n-    pub fn utf8_error(&self) -> Utf8Error {\n+    pub const fn utf8_error(&self) -> Utf8Error {\n         self.error\n     }\n }\n@@ -1091,7 +1091,7 @@ impl CStr {\n     /// [`CString`]: struct.CString.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_ptr(&self) -> *const c_char {\n+    pub const fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()\n     }\n "}, {"sha": "bde9c57c57cc547e461b9c7921630bca69af76b6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -633,7 +633,7 @@ impl<W> IntoInnerError<W> {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn error(&self) -> &Error { &self.1 }\n+    pub const fn error(&self) -> &Error { &self.1 }\n \n     /// Returns the buffered writer instance which generated the error.\n     ///"}, {"sha": "05bee19c93f545ae179fa30274338ad5ce9dcbce", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -104,7 +104,7 @@ impl<T> Cursor<T> {\n     /// # force_inference(&buff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(inner: T) -> Cursor<T> {\n+    pub const fn new(inner: T) -> Cursor<T> {\n         Cursor { pos: 0, inner: inner }\n     }\n \n@@ -138,7 +138,7 @@ impl<T> Cursor<T> {\n     /// let reference = buff.get_ref();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get_ref(&self) -> &T { &self.inner }\n+    pub const fn get_ref(&self) -> &T { &self.inner }\n \n     /// Gets a mutable reference to the underlying value in this cursor.\n     ///\n@@ -179,7 +179,7 @@ impl<T> Cursor<T> {\n     /// assert_eq!(buff.position(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn position(&self) -> u64 { self.pos }\n+    pub const fn position(&self) -> u64 { self.pos }\n \n     /// Sets the position of this cursor.\n     ///"}, {"sha": "4c3117260feebe2456346cb827fa301cbb72164a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -885,7 +885,7 @@ impl Initializer {\n     /// Returns a new `Initializer` which will zero out buffers.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n     #[inline]\n-    pub fn zeroing() -> Initializer {\n+    pub const fn zeroing() -> Initializer {\n         Initializer(true)\n     }\n \n@@ -906,7 +906,7 @@ impl Initializer {\n     /// Indicates if a buffer should be initialized.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n     #[inline]\n-    pub fn should_initialize(&self) -> bool {\n+    pub const fn should_initialize(&self) -> bool {\n         self.0\n     }\n \n@@ -1653,7 +1653,7 @@ impl<T, U> Chain<T, U> {\n     /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n-    pub fn get_ref(&self) -> (&T, &U) {\n+    pub const fn get_ref(&self) -> (&T, &U) {\n         (&self.first, &self.second)\n     }\n \n@@ -1780,7 +1780,7 @@ impl<T> Take<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn limit(&self) -> u64 { self.limit }\n+    pub const fn limit(&self) -> u64 { self.limit }\n \n     /// Sets the number of bytes that can be read before this instance will\n     /// return EOF. This is the same as constructing a new `Take` instance, so\n@@ -1856,7 +1856,7 @@ impl<T> Take<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n-    pub fn get_ref(&self) -> &T {\n+    pub const fn get_ref(&self) -> &T {\n         &self.inner\n     }\n "}, {"sha": "d0db4cfc704bea757c7b5492dd99a9c9639a3724", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -99,7 +99,7 @@ pub struct Empty { _priv: () }\n /// assert!(buffer.is_empty());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn empty() -> Empty { Empty { _priv: () } }\n+pub const fn empty() -> Empty { Empty { _priv: () } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Empty {\n@@ -199,7 +199,7 @@ pub struct Sink { _priv: () }\n /// assert_eq!(num_bytes, 5);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sink() -> Sink { Sink { _priv: () } }\n+pub const fn sink() -> Sink { Sink { _priv: () } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Sink {"}, {"sha": "fc2e8104782638156e05b23a44f51a77873603b0", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -475,7 +475,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn flowinfo(&self) -> u32 {\n+    pub const fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n@@ -515,7 +515,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn scope_id(&self) -> u32 {\n+    pub const fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n "}, {"sha": "c5106c9abb9b4588c20884b6bbc02e435af44e20", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -402,7 +402,7 @@ impl Ipv4Addr {\n     /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn octets(&self) -> [u8; 4] {\n+    pub  fn octets(&self) -> [u8; 4] {\n         let bits = u32::from_be(self.inner.s_addr);\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }\n@@ -424,7 +424,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_unspecified(&self) -> bool {\n+    pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n \n@@ -862,7 +862,6 @@ impl Ipv6Addr {\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_ip\")]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16,\n                      g: u16, h: u16) -> Ipv6Addr {\n         Ipv6Addr {\n@@ -1224,7 +1223,7 @@ impl Ipv6Addr {\n     ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n     /// ```\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n-    pub fn octets(&self) -> [u8; 16] {\n+    pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }\n }"}, {"sha": "71f39ff85e71ae39c28db1b17ae21f6cfce2cca0", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -439,15 +439,15 @@ impl<'a> PrefixComponent<'a> {\n     ///\n     /// [`Prefix`]: enum.Prefix.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn kind(&self) -> Prefix<'a> {\n+    pub const fn kind(&self) -> Prefix<'a> {\n         self.parsed\n     }\n \n     /// Returns the raw [`OsStr`] slice for this prefix.\n     ///\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_os_str(&self) -> &'a OsStr {\n+    pub const fn as_os_str(&self) -> &'a OsStr {\n         self.raw\n     }\n }\n@@ -1918,7 +1918,7 @@ impl Path {\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [`parent`]: struct.Path.html#method.parent\n     #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n-    pub fn ancestors(&self) -> Ancestors {\n+    pub const fn ancestors(&self) -> Ancestors {\n         Ancestors {\n             next: Some(&self),\n         }\n@@ -2267,7 +2267,7 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn display(&self) -> Display {\n+    pub const fn display(&self) -> Display {\n         Display { path: self }\n     }\n "}, {"sha": "d5047ef6ad728498cf295e413a5f3cfbd8f2f060", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -926,7 +926,7 @@ impl Stdio {\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }\n+    pub const fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }\n \n     /// The child inherits from the corresponding parent descriptor.\n     ///\n@@ -961,7 +961,7 @@ impl Stdio {\n     /// println!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn inherit() -> Stdio { Stdio(imp::Stdio::Inherit) }\n+    pub const fn inherit() -> Stdio { Stdio(imp::Stdio::Inherit) }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n@@ -998,7 +998,7 @@ impl Stdio {\n     /// // Ignores any piped-in input\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn null() -> Stdio { Stdio(imp::Stdio::Null) }\n+    pub const fn null() -> Stdio { Stdio(imp::Stdio::Null) }\n }\n \n impl FromInner<imp::Stdio> for Stdio {"}, {"sha": "1c6cc9cb361e5a866f6ccd4387b6d36842243a11", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -72,7 +72,7 @@ impl WaitTimeoutResult {\n     /// }\n     /// ```\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n-    pub fn timed_out(&self) -> bool {\n+    pub const fn timed_out(&self) -> bool {\n         self.0\n     }\n }"}, {"sha": "2a2e5c030b32fe80d7fc017418714a1f97825b9d", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -785,7 +785,7 @@ pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n ////////////////////////////////////////////////////////////////////////////////\n \n impl<T> Sender<T> {\n-    fn new(inner: Flavor<T>) -> Sender<T> {\n+    const fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n         }\n@@ -1469,7 +1469,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub const fn iter(&self) -> Iter<T> {\n         Iter { rx: self }\n     }\n \n@@ -1512,7 +1512,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n-    pub fn try_iter(&self) -> TryIter<T> {\n+    pub const fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }\n     }\n "}, {"sha": "273644cb902db6e70897eea8edd66cb06a886214", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -89,7 +89,7 @@ enum MyUpgrade<T> {\n }\n \n impl<T> Packet<T> {\n-    pub fn new() -> Packet<T> {\n+    pub const fn new() -> Packet<T> {\n         Packet {\n             data: UnsafeCell::new(None),\n             upgrade: UnsafeCell::new(NothingSent),"}, {"sha": "4dd37ec387884389f12a6f7da07712049e9327fb", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -517,7 +517,7 @@ impl OnceState {\n     ///     assert!(!state.poisoned());\n     /// });\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n-    pub fn poisoned(&self) -> bool {\n+    pub const fn poisoned(&self) -> bool {\n         self.poisoned\n     }\n }"}, {"sha": "dc9edb306de0d74b942bfcf67b8da8f7cf87dd67", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -80,7 +80,7 @@ impl Mutex {\n }\n \n // not meant to be exported to the outside world, just the containing module\n-pub fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n+pub const fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n \n #[must_use]\n /// A simple RAII utility for the above Mutex without the poisoning semantics."}, {"sha": "f58c26ef4280a897529909a16cc7cb7b276eabc5", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -199,7 +199,7 @@ impl TcpStream {\n         Ok(TcpStream { inner: sock })\n     }\n \n-    pub fn socket(&self) -> &Socket { &self.inner }\n+    pub const fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n@@ -339,7 +339,7 @@ impl TcpListener {\n         Ok(TcpListener { inner: sock })\n     }\n \n-    pub fn socket(&self) -> &Socket { &self.inner }\n+    pub const fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n@@ -427,7 +427,7 @@ impl UdpSocket {\n         Ok(UdpSocket { inner: sock })\n     }\n \n-    pub fn socket(&self) -> &Socket { &self.inner }\n+    pub const fn socket(&self) -> &Socket { &self.inner }\n \n     pub fn into_socket(self) -> Socket { self.inner }\n "}, {"sha": "5f6747a1224aeca2fcd0f3c1ded6644ea7de563c", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -85,13 +85,13 @@ impl CodePoint {\n     ///\n     /// Since all Unicode scalar values are code points, this always succeeds.\n     #[inline]\n-    pub fn from_char(value: char) -> CodePoint {\n+    pub const fn from_char(value: char) -> CodePoint {\n         CodePoint { value: value as u32 }\n     }\n \n     /// Returns the numeric value of the code point.\n     #[inline]\n-    pub fn to_u32(&self) -> u32 {\n+    pub const fn to_u32(&self) -> u32 {\n         self.value\n     }\n "}, {"sha": "3a3d2450014c1686758e3788c5833d5691ef437a", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -286,7 +286,7 @@ impl Builder {\n     /// handler.join().unwrap();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> Builder {\n+    pub const fn new() -> Builder {\n         Builder {\n             name: None,\n             stack_size: None,\n@@ -1391,7 +1391,7 @@ impl<T> JoinHandle<T> {\n     /// println!(\"thread id: {:?}\", thread.id());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn thread(&self) -> &Thread {\n+    pub const fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n "}, {"sha": "a9344941f4218d34f466b27559a9582b9dffbfa0", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b630d33ef2e57f0966c9b7b1f179e78502a9d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=f65b630d33ef2e57f0966c9b7b1f179e78502a9d", "patch": "@@ -449,7 +449,7 @@ impl SystemTimeError {\n     /// }\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n-    pub fn duration(&self) -> Duration {\n+    pub const fn duration(&self) -> Duration {\n         self.0\n     }\n }"}]}