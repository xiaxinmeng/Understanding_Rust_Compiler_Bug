{"sha": "41647613b1a69e7df7490d23fee2823da249cda4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjQ3NjEzYjFhNjllN2RmNzQ5MGQyM2ZlZTI4MjNkYTI0OWNkYTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T14:16:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-23T14:16:29Z"}, "message": "Rollup merge of #67538 - varkor:lhs-assign-diagnostics, r=Centril\n\nImprove diagnostics for invalid assignment\n\n- Improve wording and span information for invalid assignment diagnostics.\n- Link to https://github.com/rust-lang/rfcs/issues/372 when it appears the user is trying a destructuring assignment.\n- Make the equality constraint in `where` clauses error consistent with the invalid assignment error.", "tree": {"sha": "3cbd0c9868d8e99dc6a3af9134e70523fb49d2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cbd0c9868d8e99dc6a3af9134e70523fb49d2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41647613b1a69e7df7490d23fee2823da249cda4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeAMw9CRBK7hj4Ov3rIwAAdHIIAEffdq7xDn3LuhXhq7eRnyPN\n292aBmL0lBGA08mLMwwHqPZL5u/kXYXEngMd4Lvo4JuYQCg0dhZ3e5W1COjsi5ns\nxhjU/uexdpRGYTQknC7rUCHagpBIdKl9Ip3wWsN75p5yy5FaYyGrtjFsiOMK3e1e\nQk3isvL5EV2TkM1M5GC5sbGJxak7+tgasODFY3xhm47TWYDjOsLCnt74JiqUE49V\nrE+e/Dgk9+aWDferQyH2Om3F5PBxUot8vfc7nfyttDCWEjQ7ZeLpX0qRCRa89MTS\n8M99r0BFhkh2k5STLTxtGg2cmIX4RKnQ47/PmPytRZoG9bCp483do/U9RciGjW8=\n=PwHW\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cbd0c9868d8e99dc6a3af9134e70523fb49d2a5\nparent 3a07f3ba75d2f0a180be44915df2c929966d39cd\nparent 9e5081394cac4429de287e6c10b350f698a97f65\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577110589 +0100\ncommitter GitHub <noreply@github.com> 1577110589 +0100\n\nRollup merge of #67538 - varkor:lhs-assign-diagnostics, r=Centril\n\nImprove diagnostics for invalid assignment\n\n- Improve wording and span information for invalid assignment diagnostics.\n- Link to https://github.com/rust-lang/rfcs/issues/372 when it appears the user is trying a destructuring assignment.\n- Make the equality constraint in `where` clauses error consistent with the invalid assignment error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41647613b1a69e7df7490d23fee2823da249cda4", "html_url": "https://github.com/rust-lang/rust/commit/41647613b1a69e7df7490d23fee2823da249cda4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41647613b1a69e7df7490d23fee2823da249cda4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a07f3ba75d2f0a180be44915df2c929966d39cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a07f3ba75d2f0a180be44915df2c929966d39cd", "html_url": "https://github.com/rust-lang/rust/commit/3a07f3ba75d2f0a180be44915df2c929966d39cd"}, {"sha": "9e5081394cac4429de287e6c10b350f698a97f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5081394cac4429de287e6c10b350f698a97f65", "html_url": "https://github.com/rust-lang/rust/commit/9e5081394cac4429de287e6c10b350f698a97f65"}], "stats": {"total": 446, "additions": 341, "deletions": 105}, "files": [{"sha": "a7a8673d49eb1d020796907592ea9ce0be2299c8", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1043,9 +1043,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n-            visitor.visit_expr(right_hand_expression);\n-            visitor.visit_expr(left_hand_expression)\n+        ExprKind::Assign(ref lhs, ref rhs, _) => {\n+            visitor.visit_expr(rhs);\n+            visitor.visit_expr(lhs)\n         }\n         ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(right_expression);"}, {"sha": "8311b9168e4553b0c6ac84381c7903ac1599b469", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -122,8 +122,8 @@ impl LoweringContext<'_, '_> {\n                 self.lower_block(blk, opt_label.is_some()),\n                 self.lower_label(opt_label),\n             ),\n-            ExprKind::Assign(ref el, ref er) => {\n-                hir::ExprKind::Assign(P(self.lower_expr(el)), P(self.lower_expr(er)))\n+            ExprKind::Assign(ref el, ref er, span) => {\n+                hir::ExprKind::Assign(P(self.lower_expr(el)), P(self.lower_expr(er)), span)\n             }\n             ExprKind::AssignOp(op, ref el, ref er) => hir::ExprKind::AssignOp(\n                 self.lower_binop(op),\n@@ -994,8 +994,11 @@ impl LoweringContext<'_, '_> {\n             let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n             let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_hid));\n             let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_hid));\n-            let assign =\n-                P(self.expr(pat.span, hir::ExprKind::Assign(next_expr, val_expr), ThinVec::new()));\n+            let assign = P(self.expr(\n+                pat.span,\n+                hir::ExprKind::Assign(next_expr, val_expr, pat.span),\n+                ThinVec::new(),\n+            ));\n             let some_pat = self.pat_some(pat.span, val_pat);\n             self.arm(some_pat, assign)\n         };"}, {"sha": "bf95324d776dc12fe0d87b1368781237f3b0eeb6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1690,7 +1690,8 @@ pub enum ExprKind {\n     Block(P<Block>, Option<Label>),\n \n     /// An assignment (e.g., `a = foo()`).\n-    Assign(P<Expr>, P<Expr>),\n+    /// The `Span` argument is the span of the `=` token.\n+    Assign(P<Expr>, P<Expr>, Span),\n     /// An assignment with an operator.\n     ///\n     /// E.g., `a += 1`."}, {"sha": "2f3b6f82ee5ee206e22cf3b2a3453c26fefd7668", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1289,7 +1289,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block(&blk);\n             }\n-            hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+            hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 let prec = AssocOp::Assign.precedence() as i8;\n                 self.print_expr_maybe_paren(&lhs, prec + 1);\n                 self.s.space();\n@@ -2265,7 +2265,7 @@ fn contains_exterior_struct_lit(value: &hir::Expr) -> bool {\n     match value.kind {\n         hir::ExprKind::Struct(..) => true,\n \n-        hir::ExprKind::Assign(ref lhs, ref rhs)\n+        hir::ExprKind::Assign(ref lhs, ref rhs, _)\n         | hir::ExprKind::AssignOp(_, ref lhs, ref rhs)\n         | hir::ExprKind::Binary(_, ref lhs, ref rhs) => {\n             // `X { y: 1 } + X { y: 2 }`"}, {"sha": "5f57aabe8d426bc53e9ea28d88d44c2235d3a85a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -490,7 +490,7 @@ impl EarlyLintPass for UnusedParens {\n                 (value, \"`return` value\", false, Some(left), None)\n             }\n \n-            Assign(_, ref value) => (value, \"assigned value\", false, None, None),\n+            Assign(_, ref value, _) => (value, \"assigned value\", false, None, None),\n             AssignOp(.., ref value) => (value, \"assigned value\", false, None, None),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {"}, {"sha": "b5cd24bebc33ab2921f369fe710a0aa4deb122e5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -227,7 +227,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr\n \n         hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: &blk },\n \n-        hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+        hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             ExprKind::Assign { lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n         }\n "}, {"sha": "e0eb841f2c0cfd17e99417446125d2fc05b956e0", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -281,7 +281,9 @@ impl<'a> Parser<'a> {\n                     let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);\n                     self.mk_expr(span, binary, AttrVec::new())\n                 }\n-                AssocOp::Assign => self.mk_expr(span, ExprKind::Assign(lhs, rhs), AttrVec::new()),\n+                AssocOp::Assign => {\n+                    self.mk_expr(span, ExprKind::Assign(lhs, rhs, cur_op_span), AttrVec::new())\n+                }\n                 AssocOp::AssignOp(k) => {\n                     let aop = match k {\n                         token::Plus => BinOpKind::Add,"}, {"sha": "1d5e65c6d27cd39f35cbc918339bdf0248b90105", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -737,8 +737,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n                 self.err_handler()\n-                    .span_err(predicate.span, \"equality constraints are not yet \\\n-                                               supported in where clauses (see #20041)\");\n+                    .struct_span_err(\n+                        predicate.span,\n+                        \"equality constraints are not yet supported in `where` clauses\",\n+                    )\n+                    .note(\n+                        \"for more information, see https://github.com/rust-lang/rust/issues/20041\",\n+                    )\n+                    .emit();\n             }\n         }\n "}, {"sha": "1a8abeb7abcdc34a310ea7fee43380b423b45942", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     .unwrap_or_else(|| span_bug!(expr.span, \"continue to unknown label\"))\n             }\n \n-            hir::ExprKind::Assign(ref l, ref r) => {\n+            hir::ExprKind::Assign(ref l, ref r, _) => {\n                 // see comment on places in\n                 // propagate_through_place_components()\n                 let succ = self.write_place(&l, succ, ACC_WRITE);\n@@ -1373,7 +1373,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n \n fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr) {\n     match expr.kind {\n-        hir::ExprKind::Assign(ref l, _) => {\n+        hir::ExprKind::Assign(ref l, ..) => {\n             this.check_place(&l);\n         }\n "}, {"sha": "cdfcb8090e65ee2318832935492e5031e7c84f56", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1251,7 +1251,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             return;\n         }\n         match expr.kind {\n-            hir::ExprKind::Assign(.., ref rhs) | hir::ExprKind::Match(ref rhs, ..) => {\n+            hir::ExprKind::Assign(_, ref rhs, _) | hir::ExprKind::Match(ref rhs, ..) => {\n                 // Do not report duplicate errors for `x = y` and `match x { ... }`.\n                 if self.check_expr_pat_type(rhs.hir_id, rhs.span) {\n                     return;"}, {"sha": "9a14b75ca2f4dc4ec66be06434e117e04ba1efe4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -490,7 +490,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             String::new()\n                         };\n                         if let Some(hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Assign(left_expr, _),\n+                            kind: hir::ExprKind::Assign(left_expr, ..),\n                             ..\n                         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n                         {"}, {"sha": "5c602ad76cd32d05090fdd36e54d31f0f5bf6239", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -17,7 +17,7 @@ use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n \n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::DefId;\n@@ -219,6 +219,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Box(ref subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, ref lhs, ref rhs) => self.check_binop(expr, op, lhs, rhs),\n+            ExprKind::Assign(ref lhs, ref rhs, ref span) => {\n+                self.check_expr_assign(expr, expected, lhs, rhs, span)\n+            }\n             ExprKind::AssignOp(op, ref lhs, ref rhs) => self.check_binop_assign(expr, op, lhs, rhs),\n             ExprKind::Unary(unop, ref oprnd) => {\n                 self.check_expr_unary(unop, oprnd, expected, needs, expr)\n@@ -245,7 +248,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),\n-            ExprKind::Assign(ref lhs, ref rhs) => self.check_expr_assign(expr, expected, lhs, rhs),\n             ExprKind::Loop(ref body, _, source) => {\n                 self.check_expr_loop(body, source, expected, expr)\n             }\n@@ -723,6 +725,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n     }\n \n+    fn is_destructuring_place_expr(&self, expr: &'tcx hir::Expr) -> bool {\n+        match &expr.kind {\n+            ExprKind::Array(comps) | ExprKind::Tup(comps) => {\n+                comps.iter().all(|e| self.is_destructuring_place_expr(e))\n+            }\n+            ExprKind::Struct(_path, fields, rest) => {\n+                rest.as_ref().map(|e| self.is_destructuring_place_expr(e)).unwrap_or(true)\n+                    && fields.iter().all(|f| self.is_destructuring_place_expr(&f.expr))\n+            }\n+            _ => expr.is_syntactic_place_expr(),\n+        }\n+    }\n+\n+    pub(crate) fn check_lhs_assignable(\n+        &self,\n+        lhs: &'tcx hir::Expr,\n+        err_code: &'static str,\n+        expr_span: &Span,\n+    ) {\n+        if !lhs.is_syntactic_place_expr() {\n+            let mut err = self.tcx.sess.struct_span_err_with_code(\n+                *expr_span,\n+                \"invalid left-hand side of assignment\",\n+                DiagnosticId::Error(err_code.into()),\n+            );\n+            err.span_label(lhs.span, \"cannot assign to this expression\");\n+            if self.is_destructuring_place_expr(lhs) {\n+                err.note(\"destructuring assignments are not currently supported\");\n+                err.note(\"for more information, see https://github.com/rust-lang/rfcs/issues/372\");\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     /// Type check assignment expression `expr` of form `lhs = rhs`.\n     /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n     fn check_expr_assign(\n@@ -731,6 +767,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         lhs: &'tcx hir::Expr,\n         rhs: &'tcx hir::Expr,\n+        span: &Span,\n     ) -> Ty<'tcx> {\n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n         let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty);\n@@ -752,10 +789,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.help(msg);\n             }\n             err.emit();\n-        } else if !lhs.is_syntactic_place_expr() {\n-            struct_span_err!(self.tcx.sess, expr.span, E0070, \"invalid left-hand side expression\")\n-                .span_label(expr.span, \"left-hand of expression not valid\")\n-                .emit();\n+        } else {\n+            self.check_lhs_assignable(lhs, \"E0070\", span);\n         }\n \n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);"}, {"sha": "c5d3aac136bcbd64ca94c84956b8ffd7fd139eec", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -19,30 +19,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr,\n         op: hir::BinOp,\n-        lhs_expr: &'tcx hir::Expr,\n-        rhs_expr: &'tcx hir::Expr,\n+        lhs: &'tcx hir::Expr,\n+        rhs: &'tcx hir::Expr,\n     ) -> Ty<'tcx> {\n         let (lhs_ty, rhs_ty, return_ty) =\n-            self.check_overloaded_binop(expr, lhs_expr, rhs_expr, op, IsAssign::Yes);\n+            self.check_overloaded_binop(expr, lhs, rhs, op, IsAssign::Yes);\n \n         let ty =\n             if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var() && is_builtin_binop(lhs_ty, rhs_ty, op) {\n-                self.enforce_builtin_binop_types(lhs_expr, lhs_ty, rhs_expr, rhs_ty, op);\n+                self.enforce_builtin_binop_types(lhs, lhs_ty, rhs, rhs_ty, op);\n                 self.tcx.mk_unit()\n             } else {\n                 return_ty\n             };\n \n-        if !lhs_expr.is_syntactic_place_expr() {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                lhs_expr.span,\n-                E0067,\n-                \"invalid left-hand side expression\"\n-            )\n-            .span_label(lhs_expr.span, \"invalid expression for left-hand side\")\n-            .emit();\n-        }\n+        self.check_lhs_assignable(lhs, \"E0067\", &op.span);\n+\n         ty\n     }\n "}, {"sha": "6c7e3658365a060e5989b8e0971826b5f3c3f017", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+            hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 self.mutate_expr(lhs);\n                 self.consume_expr(rhs);\n             }"}, {"sha": "c98942abaf3c2ae26ec390c1add4ca09d856acc9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1216,7 +1216,8 @@ pub enum ExprKind {\n     TryBlock(P<Block>),\n \n     /// An assignment (`a = foo()`).\n-    Assign(P<Expr>, P<Expr>),\n+    /// The `Span` argument is the span of the `=` token.\n+    Assign(P<Expr>, P<Expr>, Span),\n     /// An assignment with an operator.\n     ///\n     /// E.g., `a += 1`."}, {"sha": "f6817c713a4a66f20bf4690a8db3d217436f3cb8", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1168,7 +1168,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n             vis.visit_block(body);\n         }\n         ExprKind::Await(expr) => vis.visit_expr(expr),\n-        ExprKind::Assign(el, er) => {\n+        ExprKind::Assign(el, er, _) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);\n         }"}, {"sha": "b1b667f03bee2be489ebc4628e5cd0481161edc0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -2041,7 +2041,7 @@ impl<'a> State<'a> {\n                 self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n                 self.s.word(\".await\");\n             }\n-            ast::ExprKind::Assign(ref lhs, ref rhs) => {\n+            ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 let prec = AssocOp::Assign.precedence() as i8;\n                 self.print_expr_maybe_paren(lhs, prec + 1);\n                 self.s.space();"}, {"sha": "98af382efb0838672460775b8cc2a5b4c0ffb913", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -378,7 +378,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n     match value.kind {\n         ast::ExprKind::Struct(..) => true,\n \n-        ast::ExprKind::Assign(ref lhs, ref rhs)\n+        ast::ExprKind::Assign(ref lhs, ref rhs, _)\n         | ast::ExprKind::AssignOp(_, ref lhs, ref rhs)\n         | ast::ExprKind::Binary(_, ref lhs, ref rhs) => {\n             // X { y: 1 } + X { y: 2 }"}, {"sha": "fbc5d1332490fc8e70399201fe04bdb17341c84c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -766,9 +766,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_block(body);\n         }\n         ExprKind::Await(ref expr) => visitor.visit_expr(expr),\n-        ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n-            visitor.visit_expr(left_hand_expression);\n-            visitor.visit_expr(right_hand_expression);\n+        ExprKind::Assign(ref lhs, ref rhs, _) => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n         }\n         ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(left_expression);"}, {"sha": "36d47cea13b07cd4d2ff1d3cad2d0d32a853f0eb", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -126,8 +126,8 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                                           DUMMY_SP)));\n             },\n             12 => {\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x())));\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e)));\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x(), DUMMY_SP)));\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e, DUMMY_SP)));\n             },\n             13 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, Ident::from_str(\"f\"))));"}, {"sha": "d7cf1b77005145bd74e9ae31b847ebdcb1b5934a", "filename": "src/test/ui/bad/bad-expr-lhs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,10 +1,10 @@\n fn main() {\n-    1 = 2; //~ ERROR invalid left-hand side expression\n-    1 += 2; //~ ERROR invalid left-hand side expression\n-    (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n+    1 = 2; //~ ERROR invalid left-hand side of assignment\n+    1 += 2; //~ ERROR invalid left-hand side of assignment\n+    (1, 2) = (3, 4); //~ ERROR invalid left-hand side of assignment\n \n     let (a, b) = (1, 2);\n-    (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side of assignment\n \n-    None = Some(3); //~ ERROR invalid left-hand side expression\n+    None = Some(3); //~ ERROR invalid left-hand side of assignment\n }"}, {"sha": "a195e1054d099e7b4211df6e3be396951cdbbfbd", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,32 +1,45 @@\n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/bad-expr-lhs.rs:2:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/bad-expr-lhs.rs:2:7\n    |\n LL |     1 = 2;\n-   |     ^^^^^ left-hand of expression not valid\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n \n-error[E0067]: invalid left-hand side expression\n-  --> $DIR/bad-expr-lhs.rs:3:5\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/bad-expr-lhs.rs:3:7\n    |\n LL |     1 += 2;\n-   |     ^ invalid expression for left-hand side\n+   |     - ^^\n+   |     |\n+   |     cannot assign to this expression\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/bad-expr-lhs.rs:4:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/bad-expr-lhs.rs:4:12\n    |\n LL |     (1, 2) = (3, 4);\n-   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |     ------ ^\n+   |     |\n+   |     cannot assign to this expression\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/bad-expr-lhs.rs:7:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/bad-expr-lhs.rs:7:12\n    |\n LL |     (a, b) = (3, 4);\n-   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |     ------ ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/bad-expr-lhs.rs:9:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/bad-expr-lhs.rs:9:10\n    |\n LL |     None = Some(3);\n-   |     ^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |     ---- ^\n+   |     |\n+   |     cannot assign to this expression\n \n error: aborting due to 5 previous errors\n "}, {"sha": "876c9efea264782686750e125f0faece79496e1f", "filename": "src/test/ui/destructuring-assignment/note-unsupported.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -0,0 +1,25 @@\n+struct S { x: u8, y: u8 }\n+\n+fn main() {\n+    let (a, b) = (1, 2);\n+\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side of assignment\n+    (a, b) += (3, 4); //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    [a, b] = [3, 4]; //~ ERROR invalid left-hand side of assignment\n+    [a, b] += [3, 4]; //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    let s = S { x: 3, y: 4 };\n+\n+    S { x: a, y: b } = s; //~ ERROR invalid left-hand side of assignment\n+    S { x: a, y: b } += s; //~ ERROR invalid left-hand side of assignment\n+    //~^ ERROR binary assignment operation `+=` cannot be applied\n+\n+    S { x: a, ..s } = S { x: 3, y: 4 }; //~ ERROR invalid left-hand side of assignment\n+\n+    let c = 3;\n+\n+    ((a, b), c) = ((3, 4), 5); //~ ERROR invalid left-hand side of assignment\n+}"}, {"sha": "a6805c32a6e5275143676bfe02052c595578b714", "filename": "src/test/ui/destructuring-assignment/note-unsupported.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -0,0 +1,122 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:6:12\n+   |\n+LL |     (a, b) = (3, 4);\n+   |     ------ ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `({integer}, {integer})`\n+  --> $DIR/note-unsupported.rs:7:5\n+   |\n+LL |     (a, b) += (3, 4);\n+   |     ------^^^^^^^^^^\n+   |     |\n+   |     cannot use `+=` on type `({integer}, {integer})`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `({integer}, {integer})`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:7:12\n+   |\n+LL |     (a, b) += (3, 4);\n+   |     ------ ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:10:12\n+   |\n+LL |     [a, b] = [3, 4];\n+   |     ------ ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `[{integer}; 2]`\n+  --> $DIR/note-unsupported.rs:11:5\n+   |\n+LL |     [a, b] += [3, 4];\n+   |     ------^^^^^^^^^^\n+   |     |\n+   |     cannot use `+=` on type `[{integer}; 2]`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `[{integer}; 2]`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:11:12\n+   |\n+LL |     [a, b] += [3, 4];\n+   |     ------ ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:16:22\n+   |\n+LL |     S { x: a, y: b } = s;\n+   |     ---------------- ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `S`\n+  --> $DIR/note-unsupported.rs:17:5\n+   |\n+LL |     S { x: a, y: b } += s;\n+   |     ----------------^^^^^\n+   |     |\n+   |     cannot use `+=` on type `S`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `S`\n+\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:17:22\n+   |\n+LL |     S { x: a, y: b } += s;\n+   |     ---------------- ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:20:21\n+   |\n+LL |     S { x: a, ..s } = S { x: 3, y: 4 };\n+   |     --------------- ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/note-unsupported.rs:24:17\n+   |\n+LL |     ((a, b), c) = ((3, 4), 5);\n+   |     ----------- ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+   = note: destructuring assignments are not currently supported\n+   = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors have detailed explanations: E0067, E0070, E0368.\n+For more information about an error, try `rustc --explain E0067`."}, {"sha": "526503798b3d47d203fffa9b768b5b9301bf9bff", "filename": "src/test/ui/error-codes/E0067.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -8,11 +8,13 @@ LL |     LinkedList::new() += 1;\n    |\n    = note: an implementation of `std::ops::AddAssign` might be missing for `std::collections::LinkedList<_>`\n \n-error[E0067]: invalid left-hand side expression\n-  --> $DIR/E0067.rs:4:5\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/E0067.rs:4:23\n    |\n LL |     LinkedList::new() += 1;\n-   |     ^^^^^^^^^^^^^^^^^ invalid expression for left-hand side\n+   |     ----------------- ^^\n+   |     |\n+   |     cannot assign to this expression\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d809bb18dee16a0fc75d5fa86247711f6921eddb", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,26 +1,32 @@\n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/E0070.rs:6:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/E0070.rs:6:16\n    |\n LL |     SOME_CONST = 14;\n-   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |     ---------- ^\n+   |     |\n+   |     cannot assign to this expression\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/E0070.rs:7:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/E0070.rs:7:7\n    |\n LL |     1 = 3;\n-   |     ^^^^^ left-hand of expression not valid\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n \n error[E0308]: mismatched types\n   --> $DIR/E0070.rs:8:25\n    |\n LL |     some_other_func() = 4;\n    |                         ^ expected `()`, found integer\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/E0070.rs:8:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/E0070.rs:8:23\n    |\n LL |     some_other_func() = 4;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |     ----------------- ^\n+   |     |\n+   |     cannot assign to this expression\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fa53d55f5b3d7240b7dc9a97224ee00976c38c2c", "filename": "src/test/ui/issues/issue-13407.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -4,7 +4,7 @@ mod A {\n \n fn main() {\n     A::C = 1;\n-    //~^ ERROR: invalid left-hand side expression\n+    //~^ ERROR: invalid left-hand side of assignment\n     //~| ERROR: mismatched types\n     //~| ERROR: struct `C` is private\n }"}, {"sha": "b280de3158fede7567b64391c728f6464b685e13", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -10,11 +10,13 @@ error[E0308]: mismatched types\n LL |     A::C = 1;\n    |            ^ expected struct `A::C`, found integer\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/issue-13407.rs:6:5\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-13407.rs:6:10\n    |\n LL |     A::C = 1;\n-   |     ^^^^^^^^ left-hand of expression not valid\n+   |     ---- ^\n+   |     |\n+   |     cannot assign to this expression\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c838515caf997e6f6a8ba6ad2a06ea124256354a", "filename": "src/test/ui/issues/issue-26093.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,7 +1,9 @@\n macro_rules! not_a_place {\n     ($thing:expr) => {\n         $thing = 42;\n-        //~^ ERROR invalid left-hand side expression\n+        //~^ ERROR invalid left-hand side of assignment\n+        $thing += 42;\n+        //~^ ERROR invalid left-hand side of assignment\n     }\n }\n "}, {"sha": "c96228b518a853bf59eeebdeda607a447622ca04", "filename": "src/test/ui/issues/issue-26093.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,12 +1,28 @@\n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/issue-26093.rs:3:9\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-26093.rs:3:16\n    |\n LL |         $thing = 42;\n-   |         ^^^^^^^^^^^ left-hand of expression not valid\n+   |                ^\n ...\n LL |     not_a_place!(99);\n-   |     ----------------- in this macro invocation\n+   |     -----------------\n+   |     |            |\n+   |     |            cannot assign to this expression\n+   |     in this macro invocation\n \n-error: aborting due to previous error\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/issue-26093.rs:5:16\n+   |\n+LL |         $thing += 42;\n+   |                ^^\n+...\n+LL |     not_a_place!(99);\n+   |     -----------------\n+   |     |            |\n+   |     |            cannot assign to this expression\n+   |     in this macro invocation\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0070`.\n+Some errors have detailed explanations: E0067, E0070.\n+For more information about an error, try `rustc --explain E0067`."}, {"sha": "e34b5c9a0f47e3a7b84a3902ce756769ce4808d1", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -3,7 +3,7 @@ fn main () {\n     //~^ ERROR expected one of `,` or `>`, found `=`\n     //~| ERROR expected value, found struct `Vec`\n     //~| ERROR mismatched types\n-    //~| ERROR invalid left-hand side expression\n+    //~| ERROR invalid left-hand side of assignment\n     //~| ERROR expected expression, found reserved identifier `_`\n     //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();"}, {"sha": "3055e316a082a381197317e563b7dc2601956aca", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -35,11 +35,13 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n             found struct `std::vec::Vec<_>`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/issue-34334.rs:2:13\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n+   |             --------------- ^\n+   |             |\n+   |             cannot assign to this expression\n \n error[E0599]: no method named `iter` found for type `()` in the current scope\n   --> $DIR/issue-34334.rs:9:36"}, {"sha": "191939bdb705b4d09d02df1d8ca3ea056db351cf", "filename": "src/test/ui/type/type-check/assignment-expected-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -30,5 +30,5 @@ fn main() {\n     // A test to check that not expecting `bool` behaves well:\n     let _: usize = 0 = 0;\n     //~^ ERROR mismatched types [E0308]\n-    //~| ERROR invalid left-hand side expression [E0070]\n+    //~| ERROR invalid left-hand side of assignment [E0070]\n }"}, {"sha": "3f1caddf728cbead005a00cd44e78c3b8d66ac54", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -97,11 +97,13 @@ LL |         || (0 = 0);\n    |            expected `bool`, found `()`\n    |            help: try comparing for equality: `0 == 0`\n \n-error[E0070]: invalid left-hand side expression\n-  --> $DIR/assignment-expected-bool.rs:31:20\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/assignment-expected-bool.rs:31:22\n    |\n LL |     let _: usize = 0 = 0;\n-   |                    ^^^^^ left-hand of expression not valid\n+   |                    - ^\n+   |                    |\n+   |                    cannot assign to this expression\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:31:20"}, {"sha": "8da7b32b47b14ca21f015c09dc69251041aea895", "filename": "src/test/ui/type/type-check/assignment-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -26,7 +26,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         println!(\"{}\", x);\n     }\n-    // \"invalid left-hand side expression\" error is suppresed\n+    // \"invalid left-hand side of assignment\" error is suppresed\n     if 3 = x {\n         //~^ ERROR mismatched types\n         println!(\"{}\", x);"}, {"sha": "8828f09d92d333d548a320d148ca66140dce8f51", "filename": "src/test/ui/where-clauses/where-equality-constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.rs?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,6 +1,6 @@\n fn f() where u8 = u16 {}\n-//~^ ERROR equality constraints are not yet supported in where clauses\n+//~^ ERROR equality constraints are not yet supported in `where` clauses\n fn g() where for<'a> &'static (u8,) == u16, {}\n-//~^ ERROR equality constraints are not yet supported in where clauses\n+//~^ ERROR equality constraints are not yet supported in `where` clauses\n \n fn main() {}"}, {"sha": "c0241fe708f6451e0aaaec7e76b5153c53fe3171", "filename": "src/test/ui/where-clauses/where-equality-constraints.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41647613b1a69e7df7490d23fee2823da249cda4/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr?ref=41647613b1a69e7df7490d23fee2823da249cda4", "patch": "@@ -1,14 +1,18 @@\n-error: equality constraints are not yet supported in where clauses (see #20041)\n+error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/where-equality-constraints.rs:1:14\n    |\n LL | fn f() where u8 = u16 {}\n    |              ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n \n-error: equality constraints are not yet supported in where clauses (see #20041)\n+error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/where-equality-constraints.rs:3:14\n    |\n LL | fn g() where for<'a> &'static (u8,) == u16, {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n \n error: aborting due to 2 previous errors\n "}]}