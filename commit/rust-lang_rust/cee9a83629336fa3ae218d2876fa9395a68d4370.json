{"sha": "cee9a83629336fa3ae218d2876fa9395a68d4370", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZTlhODM2MjkzMzZmYTNhZTIxOGQyODc2ZmE5Mzk1YTY4ZDQzNzA=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-04-11T20:21:19Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-04-11T22:54:46Z"}, "message": "Decode non-BMP hex escapes in JSON\n\nFixes #13064.", "tree": {"sha": "9c6c0174771991a2b2e915cec2efd88083ced1a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6c0174771991a2b2e915cec2efd88083ced1a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cee9a83629336fa3ae218d2876fa9395a68d4370", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cee9a83629336fa3ae218d2876fa9395a68d4370", "html_url": "https://github.com/rust-lang/rust/commit/cee9a83629336fa3ae218d2876fa9395a68d4370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cee9a83629336fa3ae218d2876fa9395a68d4370/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fc85db93bf6c73c4da957db8c6b8b025826e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fc85db93bf6c73c4da957db8c6b8b025826e93", "html_url": "https://github.com/rust-lang/rust/commit/58fc85db93bf6c73c4da957db8c6b8b025826e93"}], "stats": {"total": 90, "additions": 65, "deletions": 25}, "files": [{"sha": "02afdb713ff2d3d54e5fea6483ac85a6a2ed4047", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 65, "deletions": 25, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cee9a83629336fa3ae218d2876fa9395a68d4370/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9a83629336fa3ae218d2876fa9395a68d4370/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=cee9a83629336fa3ae218d2876fa9395a68d4370", "patch": "@@ -239,6 +239,7 @@ use std::io::MemWriter;\n use std::io;\n use std::num;\n use std::str;\n+use std::str::ScalarValue;\n use std::strbuf::StrBuf;\n \n use Encodable;\n@@ -1129,6 +1130,35 @@ impl<T : Iterator<char>> Parser<T> {\n         Ok(res)\n     }\n \n+    fn decode_hex_escape(&mut self) -> DecodeResult<u16> {\n+        let mut i = 0u;\n+        let mut n = 0u16;\n+        while i < 4u && !self.eof() {\n+            self.bump();\n+            n = match self.ch_or_null() {\n+                c @ '0' .. '9' => n * 16_u16 + ((c as u16) - ('0' as u16)),\n+                'a' | 'A' => n * 16_u16 + 10_u16,\n+                'b' | 'B' => n * 16_u16 + 11_u16,\n+                'c' | 'C' => n * 16_u16 + 12_u16,\n+                'd' | 'D' => n * 16_u16 + 13_u16,\n+                'e' | 'E' => n * 16_u16 + 14_u16,\n+                'f' | 'F' => n * 16_u16 + 15_u16,\n+                _ => return self.error(\n+                    ~\"invalid \\\\u escape (unrecognized hex)\")\n+            };\n+\n+            i += 1u;\n+        }\n+\n+        // Error out if we didn't parse 4 digits.\n+        if i != 4u {\n+            return self.error(\n+                ~\"invalid \\\\u escape (not four digits)\");\n+        }\n+\n+        Ok(n)\n+    }\n+\n     fn parse_str(&mut self) -> DecodeResult<~str> {\n         let mut escape = false;\n         let mut res = StrBuf::new();\n@@ -1149,35 +1179,35 @@ impl<T : Iterator<char>> Parser<T> {\n                     'n' => res.push_char('\\n'),\n                     'r' => res.push_char('\\r'),\n                     't' => res.push_char('\\t'),\n-                    'u' => {\n-                        // Parse \\u1234.\n-                        let mut i = 0u;\n-                        let mut n = 0u;\n-                        while i < 4u && !self.eof() {\n-                            self.bump();\n-                            n = match self.ch_or_null() {\n-                                c @ '0' .. '9' => n * 16u + (c as uint) - ('0' as uint),\n-                                'a' | 'A' => n * 16u + 10u,\n-                                'b' | 'B' => n * 16u + 11u,\n-                                'c' | 'C' => n * 16u + 12u,\n-                                'd' | 'D' => n * 16u + 13u,\n-                                'e' | 'E' => n * 16u + 14u,\n-                                'f' | 'F' => n * 16u + 15u,\n+                    'u' => match try!(self.decode_hex_escape()) {\n+                        0xDC00 .. 0xDFFF => return self.error(\n+                                ~\"lone trailing surrogate in hex escape\"),\n+\n+                        // Non-BMP characters are encoded as a sequence of\n+                        // two hex escapes, representing UTF-16 surrogates.\n+                        n1 @ 0xD800 .. 0xDBFF => {\n+                            let c1 = self.next_char();\n+                            let c2 = self.next_char();\n+                            match (c1, c2) {\n+                                (Some('\\\\'), Some('u')) => (),\n                                 _ => return self.error(\n-                                    ~\"invalid \\\\u escape (unrecognized hex)\")\n-                            };\n-\n-                            i += 1u;\n-                        }\n+                                    ~\"unexpected end of non-BMP hex escape\"),\n+                            }\n \n-                        // Error out if we didn't parse 4 digits.\n-                        if i != 4u {\n-                            return self.error(\n-                                ~\"invalid \\\\u escape (not four digits)\");\n+                            let buf = [n1, try!(self.decode_hex_escape())];\n+                            match str::utf16_items(buf.as_slice()).next() {\n+                                Some(ScalarValue(c)) => res.push_char(c),\n+                                _ => return self.error(\n+                                    ~\"lone leading surrogate in hex escape\"),\n+                            }\n                         }\n \n-                        res.push_char(char::from_u32(n as u32).unwrap());\n-                    }\n+                        n => match char::from_u32(n as u32) {\n+                            Some(c) => res.push_char(c),\n+                            None => return self.error(\n+                                format!(\"invalid Unicode codepoint {:u}\", n)),\n+                        },\n+                    },\n                     _ => return self.error(~\"invalid escape\"),\n                 }\n                 escape = false;\n@@ -2139,6 +2169,16 @@ mod tests {\n         assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n         assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n         assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n+\n+        // Non-BMP escapes.  The exact error messages and positions are kind of\n+        // arbitrary.\n+        assert_eq!(from_str(\"\\\"\\\\ud83d\\\\udca9\\\"\"), Ok(String(~\"\\U0001F4A9\")));\n+        assert!(from_str(\"\\\"\\\\ud83d\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\ud83d\\\\ud83d\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\ud83dx\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9\\\\udca9\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9x\\\"\").is_err());\n     }\n \n     #[test]"}]}