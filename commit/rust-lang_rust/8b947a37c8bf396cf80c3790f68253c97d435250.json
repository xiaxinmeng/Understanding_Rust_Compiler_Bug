{"sha": "8b947a37c8bf396cf80c3790f68253c97d435250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTQ3YTM3YzhiZjM5NmNmODBjMzc5MGY2ODI1M2M5N2Q0MzUyNTA=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-02-02T03:53:39Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-02-02T03:53:39Z"}, "message": "Update Cell references in the book", "tree": {"sha": "1760e2e90e66b7596705ada951c75bea0855af61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1760e2e90e66b7596705ada951c75bea0855af61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b947a37c8bf396cf80c3790f68253c97d435250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b947a37c8bf396cf80c3790f68253c97d435250", "html_url": "https://github.com/rust-lang/rust/commit/8b947a37c8bf396cf80c3790f68253c97d435250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b947a37c8bf396cf80c3790f68253c97d435250/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa509109fb140cdbb6bb391ed361ab9ee502e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa509109fb140cdbb6bb391ed361ab9ee502e68", "html_url": "https://github.com/rust-lang/rust/commit/daa509109fb140cdbb6bb391ed361ab9ee502e68"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "17741cac10b78c88fd3cdabc30ef24b6fd9429b8", "filename": "src/doc/book/choosing-your-guarantees.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b947a37c8bf396cf80c3790f68253c97d435250/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b947a37c8bf396cf80c3790f68253c97d435250/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fchoosing-your-guarantees.md?ref=8b947a37c8bf396cf80c3790f68253c97d435250", "patch": "@@ -118,7 +118,8 @@ These types are _generally_ found in struct fields, but they may be found elsewh\n \n ## `Cell<T>`\n \n-[`Cell<T>`][cell] is a type that provides zero-cost interior mutability, but only for `Copy` types.\n+[`Cell<T>`][cell] is a type that provides zero-cost interior mutability by moving data in and\n+out of the cell.\n Since the compiler knows that all the data owned by the contained value is on the stack, there's\n no worry of leaking any data behind references (or worse!) by simply replacing the data.\n \n@@ -160,24 +161,25 @@ This relaxes the &ldquo;no aliasing with mutability&rdquo; restriction in places\n unnecessary. However, this also relaxes the guarantees that the restriction provides; so if your\n invariants depend on data stored within `Cell`, you should be careful.\n \n-This is useful for mutating primitives and other `Copy` types when there is no easy way of\n+This is useful for mutating primitives and other types when there is no easy way of\n doing it in line with the static rules of `&` and `&mut`.\n \n `Cell` does not let you obtain interior references to the data, which makes it safe to freely\n mutate.\n \n #### Cost\n \n-There is no runtime cost to using `Cell<T>`, however if you are using it to wrap larger (`Copy`)\n+There is no runtime cost to using `Cell<T>`, however if you are using it to wrap larger\n structs, it might be worthwhile to instead wrap individual fields in `Cell<T>` since each write is\n otherwise a full copy of the struct.\n \n \n ## `RefCell<T>`\n \n-[`RefCell<T>`][refcell] also provides interior mutability, but isn't restricted to `Copy` types.\n+[`RefCell<T>`][refcell] also provides interior mutability, but doesn't move data in and out of the\n+cell.\n \n-Instead, it has a runtime cost. `RefCell<T>` enforces the read-write lock pattern at runtime (it's\n+However, it has a runtime cost. `RefCell<T>` enforces the read-write lock pattern at runtime (it's\n like a single-threaded mutex), unlike `&T`/`&mut T` which do so at compile time. This is done by the\n `borrow()` and `borrow_mut()` functions, which modify an internal reference count and return smart\n pointers which can be dereferenced immutably and mutably respectively. The refcount is restored when"}]}