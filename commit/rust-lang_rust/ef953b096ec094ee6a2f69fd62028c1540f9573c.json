{"sha": "ef953b096ec094ee6a2f69fd62028c1540f9573c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTUzYjA5NmVjMDk0ZWU2YTJmNjlmZDYyMDI4YzE1NDBmOTU3M2M=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-22T15:01:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-22T15:01:12Z"}, "message": "Move calls to test_main into one function", "tree": {"sha": "079419a575df056047915209a65e45755e205675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079419a575df056047915209a65e45755e205675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef953b096ec094ee6a2f69fd62028c1540f9573c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef953b096ec094ee6a2f69fd62028c1540f9573c", "html_url": "https://github.com/rust-lang/rust/commit/ef953b096ec094ee6a2f69fd62028c1540f9573c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef953b096ec094ee6a2f69fd62028c1540f9573c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f2326c0570fdd64f53532a089bbbc361d190e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f2326c0570fdd64f53532a089bbbc361d190e6", "html_url": "https://github.com/rust-lang/rust/commit/05f2326c0570fdd64f53532a089bbbc361d190e6"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "b45e84aff8cf5961e49ccec9faf00d5dca35d72e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef953b096ec094ee6a2f69fd62028c1540f9573c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef953b096ec094ee6a2f69fd62028c1540f9573c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=ef953b096ec094ee6a2f69fd62028c1540f9573c", "patch": "@@ -105,7 +105,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n-    let mut test_args = options.test_args.clone();\n+    let test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n     let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n@@ -166,12 +166,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n-    test_args.insert(0, \"rustdoctest\".to_string());\n-    if nocapture {\n-        test_args.push(\"--nocapture\".to_string());\n-    }\n-\n-    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n+    run_tests(test_args, nocapture, display_warnings, tests);\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -214,6 +209,19 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     Ok(())\n }\n \n+crate fn run_tests(\n+    mut test_args: Vec<String>,\n+    nocapture: bool,\n+    display_warnings: bool,\n+    tests: Vec<test::TestDescAndFn>,\n+) {\n+    test_args.insert(0, \"rustdoctest\".to_string());\n+    if nocapture {\n+        test_args.push(\"--nocapture\".to_string());\n+    }\n+    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n+}\n+\n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;"}, {"sha": "80af2a7aaf5c8ab820ef593534f023a9dc22d073", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef953b096ec094ee6a2f69fd62028c1540f9573c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef953b096ec094ee6a2f69fd62028c1540f9573c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=ef953b096ec094ee6a2f69fd62028c1540f9573c", "patch": "@@ -115,7 +115,7 @@ crate fn render<P: AsRef<Path>>(\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-crate fn test(mut options: Options) -> Result<(), String> {\n+crate fn test(options: Options) -> Result<(), String> {\n     let input_str = read_to_string(&options.input)\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n@@ -135,14 +135,11 @@ crate fn test(mut options: Options) -> Result<(), String> {\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n-    options.test_args.insert(0, \"rustdoctest\".to_string());\n-    if options.nocapture {\n-        options.test_args.push(\"--nocapture\".to_string());\n-    }\n-    test::test_main(\n-        &options.test_args,\n+    crate::doctest::run_tests(\n+        options.test_args,\n+        options.nocapture,\n+        options.display_warnings,\n         collector.tests,\n-        Some(test::Options::new().display_output(options.display_warnings)),\n     );\n     Ok(())\n }"}]}