{"sha": "61f23e0003af417f0103ffe01718a3198ef9451e", "node_id": "C_kwDOAAsO6NoAKDYxZjIzZTAwMDNhZjQxN2YwMTAzZmZlMDE3MThhMzE5OGVmOTQ1MWU", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-03-12T00:01:25Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:14:03Z"}, "message": "intern offsetof fields", "tree": {"sha": "bf0908be0b9e66edaf653b5fb71b50d67c1cb818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0908be0b9e66edaf653b5fb71b50d67c1cb818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f23e0003af417f0103ffe01718a3198ef9451e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f23e0003af417f0103ffe01718a3198ef9451e", "html_url": "https://github.com/rust-lang/rust/commit/61f23e0003af417f0103ffe01718a3198ef9451e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f23e0003af417f0103ffe01718a3198ef9451e/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5", "html_url": "https://github.com/rust-lang/rust/commit/511e457c4ba88097ee46ef07b7ef80ce4dd4a3c5"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "9ab2b13d9d1612939df705b540ecebe40056cff4", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -719,7 +719,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n \n                 let mut current_ty = *container;\n \n-                for &field in fields {\n+                for field in fields.iter() {\n                     match current_ty.kind() {\n                         ty::Tuple(fields) => {\n                             let Some(&f_ty) = fields.get(field.as_usize()) else {"}, {"sha": "d7d0366e101abc3ae6140b5d4c0f4fce1edfecfa", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -1115,7 +1115,7 @@ pub enum Rvalue<'tcx> {\n     CheckedBinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),\n \n     /// Computes a value as described by the operation.\n-    NullaryOp(NullOp, Ty<'tcx>),\n+    NullaryOp(NullOp<'tcx>, Ty<'tcx>),\n \n     /// Exactly like `BinaryOp`, but less operands.\n     ///\n@@ -1212,13 +1212,13 @@ pub enum AggregateKind<'tcx> {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n-pub enum NullOp {\n+pub enum NullOp<'tcx> {\n     /// Returns the size of a value of that type\n     SizeOf,\n     /// Returns the minimum alignment of a type\n     AlignOf,\n     /// Returns the offset of a field\n-    OffsetOf(Vec<FieldIdx>),\n+    OffsetOf(&'tcx List<FieldIdx>),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -1288,6 +1288,6 @@ mod size_asserts {\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);\n     static_assert_size!(PlaceElem<'_>, 24);\n-    static_assert_size!(Rvalue<'_>, 48);\n+    static_assert_size!(Rvalue<'_>, 40);\n     // tidy-alphabetical-end\n }"}, {"sha": "06874741bb065ebbd7b5bab57df23835e6b7837b", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -16,7 +16,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     UserTypeAnnotationIndex,\n     BorrowKind,\n     CastKind,\n-    NullOp,\n     hir::Movability,\n     BasicBlock,\n     SwitchTargets,\n@@ -26,6 +25,7 @@ TrivialTypeTraversalAndLiftImpls! {\n \n TrivialTypeTraversalImpls! {\n     ConstValue<'tcx>,\n+    NullOp<'tcx>,\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {"}, {"sha": "fa76579f75b5d2b373f566d0a63c20bbf6e6558a", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtDef, FnSig, Ty, UpvarSubsts};\n+use rustc_middle::ty::{self, AdtDef, FnSig, List, Ty, UpvarSubsts};\n use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -484,7 +484,7 @@ pub enum ExprKind<'tcx> {\n     /// Field offset (`offset_of!`)\n     OffsetOf {\n         container: Ty<'tcx>,\n-        fields: Vec<FieldIdx>,\n+        fields: &'tcx List<FieldIdx>,\n     },\n     /// An expression taking a reference to a thread local.\n     ThreadLocalRef(DefId),"}, {"sha": "5454d406dd1286a9f7ac11a195a29f51b47e47c7", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n pub use rustc_type_ir::{TyDecoder, TyEncoder};\n use std::hash::Hash;\n use std::intrinsics;\n@@ -401,6 +402,15 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<FieldIdx> {\n+    fn decode(decoder: &mut D) -> &'tcx Self {\n+        let len = decoder.read_usize();\n+        decoder\n+            .interner()\n+            .mk_fields_from_iter((0..len).map::<FieldIdx, _>(|_| Decodable::decode(decoder)))\n+    }\n+}\n+\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n@@ -412,6 +422,7 @@ impl_decodable_via_ref! {\n     &'tcx mir::coverage::CodeRegion,\n     &'tcx ty::List<ty::BoundVariableKind>,\n     &'tcx ty::List<ty::Predicate<'tcx>>,\n+    &'tcx ty::List<FieldIdx>,\n }\n \n #[macro_export]"}, {"sha": "e4fa01ddae189ad4747c266d14ea9c951618e91f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -155,6 +155,7 @@ pub struct CtxtInterners<'tcx> {\n     layout: InternedSet<'tcx, LayoutS>,\n     adt_def: InternedSet<'tcx, AdtDefData>,\n     external_constraints: InternedSet<'tcx, ExternalConstraintsData<'tcx>>,\n+    fields: InternedSet<'tcx, List<FieldIdx>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -178,6 +179,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             layout: Default::default(),\n             adt_def: Default::default(),\n             external_constraints: Default::default(),\n+            fields: Default::default(),\n         }\n     }\n \n@@ -1585,6 +1587,7 @@ slice_interners!(\n     projs: pub mk_projs(ProjectionKind),\n     place_elems: pub mk_place_elems(PlaceElem<'tcx>),\n     bound_variable_kinds: pub mk_bound_variable_kinds(ty::BoundVariableKind),\n+    fields: pub mk_fields(FieldIdx),\n );\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -2253,6 +2256,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         T::collect_and_apply(iter, |xs| self.mk_place_elems(xs))\n     }\n \n+    pub fn mk_fields_from_iter<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<FieldIdx, &'tcx List<FieldIdx>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.mk_fields(xs))\n+    }\n+\n     pub fn mk_substs_trait(\n         self,\n         self_ty: Ty<'tcx>,"}, {"sha": "fbde0b28f54ead908e4088fc8500344b994a96c1", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -481,8 +481,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }))))\n             }\n \n-            ExprKind::OffsetOf { container, ref fields } => {\n-                block.and(Rvalue::NullaryOp(NullOp::OffsetOf(fields.clone()), container))\n+            ExprKind::OffsetOf { container, fields } => {\n+                block.and(Rvalue::NullaryOp(NullOp::OffsetOf(fields), container))\n             }\n \n             ExprKind::Literal { .. }"}, {"sha": "ce13d522aae0d934e67f44701f8ba60743f10999", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f23e0003af417f0103ffe01718a3198ef9451e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=61f23e0003af417f0103ffe01718a3198ef9451e", "patch": "@@ -667,7 +667,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::OffsetOf(_, _) => {\n                 let data = self.typeck_results.offset_of_data();\n                 let &(container, ref indices) = data.get(expr.hir_id).unwrap();\n-                let fields = indices.iter().copied().collect();\n+                let fields = tcx.mk_fields_from_iter(indices.iter().copied());\n \n                 ExprKind::OffsetOf { container, fields }\n             }"}]}