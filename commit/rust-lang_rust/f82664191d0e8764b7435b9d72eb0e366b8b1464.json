{"sha": "f82664191d0e8764b7435b9d72eb0e366b8b1464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MjY2NDE5MWQwZTg3NjRiNzQzNWI5ZDcyZWIwZTM2NmI4YjE0NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T16:21:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T16:21:39Z"}, "message": "Auto merge of #83053 - oli-obk:const_stab_version, r=m-ou-se\n\nFix const stability `since` versions.\n\nfixes #82085\n\nr? `@m-ou-se`", "tree": {"sha": "005265bf0d6d9c43fb127bc2afb038a485db5b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005265bf0d6d9c43fb127bc2afb038a485db5b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464", "html_url": "https://github.com/rust-lang/rust/commit/f82664191d0e8764b7435b9d72eb0e366b8b1464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed75d0686e1ab674636e784268b4b7f5e03c53de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed75d0686e1ab674636e784268b4b7f5e03c53de", "html_url": "https://github.com/rust-lang/rust/commit/ed75d0686e1ab674636e784268b4b7f5e03c53de"}, {"sha": "6f3635d87ba074308786f9e33c76fc165f41f806", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3635d87ba074308786f9e33c76fc165f41f806", "html_url": "https://github.com/rust-lang/rust/commit/6f3635d87ba074308786f9e33c76fc165f41f806"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "cc2d440010b1565017f9705a0e8d9421fa661d74", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -360,7 +360,7 @@ impl String {\n     /// let s = String::new();\n     /// ```\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }"}, {"sha": "0e7667dd89e644916228765c79ecc07d4f5f1b1b", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -93,7 +93,7 @@ impl Layout {\n     /// This function is unsafe as it does not verify the preconditions from\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+    #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is greater than zero."}, {"sha": "fa21a40e169377cf6ecd91c660ae5d03311c8aab", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -325,7 +325,7 @@ impl<T> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_cell_new\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_cell_new\", since = \"1.24.0\")]\n     #[inline]\n     pub const fn new(value: T) -> Cell<T> {\n         Cell { value: UnsafeCell::new(value) }\n@@ -655,7 +655,7 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_refcell_new\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_refcell_new\", since = \"1.24.0\")]\n     #[inline]\n     pub const fn new(value: T) -> RefCell<T> {\n         RefCell { value: UnsafeCell::new(value), borrow: Cell::new(UNUSED) }"}, {"sha": "446d72f1d32e4e68399d021b9172ec4f81750f4c", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -297,7 +297,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_size_of\", since = \"1.32.0\")]\n+#[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -440,7 +440,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_align_of\", since = \"1.32.0\")]\n+#[rustc_const_stable(feature = \"const_align_of\", since = \"1.24.0\")]\n pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }"}, {"sha": "7e4f8d570a73bec378e45603807dd614c49c04a5", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -205,7 +205,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\")]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n pub const fn null<T>() -> *const T {\n     0 as *const T\n }\n@@ -223,7 +223,7 @@ pub const fn null<T>() -> *const T {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\")]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }"}, {"sha": "af730d1d9b2907dc0e0a2b0e0c53cea51cb613b8", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -72,7 +72,7 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-    #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.36.0\")]\n     #[inline]\n     pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a non-zero usize which is then casted\n@@ -156,7 +156,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-    #[rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.25.0\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         // SAFETY: the caller must guarantee that `ptr` is non-null.\n@@ -288,7 +288,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n-    #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "1e9e9c24a4550f7799d206ad9d66603e10a3f02a", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -94,7 +94,7 @@ impl<T> [T] {\n     /// ```\n     #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     #[rustc_allow_const_fn_unstable(const_fn_union)]\n@@ -127,7 +127,7 @@ impl<T> [T] {\n     /// assert!(!a.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.39.0\")]\n     #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "b5c945594637ba4f26206e4c299c71a152360d63", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -140,7 +140,7 @@ impl str {\n     /// ```\n     #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_str_len\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -161,7 +161,7 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -217,7 +217,7 @@ impl str {\n     /// assert_eq!(b\"bors\", bytes);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n     #[rustc_allow_const_fn_unstable(const_fn_transmute)]"}, {"sha": "bf70b28579c8b1d9485a8f5e8f945a2a301ac18f", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82664191d0e8764b7435b9d72eb0e366b8b1464/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=f82664191d0e8764b7435b9d72eb0e366b8b1464", "patch": "@@ -283,7 +283,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.24.0\")]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -883,7 +883,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.24.0\")]\n     pub const fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n@@ -2276,7 +2276,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_access\", since = \"1.15.0\"),\n             stable(feature = \"atomic_from\", since = \"1.23.0\"),\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n-            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n+            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n             \"isize\",\n             \"\",\n@@ -2296,7 +2296,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_access\", since = \"1.15.0\"),\n             stable(feature = \"atomic_from\", since = \"1.23.0\"),\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n-            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n+            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n             \"usize\",\n             \"\","}]}