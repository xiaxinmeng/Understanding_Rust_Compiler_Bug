{"sha": "a5bfc25c93d2549887848529382892f93c95207d", "node_id": "C_kwDOAAsO6NoAKGE1YmZjMjVjOTNkMjU0OTg4Nzg0ODUyOTM4Mjg5MmY5M2M5NTIwN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T09:37:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T09:37:08Z"}, "message": "Auto merge of #106872 - dtolnay:nbsp, r=fee1-dead\n\nEmit only one nbsp error per file\n\nFixes #106101.\n\nSee https://github.com/rust-lang/rust/issues/106098 for an explanation of how someone would end up with a large number of these nbsp characters in their source code, which is why I think rustc needs to handle this specific case in a friendlier way.", "tree": {"sha": "a1198f65c482e33a5002c5cd6398ade9bb9c6cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1198f65c482e33a5002c5cd6398ade9bb9c6cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5bfc25c93d2549887848529382892f93c95207d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bfc25c93d2549887848529382892f93c95207d", "html_url": "https://github.com/rust-lang/rust/commit/a5bfc25c93d2549887848529382892f93c95207d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5bfc25c93d2549887848529382892f93c95207d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12412c90fbd974b1cf886e42a95c850d9ee45a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12412c90fbd974b1cf886e42a95c850d9ee45a1", "html_url": "https://github.com/rust-lang/rust/commit/d12412c90fbd974b1cf886e42a95c850d9ee45a1"}, {"sha": "dab06ccdab57d160de2e9afea752929ad39ee534", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab06ccdab57d160de2e9afea752929ad39ee534", "html_url": "https://github.com/rust-lang/rust/commit/dab06ccdab57d160de2e9afea752929ad39ee534"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "9fe8d9836ba60ca8ecfb16eea7d0383617931c0e", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a5bfc25c93d2549887848529382892f93c95207d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bfc25c93d2549887848529382892f93c95207d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=a5bfc25c93d2549887848529382892f93c95207d", "patch": "@@ -52,8 +52,15 @@ pub(crate) fn parse_token_trees<'a>(\n     }\n \n     let cursor = Cursor::new(src);\n-    let string_reader =\n-        StringReader { sess, start_pos, pos: start_pos, src, cursor, override_span };\n+    let string_reader = StringReader {\n+        sess,\n+        start_pos,\n+        pos: start_pos,\n+        src,\n+        cursor,\n+        override_span,\n+        nbsp_is_whitespace: false,\n+    };\n     tokentrees::TokenTreesReader::parse_all_token_trees(string_reader)\n }\n \n@@ -68,6 +75,10 @@ struct StringReader<'a> {\n     /// Cursor for getting lexer tokens.\n     cursor: Cursor<'a>,\n     override_span: Option<Span>,\n+    /// When a \"unknown start of token: \\u{a0}\" has already been emitted earlier\n+    /// in this file, it's safe to treat further occurrences of the non-breaking\n+    /// space character as whitespace.\n+    nbsp_is_whitespace: bool,\n }\n \n impl<'a> StringReader<'a> {\n@@ -239,6 +250,16 @@ impl<'a> StringReader<'a> {\n                     }\n                     let mut it = self.str_from_to_end(start).chars();\n                     let c = it.next().unwrap();\n+                    if c == '\\u{00a0}' {\n+                        // If an error has already been reported on non-breaking\n+                        // space characters earlier in the file, treat all\n+                        // subsequent occurrences as whitespace.\n+                        if self.nbsp_is_whitespace {\n+                            preceded_by_whitespace = true;\n+                            continue;\n+                        }\n+                        self.nbsp_is_whitespace = true;\n+                    }\n                     let repeats = it.take_while(|c1| *c1 == c).count();\n                     let mut err =\n                         self.struct_err_span_char(start, self.pos + Pos::from_usize(repeats * c.len_utf8()), \"unknown start of token\", c);\n@@ -486,7 +507,7 @@ impl<'a> StringReader<'a> {\n \n     /// Slice of the source text from `start` up to but excluding `self.pos`,\n     /// meaning the slice does not include the character `self.ch`.\n-    fn str_from(&self, start: BytePos) -> &str {\n+    fn str_from(&self, start: BytePos) -> &'a str {\n         self.str_from_to(start, self.pos)\n     }\n \n@@ -497,12 +518,12 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n-    fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {\n+    fn str_from_to(&self, start: BytePos, end: BytePos) -> &'a str {\n         &self.src[self.src_index(start)..self.src_index(end)]\n     }\n \n     /// Slice of the source text spanning from `start` until the end\n-    fn str_from_to_end(&self, start: BytePos) -> &str {\n+    fn str_from_to_end(&self, start: BytePos) -> &'a str {\n         &self.src[self.src_index(start)..]\n     }\n "}, {"sha": "f0122561f463d9b70375d696ae3cae8178e848bb", "filename": "tests/ui/parser/unicode-chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bfc25c93d2549887848529382892f93c95207d/tests%2Fui%2Fparser%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bfc25c93d2549887848529382892f93c95207d/tests%2Fui%2Fparser%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.rs?ref=a5bfc25c93d2549887848529382892f93c95207d", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let y = 0\u037e\n     //~^ ERROR unknown start of token: \\u{37e}\n     //~^^ HELP Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n-    \u00a0\u00a0\u00a0\u00a0let x = 0;\n+    \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0=\u00a00;\n     //~^ ERROR unknown start of token: \\u{a0}\n     //~^^ NOTE character appears 3 more times\n     //~^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not"}, {"sha": "b1d4a0af7115493e4cb1d28e5cdc6b732dac4beb", "filename": "tests/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5bfc25c93d2549887848529382892f93c95207d/tests%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5bfc25c93d2549887848529382892f93c95207d/tests%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.stderr?ref=a5bfc25c93d2549887848529382892f93c95207d", "patch": "@@ -12,13 +12,13 @@ LL |     let y = 0;\n error: unknown start of token: \\u{a0}\n   --> $DIR/unicode-chars.rs:5:5\n    |\n-LL |     \u00a0\u00a0\u00a0\u00a0let x = 0;\n+LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0=\u00a00;\n    |     ^^^^\n    |\n    = note: character appears 3 more times\n help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n    |\n-LL |         let x = 0;\n+LL |         let\u00a0x\u00a0=\u00a00;\n    |     ++++\n \n error: aborting due to 2 previous errors"}]}