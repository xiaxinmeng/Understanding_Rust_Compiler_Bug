{"sha": "198c70daab97b18d64334ad3876ba264e6c873fd", "node_id": "C_kwDOAAsO6NoAKDE5OGM3MGRhYWI5N2IxOGQ2NDMzNGFkMzg3NmJhMjY0ZTZjODczZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T23:53:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T23:53:11Z"}, "message": "Auto merge of #96883 - jackh726:early-binder-2, r=oli-obk\n\nAdd EarlyBinder\n\nChalk has no concept of `Param` (https://github.com/rust-lang/chalk/blob/e0ade19d139bc784384acc6736cd960c91dd55a1/chalk-ir/src/lib.rs#L579) or `ReEarlyBound` (https://github.com/rust-lang/chalk/blob/e0ade19d139bc784384acc6736cd960c91dd55a1/chalk-ir/src/lib.rs#L1308). Everything  is just \"bound\" - the equivalent of rustc's late-bound. It's not completely clear yet whether to move everything to the same time of binder in rustc or add `Param` and `ReEarlyBound` in Chalk.\n\nEither way, tracking when we have or haven't already substituted out these in rustc can be helpful.\n\nAs a first step, I'm just adding a `EarlyBinder` newtype that is required to call `subst`. I also add a couple \"transparent\" `bound_*` wrappers around a couple query that are often immediately substituted.\n\nr? `@nikomatsakis`", "tree": {"sha": "e4d0254da352eaffd1892b9e33de4335a94f305a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d0254da352eaffd1892b9e33de4335a94f305a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198c70daab97b18d64334ad3876ba264e6c873fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198c70daab97b18d64334ad3876ba264e6c873fd", "html_url": "https://github.com/rust-lang/rust/commit/198c70daab97b18d64334ad3876ba264e6c873fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198c70daab97b18d64334ad3876ba264e6c873fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7161a708c627c423fbef491bfacb16b6a0f022ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7161a708c627c423fbef491bfacb16b6a0f022ba", "html_url": "https://github.com/rust-lang/rust/commit/7161a708c627c423fbef491bfacb16b6a0f022ba"}, {"sha": "6dab55cfae21ecc91f42b899a80fb91b72ab8e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dab55cfae21ecc91f42b899a80fb91b72ab8e32", "html_url": "https://github.com/rust-lang/rust/commit/6dab55cfae21ecc91f42b899a80fb91b72ab8e32"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "530d6d4de35f1c2bceb58e92c6b8624c9db23c75", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);\n-            let call_ty = cx.tcx.type_of(method_def_id).subst(cx.tcx, substs);\n+            let call_ty = cx.tcx.bound_type_of(method_def_id).subst(cx.tcx, substs);\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {"}, {"sha": "5c46d6c7df7056856ed7afcd3d37f09b70cd2808", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n+use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n             for &(p, _span) in preds {\n-                let p = p.subst(cx.tcx, subst);\n+                let p = EarlyBinder(p).subst(cx.tcx, subst);\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "9d8f8999ce409488a8c33f5c1c5a7dd0956a70a2", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n             ExprKind::MethodCall(path, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n-                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n+                let method_type = cx.tcx.bound_type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),"}, {"sha": "be6277332db4dbd5d7d9530388c36c62f46e4b13", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -307,7 +307,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .map(|f| cx.tcx.type_of(f.did).subst(cx.tcx, substs));\n+                    .map(|f| cx.tcx.bound_type_of(f.did).subst(cx.tcx, substs));\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::TypeErasure;\n                 };"}, {"sha": "a80c7ee4929584d3885810b7050972aa208f28bb", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind,\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -420,7 +420,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    substs.subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}, {"sha": "b09eb8c6cd10b89c7756bfe350083c05700d2ac7", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198c70daab97b18d64334ad3876ba264e6c873fd/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=198c70daab97b18d64334ad3876ba264e6c873fd", "patch": "@@ -520,7 +520,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         let ty = cx.typeck_results().expr_ty_adjusted(expr).peel_refs();\n         match *ty.kind() {\n             ty::Closure(_, subs) => Some(ExprFnSig::Closure(subs.as_closure().sig())),\n-            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs))),\n+            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs))),\n             ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n             ty::Dynamic(bounds, _) => {\n                 let lang_items = cx.tcx.lang_items();"}]}