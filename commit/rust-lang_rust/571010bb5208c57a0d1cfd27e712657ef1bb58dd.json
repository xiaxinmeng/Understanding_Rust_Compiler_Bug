{"sha": "571010bb5208c57a0d1cfd27e712657ef1bb58dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTAxMGJiNTIwOGM1N2EwZDFjZmQyN2U3MTI2NTdlZjFiYjU4ZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-06T00:10:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-09T12:26:06Z"}, "message": "replace Name with InternedString in DefPathData\n\nFixes #35292.", "tree": {"sha": "682d1ff2bb91e211a2050f89ce35e513ed7e2117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682d1ff2bb91e211a2050f89ce35e513ed7e2117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/571010bb5208c57a0d1cfd27e712657ef1bb58dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/571010bb5208c57a0d1cfd27e712657ef1bb58dd", "html_url": "https://github.com/rust-lang/rust/commit/571010bb5208c57a0d1cfd27e712657ef1bb58dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/571010bb5208c57a0d1cfd27e712657ef1bb58dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92b1a7981801266eb5075c07dc2331b08c0693c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92b1a7981801266eb5075c07dc2331b08c0693c", "html_url": "https://github.com/rust-lang/rust/commit/a92b1a7981801266eb5075c07dc2331b08c0693c"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "789b70ccfa412998157b36c220c0715baafc33e3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=571010bb5208c57a0d1cfd27e712657ef1bb58dd", "patch": "@@ -1854,7 +1854,7 @@ impl<'a> LoweringContext<'a> {\n \n         let parent_def = self.parent_def;\n         let def = self.resolver.definitions().map(|defs| {\n-            let def_path_data = DefPathData::Binding(name);\n+            let def_path_data = DefPathData::Binding(name.as_str());\n             let def_index = defs.create_def_with_parent(parent_def, pat.id, def_path_data);\n             Def::Local(DefId::local(def_index), pat.id)\n         }).unwrap_or(Def::Err);"}, {"sha": "a3b541c5044418622b409f4cb8e9c89454d7c0b6", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=571010bb5208c57a0d1cfd27e712657ef1bb58dd", "patch": "@@ -135,11 +135,11 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n                 DefPathData::Impl,\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.name),\n+                DefPathData::TypeNs(i.ident.name.as_str()),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.name),\n-            ItemKind::Mac(..) => DefPathData::MacroDef(i.ident.name),\n+                DefPathData::ValueNs(i.ident.name.as_str()),\n+            ItemKind::Mac(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n             ItemKind::Use(..) => DefPathData::Misc,\n         };\n         let def = self.create_def(i.id, def_data);\n@@ -150,12 +150,12 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name.name));\n+                                            DefPathData::EnumVariant(v.node.name.name.as_str()));\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| token::intern(&index.to_string()));\n-                                this.create_def(field.id, DefPathData::Field(name));\n+                                this.create_def(field.id, DefPathData::Field(name.as_str()));\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n@@ -172,8 +172,8 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n                     }\n \n                     for (index, field) in struct_def.fields().iter().enumerate() {\n-                        let name = field.ident.map(|ident| ident.name)\n-                            .unwrap_or(token::intern(&index.to_string()));\n+                        let name = field.ident.map(|ident| ident.name.as_str())\n+                            .unwrap_or(token::intern(&index.to_string()).as_str());\n                         this.create_def(field.id, DefPathData::Field(name));\n                     }\n                 }\n@@ -184,7 +184,7 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        let def = self.create_def(foreign_item.id, DefPathData::ValueNs(foreign_item.ident.name));\n+        let def = self.create_def(foreign_item.id, DefPathData::ValueNs(foreign_item.ident.name.as_str()));\n \n         self.with_parent(def, |this| {\n             visit::walk_foreign_item(this, foreign_item);\n@@ -193,7 +193,7 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n \n     fn visit_generics(&mut self, generics: &Generics) {\n         for ty_param in generics.ty_params.iter() {\n-            self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.ident.name));\n+            self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.ident.name.as_str()));\n         }\n \n         visit::walk_generics(self, generics);\n@@ -202,9 +202,9 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n     fn visit_trait_item(&mut self, ti: &TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name),\n-            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name),\n-            TraitItemKind::Macro(..) => DefPathData::MacroDef(ti.ident.name),\n+                DefPathData::ValueNs(ti.ident.name.as_str()),\n+            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name.as_str()),\n+            TraitItemKind::Macro(..) => DefPathData::MacroDef(ti.ident.name.as_str()),\n         };\n \n         let def = self.create_def(ti.id, def_data);\n@@ -220,9 +220,9 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n     fn visit_impl_item(&mut self, ii: &ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.name),\n-            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name),\n-            ImplItemKind::Macro(..) => DefPathData::MacroDef(ii.ident.name),\n+                DefPathData::ValueNs(ii.ident.name.as_str()),\n+            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name.as_str()),\n+            ImplItemKind::Macro(..) => DefPathData::MacroDef(ii.ident.name.as_str()),\n         };\n \n         let def = self.create_def(ii.id, def_data);\n@@ -239,7 +239,7 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n         let parent_def = self.parent_def;\n \n         if let PatKind::Ident(_, id, _) = pat.node {\n-            let def = self.create_def(pat.id, DefPathData::Binding(id.node.name));\n+            let def = self.create_def(pat.id, DefPathData::Binding(id.node.name.as_str()));\n             self.parent_def = Some(def);\n         }\n \n@@ -271,11 +271,11 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n     }\n \n     fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n-        self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name));\n+        self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name.as_str()));\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &MacroDef) {\n-        self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.ident.name));\n+        self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.ident.name.as_str()));\n     }\n }\n \n@@ -301,9 +301,9 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n             hir::ItemEnum(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n             hir::ItemExternCrate(..) | hir::ItemMod(..) | hir::ItemForeignMod(..) |\n             hir::ItemTy(..) =>\n-                DefPathData::TypeNs(i.name),\n+                DefPathData::TypeNs(i.name.as_str()),\n             hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) =>\n-                DefPathData::ValueNs(i.name),\n+                DefPathData::ValueNs(i.name.as_str()),\n             hir::ItemUse(..) => DefPathData::Misc,\n         };\n         let def = self.create_def(i.id, def_data);\n@@ -314,12 +314,12 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name));\n+                                            DefPathData::EnumVariant(v.node.name.as_str()));\n \n                         this.with_parent(variant_def_index, |this| {\n                             for field in v.node.data.fields() {\n                                 this.create_def(field.id,\n-                                                DefPathData::Field(field.name));\n+                                                DefPathData::Field(field.name.as_str()));\n                             }\n                             if let Some(ref expr) = v.node.disr_expr {\n                                 this.visit_hir_const_integer(expr);\n@@ -335,7 +335,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n                     }\n \n                     for field in struct_def.fields() {\n-                        this.create_def(field.id, DefPathData::Field(field.name));\n+                        this.create_def(field.id, DefPathData::Field(field.name.as_str()));\n                     }\n                 }\n                 _ => {}\n@@ -345,7 +345,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'ast hir::ForeignItem) {\n-        let def = self.create_def(foreign_item.id, DefPathData::ValueNs(foreign_item.name));\n+        let def = self.create_def(foreign_item.id, DefPathData::ValueNs(foreign_item.name.as_str()));\n \n         self.with_parent(def, |this| {\n             intravisit::walk_foreign_item(this, foreign_item);\n@@ -354,7 +354,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n \n     fn visit_generics(&mut self, generics: &'ast hir::Generics) {\n         for ty_param in generics.ty_params.iter() {\n-            self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.name));\n+            self.create_def(ty_param.id, DefPathData::TypeParam(ty_param.name.as_str()));\n         }\n \n         intravisit::walk_generics(self, generics);\n@@ -363,8 +363,8 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n         let def_data = match ti.node {\n             hir::MethodTraitItem(..) | hir::ConstTraitItem(..) =>\n-                DefPathData::ValueNs(ti.name),\n-            hir::TypeTraitItem(..) => DefPathData::TypeNs(ti.name),\n+                DefPathData::ValueNs(ti.name.as_str()),\n+            hir::TypeTraitItem(..) => DefPathData::TypeNs(ti.name.as_str()),\n         };\n \n         let def = self.create_def(ti.id, def_data);\n@@ -380,8 +380,8 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n         let def_data = match ii.node {\n             hir::ImplItemKind::Method(..) | hir::ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.name),\n-            hir::ImplItemKind::Type(..) => DefPathData::TypeNs(ii.name),\n+                DefPathData::ValueNs(ii.name.as_str()),\n+            hir::ImplItemKind::Type(..) => DefPathData::TypeNs(ii.name.as_str()),\n         };\n \n         let def = self.create_def(ii.id, def_data);\n@@ -398,7 +398,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n         let parent_def = self.parent_def;\n \n         if let hir::PatKind::Binding(_, name, _) = pat.node {\n-            let def = self.create_def(pat.id, DefPathData::Binding(name.node));\n+            let def = self.create_def(pat.id, DefPathData::Binding(name.node.as_str()));\n             self.parent_def = Some(def);\n         }\n \n@@ -430,10 +430,10 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     }\n \n     fn visit_lifetime_def(&mut self, def: &'ast hir::LifetimeDef) {\n-        self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name));\n+        self.create_def(def.lifetime.id, DefPathData::LifetimeDef(def.lifetime.name.as_str()));\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'ast hir::MacroDef) {\n-        self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.name));\n+        self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.name.as_str()));\n     }\n }"}, {"sha": "ad3e6eb80e9517ed1a492c9416bd239fc080e7b9", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=571010bb5208c57a0d1cfd27e712657ef1bb58dd", "patch": "@@ -177,31 +177,31 @@ pub enum DefPathData {\n     /// An impl\n     Impl,\n     /// Something in the type NS\n-    TypeNs(ast::Name),\n+    TypeNs(InternedString),\n     /// Something in the value NS\n-    ValueNs(ast::Name),\n+    ValueNs(InternedString),\n     /// A module declaration\n-    Module(ast::Name),\n+    Module(InternedString),\n     /// A macro rule\n-    MacroDef(ast::Name),\n+    MacroDef(InternedString),\n     /// A closure expression\n     ClosureExpr,\n \n     // Subportions of items\n     /// A type parameter (generic parameter)\n-    TypeParam(ast::Name),\n+    TypeParam(InternedString),\n     /// A lifetime definition\n-    LifetimeDef(ast::Name),\n+    LifetimeDef(InternedString),\n     /// A variant of a enum\n-    EnumVariant(ast::Name),\n+    EnumVariant(InternedString),\n     /// A struct field\n-    Field(ast::Name),\n+    Field(InternedString),\n     /// Implicit ctor for a tuple-like struct\n     StructCtor,\n     /// Initializer for a const\n     Initializer,\n     /// Pattern binding\n-    Binding(ast::Name),\n+    Binding(InternedString),\n }\n \n impl Definitions {\n@@ -315,16 +315,16 @@ impl DefPathData {\n     pub fn as_interned_str(&self) -> InternedString {\n         use self::DefPathData::*;\n         match *self {\n-            TypeNs(name) |\n-            ValueNs(name) |\n-            Module(name) |\n-            MacroDef(name) |\n-            TypeParam(name) |\n-            LifetimeDef(name) |\n-            EnumVariant(name) |\n-            Binding(name) |\n-            Field(name) => {\n-                name.as_str()\n+            TypeNs(ref name) |\n+            ValueNs(ref name) |\n+            Module(ref name) |\n+            MacroDef(ref name) |\n+            TypeParam(ref name) |\n+            LifetimeDef(ref name) |\n+            EnumVariant(ref name) |\n+            Binding(ref name) |\n+            Field(ref name) => {\n+                name.clone()\n             }\n \n             Impl => {"}, {"sha": "64b614b56e12fdffe444b86545fb03c77226adaa", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=571010bb5208c57a0d1cfd27e712657ef1bb58dd", "patch": "@@ -1690,7 +1690,7 @@ fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n             let mut decoder = reader::Decoder::new(def_key_doc);\n             let simple_key = def_key::DefKey::decode(&mut decoder).unwrap();\n             let name = reader::maybe_get_doc(item_doc, tag_paths_data_name).map(|name| {\n-                token::intern(name.as_str_slice())\n+                token::intern(name.as_str_slice()).as_str()\n             });\n             def_key::recover_def_key(simple_key, name)\n         }"}, {"sha": "2444d669f7f32345c8c95ec007130f17123a091f", "filename": "src/librustc_metadata/def_key.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc_metadata%2Fdef_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571010bb5208c57a0d1cfd27e712657ef1bb58dd/src%2Flibrustc_metadata%2Fdef_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdef_key.rs?ref=571010bb5208c57a0d1cfd27e712657ef1bb58dd", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::def_id::DefIndex;\n use rustc::hir::map as hir_map;\n-use syntax::ast::Name;\n+use syntax::parse::token::InternedString;\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct DefKey {\n@@ -75,7 +75,7 @@ fn simplify_def_path_data(data: hir_map::DefPathData) -> DefPathData {\n     }\n }\n \n-pub fn recover_def_key(key: DefKey, name: Option<Name>) -> hir_map::DefKey {\n+pub fn recover_def_key(key: DefKey, name: Option<InternedString>) -> hir_map::DefKey {\n     let data = hir_map::DisambiguatedDefPathData {\n         data: recover_def_path_data(key.disambiguated_data.data, name),\n         disambiguator: key.disambiguated_data.disambiguator,\n@@ -86,7 +86,7 @@ pub fn recover_def_key(key: DefKey, name: Option<Name>) -> hir_map::DefKey {\n     }\n }\n \n-fn recover_def_path_data(data: DefPathData, name: Option<Name>) -> hir_map::DefPathData {\n+fn recover_def_path_data(data: DefPathData, name: Option<InternedString>) -> hir_map::DefPathData {\n     match data {\n         DefPathData::CrateRoot => hir_map::DefPathData::CrateRoot,\n         DefPathData::Misc => hir_map::DefPathData::Misc,"}]}