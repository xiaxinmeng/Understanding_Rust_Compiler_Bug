{"sha": "5553901146fa80c652abdc514b38360a0ae7418d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NTM5MDExNDZmYTgwYzY1MmFiZGM1MTRiMzgzNjBhMGFlNzQxOGQ=", "commit": {"author": {"name": "cgswords", "email": "cameronswords@gmail.com", "date": "2016-07-18T04:45:06Z"}, "committer": {"name": "cgswords", "email": "cameronswords@gmail.com", "date": "2016-07-25T21:27:10Z"}, "message": "Adressed PR comments.", "tree": {"sha": "722ec8d11d396c7a65fd3617d3a3c0d47ed8f234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722ec8d11d396c7a65fd3617d3a3c0d47ed8f234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5553901146fa80c652abdc514b38360a0ae7418d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5553901146fa80c652abdc514b38360a0ae7418d", "html_url": "https://github.com/rust-lang/rust/commit/5553901146fa80c652abdc514b38360a0ae7418d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5553901146fa80c652abdc514b38360a0ae7418d/comments", "author": {"login": "cgswords", "id": 1130991, "node_id": "MDQ6VXNlcjExMzA5OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1130991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgswords", "html_url": "https://github.com/cgswords", "followers_url": "https://api.github.com/users/cgswords/followers", "following_url": "https://api.github.com/users/cgswords/following{/other_user}", "gists_url": "https://api.github.com/users/cgswords/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgswords/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgswords/subscriptions", "organizations_url": "https://api.github.com/users/cgswords/orgs", "repos_url": "https://api.github.com/users/cgswords/repos", "events_url": "https://api.github.com/users/cgswords/events{/privacy}", "received_events_url": "https://api.github.com/users/cgswords/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgswords", "id": 1130991, "node_id": "MDQ6VXNlcjExMzA5OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1130991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgswords", "html_url": "https://github.com/cgswords", "followers_url": "https://api.github.com/users/cgswords/followers", "following_url": "https://api.github.com/users/cgswords/following{/other_user}", "gists_url": "https://api.github.com/users/cgswords/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgswords/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgswords/subscriptions", "organizations_url": "https://api.github.com/users/cgswords/orgs", "repos_url": "https://api.github.com/users/cgswords/repos", "events_url": "https://api.github.com/users/cgswords/events{/privacy}", "received_events_url": "https://api.github.com/users/cgswords/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e5ea1646367b82864af3a2a508993d76b792af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e5ea1646367b82864af3a2a508993d76b792af", "html_url": "https://github.com/rust-lang/rust/commit/a5e5ea1646367b82864af3a2a508993d76b792af"}], "stats": {"total": 90, "additions": 30, "deletions": 60}, "files": [{"sha": "27e1d0520dc9a323706e73c2853fa1e9a0ed51fb", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -367,18 +367,18 @@ pub fn gather_attr(attr: &ast::Attribute)\n \n     let meta = &attr.node.value;\n     let metas = if let Some(metas) = meta.meta_item_list() {\n-                    metas\n-                } else {\n-                    out.push(Err(meta.span));\n-                    return out;\n-                };\n+        metas\n+    } else {\n+        out.push(Err(meta.span));\n+        return out;\n+    };\n \n     for meta in metas {\n         out.push(if meta.is_word() {\n-                     Ok((meta.name().clone(), level, meta.span))\n-                 } else {\n-                     Err(meta.span)\n-                 });\n+            Ok((meta.name().clone(), level, meta.span))\n+        } else {\n+            Err(meta.span)\n+        });\n     }\n \n     out"}, {"sha": "07a2605026abe920ed12120500200e8d4c764d30", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -394,11 +394,10 @@ fn check_cfg(sopts: &config::Options,\n     let mut saw_invalid_predicate = false;\n     for item in sopts.cfg.iter() {\n         if item.is_meta_item_list() {\n-            saw_invalid_predicate = true;\n             saw_invalid_predicate = true;\n             handler.emit(&MultiSpan::new(),\n                          &format!(\"invalid predicate in --cfg command line argument: `{}`\",\n-                                  pred),\n+                                  item.name()),\n                             errors::Level::Fatal);\n         }\n     }\n@@ -651,10 +650,8 @@ impl RustcDefaultCalls {\n                         if cfg.is_word() {\n                             println!(\"{}\", cfg.name());\n                         } else if cfg.is_value_str() {\n-                            let rhs = cfg.value_str();\n-                            match rhs {\n-                                Some(s) => println!(\"{}=\\\"{}\\\"\", cfg.name(), s),\n-                                None => continue,\n+                            if let Some(s) = cfg.value_str() {\n+                                println!(\"{}=\\\"{}\\\"\", cfg.name(), s);\n                             }\n                         } else if cfg.is_meta_item_list() {\n                             // Right now there are not and should not be any"}, {"sha": "774c5ca6d6b239a75b8a72ad583f23248e698280", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -114,9 +114,7 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n                         id = Some(meta_item.name().clone());\n                     } else {\n                         // FIXME better-encapsulate meta_item (don't directly access `node`)\n-                        self.tcx.sess.span_err(\n-                            meta_item.span(),\n-                            &format!(\"unexpected meta-item {:?}\", meta_item.node));\n+                        span_bug!(meta_item.span(), \"unexpected meta-item {:?}\", meta_item.node)\n                     }\n                 }\n                 let id = id.unwrap_or(InternedString::new(ID));\n@@ -133,9 +131,7 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n                         id = Some(meta_item.name().clone());\n                     } else {\n                         // FIXME better-encapsulate meta_item (don't directly access `node`)\n-                        self.tcx.sess.span_err(\n-                            meta_item.span(),\n-                            &format!(\"unexpected meta-item {:?}\", meta_item.node));\n+                        span_bug!(meta_item.span(), \"unexpected meta-item {:?}\", meta_item.node)\n                     }\n                 }\n                 let dep_node = match dep_node_interned {"}, {"sha": "7547e28625c18eae079f660280d0950e971728c6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -298,13 +298,7 @@ impl MissingDoc {\n             }\n         }\n \n-        let has_doc = attrs.iter().any(|a| {\n-            if a.is_value_str() && a.name() == \"doc\" {\n-                true\n-            } else {\n-                false\n-            }\n-        });\n+        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.name() == \"doc\");\n         if !has_doc {\n             cx.span_lint(MISSING_DOCS, sp,\n                          &format!(\"missing documentation for {}\", desc));"}, {"sha": "6883c22d67525e8cae4c5e28ad81b995caffe8fe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -504,7 +504,7 @@ impl Clean<Attribute> for ast::MetaItem {\n             NameValue(self.name().to_string(), v.to_string())\n         } else { // must be a list\n             let l = self.meta_item_list().unwrap();\n-              List(self.name().to_string(), l.clean(cx))\n+            List(self.name().to_string(), l.clean(cx))\n        }\n     }\n }\n@@ -2589,26 +2589,6 @@ impl ToSource for syntax_pos::Span {\n     }\n }\n \n-// fn lit_to_string(lit: &ast::Lit) -> String {\n-//     match lit.node {\n-//         ast::LitKind::Str(ref st, _) => st.to_string(),\n-//         ast::LitKind::ByteStr(ref data) => format!(\"{:?}\", data),\n-//         ast::LitKind::Byte(b) => {\n-//             let mut res = String::from(\"b'\");\n-//             for c in (b as char).escape_default() {\n-//                 res.push(c);\n-//             }\n-//             res.push('\\'');\n-//             res\n-//         },\n-//         ast::LitKind::Char(c) => format!(\"'{}'\", c),\n-//         ast::LitKind::Int(i, _t) => i.to_string(),\n-//         ast::LitKind::Float(ref f, _t) => f.to_string(),\n-//         ast::LitKind::FloatUnsuffixed(ref f) => f.to_string(),\n-//         ast::LitKind::Bool(b) => b.to_string(),\n-//     }\n-// }\n-\n fn name_from_pat(p: &hir::Pat) -> String {\n     use rustc::hir::*;\n     debug!(\"Trying to get a name from pattern: {:?}\", p);"}, {"sha": "b622f6861b38379059ea23b23994b76792b9265c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -94,10 +94,16 @@ pub trait AttrMetaMethods {\n \n     /// Indicates if the attribute is a Word.\n     fn is_word(&self) -> bool;\n+\n     /// Indicates if the attribute is a Value String.\n-    fn is_value_str(&self) -> bool;\n+    fn is_value_str(&self) -> bool {\n+        self.value_str().is_some()\n+    }\n+\n     /// Indicates if the attribute is a Meta-Item List.\n-    fn is_meta_item_list(&self) -> bool;\n+    fn is_meta_item_list(&self) -> bool {\n+        self.meta_item_list().is_some()\n+    }\n \n     fn span(&self) -> Span;\n }\n@@ -119,9 +125,6 @@ impl AttrMetaMethods for Attribute {\n     }\n \n     fn is_word(&self) -> bool { self.meta().is_word() }\n-    fn is_value_str(&self) -> bool { self.meta().is_value_str() }\n-\n-    fn is_meta_item_list(&self) -> bool { self.meta().is_meta_item_list() }\n \n     fn span(&self) -> Span { self.meta().span }\n }\n@@ -161,10 +164,6 @@ impl AttrMetaMethods for MetaItem {\n         }\n     }\n \n-    fn is_value_str(&self) -> bool { self.value_str().is_some() }\n-\n-    fn is_meta_item_list(&self) -> bool { self.meta_item_list().is_some() }\n-\n     fn span(&self) -> Span { self.span }\n }\n \n@@ -240,7 +239,7 @@ pub fn mk_word_item(name: InternedString) -> P<MetaItem> {\n \n pub fn mk_spanned_name_value_item(sp: Span, name: InternedString, value: ast::Lit)\n                           -> P<MetaItem> {\n-    P(respan(sp,MetaItemKind::NameValue(name, value)))\n+    P(respan(sp, MetaItemKind::NameValue(name, value)))\n }\n \n pub fn mk_spanned_list_item(sp: Span, name: InternedString, items: Vec<P<MetaItem>>)\n@@ -249,7 +248,7 @@ pub fn mk_spanned_list_item(sp: Span, name: InternedString, items: Vec<P<MetaIte\n }\n \n pub fn mk_spanned_word_item(sp: Span, name: InternedString) -> P<MetaItem> {\n-    P(respan(sp,MetaItemKind::Word(name)))\n+    P(respan(sp, MetaItemKind::Word(name)))\n }\n \n "}, {"sha": "b1ec7fd0ab8965eeb857fff139873b05e90c4e9d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553901146fa80c652abdc514b38360a0ae7418d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=5553901146fa80c652abdc514b38360a0ae7418d", "patch": "@@ -254,6 +254,10 @@ pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n // For code appearing from the command line\n pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n \n+// For code generated by a procedural macro, without knowing which\n+// Used in `qquote!`\n+pub const PROC_EXPN: ExpnId = ExpnId(!2);\n+\n impl ExpnId {\n     pub fn from_u32(id: u32) -> ExpnId {\n         ExpnId(id)"}]}