{"sha": "f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTQyNWRmY2QyYTE1NmZmMmYxN2U2ZGQ0ZjlkY2ZhZWU5ZjU5MDU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-19T12:32:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-25T13:43:48Z"}, "message": "incr.comp.: Implement query diagnostic persistence.", "tree": {"sha": "37a89dc6c2ccbdacc2393bcff49f4e8afb92e14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a89dc6c2ccbdacc2393bcff49f4e8afb92e14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "html_url": "https://github.com/rust-lang/rust/commit/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686d2a7f14d5a8068b70d59476cd564c62a5677d", "url": "https://api.github.com/repos/rust-lang/rust/commits/686d2a7f14d5a8068b70d59476cd564c62a5677d", "html_url": "https://github.com/rust-lang/rust/commit/686d2a7f14d5a8068b70d59476cd564c62a5677d"}], "stats": {"total": 398, "additions": 362, "deletions": 36}, "files": [{"sha": "6504c1232ff09a4937c97ee3d2990941d8efdb3f", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use errors::DiagnosticBuilder;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHashingContextProvider};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -568,6 +569,24 @@ impl DepGraph {\n                       \"DepGraph::try_mark_green() - Duplicate fingerprint \\\n                       insertion for {:?}\", dep_node);\n \n+        // ... emitting any stored diagnostic ...\n+        {\n+            let diagnostics = tcx.on_disk_query_result_cache\n+                                 .load_diagnostics(prev_dep_node_index);\n+\n+            if diagnostics.len() > 0 {\n+                let handle = tcx.sess.diagnostic();\n+\n+                // Promote the previous diagnostics to the current session.\n+                tcx.on_disk_query_result_cache\n+                   .store_diagnostics(dep_node_index, diagnostics.clone());\n+\n+                for diagnostic in diagnostics {\n+                    DiagnosticBuilder::new_diagnostic(handle, diagnostic).emit();\n+                }\n+            }\n+        }\n+\n         // ... and finally storing a \"Green\" entry in the color map.\n         let old_color = data.colors\n                             .borrow_mut()"}, {"sha": "a472183698abf5bf205efd69a32062d25dfb5c0a", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -26,4 +26,4 @@ pub use self::prev::PreviousDepGraph;\n pub use self::query::DepGraphQuery;\n pub use self::safe::AssertDepGraphSafe;\n pub use self::safe::DepGraphSafe;\n-pub use self::serialized::SerializedDepGraph;\n+pub use self::serialized::{SerializedDepGraph, SerializedDepNodeIndex};"}, {"sha": "a81d314ac84dc1748c80b2318765aad2bd910075", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -46,6 +46,7 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n+#![feature(inclusive_range_syntax)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(nonzero)]"}, {"sha": "c577cf4af3d071721b545dda2585e4827d9fdab7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -853,6 +853,11 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub dep_graph: DepGraph,\n \n+    /// This provides access to the incr. comp. on-disk cache for query results.\n+    /// Do not access this directly. It is only meant to be used by\n+    /// `DepGraph::try_mark_green()` and the query infrastructure in `ty::maps`.\n+    pub(crate) on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n+\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -1054,6 +1059,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   resolutions: ty::Resolutions,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   hir: hir_map::Map<'tcx>,\n+                                  on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n                                   crate_name: &str,\n                                   tx: mpsc::Sender<Box<Any + Send>>,\n                                   output_filenames: &OutputFilenames,\n@@ -1137,6 +1143,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_arenas: arenas,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n+            on_disk_query_result_cache,\n             types: common_types,\n             named_region_map: NamedRegionMap {\n                 defs,\n@@ -1298,6 +1305,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.in_scope_traits_map(def_index);\n         }\n     }\n+\n+    pub fn serialize_query_result_cache<E>(self,\n+                                           encoder: &mut E)\n+                                           -> Result<(), E::Error>\n+        where E: ::rustc_serialize::Encoder\n+    {\n+        self.on_disk_query_result_cache.serialize(encoder)\n+    }\n+\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "527142ff38bace3942e661c35f074352a93ead97", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -70,6 +70,9 @@ mod config;\n pub use self::config::QueryConfig;\n use self::config::QueryDescription;\n \n+mod on_disk_cache;\n+pub use self::on_disk_cache::OnDiskCache;\n+\n // Each of these maps also corresponds to a method on a\n // `Provider` trait for requesting a value of that type,\n // and a method on `Maps` itself for doing that in a"}, {"sha": "b1b844388134cf186f7e0d52ebd6a1436c5e795f", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -0,0 +1,204 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::indexed_vec::Idx;\n+use errors::Diagnostic;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n+                      SpecializedDecoder};\n+use session::Session;\n+use std::borrow::Cow;\n+use std::cell::RefCell;\n+use std::collections::BTreeMap;\n+use std::mem;\n+use syntax::codemap::{CodeMap, StableFilemapId};\n+use syntax_pos::{BytePos, Span, NO_EXPANSION, DUMMY_SP};\n+\n+pub struct OnDiskCache<'sess> {\n+    prev_diagnostics: FxHashMap<SerializedDepNodeIndex, Vec<Diagnostic>>,\n+\n+    _prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n+    codemap: &'sess CodeMap,\n+\n+    current_diagnostics: RefCell<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+struct Header {\n+    prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable)]\n+struct Body {\n+    diagnostics: Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)>,\n+}\n+\n+impl<'sess> OnDiskCache<'sess> {\n+    pub fn new_empty(codemap: &'sess CodeMap) -> OnDiskCache<'sess> {\n+        OnDiskCache {\n+            prev_diagnostics: FxHashMap(),\n+            _prev_filemap_starts: BTreeMap::new(),\n+            codemap,\n+            current_diagnostics: RefCell::new(FxHashMap()),\n+        }\n+    }\n+\n+    pub fn new(sess: &'sess Session, data: &[u8]) -> OnDiskCache<'sess> {\n+        debug_assert!(sess.opts.incremental.is_some());\n+\n+        let mut decoder = opaque::Decoder::new(&data[..], 0);\n+        let header = Header::decode(&mut decoder).unwrap();\n+\n+        let prev_diagnostics: FxHashMap<_, _> = {\n+            let mut decoder = CacheDecoder {\n+                opaque: decoder,\n+                codemap: sess.codemap(),\n+                prev_filemap_starts: &header.prev_filemap_starts,\n+            };\n+            let body = Body::decode(&mut decoder).unwrap();\n+            body.diagnostics.into_iter().collect()\n+        };\n+\n+        OnDiskCache {\n+            prev_diagnostics,\n+            _prev_filemap_starts: header.prev_filemap_starts,\n+            codemap: sess.codemap(),\n+            current_diagnostics: RefCell::new(FxHashMap()),\n+        }\n+    }\n+\n+    pub fn serialize<'a, 'tcx, E>(&self,\n+                                  encoder: &mut E)\n+                                  -> Result<(), E::Error>\n+        where E: Encoder\n+    {\n+        let prev_filemap_starts: BTreeMap<_, _> = self\n+            .codemap\n+            .files()\n+            .iter()\n+            .map(|fm| (fm.start_pos, StableFilemapId::new(fm)))\n+            .collect();\n+\n+        Header { prev_filemap_starts }.encode(encoder)?;\n+\n+        let diagnostics: Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)> =\n+            self.current_diagnostics\n+                .borrow()\n+                .iter()\n+                .map(|(k, v)| (SerializedDepNodeIndex::new(k.index()), v.clone()))\n+                .collect();\n+\n+        Body { diagnostics }.encode(encoder)?;\n+\n+        Ok(())\n+    }\n+\n+    pub fn load_diagnostics(&self,\n+                            dep_node_index: SerializedDepNodeIndex)\n+                            -> Vec<Diagnostic> {\n+        self.prev_diagnostics.get(&dep_node_index).cloned().unwrap_or(vec![])\n+    }\n+\n+    pub fn store_diagnostics(&self,\n+                             dep_node_index: DepNodeIndex,\n+                             diagnostics: Vec<Diagnostic>) {\n+        let mut current_diagnostics = self.current_diagnostics.borrow_mut();\n+        let prev = current_diagnostics.insert(dep_node_index, diagnostics);\n+        debug_assert!(prev.is_none());\n+    }\n+\n+    pub fn store_diagnostics_for_anon_node(&self,\n+                                           dep_node_index: DepNodeIndex,\n+                                           mut diagnostics: Vec<Diagnostic>) {\n+        let mut current_diagnostics = self.current_diagnostics.borrow_mut();\n+\n+        let x = current_diagnostics.entry(dep_node_index).or_insert_with(|| {\n+            mem::replace(&mut diagnostics, Vec::new())\n+        });\n+\n+        x.extend(diagnostics.into_iter());\n+    }\n+}\n+\n+impl<'a> SpecializedDecoder<Span> for CacheDecoder<'a> {\n+    fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n+        let lo = BytePos::decode(self)?;\n+        let hi = BytePos::decode(self)?;\n+\n+        if let Some((prev_filemap_start, filemap_id)) = self.find_filemap_prev_bytepos(lo) {\n+            if let Some(current_filemap) = self.codemap.filemap_by_stable_id(filemap_id) {\n+                let lo = (lo + current_filemap.start_pos) - prev_filemap_start;\n+                let hi = (hi + current_filemap.start_pos) - prev_filemap_start;\n+                return Ok(Span::new(lo, hi, NO_EXPANSION));\n+            }\n+        }\n+\n+        Ok(DUMMY_SP)\n+    }\n+}\n+\n+struct CacheDecoder<'a> {\n+    opaque: opaque::Decoder<'a>,\n+    codemap: &'a CodeMap,\n+    prev_filemap_starts: &'a BTreeMap<BytePos, StableFilemapId>,\n+}\n+\n+impl<'a> CacheDecoder<'a> {\n+    fn find_filemap_prev_bytepos(&self,\n+                                 prev_bytepos: BytePos)\n+                                 -> Option<(BytePos, StableFilemapId)> {\n+        for (start, id) in self.prev_filemap_starts.range(BytePos(0) ... prev_bytepos).rev() {\n+            return Some((*start, *id))\n+        }\n+\n+        None\n+    }\n+}\n+\n+macro_rules! decoder_methods {\n+    ($($name:ident -> $ty:ty;)*) => {\n+        $(fn $name(&mut self) -> Result<$ty, Self::Error> {\n+            self.opaque.$name()\n+        })*\n+    }\n+}\n+\n+impl<'sess> Decoder for CacheDecoder<'sess> {\n+    type Error = String;\n+\n+    decoder_methods! {\n+        read_nil -> ();\n+\n+        read_u128 -> u128;\n+        read_u64 -> u64;\n+        read_u32 -> u32;\n+        read_u16 -> u16;\n+        read_u8 -> u8;\n+        read_usize -> usize;\n+\n+        read_i128 -> i128;\n+        read_i64 -> i64;\n+        read_i32 -> i32;\n+        read_i16 -> i16;\n+        read_i8 -> i8;\n+        read_isize -> isize;\n+\n+        read_bool -> bool;\n+        read_f64 -> f64;\n+        read_f32 -> f32;\n+        read_char -> char;\n+        read_str -> Cow<str>;\n+    }\n+\n+    fn error(&mut self, err: &str) -> Self::Error {\n+        self.opaque.error(err)\n+    }\n+}"}, {"sha": "732adcefcdea10c48786c2246c13c3508ead350b", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -13,14 +13,14 @@\n //! provider, manage the caches, and so forth.\n \n use dep_graph::{DepNodeIndex, DepNode, DepKind, DepNodeColor};\n-use errors::{Diagnostic, DiagnosticBuilder};\n+use errors::DiagnosticBuilder;\n use ty::{TyCtxt};\n use ty::maps::Query; // NB: actually generated by the macros in this file\n use ty::maps::config::QueryDescription;\n use ty::item_path;\n \n use rustc_data_structures::fx::{FxHashMap};\n-use std::cell::{RefMut, Cell};\n+use std::cell::RefMut;\n use std::marker::PhantomData;\n use std::mem;\n use syntax_pos::Span;\n@@ -33,34 +33,19 @@ pub(super) struct QueryMap<D: QueryDescription> {\n pub(super) struct QueryValue<T> {\n     pub(super) value: T,\n     pub(super) index: DepNodeIndex,\n-    pub(super) diagnostics: Option<Box<QueryDiagnostics>>,\n }\n \n impl<T> QueryValue<T> {\n     pub(super) fn new(value: T,\n-                      dep_node_index: DepNodeIndex,\n-                      diagnostics: Vec<Diagnostic>)\n+                      dep_node_index: DepNodeIndex)\n                       -> QueryValue<T> {\n         QueryValue {\n             value,\n             index: dep_node_index,\n-            diagnostics: if diagnostics.len() == 0 {\n-                None\n-            } else {\n-                Some(Box::new(QueryDiagnostics {\n-                    diagnostics,\n-                    emitted_diagnostics: Cell::new(true),\n-                }))\n-            },\n         }\n     }\n }\n \n-pub(super) struct QueryDiagnostics {\n-    pub(super) diagnostics: Vec<Diagnostic>,\n-    pub(super) emitted_diagnostics: Cell<bool>,\n-}\n-\n impl<M: QueryDescription> QueryMap<M> {\n     pub(super) fn new() -> QueryMap<M> {\n         QueryMap {\n@@ -284,16 +269,6 @@ macro_rules! define_maps {\n                 );\n \n                 if let Some(value) = tcx.maps.$name.borrow().map.get(&key) {\n-                    if let Some(ref d) = value.diagnostics {\n-                        if !d.emitted_diagnostics.get() {\n-                            d.emitted_diagnostics.set(true);\n-                            let handle = tcx.sess.diagnostic();\n-                            for diagnostic in d.diagnostics.iter() {\n-                                DiagnosticBuilder::new_diagnostic(handle, diagnostic.clone())\n-                                    .emit();\n-                            }\n-                        }\n-                    }\n                     profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n                     tcx.dep_graph.read_index(value.index);\n                     return Ok((&value.value).clone());\n@@ -331,7 +306,11 @@ macro_rules! define_maps {\n                     let ((result, dep_node_index), diagnostics) = res;\n \n                     tcx.dep_graph.read_index(dep_node_index);\n-                    let value = QueryValue::new(result, dep_node_index, diagnostics);\n+\n+                    tcx.on_disk_query_result_cache\n+                       .store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n+\n+                    let value = QueryValue::new(result, dep_node_index);\n \n                     return Ok((&tcx.maps\n                                     .$name\n@@ -398,8 +377,11 @@ macro_rules! define_maps {\n             {\n                 debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n \n-                // We don't do any caching yet, so recompute\n-                let (result, diagnostics) = tcx.cycle_check(span, Query::$name(key), || {\n+                // We don't do any caching yet, so recompute.\n+                // The diagnostics for this query have already been promoted to\n+                // the current session during try_mark_green(), so we can ignore\n+                // them here.\n+                let (result, _) = tcx.cycle_check(span, Query::$name(key), || {\n                     tcx.sess.diagnostic().track_diagnostics(|| {\n                         // The dep-graph for this computation is already in place\n                         tcx.dep_graph.with_ignore(|| {\n@@ -412,7 +394,7 @@ macro_rules! define_maps {\n                     tcx.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n                 }\n \n-                let value = QueryValue::new(result, dep_node_index, diagnostics);\n+                let value = QueryValue::new(result, dep_node_index);\n \n                 Ok((&tcx.maps\n                          .$name\n@@ -447,7 +429,12 @@ macro_rules! define_maps {\n                     tcx.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n                 }\n \n-                let value = QueryValue::new(result, dep_node_index, diagnostics);\n+                if dep_node.kind != ::dep_graph::DepKind::Null {\n+                    tcx.on_disk_query_result_cache\n+                       .store_diagnostics(dep_node_index, diagnostics);\n+                }\n+\n+                let value = QueryValue::new(result, dep_node_index);\n \n                 Ok(((&tcx.maps\n                          .$name"}, {"sha": "6cbf17f459c5dd56fec18ce6689b0a1c3e639aa0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -941,6 +941,10 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let time_passes = sess.time_passes();\n \n+    let query_result_on_disk_cache = time(time_passes,\n+        \"load query result cache\",\n+        || rustc_incremental::load_query_result_cache(sess));\n+\n     let named_region_map = time(time_passes,\n                                 \"lifetime resolution\",\n                                 || middle::resolve_lifetime::krate(sess, cstore, &hir_map))?;\n@@ -1049,6 +1053,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              resolutions,\n                              named_region_map,\n                              hir_map,\n+                             query_result_on_disk_cache,\n                              name,\n                              tx,\n                              output_filenames,"}, {"sha": "e82c2897d21325da73b07d053c8b89c6e5a45660", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -17,6 +17,9 @@\n \n #![feature(rand)]\n #![feature(conservative_impl_trait)]\n+#![feature(i128_type)]\n+#![feature(inclusive_range_syntax)]\n+#![feature(specialization)]\n \n extern crate graphviz;\n #[macro_use] extern crate rustc;\n@@ -31,8 +34,9 @@ mod assert_dep_graph;\n mod persist;\n \n pub use assert_dep_graph::assert_dep_graph;\n-pub use persist::load_dep_graph;\n pub use persist::dep_graph_tcx_init;\n+pub use persist::load_dep_graph;\n+pub use persist::load_query_result_cache;\n pub use persist::save_dep_graph;\n pub use persist::save_trans_partition;\n pub use persist::save_work_products;"}, {"sha": "3c0090c4b457226a4098233c81c4e151a58e3367", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -131,6 +131,7 @@ const LOCK_FILE_EXT: &'static str = \".lock\";\n const DEP_GRAPH_FILENAME: &'static str = \"dep-graph.bin\";\n const WORK_PRODUCTS_FILENAME: &'static str = \"work-products.bin\";\n const METADATA_HASHES_FILENAME: &'static str = \"metadata.bin\";\n+const QUERY_CACHE_FILENAME: &'static str = \"query-cache.bin\";\n \n // We encode integers using the following base, so they are shorter than decimal\n // or hexadecimal numbers (we want short file and directory names). Since these\n@@ -150,6 +151,10 @@ pub fn metadata_hash_export_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, METADATA_HASHES_FILENAME)\n }\n \n+pub fn query_cache_path(sess: &Session) -> PathBuf {\n+    in_incr_comp_dir_sess(sess, QUERY_CACHE_FILENAME)\n+}\n+\n pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     let crate_dir = session_dir.parent().unwrap();\n "}, {"sha": "158e9f2677a72b851e1fa7f5c6b467b70acbedd8", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -15,6 +15,7 @@ use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc::ty::maps::OnDiskCache;\n use rustc::util::nodemap::DefIdMap;\n use rustc_serialize::Decodable as RustcDecodable;\n use rustc_serialize::opaque::Decoder;\n@@ -195,3 +196,15 @@ pub fn load_dep_graph(sess: &Session) -> PreviousDepGraph {\n         empty\n     }\n }\n+\n+pub fn load_query_result_cache<'sess>(sess: &'sess Session) -> OnDiskCache<'sess> {\n+    if sess.opts.incremental.is_none() {\n+        return OnDiskCache::new_empty(sess.codemap());\n+    }\n+\n+    if let Some(bytes) = load_data(sess, &query_cache_path(sess)) {\n+        OnDiskCache::new(sess, &bytes[..])\n+    } else {\n+        OnDiskCache::new_empty(sess.codemap())\n+    }\n+}"}, {"sha": "82a43d85bc6082dcb2f5a55034d3a8a834091b1a", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -23,8 +23,9 @@ mod file_format;\n pub use self::fs::prepare_session_directory;\n pub use self::fs::finalize_session_directory;\n pub use self::fs::in_incr_comp_dir;\n-pub use self::load::load_dep_graph;\n pub use self::load::dep_graph_tcx_init;\n+pub use self::load::load_dep_graph;\n+pub use self::load::load_query_result_cache;\n pub use self::save::save_dep_graph;\n pub use self::save::save_work_products;\n pub use self::work_product::save_trans_partition;"}, {"sha": "711550c27d16ff916350a2399f776fb2872d6f0b", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -63,6 +63,12 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            e));\n     }\n \n+    time(sess.time_passes(), \"persist query result cache\", || {\n+        save_in(sess,\n+                query_cache_path(sess),\n+                |e| encode_query_cache(tcx, e));\n+    });\n+\n     time(sess.time_passes(), \"persist dep-graph\", || {\n         save_in(sess,\n                 dep_graph_path(sess),\n@@ -298,3 +304,9 @@ fn encode_work_products(dep_graph: &DepGraph,\n \n     work_products.encode(encoder)\n }\n+\n+fn encode_query_cache(tcx: TyCtxt,\n+                      encoder: &mut Encoder)\n+                      -> io::Result<()> {\n+    tcx.serialize_query_result_cache(encoder)\n+}"}, {"sha": "ad78c550cf60e1b1be5f32c2a4559a4b67567b85", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -17,11 +17,15 @@\n //! within the CodeMap, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n+\n pub use syntax_pos::*;\n pub use syntax_pos::hygiene::{ExpnFormat, ExpnInfo, NameAndSpan};\n pub use self::ExpnFormat::*;\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::StableHasher;\n use std::cell::{RefCell, Ref};\n+use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n \n@@ -98,6 +102,24 @@ impl FileLoader for RealFileLoader {\n     }\n }\n \n+// This is a FileMap identifier that is used to correlate FileMaps between\n+// subsequent compilation sessions (which is something we need to do during\n+// incremental compilation).\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct StableFilemapId(u128);\n+\n+impl StableFilemapId {\n+    pub fn new(filemap: &FileMap) -> StableFilemapId {\n+        let mut hasher = StableHasher::new();\n+\n+        filemap.name.hash(&mut hasher);\n+        filemap.name_was_remapped.hash(&mut hasher);\n+        filemap.unmapped_path.hash(&mut hasher);\n+\n+        StableFilemapId(hasher.finish())\n+    }\n+}\n+\n // _____________________________________________________________________________\n // CodeMap\n //\n@@ -108,6 +130,7 @@ pub struct CodeMap {\n     // This is used to apply the file path remapping as specified via\n     // -Zremap-path-prefix to all FileMaps allocated within this CodeMap.\n     path_mapping: FilePathMapping,\n+    stable_id_to_filemap: RefCell<FxHashMap<StableFilemapId, Rc<FileMap>>>,\n }\n \n impl CodeMap {\n@@ -116,6 +139,7 @@ impl CodeMap {\n             files: RefCell::new(Vec::new()),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n+            stable_id_to_filemap: RefCell::new(FxHashMap()),\n         }\n     }\n \n@@ -126,6 +150,7 @@ impl CodeMap {\n             files: RefCell::new(Vec::new()),\n             file_loader,\n             path_mapping,\n+            stable_id_to_filemap: RefCell::new(FxHashMap()),\n         }\n     }\n \n@@ -146,6 +171,10 @@ impl CodeMap {\n         self.files.borrow()\n     }\n \n+    pub fn filemap_by_stable_id(&self, stable_id: StableFilemapId) -> Option<Rc<FileMap>> {\n+        self.stable_id_to_filemap.borrow().get(&stable_id).map(|fm| fm.clone())\n+    }\n+\n     fn next_start_pos(&self) -> usize {\n         let files = self.files.borrow();\n         match files.last() {\n@@ -180,6 +209,10 @@ impl CodeMap {\n \n         files.push(filemap.clone());\n \n+        self.stable_id_to_filemap\n+            .borrow_mut()\n+            .insert(StableFilemapId::new(&filemap), filemap.clone());\n+\n         filemap\n     }\n \n@@ -241,6 +274,10 @@ impl CodeMap {\n \n         files.push(filemap.clone());\n \n+        self.stable_id_to_filemap\n+            .borrow_mut()\n+            .insert(StableFilemapId::new(&filemap), filemap.clone());\n+\n         filemap\n     }\n "}, {"sha": "bf66ac7829c2e9f5bcfe86b8e1993fb029b797e8", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=f55425dfcd2a156ff2f17e6dd4f9dcfaee9f5905", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Coverflow-checks=on\n+// must-compile-successfully\n+\n+#![allow(warnings)]\n+\n+fn main() {\n+    255u8 + 1; //~ WARNING this expression will panic at run-time\n+}"}]}