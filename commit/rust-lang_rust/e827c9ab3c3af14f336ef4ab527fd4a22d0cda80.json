{"sha": "e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjdjOWFiM2MzYWYxNGYzMzZlZjRhYjUyN2ZkNGEyMmQwY2RhODA=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-02-06T16:46:41Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-02-12T18:45:36Z"}, "message": "respect alternate flag when formatting impl trait", "tree": {"sha": "7a0489486cfb17f5e8e96f64813151f57b57e2cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a0489486cfb17f5e8e96f64813151f57b57e2cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlxjFFQWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdE9wB/43gWEuvUxds/gc2r5j4VVjI3A9\nGxqeMEQ1gKUCy/jmOBV5rbxwCI3NfhxdHr0O1ldKGQdDb4Tjww/t3c5A0xqchQGY\nXYFyuupTNczLeGg54cu7YhxhMfqwU9Y31e4gwbHLSxSvD4/gWZwraLUWbQnGN3OI\n0uC7Kloj/qczmVV4nZaFwZ+tI9Xuod+yYYnTPwnWfIweBlLWTtjOYLyYt4wdRoEN\nJzmbFvjbf5HNpv4/qKWoTOvVRImbPILPvb6nplPEeQZLJBcexs1wytY4EQF0YvIH\nww0XZX49bGMczPuJ97+4LTViUAQ2x1tZVSdomSnF/cdYbAWOMp6wSvaGA6Vy\n=SRuB\n-----END PGP SIGNATURE-----", "payload": "tree 7a0489486cfb17f5e8e96f64813151f57b57e2cb\nparent 57d7cfc3cf50f0c427ad3043ff09eaef20671320\nauthor Andy Russell <arussell123@gmail.com> 1549471601 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1549997136 -0500\n\nrespect alternate flag when formatting impl trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "html_url": "https://github.com/rust-lang/rust/commit/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "c7edc4a836fee3d8564bec62e9efd07e1c68ad03", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "patch": "@@ -49,8 +49,11 @@ pub struct AbiSpace(pub Abi);\n pub struct Function<'a> {\n     /// The declaration to emit.\n     pub decl: &'a clean::FnDecl,\n-    /// The length of the function's \"name\", used to determine line-wrapping.\n-    pub name_len: usize,\n+    /// The length of the function header and name. In other words, the number of characters in the\n+    /// function declaration up to but not including the parentheses.\n+    ///\n+    /// Used to determine line-wrapping.\n+    pub header_len: usize,\n     /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n     pub indent: usize,\n     /// Whether the function is async or not.\n@@ -665,7 +668,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl {}\", GenericBounds(bounds))\n+            if f.alternate() {\n+                write!(f, \"impl {:#}\", GenericBounds(bounds))\n+            } else {\n+                write!(f, \"impl {}\", GenericBounds(bounds))\n+            }\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {\n@@ -834,7 +841,7 @@ impl fmt::Display for clean::FnDecl {\n \n impl<'a> fmt::Display for Function<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &Function { decl, name_len, indent, asyncness } = self;\n+        let &Function { decl, header_len, indent, asyncness } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -889,6 +896,8 @@ impl<'a> fmt::Display for Function<'a> {\n             }\n         }\n \n+        let mut args_plain = format!(\"({})\", args_plain);\n+\n         if decl.variadic {\n             args.push_str(\",<br> ...\");\n             args_plain.push_str(\", ...\");\n@@ -907,13 +916,8 @@ impl<'a> fmt::Display for Function<'a> {\n             output.to_string()\n         };\n \n-        let pad = \" \".repeat(name_len);\n-        let plain = format!(\"{pad}({args}){arrow}\",\n-                        pad = pad,\n-                        args = args_plain,\n-                        arrow = arrow_plain);\n-\n-        let output = if plain.len() > 80 {\n+        let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n+        let output = if declaration_len > 80 {\n             let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n             let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n             format!(\"({args}{close}){arrow}\","}, {"sha": "913a57fa6daa5d26151f102d76fd89b8cbbf40b1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "patch": "@@ -2962,14 +2962,16 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    let name_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                           VisSpace(&it.visibility),\n-                           ConstnessSpace(f.header.constness),\n-                           UnsafetySpace(f.header.unsafety),\n-                           AsyncSpace(f.header.asyncness),\n-                           AbiSpace(f.header.abi),\n-                           it.name.as_ref().unwrap(),\n-                           f.generics).len();\n+    let header_len = format!(\n+        \"{}{}{}{}{:#}fn {}{:#}\",\n+        VisSpace(&it.visibility),\n+        ConstnessSpace(f.header.constness),\n+        UnsafetySpace(f.header.unsafety),\n+        AsyncSpace(f.header.asyncness),\n+        AbiSpace(f.header.abi),\n+        it.name.as_ref().unwrap(),\n+        f.generics\n+    ).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n@@ -2985,7 +2987,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n            decl = Function {\n               decl: &f.decl,\n-              name_len,\n+              header_len,\n               indent: 0,\n               asyncness: f.header.asyncness,\n            })?;\n@@ -3400,16 +3402,18 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                 href(did).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n-        let mut head_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n-                                   VisSpace(&meth.visibility),\n-                                   ConstnessSpace(header.constness),\n-                                   UnsafetySpace(header.unsafety),\n-                                   AsyncSpace(header.asyncness),\n-                                   AbiSpace(header.abi),\n-                                   name,\n-                                   *g).len();\n+        let mut header_len = format!(\n+            \"{}{}{}{}{:#}fn {}{:#}\",\n+            VisSpace(&meth.visibility),\n+            ConstnessSpace(header.constness),\n+            UnsafetySpace(header.unsafety),\n+            AsyncSpace(header.asyncness),\n+            AbiSpace(header.abi),\n+            name,\n+            *g\n+        ).len();\n         let (indent, end_newline) = if parent == ItemType::Trait {\n-            head_len += 4;\n+            header_len += 4;\n             (4, false)\n         } else {\n             (0, true)\n@@ -3427,7 +3431,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                generics = *g,\n                decl = Function {\n                    decl: d,\n-                   name_len: head_len,\n+                   header_len,\n                    indent,\n                    asyncness: header.asyncness,\n                },"}, {"sha": "8d8221bcdf29342cd9a66fa6c73e392ec87c99df", "filename": "src/test/rustdoc/wrapping.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Ftest%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e827c9ab3c3af14f336ef4ab527fd4a22d0cda80/src%2Ftest%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwrapping.rs?ref=e827c9ab3c3af14f336ef4ab527fd4a22d0cda80", "patch": "@@ -0,0 +1,5 @@\n+use std::fmt::Debug;\n+\n+// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust fn\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//pre[@class=\"rust fn\"]/br' 0\n+pub fn foo() -> impl Debug {}"}]}