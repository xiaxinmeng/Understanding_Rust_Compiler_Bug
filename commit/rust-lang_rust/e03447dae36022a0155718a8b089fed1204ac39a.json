{"sha": "e03447dae36022a0155718a8b089fed1204ac39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzQ0N2RhZTM2MDIyYTAxNTU3MThhOGIwODlmZWQxMjA0YWMzOWE=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-09-22T02:22:33Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-18T02:14:14Z"}, "message": "Fixed tidy errors", "tree": {"sha": "649b5709cb4d1f5e989947a2ea519ed92f116c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649b5709cb4d1f5e989947a2ea519ed92f116c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03447dae36022a0155718a8b089fed1204ac39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03447dae36022a0155718a8b089fed1204ac39a", "html_url": "https://github.com/rust-lang/rust/commit/e03447dae36022a0155718a8b089fed1204ac39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03447dae36022a0155718a8b089fed1204ac39a/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "html_url": "https://github.com/rust-lang/rust/commit/f61394f0bd9c7d5951d2f70207177ff5a6b038fa"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "07fa2a4d1a77c00119ba50053c8997d98efce860", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e03447dae36022a0155718a8b089fed1204ac39a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03447dae36022a0155718a8b089fed1204ac39a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e03447dae36022a0155718a8b089fed1204ac39a", "patch": "@@ -4987,7 +4987,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method or a macro invocation in a trait impl.\n     fn parse_impl_method(&mut self, vis: &Visibility, at_end: &mut bool)\n-                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics, ast::ImplItemKind)> {\n+                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics,\n+                             ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if self.token.is_path_start() {\n             // Method macro.\n@@ -5014,7 +5015,8 @@ impl<'a> Parser<'a> {\n             }\n \n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n-            Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(), ast::ImplItemKind::Macro(mac)))\n+            Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(),\n+                ast::ImplItemKind::Macro(mac)))\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;"}]}