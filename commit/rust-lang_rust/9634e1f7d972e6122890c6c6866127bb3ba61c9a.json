{"sha": "9634e1f7d972e6122890c6c6866127bb3ba61c9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzRlMWY3ZDk3MmU2MTIyODkwYzZjNjg2NjEyN2JiM2JhNjFjOWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T03:02:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-11T03:02:22Z"}, "message": "Rollup merge of #67806 - Centril:splitsynmore, r=petrochenkov\n\nExtract `rustc_ast_passes`, move gating, & refactor linting\n\nBased on https://github.com/rust-lang/rust/pull/67770.\n\nThis PR extracts a crate `rustc_ast_passes`:\n\n- `ast_validation.rs`, which is contributed by `rustc_passes` (now only has HIR based passes) -- the goal here is to improve recompilation of the parser,\n- `feature_gate.rs`, which is contributed by `syntax` and performs post-expansion-gating & final erroring for pre-expansion gating,\n- `show_span`, which is contributed by `syntax`.\n\nTo facilitate this, we first have to also:\n\n- Move `{leveled_}feature_err{_err}` from `syntax::feature_gate::check` into `rustc_session::parse`.\n- Move `get_features` into `rustc_parse::config`, the only place it is used.\n- Move some some lint datatypes and traits, e.g. `LintBuffer`, `BufferedEarlyLint`, `BuiltinLintDiagnostics`, `LintPass`, and `LintArray` into `rustc_session::lint`.\n- Move all the hard-wired lint `static`s into `rustc_session::lint::builtin`.", "tree": {"sha": "e3558129f2d8651ef785ed9acc01575550247608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3558129f2d8651ef785ed9acc01575550247608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9634e1f7d972e6122890c6c6866127bb3ba61c9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGTq+CRBK7hj4Ov3rIwAAdHIIALD77xCzpg3pMWL4IfZhRL8y\naKoDBSuVP0FgLQiptDLLMb1pkG4L6Nh/RrBxCUAaURikLcIxKjDez/0rtlIW3NEa\n/oyUlYxAntLlokOXvq0mUWIGzEtrbKoW5OIOCrgocp6iBDvZSxVjCwgRGu0fbuDI\n4YM8bIc0GlzHiljsY2GzuEs+1vnTbrRfu8CqwSbFCiFPwW6qXssFX0d4NN9zCJaJ\nbjHOIplBDDz24eKBsRhoh2ip3jDVcdoQQhfyRY1FjvyL7ISI2Wn6aKpSJ0L1IbrV\n6aesUkx0VNmR+WZ1ELKfnMuy9EFYUP9PxNCoYHCyiqHJZt6kdjEJNt52rvJE9sQ=\n=TCwo\n-----END PGP SIGNATURE-----\n", "payload": "tree e3558129f2d8651ef785ed9acc01575550247608\nparent 76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6\nparent 682f500c8f5d54197d8974b5c4371306e2faecc8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578711742 +0100\ncommitter GitHub <noreply@github.com> 1578711742 +0100\n\nRollup merge of #67806 - Centril:splitsynmore, r=petrochenkov\n\nExtract `rustc_ast_passes`, move gating, & refactor linting\n\nBased on https://github.com/rust-lang/rust/pull/67770.\n\nThis PR extracts a crate `rustc_ast_passes`:\n\n- `ast_validation.rs`, which is contributed by `rustc_passes` (now only has HIR based passes) -- the goal here is to improve recompilation of the parser,\n- `feature_gate.rs`, which is contributed by `syntax` and performs post-expansion-gating & final erroring for pre-expansion gating,\n- `show_span`, which is contributed by `syntax`.\n\nTo facilitate this, we first have to also:\n\n- Move `{leveled_}feature_err{_err}` from `syntax::feature_gate::check` into `rustc_session::parse`.\n- Move `get_features` into `rustc_parse::config`, the only place it is used.\n- Move some some lint datatypes and traits, e.g. `LintBuffer`, `BufferedEarlyLint`, `BuiltinLintDiagnostics`, `LintPass`, and `LintArray` into `rustc_session::lint`.\n- Move all the hard-wired lint `static`s into `rustc_session::lint::builtin`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9634e1f7d972e6122890c6c6866127bb3ba61c9a", "html_url": "https://github.com/rust-lang/rust/commit/9634e1f7d972e6122890c6c6866127bb3ba61c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9634e1f7d972e6122890c6c6866127bb3ba61c9a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6", "html_url": "https://github.com/rust-lang/rust/commit/76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6"}, {"sha": "682f500c8f5d54197d8974b5c4371306e2faecc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/682f500c8f5d54197d8974b5c4371306e2faecc8", "html_url": "https://github.com/rust-lang/rust/commit/682f500c8f5d54197d8974b5c4371306e2faecc8"}], "stats": {"total": 1390, "additions": 711, "deletions": 679}, "files": [{"sha": "54ad60e71506b04e00648ce1251de3066881c4ef", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -3363,6 +3363,21 @@ dependencies = [\n  \"syntax\",\n ]\n \n+[[package]]\n+name = \"rustc_ast_passes\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_parse\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_builtin_macros\"\n version = \"0.0.0\"\n@@ -3375,6 +3390,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3528,11 +3544,13 @@ name = \"rustc_expand\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n+ \"rustc_ast_passes\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -3602,6 +3620,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc-rayon\",\n  \"rustc_ast_lowering\",\n+ \"rustc_ast_passes\",\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n@@ -3619,6 +3638,7 @@ dependencies = [\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n  \"rustc_resolve\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_traits\",\n@@ -3735,6 +3755,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n@@ -3753,7 +3774,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n- \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"syntax\",\n@@ -3833,6 +3854,7 @@ dependencies = [\n  \"log\",\n  \"num_cpus\",\n  \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\","}, {"sha": "3f18f4dbd1fe76a8986066f0e8216ba8ee34bb62", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 125, "deletions": 15, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -17,20 +17,21 @@\n use self::TargetLint::*;\n \n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::lint::{EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use crate::middle::privacy::AccessLevels;\n+use crate::middle::stability;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_error_codes::*;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -64,17 +65,6 @@ pub struct LintStore {\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n }\n \n-/// Lints that are buffered up early on in the `Session` before the\n-/// `LintLevels` is calculated\n-#[derive(PartialEq, Debug)]\n-pub struct BufferedEarlyLint {\n-    pub lint_id: LintId,\n-    pub ast_id: ast::NodeId,\n-    pub span: MultiSpan,\n-    pub msg: String,\n-    pub diagnostic: BuiltinLintDiagnostics,\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -477,6 +467,48 @@ impl LintPassObject for EarlyLintPassObject {}\n \n impl LintPassObject for LateLintPassObject {}\n \n+pub fn add_elided_lifetime_in_path_suggestion(\n+    sess: &Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        suggestion,\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n pub trait LintContext: Sized {\n     type PassObject: LintPassObject;\n \n@@ -495,7 +527,85 @@ pub trait LintContext: Sized {\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         let mut db = self.lookup(lint, span, msg);\n-        diagnostic.run(self.sess(), &mut db);\n+\n+        let sess = self.sess();\n+        match diagnostic {\n+            BuiltinLintDiagnostics::Normal => (),\n+            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(s) if is_global => {\n+                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n+                    }\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(ref s) => {\n+                        // FIXME(Manishearth) ideally the emitting code\n+                        // can tell us whether or not this is global\n+                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n+\n+                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n+                    }\n+                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `crate`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n+                db.span_label(\n+                    span,\n+                    \"names from parent modules are not accessible without an explicit import\",\n+                );\n+            }\n+            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n+                db.span_note(span_def, \"the macro is defined here\");\n+            }\n+            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                n,\n+                path_span,\n+                incl_angl_brckt,\n+                insertion_span,\n+                anon_lts,\n+            ) => {\n+                add_elided_lifetime_in_path_suggestion(\n+                    sess,\n+                    &mut db,\n+                    n,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_span,\n+                    anon_lts,\n+                );\n+            }\n+            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n+                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n+            }\n+            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+                if !replaces.is_empty() {\n+                    db.tool_only_multipart_suggestion(\n+                        &message,\n+                        replaces,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+                for (span, is_imported) in spans {\n+                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                    db.span_label(\n+                        span,\n+                        format!(\"the item `{}` is already {} here\", ident, introduced),\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n+                stability::deprecation_suggestion(&mut db, suggestion, span)\n+            }\n+        }\n+\n         db.emit();\n     }\n "}, {"sha": "30679226b9b71f2430281e77784c211598ec0bb2", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,13 +1,11 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::lint::{\n-    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n-};\n+use crate::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n-use rustc_session::declare_tool_lint;\n+use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};\n "}, {"sha": "e586ad1836c737926ad53c17fcb2422589709e10", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -13,8 +13,8 @@ use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate;\n use syntax::print::pprust;\n+use syntax::sess::feature_err;\n \n use rustc_error_codes::*;\n \n@@ -223,7 +223,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n-                                    feature_gate::feature_err(\n+                                    feature_err(\n                                         &self.sess.parse_sess,\n                                         sym::lint_reasons,\n                                         item.span,"}, {"sha": "4afeb14494850bd2742a253f08094239deb863ce", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 96, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -21,12 +21,11 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use rustc_data_structures::sync;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n@@ -35,48 +34,13 @@ use rustc_span::Span;\n use syntax::ast;\n \n pub use crate::lint::context::{\n-    BufferedEarlyLint, CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore,\n+    add_elided_lifetime_in_path_suggestion, CheckLintNameResult, EarlyContext, LateContext,\n+    LintContext, LintStore,\n };\n \n-pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n-\n-/// Declares a static `LintArray` and return it as an expression.\n-#[macro_export]\n-macro_rules! lint_array {\n-    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n-    ($( $lint:expr ),*) => {{\n-        vec![$($lint),*]\n-    }}\n-}\n-\n-pub type LintArray = Vec<&'static Lint>;\n-\n-pub trait LintPass {\n-    fn name(&self) -> &'static str;\n-}\n-\n-/// Implements `LintPass for $name` with the given list of `Lint` statics.\n-#[macro_export]\n-macro_rules! impl_lint_pass {\n-    ($name:ident => [$($lint:expr),* $(,)?]) => {\n-        impl LintPass for $name {\n-            fn name(&self) -> &'static str { stringify!($name) }\n-        }\n-        impl $name {\n-            pub fn get_lints() -> LintArray { $crate::lint_array!($($lint),*) }\n-        }\n-    };\n-}\n-\n-/// Declares a type named `$name` which implements `LintPass`.\n-/// To the right of `=>` a comma separated list of `Lint` statics is given.\n-#[macro_export]\n-macro_rules! declare_lint_pass {\n-    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n-        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n-        $crate::impl_lint_pass!($name => [$($lint),*]);\n-    };\n-}\n+pub use rustc_session::lint::builtin;\n+pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Level, Lint, LintId};\n+pub use rustc_session::lint::{LintArray, LintPass};\n \n #[macro_export]\n macro_rules! late_lint_methods {\n@@ -168,6 +132,8 @@ macro_rules! declare_late_lint_pass {\n \n late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n \n+impl LateLintPass<'_, '_> for HardwiredLints {}\n+\n #[macro_export]\n macro_rules! expand_combined_late_lint_pass_method {\n     ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n@@ -366,66 +332,12 @@ pub enum LintSource {\n \n pub type LevelSource = (Level, LintSource);\n \n-pub mod builtin;\n mod context;\n pub mod internal;\n mod levels;\n \n pub use self::levels::{LintLevelMap, LintLevelSets, LintLevelsBuilder};\n \n-#[derive(Default)]\n-pub struct LintBuffer {\n-    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n-}\n-\n-impl LintBuffer {\n-    pub fn add_lint(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: MultiSpan,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        let early_lint = BufferedEarlyLint {\n-            lint_id: LintId::of(lint),\n-            ast_id: id,\n-            span: sp,\n-            msg: msg.to_string(),\n-            diagnostic,\n-        };\n-        let arr = self.map.entry(id).or_default();\n-        if !arr.contains(&early_lint) {\n-            arr.push(early_lint);\n-        }\n-    }\n-\n-    pub fn take(&mut self, id: ast::NodeId) -> Vec<BufferedEarlyLint> {\n-        self.map.remove(&id).unwrap_or_default()\n-    }\n-\n-    pub fn buffer_lint<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n-    }\n-\n-    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n-    }\n-}\n-\n pub fn struct_lint_level<'a>(\n     sess: &'a Session,\n     lint: &'static Lint,"}, {"sha": "17e84c24881c1da8ea0ee9f8658bf4d28039ab46", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -3,7 +3,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n@@ -14,11 +13,12 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n-use syntax::feature_gate::feature_err_issue;\n+use syntax::sess::feature_err_issue;\n \n use std::num::NonZeroU32;\n \n@@ -195,7 +195,7 @@ pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String\n }\n \n pub fn early_report_deprecation(\n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,"}, {"sha": "77cb9ee35fff72757426ee76661086903f1b4472", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -37,7 +37,6 @@ use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::lint::builtin;\n use rustc::{bug, span_bug};\n use rustc_data_structures::captures::Captures;\n@@ -52,6 +51,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::NodeMap;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n@@ -198,7 +198,7 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n+    fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n }\n@@ -2617,7 +2617,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 id,\n                 span,\n                 \"trait objects without an explicit `dyn` are deprecated\",\n-                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+                BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n             )\n         }\n     }"}, {"sha": "65347d379bd6a19e97d19a67c8a07d4e6c879b0c", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,14 +1,15 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n+use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n use syntax::ast::{self, *};\n \n@@ -304,7 +305,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        crate::lint::builtin::add_elided_lifetime_in_path_suggestion(\n+                        rustc::lint::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,\n@@ -321,7 +322,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             CRATE_NODE_ID,\n                             path_span,\n                             \"hidden lifetime parameters in types are deprecated\",\n-                            builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n                                 expected_lifetimes,\n                                 path_span,\n                                 incl_angl_brckt,"}, {"sha": "dced4a0d15b0c6f313602759fdd7b66b1ff2e6d7", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -0,0 +1,20 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_ast_passes\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_ast_passes\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n+rustc_span = { path = \"../librustc_span\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "c915b7ba21692873630451ea71d230e3aafa4d72", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -6,11 +6,12 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use rustc::lint;\n-use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n+use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n+use rustc_session::lint::LintBuffer;\n+use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -65,7 +66,7 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n@@ -906,7 +907,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n \n-                Some(Constness::Const) => bug!(\"Parser should reject bare `const` on bounds\"),\n+                Some(Constness::Const) => panic!(\"Parser should reject bare `const` on bounds\"),\n                 None => {}\n             }\n         }\n@@ -992,7 +993,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n                     if mut_ident {\n                         self.lint_buffer.buffer_lint(\n-                            lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            PATTERNS_IN_FNS_WITHOUT_BODY,\n                             ti.id,\n                             span,\n                             \"patterns aren't allowed in methods without bodies\",\n@@ -1021,7 +1022,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {\n+pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) -> bool {\n     let mut validator = AstValidator {\n         session,\n         has_proc_macro_decls: false,", "previous_filename": "src/librustc_passes/ast_validation.rs"}, {"sha": "1e396d6fe8e47ed1ffe8f697a97f9b4f62978ace", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "renamed", "additions": 9, "deletions": 242, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,22 +1,15 @@\n-use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n-use crate::attr;\n-use crate::sess::ParseSess;\n-use crate::visit::{self, FnKind, Visitor};\n-\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n-use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n-use rustc_feature::{find_feature_issue, GateIssue};\n+use rustc_errors::{struct_span_err, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_feature::{Feature, Features, State as FeatureState, UnstableFeatures};\n-use rustc_feature::{\n-    ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n-};\n-use rustc_span::edition::{Edition, ALL_EDITIONS};\n+use rustc_feature::{Features, GateIssue, UnstableFeatures};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use syntax::attr;\n+use syntax::sess::{feature_err, leveled_feature_err, GateStrength, ParseSess};\n+use syntax::visit::{self, FnKind, Visitor};\n \n use log::debug;\n \n@@ -53,70 +46,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq)]\n-pub enum GateStrength {\n-    /// A hard error. (Most feature gates should use this.)\n-    Hard,\n-    /// Only a warning. (Use this only as backwards-compatibility demands.)\n-    Soft,\n-}\n-\n-pub fn feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n-}\n-\n-pub fn feature_err_issue<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n-}\n-\n-fn leveled_feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-    level: GateStrength,\n-) -> DiagnosticBuilder<'a> {\n-    let diag = &sess.span_diagnostic;\n-\n-    let mut err = match level {\n-        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n-        GateStrength::Soft => diag.struct_span_warn(span, explain),\n-    };\n-\n-    if let Some(n) = find_feature_issue(feature, issue) {\n-        err.note(&format!(\n-            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n-            n,\n-        ));\n-    }\n-\n-    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n-    if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n-    }\n-\n-    // If we're on stable and only emitting a \"soft\" warning, add a note to\n-    // clarify that the feature isn't \"on\" (rather than being on but\n-    // warning-worthy).\n-    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n-        err.help(\"a nightly build of the compiler is required to enable this feature\");\n-    }\n-\n-    err\n-}\n-\n struct PostExpansionVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     features: &'a Features,\n@@ -724,168 +653,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n }\n \n-pub fn get_features(\n-    span_handler: &Handler,\n-    krate_attrs: &[ast::Attribute],\n-    crate_edition: Edition,\n-    allow_features: &Option<Vec<String>>,\n-) -> Features {\n-    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n-        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n-        err.span_label(span, \"feature has been removed\");\n-        if let Some(reason) = reason {\n-            err.note(reason);\n-        }\n-        err.emit();\n-    }\n-\n-    let mut features = Features::default();\n-    let mut edition_enabled_features = FxHashMap::default();\n-\n-    for &edition in ALL_EDITIONS {\n-        if edition <= crate_edition {\n-            // The `crate_edition` implies its respective umbrella feature-gate\n-            // (i.e., `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).\n-            edition_enabled_features.insert(edition.feature_name(), edition);\n-        }\n-    }\n-\n-    for feature in active_features_up_to(crate_edition) {\n-        feature.set(&mut features, DUMMY_SP);\n-        edition_enabled_features.insert(feature.name, crate_edition);\n-    }\n-\n-    // Process the edition umbrella feature-gates first, to ensure\n-    // `edition_enabled_features` is completed before it's queried.\n-    for attr in krate_attrs {\n-        if !attr.check_name(sym::feature) {\n-            continue;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            Some(list) => list,\n-            None => continue,\n-        };\n-\n-        for mi in list {\n-            if !mi.is_word() {\n-                continue;\n-            }\n-\n-            let name = mi.name_or_empty();\n-\n-            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n-            if let Some(edition) = edition {\n-                if edition <= crate_edition {\n-                    continue;\n-                }\n-\n-                for feature in active_features_up_to(edition) {\n-                    // FIXME(Manishearth) there is currently no way to set\n-                    // lib features by edition\n-                    feature.set(&mut features, DUMMY_SP);\n-                    edition_enabled_features.insert(feature.name, edition);\n-                }\n-            }\n-        }\n-    }\n-\n-    for attr in krate_attrs {\n-        if !attr.check_name(sym::feature) {\n-            continue;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            Some(list) => list,\n-            None => continue,\n-        };\n-\n-        let bad_input = |span| {\n-            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n-        };\n-\n-        for mi in list {\n-            let name = match mi.ident() {\n-                Some(ident) if mi.is_word() => ident.name,\n-                Some(ident) => {\n-                    bad_input(mi.span())\n-                        .span_suggestion(\n-                            mi.span(),\n-                            \"expected just one word\",\n-                            format!(\"{}\", ident.name),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n-                    continue;\n-                }\n-                None => {\n-                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n-                    continue;\n-                }\n-            };\n-\n-            if let Some(edition) = edition_enabled_features.get(&name) {\n-                let msg =\n-                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n-                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n-                continue;\n-            }\n-\n-            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {\n-                // Handled in the separate loop above.\n-                continue;\n-            }\n-\n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n-            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n-                if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =\n-                    state\n-                {\n-                    feature_removed(span_handler, mi.span(), *reason);\n-                    continue;\n-                }\n-            }\n-\n-            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n-                let since = Some(Symbol::intern(since));\n-                features.declared_lang_features.push((name, mi.span(), since));\n-                continue;\n-            }\n-\n-            if let Some(allowed) = allow_features.as_ref() {\n-                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n-                    struct_span_err!(\n-                        span_handler,\n-                        mi.span(),\n-                        E0725,\n-                        \"the feature `{}` is not in the list of allowed features\",\n-                        name\n-                    )\n-                    .emit();\n-                    continue;\n-                }\n-            }\n-\n-            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n-                f.set(&mut features, mi.span());\n-                features.declared_lang_features.push((name, mi.span(), None));\n-                continue;\n-            }\n-\n-            features.declared_lib_features.push((name, mi.span()));\n-        }\n-    }\n-\n-    features\n-}\n-\n-fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {\n-    ACTIVE_FEATURES.iter().filter(move |feature| {\n-        if let Some(feature_edition) = feature.edition { feature_edition <= edition } else { false }\n-    })\n-}\n-\n pub fn check_crate(\n     krate: &ast::Crate,\n     parse_sess: &ParseSess,", "previous_filename": "src/libsyntax/feature_gate/check.rs"}, {"sha": "eadbc485296e8705f41c4522ed6b88f42a4604fe", "filename": "src/librustc_ast_passes/lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -0,0 +1,9 @@\n+//! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n+//! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n+//! by `rustc_ast_lowering`.\n+\n+#![feature(slice_patterns)]\n+\n+pub mod ast_validation;\n+pub mod feature_gate;\n+pub mod show_span;"}, {"sha": "4596e8ff53dde7233d6558af4a27bba5b1f4f0b2", "filename": "src/librustc_ast_passes/show_span.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_ast_passes%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fshow_span.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -5,9 +5,9 @@\n \n use std::str::FromStr;\n \n-use crate::ast;\n-use crate::visit;\n-use crate::visit::Visitor;\n+use syntax::ast;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n enum Mode {\n     Expression,", "previous_filename": "src/libsyntax/show_span.rs"}, {"sha": "f291eaf93580bf526ecf1bb8594518ab584df985", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -17,6 +17,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }"}, {"sha": "dc85a92d272c48bb21d047cbdb4f873b8e5b3150", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,15 +1,15 @@\n use rustc_expand::base::{self, *};\n use rustc_expand::panictry;\n use rustc_parse::{self, new_sub_parser_from_file, parser::Parser, DirectoryOwnership};\n+use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n+use rustc_span::{self, Pos, Span};\n use syntax::ast;\n-use syntax::early_buffered_lints::INCOMPLETE_INCLUDE;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n \n-use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "d04dd079be75dda338d6e3de0a247604c1bb1364", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -14,10 +14,12 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n+rustc_ast_passes = { path = \"../librustc_ast_passes\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "3254d0c913da3a2c9305688e3511a6d73531626d", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -18,11 +18,10 @@ use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n use syntax::attr::{self, is_builtin_attr, HasAttrs};\n-use syntax::feature_gate::{self, feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{feature_err, ParseSess};\n use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;\n@@ -1062,7 +1061,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n-            feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n+            rustc_ast_passes::feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n             validate_attr::check_meta(self.cx.parse_sess, attr);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded"}, {"sha": "47865b2fb9fc36338c1dea2fdfbf4cb37392ae01", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -106,14 +106,14 @@\n //! bound.\n use crate::mbe::{KleeneToken, TokenTree};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym};\n+use rustc_span::{symbol::Ident, MultiSpan, Span};\n use syntax::ast::NodeId;\n-use syntax::early_buffered_lints::META_VARIABLE_MISUSE;\n-use syntax::sess::ParseSess;\n use syntax::token::{DelimToken, Token, TokenKind};\n \n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::{symbol::Ident, MultiSpan, Span};\n use smallvec::SmallVec;\n \n /// Stack represented as linked list."}, {"sha": "eb0551c606548ebea590bf28d2a0652510faec9d", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -17,10 +17,12 @@ syntax = { path = \"../libsyntax\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n+rustc_ast_passes = { path = \"../librustc_ast_passes\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_traits = { path = \"../librustc_traits\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "6322cc4b9a32148e128894199a703e70bd4bba5d", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -29,15 +29,14 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental;\n use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n-use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n+use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_traits;\n use rustc_typeck as typeck;\n-use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::mut_visit::MutVisitor;\n use syntax::util::node_count::NodeCounter;\n use syntax::{self, ast, visit};\n@@ -71,7 +70,7 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     }\n \n     if let Some(ref s) = sess.opts.debugging_opts.show_span {\n-        syntax::show_span::run(sess.diagnostic(), s, &krate);\n+        rustc_ast_passes::show_span::run(sess.diagnostic(), s, &krate);\n     }\n \n     if sess.opts.debugging_opts.hir_stats {\n@@ -345,7 +344,7 @@ fn configure_and_expand_inner<'a>(\n     }\n \n     let has_proc_macro_decls = sess.time(\"AST_validation\", || {\n-        ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer())\n+        rustc_ast_passes::ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer())\n     });\n \n     let crate_types = sess.crate_types.borrow();\n@@ -400,7 +399,7 @@ fn configure_and_expand_inner<'a>(\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     sess.time(\"complete_gated_feature_checking\", || {\n-        syntax::feature_gate::check_crate(\n+        rustc_ast_passes::feature_gate::check_crate(\n             &krate,\n             &sess.parse_sess,\n             &sess.features_untracked(),\n@@ -411,8 +410,8 @@ fn configure_and_expand_inner<'a>(\n     // Add all buffered lints from the `ParseSess` to the `Session`.\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-        for BufferedEarlyLint { id, span, msg, lint_id } in buffered_lints.drain(..) {\n-            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n+        for early_lint in buffered_lints.drain(..) {\n+            resolver.lint_buffer().add_early_lint(early_lint);\n         }\n     });\n "}, {"sha": "2fafd3af7a5ff2d406b1d0386fd95debe2c30110", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,8 +1,5 @@\n use log::info;\n use rustc::lint;\n-use rustc::session::config::{ErrorOutputType, Input, OutputFilenames};\n-use rustc::session::CrateDisambiguator;\n-use rustc::session::{self, config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc::ty;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -14,6 +11,11 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n+use rustc_session as session;\n+use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::CrateDisambiguator;\n+use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap};\n use rustc_span::symbol::{sym, Symbol};\n@@ -420,7 +422,7 @@ pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguat\n     CrateDisambiguator::from(hasher.finish::<Fingerprint>())\n }\n \n-pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut lint::LintBuffer) {\n+pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut LintBuffer) {\n     // Unconditionally collect crate types from attributes to make them used\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n@@ -442,7 +444,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n                             ast::CRATE_NODE_ID,\n                             span,\n                             \"invalid `crate_type` value\",\n-                            lint::builtin::BuiltinLintDiagnostics::UnknownCrateTypes(\n+                            BuiltinLintDiagnostics::UnknownCrateTypes(\n                                 span,\n                                 \"did you mean\".to_string(),\n                                 format!(\"\\\"{}\\\"\", candidate),"}, {"sha": "19d1052d1b243101a8c7162e8d7fb33aa340b847", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,5 +1,4 @@\n-use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{FutureIncompatibleInfo, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc_errors::Applicability;"}, {"sha": "befeb84e57c9c8a49ee6afe4bcf39f7f9309edc7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -21,13 +21,8 @@\n //! If you define a new `LateLintPass`, you will also need to add it to the\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n-use std::fmt::Write;\n-\n-use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n-use lint::{LateContext, LintArray, LintContext};\n use rustc::hir::map::Map;\n-use rustc::lint;\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{self, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -39,6 +34,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_hir::{HirIdSet, Node};\n+use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -52,6 +48,7 @@ use syntax::visit::FnKind;\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use log::debug;\n+use std::fmt::Write;\n \n // hardwired lints from librustc\n pub use lint::builtin::*;"}, {"sha": "9a901719851589d7bade9d0e796d34e1650f608e", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -16,15 +16,15 @@\n \n use rustc::lint::{EarlyContext, LintStore};\n use rustc::lint::{EarlyLintPass, EarlyLintPassObject};\n-use rustc::lint::{LintBuffer, LintContext, LintPass};\n-use rustc::session::Session;\n-\n+use rustc::lint::{LintContext, LintPass};\n+use rustc_session::lint::LintBuffer;\n+use rustc_session::Session;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n use syntax::visit as ast_visit;\n \n use log::debug;\n+use std::slice;\n \n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "d8e0274cf43b9a2a4374f772ac2dd2bb54197ae2", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -16,20 +16,20 @@\n \n use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n-use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n+use rustc_session::lint::LintPass;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n+use syntax::walk_list;\n \n use log::debug;\n-use syntax::walk_list;\n+use std::slice;\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "e708ded603b25145b5199ca52fd8fbebb521119c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -38,11 +38,12 @@ use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE, MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n-use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::{LintArray, LintPass};\n \n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "522aeb6b1442007cac0285beecbe93126ae1c9cc", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use syntax::ast;\n \n declare_lint! {"}, {"sha": "f75bb9ba32c3d954b12de1845f128508bf163e7f", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,6 +1,4 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "dc18f15fe40cb95072f52326133bad2b2b4721e5", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_errors::Applicability;\n use syntax::ast::{ExprKind, Stmt, StmtKind};\n "}, {"sha": "ab6841c0c09bcf26d946d6dc6c2bf0d984eb1dee", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,16 +1,14 @@\n #![allow(non_snake_case)]\n \n-use crate::hir::def_id::DefId;\n-use lint::{LateContext, LintArray, LintContext};\n-use lint::{LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{LateContext, LateLintPass, LintContext};\n use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;"}, {"sha": "da8a23f041e58a945074bc5860b10c9ed6abf4fd", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,7 +1,5 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "9426d5e26f5e545bdce78adecafdf0d8e67156f8", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,4 +1,5 @@\n use rustc::middle::cstore::{self, NativeLibrary};\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n@@ -10,7 +11,6 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n-use syntax::feature_gate::feature_err;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector { tcx, libs: Vec::new() };"}, {"sha": "0e9d16cfa56a8170f009f6b024174c984c617bec", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -6,6 +6,7 @@ use super::{PatCtxt, PatKind, PatternError};\n \n use rustc::hir::map::Map;\n use rustc::lint;\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -19,7 +20,6 @@ use rustc_hir::{HirId, Pat};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::Mutability;\n-use syntax::feature_gate::feature_err;\n \n use std::slice;\n "}, {"sha": "e69b580565e53d490b82e6270dc242f661104305", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,12 +1,12 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use rustc::session::config::nightly_options;\n+use rustc::session::parse::feature_err;\n use rustc::ty::TyCtxt;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n-use syntax::feature_gate::feature_err;\n \n use super::{ConstKind, Item};\n "}, {"sha": "aa159c55ff2846ed68784580de6b32b46334bcf2", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -18,6 +18,7 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n syntax = { path = \"../libsyntax\" }\n unicode-normalization = \"0.1.11\""}, {"sha": "8467acc759c2b5cd25e93d1c047df0349d3b2121", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 177, "deletions": 7, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -9,18 +9,22 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::{parse_in, validate_attr};\n-use rustc_errors::Applicability;\n-use rustc_feature::Features;\n-use rustc_span::edition::Edition;\n-use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_error_codes::*;\n+use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n+use rustc_feature::{Feature, Features, State as FeatureState};\n+use rustc_feature::{\n+    ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n+};\n+use rustc_span::edition::{Edition, ALL_EDITIONS};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n use syntax::attr;\n use syntax::attr::HasAttrs;\n-use syntax::feature_gate::{feature_err, get_features};\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{feature_err, ParseSess};\n use syntax::util::map_in_place::MapInPlace;\n \n use smallvec::SmallVec;\n@@ -31,6 +35,172 @@ pub struct StripUnconfigured<'a> {\n     pub features: Option<&'a Features>,\n }\n \n+fn get_features(\n+    span_handler: &Handler,\n+    krate_attrs: &[ast::Attribute],\n+    crate_edition: Edition,\n+    allow_features: &Option<Vec<String>>,\n+) -> Features {\n+    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n+        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n+        err.span_label(span, \"feature has been removed\");\n+        if let Some(reason) = reason {\n+            err.note(reason);\n+        }\n+        err.emit();\n+    }\n+\n+    fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {\n+        ACTIVE_FEATURES.iter().filter(move |feature| {\n+            if let Some(feature_edition) = feature.edition {\n+                feature_edition <= edition\n+            } else {\n+                false\n+            }\n+        })\n+    }\n+\n+    let mut features = Features::default();\n+    let mut edition_enabled_features = FxHashMap::default();\n+\n+    for &edition in ALL_EDITIONS {\n+        if edition <= crate_edition {\n+            // The `crate_edition` implies its respective umbrella feature-gate\n+            // (i.e., `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).\n+            edition_enabled_features.insert(edition.feature_name(), edition);\n+        }\n+    }\n+\n+    for feature in active_features_up_to(crate_edition) {\n+        feature.set(&mut features, DUMMY_SP);\n+        edition_enabled_features.insert(feature.name, crate_edition);\n+    }\n+\n+    // Process the edition umbrella feature-gates first, to ensure\n+    // `edition_enabled_features` is completed before it's queried.\n+    for attr in krate_attrs {\n+        if !attr.check_name(sym::feature) {\n+            continue;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n+            None => continue,\n+        };\n+\n+        for mi in list {\n+            if !mi.is_word() {\n+                continue;\n+            }\n+\n+            let name = mi.name_or_empty();\n+\n+            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n+            if let Some(edition) = edition {\n+                if edition <= crate_edition {\n+                    continue;\n+                }\n+\n+                for feature in active_features_up_to(edition) {\n+                    // FIXME(Manishearth) there is currently no way to set\n+                    // lib features by edition\n+                    feature.set(&mut features, DUMMY_SP);\n+                    edition_enabled_features.insert(feature.name, edition);\n+                }\n+            }\n+        }\n+    }\n+\n+    for attr in krate_attrs {\n+        if !attr.check_name(sym::feature) {\n+            continue;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n+            None => continue,\n+        };\n+\n+        let bad_input = |span| {\n+            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n+        };\n+\n+        for mi in list {\n+            let name = match mi.ident() {\n+                Some(ident) if mi.is_word() => ident.name,\n+                Some(ident) => {\n+                    bad_input(mi.span())\n+                        .span_suggestion(\n+                            mi.span(),\n+                            \"expected just one word\",\n+                            format!(\"{}\", ident.name),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                    continue;\n+                }\n+                None => {\n+                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n+                    continue;\n+                }\n+            };\n+\n+            if let Some(edition) = edition_enabled_features.get(&name) {\n+                let msg =\n+                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n+                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n+                continue;\n+            }\n+\n+            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {\n+                // Handled in the separate loop above.\n+                continue;\n+            }\n+\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n+                if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =\n+                    state\n+                {\n+                    feature_removed(span_handler, mi.span(), *reason);\n+                    continue;\n+                }\n+            }\n+\n+            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n+                let since = Some(Symbol::intern(since));\n+                features.declared_lang_features.push((name, mi.span(), since));\n+                continue;\n+            }\n+\n+            if let Some(allowed) = allow_features.as_ref() {\n+                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n+                    struct_span_err!(\n+                        span_handler,\n+                        mi.span(),\n+                        E0725,\n+                        \"the feature `{}` is not in the list of allowed features\",\n+                        name\n+                    )\n+                    .emit();\n+                    continue;\n+                }\n+            }\n+\n+            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n+                f.set(&mut features, mi.span());\n+                features.declared_lang_features.push((name, mi.span(), None));\n+                continue;\n+            }\n+\n+            features.declared_lib_features.push((name, mi.span()));\n+        }\n+    }\n+\n+    features\n+}\n+\n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n pub fn features(\n     mut krate: ast::Crate,"}, {"sha": "84562fbb46ff2bbfd133982060405d97a0b2f4f7", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -4,10 +4,10 @@ use crate::parse_in;\n \n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n+use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Symbol};\n use syntax::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n-use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n-use syntax::sess::ParseSess;\n use syntax::tokenstream::DelimSpan;\n \n pub fn check_meta(sess: &ParseSess, attr: &Attribute) {"}, {"sha": "639d8639c4bb28281dde9d59de9f2072aebf6be1", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -16,7 +16,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n-rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "39ba2fbc63b4392dace79cacf1f9dc047e43a4cd", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -9,6 +9,7 @@\n \n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n+use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n@@ -18,7 +19,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n-use syntax::feature_gate::feature_err;\n \n use std::fmt;\n "}, {"sha": "65eb07b989d83ab871380cb6048a096c1aa056ad", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -17,7 +17,6 @@ extern crate log;\n \n use rustc::ty::query::Providers;\n \n-pub mod ast_validation;\n mod check_const;\n pub mod dead;\n mod diagnostic_items;"}, {"sha": "af37d218d68f08b1ecf4f0327fa68cfd161113c1", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -5,6 +5,7 @@ use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::query::Providers;\n@@ -20,7 +21,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::Attribute;\n use syntax::attr::{self, Stability};\n-use syntax::feature_gate::feature_err;\n \n use std::cmp::Ordering;\n use std::mem::replace;"}, {"sha": "4a6df92d82260fda278de716af1ce5f44fb14bfc", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -29,6 +29,7 @@ use crate::Resolver;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n@@ -317,7 +318,7 @@ impl Resolver<'_> {\n                 unused.use_tree_id,\n                 ms,\n                 &msg,\n-                lint::builtin::BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n+                BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n             );\n         }\n     }"}, {"sha": "8fe17e89444cd0aa11e1607805a40fa64fa54e90", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -12,16 +12,16 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc::hir::exports::Export;\n-use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n-use rustc::session::DiagnosticMessageId;\n use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};"}, {"sha": "8e4630cf7d69641cac65ad7031e8307037b9123b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -24,7 +24,6 @@ use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n-use rustc::session::Session;\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n@@ -39,7 +38,9 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::{NodeMap, NodeSet};\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -960,7 +961,7 @@ pub struct Resolver<'a> {\n     /// when visiting the correspondent variants.\n     variant_vis: DefIdMap<ty::Visibility>,\n \n-    lint_buffer: lint::LintBuffer,\n+    lint_buffer: LintBuffer,\n \n     next_node_id: NodeId,\n }\n@@ -1082,7 +1083,7 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n         &mut self.definitions\n     }\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1241,7 +1242,7 @@ impl<'a> Resolver<'a> {\n                 .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                 .collect(),\n             variant_vis: Default::default(),\n-            lint_buffer: lint::LintBuffer::default(),\n+            lint_buffer: LintBuffer::default(),\n             next_node_id: NodeId::from_u32(1),\n         }\n     }\n@@ -1256,7 +1257,7 @@ impl<'a> Resolver<'a> {\n         self.next_node_id\n     }\n \n-    pub fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    pub fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1713,10 +1714,10 @@ impl<'a> Resolver<'a> {\n                     if let Some(node_id) = poisoned {\n                         self.lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-                            node_id, ident.span,\n+                            node_id,\n+                            ident.span,\n                             &format!(\"cannot find {} `{}` in this scope\", ns.descr(), ident),\n-                            lint::builtin::BuiltinLintDiagnostics::\n-                                ProcMacroDeriveResolutionFallback(ident.span),\n+                            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(ident.span),\n                         );\n                     }\n                     return Some(LexicalScopeBinding::Item(binding));\n@@ -2267,7 +2268,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let diag = lint::builtin::BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n+        let diag = BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n         self.lint_buffer.buffer_lint_with_diagnostic(\n             lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             diag_id,\n@@ -2562,9 +2563,10 @@ impl<'a> Resolver<'a> {\n                        cannot be referred to by absolute paths\";\n             self.lint_buffer.buffer_lint_with_diagnostic(\n                 lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-                CRATE_NODE_ID, span_use, msg,\n-                lint::builtin::BuiltinLintDiagnostics::\n-                    MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n+                CRATE_NODE_ID,\n+                span_use,\n+                msg,\n+                BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n             );\n         }\n "}, {"sha": "85b5d8ef1cb5d4bcb1a54499e9530cff07f5d463", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -7,6 +7,7 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc::middle::stability;\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::{lint, span_bug, ty};\n use rustc_data_structures::fx::FxHashSet;\n@@ -23,7 +24,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr::{self, StabilityLevel};\n-use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "377ea141ed57c6678162534a7e0515ebeb0600f0", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "2ba3932c7d97e31eefc441cb3aff7be962e76a65", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,8 +1,10 @@\n pub use self::Level::*;\n-use crate::node_id::NodeId;\n+use crate::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n-use rustc_span::{sym, MultiSpan, Symbol};\n+use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+\n+pub mod builtin;\n \n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n@@ -174,7 +176,25 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n-/// Stores buffered lint info which can later be passed to `librustc`.\n+// This could be a closure, but then implementing derive trait\n+// becomes hacky (and it gets allocated).\n+#[derive(PartialEq)]\n+pub enum BuiltinLintDiagnostics {\n+    Normal,\n+    BareTraitObject(Span, /* is_global */ bool),\n+    AbsPathWithModule(Span),\n+    ProcMacroDeriveResolutionFallback(Span),\n+    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n+    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n+    UnknownCrateTypes(Span, String, String),\n+    UnusedImports(String, Vec<(Span, String)>),\n+    RedundantImport(Vec<(Span, bool)>, Ident),\n+    DeprecatedMacro(Option<Symbol>, Span),\n+}\n+\n+/// Lints that are buffered up early on in the `Session` before the\n+/// `LintLevels` is calculated. These are later passed to `librustc`.\n+#[derive(PartialEq)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n     pub span: MultiSpan,\n@@ -183,10 +203,65 @@ pub struct BufferedEarlyLint {\n     pub msg: String,\n \n     /// The `NodeId` of the AST node that generated the lint.\n-    pub id: NodeId,\n+    pub node_id: NodeId,\n \n     /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-    pub lint_id: &'static Lint,\n+    pub lint_id: LintId,\n+\n+    /// Customization of the `DiagnosticBuilder<'_>` for the lint.\n+    pub diagnostic: BuiltinLintDiagnostics,\n+}\n+\n+#[derive(Default)]\n+pub struct LintBuffer {\n+    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n+}\n+\n+impl LintBuffer {\n+    pub fn add_early_lint(&mut self, early_lint: BufferedEarlyLint) {\n+        let arr = self.map.entry(early_lint.node_id).or_default();\n+        if !arr.contains(&early_lint) {\n+            arr.push(early_lint);\n+        }\n+    }\n+\n+    pub fn add_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        node_id: NodeId,\n+        span: MultiSpan,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        let lint_id = LintId::of(lint);\n+        let msg = msg.to_string();\n+        self.add_early_lint(BufferedEarlyLint { lint_id, node_id, span, msg, diagnostic });\n+    }\n+\n+    pub fn take(&mut self, id: NodeId) -> Vec<BufferedEarlyLint> {\n+        self.map.remove(&id).unwrap_or_default()\n+    }\n+\n+    pub fn buffer_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n+    }\n }\n \n /// Declares a static item of type `&'static Lint`.\n@@ -253,3 +328,41 @@ macro_rules! declare_tool_lint {\n         };\n     );\n }\n+\n+/// Declares a static `LintArray` and return it as an expression.\n+#[macro_export]\n+macro_rules! lint_array {\n+    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n+    ($( $lint:expr ),*) => {{\n+        vec![$($lint),*]\n+    }}\n+}\n+\n+pub type LintArray = Vec<&'static Lint>;\n+\n+pub trait LintPass {\n+    fn name(&self) -> &'static str;\n+}\n+\n+/// Implements `LintPass for $name` with the given list of `Lint` statics.\n+#[macro_export]\n+macro_rules! impl_lint_pass {\n+    ($name:ident => [$($lint:expr),* $(,)?]) => {\n+        impl $crate::lint::LintPass for $name {\n+            fn name(&self) -> &'static str { stringify!($name) }\n+        }\n+        impl $name {\n+            pub fn get_lints() -> $crate::lint::LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+    };\n+}\n+\n+/// Declares a type named `$name` which implements `LintPass`.\n+/// To the right of `=>` a comma separated list of `Lint` statics is given.\n+#[macro_export]\n+macro_rules! declare_lint_pass {\n+    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n+        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n+        $crate::impl_lint_pass!($name => [$($lint),*]);\n+    };\n+}"}, {"sha": "3e8503ef661f05dc97f443c7bbabaf32a69261e8", "filename": "src/librustc_session/lint/builtin.rs", "status": "renamed", "additions": 24, "deletions": 151, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -4,16 +4,31 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::lint::{FutureIncompatibleInfo, LateLintPass, LintArray, LintPass};\n-use crate::middle::stability;\n-use crate::session::Session;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc_session::declare_lint;\n+use crate::lint::FutureIncompatibleInfo;\n+use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n-use syntax::ast;\n-use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n+\n+declare_lint! {\n+    pub ILL_FORMED_ATTRIBUTE_INPUT,\n+    Deny,\n+    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+        edition: None,\n+    };\n+}\n+\n+declare_lint! {\n+    pub META_VARIABLE_MISUSE,\n+    Allow,\n+    \"possible meta-variable misuse at macro definition\"\n+}\n+\n+declare_lint! {\n+    pub INCOMPLETE_INCLUDE,\n+    Deny,\n+    \"trailing content in included file\"\n+}\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -513,145 +528,3 @@ declare_lint_pass! {\n         SOFT_UNSTABLE,\n     ]\n }\n-\n-// this could be a closure, but then implementing derive traits\n-// becomes hacky (and it gets allocated)\n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n-pub enum BuiltinLintDiagnostics {\n-    Normal,\n-    BareTraitObject(Span, /* is_global */ bool),\n-    AbsPathWithModule(Span),\n-    ProcMacroDeriveResolutionFallback(Span),\n-    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n-    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n-    UnknownCrateTypes(Span, String, String),\n-    UnusedImports(String, Vec<(Span, String)>),\n-    RedundantImport(Vec<(Span, bool)>, ast::Ident),\n-    DeprecatedMacro(Option<Symbol>, Span),\n-}\n-\n-pub fn add_elided_lifetime_in_path_suggestion(\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-    n: usize,\n-    path_span: Span,\n-    incl_angl_brckt: bool,\n-    insertion_span: Span,\n-    anon_lts: String,\n-) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    db.span_suggestion(\n-        replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n-        suggestion,\n-        Applicability::MachineApplicable,\n-    );\n-}\n-\n-impl BuiltinLintDiagnostics {\n-    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder<'_>) {\n-        match self {\n-            BuiltinLintDiagnostics::Normal => (),\n-            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) if is_global => {\n-                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                    }\n-                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) => {\n-                        // FIXME(Manishearth) ideally the emitting code\n-                        // can tell us whether or not this is global\n-                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n-\n-                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n-                    }\n-                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `crate`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n-                db.span_label(\n-                    span,\n-                    \"names from parent modules are not \\\n-                                     accessible without an explicit import\",\n-                );\n-            }\n-            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n-                db.span_note(span_def, \"the macro is defined here\");\n-            }\n-            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-                n,\n-                path_span,\n-                incl_angl_brckt,\n-                insertion_span,\n-                anon_lts,\n-            ) => {\n-                add_elided_lifetime_in_path_suggestion(\n-                    sess,\n-                    db,\n-                    n,\n-                    path_span,\n-                    incl_angl_brckt,\n-                    insertion_span,\n-                    anon_lts,\n-                );\n-            }\n-            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n-                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n-            }\n-            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n-                if !replaces.is_empty() {\n-                    db.tool_only_multipart_suggestion(\n-                        &message,\n-                        replaces,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n-                for (span, is_imported) in spans {\n-                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n-                    db.span_label(\n-                        span,\n-                        format!(\"the item `{}` is already {} here\", ident, introduced),\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n-                stability::deprecation_suggestion(db, suggestion, span)\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}", "previous_filename": "src/librustc/lint/builtin.rs"}, {"sha": "946e77d35595e101ee35d03844c75e9becbef0e7", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,15 +1,15 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::lint::BufferedEarlyLint;\n+use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use crate::node_id::NodeId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n-use rustc_errors::{\n-    emitter::SilentEmitter, Applicability, ColorConfig, DiagnosticBuilder, Handler,\n-};\n-use rustc_feature::UnstableFeatures;\n+use rustc_error_codes::E0658;\n+use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n+use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -62,6 +62,81 @@ impl GatedSpans {\n     }\n }\n \n+/// The strenght of a feature gate.\n+/// Either it is a `Hard` error, or only a `Soft` warning.\n+#[derive(Debug, Copy, Clone, PartialEq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n+/// Construct a diagnostic for a language feature error due to the given `span`.\n+/// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n+}\n+\n+/// Construct a diagnostic for a feature gate error.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n+pub fn feature_err_issue<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+/// Construct a diagnostic for a feature gate error / warning.\n+///\n+/// You should typically just use `feature_err` instead.\n+pub fn leveled_feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+    level: GateStrength,\n+) -> DiagnosticBuilder<'a> {\n+    let diag = &sess.span_diagnostic;\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n+        GateStrength::Soft => diag.struct_span_warn(span, explain),\n+    };\n+\n+    if let Some(n) = find_feature_issue(feature, issue) {\n+        err.note(&format!(\n+            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n+            n,\n+        ));\n+    }\n+\n+    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n+    if sess.unstable_features.is_nightly_build() {\n+        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n+    }\n+\n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n+    err\n+}\n+\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,\n@@ -123,17 +198,18 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: &'static crate::lint::Lint,\n+        lint: &'static Lint,\n         span: impl Into<MultiSpan>,\n-        id: NodeId,\n+        node_id: NodeId,\n         msg: &str,\n     ) {\n         self.buffered_lints.with_lock(|buffered_lints| {\n             buffered_lints.push(BufferedEarlyLint {\n                 span: span.into(),\n-                id,\n+                node_id,\n                 msg: msg.into(),\n-                lint_id,\n+                lint_id: LintId::of(lint),\n+                diagnostic: BuiltinLintDiagnostics::Normal,\n             });\n         });\n     }"}, {"sha": "c15bcd81443d66c2b2fb5387b068e5c81c6c69d5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -10,6 +10,7 @@ use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n+use rustc::session::parse::feature_err;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n use rustc::traits::error_reporting::report_object_safety_error;\n@@ -30,7 +31,6 @@ use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;"}, {"sha": "1afb703ca1506818d6b938f1fb1a13ad1fc9135c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -53,6 +53,7 @@\n use crate::check::{FnCtxt, Needs};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n+use rustc::session::parse::feature_err;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -62,6 +63,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -70,9 +72,6 @@ use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n-use syntax::feature_gate;\n-\n-use rustc_error_codes::*;\n \n struct Coerce<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -627,7 +626,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {\n-            feature_gate::feature_err(\n+            feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::unsized_tuple_coercion,\n                 self.cause.span,"}, {"sha": "dea1be7641afa1cfeaac465516b4caf20fe07fbc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -99,6 +99,7 @@ use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::infer::{self, InferCtxt, InferOk, InferResult};\n use rustc::middle::region;\n use rustc::mir::interpret::ConstValue;\n+use rustc::session::parse::feature_err;\n use rustc::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::adjustment::{\n@@ -130,7 +131,6 @@ use rustc_span::{self, BytePos, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::feature_err;\n use syntax::util::parser::ExprPrecedence;\n \n use rustc_error_codes::*;"}, {"sha": "a496a6e12ce1a0f7d5c4ce0c54c47068fc434410", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -3,6 +3,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n+use rustc::session::parse::feature_err;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n@@ -13,7 +14,6 @@ use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n-use syntax::feature_gate;\n \n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n@@ -821,7 +821,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n             if receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n                 // Report error; would have worked with `arbitrary_self_types`.\n-                feature_gate::feature_err(\n+                feature_err(\n                     &fcx.tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,"}, {"sha": "ad750d5ab8341691f82a909fae80a76b2de6edef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -23,6 +23,7 @@ use crate::middle::weak_lang_items;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n+use rustc::session::parse::feature_err;\n use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::GenericArgKind;\n@@ -45,7 +46,6 @@ use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n-use syntax::feature_gate;\n \n use rustc_error_codes::*;\n \n@@ -1537,7 +1537,7 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         _ => None,\n                     };\n                     if let Some(unsupported_type) = err {\n-                        feature_gate::feature_err(\n+                        feature_err(\n                             &tcx.sess.parse_sess,\n                             sym::const_compare_raw_pointers,\n                             hir_ty.span,\n@@ -2633,7 +2633,7 @@ fn from_target_feature(\n                 None => true,\n             };\n             if !allowed && id.is_local() {\n-                feature_gate::feature_err(\n+                feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),"}, {"sha": "70f4f47621a348ce36acbef9d39d83b42db36d6c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -2,9 +2,8 @@\n \n use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::feature_err;\n use crate::print::pprust;\n-use crate::sess::ParseSess;\n+use crate::sess::{feature_err, ParseSess};\n \n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};"}, {"sha": "7724107888ad0c3d593258fd0aacd42ee2fa75ab", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=76edc5c4eb511d7d6e7b04b3c20c9bdcebe42ee6", "patch": "@@ -1,30 +0,0 @@\n-//! Allows the buffering of lints for later.\n-//!\n-//! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n-//! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n-\n-use rustc_session::declare_lint;\n-pub use rustc_session::lint::BufferedEarlyLint;\n-use rustc_session::lint::FutureIncompatibleInfo;\n-\n-declare_lint! {\n-    pub ILL_FORMED_ATTRIBUTE_INPUT,\n-    Deny,\n-    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-        edition: None,\n-    };\n-}\n-\n-declare_lint! {\n-    pub META_VARIABLE_MISUSE,\n-    Allow,\n-    \"possible meta-variable misuse at macro definition\"\n-}\n-\n-declare_lint! {\n-    pub INCOMPLETE_INCLUDE,\n-    Deny,\n-    \"trailing content in included file\"\n-}"}, {"sha": "a96fee0cf8f16f5e386fdd89bd54d84db84fab18", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -75,13 +75,8 @@ pub mod ast;\n pub mod attr;\n pub mod entry;\n pub mod expand;\n-pub mod feature_gate {\n-    mod check;\n-    pub use check::{check_attribute, check_crate, feature_err, feature_err_issue, get_features};\n-}\n pub mod mut_visit;\n pub mod ptr;\n-pub mod show_span;\n pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n@@ -93,8 +88,6 @@ pub mod print {\n     pub mod pprust;\n }\n \n-pub mod early_buffered_lints;\n-\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n /// Requirements for a `StableHashingContext` to be used in this crate."}, {"sha": "8d9cbe45fc69686fc47814f0fd97e9280d91dd46", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -6,9 +6,8 @@\n extern crate rustc;\n extern crate rustc_session;\n \n-use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint_pass, impl_lint_pass};\n-use rustc_session::declare_lint;\n+use rustc_session::lint::{LintArray, LintPass};\n+use rustc_session::{declare_lint, declare_lint_pass, impl_lint_pass};\n \n declare_lint! {\n     pub TEST_LINT,"}, {"sha": "39ac0019aac239063452504f5476a7a6f7485775", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9634e1f7d972e6122890c6c6866127bb3ba61c9a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=9634e1f7d972e6122890c6c6866127bb3ba61c9a", "patch": "@@ -1,5 +1,5 @@\n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:21:6\n+  --> $DIR/lint_pass_impl_without_macro.rs:20:6\n    |\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:31:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:30:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^"}]}