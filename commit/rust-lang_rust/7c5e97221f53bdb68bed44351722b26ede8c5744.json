{"sha": "7c5e97221f53bdb68bed44351722b26ede8c5744", "node_id": "C_kwDOAAsO6NoAKDdjNWU5NzIyMWY1M2JkYjY4YmVkNDQzNTE3MjJiMjZlZGU4YzU3NDQ", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-05-21T05:49:48Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-05-21T09:26:03Z"}, "message": "mismatch", "tree": {"sha": "8aa34f7f805a9002fc9601be32de0d0cc28d45a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa34f7f805a9002fc9601be32de0d0cc28d45a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c5e97221f53bdb68bed44351722b26ede8c5744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5e97221f53bdb68bed44351722b26ede8c5744", "html_url": "https://github.com/rust-lang/rust/commit/7c5e97221f53bdb68bed44351722b26ede8c5744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c5e97221f53bdb68bed44351722b26ede8c5744/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ab27a0bf46913484d830b8bbeeaafb01c941ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab27a0bf46913484d830b8bbeeaafb01c941ed", "html_url": "https://github.com/rust-lang/rust/commit/d5ab27a0bf46913484d830b8bbeeaafb01c941ed"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "af2aa96574bfe7c8179518611647238da4e178b1", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c5e97221f53bdb68bed44351722b26ede8c5744/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5e97221f53bdb68bed44351722b26ede8c5744/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=7c5e97221f53bdb68bed44351722b26ede8c5744", "patch": "@@ -410,8 +410,10 @@ pub(crate) fn associated_ty_data_query(\n     let resolver = hir_def::resolver::HasResolver::resolver(type_alias, db.upcast());\n     let ctx = crate::TyLoweringContext::new(db, &resolver)\n         .with_type_param_mode(crate::lower::ParamLoweringMode::Variable);\n-    let self_ty =\n-        TyKind::BoundVar(BoundVar::new(crate::DebruijnIndex::INNERMOST, 0)).intern(Interner);\n+    let pro_ty = TyBuilder::assoc_type_projection(db, type_alias)\n+        .fill_with_bound_vars(crate::DebruijnIndex::INNERMOST, 0)\n+        .build();\n+    let self_ty = TyKind::Alias(AliasTy::Projection(pro_ty)).intern(Interner);\n     let mut bounds: Vec<_> = type_alias_data\n         .bounds\n         .iter()"}, {"sha": "a11b026df56cf5f2ec30b06a885085604f572f34", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c5e97221f53bdb68bed44351722b26ede8c5744/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5e97221f53bdb68bed44351722b26ede8c5744/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7c5e97221f53bdb68bed44351722b26ede8c5744", "patch": "@@ -1,7 +1,7 @@\n use cov_mark::check;\n use expect_test::expect;\n \n-use super::{check, check_infer, check_infer_with_mismatches, check_types};\n+use super::{check, check_infer, check_infer_with_mismatches, check_no_mismatches, check_types};\n \n #[test]\n fn infer_await() {\n@@ -3316,6 +3316,42 @@ pub trait Deserialize {\n     );\n }\n \n+#[test]\n+fn bin_op_with_rhs_is_self_for_assoc_bound() {\n+    check_no_mismatches(\n+        r#\"//- minicore: eq\n+        fn repro<T>(t: T) -> bool\n+where\n+    T: Request,\n+    T::Output: Convertable,\n+{\n+    let a = execute(&t).convert();\n+    let b = execute(&t).convert();\n+    a.eq(&b);\n+    let a = execute(&t).convert2();\n+    let b = execute(&t).convert2();\n+    a.eq(&b)\n+}\n+fn execute<T>(t: &T) -> T::Output\n+where\n+    T: Request,\n+{\n+    <T as Request>::output()\n+}\n+trait Convertable {\n+    type TraitSelf: PartialEq<Self::TraitSelf>;\n+    type AssocAsDefaultSelf: PartialEq;\n+    fn convert(self) -> Self::AssocAsDefaultSelf;\n+    fn convert2(self) -> Self::TraitSelf;\n+}\n+trait Request {\n+    type Output;\n+    fn output() -> Self::Output;\n+}\n+     \"#,\n+    );\n+}\n+\n #[test]\n fn bin_op_adt_with_rhs_primitive() {\n     check_infer_with_mismatches("}]}