{"sha": "b26dbf80090ccdd753b35d6254246229e9ff8728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNmRiZjgwMDkwY2NkZDc1M2IzNWQ2MjU0MjQ2MjI5ZTlmZjg3Mjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-19T23:54:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-19T23:54:08Z"}, "message": "Merge #4524\n\n4524: Use snippets in add_missing_members r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b54b03a1220f6977d77ba5e27a82c10c5e386eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54b03a1220f6977d77ba5e27a82c10c5e386eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26dbf80090ccdd753b35d6254246229e9ff8728", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexHGgCRBK7hj4Ov3rIwAAdHIIAAcXcpcsJrTaFbBK5QdIyfxe\n4BxPE3vp77dZ7ReY5ff724clcha7NI/XaqC/fqs1fYu0icplrKagrlfKZFjcq+8g\nssawq6/7P5GIDwnaUxWZmqQu4kPJoqwxosEReOSrhjfO2l3+BIxolaNos9mn0tZH\nYhOeD5gSJpGTRHx2So0lZ1RboDfhOO+yMGK5JTKi/nE0Zm+6rKJVxLBIDKSJzDTs\n4hF8FqEov7q4F7cQpv61gXF2jIJqSKKhP0YbUPVmLmgmf2g8Omvrajgt1swGYMs2\ni/iB/jp3lExHJEedy+cmN9VqVopv4WUmZ2aazs3NOKjTdm9cXKGtjaqs0/5eN5c=\n=wCvm\n-----END PGP SIGNATURE-----\n", "payload": "tree b54b03a1220f6977d77ba5e27a82c10c5e386eb0\nparent a36202390caff0ed97ff778cf4556fc00ddee70d\nparent a04cababaa144d7a6db7b1dd114494b33d281ab9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589932448 +0000\ncommitter GitHub <noreply@github.com> 1589932448 +0000\n\nMerge #4524\n\n4524: Use snippets in add_missing_members r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26dbf80090ccdd753b35d6254246229e9ff8728", "html_url": "https://github.com/rust-lang/rust/commit/b26dbf80090ccdd753b35d6254246229e9ff8728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26dbf80090ccdd753b35d6254246229e9ff8728/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36202390caff0ed97ff778cf4556fc00ddee70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36202390caff0ed97ff778cf4556fc00ddee70d", "html_url": "https://github.com/rust-lang/rust/commit/a36202390caff0ed97ff778cf4556fc00ddee70d"}, {"sha": "a04cababaa144d7a6db7b1dd114494b33d281ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04cababaa144d7a6db7b1dd114494b33d281ab9", "html_url": "https://github.com/rust-lang/rust/commit/a04cababaa144d7a6db7b1dd114494b33d281ab9"}], "stats": {"total": 129, "additions": 84, "deletions": 45}, "files": [{"sha": "005c177765ecc449b1ed5d91fca7bcbf88a4c166", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -194,20 +194,30 @@ impl AssistBuilder {\n     pub(crate) fn insert(&mut self, offset: TextSize, text: impl Into<String>) {\n         self.edit.insert(offset, text.into())\n     }\n-    /// Append specified `text` at the given `offset`\n+    /// Append specified `snippet` at the given `offset`\n     pub(crate) fn insert_snippet(\n         &mut self,\n         _cap: SnippetCap,\n         offset: TextSize,\n-        text: impl Into<String>,\n+        snippet: impl Into<String>,\n     ) {\n         self.is_snippet = true;\n-        self.edit.insert(offset, text.into())\n+        self.insert(offset, snippet);\n     }\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n     }\n+    /// Replaces specified `range` of text with a given `snippet`.\n+    pub(crate) fn replace_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        range: TextRange,\n+        snippet: impl Into<String>,\n+    ) {\n+        self.is_snippet = true;\n+        self.replace(range, snippet);\n+    }\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n         algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n     }"}, {"sha": "24f931a85e195a8bc0cfd386c9084960bfad2980", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -10,7 +10,11 @@ use ra_syntax::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use crate::{assist_config::SnippetCap, utils::render_snippet, AssistContext, AssistId, Assists};\n+use crate::{\n+    assist_config::SnippetCap,\n+    utils::{render_snippet, Cursor},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: add_function\n //\n@@ -81,7 +85,11 @@ struct FunctionTemplate {\n impl FunctionTemplate {\n     fn to_string(&self, cap: Option<SnippetCap>) -> String {\n         let f = match cap {\n-            Some(cap) => render_snippet(cap, self.fn_def.syntax(), self.placeholder_expr.syntax()),\n+            Some(cap) => render_snippet(\n+                cap,\n+                self.fn_def.syntax(),\n+                Cursor::Replace(self.placeholder_expr.syntax()),\n+            ),\n             None => self.fn_def.to_string(),\n         };\n         format!(\"{}{}{}\", self.leading_ws, f, self.trailing_ws)"}, {"sha": "d7aa069476e0a8bbfb50b64e8659eac2339409f2", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-    utils::{get_missing_assoc_items, resolve_target_trait},\n+    utils::{get_missing_assoc_items, render_snippet, resolve_target_trait, Cursor},\n     AssistId,\n };\n \n@@ -45,7 +45,7 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     fn foo(&self) -> u32 {\n+//     $0fn foo(&self) -> u32 {\n //         todo!()\n //     }\n //\n@@ -89,7 +89,7 @@ pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -\n // impl Trait for () {\n //     Type X = ();\n //     fn foo(&self) {}\n-//     fn bar(&self) {}\n+//     $0fn bar(&self) {}\n //\n // }\n // ```\n@@ -147,7 +147,7 @@ fn add_missing_impl_members_inner(\n     }\n \n     let target = impl_def.syntax().text_range();\n-    acc.add(AssistId(assist_id), label, target, |edit| {\n+    acc.add(AssistId(assist_id), label, target, |builder| {\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n         let target_scope = ctx.sema.scope(impl_item_list.syntax());\n@@ -162,13 +162,21 @@ fn add_missing_impl_members_inner(\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n         let new_impl_item_list = impl_item_list.append_items(items);\n-        let cursor_position = {\n-            let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n-            first_new_item.syntax().text_range().start()\n+        let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n+\n+        let original_range = impl_item_list.syntax().text_range();\n+        match ctx.config.snippet_cap {\n+            None => builder.replace(original_range, new_impl_item_list.to_string()),\n+            Some(cap) => builder.replace_snippet(\n+                cap,\n+                original_range,\n+                render_snippet(\n+                    cap,\n+                    new_impl_item_list.syntax(),\n+                    Cursor::Before(first_new_item.syntax()),\n+                ),\n+            ),\n         };\n-\n-        edit.replace_ast(impl_item_list, new_impl_item_list);\n-        edit.set_cursor(cursor_position);\n     })\n }\n \n@@ -222,7 +230,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>type Output;\n+    $0type Output;\n     const CONST: usize = 42;\n     fn foo(&self) {\n         todo!()\n@@ -263,7 +271,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) {\n+    $0fn foo(&self) {\n         todo!()\n     }\n \n@@ -283,7 +291,7 @@ impl Foo for S { <|> }\"#,\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) {\n+    $0fn foo(&self) {\n         todo!()\n     }\n }\"#,\n@@ -302,7 +310,7 @@ impl Foo<u32> for S { <|> }\"#,\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    <|>fn foo(&self, t: u32) -> &u32 {\n+    $0fn foo(&self, t: u32) -> &u32 {\n         todo!()\n     }\n }\"#,\n@@ -321,7 +329,7 @@ impl<U> Foo<U> for S { <|> }\"#,\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    <|>fn foo(&self, t: U) -> &U {\n+    $0fn foo(&self, t: U) -> &U {\n         todo!()\n     }\n }\"#,\n@@ -340,7 +348,7 @@ impl Foo for S {}<|>\"#,\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) {\n+    $0fn foo(&self) {\n         todo!()\n     }\n }\"#,\n@@ -365,7 +373,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar) {\n+    $0fn foo(&self, bar: foo::Bar) {\n         todo!()\n     }\n }\"#,\n@@ -390,7 +398,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+    $0fn foo(&self, bar: foo::Bar<u32>) {\n         todo!()\n     }\n }\"#,\n@@ -415,7 +423,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+    $0fn foo(&self, bar: foo::Bar<u32>) {\n         todo!()\n     }\n }\"#,\n@@ -443,7 +451,7 @@ mod foo {\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    <|>fn foo(&self, bar: Param) {\n+    $0fn foo(&self, bar: Param) {\n         todo!()\n     }\n }\"#,\n@@ -470,7 +478,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n+    $0fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n         todo!()\n     }\n }\"#,\n@@ -497,7 +505,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) {\n+    $0fn foo(&self, bar: foo::Bar<foo::Baz>) {\n         todo!()\n     }\n }\"#,\n@@ -522,7 +530,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) {\n+    $0fn foo(&self, bar: dyn Fn(u32) -> i32) {\n         todo!()\n     }\n }\"#,\n@@ -580,7 +588,7 @@ trait Foo {\n }\n struct S;\n impl Foo for S {\n-    <|>type Output;\n+    $0type Output;\n     fn foo(&self) {\n         todo!()\n     }\n@@ -614,7 +622,7 @@ trait Foo {\n }\n struct S;\n impl Foo for S {\n-    <|>fn valid(some: u32) -> bool { false }\n+    $0fn valid(some: u32) -> bool { false }\n }\"#,\n         )\n     }\n@@ -637,7 +645,7 @@ trait Foo<T = Self> {\n \n struct S;\n impl Foo for S {\n-    <|>fn bar(&self, other: &Self) {\n+    $0fn bar(&self, other: &Self) {\n         todo!()\n     }\n }\"#,\n@@ -662,7 +670,7 @@ trait Foo<T1, T2 = Self> {\n \n struct S<T>;\n impl Foo<T> for S<T> {\n-    <|>fn bar(&self, this: &T, that: &Self) {\n+    $0fn bar(&self, this: &T, that: &Self) {\n         todo!()\n     }\n }\"#,"}, {"sha": "2522ec5df83f237030952ad695f8dd604319784e", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -150,7 +150,7 @@ trait Trait {\n impl Trait for () {\n     Type X = ();\n     fn foo(&self) {}\n-    fn bar(&self) {}\n+    $0fn bar(&self) {}\n \n }\n \"#####,\n@@ -180,7 +180,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 {\n+    $0fn foo(&self) -> u32 {\n         todo!()\n     }\n "}, {"sha": "9af27180bc57708ae582ece30e1540e94928231c", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -15,18 +15,31 @@ use crate::assist_config::SnippetCap;\n \n pub(crate) use insert_use::insert_use_statement;\n \n-pub(crate) fn render_snippet(\n-    _cap: SnippetCap,\n-    node: &SyntaxNode,\n-    placeholder: &SyntaxNode,\n-) -> String {\n-    assert!(placeholder.ancestors().any(|it| it == *node));\n-    let range = placeholder.text_range() - node.text_range().start();\n+#[derive(Clone, Copy, Debug)]\n+pub(crate) enum Cursor<'a> {\n+    Replace(&'a SyntaxNode),\n+    Before(&'a SyntaxNode),\n+}\n+\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &'a SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\n+pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor) -> String {\n+    assert!(cursor.node().ancestors().any(|it| it == *node));\n+    let range = cursor.node().text_range() - node.text_range().start();\n     let range: ops::Range<usize> = range.into();\n \n-    let mut placeholder = placeholder.to_string();\n+    let mut placeholder = cursor.node().to_string();\n     escape(&mut placeholder);\n-    let tab_stop = format!(\"${{0:{}}}\", placeholder);\n+    let tab_stop = match cursor {\n+        Cursor::Replace(placeholder) => format!(\"${{0:{}}}\", placeholder),\n+        Cursor::Before(placeholder) => format!(\"$0{}\", placeholder),\n+    };\n \n     let mut buf = node.to_string();\n     buf.replace_range(range, &tab_stop);"}, {"sha": "b687330f33020bd9eb1033ef6c4f8ad037e00863", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26dbf80090ccdd753b35d6254246229e9ff8728/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/b26dbf80090ccdd753b35d6254246229e9ff8728/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=b26dbf80090ccdd753b35d6254246229e9ff8728", "patch": "@@ -146,7 +146,7 @@ trait Trait {\n impl Trait for () {\n     Type X = ();\n     fn foo(&self) {}\n-    fn bar(&self) {}\n+    $0fn bar(&self) {}\n \n }\n ```\n@@ -175,7 +175,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 {\n+    $0fn foo(&self) -> u32 {\n         todo!()\n     }\n "}]}