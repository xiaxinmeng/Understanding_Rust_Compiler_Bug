{"sha": "49536667ff18df59e7293afcd51cf317e5a16071", "node_id": "C_kwDOAAsO6NoAKDQ5NTM2NjY3ZmYxOGRmNTllNzI5M2FmY2Q1MWNmMzE3ZTVhMTYwNzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T14:37:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Fix some comments and only get the generics in debug mode", "tree": {"sha": "d1fe6a58948980446c3a717b1427ee699894d31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1fe6a58948980446c3a717b1427ee699894d31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49536667ff18df59e7293afcd51cf317e5a16071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49536667ff18df59e7293afcd51cf317e5a16071", "html_url": "https://github.com/rust-lang/rust/commit/49536667ff18df59e7293afcd51cf317e5a16071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49536667ff18df59e7293afcd51cf317e5a16071/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6ae8828e5509ccf4e01736dadcb80919a88988", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6ae8828e5509ccf4e01736dadcb80919a88988", "html_url": "https://github.com/rust-lang/rust/commit/9f6ae8828e5509ccf4e01736dadcb80919a88988"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "10e2d71be459a56113ccca8a0664de6429effd3a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49536667ff18df59e7293afcd51cf317e5a16071/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49536667ff18df59e7293afcd51cf317e5a16071/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=49536667ff18df59e7293afcd51cf317e5a16071", "patch": "@@ -2570,18 +2570,30 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n-        let substs = substs.into_iter().map(Into::into);\n-        let n = self.generics_of(def_id).count();\n-        debug_assert_eq!(\n-            (n, Some(n)),\n-            substs.size_hint(),\n-            \"wrong number of generic parameters for {def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n-            substs.collect::<Vec<_>>(),\n-        );\n-        let substs = self.mk_substs(substs);\n+        let substs = self.check_substs(def_id, substs);\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n+    #[inline(always)]\n+    fn check_substs(\n+        self,\n+        def_id: DefId,\n+        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    ) -> SubstsRef<'tcx> {\n+        let substs = substs.into_iter().map(Into::into);\n+        #[cfg(debug_assertions)]\n+        {\n+            let n = self.generics_of(def_id).count();\n+            assert_eq!(\n+                (n, Some(n)),\n+                substs.size_hint(),\n+                \"wrong number of generic parameters for {def_id:?}: {:?}\",\n+                substs.collect::<Vec<_>>(),\n+            );\n+        }\n+        self.mk_substs(substs)\n+    }\n+\n     #[inline]\n     pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(FnPtr(fty))\n@@ -2862,15 +2874,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         trait_def_id: DefId,\n         substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n-        let substs = substs.into_iter().map(Into::into);\n-        let n = self.generics_of(trait_def_id).count();\n-        debug_assert_eq!(\n-            (n, Some(n)),\n-            substs.size_hint(),\n-            \"wrong number of generic parameters for {trait_def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n-            substs.collect::<Vec<_>>(),\n-        );\n-        let substs = self.mk_substs(substs);\n+        let substs = self.check_substs(trait_def_id, substs);\n         ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n     }\n \n@@ -2879,15 +2883,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> ty::AliasTy<'tcx> {\n-        let substs = substs.into_iter().map(Into::into);\n-        let n = self.generics_of(def_id).count();\n-        debug_assert_eq!(\n-            (n, Some(n)),\n-            substs.size_hint(),\n-            \"wrong number of generic parameters for {def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n-            substs.collect::<Vec<_>>(),\n-        );\n-        let substs = self.mk_substs(substs);\n+        let substs = self.check_substs(def_id, substs);\n         ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n     }\n "}]}