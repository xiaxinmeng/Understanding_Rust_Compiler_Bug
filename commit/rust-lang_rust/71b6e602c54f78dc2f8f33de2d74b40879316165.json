{"sha": "71b6e602c54f78dc2f8f33de2d74b40879316165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjZlNjAyYzU0Zjc4ZGMyZjhmMzNkZTJkNzRiNDA4NzkzMTYxNjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-16T00:33:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-16T00:33:05Z"}, "message": "rustc: Add an annotation for the crate definition to view_item_use", "tree": {"sha": "87d92ce397c471e3046868b38a40ed67a69ca9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87d92ce397c471e3046868b38a40ed67a69ca9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b6e602c54f78dc2f8f33de2d74b40879316165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b6e602c54f78dc2f8f33de2d74b40879316165", "html_url": "https://github.com/rust-lang/rust/commit/71b6e602c54f78dc2f8f33de2d74b40879316165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b6e602c54f78dc2f8f33de2d74b40879316165/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341d128ad3994692063be89728a2dd2df2833be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/341d128ad3994692063be89728a2dd2df2833be5", "html_url": "https://github.com/rust-lang/rust/commit/341d128ad3994692063be89728a2dd2df2833be5"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "312166c499b86f2424fd657744f66ea233efef5f", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -59,7 +59,7 @@ impure fn compile_input(session.session sess,\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input);\n     auto crate = parse_input(sess, p, input);\n-    crate = creader.read_crates(sess, crate);\n+    crate = creader.read_crates(sess, crate, library_search_paths);\n     crate = resolve.resolve_crate(sess, crate);\n     crate = typeck.check_crate(sess, crate);\n     trans.trans_crate(sess, crate, output, shared);"}, {"sha": "1970f788b1c835ac55a8760a8d4d03016bf14032", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -349,7 +349,7 @@ type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n type view_item = spanned[view_item_];\n tag view_item_ {\n-    view_item_use(ident, vec[@meta_item], def_id);\n+    view_item_use(ident, vec[@meta_item], def_id, ann);\n     view_item_import(ident, vec[ident], def_id, option.t[def]);\n     view_item_export(ident);\n }\n@@ -376,7 +376,7 @@ type external_crate_info = ();\n \n fn index_view_item(mod_index index, @view_item it) {\n     alt (it.node) {\n-        case(ast.view_item_use(?id, _, _)) {\n+        case(ast.view_item_use(?id, _, _, _)) {\n             index.insert(id, ast.mie_view_item(it));\n         }\n         case(ast.view_item_import(?def_ident,_,_,_)) {"}, {"sha": "d1eaba85311f2830ff054b0422b9875f6974fc4b", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -5,24 +5,53 @@ import front.ast;\n import middle.fold;\n import util.common;\n import util.common.span;\n+\n+import std.fs;\n import std.map.hashmap;\n \n // TODO: map to a real type here.\n-type env = @hashmap[str, @ast.external_crate_info];\n+type env = @rec(\n+    @hashmap[str, @ast.external_crate_info] crate_cache,\n+    vec[str] library_search_paths\n+);\n+\n+// TODO: return something\n+fn load_crate(ast.ident ident, vec[str] library_search_paths) -> @() {\n+    for (str library_search_path in library_search_paths) {\n+        auto path = fs.connect(library_search_path, ident);\n+        // TODO\n+    }\n+\n+    ret @();\n+}\n \n fn fold_view_item_use(&env e, &span sp, ast.ident ident,\n-        vec[@ast.meta_item] meta_items, ast.def_id id) -> @ast.view_item {\n-    // TODO: find the crate\n+        vec[@ast.meta_item] meta_items, ast.def_id id, ast.ann orig_ann)\n+        -> @ast.view_item {\n+    auto external_crate;\n+    if (!e.crate_cache.contains_key(ident)) {\n+        external_crate = load_crate(ident, e.library_search_paths);\n+        e.crate_cache.insert(ident, external_crate);\n+    } else {\n+        external_crate = e.crate_cache.get(ident);\n+    }\n \n-    auto viu = ast.view_item_use(ident, meta_items, id);\n+    auto ann = ast.ann_crate(external_crate);\n+    auto viu = ast.view_item_use(ident, meta_items, id, ann);\n     ret @fold.respan[ast.view_item_](sp, viu);\n }\n \n // Reads external crates referenced by \"use\" directives.\n-fn read_crates(session.session sess, @ast.crate crate) -> @ast.crate {\n-    auto external_crates = @common.new_str_hash[@ast.external_crate_info]();\n+fn read_crates(session.session sess,\n+               @ast.crate crate,\n+               vec[str] library_search_paths) -> @ast.crate {\n+    auto e = @rec(\n+        crate_cache=@common.new_str_hash[@ast.external_crate_info](),\n+        library_search_paths=library_search_paths\n+    );\n+\n     auto f = fold_view_item_use;\n     auto fld = @rec(fold_view_item_use=f with *fold.new_identity_fold[env]());\n-    ret fold.fold_crate[env](external_crates, fld, crate);\n+    ret fold.fold_crate[env](e, fld, crate);\n }\n "}, {"sha": "a5c79926b6349ec60076c5645f94f313a1ad5c94", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -2151,7 +2151,8 @@ impure fn parse_use(parser p) -> @ast.view_item {\n     auto ident = parse_ident(p);\n     auto metadata = parse_optional_meta(p);\n     expect(p, token.SEMI);\n-    auto use_decl = ast.view_item_use(ident, metadata, p.next_def_id());\n+    auto use_decl = ast.view_item_use(ident, metadata, p.next_def_id(),\n+                                      ast.ann_none);\n     ret @spanned(lo, hi, use_decl);\n }\n "}, {"sha": "73b2cab32a9df138de59ff087458ac5b8801f857", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -263,7 +263,7 @@ type ast_fold[ENV] =\n      // View Item folds.\n      (fn(&ENV e, &span sp, ident ident,\n          vec[@meta_item] meta_items,\n-         def_id id) -> @view_item)                fold_view_item_use,\n+         def_id id, ann a) -> @view_item)         fold_view_item_use,\n \n      (fn(&ENV e, &span sp, ident i, vec[ident] idents,\n          def_id id, option.t[def]) -> @view_item) fold_view_item_import,\n@@ -882,9 +882,9 @@ fn fold_view_item[ENV](&ENV env, ast_fold[ENV] fld, @view_item vi)\n     }\n \n     alt (vi.node) {\n-        case (ast.view_item_use(?ident, ?meta_items, ?def_id)) {\n+        case (ast.view_item_use(?ident, ?meta_items, ?def_id, ?ann)) {\n             ret fld.fold_view_item_use(env_, vi.span, ident, meta_items,\n-                                       def_id);\n+                                       def_id, ann);\n         }\n         case (ast.view_item_import(?def_ident, ?idents, ?def_id,\n                                    ?target_def)) {\n@@ -1397,8 +1397,8 @@ fn identity_fold_item_obj[ENV](&ENV e, &span sp, ident i,\n \n fn identity_fold_view_item_use[ENV](&ENV e, &span sp, ident i,\n                                     vec[@meta_item] meta_items,\n-                                    def_id id) -> @view_item {\n-    ret @respan(sp, ast.view_item_use(i, meta_items, id));\n+                                    def_id id, ann a) -> @view_item {\n+    ret @respan(sp, ast.view_item_use(i, meta_items, id, a));\n }\n \n fn identity_fold_view_item_import[ENV](&ENV e, &span sp, ident i,\n@@ -1595,7 +1595,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_obj  = bind identity_fold_item_obj[ENV](_,_,_,_,_,_,_),\n \n          fold_view_item_use =\n-             bind identity_fold_view_item_use[ENV](_,_,_,_,_),\n+             bind identity_fold_view_item_use[ENV](_,_,_,_,_,_),\n          fold_view_item_import =\n              bind identity_fold_view_item_import[ENV](_,_,_,_,_,_),\n          fold_view_item_export ="}, {"sha": "62021ee94f48493a8734d377602cff33ba7a3d63", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -45,7 +45,7 @@ fn unwrap_def(def_wrap d) -> def {\n     alt (d) {\n         case (def_wrap_use(?it)) {\n             alt (it.node) {\n-                case (ast.view_item_use(_, _, ?id)) {\n+                case (ast.view_item_use(_, _, ?id, _)) {\n                     ret ast.def_use(id);\n                 }\n             }\n@@ -265,7 +265,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n \n     fn found_def_view(@ast.view_item i) -> def_wrap {\n         alt (i.node) {\n-            case (ast.view_item_use(_, _, ?id)) {\n+            case (ast.view_item_use(_, _, ?id, _)) {\n                 ret def_wrap_use(i);\n             }\n             case (ast.view_item_import(_, ?idents,?d, _)) {"}, {"sha": "a25bc44782fbf86c9ac4f6a3fd1380c07208363f", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b6e602c54f78dc2f8f33de2d74b40879316165/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=71b6e602c54f78dc2f8f33de2d74b40879316165", "patch": "@@ -637,7 +637,7 @@ impure fn print_type_params(ps s, vec[ast.ty_param] params) {\n impure fn print_view_item(ps s, @ast.view_item item) {\n   hbox(s);\n   alt (item.node) {\n-    case (ast.view_item_use(?id,?mta,_)) {\n+    case (ast.view_item_use(?id,?mta,_,_)) {\n       wrd1(s, \"use\");\n       wrd(s, id);\n       if (_vec.len[@ast.meta_item](mta) > 0u) {"}]}