{"sha": "42991e551b56290cc7cbd70fc93a1de4243acbd2", "node_id": "C_kwDOAAsO6NoAKDQyOTkxZTU1MWI1NjI5MGNjN2NiZDcwZmM5M2ExZGU0MjQzYWNiZDI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-13T12:49:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-13T12:49:20Z"}, "message": "Rollup merge of #102947 - compiler-errors:sort-elaborated-existentials, r=cjgillot\n\nSort elaborated existential predicates in `object_ty_for_trait`\n\nr? `@cjgillot`\n\nI think that #102845 caused #102933. Depending on the order that we elaborate these existential projection predicates, there's no guarantee that they'll be sorted by def id, which is what is failing the assertion in the issue.\n\nFixes #102933\nFixes #102973", "tree": {"sha": "3d4170a563a08e0fc824d185082b326cab0b1fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4170a563a08e0fc824d185082b326cab0b1fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42991e551b56290cc7cbd70fc93a1de4243acbd2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSAlQCRBK7hj4Ov3rIwAAkOUIAF7yHrowkF4xAatWV6Atjho/\nXJK4WWmuj9jZvlUYBA563SQ3UkiwtK98hKXBzXVN5IBAL7FTwwMT6f2COIwc4SOL\nxH+4VjZBGbtW2EAlS2lAlZl6mhbFVzBL1dvGmTPEBEIt7uxcvKcgMdK7UHS9PxiT\naEYyXcIP7rHLzjvza32jO+Y2kdv2srTuT+Wgq72PWKcCo1PyDpz8j7PEc0uz2Zw6\nmPSroK/WL86sop6S6uwBBHfgcBDeCJJp2i/kR4p8dvi+2eXJJ4QnD1roHdQ6NtXE\nJ34cwPJHvgeTx/4ZR6AjxXbTu5QEiVBV/DzBB30wT0j9cfaH+wasY46gTuLjwAA=\n=mRBP\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d4170a563a08e0fc824d185082b326cab0b1fc6\nparent dbff6a91c1e50344f56bfa45fda3512afc8669a0\nparent 4a8cfe9d14f479ebc2e156f08ac33e8b4ed0d08a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665665360 +0530\ncommitter GitHub <noreply@github.com> 1665665360 +0530\n\nRollup merge of #102947 - compiler-errors:sort-elaborated-existentials, r=cjgillot\n\nSort elaborated existential predicates in `object_ty_for_trait`\n\nr? `@cjgillot`\n\nI think that #102845 caused #102933. Depending on the order that we elaborate these existential projection predicates, there's no guarantee that they'll be sorted by def id, which is what is failing the assertion in the issue.\n\nFixes #102933\nFixes #102973\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42991e551b56290cc7cbd70fc93a1de4243acbd2", "html_url": "https://github.com/rust-lang/rust/commit/42991e551b56290cc7cbd70fc93a1de4243acbd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42991e551b56290cc7cbd70fc93a1de4243acbd2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbff6a91c1e50344f56bfa45fda3512afc8669a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbff6a91c1e50344f56bfa45fda3512afc8669a0", "html_url": "https://github.com/rust-lang/rust/commit/dbff6a91c1e50344f56bfa45fda3512afc8669a0"}, {"sha": "4a8cfe9d14f479ebc2e156f08ac33e8b4ed0d08a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8cfe9d14f479ebc2e156f08ac33e8b4ed0d08a", "html_url": "https://github.com/rust-lang/rust/commit/4a8cfe9d14f479ebc2e156f08ac33e8b4ed0d08a"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "545524f63a7bccaf5548766e5935ea1b539f2b8a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/42991e551b56290cc7cbd70fc93a1de4243acbd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42991e551b56290cc7cbd70fc93a1de4243acbd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=42991e551b56290cc7cbd70fc93a1de4243acbd2", "patch": "@@ -581,17 +581,24 @@ fn object_ty_for_trait<'tcx>(\n     });\n     debug!(?trait_predicate);\n \n-    let elaborated_predicates = elaborate_trait_ref(tcx, trait_ref).filter_map(|obligation| {\n-        debug!(?obligation);\n-        let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n-        Some(pred.map_bound(|p| {\n-            ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                item_def_id: p.projection_ty.item_def_id,\n-                substs: p.projection_ty.substs,\n-                term: p.term,\n-            })\n-        }))\n-    });\n+    let mut elaborated_predicates: Vec<_> = elaborate_trait_ref(tcx, trait_ref)\n+        .filter_map(|obligation| {\n+            debug!(?obligation);\n+            let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n+            Some(pred.map_bound(|p| {\n+                ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n+                    item_def_id: p.projection_ty.item_def_id,\n+                    substs: p.projection_ty.substs,\n+                    term: p.term,\n+                })\n+            }))\n+        })\n+        .collect();\n+    // NOTE: Since #37965, the existential predicates list has depended on the\n+    // list of predicates to be sorted. This is mostly to enforce that the primary\n+    // predicate comes first.\n+    elaborated_predicates.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n+    elaborated_predicates.dedup();\n \n     let existential_predicates = tcx\n         .mk_poly_existential_predicates(iter::once(trait_predicate).chain(elaborated_predicates));"}, {"sha": "843391cffb273df4a6726cfa53c032405592cbd9", "filename": "src/test/ui/object-safety/issue-102933.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/42991e551b56290cc7cbd70fc93a1de4243acbd2/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42991e551b56290cc7cbd70fc93a1de4243acbd2/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs?ref=42991e551b56290cc7cbd70fc93a1de4243acbd2", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+use std::future::Future;\n+\n+pub trait Service {\n+    type Response;\n+    type Future: Future<Output = Self::Response>;\n+}\n+\n+pub trait A1: Service<Response = i32> {}\n+\n+pub trait A2: Service<Future = Box<dyn Future<Output = i32>>> + A1 {\n+    fn foo(&self) {}\n+}\n+\n+pub trait B1: Service<Future = Box<dyn Future<Output = i32>>> {}\n+\n+pub trait B2: Service<Response = i32> + B1 {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let x: &dyn A2 = todo!();\n+    let x: &dyn B2 = todo!();\n+}"}]}