{"sha": "e19d82f1bf190de6c67114811e12256cba6831e8", "node_id": "C_kwDOAAsO6NoAKGUxOWQ4MmYxYmYxOTBkZTZjNjcxMTQ4MTFlMTIyNTZjYmE2ODMxZTg", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-28T16:13:39Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-28T16:13:39Z"}, "message": "review comments", "tree": {"sha": "be44874cb6d2dbcc50ad2698158fff7cab2f61b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be44874cb6d2dbcc50ad2698158fff7cab2f61b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19d82f1bf190de6c67114811e12256cba6831e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19d82f1bf190de6c67114811e12256cba6831e8", "html_url": "https://github.com/rust-lang/rust/commit/e19d82f1bf190de6c67114811e12256cba6831e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19d82f1bf190de6c67114811e12256cba6831e8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c70f25f8c68716ae448fd62c47483d0e0128e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c70f25f8c68716ae448fd62c47483d0e0128e53", "html_url": "https://github.com/rust-lang/rust/commit/5c70f25f8c68716ae448fd62c47483d0e0128e53"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "64775d7aba9f8688dfad292fe550a80f9eb69f46", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e19d82f1bf190de6c67114811e12256cba6831e8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19d82f1bf190de6c67114811e12256cba6831e8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=e19d82f1bf190de6c67114811e12256cba6831e8", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         base_expr: &'tcx hir::Expr<'tcx>,\n         base_ty: Ty<'tcx>,\n-        idx_expr: &'tcx hir::Expr<'tcx>,\n+        index_expr: &'tcx hir::Expr<'tcx>,\n         idx_ty: Ty<'tcx>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         // FIXME(#18741) -- this is almost but not quite the same as the\n@@ -59,12 +59,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut autoderef = self.autoderef(base_expr.span, base_ty);\n         let mut result = None;\n         while result.is_none() && autoderef.next().is_some() {\n-            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty, idx_expr);\n+            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty, index_expr);\n         }\n         self.register_predicates(autoderef.into_obligations());\n         result\n     }\n \n+    fn negative_index(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        base_expr: &hir::Expr<'_>,\n+    ) -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n+        let ty = self.resolve_vars_if_possible(ty);\n+        let mut err = self.tcx.sess.struct_span_err(\n+            span,\n+            &format!(\"negative integers cannot be used to index on a `{}`\", ty),\n+        );\n+        err.span_label(span, &format!(\"cannot use a negative integer for indexing on `{}`\", ty));\n+        if let (hir::ExprKind::Path(..), Ok(snippet)) =\n+            (&base_expr.kind, self.tcx.sess.source_map().span_to_snippet(base_expr.span))\n+        {\n+            // `foo[-1]` to `foo[foo.len() - 1]`\n+            err.span_suggestion_verbose(\n+                span.shrink_to_lo(),\n+                &format!(\n+                    \"to access an element starting from the end of the `{}`, compute the index\",\n+                    ty,\n+                ),\n+                format!(\"{}.len() \", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit();\n+        Some((self.tcx.ty_error(), self.tcx.ty_error()))\n+    }\n+\n     /// To type-check `base_expr[index_expr]`, we progressively autoderef\n     /// (and otherwise adjust) `base_expr`, looking for a type which either\n     /// supports builtin indexing or overloaded indexing.\n@@ -76,7 +106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_expr: &hir::Expr<'_>,\n         autoderef: &Autoderef<'a, 'tcx>,\n         index_ty: Ty<'tcx>,\n-        idx_expr: &hir::Expr<'_>,\n+        index_expr: &hir::Expr<'_>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         let adjusted_ty =\n             self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n@@ -86,49 +116,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n-        let negative_index = || {\n-            let ty = self.resolve_vars_if_possible(adjusted_ty);\n-            let mut err = self.tcx.sess.struct_span_err(\n-                idx_expr.span,\n-                &format!(\"negative integers cannot be used to index on a `{}`\", ty),\n-            );\n-            err.span_label(\n-                idx_expr.span,\n-                &format!(\"cannot use a negative integer for indexing on `{}`\", ty),\n-            );\n-            if let (hir::ExprKind::Path(..), Ok(snippet)) =\n-                (&base_expr.kind, self.tcx.sess.source_map().span_to_snippet(base_expr.span))\n-            {\n-                // `foo[-1]` to `foo[foo.len() - 1]`\n-                err.span_suggestion_verbose(\n-                    idx_expr.span.shrink_to_lo(),\n-                    &format!(\n-                        \"if you wanted to access an element starting from the end of the `{}`, you \\\n-                        must compute it\",\n-                        ty,\n-                    ),\n-                    format!(\"{}.len() \", snippet),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            err.emit();\n-            Some((self.tcx.ty_error(), self.tcx.ty_error()))\n-        };\n         if let hir::ExprKind::Unary(\n             hir::UnOp::Neg,\n             hir::Expr {\n                 kind: hir::ExprKind::Lit(hir::Lit { node: ast::LitKind::Int(..), .. }),\n                 ..\n             },\n-        ) = idx_expr.kind\n+        ) = index_expr.kind\n         {\n             match adjusted_ty.kind() {\n                 ty::Adt(ty::AdtDef { did, .. }, _)\n                     if self.tcx.is_diagnostic_item(sym::vec_type, *did) =>\n                 {\n-                    return negative_index();\n+                    return self.negative_index(adjusted_ty, index_expr.span, base_expr);\n+                }\n+                ty::Slice(_) | ty::Array(_, _) => {\n+                    return self.negative_index(adjusted_ty, index_expr.span, base_expr);\n                 }\n-                ty::Slice(_) | ty::Array(_, _) => return negative_index(),\n                 _ => {}\n             }\n         }"}, {"sha": "2b51bf7b7ce87c21a1d2bc8feb9c1cdadd0333a8", "filename": "src/test/ui/suggestions/negative-literal-index.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e19d82f1bf190de6c67114811e12256cba6831e8/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e19d82f1bf190de6c67114811e12256cba6831e8/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr?ref=e19d82f1bf190de6c67114811e12256cba6831e8", "patch": "@@ -4,7 +4,7 @@ error: negative integers cannot be used to index on a `Vec<{integer}>`\n LL |     x[-1];\n    |       ^^ cannot use a negative integer for indexing on `Vec<{integer}>`\n    |\n-help: if you wanted to access an element starting from the end of the `Vec<{integer}>`, you must compute it\n+help: to access an element starting from the end of the `Vec<{integer}>`, compute the index\n    |\n LL |     x[x.len() -1];\n    |       +++++++\n@@ -15,7 +15,7 @@ error: negative integers cannot be used to index on a `[{integer}; 3]`\n LL |     x[-1];\n    |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n    |\n-help: if you wanted to access an element starting from the end of the `[{integer}; 3]`, you must compute it\n+help: to access an element starting from the end of the `[{integer}; 3]`, compute the index\n    |\n LL |     x[x.len() -1];\n    |       +++++++\n@@ -26,7 +26,7 @@ error: negative integers cannot be used to index on a `[{integer}; 3]`\n LL |     x[-1];\n    |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n    |\n-help: if you wanted to access an element starting from the end of the `[{integer}; 3]`, you must compute it\n+help: to access an element starting from the end of the `[{integer}; 3]`, compute the index\n    |\n LL |     x[x.len() -1];\n    |       +++++++"}]}