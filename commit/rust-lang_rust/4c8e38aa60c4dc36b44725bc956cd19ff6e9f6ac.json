{"sha": "4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGUzOGFhNjBjNGRjMzZiNDQ3MjViYzk1NmNkMTlmZjZlOWY2YWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-13T07:36:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-13T07:36:48Z"}, "message": "Rollup merge of #82033 - magurotuna:issue82016, r=jyn514\n\nRefactor `get_word_attr` to return only `Option`\n\nThis commit removes `bool` from the return type of `NestedAttributesExt::get_word_attr` so it will return only `Option<ast::NestedMetaItem>` for less redundancy.\n\nCloses #82016\n\nr? `@jyn514`", "tree": {"sha": "0910deef139f20d95ebafd06c438b64c911e8316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0910deef139f20d95ebafd06c438b64c911e8316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJ4GRCRBK7hj4Ov3rIwAAdHIIAG0XJMre4Zt7wSUAif9Fi4zQ\non9Sct6os01tMzdC9AnEzdpHs5uYRPpbX7IKj29cOUtsPT2IEKB6xuXmXr/mHPYM\na0LML0M1z0PZupz82FuHdwQPtYv9tDBdpOydV1Qz+95En0p63UP5fJ55OZ1LR1Gv\nmun5X/sOnCGn7FKEIVbdt90YaBDEvYbJXAdoeH+ikQoSM2NbfT613z7sb5cDCr1T\nhioBvcH7iYUn3t/bD1F0MyyS06iP30WkzmI6yTf+8FPP7jHZ0vHOwe9yfmqh2Jeg\nsVn+U0q4aH7l100KBit69EJ/CcVO3W8unzM5Mh0oI050uBIxU4dcUajWsg+KwKs=\n=fb9u\n-----END PGP SIGNATURE-----\n", "payload": "tree 0910deef139f20d95ebafd06c438b64c911e8316\nparent f6677b0f52e2e4bb557945652f03cd1b4bf55c4a\nparent 681cccad571c99673be4e2ad14bc2048e8894ac8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613201808 +0900\ncommitter GitHub <noreply@github.com> 1613201808 +0900\n\nRollup merge of #82033 - magurotuna:issue82016, r=jyn514\n\nRefactor `get_word_attr` to return only `Option`\n\nThis commit removes `bool` from the return type of `NestedAttributesExt::get_word_attr` so it will return only `Option<ast::NestedMetaItem>` for less redundancy.\n\nCloses #82016\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "html_url": "https://github.com/rust-lang/rust/commit/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6677b0f52e2e4bb557945652f03cd1b4bf55c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6677b0f52e2e4bb557945652f03cd1b4bf55c4a", "html_url": "https://github.com/rust-lang/rust/commit/f6677b0f52e2e4bb557945652f03cd1b4bf55c4a"}, {"sha": "681cccad571c99673be4e2ad14bc2048e8894ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/681cccad571c99673be4e2ad14bc2048e8894ac8", "html_url": "https://github.com/rust-lang/rust/commit/681cccad571c99673be4e2ad14bc2048e8894ac8"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "7e7e417bb654455ba60f19448309b26f96ecb865", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "patch": "@@ -2161,18 +2161,20 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n-    let (doc_meta_item, please_inline) = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n+    let inline_attr = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n     let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n \n-    if pub_underscore && please_inline {\n-        rustc_errors::struct_span_err!(\n-            cx.tcx.sess,\n-            doc_meta_item.unwrap().span(),\n-            E0780,\n-            \"anonymous imports cannot be inlined\"\n-        )\n-        .span_label(import.span, \"anonymous import\")\n-        .emit();\n+    if pub_underscore {\n+        if let Some(ref inline) = inline_attr {\n+            rustc_errors::struct_span_err!(\n+                cx.tcx.sess,\n+                inline.span(),\n+                E0780,\n+                \"anonymous imports cannot be inlined\"\n+            )\n+            .span_label(import.span, \"anonymous import\")\n+            .emit();\n+        }\n     }\n \n     // We consider inlining the documentation of `pub use` statements, but we\n@@ -2205,7 +2207,7 @@ fn clean_use_statement(\n         }\n         Import::new_glob(resolve_use_source(cx, path), true)\n     } else {\n-        if !please_inline {\n+        if inline_attr.is_none() {\n             if let Res::Def(DefKind::Mod, did) = path.res {\n                 if !did.is_local() && did.index == CRATE_DEF_INDEX {\n                     // if we're `pub use`ing an extern crate root, don't inline it unless we"}, {"sha": "e1ccbfd9da9deb7c4941cabbf4c587660fbc9dd9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4c8e38aa60c4dc36b44725bc956cd19ff6e9f6ac", "patch": "@@ -438,7 +438,7 @@ impl AttributesExt for [ast::Attribute] {\n crate trait NestedAttributesExt {\n     /// Returns `true` if the attribute list contains a specific `Word`\n     fn has_word(self, word: Symbol) -> bool;\n-    fn get_word_attr(self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool);\n+    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n@@ -448,11 +448,8 @@ impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMe\n         self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n     }\n \n-    fn get_word_attr(mut self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool) {\n-        match self.find(|attr| attr.is_word() && attr.has_name(word)) {\n-            Some(a) => (Some(a), true),\n-            None => (None, false),\n-        }\n+    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n "}]}