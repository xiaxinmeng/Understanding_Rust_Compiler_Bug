{"sha": "3d07108d3600dff50e564f57dd390337dbe14d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDcxMDhkMzYwMGRmZjUwZTU2NGY1N2RkMzkwMzM3ZGJlMTRkNTU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-14T19:35:14Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-09-12T15:38:33Z"}, "message": "Add tests for weak into/from raw", "tree": {"sha": "a5c7f69e1ec657577aeafc39d411ec4a5df56b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c7f69e1ec657577aeafc39d411ec4a5df56b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d07108d3600dff50e564f57dd390337dbe14d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d07108d3600dff50e564f57dd390337dbe14d55", "html_url": "https://github.com/rust-lang/rust/commit/3d07108d3600dff50e564f57dd390337dbe14d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d07108d3600dff50e564f57dd390337dbe14d55/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "html_url": "https://github.com/rust-lang/rust/commit/9d9903c5a50bb1f5b5fc3045b86172279eff7d30"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "bb5c3f4f904339bb251e7c4935606220266396c1", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3d07108d3600dff50e564f57dd390337dbe14d55/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d07108d3600dff50e564f57dd390337dbe14d55/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=3d07108d3600dff50e564f57dd390337dbe14d55", "patch": "@@ -190,6 +190,48 @@ fn test_into_from_raw_unsized() {\n     assert_eq!(rc2.to_string(), \"123\");\n }\n \n+#[test]\n+fn into_from_weak_raw() {\n+    let x = Rc::new(box \"hello\");\n+    let y = Rc::downgrade(&x);\n+\n+    let y_ptr = Weak::into_raw(y);\n+    unsafe {\n+        assert_eq!(**y_ptr, \"hello\");\n+\n+        let y = Weak::from_raw(y_ptr);\n+        let y_up = Weak::upgrade(&y).unwrap();\n+        assert_eq!(**y_up, \"hello\");\n+        drop(y_up);\n+\n+        assert_eq!(Rc::try_unwrap(x).map(|x| *x), Ok(\"hello\"));\n+    }\n+}\n+\n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Rc<str> = Rc::from(\"foo\");\n+    let weak: Weak<str> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Rc<dyn Display> = Rc::new(123);\n+    let weak: Weak<dyn Display> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn get_mut() {\n     let mut x = Rc::new(3);"}, {"sha": "77f328d48f94d890568a658601943a9970aa97e1", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3d07108d3600dff50e564f57dd390337dbe14d55/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d07108d3600dff50e564f57dd390337dbe14d55/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=3d07108d3600dff50e564f57dd390337dbe14d55", "patch": "@@ -140,6 +140,48 @@ fn test_into_from_raw_unsized() {\n     assert_eq!(arc2.to_string(), \"123\");\n }\n \n+#[test]\n+fn into_from_weak_raw() {\n+    let x = Arc::new(box \"hello\");\n+    let y = Arc::downgrade(&x);\n+\n+    let y_ptr = Weak::into_raw(y);\n+    unsafe {\n+        assert_eq!(**y_ptr, \"hello\");\n+\n+        let y = Weak::from_raw(y_ptr);\n+        let y_up = Weak::upgrade(&y).unwrap();\n+        assert_eq!(**y_up, \"hello\");\n+        drop(y_up);\n+\n+        assert_eq!(Arc::try_unwrap(x).map(|x| *x), Ok(\"hello\"));\n+    }\n+}\n+\n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Arc<str> = Arc::from(\"foo\");\n+    let weak: Weak<str> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Arc<dyn Display> = Arc::new(123);\n+    let weak: Weak<dyn Display> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn test_cowarc_clone_make_mut() {\n     let mut cow0 = Arc::new(75);"}]}