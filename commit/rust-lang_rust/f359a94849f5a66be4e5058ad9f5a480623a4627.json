{"sha": "f359a94849f5a66be4e5058ad9f5a480623a4627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTlhOTQ4NDlmNWE2NmJlNGU1MDU4YWQ5ZjVhNDgwNjIzYTQ2Mjc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-25T12:42:46Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-25T12:42:46Z"}, "message": "Snap cfgs to new beta", "tree": {"sha": "3e3be6aa8afb17d764d0559d098513ec1d2af125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3be6aa8afb17d764d0559d098513ec1d2af125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f359a94849f5a66be4e5058ad9f5a480623a4627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f359a94849f5a66be4e5058ad9f5a480623a4627", "html_url": "https://github.com/rust-lang/rust/commit/f359a94849f5a66be4e5058ad9f5a480623a4627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f359a94849f5a66be4e5058ad9f5a480623a4627/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e4d937e9a5ffb907063fc0837799a87cd1508", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e4d937e9a5ffb907063fc0837799a87cd1508", "html_url": "https://github.com/rust-lang/rust/commit/1a4e4d937e9a5ffb907063fc0837799a87cd1508"}], "stats": {"total": 121, "additions": 16, "deletions": 105}, "files": [{"sha": "9bc76f51570e15fd67c49bc8ff8dfa6bafe308f4", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -240,7 +240,6 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n-    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"oom\"]\n         fn oom_impl(layout: Layout) -> !;"}, {"sha": "247cd9a020161333fe7c2711ecab1762b2a81c74", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -117,7 +117,6 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(rustc_const_unstable)]\n-#![cfg_attr(bootstrap, feature(const_vec_new))]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]"}, {"sha": "abe50fdb7a396030c3adcc1a2e6e9bf4a893c30f", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -369,7 +369,6 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_string_new\"))]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }\n     }"}, {"sha": "e5672f8542ff65de2e781f399d77cbd5a18f7068", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -291,7 +291,7 @@ use crate::raw_vec::RawVec;\n /// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n /// [owned slice]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(all(not(bootstrap), not(test)), rustc_diagnostic_item = \"vec_type\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T> {\n     buf: RawVec<T>,\n     len: usize,\n@@ -314,7 +314,6 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_vec_new\"))]\n     pub const fn new() -> Vec<T> {\n         Vec {\n             buf: RawVec::NEW,"}, {"sha": "617bdd238f4c63d4660628b84cf5e4d5a140af6a", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -1,6 +1,5 @@\n //! impl bool {}\n \n-#[cfg(not(bootstrap))]\n #[lang = \"bool\"]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise."}, {"sha": "14d947ccf2402d765933b9cb0536282209e13e16", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -135,7 +135,6 @@ pub trait Clone : Sized {\n \n /// Derive macro generating an impl of the trait `Clone`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Clone($item:item) { /* compiler built-in */ }"}, {"sha": "d0ea75c7623f4d0010f67d5467d444690677c3a0", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -210,7 +210,6 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n \n /// Derive macro generating an impl of the trait `PartialEq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialEq($item:item) { /* compiler built-in */ }\n@@ -273,7 +272,6 @@ pub trait Eq: PartialEq<Self> {\n \n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_eq)]\n pub macro Eq($item:item) { /* compiler built-in */ }\n@@ -624,7 +622,6 @@ pub trait Ord: Eq + PartialOrd<Self> {\n \n /// Derive macro generating an impl of the trait `Ord`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Ord($item:item) { /* compiler built-in */ }\n@@ -873,7 +870,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n \n /// Derive macro generating an impl of the trait `PartialOrd`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialOrd($item:item) { /* compiler built-in */ }"}, {"sha": "1aadc77cfb8da75b3bd68747866e75bbba6911e1", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -117,7 +117,6 @@ pub trait Default: Sized {\n \n /// Derive macro generating an impl of the trait `Default`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Default($item:item) { /* compiler built-in */ }"}, {"sha": "aafa35873bb65544440e8e4647c5cb53f4e9e86f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -518,8 +518,7 @@ impl Display for Arguments<'_> {\n     label=\"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\",\n )]\n #[doc(alias = \"{:?}\")]\n-#[cfg_attr(bootstrap, lang = \"debug_trait\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"debug_trait\")]\n+#[rustc_diagnostic_item = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///\n@@ -550,7 +549,6 @@ pub trait Debug {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Debug`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Debug($item:item) { /* compiler built-in */ }"}, {"sha": "020e085abf8a8eb365f552c909f8d092df76e5e8", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -202,7 +202,6 @@ pub trait Hash {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Hash`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Hash($item:item) { /* compiler built-in */ }"}, {"sha": "b240d059114eb7e67bdf65efde9f8f498bd960d4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -1299,38 +1299,16 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(bootstrap)]\n-    pub fn overflowing_add<T>(a: T, b: T) -> T;\n-    /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n-    /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `wrapping_sub` method. For example,\n-    /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(bootstrap)]\n-    pub fn overflowing_sub<T>(a: T, b: T) -> T;\n-    /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n-    /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `wrapping_mul` method. For example,\n-    /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(bootstrap)]\n-    pub fn overflowing_mul<T>(a: T, b: T) -> T;\n-\n-    /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n-    /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `wrapping_add` method. For example,\n-    /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(not(bootstrap))]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(not(bootstrap))]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(not(bootstrap))]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds."}, {"sha": "e8c76b49a8e567a92ead873465484b63d10d8a55", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -87,7 +87,6 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n@@ -120,9 +119,6 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![cfg_attr(bootstrap, feature(const_slice_len))]\n-#![cfg_attr(bootstrap, feature(const_str_as_bytes))]\n-#![cfg_attr(bootstrap, feature(const_str_len))]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(non_exhaustive)]"}, {"sha": "ef91c3559d8be2b4c92388cf23b46482c94dd36e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -1236,10 +1236,8 @@ pub(crate) mod builtin {\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n-    #[cfg_attr(not(bootstrap), unstable(soft, feature = \"test\", issue = \"50297\",\n-               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n-    #[cfg_attr(bootstrap, unstable(feature = \"test\", issue = \"50297\",\n-               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n+    #[unstable(soft, feature = \"test\", issue = \"50297\",\n+               reason = \"`bench` is a part of custom test frameworks which are unstable\")]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     pub macro bench($item:item) { /* compiler built-in */ }"}, {"sha": "7f3d958f5dc80c683de7c3a8eda1cdb268266120", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -290,7 +290,6 @@ pub trait Copy : Clone {\n \n /// Derive macro generating an impl of the trait `Copy`.\n #[rustc_builtin_macro]\n-#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Copy($item:item) { /* compiler built-in */ }"}, {"sha": "e9b4efd9c2173b69a482d0c6e74843f7c941d7ae", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -1112,13 +1112,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n-                    intrinsics::overflowing_add(self, rhs)\n-                }\n-\n-                #[cfg(not(bootstrap))] {\n-                    intrinsics::wrapping_add(self, rhs)\n-                }\n+                intrinsics::wrapping_add(self, rhs)\n             }\n         }\n \n@@ -1141,13 +1135,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n-                    intrinsics::overflowing_sub(self, rhs)\n-                }\n-\n-                #[cfg(not(bootstrap))] {\n-                    intrinsics::wrapping_sub(self, rhs)\n-                }\n+                intrinsics::wrapping_sub(self, rhs)\n             }\n         }\n \n@@ -1169,13 +1157,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n-                    intrinsics::overflowing_mul(self, rhs)\n-                }\n-\n-                #[cfg(not(bootstrap))] {\n-                    intrinsics::wrapping_mul(self, rhs)\n-                }\n+                intrinsics::wrapping_mul(self, rhs)\n             }\n         }\n \n@@ -3040,13 +3022,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n-                    intrinsics::overflowing_add(self, rhs)\n-                }\n-\n-                #[cfg(not(bootstrap))] {\n-                    intrinsics::wrapping_add(self, rhs)\n-                }\n+                intrinsics::wrapping_add(self, rhs)\n             }\n         }\n \n@@ -3068,13 +3044,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n-                    intrinsics::overflowing_sub(self, rhs)\n-                }\n-\n-                #[cfg(not(bootstrap))] {\n-                    intrinsics::wrapping_sub(self, rhs)\n-                }\n+                intrinsics::wrapping_sub(self, rhs)\n             }\n         }\n \n@@ -3097,13 +3067,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            #[cfg(bootstrap)] {\n-                intrinsics::overflowing_mul(self, rhs)\n-            }\n-\n-            #[cfg(not(bootstrap))] {\n-                intrinsics::wrapping_mul(self, rhs)\n-            }\n+            intrinsics::wrapping_mul(self, rhs)\n         }\n \n         doc_comment! {"}, {"sha": "e8f0561604aec9aedf51ba77da44493a192418bd", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -71,7 +71,6 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "5ec21e6d9286266d4ceb5561367ac3ef01ec1890", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -62,9 +62,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_slice_len\"))]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_union))]\n+    #[allow_internal_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n         unsafe {\n             crate::ptr::Repr { rust: self }.raw.len\n@@ -81,7 +80,6 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_slice_len\"))]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "ece61dde490fd5cb8a3d843448544bcd1106863a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -2090,7 +2090,6 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_len\"))]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n     }\n@@ -2110,7 +2109,6 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_len\"))]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -2168,9 +2166,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_as_bytes\"))]\n     // SAFETY: const sound because we transmute two types with the same layout\n-    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_union))]\n+    #[allow_internal_unstable(const_fn_union)]\n     pub const fn as_bytes(&self) -> &[u8] {\n         #[repr(C)]\n         union Slices<'a> {"}, {"sha": "d5cdc266acb6accbdb10bb8a76b05aa3bd73d4a8", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -227,7 +227,7 @@ pub mod token_stream {\n /// To quote `$` itself, use `$$`.\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n #[allow_internal_unstable(proc_macro_def_site)]\n-#[cfg_attr(not(bootstrap), rustc_builtin_macro)]\n+#[rustc_builtin_macro]\n pub macro quote ($($t:tt)*) { /* compiler built-in */ }\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]"}, {"sha": "a25ef21d6978f782b343f5ace5cc921847d91189", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -974,7 +974,7 @@ pub struct FreeRegionInfo {\n ///\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n #[derive(Copy, Clone)]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"TyCtxt\")]\n+#[rustc_diagnostic_item = \"TyCtxt\"]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }"}, {"sha": "61483fa8a498e98eced21a1674ee30c5d3c51701", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -581,7 +581,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::TyS<'tcx> {\n     }\n }\n \n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"Ty\")]\n+#[rustc_diagnostic_item = \"Ty\"]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> rustc_serialize::UseSpecializedEncodable for Ty<'tcx> {}"}, {"sha": "036f41a4043d4892b449b83f74013b037534bea6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -86,7 +86,7 @@ impl BoundRegion {\n /// AST structure in `libsyntax/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n          RustcEncodable, RustcDecodable, HashStable, Debug)]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"TyKind\")]\n+#[rustc_diagnostic_item = \"TyKind\"]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     Bool,"}, {"sha": "4e29706714f3dde9d3a5ddd9fcfa731e7f087f28", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -8,7 +8,6 @@\n \n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "2985e7f70b52f649b0dce3c67243b749ebc10d81", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n \n-#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(rustc_private)]\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]"}, {"sha": "5d9683f8deda9642731bf110e70f4de94041c2b6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -238,7 +238,6 @@\n #![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(associated_type_bounds)]\n-#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_target_has_atomic)]"}, {"sha": "2c10220c766a8ab4b64877d166d8c8c14376881a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359a94849f5a66be4e5058ad9f5a480623a4627/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f359a94849f5a66be4e5058ad9f5a480623a4627", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n-#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_transmute)]"}]}