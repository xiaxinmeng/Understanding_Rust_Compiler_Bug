{"sha": "c39ef72d741a42025f581ceda115858ec3878e9f", "node_id": "C_kwDOAAsO6NoAKGMzOWVmNzJkNzQxYTQyMDI1ZjU4MWNlZGExMTU4NThlYzM4NzhlOWY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:44:47Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:42Z"}, "message": "Remove a Clean impl for a tuple (5)", "tree": {"sha": "c40a4ce57eebf83deaed8252bae87ce8b6413a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40a4ce57eebf83deaed8252bae87ce8b6413a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c39ef72d741a42025f581ceda115858ec3878e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c39ef72d741a42025f581ceda115858ec3878e9f", "html_url": "https://github.com/rust-lang/rust/commit/c39ef72d741a42025f581ceda115858ec3878e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c39ef72d741a42025f581ceda115858ec3878e9f/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "html_url": "https://github.com/rust-lang/rust/commit/9b51072309baf1f22048d59ab127fd7d5b7cc0d8"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "3b553cf78e4e66486895e8dc511ba6be8cd6dd5c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c39ef72d741a42025f581ceda115858ec3878e9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39ef72d741a42025f581ceda115858ec3878e9f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c39ef72d741a42025f581ceda115858ec3878e9f", "patch": "@@ -790,22 +790,23 @@ fn clean_function(\n     Function { decl, generics, header: sig.header }\n }\n \n-impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Arguments {\n-        Arguments {\n-            values: self\n-                .0\n-                .iter()\n-                .enumerate()\n-                .map(|(i, ty)| {\n-                    let mut name = self.1.get(i).map_or(kw::Empty, |ident| ident.name);\n-                    if name.is_empty() {\n-                        name = kw::Underscore;\n-                    }\n-                    Argument { name, type_: ty.clean(cx), is_const: false }\n-                })\n-                .collect(),\n-        }\n+fn clean_args_from_types_and_names(\n+    cx: &mut DocContext<'_>,\n+    types: &[hir::Ty<'_>],\n+    names: &[Ident],\n+) -> Arguments {\n+    Arguments {\n+        values: types\n+            .iter()\n+            .enumerate()\n+            .map(|(i, ty)| {\n+                let mut name = names.get(i).map_or(kw::Empty, |ident| ident.name);\n+                if name.is_empty() {\n+                    name = kw::Underscore;\n+                }\n+                Argument { name, type_: ty.clean(cx), is_const: false }\n+            })\n+            .collect(),\n     }\n }\n \n@@ -916,7 +917,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n                         // NOTE: generics must be cleaned before args\n                         let generics = self.generics.clean(cx);\n-                        let args = (sig.decl.inputs, names).clean(cx);\n+                        let args = clean_args_from_types_and_names(cx, sig.decl.inputs, names);\n                         let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n                         (generics, decl)\n                     });\n@@ -1714,7 +1715,7 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n             // NOTE: generics must be cleaned before args\n             let generic_params = self.generic_params.iter().map(|x| x.clean(cx)).collect();\n-            let args = (self.decl.inputs, self.param_names).clean(cx);\n+            let args = clean_args_from_types_and_names(cx, self.decl.inputs, self.param_names);\n             let decl = clean_fn_decl_with_args(cx, self.decl, args);\n             (generic_params, decl)\n         });\n@@ -2034,7 +2035,7 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n                         // NOTE: generics must be cleaned before args\n                         let generics = generics.clean(cx);\n-                        let args = (decl.inputs, names).clean(cx);\n+                        let args = clean_args_from_types_and_names(cx, decl.inputs, names);\n                         let decl = clean_fn_decl_with_args(cx, decl, args);\n                         (generics, decl)\n                     });"}]}