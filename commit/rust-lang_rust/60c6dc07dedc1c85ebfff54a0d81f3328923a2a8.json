{"sha": "60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "node_id": "C_kwDOAAsO6NoAKDYwYzZkYzA3ZGVkYzFjODVlYmZmZjU0YTBkODFmMzMyODkyM2EyYTg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-22T12:58:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-31T13:07:59Z"}, "message": "resolve: Restore some effective visibility optimizations\n\nSomething similar was previously removed as a part of #104602, but after this PR all table changes should also be \"locally correct\" after every update.", "tree": {"sha": "845e81233718ab06ec57ba1f86c0aacc67fa9bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/845e81233718ab06ec57ba1f86c0aacc67fa9bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "html_url": "https://github.com/rust-lang/rust/commit/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "html_url": "https://github.com/rust-lang/rust/commit/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "bed579f6b9258607aa766900b326ac8f4a903ce4", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "patch": "@@ -155,10 +155,6 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         }\n     }\n \n-    fn cheap_private_vis(&self, parent_id: ParentId<'_>) -> Option<Visibility> {\n-        matches!(parent_id, ParentId::Def(_)).then_some(self.current_private_vis)\n-    }\n-\n     fn effective_vis_or_private(&mut self, parent_id: ParentId<'a>) -> EffectiveVisibility {\n         // Private nodes are only added to the table for caching, they could be added or removed at\n         // any moment without consequences, so we don't set `changed` to true when adding them.\n@@ -172,29 +168,53 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         }\n     }\n \n+    /// All effective visibilities for a node are larger or equal than private visibility\n+    /// for that node (see `check_invariants` in middle/privacy.rs).\n+    /// So if either parent or nominal visibility is the same as private visibility, then\n+    /// `min(parent_vis, nominal_vis) <= private_vis`, and the update logic is guaranteed\n+    /// to not update anything and we can skip it.\n+    ///\n+    /// We are checking this condition only if the correct value of private visibility is\n+    /// cheaply available, otherwise it does't make sense performance-wise.\n+    ///\n+    /// `None` is returned if the update can be skipped,\n+    /// and cheap private visibility is returned otherwise.\n+    fn may_update(\n+        &self,\n+        nominal_vis: Visibility,\n+        parent_id: ParentId<'_>,\n+    ) -> Option<Option<Visibility>> {\n+        match parent_id {\n+            ParentId::Def(def_id) => (nominal_vis != self.current_private_vis\n+                && self.r.visibilities[&def_id] != self.current_private_vis)\n+                .then_some(Some(self.current_private_vis)),\n+            ParentId::Import(_) => Some(None),\n+        }\n+    }\n+\n     fn update_import(&mut self, binding: ImportId<'a>, parent_id: ParentId<'a>) {\n         let nominal_vis = binding.vis.expect_local();\n-        let private_vis = self.cheap_private_vis(parent_id);\n+        let Some(cheap_private_vis) = self.may_update(nominal_vis, parent_id) else { return };\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n         let tcx = self.r.tcx;\n         self.changed |= self.import_effective_visibilities.update(\n             binding,\n             nominal_vis,\n-            || private_vis.unwrap_or_else(|| self.r.private_vis_import(binding)),\n+            || cheap_private_vis.unwrap_or_else(|| self.r.private_vis_import(binding)),\n             inherited_eff_vis,\n             parent_id.level(),\n             tcx,\n         );\n     }\n \n     fn update_def(&mut self, def_id: LocalDefId, nominal_vis: Visibility, parent_id: ParentId<'a>) {\n-        let private_vis = self.cheap_private_vis(parent_id);\n+        let Some(cheap_private_vis) = self.may_update(nominal_vis, parent_id) else { return };\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n         let tcx = self.r.tcx;\n         self.changed |= self.def_effective_visibilities.update(\n             def_id,\n             nominal_vis,\n-            || private_vis.unwrap_or_else(|| self.r.private_vis_def(def_id)),\n+            || cheap_private_vis.unwrap_or_else(|| self.r.private_vis_def(def_id)),\n             inherited_eff_vis,\n             parent_id.level(),\n             tcx,"}, {"sha": "e9ac931608703c4a4b23b0bdd1278965c5e61f03", "filename": "tests/ui/privacy/effective_visibilities.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities.rs?ref=60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "patch": "@@ -18,13 +18,13 @@ mod outer { //~ ERROR Direct: pub(crate), Reexported: pub(crate), Reachable: pub\n         }\n \n         #[rustc_effective_visibility]\n-        struct PrivStruct; //~ ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n-                           //~| ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+        struct PrivStruct; //~ ERROR not in the table\n+                           //~| ERROR not in the table\n \n         #[rustc_effective_visibility]\n         pub union PubUnion { //~ ERROR Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n             #[rustc_effective_visibility]\n-            a: u8, //~ ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+            a: u8, //~ ERROR not in the table\n             #[rustc_effective_visibility]\n             pub b: u8, //~ ERROR Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n         }"}, {"sha": "f74f812e1a0ed1bf2e611f03bb653eb4f7e4e074", "filename": "tests/ui/privacy/effective_visibilities.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c6dc07dedc1c85ebfff54a0d81f3328923a2a8/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities.stderr?ref=60c6dc07dedc1c85ebfff54a0d81f3328923a2a8", "patch": "@@ -34,13 +34,13 @@ error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImpl\n LL |         pub trait PubTrait {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+error: not in the table\n   --> $DIR/effective_visibilities.rs:21:9\n    |\n LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+error: not in the table\n   --> $DIR/effective_visibilities.rs:21:9\n    |\n LL |         struct PrivStruct;\n@@ -52,7 +52,7 @@ error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImpl\n LL |         pub union PubUnion {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+error: not in the table\n   --> $DIR/effective_visibilities.rs:27:13\n    |\n LL |             a: u8,"}]}