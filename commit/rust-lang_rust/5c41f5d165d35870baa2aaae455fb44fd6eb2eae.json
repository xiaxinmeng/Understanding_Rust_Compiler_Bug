{"sha": "5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "node_id": "C_kwDOAAsO6NoAKDVjNDFmNWQxNjVkMzU4NzBiYWEyYWFhZTQ1NWZiNDRmZDZlYjJlYWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T01:05:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T01:05:49Z"}, "message": "feat: Deprioritize completions of private but editable definitions", "tree": {"sha": "f4273ce8ae3ac825606d276536a71968dc692366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4273ce8ae3ac825606d276536a71968dc692366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "html_url": "https://github.com/rust-lang/rust/commit/5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76", "html_url": "https://github.com/rust-lang/rust/commit/d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76"}], "stats": {"total": 178, "additions": 120, "deletions": 58}, "files": [{"sha": "515200ef881bf1a4c82f35cfb856590db2b2fd1c", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -22,6 +22,7 @@ use hir::known;\n use ide_db::SymbolKind;\n \n use crate::{\n+    context::Visible,\n     item::Builder,\n     render::{\n         const_::render_const,\n@@ -91,7 +92,7 @@ impl Completions {\n             cov_mark::hit!(qualified_path_doc_hidden);\n             return;\n         }\n-        self.add(render_resolution(RenderContext::new(ctx), local_name, resolution));\n+        self.add(render_resolution(RenderContext::new(ctx, false), local_name, resolution));\n     }\n \n     pub(crate) fn add_macro(\n@@ -104,7 +105,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        self.add(render_macro(RenderContext::new(ctx), None, name, macro_));\n+        self.add(render_macro(RenderContext::new(ctx, false), None, name, macro_));\n     }\n \n     pub(crate) fn add_function(\n@@ -113,10 +114,12 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n-        if !ctx.is_visible(&func) {\n-            return;\n-        }\n-        self.add(render_fn(RenderContext::new(ctx), None, local_name, func));\n+        let is_private_editable = match ctx.is_visible(&func) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add(render_fn(RenderContext::new(ctx, is_private_editable), None, local_name, func));\n     }\n \n     pub(crate) fn add_method(\n@@ -126,32 +129,44 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n-        if !ctx.is_visible(&func) {\n-            return;\n-        }\n-        self.add(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n+        let is_private_editable = match ctx.is_visible(&func) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add(render_method(\n+            RenderContext::new(ctx, is_private_editable),\n+            None,\n+            receiver,\n+            local_name,\n+            func,\n+        ));\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, konst: hir::Const) {\n-        if !ctx.is_visible(&konst) {\n-            return;\n-        }\n-        self.add_opt(render_const(RenderContext::new(ctx), konst));\n+        let is_private_editable = match ctx.is_visible(&konst) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add_opt(render_const(RenderContext::new(ctx, is_private_editable), konst));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if !ctx.is_visible(&type_alias) {\n-            return;\n-        }\n-        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n+        let is_private_editable = match ctx.is_visible(&type_alias) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add_opt(render_type_alias(RenderContext::new(ctx, is_private_editable), type_alias));\n     }\n \n     pub(crate) fn add_type_alias_with_eq(\n         &mut self,\n         ctx: &CompletionContext,\n         type_alias: hir::TypeAlias,\n     ) {\n-        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n+        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx, false), type_alias));\n     }\n \n     pub(crate) fn add_qualified_enum_variant(\n@@ -160,7 +175,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n+        let item = render_variant(RenderContext::new(ctx, false), None, None, variant, Some(path));\n         self.add(item);\n     }\n \n@@ -170,7 +185,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n+        let item = render_variant(RenderContext::new(ctx, false), None, local_name, variant, None);\n         self.add(item);\n     }\n \n@@ -181,10 +196,12 @@ impl Completions {\n         field: hir::Field,\n         ty: &hir::Type,\n     ) {\n-        if !ctx.is_visible(&field) {\n-            return;\n-        }\n-        let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n+        let is_private_editable = match ctx.is_visible(&field) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        let item = render_field(RenderContext::new(ctx, is_private_editable), receiver, field, ty);\n         self.add(item);\n     }\n \n@@ -195,7 +212,7 @@ impl Completions {\n         path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_struct_literal(RenderContext::new(ctx), strukt, path, local_name);\n+        let item = render_struct_literal(RenderContext::new(ctx, false), strukt, path, local_name);\n         self.add_opt(item);\n     }\n \n@@ -206,7 +223,7 @@ impl Completions {\n         field: usize,\n         ty: &hir::Type,\n     ) {\n-        let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n+        let item = render_tuple_field(RenderContext::new(ctx, false), receiver, field, ty);\n         self.add(item);\n     }\n \n@@ -221,7 +238,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx, false), variant, local_name, None));\n     }\n \n     pub(crate) fn add_qualified_variant_pat(\n@@ -230,7 +247,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx, false), variant, None, Some(path)));\n     }\n \n     pub(crate) fn add_struct_pat(\n@@ -239,7 +256,7 @@ impl Completions {\n         strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n+        self.add_opt(render_struct_pat(RenderContext::new(ctx, false), strukt, local_name));\n     }\n }\n "}, {"sha": "8ca4634be25d2bffa6ecde931b61d25453762164", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -193,7 +193,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             })\n             .filter_map(|import| {\n                 render_resolution_with_import(\n-                    RenderContext::new(ctx),\n+                    RenderContext::new(ctx, false),\n                     ImportEdit { import, scope: import_scope.clone() },\n                 )\n             }),"}, {"sha": "5adb0c856bbad23b8a88ad1dd42360eb0b96059b", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -34,6 +34,11 @@ pub(crate) enum PatternRefutability {\n     Refutable,\n     Irrefutable,\n }\n+pub enum Visible {\n+    Yes,\n+    Editable,\n+    No,\n+}\n \n #[derive(Copy, Clone, Debug)]\n pub(super) enum PathKind {\n@@ -285,7 +290,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     /// Checks if an item is visible and not `doc(hidden)` at the completion site.\n-    pub(crate) fn is_visible<I>(&self, item: &I) -> bool\n+    pub(crate) fn is_visible<I>(&self, item: &I) -> Visible\n     where\n         I: hir::HasVisibility + hir::HasAttrs + hir::HasCrate + Copy,\n     {\n@@ -339,20 +344,24 @@ impl<'a> CompletionContext<'a> {\n         vis: &hir::Visibility,\n         attrs: &hir::Attrs,\n         defining_crate: hir::Crate,\n-    ) -> bool {\n+    ) -> Visible {\n         let module = match self.module {\n             Some(it) => it,\n-            None => return false,\n+            None => return Visible::No,\n         };\n         if !vis.is_visible_from(self.db, module.into()) {\n             // If the definition location is editable, also show private items\n             let root_file = defining_crate.root_file(self.db);\n             let source_root_id = self.db.file_source_root(root_file);\n             let is_editable = !self.db.source_root(source_root_id).is_library;\n-            return is_editable;\n+            return if is_editable { Visible::Editable } else { Visible::No };\n         }\n \n-        !self.is_doc_hidden(attrs, defining_crate)\n+        if self.is_doc_hidden(attrs, defining_crate) {\n+            Visible::No\n+        } else {\n+            Visible::Yes\n+        }\n     }\n \n     fn is_doc_hidden(&self, attrs: &hir::Attrs, defining_crate: hir::Crate) -> bool {"}, {"sha": "acaf17c25510d4c1a07719166ef3077d1d239307", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -141,6 +141,8 @@ pub struct CompletionRelevance {\n     pub is_local: bool,\n     /// Set for method completions of the `core::ops` and `core::cmp` family.\n     pub is_op_method: bool,\n+    /// Set for item completions that are private but in the workspace.\n+    pub is_private_editable: bool,\n     /// This is set in cases like these:\n     ///\n     /// ```\n@@ -177,7 +179,7 @@ pub enum CompletionRelevanceTypeMatch {\n }\n \n impl CompletionRelevance {\n-    const BASE_LINE: u32 = 1;\n+    const BASE_LINE: u32 = 2;\n     /// Provides a relevance score. Higher values are more relevant.\n     ///\n     /// The absolute value of the relevance score is not meaningful, for\n@@ -190,6 +192,15 @@ impl CompletionRelevance {\n     pub fn score(&self) -> u32 {\n         let mut score = Self::BASE_LINE;\n \n+        // score decreases\n+        if self.is_op_method {\n+            score -= 1;\n+        }\n+        if self.is_private_editable {\n+            score -= 1;\n+        }\n+\n+        // score increases\n         if self.exact_name_match {\n             score += 1;\n         }\n@@ -201,9 +212,6 @@ impl CompletionRelevance {\n         if self.is_local {\n             score += 1;\n         }\n-        if self.is_op_method {\n-            score -= 1;\n-        }\n         if self.exact_postfix_snippet_match {\n             score += 100;\n         }\n@@ -214,7 +222,7 @@ impl CompletionRelevance {\n     /// some threshold such that we think it is especially likely\n     /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self.score() > (Self::BASE_LINE + 1)\n+        self.score() > Self::BASE_LINE\n     }\n }\n \n@@ -564,7 +572,15 @@ mod tests {\n         // This test asserts that the relevance score for these items is ascending, and\n         // that any items in the same vec have the same score.\n         let expected_relevance_order = vec![\n-            vec![CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() }],\n+            vec![CompletionRelevance {\n+                is_op_method: true,\n+                is_private_editable: true,\n+                ..CompletionRelevance::default()\n+            }],\n+            vec![\n+                CompletionRelevance { is_private_editable: true, ..CompletionRelevance::default() },\n+                CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() },\n+            ],\n             vec![CompletionRelevance::default()],\n             vec![\n                 CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },"}, {"sha": "6be265112383e0f7b7a00f15437c6e62f1477a43", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -28,11 +28,15 @@ use crate::{\n #[derive(Debug)]\n pub(crate) struct RenderContext<'a> {\n     completion: &'a CompletionContext<'a>,\n+    is_private_editable: bool,\n }\n \n impl<'a> RenderContext<'a> {\n-    pub(crate) fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {\n-        RenderContext { completion }\n+    pub(crate) fn new(\n+        completion: &'a CompletionContext<'a>,\n+        is_private_editable: bool,\n+    ) -> RenderContext<'a> {\n+        RenderContext { completion, is_private_editable }\n     }\n \n     fn snippet_cap(&self) -> Option<SnippetCap> {\n@@ -47,6 +51,10 @@ impl<'a> RenderContext<'a> {\n         self.completion.source_range()\n     }\n \n+    fn completion_relevance(&self) -> CompletionRelevance {\n+        CompletionRelevance { is_private_editable: self.is_private_editable, ..Default::default() }\n+    }\n+\n     fn is_deprecated(&self, def: impl HasAttrs) -> bool {\n         let attrs = def.attrs(self.db());\n         attrs.by_key(\"deprecated\").exists() || attrs.by_key(\"rustc_deprecated\").exists()\n@@ -582,6 +590,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                         trigger_call_info: true,\n@@ -603,6 +612,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },\n@@ -689,6 +699,7 @@ fn foo() { A { the$0 } }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },"}, {"sha": "89e6c82ddef60769077958e3fb9ef43a76d823b5", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -18,7 +18,8 @@ fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem>\n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(const_))\n         .set_deprecated(ctx.is_deprecated(const_) || ctx.is_deprecated_assoc_item(const_))\n-        .detail(detail);\n+        .detail(detail)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(actm) = const_.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {"}, {"sha": "914ace910d4fbaaa10e1771c09fc3f5f1f26bbb7", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn render_variant(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     variant: hir::Variant,\n     path: Option<hir::ModPath>,\n@@ -58,18 +58,18 @@ fn render(\n     if variant_kind == hir::StructKind::Tuple {\n         cov_mark::hit!(inserts_parens_for_tuple_enums);\n         let params = Params::Anonymous(variant.fields(db).len());\n-        item.add_call_parens(ctx.completion, short_qualified_name, params);\n+        item.add_call_parens(completion, short_qualified_name, params);\n     } else if qualified {\n         item.lookup_by(short_qualified_name);\n     }\n \n-    let ty = variant.parent_enum(ctx.completion.db).ty(ctx.completion.db);\n+    let ty = variant.parent_enum(completion.db).ty(completion.db);\n     item.set_relevance(CompletionRelevance {\n-        type_match: compute_type_match(ctx.completion, &ty),\n-        ..CompletionRelevance::default()\n+        type_match: compute_type_match(completion, &ty),\n+        ..ctx.completion_relevance()\n     });\n \n-    if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n+    if let Some(ref_match) = compute_ref_match(completion, &ty) {\n         item.ref_match(ref_match);\n     }\n "}, {"sha": "20c7fe657ce7733cbec25f2df516a3b889465599", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn render_method(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n     func_type: FuncType,\n@@ -75,7 +75,7 @@ fn render(\n         type_match: compute_type_match(completion, &ret_type),\n         exact_name_match: compute_exact_name_match(completion, &call),\n         is_op_method,\n-        ..CompletionRelevance::default()\n+        ..ctx.completion_relevance()\n     });\n \n     if let Some(ref_match) = compute_ref_match(completion, &ret_type) {"}, {"sha": "29bd90aec9f512bcc944952bc7a1cd17d097f337", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn render_macro(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     name: hir::Name,\n     macro_: hir::MacroDef,\n     import_to_add: Option<ImportEdit>,\n@@ -53,7 +53,8 @@ fn render(\n     );\n     item.set_deprecated(ctx.is_deprecated(macro_))\n         .set_detail(detail(&completion.sema, macro_))\n-        .set_documentation(docs);\n+        .set_documentation(docs)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(import_to_add) = import_to_add {\n         item.add_import(import_to_add);"}, {"sha": "68e29246d74ff7b18be2a8172826f16948424e06", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -59,7 +59,10 @@ fn build_completion(\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), name);\n-    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&pat);\n+    item.set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n+        .detail(&pat)\n+        .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n         None => item.insert_text(pat),"}, {"sha": "a3d4bcf29e99a7b3892176ce49463c8e9cf81854", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -41,7 +41,10 @@ fn build_completion(\n         ctx.source_range(),\n         SmolStr::from_iter([&name, \" {\u2026}\"]),\n     );\n-    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&literal);\n+    item.set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n+        .detail(&literal)\n+        .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n         None => item.insert_text(literal),"}, {"sha": "a518be87bf0ff846ff984d8ca26ddb4ca34fa974", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c41f5d165d35870baa2aaae455fb44fd6eb2eae/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=5c41f5d165d35870baa2aaae455fb44fd6eb2eae", "patch": "@@ -39,7 +39,8 @@ fn render(\n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(type_alias))\n         .set_deprecated(ctx.is_deprecated(type_alias) || ctx.is_deprecated_assoc_item(type_alias))\n-        .detail(detail);\n+        .detail(detail)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(actm) = type_alias.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {"}]}