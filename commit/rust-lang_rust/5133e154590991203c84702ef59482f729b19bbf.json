{"sha": "5133e154590991203c84702ef59482f729b19bbf", "node_id": "C_kwDOAAsO6NoAKDUxMzNlMTU0NTkwOTkxMjAzYzg0NzAyZWY1OTQ4MmY3MjliMTliYmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T03:42:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T03:42:37Z"}, "message": "Auto merge of #109521 - tmiasko:const-prop-validation, r=wesleywiser\n\nDon't validate constants in const propagation\n\nValidation is neither necessary nor desirable.\n\nThe constant validation is already omitted at mir-opt-level >= 3, so there there are not changes in MIR test output (the propagation of invalid constants is covered by an existing test in tests/mir-opt/const_prop/invalid_constant.rs).", "tree": {"sha": "b2d075cd5993b4d9d8d327ff278f5e0a6e61faaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d075cd5993b4d9d8d327ff278f5e0a6e61faaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5133e154590991203c84702ef59482f729b19bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5133e154590991203c84702ef59482f729b19bbf", "html_url": "https://github.com/rust-lang/rust/commit/5133e154590991203c84702ef59482f729b19bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5133e154590991203c84702ef59482f729b19bbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb63572d271855a5ccef79a3e10a8015d00f6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb63572d271855a5ccef79a3e10a8015d00f6ad", "html_url": "https://github.com/rust-lang/rust/commit/1cb63572d271855a5ccef79a3e10a8015d00f6ad"}, {"sha": "d1bd1be66834d166a9cf509250ffad1de8ff2709", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bd1be66834d166a9cf509250ffad1de8ff2709", "html_url": "https://github.com/rust-lang/rust/commit/d1bd1be66834d166a9cf509250ffad1de8ff2709"}], "stats": {"total": 287, "additions": 247, "deletions": 40}, "files": [{"sha": "01b77289937fb9f00cae279b0750f58f1e31f738", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -38,16 +38,14 @@ macro_rules! throw_validation_failure {\n             msg.push_str(\", but expected \");\n             write!(&mut msg, $($expected_fmt)*).unwrap();\n         )?\n-        let path = rustc_middle::ty::print::with_no_trimmed_paths!({\n-            let where_ = &$where;\n-            if !where_.is_empty() {\n-                let mut path = String::new();\n-                write_path(&mut path, where_);\n-                Some(path)\n-            } else {\n-                None\n-            }\n-        });\n+        let where_ = &$where;\n+        let path = if !where_.is_empty() {\n+            let mut path = String::new();\n+            write_path(&mut path, where_);\n+            Some(path)\n+        } else {\n+            None\n+        };\n         throw_ub!(ValidationFailure { path, msg })\n     }};\n }"}, {"sha": "deec66bbaf356555e60868bf1faf4216b5b520cc", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -21,9 +21,9 @@ use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::MirPass;\n use rustc_const_eval::interpret::{\n-    self, compile_time_machine, AllocId, ConstAllocation, ConstValue, CtfeValidationMode, Frame,\n-    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer,\n-    Scalar, StackPopCleanup,\n+    self, compile_time_machine, AllocId, ConstAllocation, ConstValue, Frame, ImmTy, Immediate,\n+    InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n+    StackPopCleanup,\n };\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n@@ -464,16 +464,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n                 return None;\n             }\n-            // Do not try creating references, nor any types with potentially-complex\n-            // invariants. This avoids an issue where checking validity would do a\n-            // bunch of work generating a nice message about the invariant violation,\n-            // only to not show it to anyone (since this isn't the lint).\n-            Rvalue::Cast(CastKind::Transmute, op, dst_ty) if !dst_ty.is_primitive() => {\n-                trace!(\"skipping Transmute of {:?} to {:?}\", op, dst_ty);\n-\n-                return None;\n-            }\n-\n             // There's no other checking to do at this time.\n             Rvalue::Aggregate(..)\n             | Rvalue::Use(..)\n@@ -591,18 +581,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         trace!(\"attempting to replace {:?} with {:?}\", rval, value);\n-        if let Err(e) = self.ecx.const_validate_operand(\n-            value,\n-            vec![],\n-            // FIXME: is ref tracking too expensive?\n-            // FIXME: what is the point of ref tracking if we do not even check the tracked refs?\n-            &mut interpret::RefTracking::empty(),\n-            CtfeValidationMode::Regular,\n-        ) {\n-            trace!(\"validation error, attempt failed: {:?}\", e);\n-            return;\n-        }\n-\n         // FIXME> figure out what to do when read_immediate_raw fails\n         let imm = self.ecx.read_immediate_raw(value).ok();\n "}, {"sha": "933dfbb5166d28ffec0c7ac7a99ec5d06a1b1cbb", "filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "previous_filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.diff"}, {"sha": "933dfbb5166d28ffec0c7ac7a99ec5d06a1b1cbb", "filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.64bit.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `from_char` before ConstProp\n++ // MIR for `from_char` after ConstProp\n+  \n+  fn from_char() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/transmute.rs:+0:23: +0:26\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const 'R' as i32 (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n++         _0 = const 82_i32;               // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "4a31194de6eed992d5ec2c9d00ee9ef7ac596d28", "filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.32bit.diff", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -7,7 +7,8 @@\n       }\n   \n       bb0: {\n-          _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n+-         _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n++         _0 = const {transmute(0xff): bool}; // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n           return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n       }\n   }", "previous_filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.diff"}, {"sha": "4a31194de6eed992d5ec2c9d00ee9ef7ac596d28", "filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.64bit.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `invalid_bool` before ConstProp\n++ // MIR for `invalid_bool` after ConstProp\n+  \n+  fn invalid_bool() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n++         _0 = const {transmute(0xff): bool}; // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "2c541f2f6a08442803a31b68176d628580384ddd", "filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.32bit.diff", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -7,7 +7,8 @@\n       }\n   \n       bb0: {\n-          _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n+-         _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n++         _0 = const {transmute(0x7fffffff): char}; // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n           return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n       }\n   }", "previous_filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.diff"}, {"sha": "2c541f2f6a08442803a31b68176d628580384ddd", "filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.64bit.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `invalid_char` before ConstProp\n++ // MIR for `invalid_char` after ConstProp\n+  \n+  fn invalid_char() -> char {\n+      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n++         _0 = const {transmute(0x7fffffff): char}; // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "76d464789c191d33025a08571f7448c7b9607e44", "filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "previous_filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.diff"}, {"sha": "76d464789c191d33025a08571f7448c7b9607e44", "filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.64bit.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `less_as_i8` before ConstProp\n++ // MIR for `less_as_i8` after ConstProp\n+  \n+  fn less_as_i8() -> i8 {\n+      let mut _0: i8;                      // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:26\n+      let mut _1: std::cmp::Ordering;      // in scope 0 at $DIR/transmute.rs:+1:24: +1:48\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n+-         _1 = Less;                       // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n+-         _0 = move _1 as i8 (Transmute);  // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n++         _1 = const Less;                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0xff)) }\n++         _0 = const -1_i8;                // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n+          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+1:48: +1:49\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "762c421715ab5ff48f525702cc95d603d790c836", "filename": "tests/mir-opt/const_prop/transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,5 +1,7 @@\n // unit-test: ConstProp\n // compile-flags: -O --crate-type=lib\n+// ignore-endian-big\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n use std::mem::transmute;\n "}, {"sha": "538b1f26e4c9bc444b9e18475b0e06a1f7841b8e", "filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "previous_filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.diff"}, {"sha": "538b1f26e4c9bc444b9e18475b0e06a1f7841b8e", "filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.64bit.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `undef_union_as_integer` before ConstProp\n++ // MIR for `undef_union_as_integer` after ConstProp\n+  \n+  fn undef_union_as_integer() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/transmute.rs:+0:43: +0:46\n+      let mut _1: undef_union_as_integer::Union32; // in scope 0 at $DIR/transmute.rs:+2:24: +2:44\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+2:40: +2:42\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n+          StorageLive(_2);                 // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n+          _2 = ();                         // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n+          _1 = Union32 { value: move _2 }; // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n+          StorageDead(_2);                 // scope 1 at $DIR/transmute.rs:+2:43: +2:44\n+          _0 = move _1 as u32 (Transmute); // scope 1 at $DIR/transmute.rs:+2:14: +2:45\n+          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+2:44: +2:45\n+          return;                          // scope 0 at $DIR/transmute.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "bc41b5d08131eb275a7f9629608c1edc0f64b55a", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.32bit.diff", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -15,7 +15,11 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+-         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x00000001)) }\n           StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }", "previous_filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.diff"}, {"sha": "c4376e6e17afc32fee69357adddc2f0771217e9c", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.64bit.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `unreachable_box` before ConstProp\n++ // MIR for `unreachable_box` after ConstProp\n+  \n+  fn unreachable_box() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x0000000000000001)) }\n+          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "81b7b36899309f1c2460385f221b01dd94452893", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "previous_filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.diff"}, {"sha": "81b7b36899309f1c2460385f221b01dd94452893", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.64bit.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `unreachable_direct` before ConstProp\n++ // MIR for `unreachable_direct` after ConstProp\n+  \n+  fn unreachable_direct() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n+      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n+      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+      }\n+  }\n+  "}, {"sha": "47f023cd93dd05d5b434afb7e4979f6f439d69cd", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.32bit.diff", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -17,7 +17,11 @@\n           StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n           StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+-         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x00000001)) }\n           _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n           StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n           StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16", "previous_filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.diff"}, {"sha": "62300d2e313b3671a865574ff2a61758d2fd0a40", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.64bit.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `unreachable_mut` before ConstProp\n++ // MIR for `unreachable_mut` after ConstProp\n+  \n+  fn unreachable_mut() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+-         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x0000000000000001)) }\n+          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n+          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "8578f898a7eee04bb0967d867bd7ea27caf01980", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.32bit.diff", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -15,7 +15,11 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+-         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x00000001)) }\n           StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }", "previous_filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.diff"}, {"sha": "8b11cea93658d17a92c5e016fe59fa759b4cc19f", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.64bit.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `unreachable_ref` before ConstProp\n++ // MIR for `unreachable_ref` after ConstProp\n+  \n+  fn unreachable_ref() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x0000000000000001)) }\n+          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "eac33b730034864ee0bac7a4f0204e71d76cfa0e", "filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "previous_filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.diff"}, {"sha": "eac33b730034864ee0bac7a4f0204e71d76cfa0e", "filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.64bit.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `valid_char` before ConstProp\n++ // MIR for `valid_char` after ConstProp\n+  \n+  fn valid_char() -> char {\n+      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:28\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const 82_u32 as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n++         _0 = const 'R';                  // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}]}