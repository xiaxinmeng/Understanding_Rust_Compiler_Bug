{"sha": "6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "node_id": "C_kwDOAAsO6NoAKDZiZmU3ZjAxZGNlNWE5YzRkMTcxMWRjM2YzMGExZjljMTNkOWVlY2I", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-15T21:46:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-15T22:42:11Z"}, "message": "asm: Match clang behavior for inlateout fixed register operands\n\nWe have 2 options for representing LLVM constraints for `inlateout`\noperands on a fixed register (e.g. `r0`): `={r0},0` or `={r0},{r0}`.\n\nThis PR changes the behavior to the latter, which matches the behavior\nof Clang since https://reviews.llvm.org/D87279.", "tree": {"sha": "71454c677701112bf233909b10969fd099ed457c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71454c677701112bf233909b10969fd099ed457c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "html_url": "https://github.com/rust-lang/rust/commit/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "html_url": "https://github.com/rust-lang/rust/commit/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "0254f98294858bd5279354b788712358050f45c2", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "patch": "@@ -130,15 +130,24 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     op_idx.insert(idx, constraints.len());\n                     constraints.push(reg_to_llvm(reg, Some(&value.layout)));\n                 }\n-                InlineAsmOperandRef::InOut { reg, late: _, in_value, out_place: _ } => {\n+                InlineAsmOperandRef::InOut { reg, late, in_value, out_place: _ } => {\n                     let value = llvm_fixup_input(\n                         self,\n                         in_value.immediate(),\n                         reg.reg_class(),\n                         &in_value.layout,\n                     );\n                     inputs.push(value);\n-                    constraints.push(format!(\"{}\", op_idx[&idx]));\n+\n+                    // In the case of fixed registers, we have the choice of\n+                    // either using a tied operand or duplicating the constraint.\n+                    // We prefer the latter because it matches the behavior of\n+                    // Clang.\n+                    if late && matches!(reg, InlineAsmRegOrRegClass::Reg(_)) {\n+                        constraints.push(format!(\"{}\", reg_to_llvm(reg, Some(&in_value.layout))));\n+                    } else {\n+                        constraints.push(format!(\"{}\", op_idx[&idx]));\n+                    }\n                 }\n                 InlineAsmOperandRef::SymFn { instance } => {\n                     inputs.push(self.cx.get_fn(instance));"}]}