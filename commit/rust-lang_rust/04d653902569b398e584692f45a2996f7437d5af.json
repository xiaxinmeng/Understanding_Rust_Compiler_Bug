{"sha": "04d653902569b398e584692f45a2996f7437d5af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZDY1MzkwMjU2OWIzOThlNTg0NjkyZjQ1YTI5OTZmNzQzN2Q1YWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T18:56:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-17T18:56:00Z"}, "message": "Rollup merge of #61893 - chpio:weak_ptr_eq_methods, r=rkruppe\n\nmake `Weak::ptr_eq`s into methods\n\nThis makes the `Weak::ptr_eq`s associated function into methods. There's no reason for methods on `Weak`s to be associated functions, as there is no `Dered` thus no possibility of a collision. Also: methods can be called using the associated function syntax.\n\nfollow up on https://github.com/rust-lang/rust/pull/55987\n[Tracking issue for weak_ptr_eq](https://github.com/rust-lang/rust/issues/55981)", "tree": {"sha": "a4d99e21fa840a46bfa7788271b845b931b71b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d99e21fa840a46bfa7788271b845b931b71b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04d653902569b398e584692f45a2996f7437d5af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdB+JACRBK7hj4Ov3rIwAAdHIIAH3Cocrw4q4AlvT/N9yajRsr\nAmSJ8XcDmagrfbXfAKXWuh7q9MrUKLGtSBh4syRLqD2fOEYVttnb66aVbb2wk0Rp\nzRS5vtwHYUGEiLsE0xRRWcEaXzjnr069d/rlely2ECzkujVKlleXUkGT6PK0dS47\n94igndcUfgASn5u/kuHVidCRFq3xlM2HzyCb733W4waLeQiF10uF9N67J3+K+Blu\n0oHD2McpsGiMMrg/zKKFM2t5TeekmUbWpXi29c2GkBbYM7TPDXaeU4FtMQRdLjHt\nhBQmAFq9NKDjTNdPsw5UD7iilP8MsUuZ2+889IPyME2Y1HcnS3MBA7QAyUpjyQo=\n=jA1u\n-----END PGP SIGNATURE-----\n", "payload": "tree a4d99e21fa840a46bfa7788271b845b931b71b19\nparent 2d3d0b7e934509327a757f467b89f1059a1f45c1\nparent 387ac060d2044be63786571fcf7831879d2a2bfb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560797760 +0200\ncommitter GitHub <noreply@github.com> 1560797760 +0200\n\nRollup merge of #61893 - chpio:weak_ptr_eq_methods, r=rkruppe\n\nmake `Weak::ptr_eq`s into methods\n\nThis makes the `Weak::ptr_eq`s associated function into methods. There's no reason for methods on `Weak`s to be associated functions, as there is no `Dered` thus no possibility of a collision. Also: methods can be called using the associated function syntax.\n\nfollow up on https://github.com/rust-lang/rust/pull/55987\n[Tracking issue for weak_ptr_eq](https://github.com/rust-lang/rust/issues/55981)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04d653902569b398e584692f45a2996f7437d5af", "html_url": "https://github.com/rust-lang/rust/commit/04d653902569b398e584692f45a2996f7437d5af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04d653902569b398e584692f45a2996f7437d5af/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3d0b7e934509327a757f467b89f1059a1f45c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3d0b7e934509327a757f467b89f1059a1f45c1", "html_url": "https://github.com/rust-lang/rust/commit/2d3d0b7e934509327a757f467b89f1059a1f45c1"}, {"sha": "387ac060d2044be63786571fcf7831879d2a2bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/387ac060d2044be63786571fcf7831879d2a2bfb", "html_url": "https://github.com/rust-lang/rust/commit/387ac060d2044be63786571fcf7831879d2a2bfb"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "ee78839f7f00318bf12b3dfe0623d0e92df37d8b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04d653902569b398e584692f45a2996f7437d5af/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d653902569b398e584692f45a2996f7437d5af/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=04d653902569b398e584692f45a2996f7437d5af", "patch": "@@ -1515,18 +1515,18 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// ```\n     /// #![feature(weak_ptr_eq)]\n-    /// use std::rc::{Rc, Weak};\n+    /// use std::rc::Rc;\n     ///\n     /// let first_rc = Rc::new(5);\n     /// let first = Rc::downgrade(&first_rc);\n     /// let second = Rc::downgrade(&first_rc);\n     ///\n-    /// assert!(Weak::ptr_eq(&first, &second));\n+    /// assert!(first.ptr_eq(&second));\n     ///\n     /// let third_rc = Rc::new(5);\n     /// let third = Rc::downgrade(&third_rc);\n     ///\n-    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// assert!(!first.ptr_eq(&third));\n     /// ```\n     ///\n     /// Comparing `Weak::new`.\n@@ -1537,16 +1537,16 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// let first = Weak::new();\n     /// let second = Weak::new();\n-    /// assert!(Weak::ptr_eq(&first, &second));\n+    /// assert!(first.ptr_eq(&second));\n     ///\n     /// let third_rc = Rc::new(());\n     /// let third = Rc::downgrade(&third_rc);\n-    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// assert!(!first.ptr_eq(&third));\n     /// ```\n     #[inline]\n     #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n-    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n-        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    pub fn ptr_eq(&self, other: &Self) -> bool {\n+        self.ptr.as_ptr() == other.ptr.as_ptr()\n     }\n }\n "}, {"sha": "6c23b3179ed68254812860d4dceaf0c87a4044be", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04d653902569b398e584692f45a2996f7437d5af/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d653902569b398e584692f45a2996f7437d5af/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=04d653902569b398e584692f45a2996f7437d5af", "patch": "@@ -1349,18 +1349,18 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// ```\n     /// #![feature(weak_ptr_eq)]\n-    /// use std::sync::{Arc, Weak};\n+    /// use std::sync::Arc;\n     ///\n     /// let first_rc = Arc::new(5);\n     /// let first = Arc::downgrade(&first_rc);\n     /// let second = Arc::downgrade(&first_rc);\n     ///\n-    /// assert!(Weak::ptr_eq(&first, &second));\n+    /// assert!(first.ptr_eq(&second));\n     ///\n     /// let third_rc = Arc::new(5);\n     /// let third = Arc::downgrade(&third_rc);\n     ///\n-    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// assert!(!first.ptr_eq(&third));\n     /// ```\n     ///\n     /// Comparing `Weak::new`.\n@@ -1371,16 +1371,16 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// let first = Weak::new();\n     /// let second = Weak::new();\n-    /// assert!(Weak::ptr_eq(&first, &second));\n+    /// assert!(first.ptr_eq(&second));\n     ///\n     /// let third_rc = Arc::new(());\n     /// let third = Arc::downgrade(&third_rc);\n-    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// assert!(!first.ptr_eq(&third));\n     /// ```\n     #[inline]\n     #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n-    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n-        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    pub fn ptr_eq(&self, other: &Self) -> bool {\n+        self.ptr.as_ptr() == other.ptr.as_ptr()\n     }\n }\n "}]}