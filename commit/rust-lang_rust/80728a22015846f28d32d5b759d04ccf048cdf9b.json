{"sha": "80728a22015846f28d32d5b759d04ccf048cdf9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNzI4YTIyMDE1ODQ2ZjI4ZDMyZDViNzU5ZDA0Y2NmMDQ4Y2RmOWI=", "commit": {"author": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-01T13:13:53Z"}, "committer": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-03T19:46:09Z"}, "message": "Reduced scope of `nonminimal_bool` so that it doesn't evaluate only partially orded types.", "tree": {"sha": "465699de5a4032f77929f4c6f5ba7075776331cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465699de5a4032f77929f4c6f5ba7075776331cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80728a22015846f28d32d5b759d04ccf048cdf9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80728a22015846f28d32d5b759d04ccf048cdf9b", "html_url": "https://github.com/rust-lang/rust/commit/80728a22015846f28d32d5b759d04ccf048cdf9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80728a22015846f28d32d5b759d04ccf048cdf9b/comments", "author": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ea75bee91976cf42e9db52f1eacf826c23d928", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ea75bee91976cf42e9db52f1eacf826c23d928", "html_url": "https://github.com/rust-lang/rust/commit/09ea75bee91976cf42e9db52f1eacf826c23d928"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "8816d50c5c262e6b6408942fb7aeba6551802851", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=80728a22015846f28d32d5b759d04ccf048cdf9b", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::{dummy_spanned, Span, DUMMY_SP};\n use syntax::util::ThinVec;\n-use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq, get_trait_def_id, implements_trait};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely.\n@@ -122,6 +122,12 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n             }\n             let negated = match e.node {\n                 ExprBinary(binop, ref lhs, ref rhs) => {\n+ \n+                    match implements_ord(self.cx, lhs) {\n+                        Some(true) => (),\n+                        _ => continue,\n+                    };\n+\n                     let mk_expr = |op| {\n                         Expr {\n                             id: DUMMY_NODE_ID,\n@@ -174,6 +180,12 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n     fn simplify_not(&self, expr: &Expr) -> Option<String> {\n         match expr.node {\n             ExprBinary(binop, ref lhs, ref rhs) => {\n+\n+                match implements_ord(self.cx, lhs) {\n+                    Some(true) => (),\n+                    _ => return None,\n+                };\n+\n                 match binop.node {\n                     BiEq => Some(\" != \"),\n                     BiNe => Some(\" == \"),\n@@ -444,3 +456,14 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         NestedVisitorMap::None\n     }\n }\n+\n+\n+fn implements_ord<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, expr: &Expr) -> Option<bool> {\n+    let ty = cx.tables.expr_ty(expr);\n+\n+    return if let Some(id) = get_trait_def_id(cx, &paths::ORD) {\n+        Some(implements_trait(cx, ty, id, &[]))\n+    } else {\n+        None\n+    };\n+}"}, {"sha": "8e70d0eeba0a14a7e48d39e93920f774be9b5697", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=80728a22015846f28d32d5b759d04ccf048cdf9b", "patch": "@@ -1,10 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n \n-use crate::utils;\n-\n-const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n-const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n+use crate::utils::{self, paths};\n \n /// **What it does:**\n /// Checks for the usage of negated comparision operators on types which only implement\n@@ -65,15 +62,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n                 let ty = cx.tables.expr_ty(left);\n \n                 let implements_ord = {\n-                    if let Some(id) = utils::get_trait_def_id(cx, &ORD) {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &paths::ORD) {\n                         utils::implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;\n                     }\n                 };\n \n                 let implements_partial_ord = {\n-                    if let Some(id) = utils::get_trait_def_id(cx, &PARTIAL_ORD) {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &paths::PARTIAL_ORD) {\n                         utils::implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;"}, {"sha": "ab62346ea7ef14c2d0ca013364612cd2eabaeb0e", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80728a22015846f28d32d5b759d04ccf048cdf9b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=80728a22015846f28d32d5b759d04ccf048cdf9b", "patch": "@@ -57,6 +57,8 @@ pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n+pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n+pub const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];"}, {"sha": "214d627ba308e1249af2b587d3d8531c8f4e5a51", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80728a22015846f28d32d5b759d04ccf048cdf9b/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80728a22015846f28d32d5b759d04ccf048cdf9b/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=80728a22015846f28d32d5b759d04ccf048cdf9b", "patch": "@@ -4,7 +4,6 @@\n \n use std::cmp::Ordering;\n \n-#[allow(nonminimal_bool)]\n #[warn(neg_cmp_op_on_partial_ord)]\n fn main() {\n "}, {"sha": "5067ece8705045e83c368961ced03e58be53772e", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80728a22015846f28d32d5b759d04ccf048cdf9b/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80728a22015846f28d32d5b759d04ccf048cdf9b/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=80728a22015846f28d32d5b759d04ccf048cdf9b", "patch": "@@ -1,27 +1,27 @@\n error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n-  --> $DIR/neg_cmp_op_on_partial_ord.rs:18:21\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:17:21\n    |\n-18 |     let _not_less = !(a_value < another_value);\n+17 |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n-  --> $DIR/neg_cmp_op_on_partial_ord.rs:21:30\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:20:30\n    |\n-21 |     let _not_less_or_equal = !(a_value <= another_value);\n+20 |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n-  --> $DIR/neg_cmp_op_on_partial_ord.rs:24:24\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:23:24\n    |\n-24 |     let _not_greater = !(a_value > another_value);\n+23 |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n-  --> $DIR/neg_cmp_op_on_partial_ord.rs:27:33\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:26:33\n    |\n-27 |     let _not_greater_or_equal = !(a_value >= another_value);\n+26 |     let _not_greater_or_equal = !(a_value >= another_value);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}]}