{"sha": "0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDVhMWI2MjJmMWJhMWNhNzAyZTA3OWIyY2UyYWI1YjUxM2UyYmU=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T11:53:37Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T12:06:52Z"}, "message": "Explain pointer and dyn Trait handling in const_to_valtree", "tree": {"sha": "c8b334e1a38b11ae624c03e30ccc54f8243af0f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b334e1a38b11ae624c03e30ccc54f8243af0f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be", "html_url": "https://github.com/rust-lang/rust/commit/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01c49430c8e5a2b5aa7db777f49bd3a18525d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01c49430c8e5a2b5aa7db777f49bd3a18525d0b", "html_url": "https://github.com/rust-lang/rust/commit/c01c49430c8e5a2b5aa7db777f49bd3a18525d0b"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "c45c29ccdcf8ea8fc0b6c4ba7f0fa813e7a3a3ad", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=0dd5a1b622f1ba1ca702e079b2ce2ab5b513e2be", "patch": "@@ -84,19 +84,18 @@ fn const_to_valtree_inner<'tcx>(\n             Some(ty::ValTree::Leaf(val.assert_int()))\n         }\n \n-        // Raw pointers are not allowed in type level constants, as raw pointers cannot be treated\n-        // like references. If we looked behind the raw pointer, we may be breaking the meaning of\n-        // the raw pointer. Equality on raw pointers is performed on the pointer and not on the pointee,\n-        // and we cannot guarantee any kind of pointer stability in the type system.\n+        // Raw pointers are not allowed in type level constants, as raw pointers compare equal if\n+        // their addresses are equal. Since we cannot guarantee any kind of pointer stability in\n+        // the type system.\n         // Technically we could allow function pointers, but they are not guaranteed to be the\n         // same as the function pointers at runtime.\n         ty::FnPtr(_) | ty::RawPtr(_) => None,\n         ty::Ref(..) => unimplemented!(\"need to use deref_const\"),\n \n         // Trait objects are not allowed in type level constants, as we have no concept for\n-        // resolving their backing type, even if we can do that at const eval time. We may want to consider\n-        // adding a `ValTree::DownCast(Ty<'tcx>, Box<ValTree>)` in the future, but I don't even know the\n-        // questions such a concept would open up, so an RFC would probably be good for this.\n+        // resolving their backing type, even if we can do that at const eval time. We may\n+        // hypothetically be able to allow `dyn StructuralEq` trait objects in the future,\n+        // but it is unclear if this is useful.\n         ty::Dynamic(..) => None,\n \n         ty::Slice(_) | ty::Str => {\n@@ -107,8 +106,7 @@ fn const_to_valtree_inner<'tcx>(\n \n         ty::Adt(def, _) => {\n             if def.variants.is_empty() {\n-                // Uninhabited\n-                return None;\n+                bug!(\"uninhabited types should have errored and never gotten converted to valtree\")\n             }\n \n             let variant = ecx.read_discriminant(&place.into()).unwrap().1;"}]}