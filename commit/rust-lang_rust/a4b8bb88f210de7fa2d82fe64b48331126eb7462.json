{"sha": "a4b8bb88f210de7fa2d82fe64b48331126eb7462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YjhiYjg4ZjIxMGRlN2ZhMmQ4MmZlNjRiNDgzMzExMjZlYjc0NjI=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-02-26T12:40:31Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-06-08T19:59:41Z"}, "message": "warn on macro_use attr\n\ncargo dev update lints\n\nuse if_chain\n\nclean up alot, span_lint_and_sugg\n\nfind imported macros for sugg", "tree": {"sha": "55bbdd9fe2d7bb49443439856135aae24f81534d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55bbdd9fe2d7bb49443439856135aae24f81534d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b8bb88f210de7fa2d82fe64b48331126eb7462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b8bb88f210de7fa2d82fe64b48331126eb7462", "html_url": "https://github.com/rust-lang/rust/commit/a4b8bb88f210de7fa2d82fe64b48331126eb7462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b8bb88f210de7fa2d82fe64b48331126eb7462/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0993c5e9162ddaea78e83d0f0161e68bd4ea73", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0993c5e9162ddaea78e83d0f0161e68bd4ea73", "html_url": "https://github.com/rust-lang/rust/commit/ff0993c5e9162ddaea78e83d0f0161e68bd4ea73"}], "stats": {"total": 90, "additions": 80, "deletions": 10}, "files": [{"sha": "cf526409374b873f34ffef5965bb4c1c2e8a250c", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a4b8bb88f210de7fa2d82fe64b48331126eb7462/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b8bb88f210de7fa2d82fe64b48331126eb7462/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=a4b8bb88f210de7fa2d82fe64b48331126eb7462", "patch": "@@ -1,32 +1,39 @@\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use crate::utils::{snippet, span_lint_and_sugg, in_macro};\n use if_chain::if_chain;\n use rustc_ast::ast;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::edition::Edition;\n+use rustc_session::{impl_lint_pass, declare_tool_lint};\n+use rustc_span::{edition::Edition, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[macro_use] use...`.\n     ///\n     /// **Why is this bad?** Since the Rust 2018 edition you can import\n     /// macro's directly, this is considered idiomatic.\n     ///\n-    /// **Known problems:** This lint does not generate an auto-applicable suggestion.\n+    /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n     /// #[macro_use]\n     /// use lazy_static;\n     /// ```\n-    pub MACRO_USE_IMPORTS,\n+    pub MACRO_USE_IMPORT,\n     pedantic,\n     \"#[macro_use] is no longer needed\"\n }\n \n-declare_lint_pass!(MacroUseImports => [MACRO_USE_IMPORTS]);\n+#[derive(Default)]\n+pub struct MacroUseImport {\n+    collected: FxHashSet<Span>,\n+}\n+\n+impl_lint_pass!(MacroUseImport => [MACRO_USE_IMPORT]);\n+\n+impl EarlyLintPass for MacroUseImport {\n \n-impl EarlyLintPass for MacroUseImports {\n     fn check_item(&mut self, ecx: &EarlyContext<'_>, item: &ast::Item) {\n         if_chain! {\n             if ecx.sess.opts.edition == Edition::Edition2018;\n@@ -36,18 +43,59 @@ impl EarlyLintPass for MacroUseImports {\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n             then {\n+                let import_path = snippet(ecx, use_tree.span, \"_\");\n+                let mac_names = find_used_macros(ecx, &import_path);\n                 let msg = \"`macro_use` attributes are no longer needed in the Rust 2018 edition\";\n-                let help = format!(\"use {}::<macro name>\", snippet(ecx, use_tree.span, \"_\"));\n+                let help = format!(\"use {}::<macro name>\", import_path);\n                 span_lint_and_sugg(\n                     ecx,\n-                    MACRO_USE_IMPORTS,\n+                    MACRO_USE_IMPORT,\n                     mac_attr.span,\n                     msg,\n-                    \"remove the attribute and import the macro directly, try\",\n+                    // \"remove the attribute and import the macro directly, try\",\n+                    \"\",\n                     help,\n                     Applicability::HasPlaceholders,\n                 );\n             }\n         }\n     }\n+\n+    fn check_expr(&mut self, ecx: &EarlyContext<'_>, expr: &ast::Expr) {\n+        if in_macro(expr.span) {\n+            let name = snippet(ecx, ecx.sess.source_map().span_until_char(expr.span.source_callsite(), '!'), \"_\");\n+            if let Some(callee) = expr.span.source_callee() {\n+                if self.collected.insert(callee.def_site) {\n+                    println!(\"EXPR {:#?}\", name);\n+                }\n+            }\n+        }\n+    }\n+    fn check_stmt(&mut self, ecx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n+        if in_macro(stmt.span) {\n+            let name = snippet(ecx, ecx.sess.source_map().span_until_char(stmt.span.source_callsite(), '!'), \"_\");\n+            if let Some(callee) = stmt.span.source_callee() {\n+                println!(\"EXPR {:#?}\", name);\n+            }\n+        }\n+    }\n+    fn check_pat(&mut self, ecx: &EarlyContext<'_>, pat: &ast::Pat) {\n+        if in_macro(pat.span) {\n+            let name = snippet(ecx, ecx.sess.source_map().span_until_char(pat.span.source_callsite(), '!'), \"_\");\n+            if let Some(callee) = pat.span.source_callee() {\n+                println!(\"EXPR {:#?}\", name);\n+            }\n+        }\n+    }\n+}\n+\n+fn find_used_macros(ecx: &EarlyContext<'_>, path: &str) {\n+    for it in ecx.krate.module.items.iter() {\n+        if in_macro(it.span) {\n+            // println!(\"{:#?}\", it)\n+        }\n+    }\n+    for x in ecx.sess.imported_macro_spans.borrow().iter() {\n+        // println!(\"{:?}\", x);\n+    }\n }"}, {"sha": "61d3a827f1f77ecf6d8dd69590a42eb2cfb26354", "filename": "macro_use_import", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4b8bb88f210de7fa2d82fe64b48331126eb7462/macro_use_import", "raw_url": "https://github.com/rust-lang/rust/raw/a4b8bb88f210de7fa2d82fe64b48331126eb7462/macro_use_import", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/macro_use_import?ref=a4b8bb88f210de7fa2d82fe64b48331126eb7462"}, {"sha": "6490a2107d5ac2690fa8cf43aeb75fabf805447a", "filename": "tests/ui/macro_use_import.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_import.rs?ref=a4b8bb88f210de7fa2d82fe64b48331126eb7462", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --edition 2018\n+#![warn(clippy::macro_use_import)]\n+\n+use std::collections::HashMap;\n+#[macro_use]\n+use std::prelude;\n+\n+fn main() {\n+    let _ = HashMap::<u8, u8>::new();\n+    serde_if_integer128!(\"\");\n+    println!();\n+}"}, {"sha": "1d86ba584411f85d189a980298aa93cbd472a852", "filename": "tests/ui/macro_use_import.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_import.stderr?ref=a4b8bb88f210de7fa2d82fe64b48331126eb7462", "patch": "@@ -0,0 +1,10 @@\n+error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n+  --> $DIR/macro_use_import.rs:5:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use std::prelude::<macro name>`\n+   |\n+   = note: `-D clippy::macro-use-import` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/macro_use_import.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a4b8bb88f210de7fa2d82fe64b48331126eb7462/tests%2Fui%2Fmacro_use_import.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_import.stdout?ref=a4b8bb88f210de7fa2d82fe64b48331126eb7462"}]}