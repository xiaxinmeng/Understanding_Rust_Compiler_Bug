{"sha": "3e00bfce2b1f53b14ec89ddb249364eac23f5b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMDBiZmNlMmIxZjUzYjE0ZWM4OWRkYjI0OTM2NGVhYzIzZjViMWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-03T15:08:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-03T15:08:27Z"}, "message": "Document statelessness invariant", "tree": {"sha": "edcfa6a87f28731c85317bb977c526f4c0e92585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edcfa6a87f28731c85317bb977c526f4c0e92585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e", "html_url": "https://github.com/rust-lang/rust/commit/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1306a43652d914035b2cf0b703f4bfd3451a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1306a43652d914035b2cf0b703f4bfd3451a33", "html_url": "https://github.com/rust-lang/rust/commit/5a1306a43652d914035b2cf0b703f4bfd3451a33"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "ca324493f5adf6502c67e739ef6456c195d21eb6", "filename": "docs/dev/README.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e00bfce2b1f53b14ec89ddb249364eac23f5b1e/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=3e00bfce2b1f53b14ec89ddb249364eac23f5b1e", "patch": "@@ -170,6 +170,22 @@ In general, API is centered around UI concerns -- the result of the call is what\n The results are 100% Rust specific though.\n Shout outs to LSP developers for popularizing the idea that \"UI\" is a good place to draw a boundary at.\n \n+## LSP is sateless\n+\n+The protocol is implemented in the mostly stateless way.\n+A good mental model is HTTP, which doesn't store per-client state, and instead relies on devices like cookies to maintain an illusion of state.\n+If some action requires multi-step protocol, each step should be self-contained.\n+\n+A good example here is code action resolving process.\n+TO display the lightbulb, we compute the list of code actions without computing edits.\n+Figuring out the edit is done in a separate `codeAction/resolve` call.\n+Rather than storing some `lazy_edit: Box<dyn FnOnce() -> Edit>` somewhere, we use a string ID of action to re-compute the list of actions during the resolve process.\n+(See [this post](https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html) for more details.)\n+The benefit here is that, generally speaking, the state of the world might change between `codeAction` and `codeAction` resolve requests, so any closure we store might become invalid.\n+\n+While we don't currently implement any complicated refactors with complex GUI, I imagine we'd use the same techniques for refactors.\n+After clicking each \"Next\" button during refactor, the client would send all the info which server needs to re-recreate the context from scratch.\n+\n ## CI\n \n CI does not test rust-analyzer, CI is a core part of rust-analyzer, and is maintained with above average standard of quality."}]}