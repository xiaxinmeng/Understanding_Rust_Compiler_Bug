{"sha": "b5ce84b17023d27f4e96ec7911aca712db0e000b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2U4NGIxNzAyM2QyN2Y0ZTk2ZWM3OTExYWNhNzEyZGIwZTAwMGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T11:15:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T11:16:34Z"}, "message": "Align CallableDefId naming with other ids", "tree": {"sha": "96f00583eaa8659a21960fa5fc4717d4d9bf0962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f00583eaa8659a21960fa5fc4717d4d9bf0962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ce84b17023d27f4e96ec7911aca712db0e000b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ce84b17023d27f4e96ec7911aca712db0e000b", "html_url": "https://github.com/rust-lang/rust/commit/b5ce84b17023d27f4e96ec7911aca712db0e000b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ce84b17023d27f4e96ec7911aca712db0e000b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b598ab8be46b50d5f407c3858c7b2c788328edc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b598ab8be46b50d5f407c3858c7b2c788328edc7", "html_url": "https://github.com/rust-lang/rust/commit/b598ab8be46b50d5f407c3858c7b2c788328edc7"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "9891b0785bcca866166346a8a284bf5cf4e41de6", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -40,7 +40,7 @@ use stdx::impl_from;\n use crate::{\n     db::{DefDatabase, HirDatabase},\n     has_source::HasSource,\n-    CallableDef, HirDisplay, InFile, Name,\n+    CallableDefId, HirDisplay, InFile, Name,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -1226,7 +1226,7 @@ impl Type {\n     }\n \n     // FIXME: this method is broken, as it doesn't take closures into account.\n-    pub fn as_callable(&self) -> Option<CallableDef> {\n+    pub fn as_callable(&self) -> Option<CallableDefId> {\n         Some(self.ty.value.as_callable()?.0)\n     }\n "}, {"sha": "cf71349235ed89ff22d333fa0d7a6a66ceb35d41", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -55,4 +55,4 @@ pub use hir_expand::{\n     hygiene::Hygiene, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId,\n     MacroFile, Origin,\n };\n-pub use hir_ty::{display::HirDisplay, CallableDef};\n+pub use hir_ty::{display::HirDisplay, CallableDefId};"}, {"sha": "c773adc6744292190bd816d4a98ee566f3de0c3e", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -13,7 +13,7 @@ use ra_prof::profile;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDef, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n+    Binders, CallableDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n     ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -45,7 +45,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Binders<Ty>>>;\n \n     #[salsa::invoke(crate::callable_item_sig)]\n-    fn callable_item_signature(&self, def: CallableDef) -> PolyFnSig;\n+    fn callable_item_signature(&self, def: CallableDefId) -> PolyFnSig;\n \n     #[salsa::invoke(crate::lower::return_type_impl_traits)]\n     fn return_type_impl_traits(\n@@ -77,7 +77,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n-    fn intern_callable_def(&self, callable_def: CallableDef) -> InternedCallableDefId;\n+    fn intern_callable_def(&self, callable_def: CallableDefId) -> InternedCallableDefId;\n     #[salsa::interned]\n     fn intern_type_param_id(&self, param_id: TypeParamId) -> GlobalTypeParamId;\n     #[salsa::interned]"}, {"sha": "5cc76bdce411bc1c6102ca174233ba0bf919c9cd", "filename": "crates/ra_hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n use hir_expand::diagnostics::DiagnosticSink;\n \n use crate::{\n-    db::HirDatabase, diagnostics::MissingUnsafe, lower::CallableDef, ApplicationTy,\n+    db::HirDatabase, diagnostics::MissingUnsafe, lower::CallableDefId, ApplicationTy,\n     InferenceResult, Ty, TypeCtor,\n };\n \n@@ -88,7 +88,7 @@ fn walk_unsafe(\n         Expr::Call { callee, .. } => {\n             let ty = &infer[*callee];\n             if let &Ty::Apply(ApplicationTy {\n-                ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n+                ctor: TypeCtor::FnDef(CallableDefId::FunctionId(func)),\n                 ..\n             }) = ty\n             {"}, {"sha": "758d5f5ac67c23baa08ef2cabe10856beb88826d", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -3,7 +3,7 @@\n use std::fmt;\n \n use crate::{\n-    db::HirDatabase, utils::generics, ApplicationTy, CallableDef, FnSig, GenericPredicate,\n+    db::HirDatabase, utils::generics, ApplicationTy, CallableDefId, FnSig, GenericPredicate,\n     Obligation, OpaqueTyId, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n use hir_def::{\n@@ -263,9 +263,11 @@ impl HirDisplay for ApplicationTy {\n             TypeCtor::FnDef(def) => {\n                 let sig = f.db.callable_item_signature(def).subst(&self.parameters);\n                 match def {\n-                    CallableDef::FunctionId(ff) => write!(f, \"fn {}\", f.db.function_data(ff).name)?,\n-                    CallableDef::StructId(s) => write!(f, \"{}\", f.db.struct_data(s).name)?,\n-                    CallableDef::EnumVariantId(e) => {\n+                    CallableDefId::FunctionId(ff) => {\n+                        write!(f, \"fn {}\", f.db.function_data(ff).name)?\n+                    }\n+                    CallableDefId::StructId(s) => write!(f, \"{}\", f.db.struct_data(s).name)?,\n+                    CallableDefId::EnumVariantId(e) => {\n                         write!(f, \"{}\", f.db.enum_data(e.parent).variants[e.local_id].name)?\n                     }\n                 };"}, {"sha": "731b062c2da46c8349d9cef1b7b7609913af45d3", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     autoderef, method_resolution, op,\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Rawness, Substs,\n+    ApplicationTy, Binders, CallableDefId, InferTy, IntTy, Mutability, Obligation, Rawness, Substs,\n     TraitRef, Ty, TypeCtor,\n };\n \n@@ -854,7 +854,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 // add obligation for trait implementation, if this is a trait method\n                 match def {\n-                    CallableDef::FunctionId(f) => {\n+                    CallableDefId::FunctionId(f) => {\n                         if let AssocContainerId::TraitId(trait_) =\n                             f.lookup(self.db.upcast()).container\n                         {\n@@ -865,7 +865,7 @@ impl<'a> InferenceContext<'a> {\n                             self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }\n                     }\n-                    CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {}\n+                    CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {}\n                 }\n             }\n         }"}, {"sha": "0ef5ca78f78f63f1662f34f5a43963fc3310e6c2", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -44,7 +44,7 @@ use crate::{\n \n pub use autoderef::autoderef;\n pub use infer::{InferTy, InferenceResult};\n-pub use lower::CallableDef;\n+pub use lower::CallableDefId;\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, ImplTraitLoweringMode, TyDefId,\n     TyLoweringContext, ValueTyDefId,\n@@ -102,7 +102,7 @@ pub enum TypeCtor {\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n     /// ```\n-    FnDef(CallableDef),\n+    FnDef(CallableDefId),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n@@ -767,7 +767,7 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_callable(&self) -> Option<(CallableDef, &Substs)> {\n+    pub fn as_callable(&self) -> Option<(CallableDefId, &Substs)> {\n         match self {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(callable_def), parameters }) => {\n                 Some((*callable_def, parameters))"}, {"sha": "f274579ea86581994739061b9e220c34a1d01734", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -768,11 +768,11 @@ fn count_impl_traits(type_ref: &TypeRef) -> usize {\n }\n \n /// Build the signature of a callable item (function, struct or enum variant).\n-pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDef) -> PolyFnSig {\n+pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDefId) -> PolyFnSig {\n     match def {\n-        CallableDef::FunctionId(f) => fn_sig_for_fn(db, f),\n-        CallableDef::StructId(s) => fn_sig_for_struct_constructor(db, s),\n-        CallableDef::EnumVariantId(e) => fn_sig_for_enum_variant_constructor(db, e),\n+        CallableDefId::FunctionId(f) => fn_sig_for_fn(db, f),\n+        CallableDefId::StructId(s) => fn_sig_for_struct_constructor(db, s),\n+        CallableDefId::EnumVariantId(e) => fn_sig_for_enum_variant_constructor(db, e),\n     }\n }\n \n@@ -1107,31 +1107,31 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum CallableDef {\n+pub enum CallableDefId {\n     FunctionId(FunctionId),\n     StructId(StructId),\n     EnumVariantId(EnumVariantId),\n }\n-impl_from!(FunctionId, StructId, EnumVariantId for CallableDef);\n+impl_from!(FunctionId, StructId, EnumVariantId for CallableDefId);\n \n-impl CallableDef {\n+impl CallableDefId {\n     pub fn krate(self, db: &dyn HirDatabase) -> CrateId {\n         let db = db.upcast();\n         match self {\n-            CallableDef::FunctionId(f) => f.lookup(db).module(db),\n-            CallableDef::StructId(s) => s.lookup(db).container.module(db),\n-            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n+            CallableDefId::FunctionId(f) => f.lookup(db).module(db),\n+            CallableDefId::StructId(s) => s.lookup(db).container.module(db),\n+            CallableDefId::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n         }\n         .krate\n     }\n }\n \n-impl From<CallableDef> for GenericDefId {\n-    fn from(def: CallableDef) -> GenericDefId {\n+impl From<CallableDefId> for GenericDefId {\n+    fn from(def: CallableDefId) -> GenericDefId {\n         match def {\n-            CallableDef::FunctionId(f) => f.into(),\n-            CallableDef::StructId(s) => s.into(),\n-            CallableDef::EnumVariantId(e) => e.into(),\n+            CallableDefId::FunctionId(f) => f.into(),\n+            CallableDefId::StructId(s) => s.into(),\n+            CallableDefId::EnumVariantId(e) => e.into(),\n         }\n     }\n }"}, {"sha": "78d0bc43bc92401fbb0a3824c5bdb7d5227f4203", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     display::HirDisplay,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     utils::generics,\n-    CallableDef, DebruijnIndex, FnSig, GenericPredicate, Substs, Ty, TypeCtor,\n+    CallableDefId, DebruijnIndex, FnSig, GenericPredicate, Substs, Ty, TypeCtor,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n@@ -525,7 +525,7 @@ pub(crate) fn fn_def_datum_query(\n     _krate: CrateId,\n     fn_def_id: FnDefId,\n ) -> Arc<FnDefDatum> {\n-    let callable_def: CallableDef = from_chalk(db, fn_def_id);\n+    let callable_def: CallableDefId = from_chalk(db, fn_def_id);\n     let generic_params = generics(db.upcast(), callable_def.into());\n     let sig = db.callable_item_signature(callable_def);\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);"}, {"sha": "09d8347caa86602cb77b28d8bf26d6639c9c0068", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     db::HirDatabase,\n     primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n     traits::{Canonical, Obligation},\n-    ApplicationTy, CallableDef, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId,\n+    ApplicationTy, CallableDefId, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId,\n     ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TyKind, TypeCtor,\n };\n \n@@ -454,14 +454,14 @@ impl ToChalk for hir_def::ImplId {\n     }\n }\n \n-impl ToChalk for CallableDef {\n+impl ToChalk for CallableDefId {\n     type Chalk = FnDefId;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> FnDefId {\n         db.intern_callable_def(self).into()\n     }\n \n-    fn from_chalk(db: &dyn HirDatabase, fn_def_id: FnDefId) -> CallableDef {\n+    fn from_chalk(db: &dyn HirDatabase, fn_def_id: FnDefId) -> CallableDefId {\n         db.lookup_intern_callable_def(fn_def_id.into())\n     }\n }"}, {"sha": "db915625c2b3e1ebb5670672682f72b671eeea36", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -5,7 +5,7 @@ use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplicat\n use itertools::Itertools;\n \n use super::{from_chalk, Interner};\n-use crate::{db::HirDatabase, CallableDef, TypeCtor};\n+use crate::{db::HirDatabase, CallableDefId, TypeCtor};\n use hir_def::{AdtId, AssocContainerId, DefWithBodyId, Lookup, TypeAliasId};\n \n pub use unsafe_tls::{set_current_program, with_current_program};\n@@ -38,16 +38,16 @@ impl DebugContext<'_> {\n             }\n             TypeCtor::FnDef(def) => {\n                 let name = match def {\n-                    CallableDef::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n-                    CallableDef::StructId(s) => self.0.struct_data(s).name.clone(),\n-                    CallableDef::EnumVariantId(e) => {\n+                    CallableDefId::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n+                    CallableDefId::StructId(s) => self.0.struct_data(s).name.clone(),\n+                    CallableDefId::EnumVariantId(e) => {\n                         let enum_data = self.0.enum_data(e.parent);\n                         enum_data.variants[e.local_id].name.clone()\n                     }\n                 };\n                 match def {\n-                    CallableDef::FunctionId(_) => write!(f, \"{{fn {}}}\", name)?,\n-                    CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {\n+                    CallableDefId::FunctionId(_) => write!(f, \"{{fn {}}}\", name)?,\n+                    CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {\n                         write!(f, \"{{ctor {}}}\", name)?\n                     }\n                 }\n@@ -255,18 +255,18 @@ impl DebugContext<'_> {\n         fn_def_id: chalk_ir::FnDefId<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let def: CallableDef = from_chalk(self.0, fn_def_id);\n+        let def: CallableDefId = from_chalk(self.0, fn_def_id);\n         let name = match def {\n-            CallableDef::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n-            CallableDef::StructId(s) => self.0.struct_data(s).name.clone(),\n-            CallableDef::EnumVariantId(e) => {\n+            CallableDefId::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n+            CallableDefId::StructId(s) => self.0.struct_data(s).name.clone(),\n+            CallableDefId::EnumVariantId(e) => {\n                 let enum_data = self.0.enum_data(e.parent);\n                 enum_data.variants[e.local_id].name.clone()\n             }\n         };\n         match def {\n-            CallableDef::FunctionId(_) => write!(fmt, \"{{fn {}}}\", name),\n-            CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {\n+            CallableDefId::FunctionId(_) => write!(fmt, \"{{fn {}}}\", name),\n+            CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {\n                 write!(fmt, \"{{ctor {}}}\", name)\n             }\n         }"}, {"sha": "cb7e62cd6f1148a0af4d40bff409ab67266a1f49", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Optio\n                     //FIXME: Type::as_callable is broken\n                     let callable_def = sema.type_of_expr(&expr.expr()?)?.as_callable()?;\n                     match callable_def {\n-                        hir::CallableDef::FunctionId(it) => {\n+                        hir::CallableDefId::FunctionId(it) => {\n                             let fn_def: hir::Function = it.into();\n                             let nav = fn_def.to_nav(db);\n                             Some(nav)"}, {"sha": "1fe1c21dede0f081d37f16ec4b03415184f0e4e5", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -53,14 +53,14 @@ fn call_info_for_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Op\n             //FIXME: Type::as_callable is broken\n             let callable_def = sema.type_of_expr(&call.expr()?)?.as_callable()?;\n             match callable_def {\n-                hir::CallableDef::FunctionId(it) => {\n+                hir::CallableDefId::FunctionId(it) => {\n                     let fn_def = it.into();\n                     FunctionSignature::from_hir(sema.db, fn_def)\n                 }\n-                hir::CallableDef::StructId(it) => {\n+                hir::CallableDefId::StructId(it) => {\n                     FunctionSignature::from_struct(sema.db, it.into())?\n                 }\n-                hir::CallableDef::EnumVariantId(it) => {\n+                hir::CallableDefId::EnumVariantId(it) => {\n                     FunctionSignature::from_enum_variant(sema.db, it.into())?\n                 }\n             }"}, {"sha": "3cbae8a45cf48ad95a59445426f005310e7f6426", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ce84b17023d27f4e96ec7911aca712db0e000b/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=b5ce84b17023d27f4e96ec7911aca712db0e000b", "patch": "@@ -324,13 +324,13 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n             // FIXME: Type::as_callable is broken for closures\n             let callable_def = sema.type_of_expr(&expr.expr()?)?.as_callable()?;\n             match callable_def {\n-                hir::CallableDef::FunctionId(it) => {\n+                hir::CallableDefId::FunctionId(it) => {\n                     Some(FunctionSignature::from_hir(sema.db, it.into()))\n                 }\n-                hir::CallableDef::StructId(it) => {\n+                hir::CallableDefId::StructId(it) => {\n                     FunctionSignature::from_struct(sema.db, it.into())\n                 }\n-                hir::CallableDef::EnumVariantId(it) => {\n+                hir::CallableDefId::EnumVariantId(it) => {\n                     FunctionSignature::from_enum_variant(sema.db, it.into())\n                 }\n             }"}]}