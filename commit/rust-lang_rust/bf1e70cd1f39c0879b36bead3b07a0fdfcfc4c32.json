{"sha": "bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMWU3MGNkMWYzOWMwODc5YjM2YmVhZDNiMDdhMGZkZmNmYzRjMzI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-12T01:11:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-12T13:18:20Z"}, "message": "resolve: Prohibit use of imported non-macro attributes", "tree": {"sha": "20892d50221fee59cc22e9e336c791726c3e73ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20892d50221fee59cc22e9e336c791726c3e73ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "html_url": "https://github.com/rust-lang/rust/commit/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d1487fc44104d59f3faa550b91d5e248d2bce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d1487fc44104d59f3faa550b91d5e248d2bce1", "html_url": "https://github.com/rust-lang/rust/commit/e1d1487fc44104d59f3faa550b91d5e248d2bce1"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "2382a2ea50bbad9ff2edbb4ee9c7b3a3115d6736", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "patch": "@@ -240,7 +240,7 @@ impl CtorKind {\n }\n \n impl NonMacroAttrKind {\n-    fn descr(self) -> &'static str {\n+    pub fn descr(self) -> &'static str {\n         match self {\n             NonMacroAttrKind::Builtin => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\","}, {"sha": "037ade13c208746942d5e8a70754eeaabf216910", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "patch": "@@ -376,6 +376,7 @@ impl<'a> Resolver<'a> {\n                     .push((path, path_span, kind, parent_scope.clone(), def.ok()));\n             }\n \n+            self.prohibit_imported_non_macro_attrs(None, def.ok(), path_span);\n             def\n         } else {\n             let binding = self.early_resolve_ident_in_lexical_scope(\n@@ -390,7 +391,9 @@ impl<'a> Resolver<'a> {\n                     .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n             }\n \n-            binding.map(|binding| binding.def())\n+            let def = binding.map(|binding| binding.def());\n+            self.prohibit_imported_non_macro_attrs(binding.ok(), def.ok(), path_span);\n+            def\n         }\n     }\n \n@@ -982,6 +985,20 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn prohibit_imported_non_macro_attrs(&self, binding: Option<&'a NameBinding<'a>>,\n+                                         def: Option<Def>, span: Span) {\n+        if let Some(Def::NonMacroAttr(kind)) = def {\n+            if kind != NonMacroAttrKind::Tool && binding.map_or(true, |b| b.is_import()) {\n+                let msg = format!(\"cannot use a {} through an import\", kind.descr());\n+                let mut err = self.session.struct_span_err(span, &msg);\n+                if let Some(binding) = binding {\n+                    err.span_note(binding.span, &format!(\"the {} imported here\", kind.descr()));\n+                }\n+                err.emit();\n+            }\n+        }\n+    }\n+\n     fn suggest_macro_name(&mut self, name: &str, kind: MacroKind,\n                           err: &mut DiagnosticBuilder<'a>, span: Span) {\n         // First check if this is a locally-defined bang macro."}, {"sha": "6488b89f36984e8437956264bcc333f45a09c3f3", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs?ref=bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+#![feature(uniform_paths)]\n+\n+// Built-in attribute\n+use inline as imported_inline;\n+\n+#[imported_inline] //~ ERROR cannot use a built-in attribute through an import\n+fn main() {}"}, {"sha": "10dd303aa2831b93f9810d42f7b2f5fb9714d195", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr?ref=bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "patch": "@@ -0,0 +1,14 @@\n+error: cannot use a built-in attribute through an import\n+  --> $DIR/prelude-fail-2.rs:8:3\n+   |\n+LL | #[imported_inline] //~ ERROR cannot use a built-in attribute through an import\n+   |   ^^^^^^^^^^^^^^^\n+   |\n+note: the built-in attribute imported here\n+  --> $DIR/prelude-fail-2.rs:6:5\n+   |\n+LL | use inline as imported_inline;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "46ce725fdba93c56762e235105d04ac8fb69081c", "filename": "src/test/ui/rust-2018/uniform-paths/prelude.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs?ref=bf1e70cd1f39c0879b36bead3b07a0fdfcfc4c32", "patch": "@@ -6,9 +6,6 @@\n // Macro imported with `#[macro_use] extern crate`\n use vec as imported_vec;\n \n-// Built-in attribute\n-use inline as imported_inline;\n-\n // Tool module\n use rustfmt as imported_rustfmt;\n \n@@ -20,7 +17,6 @@ use u8 as imported_u8;\n \n type A = imported_u8;\n \n-#[imported_inline]\n #[imported_rustfmt::skip]\n fn main() {\n     imported_vec![0];"}]}