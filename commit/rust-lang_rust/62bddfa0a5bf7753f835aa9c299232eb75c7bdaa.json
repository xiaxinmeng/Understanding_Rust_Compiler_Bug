{"sha": "62bddfa0a5bf7753f835aa9c299232eb75c7bdaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmRkZmEwYTViZjc3NTNmODM1YWE5YzI5OTIzMmViNzVjN2JkYWE=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-23T19:57:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:26:08Z"}, "message": "Add examples for Checked[Add|Sub|Mul|Div]", "tree": {"sha": "f5e367ee1e593a6b64f915c29c7d5eb017af3467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e367ee1e593a6b64f915c29c7d5eb017af3467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa", "html_url": "https://github.com/rust-lang/rust/commit/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb165eb5c21b057cb63a4421d6233e82deac4cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb165eb5c21b057cb63a4421d6233e82deac4cba", "html_url": "https://github.com/rust-lang/rust/commit/bb165eb5c21b057cb63a4421d6233e82deac4cba"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "48a3db4258f2b021f2fce3d24fc66bad9ed0c6fc", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bddfa0a5bf7753f835aa9c299232eb75c7bdaa/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=62bddfa0a5bf7753f835aa9c299232eb75c7bdaa", "patch": "@@ -1217,6 +1217,14 @@ impl<T: CheckedAdd + CheckedSub + Zero + PartialOrd + Bounded> Saturating for T\n /// Performs addition that returns `None` instead of wrapping around on overflow.\n pub trait CheckedAdd: Add<Self, Self> {\n     /// Adds two numbers, checking for overflow. If overflow happens, `None` is returned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::CheckedAdd;\n+    /// assert_eq!(5u16.checked_add(&65530), Some(65535));\n+    /// assert_eq!(6u16.checked_add(&65530), None);\n+    /// ```\n     fn checked_add(&self, v: &Self) -> Option<Self>;\n }\n \n@@ -1270,6 +1278,14 @@ checked_impl!(CheckedAdd, checked_add, i64, intrinsics::i64_add_with_overflow)\n /// Performs subtraction that returns `None` instead of wrapping around on underflow.\n pub trait CheckedSub: Sub<Self, Self> {\n     /// Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::CheckedSub;\n+    /// assert_eq!((-127i8).checked_sub(&1), Some(-128));\n+    /// assert_eq!((-128i8).checked_sub(&1), None);\n+    /// ```\n     fn checked_sub(&self, v: &Self) -> Option<Self>;\n }\n \n@@ -1298,6 +1314,14 @@ checked_impl!(CheckedSub, checked_sub, i64, intrinsics::i64_sub_with_overflow)\n pub trait CheckedMul: Mul<Self, Self> {\n     /// Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\n     /// happens, `None` is returned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::CheckedMul;\n+    /// assert_eq!(5u8.checked_mul(&51), Some(255));\n+    /// assert_eq!(5u8.checked_mul(&52), None);\n+    /// ```\n     fn checked_mul(&self, v: &Self) -> Option<Self>;\n }\n \n@@ -1325,6 +1349,14 @@ checked_impl!(CheckedMul, checked_mul, i64, intrinsics::i64_mul_with_overflow)\n pub trait CheckedDiv: Div<Self, Self> {\n     /// Divides two numbers, checking for underflow or overflow. If underflow or overflow happens,\n     /// `None` is returned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::CheckedDiv;\n+    /// assert_eq!((-127i8).checked_div(&-1), Some(127));\n+    /// assert_eq!((-128i8).checked_div(&-1), None);\n+    /// ```\n     fn checked_div(&self, v: &Self) -> Option<Self>;\n }\n "}]}