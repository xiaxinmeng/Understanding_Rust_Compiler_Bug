{"sha": "3e6c83de1dc0a72df3663617d394a9e79641618d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmM4M2RlMWRjMGE3MmRmMzY2MzYxN2QzOTRhOWU3OTY0MTYxOGQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-05-24T08:11:32Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-06-02T15:28:22Z"}, "message": "compiletest: Force directive to be first complete word in header comment.\n\nRefactored some related code to take advantage of this change.", "tree": {"sha": "b16adc870d1c179b120f12ed1c2aba9e3aa9482f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16adc870d1c179b120f12ed1c2aba9e3aa9482f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6c83de1dc0a72df3663617d394a9e79641618d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZMYQWAAoJEP72yAUdDgE8q60P/170+FwOVwkaRM9envTOgKUk\n2bRrR77Z6aUXxakDbj/UbwibJla7f4JBDT6glucwrvZu6aESzaR23nq44sIeaJLx\ngOJKleFTUvCePXC5NU7oW8swXQgc/lXE5MNWx1xTSnLipfsYQ9aYAXoLzU6CfzaJ\nmAL1GkagfoKbeN9xH69xW7+O6c+d+6YWiK+Nd4x6Y7E/9APFk4xJdYTbBTloEZzF\nt4QGEj8sIVbZKqztgamyKlYOmWTeim4ku1hzzXwds1DH24gUt2y842bsfmkCrsd/\nY801dIFs9Li12zazCvE1bF9JRqZkHGeGQ0DHFmCIl8oHcTjPtFUZxo2B9S+U9635\nUo8zTMlx1iVO7BWYKOSNNw9CbMZleIfwUizRC6P9y9j/HqHB4+ZQrgK+FeXaTePH\n5xqYmYpUOPg0tdsvWUa7g3b0CQPlFAGR3lykr640Dz4hbZ4xKYj8rRa7WSc9tbZ3\nyTNofDTM1tMXOzCFzlo0w85AHqSsBS6bNFj057QiHt8FnWLFGbierwSRlWlBK4fl\nEZI3mZ6si899HRCxa1tUvXzonBT5kY3m8tXMVs1r3b2z9krN8xMwsmF8YrPzB1KU\niDt1R0KsZfFR81xrICu4dtxcxqk/G8OLH5ZxgeQ8MXV2Yr2Hr3g9Bn+C+dYgW7vQ\n+Vg4XMnxqxISJ0ZW672h\n=L6vR\n-----END PGP SIGNATURE-----", "payload": "tree b16adc870d1c179b120f12ed1c2aba9e3aa9482f\nparent 38ef85696dce84d5e6aff171cbf91d396678cbe0\nauthor kennytm <kennytm@gmail.com> 1495613492 +0800\ncommitter kennytm <kennytm@gmail.com> 1496417302 +0800\n\ncompiletest: Force directive to be first complete word in header comment.\n\nRefactored some related code to take advantage of this change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6c83de1dc0a72df3663617d394a9e79641618d", "html_url": "https://github.com/rust-lang/rust/commit/3e6c83de1dc0a72df3663617d394a9e79641618d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6c83de1dc0a72df3663617d394a9e79641618d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ef85696dce84d5e6aff171cbf91d396678cbe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ef85696dce84d5e6aff171cbf91d396678cbe0", "html_url": "https://github.com/rust-lang/rust/commit/38ef85696dce84d5e6aff171cbf91d396678cbe0"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "f02e7e9f0ddcf0bf6accbdea172d218dc9a9c75c", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=3e6c83de1dc0a72df3663617d394a9e79641618d", "patch": "@@ -37,7 +37,7 @@\n // ignore-tce\n // ignore-thumb\n // ignore-thumbeb\n-// ignore-x86_64 no-ignore-x86\n+// ignore-x86_64\n // ignore-xcore\n // ignore-nvptx\n // ignore-nvptx64"}, {"sha": "d07fb7b4a7143bdf537b473e0df42287d1f832b1", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=3e6c83de1dc0a72df3663617d394a9e79641618d", "patch": "@@ -15,7 +15,8 @@\n // ignore-windows\n \n // Ignore 32 bit targets:\n-// ignore-x86, ignore-arm\n+// ignore-x86\n+// ignore-arm\n \n // ignore-emscripten\n "}, {"sha": "c503ca7d8cd14632d03a02332f90e6521d5b8cf6", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6c83de1dc0a72df3663617d394a9e79641618d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=3e6c83de1dc0a72df3663617d394a9e79641618d", "patch": "@@ -80,13 +80,12 @@ impl EarlyProps {\n                 return false;\n             }\n \n-            if !line.contains(\"ignore-gdb-version\") &&\n-               config.parse_name_directive(line, \"ignore-gdb\") {\n+            if config.parse_name_directive(line, \"ignore-gdb\") {\n                 return true;\n             }\n \n             if let Some(actual_version) = config.gdb_version {\n-                if line.contains(\"min-gdb-version\") {\n+                if line.starts_with(\"min-gdb-version\") {\n                     let (start_ver, end_ver) = extract_gdb_version_range(line);\n \n                     if start_ver != end_ver {\n@@ -95,7 +94,7 @@ impl EarlyProps {\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n                     actual_version < start_ver\n-                } else if line.contains(\"ignore-gdb-version\") {\n+                } else if line.starts_with(\"ignore-gdb-version\") {\n                     let (min_version, max_version) = extract_gdb_version_range(line);\n \n                     if max_version < min_version {\n@@ -119,20 +118,21 @@ impl EarlyProps {\n         fn extract_gdb_version_range(line: &str) -> (u32, u32) {\n             const ERROR_MESSAGE: &'static str = \"Malformed GDB version directive\";\n \n-            let range_components = line.split(' ')\n-                                       .flat_map(|word| word.split('-'))\n-                                       .filter(|word| word.len() > 0)\n-                                       .skip_while(|word| extract_gdb_version(word).is_none())\n-                                       .collect::<Vec<&str>>();\n+            let range_components = line.split(&[' ', '-'][..])\n+                                       .filter(|word| !word.is_empty())\n+                                       .map(extract_gdb_version)\n+                                       .skip_while(Option::is_none)\n+                                       .take(3) // 3 or more = invalid, so take at most 3.\n+                                       .collect::<Vec<Option<u32>>>();\n \n             match range_components.len() {\n                 1 => {\n-                    let v = extract_gdb_version(range_components[0]).unwrap();\n+                    let v = range_components[0].unwrap();\n                     (v, v)\n                 }\n                 2 => {\n-                    let v_min = extract_gdb_version(range_components[0]).unwrap();\n-                    let v_max = extract_gdb_version(range_components[1]).expect(ERROR_MESSAGE);\n+                    let v_min = range_components[0].unwrap();\n+                    let v_max = range_components[1].expect(ERROR_MESSAGE);\n                     (v_min, v_max)\n                 }\n                 _ => panic!(ERROR_MESSAGE),\n@@ -149,10 +149,10 @@ impl EarlyProps {\n             }\n \n             if let Some(ref actual_version) = config.lldb_version {\n-                if line.contains(\"min-lldb-version\") {\n-                    let min_version = line.trim()\n-                        .split(' ')\n-                        .last()\n+                if line.starts_with(\"min-lldb-version\") {\n+                    let min_version = line.trim_right()\n+                        .rsplit(' ')\n+                        .next()\n                         .expect(\"Malformed lldb version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n@@ -167,10 +167,10 @@ impl EarlyProps {\n \n         fn ignore_llvm(config: &Config, line: &str) -> bool {\n             if let Some(ref actual_version) = config.llvm_version {\n-                if line.contains(\"min-llvm-version\") {\n-                    let min_version = line.trim()\n-                        .split(' ')\n-                        .last()\n+                if line.starts_with(\"min-llvm-version\") {\n+                    let min_version = line.trim_right()\n+                        .rsplit(' ')\n+                        .next()\n                         .expect(\"Malformed llvm version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n@@ -413,14 +413,14 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n                     None => false,\n                 };\n                 if matches {\n-                    it(&ln[close_brace + 1..]);\n+                    it(ln[(close_brace + 1) ..].trim_left());\n                 }\n             } else {\n                 panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\",\n                        ln)\n             }\n         } else if ln.starts_with(\"//\") {\n-            it(&ln[2..]);\n+            it(ln[2..].trim_left());\n         }\n     }\n     return;\n@@ -528,15 +528,18 @@ impl Config {\n     }\n \n     fn parse_name_directive(&self, line: &str, directive: &str) -> bool {\n-        // This 'no-' rule is a quick hack to allow pretty-expanded and\n-        // no-pretty-expanded to coexist\n-        line.contains(directive) && !line.contains(&(\"no-\".to_owned() + directive))\n+        // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n+        // the line says \"ignore-x86_64\".\n+        line.starts_with(directive) && match line.as_bytes().get(directive.len()) {\n+            None | Some(&b' ') | Some(&b':') => true,\n+            _ => false\n+        }\n     }\n \n     pub fn parse_name_value_directive(&self, line: &str, directive: &str) -> Option<String> {\n-        let keycolon = format!(\"{}:\", directive);\n-        if let Some(colon) = line.find(&keycolon) {\n-            let value = line[(colon + keycolon.len())..line.len()].to_owned();\n+        let colon = directive.len();\n+        if line.starts_with(directive) && line.as_bytes().get(colon) == Some(&b':') {\n+            let value = line[(colon + 1) ..].to_owned();\n             debug!(\"{}: {}\", directive, value);\n             Some(expand_variables(value, self))\n         } else {"}]}