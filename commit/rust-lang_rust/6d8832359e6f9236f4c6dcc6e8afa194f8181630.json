{"sha": "6d8832359e6f9236f4c6dcc6e8afa194f8181630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkODgzMjM1OWU2ZjkyMzZmNGM2ZGNjNmU4YWZhMTk0ZjgxODE2MzA=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-08T20:12:05Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-09T10:30:09Z"}, "message": "auto_import: Removed Empty in favor of Partial(0)\nauto_import: Removed unecessary lifetimes", "tree": {"sha": "b02eeab100232433fb6a39f0a869277270c0fc60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02eeab100232433fb6a39f0a869277270c0fc60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8832359e6f9236f4c6dcc6e8afa194f8181630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8832359e6f9236f4c6dcc6e8afa194f8181630", "html_url": "https://github.com/rust-lang/rust/commit/6d8832359e6f9236f4c6dcc6e8afa194f8181630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8832359e6f9236f4c6dcc6e8afa194f8181630/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5580cf239d3b1a93718bec3acac5ff2183d418e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5580cf239d3b1a93718bec3acac5ff2183d418e4", "html_url": "https://github.com/rust-lang/rust/commit/5580cf239d3b1a93718bec3acac5ff2183d418e4"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "2ac19ab27fb6b401df7c935b4ad980aa210dd5db", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d8832359e6f9236f4c6dcc6e8afa194f8181630/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8832359e6f9236f4c6dcc6e8afa194f8181630/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=6d8832359e6f9236f4c6dcc6e8afa194f8181630", "patch": "@@ -48,8 +48,8 @@ fn collect_path_segments(path: &ast::Path) -> Option<Vec<&ast::PathSegment>> {\n     return Some(v);\n }\n \n-fn collect_path_segments_raw<'b, 'a: 'b>(\n-    segments: &'b mut Vec<&'a ast::PathSegment>,\n+fn collect_path_segments_raw<'a>(\n+    segments: &mut Vec<&'a ast::PathSegment>,\n     mut path: &'a ast::Path,\n ) -> Option<usize> {\n     let oldlen = segments.len();\n@@ -105,8 +105,6 @@ fn fmt_segments_raw(segments: &[&ast::PathSegment], buf: &mut String) {\n enum PathSegmentsMatch {\n     // Patch matches exactly\n     Full,\n-    // None of the segments matched. It's a more explicit Partial(0)\n-    Empty,\n     // When some of the segments matched\n     Partial(usize),\n     // When all the segments of the right path are matched against the left path,\n@@ -129,11 +127,7 @@ fn compare_path_segments(\n                 if compare_path_segment(left, right) {\n                     matching += 1\n                 } else {\n-                    return if matching == 0 {\n-                        PathSegmentsMatch::Empty\n-                    } else {\n-                        PathSegmentsMatch::Partial(matching)\n-                    };\n+                    return PathSegmentsMatch::Partial(matching);\n                 }\n             }\n             EitherOrBoth::Left(_) => {\n@@ -149,15 +143,15 @@ fn compare_path_segments(\n \n fn compare_path_segment(a: &ast::PathSegment, b: &ast::PathSegment) -> bool {\n     if let (Some(ka), Some(kb)) = (a.kind(), b.kind()) {\n-        return match (ka, kb) {\n+        match (ka, kb) {\n             (ast::PathSegmentKind::Name(nameref_a), ast::PathSegmentKind::Name(nameref_b)) => {\n                 nameref_a.text() == nameref_b.text()\n             }\n             (ast::PathSegmentKind::SelfKw, ast::PathSegmentKind::SelfKw) => true,\n             (ast::PathSegmentKind::SuperKw, ast::PathSegmentKind::SuperKw) => true,\n             (ast::PathSegmentKind::CrateKw, ast::PathSegmentKind::CrateKw) => true,\n             (_, _) => false,\n-        };\n+        }\n     } else {\n         false\n     }\n@@ -226,11 +220,11 @@ impl<'a> ImportAction<'a> {\n \n // Find out the best ImportAction to import target path against current_use_tree.\n // If current_use_tree has a nested import the function gets called recursively on every UseTree inside a UseTreeList.\n-fn walk_use_tree_for_best_action<'b, 'c, 'a: 'b + 'c>(\n-    current_path_segments: &'b mut Vec<&'a ast::PathSegment>, // buffer containing path segments\n+fn walk_use_tree_for_best_action<'a>(\n+    current_path_segments: &mut Vec<&'a ast::PathSegment>, // buffer containing path segments\n     current_parent_use_tree_list: Option<&'a ast::UseTreeList>, // will be Some value if we are in a nested import\n     current_use_tree: &'a ast::UseTree, // the use tree we are currently examinating\n-    target: &'c [&'a ast::PathSegment], // the path we want to import\n+    target: &[&'a ast::PathSegment],    // the path we want to import\n ) -> ImportAction<'a> {\n     // We save the number of segments in the buffer so we can restore the correct segments\n     // before returning. Recursive call will add segments so we need to delete them.\n@@ -295,7 +289,7 @@ fn walk_use_tree_for_best_action<'b, 'c, 'a: 'b + 'c>(\n                 ImportAction::Nothing\n             }\n         }\n-        PathSegmentsMatch::Empty => ImportAction::AddNewUse(\n+        PathSegmentsMatch::Partial(0) => ImportAction::AddNewUse(\n             // e.g: target is std::fmt and we can have\n             // use foo::bar\n             // We add a brand new use statement\n@@ -346,7 +340,7 @@ fn walk_use_tree_for_best_action<'b, 'c, 'a: 'b + 'c>(\n             better_action\n         }\n         PathSegmentsMatch::PartialRight(n) => {\n-            // e.g: target std::fmt and we can have\n+            // e.g: target is std::fmt and we can have\n             // use std::fmt::Debug;\n             let segments_to_split = current_path_segments.split_at(prev_len + n).1;\n             ImportAction::AddNestedImport(prev_len + n, path, Some(segments_to_split[0]), true)"}]}