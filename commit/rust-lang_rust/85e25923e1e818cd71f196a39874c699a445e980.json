{"sha": "85e25923e1e818cd71f196a39874c699a445e980", "node_id": "C_kwDOAAsO6NoAKDg1ZTI1OTIzZTFlODE4Y2Q3MWYxOTZhMzk4NzRjNjk5YTQ0NWU5ODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T14:16:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T14:16:38Z"}, "message": "Auto merge of #7909 - mikerite:fix-7816, r=camsteffen\n\nFix false negative in [`match_overlapping_arms`]\n\nchangelog: Fix false negative in [`match_overlapping_arms`]", "tree": {"sha": "a3cfb7b93cf2903c6a5cca5cf5df4e38e6e50755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3cfb7b93cf2903c6a5cca5cf5df4e38e6e50755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e25923e1e818cd71f196a39874c699a445e980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e25923e1e818cd71f196a39874c699a445e980", "html_url": "https://github.com/rust-lang/rust/commit/85e25923e1e818cd71f196a39874c699a445e980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e25923e1e818cd71f196a39874c699a445e980/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d", "html_url": "https://github.com/rust-lang/rust/commit/84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d"}, {"sha": "693df63c7d51aca2bb405a0574717a5d02fd8158", "url": "https://api.github.com/repos/rust-lang/rust/commits/693df63c7d51aca2bb405a0574717a5d02fd8158", "html_url": "https://github.com/rust-lang/rust/commit/693df63c7d51aca2bb405a0574717a5d02fd8158"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "a021ea63c80002d44f064793772d8aa0c8ab281a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/85e25923e1e818cd71f196a39874c699a445e980/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e25923e1e818cd71f196a39874c699a445e980/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=85e25923e1e818cd71f196a39874c699a445e980", "patch": "@@ -34,7 +34,6 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n-use std::iter;\n use std::ops::Bound;\n \n declare_clippy_lint! {\n@@ -1707,12 +1706,6 @@ where\n     }\n \n     impl<'a, T: Copy> Kind<'a, T> {\n-        fn range(&self) -> &'a SpannedRange<T> {\n-            match *self {\n-                Kind::Start(_, r) | Kind::End(_, r) => r,\n-            }\n-        }\n-\n         fn value(self) -> Bound<T> {\n             match self {\n                 Kind::Start(t, _) => Bound::Included(t),\n@@ -1730,7 +1723,19 @@ where\n     impl<'a, T: Copy + Ord> Ord for Kind<'a, T> {\n         fn cmp(&self, other: &Self) -> Ordering {\n             match (self.value(), other.value()) {\n-                (Bound::Included(a), Bound::Included(b)) | (Bound::Excluded(a), Bound::Excluded(b)) => a.cmp(&b),\n+                (Bound::Included(a), Bound::Included(b)) | (Bound::Excluded(a), Bound::Excluded(b)) => {\n+                    let value_cmp = a.cmp(&b);\n+                    // In the case of ties, starts come before ends\n+                    if value_cmp == Ordering::Equal {\n+                        match (self, other) {\n+                            (Kind::Start(..), Kind::End(..)) => Ordering::Less,\n+                            (Kind::End(..), Kind::Start(..)) => Ordering::Greater,\n+                            _ => Ordering::Equal,\n+                        }\n+                    } else {\n+                        value_cmp\n+                    }\n+                },\n                 // Range patterns cannot be unbounded (yet)\n                 (Bound::Unbounded, _) | (_, Bound::Unbounded) => unimplemented!(),\n                 (Bound::Included(a), Bound::Excluded(b)) => match a.cmp(&b) {\n@@ -1754,24 +1759,24 @@ where\n \n     values.sort();\n \n-    for (a, b) in iter::zip(&values, values.iter().skip(1)) {\n-        match (a, b) {\n-            (&Kind::Start(_, ra), &Kind::End(_, rb)) => {\n-                if ra.node != rb.node {\n-                    return Some((ra, rb));\n-                }\n-            },\n-            (&Kind::End(a, _), &Kind::Start(b, _)) if a != Bound::Included(b) => (),\n-            _ => {\n-                // skip if the range `a` is completely included into the range `b`\n-                if let Ordering::Equal | Ordering::Less = a.cmp(b) {\n-                    let kind_a = Kind::End(a.range().node.1, a.range());\n-                    let kind_b = Kind::End(b.range().node.1, b.range());\n-                    if let Ordering::Equal | Ordering::Greater = kind_a.cmp(&kind_b) {\n-                        return None;\n+    let mut started = vec![];\n+\n+    for value in values {\n+        match value {\n+            Kind::Start(_, r) => started.push(r),\n+            Kind::End(_, er) => {\n+                let mut overlap = None;\n+\n+                while let Some(sr) = started.pop() {\n+                    if sr == er {\n+                        break;\n                     }\n+                    overlap = Some(sr);\n+                }\n+\n+                if let Some(sr) = overlap {\n+                    return Some((er, sr));\n                 }\n-                return Some((a.range(), b.range()));\n             },\n         }\n     }"}, {"sha": "2f85e63571351cf2023b88e3de3d05e2695d0b21", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85e25923e1e818cd71f196a39874c699a445e980/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e25923e1e818cd71f196a39874c699a445e980/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=85e25923e1e818cd71f196a39874c699a445e980", "patch": "@@ -100,13 +100,31 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    // Issue #7816 - overlap after included range\n+    match 42 {\n+        5..=10 => (),\n+        0..=20 => (),\n+        21..=30 => (),\n+        21..=40 => (),\n+        _ => (),\n+    }\n+\n     // Issue #7829\n     match 0 {\n         -1..=1 => (),\n         -2..=2 => (),\n         _ => (),\n     }\n \n+    // Only warn about the first if there are multiple overlaps\n+    match 42u128 {\n+        0..=0x0000_0000_0000_00ff => (),\n+        0..=0x0000_0000_0000_ffff => (),\n+        0..=0x0000_0000_ffff_ffff => (),\n+        0..=0xffff_ffff_ffff_ffff => (),\n+        _ => (),\n+    }\n+\n     if let None = Some(42) {\n         // nothing\n     } else if let None = Some(42) {"}, {"sha": "b81bb1ecfae024fb1201f4ff83ae45222c4b4e3d", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85e25923e1e818cd71f196a39874c699a445e980/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85e25923e1e818cd71f196a39874c699a445e980/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=85e25923e1e818cd71f196a39874c699a445e980", "patch": "@@ -71,5 +71,29 @@ note: overlaps with this\n LL |         ..26 => println!(\"..26\"),\n    |         ^^^^\n \n-error: aborting due to 6 previous errors\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:107:9\n+   |\n+LL |         21..=30 => (),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:108:9\n+   |\n+LL |         21..=40 => (),\n+   |         ^^^^^^^\n+\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:121:9\n+   |\n+LL |         0..=0x0000_0000_0000_00ff => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:122:9\n+   |\n+LL |         0..=0x0000_0000_0000_ffff => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}]}