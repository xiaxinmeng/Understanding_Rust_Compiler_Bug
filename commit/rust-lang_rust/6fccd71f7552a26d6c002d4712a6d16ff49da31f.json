{"sha": "6fccd71f7552a26d6c002d4712a6d16ff49da31f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2NkNzFmNzU1MmEyNmQ2YzAwMmQ0NzEyYTZkMTZmZjQ5ZGEzMWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-25T13:01:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-25T13:01:06Z"}, "message": "librustc_errors: Don't emit the same error message twice.", "tree": {"sha": "29a3df738d112ca072e619c9ff5f2ae8d73c6012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a3df738d112ca072e619c9ff5f2ae8d73c6012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fccd71f7552a26d6c002d4712a6d16ff49da31f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fccd71f7552a26d6c002d4712a6d16ff49da31f", "html_url": "https://github.com/rust-lang/rust/commit/6fccd71f7552a26d6c002d4712a6d16ff49da31f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fccd71f7552a26d6c002d4712a6d16ff49da31f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f3dc3fee6a5bb5e651025368fb308d415a85b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f3dc3fee6a5bb5e651025368fb308d415a85b5", "html_url": "https://github.com/rust-lang/rust/commit/67f3dc3fee6a5bb5e651025368fb308d415a85b5"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "76bdc8ef4c62ff7ad5f0e5718eace9e237c6a683", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6fccd71f7552a26d6c002d4712a6d16ff49da31f", "patch": "@@ -1705,6 +1705,7 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "c72e9dd0ea3226c5630eb0922861308f5b03a4a9", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=6fccd71f7552a26d6c002d4712a6d16ff49da31f", "patch": "@@ -11,3 +11,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "64afdb1d2e0181b1f5c9bb4a117daab0f660067e", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=6fccd71f7552a26d6c002d4712a6d16ff49da31f", "patch": "@@ -17,7 +17,7 @@ use syntax_pos::{MultiSpan, Span};\n use snippet::Style;\n \n #[must_use]\n-#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,\n@@ -28,7 +28,7 @@ pub struct Diagnostic {\n }\n \n /// For example a note attached to an error.\n-#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct SubDiagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,"}, {"sha": "39bb0184289c7846f2a0725e322ce0125d9d58d6", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6fccd71f7552a26d6c002d4712a6d16ff49da31f", "patch": "@@ -18,10 +18,12 @@\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(conservative_impl_trait)]\n+#![feature(i128_type)]\n \n extern crate term;\n #[cfg(unix)]\n extern crate libc;\n+extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;\n \n@@ -31,6 +33,9 @@ use self::Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::stable_hasher::StableHasher;\n+\n use std::borrow::Cow;\n use std::cell::{RefCell, Cell};\n use std::mem;\n@@ -47,7 +52,7 @@ mod lock;\n \n use syntax_pos::{BytePos, Loc, FileLinesResult, FileMap, FileName, MultiSpan, Span, NO_EXPANSION};\n \n-#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -61,7 +66,7 @@ pub enum RenderSpan {\n     Suggestion(CodeSuggestion),\n }\n \n-#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n     /// applicable suggestions\n@@ -86,7 +91,7 @@ pub struct CodeSuggestion {\n     pub show_code_when_inline: bool,\n }\n \n-#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n /// See the docs on `CodeSuggestion::substitutions`\n pub struct Substitution {\n     pub span: Span,\n@@ -271,6 +276,11 @@ pub struct Handler {\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n+\n+    // This set contains a hash of every diagnostic that has been emitted by\n+    // this handler. These hashes is used to avoid emitting the same error\n+    // twice.\n+    emitted_diagnostics: RefCell<FxHashSet<u128>>,\n }\n \n impl Handler {\n@@ -295,6 +305,7 @@ impl Handler {\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),\n+            emitted_diagnostics: RefCell::new(FxHashSet()),\n         }\n     }\n \n@@ -559,15 +570,29 @@ impl Handler {\n     }\n \n     fn emit_db(&self, db: &DiagnosticBuilder) {\n+        let diagnostic = &**db;\n+\n         if let Some(ref mut list) = *self.tracked_diagnostics.borrow_mut() {\n-            list.push((**db).clone());\n+            list.push(diagnostic.clone());\n+        }\n+\n+        let diagnostic_hash = {\n+            use std::hash::Hash;\n+            let mut hasher = StableHasher::new();\n+            diagnostic.hash(&mut hasher);\n+            hasher.finish()\n+        };\n+\n+        // Only emit the diagnostic if we haven't already emitted an equivalent\n+        // one:\n+        if self.emitted_diagnostics.borrow_mut().insert(diagnostic_hash) {\n+            self.emitter.borrow_mut().emit(db);\n         }\n-        self.emitter.borrow_mut().emit(db);\n     }\n }\n \n \n-#[derive(Copy, PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, PartialEq, Clone, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum Level {\n     Bug,\n     Fatal,"}, {"sha": "2e8deeee5a599203a7c17bd76c867f705b9cc8dd", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fccd71f7552a26d6c002d4712a6d16ff49da31f/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=6fccd71f7552a26d6c002d4712a6d16ff49da31f", "patch": "@@ -203,7 +203,7 @@ pub struct StyledString {\n     pub style: Style,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Style {\n     HeaderMsg,\n     LineAndColumn,"}]}