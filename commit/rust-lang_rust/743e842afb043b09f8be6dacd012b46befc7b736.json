{"sha": "743e842afb043b09f8be6dacd012b46befc7b736", "node_id": "C_kwDOAAsO6NoAKDc0M2U4NDJhZmIwNDNiMDlmOGJlNmRhY2QwMTJiNDZiZWZjN2I3MzY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T21:46:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T21:46:48Z"}, "message": "Rollup merge of #88963 - fee1-dead:const-iterator, r=oli-obk\n\nCoerce const FnDefs to implement const Fn traits\n\nYou can now pass a FnDef to a function expecting `F` where `F: ~const FnTrait`.\n\nr? ``@oli-obk``\n\n``@rustbot`` label T-compiler F-const_trait_impl", "tree": {"sha": "44d7bcf4182cb19cf236d7312a995cd93c20521d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d7bcf4182cb19cf236d7312a995cd93c20521d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743e842afb043b09f8be6dacd012b46befc7b736", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhV4HICRBK7hj4Ov3rIwAARZMIAK++ETJuZ/5RuhjJtBTYR5/L\n55GWIT0UoqWH/MfYVzg/vAZZN7wqT1VoAep/wE78jGJlwnaCJmiclCGSmnmGLVu2\nJ+6vyV0gIzw9F+4W5Fq/iGkaCf3nbGlCLCTJU1KCeYYNKoYlHBy7bOHOhOKsMooc\nE7R4CdFqU+mH7SmhRdMIdXXrga1lxTjJKdqKJRc5bHVHcyXYaO6/ZqdYvyX3lThG\nSCo8y0Zp6KL5+tN7IoN13ePLaTxiYP/Ou5aAKU/7j+6JDoaMCPYugyYBSA9cR4wv\njCvCsXH8pgC9c68+7zVJuBRc3yNq61q/TFdjsSH5kgNnEGxLQaIaVhmFF4+dg/E=\n=wF10\n-----END PGP SIGNATURE-----\n", "payload": "tree 44d7bcf4182cb19cf236d7312a995cd93c20521d\nparent 2bab0a08e954d13073dff8cafc8e31f9db576d62\nparent f8aa73d3dd951d69903e962054f2614b083c5b9c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633124808 -0700\ncommitter GitHub <noreply@github.com> 1633124808 -0700\n\nRollup merge of #88963 - fee1-dead:const-iterator, r=oli-obk\n\nCoerce const FnDefs to implement const Fn traits\n\nYou can now pass a FnDef to a function expecting `F` where `F: ~const FnTrait`.\n\nr? ``@oli-obk``\n\n``@rustbot`` label T-compiler F-const_trait_impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743e842afb043b09f8be6dacd012b46befc7b736", "html_url": "https://github.com/rust-lang/rust/commit/743e842afb043b09f8be6dacd012b46befc7b736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743e842afb043b09f8be6dacd012b46befc7b736/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bab0a08e954d13073dff8cafc8e31f9db576d62", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bab0a08e954d13073dff8cafc8e31f9db576d62", "html_url": "https://github.com/rust-lang/rust/commit/2bab0a08e954d13073dff8cafc8e31f9db576d62"}, {"sha": "f8aa73d3dd951d69903e962054f2614b083c5b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8aa73d3dd951d69903e962054f2614b083c5b9c", "html_url": "https://github.com/rust-lang/rust/commit/f8aa73d3dd951d69903e962054f2614b083c5b9c"}], "stats": {"total": 116, "additions": 79, "deletions": 37}, "files": [{"sha": "df4cc295fac5f420eb97061786f51e8e6cd509de", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -6,23 +6,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n-/// Whether the `def_id` counts as const fn in your current crate, considering all active\n-/// feature gates\n-pub fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.is_const_fn_raw(def_id)\n-        && match is_unstable_const_fn(tcx, def_id) {\n-            Some(feature_name) => {\n-                // has a `rustc_const_unstable` attribute, check whether the user enabled the\n-                // corresponding feature gate.\n-                tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_name)\n-            }\n-            // functions without const stability are either stable user written\n-            // const fn or the user is using feature gates and we thus don't\n-            // care what they do\n-            None => true,\n-        }\n-}\n-\n /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_const_fn_raw(def_id) {\n@@ -77,7 +60,7 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && match tcx.lookup_const_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {"}, {"sha": "be1b827f2356f0d03c03ffef3f83b0915393616f", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -26,7 +26,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n-use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstCx};\n use crate::transform::MirPass;\n \n@@ -658,9 +657,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n         let is_const_fn = match *fn_ty.kind() {\n             ty::FnDef(def_id, _) => {\n-                is_const_fn(self.tcx, def_id)\n-                    || is_unstable_const_fn(self.tcx, def_id).is_some()\n-                    || is_lang_panic_fn(self.tcx, def_id)\n+                self.tcx.is_const_fn_raw(def_id) || is_lang_panic_fn(self.tcx, def_id)\n             }\n             _ => false,\n         };\n@@ -1081,7 +1078,7 @@ pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n                 if let ty::FnDef(def_id, _) = *literal.ty().kind() {\n                     if let Some((destination_place, _)) = destination {\n                         if destination_place == place {\n-                            if is_const_fn(ccx.tcx, def_id) {\n+                            if ccx.tcx.is_const_fn(def_id) {\n                                 return true;\n                             }\n                         }"}, {"sha": "e236c4712c883c4bf3e486eca75eba86a884da8e", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -120,7 +120,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous\n     /// types generated for a fn pointer type (e.g., `fn(int) -> int`)\n-    FnPointerCandidate,\n+    FnPointerCandidate {\n+        is_const: bool,\n+    },\n \n     /// Builtin implementation of `DiscriminantKind`.\n     DiscriminantKindCandidate,"}, {"sha": "a2adecd96367e36c92746107f8c6263bc7d1c2a8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -2701,6 +2701,29 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {\n         self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))\n     }\n+\n+    /// Whether the `def_id` counts as const fn in the current crate, considering all active\n+    /// feature gates\n+    pub fn is_const_fn(self, def_id: DefId) -> bool {\n+        if self.is_const_fn_raw(def_id) {\n+            match self.lookup_const_stability(def_id) {\n+                Some(stability) if stability.level.is_unstable() => {\n+                    // has a `rustc_const_unstable` attribute, check whether the user enabled the\n+                    // corresponding feature gate.\n+                    self.features()\n+                        .declared_lib_features\n+                        .iter()\n+                        .any(|&(sym, _)| sym == stability.feature)\n+                }\n+                // functions without const stability are either stable user written\n+                // const fn or the user is using feature gates and we thus don't\n+                // care what they do\n+                _ => true,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl TyCtxtAt<'tcx> {"}, {"sha": "719412492f637648e8c812f6e1459a0e031ac477", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -476,7 +476,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ..\n                 } = self_ty.fn_sig(self.tcx()).skip_binder()\n                 {\n-                    candidates.vec.push(FnPointerCandidate);\n+                    candidates.vec.push(FnPointerCandidate { is_const: false });\n                 }\n             }\n             // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).\n@@ -489,7 +489,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 } = self_ty.fn_sig(self.tcx()).skip_binder()\n                 {\n                     if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {\n-                        candidates.vec.push(FnPointerCandidate);\n+                        candidates\n+                            .vec\n+                            .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n                     }\n                 }\n             }"}, {"sha": "a36cb1358b64c8afc4e5e3bf5ce3ccd0c2f1f2bf", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -92,7 +92,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(ImplSource::Generator(vtable_generator))\n             }\n \n-            FnPointerCandidate => {\n+            FnPointerCandidate { .. } => {\n                 let data = self.confirm_fn_pointer_candidate(obligation)?;\n                 Ok(ImplSource::FnPointer(data))\n             }"}, {"sha": "e191654210a43531236dd057fdd41657ac67267c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -1112,6 +1112,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // generator, this will raise error in other places\n                 // or ignore error with const_async_blocks feature\n                 GeneratorCandidate => {}\n+                // FnDef where the function is const\n+                FnPointerCandidate { is_const: true } => {}\n                 ConstDropCandidate => {}\n                 _ => {\n                     // reject all other types of candidates\n@@ -1539,6 +1541,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n+            // Drop otherwise equivalent non-const fn pointer candidates\n+            (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,\n+\n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n             // clause so don't go around looking for impls.\n@@ -1549,7 +1554,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1567,7 +1572,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1597,7 +1602,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1609,7 +1614,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1690,7 +1695,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1699,7 +1704,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)"}, {"sha": "a55d85f5841d267c3fb49472873a4da0d7e38e30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -11,7 +11,7 @@ crate mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_const_eval::const_eval::{is_const_fn, is_unstable_const_fn};\n+use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -787,7 +787,7 @@ fn clean_fn_or_proc_macro(\n             let mut func = (sig, generics, body_id).clean(cx);\n             let def_id = item.def_id.to_def_id();\n             func.header.constness =\n-                if is_const_fn(cx.tcx, def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n+                if cx.tcx.is_const_fn(def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n                     hir::Constness::Const\n                 } else {\n                     hir::Constness::NotConst"}, {"sha": "99e608797ff650c2c2b943c83d04d4acdb8084f0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closures.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+const fn answer_p1<F>(f: &F) -> u8\n+    where\n+        F: ~const FnOnce() -> u8,\n+        F: ~const FnMut() -> u8,\n+        F: ~const Fn() -> u8,\n+{\n+    f() * 7\n+}\n+\n+const fn three() -> u8 {\n+    3\n+}\n+\n+const fn answer_p2() -> u8 {\n+    answer_p1(&three)\n+}\n+\n+const fn answer<F: ~const Fn() -> u8>(f: &F) -> u8 {\n+    f() + f()\n+}\n+\n+const ANSWER: u8 = answer(&answer_p2);\n+\n+fn main() {\n+    assert_eq!(ANSWER, 42)\n+}"}, {"sha": "03f77f36b460e56c1490ce4481377bf5d0d86ad8", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -18,7 +18,6 @@\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n-extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;"}, {"sha": "e6d8ba3f02eb063f0217944036ff087c59770771", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e842afb043b09f8be6dacd012b46befc7b736/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=743e842afb043b09f8be6dacd012b46befc7b736", "patch": "@@ -364,7 +364,7 @@ fn check_terminator(\n }\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n-    rustc_const_eval::const_eval::is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire"}]}