{"sha": "634638782b23392c40eeea832bfa0d260ebe7a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDYzODc4MmIyMzM5MmM0MGVlZWE4MzJiZmEwZDI2MGViZTdhOWY=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-18T09:23:37Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-20T14:53:02Z"}, "message": "Switch to store `Instance` directly within `VtblEntry`, fix `TraitVPtr` representation.", "tree": {"sha": "749cd4e9bfe42dc5071b8b60ec4e023fd5bf9b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749cd4e9bfe42dc5071b8b60ec4e023fd5bf9b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/634638782b23392c40eeea832bfa0d260ebe7a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/634638782b23392c40eeea832bfa0d260ebe7a9f", "html_url": "https://github.com/rust-lang/rust/commit/634638782b23392c40eeea832bfa0d260ebe7a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/634638782b23392c40eeea832bfa0d260ebe7a9f/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab171c5279df8ed2449ca995c3e5402abc3cf8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab171c5279df8ed2449ca995c3e5402abc3cf8e9", "html_url": "https://github.com/rust-lang/rust/commit/ab171c5279df8ed2449ca995c3e5402abc3cf8e9"}], "stats": {"total": 214, "additions": 98, "deletions": 116}, "files": [{"sha": "cc3f6b3d6ecfb3b9b7b5995769a6a98358c9a997", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1,18 +1,33 @@\n use std::convert::TryFrom;\n+use std::fmt;\n \n use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar, ScalarMaybeUninit};\n-use crate::ty::fold::TypeFoldable;\n-use crate::ty::{self, DefId, PolyExistentialTraitRef, SubstsRef, Ty, TyCtxt};\n+use crate::ty::{self, Instance, PolyTraitRef, Ty, TyCtxt};\n use rustc_ast::Mutability;\n \n-#[derive(Clone, Copy, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Copy, PartialEq, HashStable)]\n pub enum VtblEntry<'tcx> {\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n     Vacant,\n-    Method(DefId, SubstsRef<'tcx>),\n-    TraitVPtr(PolyExistentialTraitRef<'tcx>),\n+    Method(Instance<'tcx>),\n+    TraitVPtr(PolyTraitRef<'tcx>),\n+}\n+\n+impl<'tcx> fmt::Debug for VtblEntry<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // We want to call `Display` on `Instance` and `PolyTraitRef`,\n+        // so we implement this manually.\n+        match self {\n+            VtblEntry::MetadataDropInPlace => write!(f, \"MetadataDropInPlace\"),\n+            VtblEntry::MetadataSize => write!(f, \"MetadataSize\"),\n+            VtblEntry::MetadataAlign => write!(f, \"MetadataAlign\"),\n+            VtblEntry::Vacant => write!(f, \"Vacant\"),\n+            VtblEntry::Method(instance) => write!(f, \"Method({})\", instance),\n+            VtblEntry::TraitVPtr(trait_ref) => write!(f, \"TraitVPtr({})\", trait_ref),\n+        }\n+    }\n }\n \n pub const COMMON_VTABLE_ENTRIES: &[VtblEntry<'_>] =\n@@ -37,11 +52,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n         drop(vtables_cache);\n \n-        // See https://github.com/rust-lang/rust/pull/86475#discussion_r655162674\n-        assert!(\n-            !ty.needs_subst() && !poly_trait_ref.map_or(false, |trait_ref| trait_ref.needs_subst())\n-        );\n-        let param_env = ty::ParamEnv::reveal_all();\n         let vtable_entries = if let Some(poly_trait_ref) = poly_trait_ref {\n             let trait_ref = poly_trait_ref.with_self_ty(tcx, ty);\n             let trait_ref = tcx.erase_regions(trait_ref);\n@@ -51,8 +61,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             COMMON_VTABLE_ENTRIES\n         };\n \n-        let layout =\n-            tcx.layout_of(param_env.and(ty)).expect(\"failed to build vtable representation\");\n+        let layout = tcx\n+            .layout_of(ty::ParamEnv::reveal_all().and(ty))\n+            .expect(\"failed to build vtable representation\");\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n         let size = layout.size.bytes();\n         let align = layout.align.abi.bytes();\n@@ -80,21 +91,18 @@ impl<'tcx> TyCtxt<'tcx> {\n                 VtblEntry::MetadataSize => Scalar::from_uint(size, ptr_size).into(),\n                 VtblEntry::MetadataAlign => Scalar::from_uint(align, ptr_size).into(),\n                 VtblEntry::Vacant => continue,\n-                VtblEntry::Method(def_id, substs) => {\n-                    // See https://github.com/rust-lang/rust/pull/86475#discussion_r655162674\n-                    assert!(!substs.needs_subst());\n-\n+                VtblEntry::Method(instance) => {\n                     // Prepare the fn ptr we write into the vtable.\n-                    let instance =\n-                        ty::Instance::resolve_for_vtable(tcx, param_env, *def_id, substs)\n-                            .expect(\"resolution failed during building vtable representation\")\n-                            .polymorphize(tcx);\n+                    let instance = instance.polymorphize(tcx);\n                     let fn_alloc_id = tcx.create_fn_alloc(instance);\n                     let fn_ptr = Pointer::from(fn_alloc_id);\n                     ScalarMaybeUninit::from_pointer(fn_ptr, &tcx)\n                 }\n                 VtblEntry::TraitVPtr(trait_ref) => {\n-                    let supertrait_alloc_id = self.vtable_allocation(ty, Some(*trait_ref));\n+                    let super_trait_ref = trait_ref.map_bound(|trait_ref| {\n+                        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+                    });\n+                    let supertrait_alloc_id = self.vtable_allocation(ty, Some(super_trait_ref));\n                     let vptr = Pointer::from(supertrait_alloc_id);\n                     ScalarMaybeUninit::from_pointer(vptr, &tcx)\n                 }"}, {"sha": "95c4237f38396b58c9e5c12c9f8eba2b40f67b56", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1120,13 +1120,9 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n                         // all super trait items already covered, so skip them.\n                         None\n                     }\n-                    VtblEntry::Method(def_id, substs) => ty::Instance::resolve_for_vtable(\n-                        tcx,\n-                        ty::ParamEnv::reveal_all(),\n-                        *def_id,\n-                        substs,\n-                    )\n-                    .filter(|instance| should_codegen_locally(tcx, instance)),\n+                    VtblEntry::Method(instance) => {\n+                        Some(*instance).filter(|instance| should_codegen_locally(tcx, instance))\n+                    }\n                 })\n                 .map(|item| create_fn_mono_item(tcx, item, source));\n             output.extend(methods);"}, {"sha": "693384602a75f7090aa2b245c57126c5d1b29df2", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -614,9 +614,14 @@ fn prepare_vtable_segments<'tcx, T>(\n     }\n }\n \n-fn dump_vtable_entries<'tcx>(tcx: TyCtxt<'tcx>, entries: &[VtblEntry<'tcx>]) {\n-    let msg = format!(\"Vtable Entries: {:#?}\", entries);\n-    tcx.sess.struct_span_err(rustc_span::DUMMY_SP, &msg).emit();\n+fn dump_vtable_entries<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    sp: Span,\n+    trait_ref: ty::PolyTraitRef<'tcx>,\n+    entries: &[VtblEntry<'tcx>],\n+) {\n+    let msg = format!(\"Vtable entries for `{}`: {:#?}\", trait_ref, entries);\n+    tcx.sess.struct_span_err(sp, &msg).emit();\n }\n \n /// Given a trait `trait_ref`, iterates the vtable entries\n@@ -678,15 +683,19 @@ fn vtable_entries<'tcx>(\n                         return VtblEntry::Vacant;\n                     }\n \n-                    VtblEntry::Method(def_id, substs)\n+                    let instance = ty::Instance::resolve_for_vtable(\n+                        tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        def_id,\n+                        substs,\n+                    )\n+                    .expect(\"resolution failed during building vtable representation\");\n+                    VtblEntry::Method(instance)\n                 });\n \n                 entries.extend(own_entries);\n \n                 if emit_vptr {\n-                    let trait_ref = trait_ref.map_bound(|trait_ref| {\n-                        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n-                    });\n                     entries.push(VtblEntry::TraitVPtr(trait_ref));\n                 }\n             }\n@@ -698,7 +707,8 @@ fn vtable_entries<'tcx>(\n     let _ = prepare_vtable_segments(tcx, trait_ref, vtable_segment_callback);\n \n     if tcx.has_attr(trait_ref.def_id(), sym::rustc_dump_vtable) {\n-        dump_vtable_entries(tcx, &entries);\n+        let sp = tcx.def_span(trait_ref.def_id());\n+        dump_vtable_entries(tcx, sp, trait_ref, &entries);\n     }\n \n     tcx.arena.alloc_from_iter(entries.into_iter())"}, {"sha": "f64ae95f1d4dd04e6f325114d3e5772b6c943f7f", "filename": "src/test/ui/traits/vtable/vtable-diamond.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1,6 +1,4 @@\n // build-fail\n-//~^ error Vtable\n-//~^^ error Vtable\n #![feature(rustc_attrs)]\n \n #[rustc_dump_vtable]\n@@ -15,11 +13,13 @@ trait B: A {\n \n #[rustc_dump_vtable]\n trait C: A {\n+    //~^ error Vtable\n     fn foo_c(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait D: B + C {\n+    //~^ error Vtable\n     fn foo_d(&self) {}\n }\n "}, {"sha": "92a7f29536e3dc4a64e14bf35cce966163b0090d", "filename": "src/test/ui/traits/vtable/vtable-diamond.stderr", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1,56 +1,35 @@\n-error: Vtable Entries: [\n+error: Vtable entries for `<S as D>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n-    Method(\n-        DefId(0:4 ~ vtable_diamond[4564]::A::foo_a),\n-        [\n-            S,\n-        ],\n-    ),\n-    Method(\n-        DefId(0:6 ~ vtable_diamond[4564]::B::foo_b),\n-        [\n-            S,\n-        ],\n-    ),\n-    Method(\n-        DefId(0:8 ~ vtable_diamond[4564]::C::foo_c),\n-        [\n-            S,\n-        ],\n-    ),\n-    TraitVPtr(\n-        Binder(\n-            C,\n-            [],\n-        ),\n-    ),\n-    Method(\n-        DefId(0:10 ~ vtable_diamond[4564]::D::foo_d),\n-        [\n-            S,\n-        ],\n-    ),\n+    Method(<S as A>::foo_a),\n+    Method(<S as B>::foo_b),\n+    Method(<S as C>::foo_c),\n+    TraitVPtr(<S as C>),\n+    Method(<S as D>::foo_d),\n ]\n+  --> $DIR/vtable-diamond.rs:21:1\n+   |\n+LL | / trait D: B + C {\n+LL | |\n+LL | |     fn foo_d(&self) {}\n+LL | | }\n+   | |_^\n \n-error: Vtable Entries: [\n+error: Vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n-    Method(\n-        DefId(0:4 ~ vtable_diamond[4564]::A::foo_a),\n-        [\n-            S,\n-        ],\n-    ),\n-    Method(\n-        DefId(0:8 ~ vtable_diamond[4564]::C::foo_c),\n-        [\n-            S,\n-        ],\n-    ),\n+    Method(<S as A>::foo_a),\n+    Method(<S as C>::foo_c),\n ]\n+  --> $DIR/vtable-diamond.rs:15:1\n+   |\n+LL | / trait C: A {\n+LL | |\n+LL | |     fn foo_c(&self) {}\n+LL | | }\n+   | |_^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cb0d0b72481903be5857052fb0c17e68f84a4ad4", "filename": "src/test/ui/traits/vtable/vtable-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1,6 +1,4 @@\n // build-fail\n-//~^ error Vtable\n-//~^^ error Vtable\n #![feature(rustc_attrs)]\n \n #[rustc_dump_vtable]\n@@ -10,11 +8,13 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B {\n+    //~^ error Vtable\n     fn foo_b(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait C: A + B {\n+    //~^ error Vtable\n     fn foo_c(&self) {}\n }\n "}, {"sha": "f51b083de251565961fa200da42fe486851b4670", "filename": "src/test/ui/traits/vtable/vtable-multiple.stderr", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/634638782b23392c40eeea832bfa0d260ebe7a9f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr?ref=634638782b23392c40eeea832bfa0d260ebe7a9f", "patch": "@@ -1,44 +1,33 @@\n-error: Vtable Entries: [\n+error: Vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n-    Method(\n-        DefId(0:4 ~ vtable_multiple[5246]::A::foo_a),\n-        [\n-            S,\n-        ],\n-    ),\n-    Method(\n-        DefId(0:6 ~ vtable_multiple[5246]::B::foo_b),\n-        [\n-            S,\n-        ],\n-    ),\n-    TraitVPtr(\n-        Binder(\n-            B,\n-            [],\n-        ),\n-    ),\n-    Method(\n-        DefId(0:8 ~ vtable_multiple[5246]::C::foo_c),\n-        [\n-            S,\n-        ],\n-    ),\n+    Method(<S as A>::foo_a),\n+    Method(<S as B>::foo_b),\n+    TraitVPtr(<S as B>),\n+    Method(<S as C>::foo_c),\n ]\n+  --> $DIR/vtable-multiple.rs:16:1\n+   |\n+LL | / trait C: A + B {\n+LL | |\n+LL | |     fn foo_c(&self) {}\n+LL | | }\n+   | |_^\n \n-error: Vtable Entries: [\n+error: Vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n-    Method(\n-        DefId(0:6 ~ vtable_multiple[5246]::B::foo_b),\n-        [\n-            S,\n-        ],\n-    ),\n+    Method(<S as B>::foo_b),\n ]\n+  --> $DIR/vtable-multiple.rs:10:1\n+   |\n+LL | / trait B {\n+LL | |\n+LL | |     fn foo_b(&self) {}\n+LL | | }\n+   | |_^\n \n error: aborting due to 2 previous errors\n "}]}