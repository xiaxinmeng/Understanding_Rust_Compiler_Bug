{"sha": "7334c11b4b196e39da2418a239e2ff916896fa19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzRjMTFiNGIxOTZlMzlkYTI0MThhMjM5ZTJmZjkxNjg5NmZhMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T18:06:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T18:06:42Z"}, "message": "auto merge of #13026 : alexcrichton/rust/snapshots, r=huonw", "tree": {"sha": "40a52d76075a591565c7a81aa300e7e16eefac62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40a52d76075a591565c7a81aa300e7e16eefac62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7334c11b4b196e39da2418a239e2ff916896fa19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7334c11b4b196e39da2418a239e2ff916896fa19", "html_url": "https://github.com/rust-lang/rust/commit/7334c11b4b196e39da2418a239e2ff916896fa19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7334c11b4b196e39da2418a239e2ff916896fa19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b568efc0cf173ac7b2d37284beda5fdf8a7686ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b568efc0cf173ac7b2d37284beda5fdf8a7686ab", "html_url": "https://github.com/rust-lang/rust/commit/b568efc0cf173ac7b2d37284beda5fdf8a7686ab"}, {"sha": "11ac4df4d2402188f96fa75b3c9b7962e9bac805", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ac4df4d2402188f96fa75b3c9b7962e9bac805", "html_url": "https://github.com/rust-lang/rust/commit/11ac4df4d2402188f96fa75b3c9b7962e9bac805"}], "stats": {"total": 187, "additions": 27, "deletions": 160}, "files": [{"sha": "ec57173ff198a865ef3e5f2d7e390fdb19a64bc3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -21,10 +21,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(macro_rules, managed_boxes, default_type_params, phase)];\n-\n-// NOTE remove the following two attributes after the next snapshot.\n-#[allow(unrecognized_lint)];\n-#[allow(default_type_param_usage)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n extern crate rand;\n "}, {"sha": "d176f9740561d24a56b40ba210ccf69b18cb033c", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -83,9 +83,9 @@\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[deny(missing_doc)];\n-\n #[feature(globs, phase)];\n+#[deny(missing_doc)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n "}, {"sha": "f50cf72786475fe5e3b6e8251ff389f59a21a01b", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -50,6 +50,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[deny(unused_result, unused_must_use)];\n #[allow(non_camel_case_types)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the"}, {"sha": "1d0070ea477b1a7fea8ded26f4177eae379dd5e1", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -71,6 +71,7 @@ println!(\"{:?}\", tuple_ptr)\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(macro_rules, managed_boxes, phase)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;"}, {"sha": "57ef81b1bc57cf15a6631518abb1a23f18d0c565", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -28,8 +28,9 @@ This API is completely unstable and subject to change.\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[allow(deprecated)];\n-#[feature(macro_rules, globs, struct_variant, managed_boxes)];\n-#[feature(quote, default_type_params, phase)];\n+#[feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n+          default_type_params, phase)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n extern crate flate;\n extern crate arena;"}, {"sha": "86cb4e9b0103cfed5ecdc28f657383c50c88d2d9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -178,13 +178,6 @@ impl cmp::Eq for intern_key {\n     }\n }\n \n-#[cfg(stage0)]\n-impl Hash for intern_key {\n-    fn hash(&self, s: &mut sip::SipState) {\n-        unsafe { (*self.sty).hash(s) }\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<W:Writer> Hash<W> for intern_key {\n     fn hash(&self, s: &mut W) {\n         unsafe { (*self.sty).hash(s) }"}, {"sha": "bbe3192999af6211cf7abb39bdd3196339b9becf", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -15,19 +15,15 @@ use std::hash::{Hasher, Hash};\n use std::io;\n use syntax::ast;\n \n-#[cfg(not(stage0))]\n pub type FnvHashMap<K, V> = HashMap<K, V, FnvHasher>;\n \n pub type NodeMap<T> = FnvHashMap<ast::NodeId, T>;\n pub type DefIdMap<T> = FnvHashMap<ast::DefId, T>;\n \n-#[cfg(not(stage0))]\n pub type NodeSet = HashSet<ast::NodeId, FnvHasher>;\n-#[cfg(not(stage0))]\n pub type DefIdSet = HashSet<ast::DefId, FnvHasher>;\n \n // Hacks to get good names\n-#[cfg(not(stage0))]\n pub mod FnvHashMap {\n     use std::hash::Hash;\n     use collections::HashMap;\n@@ -45,53 +41,19 @@ pub mod DefIdMap {\n         super::FnvHashMap::new()\n     }\n }\n-#[cfg(not(stage0))]\n pub mod NodeSet {\n     use collections::HashSet;\n     pub fn new() -> super::NodeSet {\n         HashSet::with_hasher(super::FnvHasher)\n     }\n }\n-#[cfg(not(stage0))]\n pub mod DefIdSet {\n     use collections::HashSet;\n     pub fn new() -> super::DefIdSet {\n         HashSet::with_hasher(super::FnvHasher)\n     }\n }\n \n-#[cfg(stage0)]\n-pub type FnvHashMap<K, V> = HashMap<K, V>;\n-\n-#[cfg(stage0)]\n-pub type NodeSet = HashSet<ast::NodeId>;\n-#[cfg(stage0)]\n-pub type DefIdSet = HashSet<ast::DefId>;\n-\n-// Hacks to get good names\n-#[cfg(stage0)]\n-pub mod FnvHashMap {\n-    use std::hash::Hash;\n-    use collections::HashMap;\n-    pub fn new<K: Hash + Eq, V>() -> super::FnvHashMap<K, V> {\n-        HashMap::new()\n-    }\n-}\n-#[cfg(stage0)]\n-pub mod NodeSet {\n-    use collections::HashSet;\n-    pub fn new() -> super::NodeSet {\n-        HashSet::new()\n-    }\n-}\n-#[cfg(stage0)]\n-pub mod DefIdSet {\n-    use collections::HashSet;\n-    pub fn new() -> super::DefIdSet {\n-        HashSet::new()\n-    }\n-}\n-\n /// A speedy hash algorithm for node ids and def ids. The hashmap in\n /// libcollections by default uses SipHash which isn't quite as speedy as we\n /// want. In the compiler we're not really worried about DOS attempts, so we"}, {"sha": "ad2e741f782049108fc60dde34c2c5d0e25fa20d", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -21,13 +21,8 @@ Core encoding and decoding interfaces.\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[allow(missing_doc)];\n-#[forbid(non_camel_case_types)];\n #[feature(macro_rules, managed_boxes, default_type_params, phase)];\n-\n-// NOTE remove the following two attributes after the next snapshot.\n-#[allow(unrecognized_lint)];\n-#[allow(default_type_param_usage)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n // test harness access\n #[cfg(test)]"}, {"sha": "433400cc9f0e846f685078dc1c3e4ac3f1d06123", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -51,20 +51,14 @@\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n #[feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n           simd, linkage, default_type_params, phase)];\n \n-// NOTE remove the following two attributes after the next snapshot.\n-#[allow(unrecognized_lint)];\n-#[allow(default_type_param_usage)];\n-\n // Don't link to std. We are std.\n #[no_std];\n \n-#[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n-#[allow(unknown_features)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "75928e2921e2c02ad1873de8abe5cfd8df1cb14f", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -475,13 +475,6 @@ pub trait Index<Index,Result> {\n     fn index(&self, index: &Index) -> Result;\n }\n \n-/// Dummy dox\n-#[cfg(stage0)]\n-pub trait Deref<Result> {\n-    /// dummy dox\n-    fn deref<'a>(&'a self) -> &'a Result;\n-}\n-\n /**\n  *\n  * The `Deref` trait is used to specify the functionality of dereferencing\n@@ -509,20 +502,12 @@ pub trait Deref<Result> {\n  * }\n  * ```\n  */\n-#[cfg(not(stage0))]\n #[lang=\"deref\"]\n pub trait Deref<Result> {\n     /// The method called to dereference a value\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n \n-/// dummy dox\n-#[cfg(stage0)]\n-pub trait DerefMut<Result>: Deref<Result> {\n-    /// dummy dox\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut Result;\n-}\n-\n /**\n  *\n  * The `DerefMut` trait is used to specify the functionality of dereferencing\n@@ -557,7 +542,6 @@ pub trait DerefMut<Result>: Deref<Result> {\n  * }\n  * ```\n  */\n-#[cfg(not(stage0))]\n #[lang=\"deref_mut\"]\n pub trait DerefMut<Result>: Deref<Result> {\n     /// The method called to mutably dereference a value"}, {"sha": "98f4986b2c72a4d1aec0a0cd3b524d5dd30b476b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -13,32 +13,13 @@ use option::{Some, None, Option};\n use ptr::RawPtr;\n use rt::rtio::EventLoop;\n \n-#[cfg(stage0)] use cmp::TotalOrd;\n-#[cfg(stage0)] use container::MutableSet;\n-#[cfg(stage0)] use iter::Iterator;\n-#[cfg(stage0)] use slice::{ImmutableVector, OwnedVector};\n-\n // Need to tell the linker on OS X to not barf on undefined symbols\n // and instead look them up at runtime, which we need to resolve\n // the crate_map properly.\n #[cfg(target_os = \"macos\")]\n #[link_args = \"-Wl,-U,__rust_crate_map_toplevel\"]\n extern {}\n \n-#[cfg(stage0)]\n-pub struct ModEntry<'a> {\n-    name: &'a str,\n-    log_level: *mut u32\n-}\n-\n-#[cfg(stage0)]\n-pub struct CrateMap<'a> {\n-    version: i32,\n-    entries: &'a [ModEntry<'a>],\n-    children: &'a [&'a CrateMap<'a>],\n-    event_loop_factory: Option<fn() -> ~EventLoop>,\n-}\n-#[cfg(not(stage0))]\n pub struct CrateMap<'a> {\n     version: i32,\n     event_loop_factory: Option<fn() -> ~EventLoop>,\n@@ -121,46 +102,3 @@ pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n         }\n     }\n }\n-\n-#[cfg(stage0)]\n-fn version(crate_map: &CrateMap) -> i32 {\n-    match crate_map.version {\n-        2 => return 2,\n-        _ => return 0\n-    }\n-}\n-\n-#[cfg(stage0)]\n-fn do_iter_crate_map<'a>(\n-                     crate_map: &'a CrateMap<'a>,\n-                     f: |&'a ModEntry<'a>|,\n-                     visited: &mut ~[*CrateMap<'a>]) {\n-    let raw = crate_map as *CrateMap<'a>;\n-    if visited.bsearch(|a| (*a as uint).cmp(&(raw as uint))).is_some() {\n-        return\n-    }\n-    match visited.iter().position(|i| *i as uint > raw as uint) {\n-        Some(i) => visited.insert(i, raw),\n-        None => visited.push(raw),\n-    }\n-\n-    match version(crate_map) {\n-        2 => {\n-            let (entries, children) = (crate_map.entries, crate_map.children);\n-            for entry in entries.iter() {\n-                f(entry);\n-            }\n-            for child in children.iter() {\n-                do_iter_crate_map(*child, |x| f(x), visited);\n-            }\n-        },\n-        _ => fail!(\"invalid crate map version\")\n-    }\n-}\n-\n-/// Iterates recursively over `crate_map` and all child crate maps\n-#[cfg(stage0)]\n-pub fn iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: |&'a ModEntry<'a>|) {\n-    let mut v = ~[];\n-    do_iter_crate_map(crate_map, f, &mut v);\n-}"}, {"sha": "fabfa2c8a7a6fe671e57a34501770534f2487769", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -101,17 +101,11 @@ extern \"C\" {\n     pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                              trace_argument: *libc::c_void)\n                 -> _Unwind_Reason_Code;\n-    #[cfg(stage0, not(target_os = \"android\"))]\n-    pub fn _Unwind_GetIP(ctx: *_Unwind_Context) -> libc::uintptr_t;\n-    #[cfg(stage0, not(target_os = \"android\"))]\n-    pub fn _Unwind_FindEnclosingFunction(pc: *libc::c_void) -> *libc::c_void;\n \n-    #[cfg(not(stage0),\n-          not(target_os = \"android\"),\n+    #[cfg(not(target_os = \"android\"),\n           not(target_os = \"linux\", target_arch = \"arm\"))]\n     pub fn _Unwind_GetIP(ctx: *_Unwind_Context) -> libc::uintptr_t;\n-    #[cfg(not(stage0),\n-          not(target_os = \"android\"),\n+    #[cfg(not(target_os = \"android\"),\n           not(target_os = \"linux\", target_arch = \"arm\"))]\n     pub fn _Unwind_FindEnclosingFunction(pc: *libc::c_void) -> *libc::c_void;\n }"}, {"sha": "0cbd67557dedc11c519d3497d09dc1e2eceeca8f", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -271,7 +271,7 @@ mod imp {\n     // Assumes that we've been dynamically linked to libpthread but that is\n     // currently always the case.  Note that you need to check that the symbol\n     // is non-null before calling it!\n-    #[cfg(target_os = \"linux\", not(stage0))]\n+    #[cfg(target_os = \"linux\")]\n     fn min_stack_size(attr: *libc::pthread_attr_t) -> libc::size_t {\n         use ptr::RawPtr;\n         type F = extern \"C\" unsafe fn(*libc::pthread_attr_t) -> libc::size_t;\n@@ -289,7 +289,6 @@ mod imp {\n     // __pthread_get_minstack() is marked as weak but extern_weak linkage is\n     // not supported on OS X, hence this kludge...\n     #[cfg(not(target_os = \"linux\"))]\n-    #[cfg(stage0)]\n     fn min_stack_size(_: *libc::pthread_attr_t) -> libc::size_t {\n         PTHREAD_STACK_MIN\n     }"}, {"sha": "5e97b92e738fdf7f3e474b987863fc6e5ceba232", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -20,6 +20,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[feature(phase)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n "}, {"sha": "cea531ee3b36d4e17a609bbbd057c34eb18b423b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -26,10 +26,10 @@ This API is completely unstable and subject to change.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, globs, managed_boxes, default_type_params, phase, quote)];\n-\n+#[feature(macro_rules, globs, managed_boxes, default_type_params, phase,\n+          quote)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n #[allow(deprecated)];\n-#[deny(non_camel_case_types)];\n \n extern crate serialize;\n extern crate term;"}, {"sha": "3584d2bd162284a8276bdc006fc45eed0c31c827", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -20,8 +20,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(macro_rules)];\n-#[deny(non_camel_case_types)];\n-#[allow(missing_doc)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n extern crate collections;\n "}, {"sha": "2e4773fea249a7234d74dcac2651fd6d07ce5846", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -15,8 +15,8 @@\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n #[feature(phase)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate serialize;"}, {"sha": "77c1cc68b171e56271c66e88a80d8980ef87aa5f", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7334c11b4b196e39da2418a239e2ff916896fa19/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=7334c11b4b196e39da2418a239e2ff916896fa19", "patch": "@@ -1,3 +1,11 @@\n+S 2014-03-19 4ca51ae\n+  freebsd-x86_64 3059005ca4ee2972bb705313bfb7848e859a20cd\n+  linux-i386 8907cd4ce8b8301d70a6bbc0100c955444270c19\n+  linux-x86_64 54df3ad0c9f0db585090ab98692956cfbd7a3bd8\n+  macos-i386 b4b3ff9d658e6fa5b2441f0f315941119fe091a8\n+  macos-x86_64 0e67338c4395ef22231b63fa8139d85f277a8edd\n+  winnt-i386 d39f2c0b53a914c1b60a99d0e32892e3fb511273\n+\n S 2014-03-03 6e7f170\n   freebsd-x86_64 1afdfbb838af95cea5d5037018f220356da954f6\n   linux-i386 edd73d291614907ad502a9f726cd9facb1f2f49f"}]}