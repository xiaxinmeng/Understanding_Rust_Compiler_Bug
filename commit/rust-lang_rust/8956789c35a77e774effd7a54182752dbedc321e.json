{"sha": "8956789c35a77e774effd7a54182752dbedc321e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NTY3ODljMzVhNzdlNzc0ZWZmZDdhNTQxODI3NTJkYmVkYzMyMWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-06T16:48:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-16T11:34:33Z"}, "message": "Little unit tests for MIR dataflow analysis.\n\nThese use new `rustc_peek` (whose semantics is driven by attribute\nattached to fn).", "tree": {"sha": "7e34a82331a758f5ff43bb5a8426d44a4af26e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e34a82331a758f5ff43bb5a8426d44a4af26e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8956789c35a77e774effd7a54182752dbedc321e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8956789c35a77e774effd7a54182752dbedc321e", "html_url": "https://github.com/rust-lang/rust/commit/8956789c35a77e774effd7a54182752dbedc321e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8956789c35a77e774effd7a54182752dbedc321e/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5839e6bb10bbb66c517d5f2571d5ff5677a19bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5839e6bb10bbb66c517d5f2571d5ff5677a19bdb", "html_url": "https://github.com/rust-lang/rust/commit/5839e6bb10bbb66c517d5f2571d5ff5677a19bdb"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "af31d92994460ea02170dc4c70daa35ee8a41ae1", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8956789c35a77e774effd7a54182752dbedc321e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8956789c35a77e774effd7a54182752dbedc321e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=8956789c35a77e774effd7a54182752dbedc321e", "patch": "@@ -25,7 +25,10 @@ use super::DropFlagState;\n \n use bitslice::BitSlice; // adds set_bit/get_bit to &[usize] bitvector rep.\n \n+pub use self::sanity_check::sanity_check_via_rustc_peek;\n+\n mod graphviz;\n+mod sanity_check;\n \n pub trait Dataflow {\n     fn dataflow(&mut self);"}, {"sha": "b3e0315bb8238abf94eaccd19642d54c6d4abf10", "filename": "src/test/compile-fail/mir-dataflow/README.md", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2FREADME.md?ref=8956789c35a77e774effd7a54182752dbedc321e", "patch": "@@ -0,0 +1,53 @@\n+This directory contains unit tests for the MIR-based dataflow\n+analysis.\n+\n+These unit tests check the dataflow analysis by embedding calls to a\n+special `rustc_peek` intrinsic within the code, in tandem with an\n+attribute `#[rustc_mir(rustc_peek_maybe_init)]` (*). With that\n+attribute in place, `rustc_peek` calls are a signal to the compiler to\n+lookup the computed dataflow state for the Lvalue corresponding to the\n+argument expression being fed to `rustc_peek`. If the dataflow state\n+for that Lvalue is a 1-bit at that point in the control flow, then no\n+error is emitted by the compiler at that point; if it is a 0-bit, then\n+that invocation of `rustc_peek` will emit an error with the message\n+\"rustc_peek: bit not set\".\n+\n+(*): Or `#[rustc_mir(rustc_peek_maybe_uninit)]`, and perhaps other\n+variants in the future.\n+\n+The end effect is that one can write unit tests for MIR dataflow that\n+perform simple-queries of the computed dataflow state, and the tests\n+should be able to be robust in the face of changes to how MIR is\n+represented or constructed.\n+\n+----\n+\n+Sometimes understanding the dataflow results is difficult without\n+looking at the actual MIR control-flow graph being processed with the\n+corresponding GEN and KILL sets.\n+\n+For a graphviz-rendering with dataflow annotations, add the attribute\n+`#[rustc_mir(borrowck_graphviz_postflow=\"/path/to/suffix.dot\")]` to\n+the function in question. (You can change the content of\n+`\"suffix.dot\"` to control the filenames used for the output). This\n+will generate a separate file for each dataflow analysis, adding a\n+prefix (corresponding to the name of the analysis) to the filename in\n+each generated output path.\n+\n+ * For example, the above attribute will currently cause two files to\n+   be generated: `/path/to/maybe_init_suffix.dot` and\n+   `/path/to/maybe_uninit_suffix.dot`.\n+\n+ * The generated `.dot` file shows both the computed dataflow results\n+   on *entry* to each block, as well as the gen- and kill-sets that\n+   were so-called \"transfer functions\" summarizing the effect of each\n+   basic block.\n+\n+ * (In addition to the `borrowck_graphviz_postflow` attribute-key\n+   noted above, there is also `borrowck_graphviz_preflow`; it has the\n+   same interface and generates the same set of files, but it renders\n+   the dataflow state after building the gen- and kill-sets but\n+   *before* running the dataflow analysis itself, so each entry-set is\n+   just the initial default state for that dataflow analysis. This is\n+   less useful for understanding the error message output in these\n+   tests.)"}, {"sha": "949688098f62234b856636dea2bf8f4a8e09fd66", "filename": "src/test/compile-fail/mir-dataflow/inits-1.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs?ref=8956789c35a77e774effd7a54182752dbedc321e", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// General test of maybe_inits state computed by MIR dataflow.\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+\n+use std::intrinsics::rustc_peek;\n+use std::mem::{drop, replace};\n+\n+struct S(i32);\n+\n+#[rustc_mir_borrowck]\n+#[rustc_mir(rustc_peek_maybe_init,stop_after_dataflow)]\n+fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n+    let ret;\n+    // `ret` starts off uninitialized, so we get an error report here.\n+    unsafe { rustc_peek(&ret); }  //~ ERROR rustc_peek: bit not set\n+\n+    // All function formal parameters start off initialized.\n+\n+    unsafe { rustc_peek(&x) };\n+    unsafe { rustc_peek(&y) };\n+    unsafe { rustc_peek(&z) };\n+\n+    ret = if test {\n+        ::std::mem::replace(x, y)\n+    } else {\n+        z = y;\n+        z\n+    };\n+\n+\n+    // `z` may be initialized here.\n+    unsafe { rustc_peek(&z); }\n+\n+    // `y` is definitely uninitialized here.\n+    unsafe { rustc_peek(&y); }  //~ ERROR rustc_peek: bit not set\n+\n+    // `x` is still (definitely) initialized (replace above is a reborrow).\n+    unsafe { rustc_peek(&x); }\n+\n+    ::std::mem::drop(x);\n+\n+    // `x` is *definitely* uninitialized here\n+    unsafe { rustc_peek(&x); } //~ ERROR rustc_peek: bit not set\n+\n+    // `ret` is now definitely initialized (via `if` above).\n+    unsafe { rustc_peek(&ret); }\n+\n+    ret\n+}\n+\n+fn main() {\n+    foo(true, &mut S(13), S(14), S(15));\n+    foo(false, &mut S(13), S(14), S(15));\n+}"}, {"sha": "c13daae24f35dfe33d0d562de6f2b441c55275d5", "filename": "src/test/compile-fail/mir-dataflow/uninits-1.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs?ref=8956789c35a77e774effd7a54182752dbedc321e", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// General test of maybe_uninits state computed by MIR dataflow.\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+\n+use std::intrinsics::rustc_peek;\n+use std::mem::{drop, replace};\n+\n+struct S(i32);\n+\n+#[rustc_mir_borrowck]\n+#[rustc_mir(rustc_peek_maybe_uninit,stop_after_dataflow)]\n+fn foo(test: bool, x: &mut S, y: S, mut z: S) -> S {\n+    let ret;\n+    // `ret` starts off uninitialized\n+    unsafe { rustc_peek(&ret); }\n+\n+    // All function formal parameters start off initialized.\n+\n+    unsafe { rustc_peek(&x) }; //~ ERROR rustc_peek: bit not set\n+    unsafe { rustc_peek(&y) }; //~ ERROR rustc_peek: bit not set\n+    unsafe { rustc_peek(&z) }; //~ ERROR rustc_peek: bit not set\n+\n+    ret = if test {\n+        ::std::mem::replace(x, y)\n+    } else {\n+        z = y;\n+        z\n+    };\n+\n+    // `z` may be uninitialized here.\n+    unsafe { rustc_peek(&z); }\n+\n+    // `y` is definitely uninitialized here.\n+    unsafe { rustc_peek(&y); }\n+\n+    // `x` is still (definitely) initialized (replace above is a reborrow).\n+    unsafe { rustc_peek(&x); } //~ ERROR rustc_peek: bit not set\n+\n+    ::std::mem::drop(x);\n+\n+    // `x` is *definitely* uninitialized here\n+    unsafe { rustc_peek(&x); }\n+\n+    // `ret` is now definitely initialized (via `if` above).\n+    unsafe { rustc_peek(&ret); } //~ ERROR rustc_peek: bit not set\n+\n+    ret\n+}\n+fn main() {\n+    foo(true, &mut S(13), S(14), S(15));\n+    foo(false, &mut S(13), S(14), S(15));\n+}"}, {"sha": "a2869da7eb35412320c236a71400579425a55363", "filename": "src/test/compile-fail/mir-dataflow/uninits-2.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8956789c35a77e774effd7a54182752dbedc321e/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs?ref=8956789c35a77e774effd7a54182752dbedc321e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// General test of maybe_uninits state computed by MIR dataflow.\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+\n+use std::intrinsics::rustc_peek;\n+use std::mem::{drop, replace};\n+\n+struct S(i32);\n+\n+#[rustc_mir_borrowck]\n+#[rustc_mir(rustc_peek_maybe_uninit,stop_after_dataflow,borrowck_graphviz_postflow=\"/tmp/uninits-2.dot\")]\n+fn foo(x: &mut S) {\n+    // `x` is initialized here, so maybe-uninit bit is 0.\n+\n+    unsafe { *rustc_peek(&x) }; //~ ERROR rustc_peek: bit not set\n+\n+    ::std::mem::drop(x);\n+\n+    // `x` definitely uninitialized here, so maybe-uninit bit is 1.\n+    unsafe { rustc_peek(&x) };\n+}\n+fn main() {\n+    foo(&mut S(13));\n+    foo(&mut S(13));\n+}"}]}