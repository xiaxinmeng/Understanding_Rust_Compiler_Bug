{"sha": "1db4bbccedd46af905b20581a552aebf6dc57405", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjRiYmNjZWRkNDZhZjkwNWIyMDU4MWE1NTJhZWJmNmRjNTc0MDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-15T12:33:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-15T12:33:58Z"}, "message": "Rollup merge of #63155 - mfkl:uwp-msvc, r=alexcrichton\n\nAdd UWP MSVC targets\n\nHi,\n\n- The README URI change is the correct one for VS2019 community edition, which I suspect most people would use. Doesn't _need_ to be merged though.\n- This https://github.com/rust-lang/rust/commit/5e6619edd1a3b5c3f85438166d4d32af49f800fd fixes the UWP build (msvc or not, doesn't matter). I suspect it broke with recent changes unnoticed because no CI.\n- Store lib location is found through the VCToolsInstallDir env variable. The end of the path is currently for the VS2019 store lib locations only.\n- I could not test the aarch64_uwp_windows_msvc target because the rust build script does not currently support arm64 msvc AFAIU.", "tree": {"sha": "0a893184189d5d60a90f53e96e6d9a54ee8a9bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a893184189d5d60a90f53e96e6d9a54ee8a9bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db4bbccedd46af905b20581a552aebf6dc57405", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVVE2CRBK7hj4Ov3rIwAAdHIIAF89KxNOwGkl7oVXU1idhyTq\nOJcrCEarWzHcN2YIXJi1dgSmX/FnJgvbU0MPKHwsAN2epj+NEaf3Skas0JTdBtTt\n3Dc88maBiYvBEChoy0KCXFZ7bYajqljvdOb5m7lwz/nhdHQK3TelBMTQH2OWwCsE\nSnNRUze+QM5SmyhMxkojEGqKekZPJArhhQSjwgwg2dTzWlTI5Pg2QBwx9da6ViIR\n5CiTX9AUlHtXtntJjyIbB3NvjpMTfE4Dkxl09JSyy9naieh/JJ7hULLz7mqbXlTj\nMv45PEs0nxnehqgwUbn8f51RhUvPZp3TROE98Rf9FFM1e+yZRaW0NoqQjFykcAI=\n=cAj2\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a893184189d5d60a90f53e96e6d9a54ee8a9bd9\nparent 1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc\nparent 1581c43be0dd7ac529e85f0a88f7447a315cb787\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565872438 +0200\ncommitter GitHub <noreply@github.com> 1565872438 +0200\n\nRollup merge of #63155 - mfkl:uwp-msvc, r=alexcrichton\n\nAdd UWP MSVC targets\n\nHi,\n\n- The README URI change is the correct one for VS2019 community edition, which I suspect most people would use. Doesn't _need_ to be merged though.\n- This https://github.com/rust-lang/rust/commit/5e6619edd1a3b5c3f85438166d4d32af49f800fd fixes the UWP build (msvc or not, doesn't matter). I suspect it broke with recent changes unnoticed because no CI.\n- Store lib location is found through the VCToolsInstallDir env variable. The end of the path is currently for the VS2019 store lib locations only.\n- I could not test the aarch64_uwp_windows_msvc target because the rust build script does not currently support arm64 msvc AFAIU.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db4bbccedd46af905b20581a552aebf6dc57405", "html_url": "https://github.com/rust-lang/rust/commit/1db4bbccedd46af905b20581a552aebf6dc57405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db4bbccedd46af905b20581a552aebf6dc57405/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "html_url": "https://github.com/rust-lang/rust/commit/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc"}, {"sha": "1581c43be0dd7ac529e85f0a88f7447a315cb787", "url": "https://api.github.com/repos/rust-lang/rust/commits/1581c43be0dd7ac529e85f0a88f7447a315cb787", "html_url": "https://github.com/rust-lang/rust/commit/1581c43be0dd7ac529e85f0a88f7447a315cb787"}], "stats": {"total": 143, "additions": 140, "deletions": 3}, "files": [{"sha": "724bc36ecc6fb7fd2bb6b9783416528c7554b9ae", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -144,7 +144,7 @@ then you may need to force rustbuild to use an older version. This can be done\n by manually calling the appropriate vcvars file before running the bootstrap.\n \n ```batch\n-> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n+> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n > python x.py build\n ```\n "}, {"sha": "8603d61fb5453f83cf70e0ba9dc10eb33b358978", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -32,6 +32,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Output, Stdio, ExitStatus};\n use std::str;\n use std::env;\n+use std::ffi::OsString;\n \n pub use rustc_codegen_utils::link::*;\n \n@@ -158,6 +159,36 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n         }\n     };\n \n+    // UWP apps have API restrictions enforced during Store submissions.\n+    // To comply with the Windows App Certification Kit,\n+    // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n+    let t = &sess.target.target;\n+    if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n+        if let Some(ref tool) = msvc_tool {\n+            let original_path = tool.path();\n+            if let Some(ref root_lib_path) = original_path.ancestors().skip(4).next() {\n+                let arch = match t.arch.as_str() {\n+                    \"x86_64\" => Some(\"x64\".to_string()),\n+                    \"x86\" => Some(\"x86\".to_string()),\n+                    \"aarch64\" => Some(\"arm64\".to_string()),\n+                    _ => None,\n+                };\n+                if let Some(ref a) = arch {\n+                    let mut arg = OsString::from(\"/LIBPATH:\");\n+                    arg.push(format!(\"{}\\\\lib\\\\{}\\\\store\", root_lib_path.display(), a.to_string()));\n+                    cmd.arg(&arg);\n+                }\n+                else {\n+                    warn!(\"arch is not supported\");\n+                }\n+            } else {\n+                warn!(\"MSVC root path lib location not found\");\n+            }\n+        } else {\n+            warn!(\"link.exe not found\");\n+        }\n+    }\n+\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n@@ -1027,6 +1058,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n     let t = &sess.target.target;\n \n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n         cmd.add_object(obj);\n     }"}, {"sha": "5d8b829f2ab711c9ee25ed7ab0ebe399de205946", "filename": "src/librustc_target/spec/aarch64_uwp_windows_msvc.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult, PanicStrategy};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_msvc_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.has_elf_tls = true;\n+\n+    // FIXME: this shouldn't be panic=abort, it should be panic=unwind\n+    base.panic_strategy = PanicStrategy::Abort;\n+\n+    Ok(Target {\n+        llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+        options: base,\n+    })\n+}"}, {"sha": "5e8e8c2a4149c6eb242bb254686dfe8f5b8106e7", "filename": "src/librustc_target/spec/i686_uwp_windows_msvc.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -0,0 +1,22 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_msvc_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.has_elf_tls = true;\n+\n+    Ok(Target {\n+        llvm_target: \"i686-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+        options: base,\n+    })\n+}"}, {"sha": "5c9cdc07fc23fac43335c0470413fa376750aa52", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -61,6 +61,7 @@ mod uefi_base;\n mod windows_base;\n mod windows_msvc_base;\n mod windows_uwp_base;\n+mod windows_uwp_msvc_base;\n mod thumb_base;\n mod l4re_base;\n mod fuchsia_base;\n@@ -442,8 +443,11 @@ supported_targets! {\n     (\"x86_64-uwp-windows-gnu\", x86_64_uwp_windows_gnu),\n \n     (\"aarch64-pc-windows-msvc\", aarch64_pc_windows_msvc),\n+    (\"aarch64-uwp-windows-msvc\", aarch64_uwp_windows_msvc),\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),\n+    (\"x86_64-uwp-windows-msvc\", x86_64_uwp_windows_msvc),\n     (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n+    (\"i686-uwp-windows-msvc\", i686_uwp_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n     (\"thumbv7a-pc-windows-msvc\", thumbv7a_pc_windows_msvc),\n "}, {"sha": "1121916e68f5130b675a5d3badb63b84ccdd3566", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -0,0 +1,33 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Msvc,\n+                vec![\"/NOLOGO\".to_string(),\n+                     \"/NXCOMPAT\".to_string(),\n+                     \"/APPCONTAINER\".to_string(),\n+                     \"mincore.lib\".to_string()]);\n+\n+    TargetOptions {\n+        function_sections: true,\n+        dynamic_linking: true,\n+        executables: true,\n+        dll_prefix: String::new(),\n+        dll_suffix: \".dll\".to_string(),\n+        exe_suffix: \".exe\".to_string(),\n+        staticlib_prefix: String::new(),\n+        staticlib_suffix: \".lib\".to_string(),\n+        target_family: Some(\"windows\".to_string()),\n+        is_like_windows: true,\n+        is_like_msvc: true,\n+        pre_link_args: args,\n+        crt_static_allows_dylibs: true,\n+        crt_static_respected: true,\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+        requires_uwtable: true,\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "40dd52c159151f5c4484fedd6dfa5dfe244b6112", "filename": "src/librustc_target/spec/x86_64_uwp_windows_msvc.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -0,0 +1,22 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_msvc_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.has_elf_tls = true;\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+        options: base,\n+    })\n+}"}, {"sha": "b1f9d9766f7055ff17079704420d8782c98a24cb", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -714,7 +714,7 @@ if #[cfg(target_vendor = \"uwp\")] {\n     pub struct FILE_STANDARD_INFO {\n         pub AllocationSize: LARGE_INTEGER,\n         pub EndOfFile: LARGE_INTEGER,\n-        pub NumberOfLink: DWORD,\n+        pub NumberOfLinks: DWORD,\n         pub DeletePending: BOOLEAN,\n         pub Directory: BOOLEAN,\n     }"}, {"sha": "204f6af5fc1a0432788922315838da2deb70b86e", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db4bbccedd46af905b20581a552aebf6dc57405/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=1db4bbccedd46af905b20581a552aebf6dc57405", "patch": "@@ -357,7 +357,7 @@ impl File {\n                                                 size as c::DWORD))?;\n             attr.file_size = info.AllocationSize as u64;\n             attr.number_of_links = Some(info.NumberOfLinks);\n-            if attr.is_reparse_point() {\n+            if attr.file_type().is_reparse_point() {\n                 let mut b = [0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n                     attr.reparse_tag = buf.ReparseTag;"}]}