{"sha": "b60a214c51413b112935eadde5777998c3aa3458", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGEyMTRjNTE0MTNiMTEyOTM1ZWFkZGU1Nzc3OTk4YzNhYTM0NTg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-21T21:13:04Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:49Z"}, "message": "super_traits_of is now a query", "tree": {"sha": "31722acb941c2e747c24d74cb337e25afa1b9cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31722acb941c2e747c24d74cb337e25afa1b9cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60a214c51413b112935eadde5777998c3aa3458", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/UACgkQgTGiTgx5\n76+tyxAArq4fjfWizlQwXsYr2q5ockeA6nvjjPnLjOKScWCJU73/gJIjIqOOvJg8\nyYATYRuNciv/a1+Pidnd2KdIyY/MRVaD9o2BM6gjFx12B/F0ZlWwLvRsV+ye2yXe\n3vLQNyue8SIaB8XF8LPj/8JXw8WAyzZkPnSNC8s3Hjk1b5hMHUfcRUP/EtTc0ila\npHzDe8jrpqeHQozkgew0upHHkrom1YF1GT8R/rWOMhPrcOAaOVfu6X8OSP8Z1BPW\nK+dI+QC2J/lxlKnOFF4JZ51tt2YnH29/VkliX15LsYVs6FnHcA+ZXV3l29VcOb28\n/gojl5LA2UdPW6d6ckgAR8JK62BcsM/g1/beLdt/HM1OQMbxz9+1lbPz/0iIbA9e\n0WaLFub+t5uL9wpXgosq1jIltKm8nHC94P7lNSxRvHvG1iE0Lo2NHqwjGdA2CKkE\nkP3D5mesvLbijY6flzJ5sK6qhg/2HESyOu4cU0dtIGqHhdq9QmcCMF5YYfEDPwlE\niP+diuFHqmIs3U6iU9wC6FVfuVYF7HtorE3NlAGCqyXDKcLvA4WnVuNsv6f0hXrs\nQX0AyVcRYK1wHnQW6M8BF1vIYoIQwCC8ZvInpJsY3lHs6Bao7PCyb53NAEZdd1PG\n/W5RjCA9wf7pZ3Dvb8wxu4fV5T1C20qcTjxUB2dGfdDsePpWq0Y=\n=HzIX\n-----END PGP SIGNATURE-----", "payload": "tree 31722acb941c2e747c24d74cb337e25afa1b9cd8\nparent 6631215e5413a7e963c93c8c94f7ac980254623a\nauthor Santiago Pastorino <spastorino@gmail.com> 1605993184 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487029 -0300\n\nsuper_traits_of is now a query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60a214c51413b112935eadde5777998c3aa3458", "html_url": "https://github.com/rust-lang/rust/commit/b60a214c51413b112935eadde5777998c3aa3458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60a214c51413b112935eadde5777998c3aa3458/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6631215e5413a7e963c93c8c94f7ac980254623a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6631215e5413a7e963c93c8c94f7ac980254623a", "html_url": "https://github.com/rust-lang/rust/commit/6631215e5413a7e963c93c8c94f7ac980254623a"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "37dd1a1cf5f821a693cd6954b4881926eb4fa337", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b60a214c51413b112935eadde5777998c3aa3458", "patch": "@@ -433,7 +433,13 @@ rustc_queries! {\n         /// full predicates are available (note that supertraits have\n         /// additional acyclicity requirements).\n         query super_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n-            desc { |tcx| \"computing the supertraits of `{}`\", tcx.def_path_str(key) }\n+            desc { |tcx| \"computing the super predicates of `{}`\", tcx.def_path_str(key) }\n+        }\n+\n+        /// Maps from the `DefId` of a trait to the list of\n+        /// all the ancestors super traits.\n+        query super_traits_of(key: DefId) -> FxHashSet<DefId> {\n+            desc { |tcx| \"computing the super traits of `{}`\", tcx.def_path_str(key) }\n         }\n \n         /// Maps from the `DefId` of a trait to the list of"}, {"sha": "4e87940efd34c54e4a3344d35aa83c5510b4b837", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b60a214c51413b112935eadde5777998c3aa3458", "patch": "@@ -6,7 +6,6 @@ mod errors;\n mod generics;\n \n use crate::bounds::Bounds;\n-use crate::collect::super_traits_of;\n use crate::collect::PlaceholderHirTyCollector;\n use crate::errors::{\n     AmbiguousLifetimeBound, MultipleRelaxedDefaultBounds, TraitObjectDeclaredWithNoTraits,\n@@ -923,10 +922,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`\n     /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.\n     fn trait_may_define_assoc_type(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n-        super_traits_of(self.tcx(), trait_def_id).any(|trait_did| {\n+        self.tcx().super_traits_of(trait_def_id).iter().any(|trait_did| {\n             self.tcx()\n-                .associated_items(trait_did)\n-                .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, trait_did)\n+                .associated_items(*trait_did)\n+                .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, *trait_did)\n                 .is_some()\n         })\n     }"}, {"sha": "d7da7f2a5d9cbf90556efec2546944d9f4b49a86", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60a214c51413b112935eadde5777998c3aa3458/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b60a214c51413b112935eadde5777998c3aa3458", "patch": "@@ -80,6 +80,7 @@ pub fn provide(providers: &mut Providers) {\n         projection_ty_from_predicates,\n         explicit_predicates_of,\n         super_predicates_of,\n+        super_traits_of,\n         super_predicates_that_define_assoc_type,\n         trait_explicit_predicates_and_bounds,\n         type_param_predicates,\n@@ -653,14 +654,14 @@ impl ItemCtxt<'tcx> {\n             hir::GenericBound::Trait(poly_trait_ref, _) => {\n                 let trait_ref = &poly_trait_ref.trait_ref;\n                 if let Some(trait_did) = trait_ref.trait_def_id() {\n-                    super_traits_of(self.tcx, trait_did).any(|trait_did| {\n+                    self.tcx.super_traits_of(trait_did).iter().any(|trait_did| {\n                         self.tcx\n-                            .associated_items(trait_did)\n+                            .associated_items(*trait_did)\n                             .find_by_name_and_kind(\n                                 self.tcx,\n                                 assoc_name,\n                                 ty::AssocKind::Type,\n-                                trait_did,\n+                                *trait_did,\n                             )\n                             .is_some()\n                     })\n@@ -1125,7 +1126,7 @@ fn super_predicates_that_define_assoc_type(\n     }\n }\n \n-pub fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> impl Iterator<Item = DefId> {\n+fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> FxHashSet<DefId> {\n     let mut set = FxHashSet::default();\n     let mut stack = vec![trait_def_id];\n     while let Some(trait_did) = stack.pop() {\n@@ -1185,7 +1186,7 @@ pub fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> impl Iterator<It\n         }\n     }\n \n-    set.into_iter()\n+    set\n }\n \n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {"}]}