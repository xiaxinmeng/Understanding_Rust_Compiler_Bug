{"sha": "6155a803805acaddd2518f09c2da70fbc320b274", "node_id": "C_kwDOAAsO6NoAKDYxNTVhODAzODA1YWNhZGRkMjUxOGYwOWMyZGE3MGZiYzMyMGIyNzQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-20T19:45:01Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-22T14:02:28Z"}, "message": "Rename relationships to infer_var_info", "tree": {"sha": "d55a55f429b1e5a8fafab5b5e42c0ab8d9e83ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55a55f429b1e5a8fafab5b5e42c0ab8d9e83ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6155a803805acaddd2518f09c2da70fbc320b274", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPNQfQACgkQgTGiTgx5\n768E6g//WtKXjSeoZT8FdVuLQhPLy3Kp0aLpr1y9uxOCvdi0ybUzl88RbNFx2jNX\nZAQWE1K512p2FxHTf7eT9oC6Fbt8XdzVrx7b2jp1o/Ak7GDWSS+9U4E5w3uScCba\nq2YCcLQ8m1pRdFhqlK1SUodJtid9UYA1tAfym42eMNglLD07EstO6/Cf5PHkvYKA\nyey4aP1S1F7sBO/eh9VAzR04u2pmWcyHZpoJv81fOSlCTmrA2/cmtjJgpzwviYFZ\nKPEQ4MpAYxClH4WxdMpsnYyGdAMlIqIg5PBKpvLT0cN9vfd1y2D4eYW+QIEapuxd\ntbtudtdcP8cpH6oGNL0g19k5vpuvPS0o3rtEYbkyupgrmP6fj91AMM1lcGwGGEOd\nsEo2WBD5n7rOW7uurdSIBQ/jEkxFewIuh69Raltp5Y2SLsFFYIh9UyaoUN6tXlAn\n07LjnvVNUD6jAXsrMd1yATDLNP8MKFdZ7Dq+uhAJNNVdkA7IeC5CQ764Vtq/lm16\nHU6kuMqUZk9ZjVja0VUKpIeSYb0dy0t8IvVbdh5BC09Dv8f+iWWhFxV0IG+9OLBx\nKsnZZBZiXtFDBiTn2QJT6s6QgPDgRbbyMjfzHrWoGRcPi3XW8eaY8FIq4Yf9ZZ+O\njsIjk9sv5lDcyWO1Vgldbk+qfDjfv4uySqa9ObJUzn38lzjQmfo=\n=IAZq\n-----END PGP SIGNATURE-----", "payload": "tree d55a55f429b1e5a8fafab5b5e42c0ab8d9e83ddc\nparent fb0a4e958950ed4dabc954c8a258594847b1d9bc\nauthor Santiago Pastorino <spastorino@gmail.com> 1674243901 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1674396148 -0300\n\nRename relationships to infer_var_info\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6155a803805acaddd2518f09c2da70fbc320b274", "html_url": "https://github.com/rust-lang/rust/commit/6155a803805acaddd2518f09c2da70fbc320b274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6155a803805acaddd2518f09c2da70fbc320b274/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0a4e958950ed4dabc954c8a258594847b1d9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0a4e958950ed4dabc954c8a258594847b1d9bc", "html_url": "https://github.com/rust-lang/rust/commit/fb0a4e958950ed4dabc954c8a258594847b1d9bc"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "943dc9b9646fc63131cd4f4394b0b530f7bbd978", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=6155a803805acaddd2518f09c2da70fbc320b274", "patch": "@@ -293,16 +293,16 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n                 .depth_first_search(root_vid)\n                 .any(|n| roots_reachable_from_non_diverging.visited(n));\n \n-            let mut relationship = ty::FoundRelationships { self_in_trait: false, output: false };\n+            let mut found_infer_var_info = ty::InferVarInfo { self_in_trait: false, output: false };\n \n-            for (vid, rel) in self.inh.relationships.borrow().iter() {\n+            for (vid, info) in self.inh.infer_var_info.borrow().iter() {\n                 if self.infcx.root_var(*vid) == root_vid {\n-                    relationship.self_in_trait |= rel.self_in_trait;\n-                    relationship.output |= rel.output;\n+                    found_infer_var_info.self_in_trait |= info.self_in_trait;\n+                    found_infer_var_info.output |= info.output;\n                 }\n             }\n \n-            if relationship.self_in_trait && relationship.output {\n+            if found_infer_var_info.self_in_trait && found_infer_var_info.output {\n                 // This case falls back to () to ensure that the code pattern in\n                 // tests/ui/never_type/fallback-closure-ret.rs continues to\n                 // compile when never_type_fallback is enabled."}, {"sha": "ba34f299453ecff0473190c130ccf5643542d351", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=6155a803805acaddd2518f09c2da70fbc320b274", "patch": "@@ -65,7 +65,7 @@ pub struct Inherited<'tcx> {\n     /// fallback. See the `fallback` module for details.\n     pub(super) diverging_type_vars: RefCell<FxHashSet<Ty<'tcx>>>,\n \n-    pub(super) relationships: RefCell<FxHashMap<ty::TyVid, ty::FoundRelationships>>,\n+    pub(super) infer_var_info: RefCell<FxHashMap<ty::TyVid, ty::InferVarInfo>>,\n }\n \n impl<'tcx> Deref for Inherited<'tcx> {\n@@ -131,7 +131,7 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n             body_id,\n-            relationships: RefCell::new(Default::default()),\n+            infer_var_info: RefCell::new(Default::default()),\n         }\n     }\n \n@@ -161,7 +161,7 @@ impl<'tcx> Inherited<'tcx> {\n     }\n \n     pub fn update_infer_var_info(&self, obligation: &PredicateObligation<'tcx>) {\n-        let relationships = &mut self.relationships.borrow_mut();\n+        let infer_var_info = &mut self.infer_var_info.borrow_mut();\n \n         // (*) binder skipped\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n@@ -183,7 +183,7 @@ impl<'tcx> Inherited<'tcx> {\n             );\n             // Don't report overflow errors. Otherwise equivalent to may_hold.\n             if let Ok(result) = self.probe(|_| self.evaluate_obligation(&o)) && result.may_apply() {\n-                relationships.entry(ty).or_default().self_in_trait = true;\n+                infer_var_info.entry(ty).or_default().self_in_trait = true;\n             }\n         }\n \n@@ -193,8 +193,8 @@ impl<'tcx> Inherited<'tcx> {\n             // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n             // we need to make it into one.\n             if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n-                debug!(\"relationships: {:?}.output = true\", vid);\n-                relationships.entry(vid).or_default().output = true;\n+                debug!(\"infer_var_info: {:?}.output = true\", vid);\n+                infer_var_info.entry(vid).or_default().output = true;\n             }\n         }\n     }"}, {"sha": "f83bceca3b53ba27bdcab4885698a9ea0193c60d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6155a803805acaddd2518f09c2da70fbc320b274/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6155a803805acaddd2518f09c2da70fbc320b274", "patch": "@@ -2619,7 +2619,7 @@ impl<'tcx> fmt::Debug for SymbolName<'tcx> {\n }\n \n #[derive(Debug, Default, Copy, Clone)]\n-pub struct FoundRelationships {\n+pub struct InferVarInfo {\n     /// This is true if we identified that this Ty (`?T`) is found in a `?T: Foo`\n     /// obligation, where:\n     ///"}]}