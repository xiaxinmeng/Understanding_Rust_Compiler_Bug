{"sha": "7d3284ebc18f3d4087d71352421726b2240a7c20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzI4NGViYzE4ZjNkNDA4N2Q3MTM1MjQyMTcyNmIyMjQwYTdjMjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-09T23:25:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-21T14:13:26Z"}, "message": "Create a new method to run coercion inside probe", "tree": {"sha": "bb5a1583238ff48e4421631419831d3cc51ffbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5a1583238ff48e4421631419831d3cc51ffbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3284ebc18f3d4087d71352421726b2240a7c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3284ebc18f3d4087d71352421726b2240a7c20", "html_url": "https://github.com/rust-lang/rust/commit/7d3284ebc18f3d4087d71352421726b2240a7c20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3284ebc18f3d4087d71352421726b2240a7c20/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe3a9a8f123fa759d35000bfbfb623167a76409", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe3a9a8f123fa759d35000bfbfb623167a76409", "html_url": "https://github.com/rust-lang/rust/commit/8fe3a9a8f123fa759d35000bfbfb623167a76409"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "a769b55c520baa159af2e5330d4f48ea12f93626", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=7d3284ebc18f3d4087d71352421726b2240a7c20", "patch": "@@ -65,8 +65,8 @@ use check::{Diverges, FnCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk, TypeTrace};\n-use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n+use rustc::infer::type_variable::{TypeVariableOrigin};\n+use rustc::traits::{self, /*FulfillmentContext,*/ ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::{self, LvaluePreference, TypeAndMut,\n                 Ty, ClosureSubsts};\n@@ -78,6 +78,7 @@ use errors::DiagnosticBuilder;\n use syntax::abi;\n use syntax::feature_gate;\n use syntax::ptr::P;\n+use syntax_pos;\n \n use std::collections::VecDeque;\n use std::ops::Deref;\n@@ -722,6 +723,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         Ok(target)\n     }\n \n+    /// Same as `try_coerce()`, but without side-effects.\n+    pub fn can_coerce(&self,\n+                      expr_ty: Ty<'tcx>,\n+                      target: Ty<'tcx>)\n+                      -> bool {\n+        // FIXME: This is a hack, but coercion wasn't made to be run\n+        // in a probe. It leaks obligations and bounds and things out\n+        // into the environment. For now we just save-and-restore the\n+        // fulfillment context.\n+        /*let saved_fulfillment_cx =\n+            mem::replace(\n+                &mut *self.inh.fulfillment_cx.borrow_mut(),\n+                FulfillmentContext::new());*/\n+        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        debug!(\"coercion::can({:?} -> {:?})\", source, target);\n+\n+        let cause = self.cause(syntax_pos::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n+        let coerce = Coerce::new(self, cause);\n+        let result = self.probe(|_| coerce.coerce::<hir::Expr>(&[], source, target)).is_ok();\n+\n+        //*self.inh.fulfillment_cx.borrow_mut() = saved_fulfillment_cx;\n+\n+        result\n+    }\n+\n     /// Given some expressions, their known unified type and another expression,\n     /// tries to unify the types, potentially inserting coercions on any of the\n     /// provided expressions and returns their LUB (aka \"common supertype\")."}, {"sha": "0fd98232becfa03f7722b14628050b6936d19b69", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=7d3284ebc18f3d4087d71352421726b2240a7c20", "patch": "@@ -10,16 +10,14 @@\n \n \n use check::FnCtxt;\n-use rustc::ty::Ty;\n-use rustc::infer::{InferOk, TypeOrigin};\n+use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n-use rustc::ty;\n \n use syntax::ast;\n use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::ty::{self, AssociatedItem};\n+use rustc::ty::{self, Ty, AssociatedItem};\n use errors::DiagnosticBuilder;\n \n use super::method::probe;\n@@ -81,24 +79,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Err(e) = self.try_coerce(expr, checked_ty, self.diverges.get(), expected) {\n             let cause = self.misc(expr.span);\n             let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n-            let suggestions = if let Some(suggestions) = self.check_ref(expr,\n-                                                                        checked_ty,\n-                                                                        expected) {\n-                suggestions\n+            let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n+            if let Some(suggestion) = self.check_ref(expr,\n+                                                     checked_ty,\n+                                                     expected) {\n+                err.help(&suggestion);\n             } else {\n                 let mode = probe::Mode::MethodCall;\n-                self.probe_for_return_type(syntax_pos::DUMMY_SP,\n-                                           mode,\n-                                           expected,\n-                                           checked_ty,\n-                                           ast::DUMMY_NODE_ID)\n+                let suggestions = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n+                                                             mode,\n+                                                             expected,\n+                                                             checked_ty,\n+                                                             ast::DUMMY_NODE_ID);\n+                if suggestions.len() > 0 {\n+                    err.help(&format!(\"here are some functions which \\\n+                                       might fulfill your needs:\\n - {}\",\n+                                      self.get_best_match(&suggestions).join(\"\\n\")));\n+                }\n             }\n-            let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n-            if suggestions.len() > 0 {\n-                err.help(&format!(\"here are some functions which \\\n-                                   might fulfill your needs:\\n{}\",\n-                                  self.get_best_match(&suggestions).join(\"\\n\")));\n-            };\n             err.emit();\n         }\n     }\n@@ -188,7 +186,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                        self.tcx.mk_region(ty::ReStatic),\n                                                        checked_ty),\n                 };\n-                if self.try_coerce(expr, ref_ty, expected).is_ok() {\n+                if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n                         return Some(format!(\"try with `{}{}`\",\n                                             match mutability.mutbl {"}, {"sha": "847a82c082651f1a4550cc7bfc34aefa873f2fa3", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=7d3284ebc18f3d4087d71352421726b2240a7c20", "patch": "@@ -17,9 +17,7 @@ impl Trait for Foo {}\n \n pub fn main() {\n     let x: Box<Trait> = Box::new(Foo);\n-    let _y: &Trait = x; //~  ERROR mismatched types\n+    let _y: &Trait = x; //~ ERROR E0308\n                         //~| expected type `&Trait`\n                         //~| found type `std::boxed::Box<Trait>`\n-                        //~| expected &Trait, found box\n-                        //~| ERROR the trait bound `Box<Trait>: Trait` is not satisfied\n }"}, {"sha": "883c16b0895816076c8326de14e232ea9154ca74", "filename": "src/test/compile-fail/dst-bad-coercions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs?ref=7d3284ebc18f3d4087d71352421726b2240a7c20", "patch": "@@ -23,13 +23,11 @@ pub fn main() {\n     let x: *const S = &S;\n     let y: &S = x; //~ ERROR mismatched types\n     let y: &T = x; //~ ERROR mismatched types\n-                   //~^ ERROR the trait bound `*const S: T` is not satisfied\n \n     // Test that we cannot convert from *-ptr to &S and &T (mut version)\n     let x: *mut S = &mut S;\n     let y: &S = x; //~ ERROR mismatched types\n     let y: &T = x; //~ ERROR mismatched types\n-                   //~^ ERROR the trait bound `*mut S: T` is not satisfied\n \n     // Test that we cannot convert an immutable ptr to a mutable one using *-ptrs\n     let x: &mut T = &S; //~ ERROR mismatched types"}, {"sha": "1e444a6bebf9b23b573465a7090f60b174d52fa3", "filename": "src/test/compile-fail/issue-11374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3284ebc18f3d4087d71352421726b2240a7c20/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs?ref=7d3284ebc18f3d4087d71352421726b2240a7c20", "patch": "@@ -33,5 +33,5 @@ pub fn for_stdin<'a>() -> Container<'a> {\n fn main() {\n     let mut c = for_stdin();\n     let mut v = Vec::new();\n-    c.read_to(v); //~ ERROR mismatched types\n+    c.read_to(v); //~ ERROR E0308\n }"}]}