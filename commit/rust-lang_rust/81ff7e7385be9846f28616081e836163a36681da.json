{"sha": "81ff7e7385be9846f28616081e836163a36681da", "node_id": "C_kwDOAAsO6NoAKDgxZmY3ZTczODViZTk4NDZmMjg2MTYwODFlODM2MTYzYTM2NjgxZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T22:24:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T22:24:46Z"}, "message": "Auto merge of #103298 - ferrocene:pa-compile-flags-last, r=jyn514\n\nEnsure that compile-flags arguments are the last in UI tests\n\nBefore this PR, compiletest would add `-L path/to/aux` at the end of the rustc flags, even after the custom ones set with the compile-flags header comment. This made it impossible to check how rustc would behave when a flag requiring an argument was passed without the argument, because the argument would become `-L`.\n\nThis PR fixes that by adding the `-L path/to/aux` before the arguments defined in compile-flags, at least for UI tests. Other test suites might either be fixed as well by this change, or still present the old behavior (`-L` is now always passed before, but other tests suites might add additional flags after the custom ones).", "tree": {"sha": "9cc9a9bc5640d53a184f899ee99c5c6ca36ebff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc9a9bc5640d53a184f899ee99c5c6ca36ebff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ff7e7385be9846f28616081e836163a36681da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ff7e7385be9846f28616081e836163a36681da", "html_url": "https://github.com/rust-lang/rust/commit/81ff7e7385be9846f28616081e836163a36681da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ff7e7385be9846f28616081e836163a36681da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09508489efc223287731fe8abbd2a81bbf7adf8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09508489efc223287731fe8abbd2a81bbf7adf8e", "html_url": "https://github.com/rust-lang/rust/commit/09508489efc223287731fe8abbd2a81bbf7adf8e"}, {"sha": "4c55b29349e9367daad49317cef642c41d5608ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c55b29349e9367daad49317cef642c41d5608ac", "html_url": "https://github.com/rust-lang/rust/commit/4c55b29349e9367daad49317cef642c41d5608ac"}], "stats": {"total": 119, "additions": 80, "deletions": 39}, "files": [{"sha": "232df10f1a844a19220f7c231110390db2dfd84b", "filename": "src/test/ui/compiletest-self-test/compile-flags-last.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.rs?ref=81ff7e7385be9846f28616081e836163a36681da", "patch": "@@ -0,0 +1,7 @@\n+// Check that the arguments provided through `// compile-flags` are added last to the command line\n+// in UI tests. To ensure that we invoke rustc with a flag that expects an argument withut actually\n+// providing it. If the compile-flags are not last, the test will fail as rustc will interpret the\n+// next flag as the argument of this flag.\n+//\n+// compile-flags: --cap-lints\n+// error-pattern: Argument to option 'cap-lints' missing"}, {"sha": "d8d40a7d9f11246dee98fc3361a96dbf9a4e0885", "filename": "src/test/ui/compiletest-self-test/compile-flags-last.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fcompile-flags-last.stderr?ref=81ff7e7385be9846f28616081e836163a36681da", "patch": "@@ -0,0 +1,2 @@\n+error: Argument to option 'cap-lints' missing\n+"}, {"sha": "88e811583161c1a27b06f9568fe1dc65a7da3d55", "filename": "src/test/ui/compiletest-self-test/ui-testing-optout.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.rs?ref=81ff7e7385be9846f28616081e836163a36681da", "previous_filename": "src/test/ui/ui-testing-optout.rs"}, {"sha": "652c472c0bcfe54c21756cd8fc522cfb1aa25bcb", "filename": "src/test/ui/compiletest-self-test/ui-testing-optout.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ff7e7385be9846f28616081e836163a36681da/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompiletest-self-test%2Fui-testing-optout.stderr?ref=81ff7e7385be9846f28616081e836163a36681da", "previous_filename": "src/test/ui/ui-testing-optout.stderr"}, {"sha": "8d8ca101cd037faed8aa1cc80bfb352a848e90ab", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 71, "deletions": 39, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/81ff7e7385be9846f28616081e836163a36681da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff7e7385be9846f28616081e836163a36681da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=81ff7e7385be9846f28616081e836163a36681da", "patch": "@@ -208,11 +208,13 @@ enum WillExecute {\n     Disabled,\n }\n \n-/// Should `--emit metadata` be used?\n+/// What value should be passed to `--emit`?\n #[derive(Copy, Clone)]\n-enum EmitMetadata {\n-    Yes,\n-    No,\n+enum Emit {\n+    None,\n+    Metadata,\n+    LlvmIr,\n+    Asm,\n }\n \n impl<'test> TestCx<'test> {\n@@ -412,7 +414,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         let should_run = self.run_if_enabled();\n-        let mut proc_res = self.compile_test(should_run, EmitMetadata::No);\n+        let mut proc_res = self.compile_test(should_run, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -658,7 +660,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -778,7 +780,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compiler_run_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compiler_run_result = self.compile_test(should_run, Emit::None);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -1010,7 +1012,7 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1426,21 +1428,21 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn should_emit_metadata(&self, pm: Option<PassMode>) -> EmitMetadata {\n+    fn should_emit_metadata(&self, pm: Option<PassMode>) -> Emit {\n         match (pm, self.props.fail_mode, self.config.mode) {\n-            (Some(PassMode::Check), ..) | (_, Some(FailMode::Check), Ui) => EmitMetadata::Yes,\n-            _ => EmitMetadata::No,\n+            (Some(PassMode::Check), ..) | (_, Some(FailMode::Check), Ui) => Emit::Metadata,\n+            _ => Emit::None,\n         }\n     }\n \n-    fn compile_test(&self, will_execute: WillExecute, emit_metadata: EmitMetadata) -> ProcRes {\n-        self.compile_test_general(will_execute, emit_metadata, self.props.local_pass_mode())\n+    fn compile_test(&self, will_execute: WillExecute, emit: Emit) -> ProcRes {\n+        self.compile_test_general(will_execute, emit, self.props.local_pass_mode())\n     }\n \n     fn compile_test_general(\n         &self,\n         will_execute: WillExecute,\n-        emit_metadata: EmitMetadata,\n+        emit: Emit,\n         local_pm: Option<PassMode>,\n     ) -> ProcRes {\n         // Only use `make_exe_name` when the test ends up being executed.\n@@ -1472,10 +1474,13 @@ impl<'test> TestCx<'test> {\n             _ => AllowUnused::No,\n         };\n \n-        let mut rustc =\n-            self.make_compile_args(&self.testpaths.file, output_file, emit_metadata, allow_unused);\n-\n-        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n+        let rustc = self.make_compile_args(\n+            &self.testpaths.file,\n+            output_file,\n+            emit,\n+            allow_unused,\n+            LinkToAux::Yes,\n+        );\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -1702,8 +1707,13 @@ impl<'test> TestCx<'test> {\n         // Create the directory for the stdout/stderr files.\n         create_dir_all(aux_cx.output_base_dir()).unwrap();\n         let input_file = &aux_testpaths.file;\n-        let mut aux_rustc =\n-            aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n+        let mut aux_rustc = aux_cx.make_compile_args(\n+            input_file,\n+            aux_output,\n+            Emit::None,\n+            AllowUnused::No,\n+            LinkToAux::No,\n+        );\n \n         for key in &aux_props.unset_rustc_env {\n             aux_rustc.env_remove(key);\n@@ -1831,8 +1841,9 @@ impl<'test> TestCx<'test> {\n         &self,\n         input_file: &Path,\n         output_file: TargetLocation,\n-        emit_metadata: EmitMetadata,\n+        emit: Emit,\n         allow_unused: AllowUnused,\n+        link_to_aux: LinkToAux,\n     ) -> Command {\n         let is_aux = input_file.components().map(|c| c.as_os_str()).any(|c| c == \"auxiliary\");\n         let is_rustdoc = self.is_rustdoc() && !is_aux;\n@@ -1947,8 +1958,18 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if let (false, EmitMetadata::Yes) = (is_rustdoc, emit_metadata) {\n-            rustc.args(&[\"--emit\", \"metadata\"]);\n+        match emit {\n+            Emit::None => {}\n+            Emit::Metadata if is_rustdoc => {}\n+            Emit::Metadata => {\n+                rustc.args(&[\"--emit\", \"metadata\"]);\n+            }\n+            Emit::LlvmIr => {\n+                rustc.args(&[\"--emit\", \"llvm-ir\"]);\n+            }\n+            Emit::Asm => {\n+                rustc.args(&[\"--emit\", \"asm\"]);\n+            }\n         }\n \n         if !is_rustdoc {\n@@ -2014,6 +2035,10 @@ impl<'test> TestCx<'test> {\n             rustc.arg(\"-Ctarget-feature=-crt-static\");\n         }\n \n+        if let LinkToAux::Yes = link_to_aux {\n+            rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n+        }\n+\n         rustc.args(&self.props.compile_flags);\n \n         rustc\n@@ -2205,13 +2230,15 @@ impl<'test> TestCx<'test> {\n     // codegen tests (using FileCheck)\n \n     fn compile_test_and_save_ir(&self) -> ProcRes {\n-        let aux_dir = self.aux_output_dir_name();\n-\n         let output_file = TargetLocation::ThisDirectory(self.output_base_dir());\n         let input_file = &self.testpaths.file;\n-        let mut rustc =\n-            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n-        rustc.arg(\"-L\").arg(aux_dir).arg(\"--emit=llvm-ir\");\n+        let rustc = self.make_compile_args(\n+            input_file,\n+            output_file,\n+            Emit::LlvmIr,\n+            AllowUnused::No,\n+            LinkToAux::Yes,\n+        );\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -2223,14 +2250,11 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisFile(output_path.clone());\n         let input_file = &self.testpaths.file;\n-        let mut rustc =\n-            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n-\n-        rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n \n+        let mut emit = Emit::None;\n         match self.props.assembly_output.as_ref().map(AsRef::as_ref) {\n             Some(\"emit-asm\") => {\n-                rustc.arg(\"--emit=asm\");\n+                emit = Emit::Asm;\n             }\n \n             Some(\"ptx-linker\") => {\n@@ -2241,6 +2265,9 @@ impl<'test> TestCx<'test> {\n             None => self.fatal(\"missing 'assembly-output' header\"),\n         }\n \n+        let rustc =\n+            self.make_compile_args(input_file, output_file, emit, AllowUnused::No, LinkToAux::Yes);\n+\n         (self.compose_and_run_compiler(rustc, None), output_path)\n     }\n \n@@ -2365,10 +2392,10 @@ impl<'test> TestCx<'test> {\n         let mut rustc = new_rustdoc.make_compile_args(\n             &new_rustdoc.testpaths.file,\n             output_file,\n-            EmitMetadata::No,\n+            Emit::None,\n             AllowUnused::Yes,\n+            LinkToAux::Yes,\n         );\n-        rustc.arg(\"-L\").arg(&new_rustdoc.aux_output_dir_name());\n         new_rustdoc.build_all_auxiliary(&mut rustc);\n \n         let proc_res = new_rustdoc.document(&compare_dir);\n@@ -2641,7 +2668,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test(WillExecute::No, EmitMetadata::No);\n+        let proc_res = self.compile_test(WillExecute::No, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -3154,7 +3181,7 @@ impl<'test> TestCx<'test> {\n         if let Some(FailMode::Build) = self.props.fail_mode {\n             // Make sure a build-fail test cannot fail due to failing analysis (e.g. typeck).\n             let pm = Some(PassMode::Check);\n-            let proc_res = self.compile_test_general(WillExecute::No, EmitMetadata::Yes, pm);\n+            let proc_res = self.compile_test_general(WillExecute::No, Emit::Metadata, pm);\n             self.check_if_test_should_compile(&proc_res, pm);\n         }\n \n@@ -3312,13 +3339,13 @@ impl<'test> TestCx<'test> {\n         if self.props.run_rustfix && self.config.compare_mode.is_none() {\n             // And finally, compile the fixed code and make sure it both\n             // succeeds and has no diagnostics.\n-            let mut rustc = self.make_compile_args(\n+            let rustc = self.make_compile_args(\n                 &self.testpaths.file.with_extension(UI_FIXED),\n                 TargetLocation::ThisFile(self.make_exe_name()),\n                 emit_metadata,\n                 AllowUnused::No,\n+                LinkToAux::Yes,\n             );\n-            rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n             let res = self.compose_and_run_compiler(rustc, None);\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n@@ -3852,3 +3879,8 @@ enum AllowUnused {\n     Yes,\n     No,\n }\n+\n+enum LinkToAux {\n+    Yes,\n+    No,\n+}"}]}