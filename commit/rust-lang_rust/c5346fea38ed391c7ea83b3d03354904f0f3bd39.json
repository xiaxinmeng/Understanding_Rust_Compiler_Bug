{"sha": "c5346fea38ed391c7ea83b3d03354904f0f3bd39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MzQ2ZmVhMzhlZDM5MWM3ZWE4M2IzZDAzMzU0OTA0ZjBmM2JkMzk=", "commit": {"author": {"name": "Le\u0301o Testard", "email": "leo.testard@gmail.com", "date": "2013-10-21T09:16:58Z"}, "committer": {"name": "Le\u0301o Testard", "email": "leo.testard@gmail.com", "date": "2013-10-21T12:04:29Z"}, "message": "Add a feature flag for ASM", "tree": {"sha": "00946f20e835e58b9c42ecc5fc91b7f956ab58e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00946f20e835e58b9c42ecc5fc91b7f956ab58e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5346fea38ed391c7ea83b3d03354904f0f3bd39", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5346fea38ed391c7ea83b3d03354904f0f3bd39", "html_url": "https://github.com/rust-lang/rust/commit/c5346fea38ed391c7ea83b3d03354904f0f3bd39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5346fea38ed391c7ea83b3d03354904f0f3bd39/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424c171da5e9881f3d5588f22c3794b53b2695e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/424c171da5e9881f3d5588f22c3794b53b2695e1", "html_url": "https://github.com/rust-lang/rust/commit/424c171da5e9881f3d5588f22c3794b53b2695e1"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "0f1d527163d546530f189652f5ced7dba4b7b33a", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=c5346fea38ed391c7ea83b3d03354904f0f3bd39", "patch": "@@ -34,6 +34,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"macro_rules\", Active),\n     (\"struct_variant\", Active),\n     (\"once_fns\", Active),\n+    (\"asm\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -108,26 +109,29 @@ impl Visitor<()> for Context {\n                 }\n             }\n \n-            ast::item_mac(ref mac) => {\n-                match mac.node {\n-                    ast::mac_invoc_tt(ref path, _, _) => {\n-                        let rules = self.sess.ident_of(\"macro_rules\");\n-                        if path.segments.last().identifier == rules {\n-                            self.gate_feature(\"macro_rules\", i.span,\n-                                              \"macro definitions are not \\\n-                                               stable enough for use and are \\\n-                                               subject to change\");\n-                        }\n-                    }\n-                }\n-            }\n-\n             _ => {}\n         }\n \n         visit::walk_item(self, i, ());\n     }\n \n+    fn visit_mac(&mut self, macro: &ast::mac, _: ()) {\n+        let ast::mac_invoc_tt(ref path, _, _) = macro.node;\n+\n+        if path.segments.last().identifier == self.sess.ident_of(\"macro_rules\") {\n+            self.gate_feature(\"macro_rules\", path.span, \"macro definitions are \\\n+                not stable enough for use and are subject to change\");\n+        }\n+\n+        else if path.segments.last().identifier == self.sess.ident_of(\"asm\") {\n+            // NOTE: remove the false once the ASM feature is in the next snapshot\n+            if false {\n+                self.gate_feature(\"asm\", path.span, \"inline assembly is not \\\n+                    stable enough for use and is subject to change\");\n+            }\n+        }\n+    }\n+\n     fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n         match t.node {\n             ast::ty_closure(closure) if closure.onceness == ast::Once => {"}, {"sha": "5d50833ff31685d5795d7be779c0b3102ae04f4a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c5346fea38ed391c7ea83b3d03354904f0f3bd39", "patch": "@@ -90,6 +90,7 @@ pub trait Visitor<E:Clone> {\n         walk_struct_def(self, s, i, g, n, e)\n     }\n     fn visit_struct_field(&mut self, s:@struct_field, e:E) { walk_struct_field(self, s, e) }\n+    fn visit_mac(&mut self, m:&mac, e:E) { walk_mac(self, m, e); }\n }\n \n impl<E:Clone> Visitor<E> for @mut Visitor<E> {\n@@ -150,6 +151,9 @@ impl<E:Clone> Visitor<E> for @mut Visitor<E> {\n     fn visit_struct_field(&mut self, a:@struct_field, e:E) {\n         (*self).visit_struct_field(a, e)\n     }\n+    fn visit_mac(&mut self, macro:&mac, e:E) {\n+        (*self).visit_mac(macro, e);\n+    }\n }\n \n pub fn walk_crate<E:Clone, V:Visitor<E>>(visitor: &mut V, crate: &Crate, env: E) {\n@@ -247,7 +251,7 @@ pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n                 visitor.visit_trait_method(method, env.clone())\n             }\n         }\n-        item_mac(ref macro) => walk_mac(visitor, macro, env),\n+        item_mac(ref macro) => visitor.visit_mac(macro, env),\n     }\n }\n \n@@ -507,7 +511,7 @@ pub fn walk_stmt<E:Clone, V:Visitor<E>>(visitor: &mut V, statement: &Stmt, env:\n         StmtExpr(expression, _) | StmtSemi(expression, _) => {\n             visitor.visit_expr(expression, env)\n         }\n-        StmtMac(ref macro, _) => walk_mac(visitor, macro, env),\n+        StmtMac(ref macro, _) => visitor.visit_mac(macro, env),\n     }\n }\n \n@@ -644,7 +648,7 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n             walk_expr_opt(visitor, optional_expression, env.clone())\n         }\n         ExprLogLevel => {}\n-        ExprMac(ref macro) => walk_mac(visitor, macro, env.clone()),\n+        ExprMac(ref macro) => visitor.visit_mac(macro, env.clone()),\n         ExprParen(subexpression) => {\n             visitor.visit_expr(subexpression, env.clone())\n         }"}, {"sha": "47f1574273b89d4949dfe0496190c649d630df18", "filename": "src/test/compile-fail/asm-gated.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5346fea38ed391c7ea83b3d03354904f0f3bd39/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs?ref=c5346fea38ed391c7ea83b3d03354904f0f3bd39", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\"); //~ ERROR inline assembly is not stable enough\n+    }\n+}"}]}