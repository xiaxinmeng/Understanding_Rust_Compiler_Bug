{"sha": "24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZmI3MTliOGMwY2Y1YzUwODc5OWY1MGZlZmRmM2Q3YThjZjBlZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T14:12:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T14:12:55Z"}, "message": "auto merge of #5932 : huonw/rust/core-str-iterator, r=thestinger", "tree": {"sha": "a8b3e5e9c564b547029cd99f601c094eba76e809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8b3e5e9c564b547029cd99f601c094eba76e809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "html_url": "https://github.com/rust-lang/rust/commit/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c8278746de3df60ef9c3002f69c9511327a10f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8278746de3df60ef9c3002f69c9511327a10f2", "html_url": "https://github.com/rust-lang/rust/commit/2c8278746de3df60ef9c3002f69c9511327a10f2"}, {"sha": "c967f2bb1e564cb4344ac3df87c9b52399f65d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c967f2bb1e564cb4344ac3df87c9b52399f65d7d", "html_url": "https://github.com/rust-lang/rust/commit/c967f2bb1e564cb4344ac3df87c9b52399f65d7d"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "7cc3a694c5608908898f6244340f7f416ead0d45", "filename": "src/libcore/str.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=24fb719b8c0cf5c508799f50fefdf3d7a8cf0ed7", "patch": "@@ -24,6 +24,7 @@ use clone::Clone;\n use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n+use iterator::Iterator;\n use ptr;\n use str;\n use u8;\n@@ -2358,6 +2359,10 @@ pub trait StrSlice<'self> {\n     fn any(&self, it: &fn(char) -> bool) -> bool;\n     fn contains<'a>(&self, needle: &'a str) -> bool;\n     fn contains_char(&self, needle: char) -> bool;\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    fn char_iter(&self) -> StrCharIterator<'self>;\n     fn each(&self, it: &fn(u8) -> bool);\n     fn eachi(&self, it: &fn(uint, u8) -> bool);\n     fn each_reverse(&self, it: &fn(u8) -> bool);\n@@ -2419,6 +2424,18 @@ impl<'self> StrSlice<'self> for &'self str {\n     fn contains_char(&self, needle: char) -> bool {\n         contains_char(*self, needle)\n     }\n+\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    #[inline]\n+    fn char_iter(&self) -> StrCharIterator<'self> {\n+        StrCharIterator {\n+            index: 0,\n+            string: *self\n+        }\n+    }\n+\n     /// Iterate over the bytes in a string\n     #[inline]\n     fn each(&self, it: &fn(u8) -> bool) { each(*self, it) }\n@@ -2609,6 +2626,30 @@ impl Clone for ~str {\n     }\n }\n \n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub struct StrCharIterator<'self> {\n+    priv index: uint,\n+    priv string: &'self str,\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+impl<'self> Iterator<char> for StrCharIterator<'self> {\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        if self.index < self.string.len() {\n+            let CharRange {ch, next} = char_range_at(self.string, self.index);\n+            self.index = next;\n+            Some(ch)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use char;\n@@ -3901,4 +3942,19 @@ mod tests {\n         assert!(char_range_at_reverse(\"abc\", 0).next == 0);\n     }\n \n+    #[test]\n+    fn test_iterator() {\n+        use iterator::*;\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n+\n+        let mut pos = 0;\n+        let mut it = s.char_iter();\n+\n+        for it.advance |c| {\n+            assert_eq!(c, v[pos]);\n+            pos += 1;\n+        }\n+        assert_eq!(pos, v.len());\n+    }\n }"}]}