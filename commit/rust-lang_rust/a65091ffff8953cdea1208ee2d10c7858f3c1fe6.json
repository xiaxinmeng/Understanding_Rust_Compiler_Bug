{"sha": "a65091ffff8953cdea1208ee2d10c7858f3c1fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTA5MWZmZmY4OTUzY2RlYTEyMDhlZTJkMTBjNzg1OGYzYzFmZTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-15T17:58:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-18T07:41:28Z"}, "message": "Rename generated lifetime.", "tree": {"sha": "a3ef6639693febeb7455ef2782394316c3b406fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ef6639693febeb7455ef2782394316c3b406fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65091ffff8953cdea1208ee2d10c7858f3c1fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65091ffff8953cdea1208ee2d10c7858f3c1fe6", "html_url": "https://github.com/rust-lang/rust/commit/a65091ffff8953cdea1208ee2d10c7858f3c1fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65091ffff8953cdea1208ee2d10c7858f3c1fe6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "html_url": "https://github.com/rust-lang/rust/commit/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "23f30bcad2b632411c108128b70da979a3a17a58", "filename": "src/librustc_macros/src/lift.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a65091ffff8953cdea1208ee2d10c7858f3c1fe6/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65091ffff8953cdea1208ee2d10c7858f3c1fe6/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flift.rs?ref=a65091ffff8953cdea1208ee2d10c7858f3c1fe6", "patch": "@@ -7,19 +7,19 @@ pub fn lift_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStre\n     s.add_bounds(synstructure::AddBounds::Generics);\n \n     let tcx: syn::Lifetime = parse_quote!('tcx);\n-    let newtcx: syn::GenericParam = parse_quote!('__newtcx);\n+    let newtcx: syn::GenericParam = parse_quote!('__lifted);\n \n     let lifted = {\n         let ast = s.ast();\n         let ident = &ast.ident;\n \n-        // Replace `'tcx` lifetime by the `'__newtcx` lifetime\n+        // Replace `'tcx` lifetime by the `'__lifted` lifetime\n         let (_, generics, _) = ast.generics.split_for_impl();\n         let mut generics : syn::AngleBracketedGenericArguments = syn::parse_quote!{ #generics };\n         for arg in generics.args.iter_mut() {\n             match arg {\n                 syn::GenericArgument::Lifetime(l) if *l == tcx => {\n-                    *arg = parse_quote!('__newtcx);\n+                    *arg = parse_quote!('__lifted);\n                 },\n                 syn::GenericArgument::Type(t) => {\n                     *arg = syn::parse_quote!{ #t::Lifted };\n@@ -40,10 +40,10 @@ pub fn lift_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStre\n     });\n \n     s.add_impl_generic(newtcx);\n-    s.bound_impl(quote!(::rustc::ty::Lift<'__newtcx>), quote!{\n+    s.bound_impl(quote!(::rustc::ty::Lift<'__lifted>), quote!{\n         type Lifted = #lifted;\n \n-        fn lift_to_tcx(&self, __tcx: ::rustc::ty::TyCtxt<'__newtcx>) -> Option<#lifted> {\n+        fn lift_to_tcx(&self, __tcx: ::rustc::ty::TyCtxt<'__lifted>) -> Option<#lifted> {\n             Some(match *self { #body })\n         }\n     })"}]}