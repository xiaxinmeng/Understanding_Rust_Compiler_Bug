{"sha": "141fa859b87534846b7793d026342ffaf5ad4639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MWZhODU5Yjg3NTM0ODQ2Yjc3OTNkMDI2MzQyZmZhZjVhZDQ2Mzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-25T15:59:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-25T15:59:27Z"}, "message": "Rollup merge of #57734 - oli-obk:fixes_and_cleanups, r=pnkfelix\n\nFix evaluating trivial drop glue in constants\n\n```rust\nstruct A;\nimpl Drop for A {\n    fn drop(&mut self) {}\n}\n\nconst FOO: Option<A> = None;\n\nconst BAR: () = (FOO, ()).1;\n```\n\nwas erroring with\n\n```\nerror: any use of this value will cause an error\n --> src/lib.rs:9:1\n  |\n9 | const BAR: () = (FOO, ()).1;\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n  |                           |\n  |                           calling non-const function `std::ptr::real_drop_in_place::<(std::option::Option<A>, ())> - shim(Some((std::option::Option<A>, ())))`\n  |\n  = note: #[deny(const_err)] on by default\n\nerror: aborting due to previous error\n```\n\nbefore this PR. According to godbolt this last compiled successfully in 1.27", "tree": {"sha": "440eb006a6b4743ef1df6262b1b068a4142ec515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440eb006a6b4743ef1df6262b1b068a4142ec515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141fa859b87534846b7793d026342ffaf5ad4639", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSzJgCRBK7hj4Ov3rIwAAdHIIAAeL19QebdGECmDelhpN9jfo\n73R2mGMA+RfXEMv5oX/wpdWMI+IufOlu+NQoM31dSyekypLyRxWJTIH6dD+B0Tsg\ngW5uLE79Y/2Of2tJ5w8Mc7bPWUtUJo/ksSGUtEDprOfbtETv2du31cAKHOPwsLfN\n/znhPy1cZ2ZoKoDG+YOdDrxtKSthJ3FrfY29Fv/c7t2rNQWJszWVrENHwreEXfsU\nSEskSHI7nBhj0dalbn7kDWBwMmfaXHZhVisEXTU64m243GXYaS867ywGW8PD9X3G\npwf0CCNtxS30zGvwaWjqLeDCWPa26JoyudO5gpCK614+vEMbzCWB1/ZBhQLO8FI=\n=UoZ7\n-----END PGP SIGNATURE-----\n", "payload": "tree 440eb006a6b4743ef1df6262b1b068a4142ec515\nparent 7779bb9907c0a9f237bb99e5384c73ede9d0ba6e\nparent 506393eaaf912ece2d216de4b6e2fd7ca04a945d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548431967 +0100\ncommitter GitHub <noreply@github.com> 1548431967 +0100\n\nRollup merge of #57734 - oli-obk:fixes_and_cleanups, r=pnkfelix\n\nFix evaluating trivial drop glue in constants\n\n```rust\nstruct A;\nimpl Drop for A {\n    fn drop(&mut self) {}\n}\n\nconst FOO: Option<A> = None;\n\nconst BAR: () = (FOO, ()).1;\n```\n\nwas erroring with\n\n```\nerror: any use of this value will cause an error\n --> src/lib.rs:9:1\n  |\n9 | const BAR: () = (FOO, ()).1;\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n  |                           |\n  |                           calling non-const function `std::ptr::real_drop_in_place::<(std::option::Option<A>, ())> - shim(Some((std::option::Option<A>, ())))`\n  |\n  = note: #[deny(const_err)] on by default\n\nerror: aborting due to previous error\n```\n\nbefore this PR. According to godbolt this last compiled successfully in 1.27\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141fa859b87534846b7793d026342ffaf5ad4639", "html_url": "https://github.com/rust-lang/rust/commit/141fa859b87534846b7793d026342ffaf5ad4639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141fa859b87534846b7793d026342ffaf5ad4639/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7779bb9907c0a9f237bb99e5384c73ede9d0ba6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7779bb9907c0a9f237bb99e5384c73ede9d0ba6e", "html_url": "https://github.com/rust-lang/rust/commit/7779bb9907c0a9f237bb99e5384c73ede9d0ba6e"}, {"sha": "506393eaaf912ece2d216de4b6e2fd7ca04a945d", "url": "https://api.github.com/repos/rust-lang/rust/commits/506393eaaf912ece2d216de4b6e2fd7ca04a945d", "html_url": "https://github.com/rust-lang/rust/commit/506393eaaf912ece2d216de4b6e2fd7ca04a945d"}], "stats": {"total": 98, "additions": 68, "deletions": 30}, "files": [{"sha": "7111506e533cbe270890c8c98b63508bb3f80314", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -2937,16 +2937,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Given the DefId of an item, returns its MIR, borrowed immutably.\n-    /// Returns None if there is no MIR for the DefId\n-    pub fn maybe_optimized_mir(self, did: DefId) -> Option<&'gcx Mir<'gcx>> {\n-        if self.is_mir_available(did) {\n-            Some(self.optimized_mir(did))\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Get the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'gcx> {\n         if let Some(id) = self.hir().as_local_node_id(did) {"}, {"sha": "9ed480a9af5bb8b6b8f06ccf3b72f5dac4f48228", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -340,19 +340,22 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         ret: Option<mir::BasicBlock>,\n     ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>> {\n         debug!(\"eval_fn_call: {:?}\", instance);\n-        // Execution might have wandered off into other crates, so we cannot to a stability-\n-        // sensitive check here.  But we can at least rule out functions that are not const\n-        // at all.\n-        if !ecx.tcx.is_const_fn_raw(instance.def_id()) {\n-            // Some functions we support even if they are non-const -- but avoid testing\n-            // that for const fn!  We certainly do *not* want to actually call the fn\n-            // though, so be sure we return here.\n-            return if ecx.hook_fn(instance, args, dest)? {\n-                ecx.goto_block(ret)?; // fully evaluated and done\n-                Ok(None)\n-            } else {\n-                err!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n-            };\n+        // Only check non-glue functions\n+        if let ty::InstanceDef::Item(def_id) = instance.def {\n+            // Execution might have wandered off into other crates, so we cannot to a stability-\n+            // sensitive check here.  But we can at least rule out functions that are not const\n+            // at all.\n+            if !ecx.tcx.is_const_fn_raw(def_id) {\n+                // Some functions we support even if they are non-const -- but avoid testing\n+                // that for const fn!  We certainly do *not* want to actually call the fn\n+                // though, so be sure we return here.\n+                return if ecx.hook_fn(instance, args, dest)? {\n+                    ecx.goto_block(ret)?; // fully evaluated and done\n+                    Ok(None)\n+                } else {\n+                    err!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n+                };\n+            }\n         }\n         // This is a const fn. Call it.\n         Ok(Some(match ecx.load_mir(instance.def) {"}, {"sha": "34443bb353e0e4f1dfb54b2d8df884747713d789", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -273,11 +273,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n         trace!(\"load mir {:?}\", instance);\n         match instance {\n-            ty::InstanceDef::Item(def_id) => {\n-                self.tcx.maybe_optimized_mir(def_id).ok_or_else(||\n-                    EvalErrorKind::NoMirFor(self.tcx.item_path_str(def_id)).into()\n-                )\n-            }\n+            ty::InstanceDef::Item(def_id) => if self.tcx.is_mir_available(did) {\n+                Ok(self.tcx.optimized_mir(did))\n+            } else {\n+                err!(NoMirFor(self.tcx.item_path_str(def_id)))\n+            },\n             _ => Ok(self.tcx.instance_mir(instance)),\n         }\n     }"}, {"sha": "86a197ffb993ece641d6e19edd1f54e652eb32db", "filename": "src/test/ui/consts/drop_none.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+#![allow(dead_code)]\n+struct A;\n+impl Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+const FOO: Option<A> = None;\n+\n+const BAR: () = (FOO, ()).1;\n+\n+\n+fn main() {}"}, {"sha": "df6383b4fc2226b9bb384236fe61b89b5f5211ca", "filename": "src/test/ui/static/static-drop-scope.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -54,7 +54,19 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     (x, ()).1\n    |     ^^^^^^^ constant functions cannot evaluate destructors\n \n-error: aborting due to 8 previous errors\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:31:34\n+   |\n+LL | const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n+   |                                  ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:36:43\n+   |\n+LL | const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n+   |                                           ^^^^^^^^^^^ constants cannot evaluate destructors\n+\n+error: aborting due to 10 previous errors\n \n Some errors occurred: E0493, E0716.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "e5a9f2a40564419ec5da38a46e1b696bed7e8731", "filename": "src/test/ui/static/static-drop-scope.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -28,4 +28,12 @@ const fn const_drop2<T>(x: T) {\n     //~^ ERROR destructors cannot be evaluated at compile-time\n }\n \n+const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+const HELPER: Option<WithDtor> = Some(WithDtor);\n+\n+const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n fn main () {}"}, {"sha": "3e3032eb4fb60b4b6082b112538b60a73ccfc82c", "filename": "src/test/ui/static/static-drop-scope.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/141fa859b87534846b7793d026342ffaf5ad4639/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr?ref=141fa859b87534846b7793d026342ffaf5ad4639", "patch": "@@ -54,7 +54,19 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     (x, ()).1\n    |     ^^^^^^^ constant functions cannot evaluate destructors\n \n-error: aborting due to 8 previous errors\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:31:34\n+   |\n+LL | const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n+   |                                  ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:36:43\n+   |\n+LL | const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n+   |                                           ^^^^^^^^^^^ constants cannot evaluate destructors\n+\n+error: aborting due to 10 previous errors\n \n Some errors occurred: E0493, E0597.\n For more information about an error, try `rustc --explain E0493`."}]}