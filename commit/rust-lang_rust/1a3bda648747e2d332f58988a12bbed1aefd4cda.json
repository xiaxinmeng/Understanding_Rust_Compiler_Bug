{"sha": "1a3bda648747e2d332f58988a12bbed1aefd4cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhM2JkYTY0ODc0N2UyZDMzMmY1ODk4OGExMmJiZWQxYWVmZDRjZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-13T14:06:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-13T14:06:51Z"}, "message": "Miri: let push_frame hook also access and mutate the rest of the frame data", "tree": {"sha": "8a2d41b655196b56057e652c15b62bf3d9a797f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2d41b655196b56057e652c15b62bf3d9a797f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a3bda648747e2d332f58988a12bbed1aefd4cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3bda648747e2d332f58988a12bbed1aefd4cda", "html_url": "https://github.com/rust-lang/rust/commit/1a3bda648747e2d332f58988a12bbed1aefd4cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a3bda648747e2d332f58988a12bbed1aefd4cda/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00bd29e01c4042143d01681e45723a2052412b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00bd29e01c4042143d01681e45723a2052412b0", "html_url": "https://github.com/rust-lang/rust/commit/a00bd29e01c4042143d01681e45723a2052412b0"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "ac9ef803d3b6af6b2b75a5b79955c5f8529a8b14", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=1a3bda648747e2d332f58988a12bbed1aefd4cda", "patch": "@@ -13,8 +13,8 @@ use rustc_middle::mir::AssertMessage;\n use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n-    self, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind, OpTy,\n-    PlaceTy, Pointer, Scalar,\n+    self, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n+    OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -339,8 +339,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n     }\n \n     #[inline(always)]\n-    fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        Ok(())\n+    fn init_frame_extra(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n+        Ok(frame)\n     }\n \n     fn before_access_global("}, {"sha": "a0c6240a8a0ae444b4548014ff0e575ee2177ba4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1a3bda648747e2d332f58988a12bbed1aefd4cda", "patch": "@@ -159,6 +159,21 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     }\n }\n \n+impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n+    pub fn with_extra<Extra>(self, extra: Extra) -> Frame<'mir, 'tcx, Tag, Extra> {\n+        Frame {\n+            body: self.body,\n+            instance: self.instance,\n+            return_to_block: self.return_to_block,\n+            return_place: self.return_place,\n+            locals: self.locals,\n+            block: self.block,\n+            stmt: self.stmt,\n+            extra,\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<mir::SourceInfo> {\n@@ -586,8 +601,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ::log_settings::settings().indentation += 1;\n \n         // first push a stack frame so we have access to the local substs\n-        let extra = M::stack_push(self)?;\n-        self.stack.push(Frame {\n+        let pre_frame = Frame {\n             body,\n             block: Some(mir::START_BLOCK),\n             return_to_block,\n@@ -597,8 +611,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             locals: IndexVec::new(),\n             instance,\n             stmt: 0,\n-            extra,\n-        });\n+            extra: (),\n+        };\n+        let frame = M::init_frame_extra(self, pre_frame)?;\n+        self.stack.push(frame);\n \n         // don't allocate at all for trivial constants\n         if body.local_decls.len() > 1 {\n@@ -725,11 +741,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         // Cleanup: deallocate all locals that are backed by an allocation.\n-        for local in frame.locals {\n+        for local in &frame.locals {\n             self.deallocate_local(local.value)?;\n         }\n \n-        if M::stack_pop(self, frame.extra, unwinding)? == StackPopJump::NoJump {\n+        let return_place = frame.return_place;\n+        if M::after_stack_pop(self, frame, unwinding)? == StackPopJump::NoJump {\n             // The hook already did everything.\n             // We want to skip the `info!` below, hence early return.\n             return Ok(());\n@@ -743,7 +760,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Follow the normal return edge.\n             // Validate the return value. Do this after deallocating so that we catch dangling\n             // references.\n-            if let Some(return_place) = frame.return_place {\n+            if let Some(return_place) = return_place {\n                 if M::enforce_validity(self) {\n                     // Data got changed, better make sure it matches the type!\n                     // It is still possible that the return place held invalid data while"}, {"sha": "ffda0334a508f323b6697c5fa881d19240a08328", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=1a3bda648747e2d332f58988a12bbed1aefd4cda", "patch": "@@ -279,13 +279,16 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         Ok(())\n     }\n \n-    /// Called immediately before a new stack frame got pushed.\n-    fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, Self::FrameExtra>;\n+    /// Called immediately before a new stack frame gets pushed.\n+    fn init_frame_extra(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx, Self::PointerTag>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>>;\n \n-    /// Called immediately after a stack frame gets popped\n-    fn stack_pop(\n+    /// Called immediately after a stack frame got popped, but before jumping back to the caller.\n+    fn after_stack_pop(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _extra: Self::FrameExtra,\n+        _frame: Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>,\n         _unwinding: bool,\n     ) -> InterpResult<'tcx, StackPopJump> {\n         // By default, we do not support unwinding from panics"}, {"sha": "ed5c2543ec6bba115c7ac6dd8cf7131732e0185a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3bda648747e2d332f58988a12bbed1aefd4cda/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1a3bda648747e2d332f58988a12bbed1aefd4cda", "patch": "@@ -287,8 +287,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     #[inline(always)]\n-    fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        Ok(())\n+    fn init_frame_extra(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n+        Ok(frame)\n     }\n }\n "}]}