{"sha": "2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjI1ZDgyMjhiNTgxYWI2Y2Q5Y2ZlMWE5NjgwYTFlZjU0MDg5NzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-21T15:31:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-21T15:31:48Z"}, "message": "Merge pull request #2165 from sinkuu/typo\n\nFix typo", "tree": {"sha": "b4767cc77b26a1eb561ae695abb329c82a54d9cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4767cc77b26a1eb561ae695abb329c82a54d9cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "html_url": "https://github.com/rust-lang/rust/commit/2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f225d8228b581ab6cd9cfe1a9680a1ef5408973/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76bb82107d3e242be0b2674432a5d95155c5e4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/76bb82107d3e242be0b2674432a5d95155c5e4c5", "html_url": "https://github.com/rust-lang/rust/commit/76bb82107d3e242be0b2674432a5d95155c5e4c5"}, {"sha": "00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "html_url": "https://github.com/rust-lang/rust/commit/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "44aab3917c788349b01a7f604eda676ee3ef674d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f225d8228b581ab6cd9cfe1a9680a1ef5408973/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f225d8228b581ab6cd9cfe1a9680a1ef5408973/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "patch": "@@ -1561,7 +1561,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                         cx,\n                         IMPLICIT_HASHER,\n                         target.span(),\n-                        &format!(\"impl for `{}` should be generarized over different hashers\", target.type_name()),\n+                        &format!(\"impl for `{}` should be generalized over different hashers\", target.type_name()),\n                         move |db| {\n                             suggestion(cx, db, generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n@@ -1595,7 +1595,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                             IMPLICIT_HASHER,\n                             target.span(),\n                             &format!(\n-                                \"parameter of type `{}` should be generarized over different hashers\",\n+                                \"parameter of type `{}` should be generalized over different hashers\",\n                                 target.type_name()\n                             ),\n                             move |db| {"}, {"sha": "27d6e2cec080e0a520e83113c457d64f9415db36", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f225d8228b581ab6cd9cfe1a9680a1ef5408973/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f225d8228b581ab6cd9cfe1a9680a1ef5408973/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=2f225d8228b581ab6cd9cfe1a9680a1ef5408973", "patch": "@@ -1,4 +1,4 @@\n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:11:35\n    |\n 11 | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n@@ -14,7 +14,7 @@ help: ...and use generic constructor\n 17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:20:36\n    |\n 20 | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n@@ -29,7 +29,7 @@ help: ...and use generic constructor\n 22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n    |           ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:25:19\n    |\n 25 | impl Foo<i16> for HashMap<String, String> {\n@@ -44,7 +44,7 @@ help: ...and use generic constructor\n 27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashSet` should be generarized over different hashers\n+error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:43:32\n    |\n 43 | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n@@ -59,7 +59,7 @@ help: ...and use generic constructor\n 45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashSet` should be generarized over different hashers\n+error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:48:19\n    |\n 48 | impl Foo<i16> for HashSet<String> {\n@@ -74,7 +74,7 @@ help: ...and use generic constructor\n 50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashMap` should be generarized over different hashers\n+error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:23\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -85,7 +85,7 @@ help: consider adding a type parameter\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashSet` should be generarized over different hashers\n+error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:53\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -96,7 +96,7 @@ help: consider adding a type parameter\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:70:43\n    |\n 70 |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n@@ -114,7 +114,7 @@ help: ...and use generic constructor\n 72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |                  ^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashMap` should be generarized over different hashers\n+error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:33\n    |\n 78 |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -128,7 +128,7 @@ help: consider adding a type parameter\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashSet` should be generarized over different hashers\n+error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:63\n    |\n 78 |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {"}]}