{"sha": "9a53c3e90470c893a1b087babb03dec039c64b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTNjM2U5MDQ3MGM4OTNhMWIwODdiYWJiMDNkZWMwMzljNjRiNzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-16T14:54:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-01T05:59:47Z"}, "message": "rustc: remove unused field of mc::Categorization::Deref.", "tree": {"sha": "8b6c801c5d68c9490ba9786b25a74be405ea4736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6c801c5d68c9490ba9786b25a74be405ea4736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a53c3e90470c893a1b087babb03dec039c64b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a53c3e90470c893a1b087babb03dec039c64b79", "html_url": "https://github.com/rust-lang/rust/commit/9a53c3e90470c893a1b087babb03dec039c64b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a53c3e90470c893a1b087babb03dec039c64b79/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "html_url": "https://github.com/rust-lang/rust/commit/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791"}], "stats": {"total": 125, "additions": 61, "deletions": 64}, "files": [{"sha": "13647d420c36acbdbb652f345b0e2c5fe5fc9199", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -94,7 +94,7 @@ pub enum Categorization<'tcx> {\n     StaticItem,\n     Upvar(Upvar),                          // upvar referenced by closure env\n     Local(ast::NodeId),                    // local variable\n-    Deref(cmt<'tcx>, usize, PointerKind<'tcx>),  // deref of a ptr\n+    Deref(cmt<'tcx>, PointerKind<'tcx>),   // deref of a ptr\n     Interior(cmt<'tcx>, InteriorKind),     // something interior: field, tuple, etc\n     Downcast(cmt<'tcx>, DefId),            // selects a particular enum variant (*1)\n \n@@ -229,8 +229,8 @@ impl<'tcx> cmt_<'tcx> {\n \n     pub fn immutability_blame(&self) -> Option<ImmutabilityBlame<'tcx>> {\n         match self.cat {\n-            Categorization::Deref(ref base_cmt, _, BorrowedPtr(ty::ImmBorrow, _)) |\n-            Categorization::Deref(ref base_cmt, _, Implicit(ty::ImmBorrow, _)) => {\n+            Categorization::Deref(ref base_cmt, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(ref base_cmt, Implicit(ty::ImmBorrow, _)) => {\n                 // try to figure out where the immutable reference came from\n                 match base_cmt.cat {\n                     Categorization::Local(node_id) =>\n@@ -255,13 +255,13 @@ impl<'tcx> cmt_<'tcx> {\n             }\n             Categorization::Rvalue(..) |\n             Categorization::Upvar(..) |\n-            Categorization::Deref(.., UnsafePtr(..)) => {\n+            Categorization::Deref(_, UnsafePtr(..)) => {\n                 // This should not be reachable up to inference limitations.\n                 None\n             }\n             Categorization::Interior(ref base_cmt, _) |\n             Categorization::Downcast(ref base_cmt, _) |\n-            Categorization::Deref(ref base_cmt, _, _) => {\n+            Categorization::Deref(ref base_cmt, _) => {\n                 base_cmt.immutability_blame()\n             }\n             Categorization::StaticItem => {\n@@ -569,7 +569,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     // is an rvalue. That is what we will be\n                     // dereferencing.\n                     let base_cmt = self.cat_rvalue_node(expr.id(), expr.span(), ret_ty);\n-                    Ok(self.cat_deref_common(expr, base_cmt, 1, elem_ty, true))\n+                    Ok(self.cat_deref_common(expr, base_cmt, elem_ty, true))\n                 }\n                 None => {\n                     self.cat_index(expr, self.cat_expr(&base)?, InteriorOffsetKind::Index)\n@@ -763,7 +763,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 cmt_ {\n                     id: id,\n                     span: span,\n-                    cat: Categorization::Deref(Rc::new(cmt_result), 0, ptr),\n+                    cat: Categorization::Deref(Rc::new(cmt_result), ptr),\n                     mutbl: MutabilityCategory::from_borrow_kind(upvar_borrow.kind),\n                     ty: var_ty,\n                     note: NoteUpvarRef(upvar_id)\n@@ -823,7 +823,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let ret = cmt_ {\n             id: id,\n             span: span,\n-            cat: Categorization::Deref(Rc::new(cmt_result), 0, env_ptr),\n+            cat: Categorization::Deref(Rc::new(cmt_result), env_ptr),\n             mutbl: deref_mutbl,\n             ty: var_ty,\n             note: NoteClosureEnv(upvar_id)\n@@ -957,7 +957,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let base_cmt_ty = base_cmt.ty;\n         match base_cmt_ty.builtin_deref(true, ty::NoPreference) {\n             Some(mt) => {\n-                let ret = self.cat_deref_common(node, base_cmt, deref_cnt, mt.ty, false);\n+                let ret = self.cat_deref_common(node, base_cmt, mt.ty, false);\n                 debug!(\"cat_deref ret {:?}\", ret);\n                 Ok(ret)\n             }\n@@ -972,7 +972,6 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     fn cat_deref_common<N:ast_node>(&self,\n                                     node: &N,\n                                     base_cmt: cmt<'tcx>,\n-                                    deref_cnt: usize,\n                                     deref_ty: Ty<'tcx>,\n                                     implicit: bool)\n                                     -> cmt<'tcx>\n@@ -991,7 +990,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             span: node.span(),\n             // For unique ptrs, we inherit mutability from the owning reference.\n             mutbl: MutabilityCategory::from_pointer_kind(base_cmt.mutbl, ptr),\n-            cat: Categorization::Deref(base_cmt, deref_cnt, ptr),\n+            cat: Categorization::Deref(base_cmt, ptr),\n             ty: deref_ty,\n             note: NoteNone\n         });\n@@ -1300,15 +1299,15 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Rvalue(..) |\n             Categorization::StaticItem |\n             Categorization::Local(..) |\n-            Categorization::Deref(.., UnsafePtr(..)) |\n-            Categorization::Deref(.., BorrowedPtr(..)) |\n-            Categorization::Deref(.., Implicit(..)) |\n+            Categorization::Deref(_, UnsafePtr(..)) |\n+            Categorization::Deref(_, BorrowedPtr(..)) |\n+            Categorization::Deref(_, Implicit(..)) |\n             Categorization::Upvar(..) => {\n                 Rc::new((*self).clone())\n             }\n             Categorization::Downcast(ref b, _) |\n             Categorization::Interior(ref b, _) |\n-            Categorization::Deref(ref b, _, Unique) => {\n+            Categorization::Deref(ref b, Unique) => {\n                 b.guarantor()\n             }\n         }\n@@ -1321,11 +1320,11 @@ impl<'tcx> cmt_<'tcx> {\n         // aliased and eventually recused.\n \n         match self.cat {\n-            Categorization::Deref(ref b, _, BorrowedPtr(ty::MutBorrow, _)) |\n-            Categorization::Deref(ref b, _, Implicit(ty::MutBorrow, _)) |\n-            Categorization::Deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n-            Categorization::Deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n-            Categorization::Deref(ref b, _, Unique) |\n+            Categorization::Deref(ref b, BorrowedPtr(ty::MutBorrow, _)) |\n+            Categorization::Deref(ref b, Implicit(ty::MutBorrow, _)) |\n+            Categorization::Deref(ref b, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n+            Categorization::Deref(ref b, Implicit(ty::UniqueImmBorrow, _)) |\n+            Categorization::Deref(ref b, Unique) |\n             Categorization::Downcast(ref b, _) |\n             Categorization::Interior(ref b, _) => {\n                 // Aliasability depends on base cmt\n@@ -1335,7 +1334,7 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Rvalue(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n-            Categorization::Deref(.., UnsafePtr(..)) => { // yes, it's aliasable, but...\n+            Categorization::Deref(_, UnsafePtr(..)) => { // yes, it's aliasable, but...\n                 NonAliasable\n             }\n \n@@ -1347,8 +1346,8 @@ impl<'tcx> cmt_<'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n-            Categorization::Deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n+            Categorization::Deref(_, BorrowedPtr(ty::ImmBorrow, _)) |\n+            Categorization::Deref(_, Implicit(ty::ImmBorrow, _)) => {\n                 FreelyAliasable(AliasableBorrowed)\n             }\n         }\n@@ -1360,9 +1359,9 @@ impl<'tcx> cmt_<'tcx> {\n         match self.note {\n             NoteClosureEnv(..) | NoteUpvarRef(..) => {\n                 Some(match self.cat {\n-                    Categorization::Deref(ref inner, ..) => {\n+                    Categorization::Deref(ref inner, _) => {\n                         match inner.cat {\n-                            Categorization::Deref(ref inner, ..) => inner.clone(),\n+                            Categorization::Deref(ref inner, _) => inner.clone(),\n                             Categorization::Upvar(..) => inner.clone(),\n                             _ => bug!()\n                         }\n@@ -1390,7 +1389,7 @@ impl<'tcx> cmt_<'tcx> {\n                     \"local variable\".to_string()\n                 }\n             }\n-            Categorization::Deref(.., pk) => {\n+            Categorization::Deref(_, pk) => {\n                 let upvar = self.upvar();\n                 match upvar.as_ref().map(|i| &i.cat) {\n                     Some(&Categorization::Upvar(ref var)) => {\n@@ -1467,8 +1466,8 @@ impl<'tcx> fmt::Debug for Categorization<'tcx> {\n             Categorization::Upvar(upvar) => {\n                 write!(f, \"upvar({:?})\", upvar)\n             }\n-            Categorization::Deref(ref cmt, derefs, ptr) => {\n-                write!(f, \"{:?}-{:?}{}->\", cmt.cat, ptr, derefs)\n+            Categorization::Deref(ref cmt, ptr) => {\n+                write!(f, \"{:?}-{:?}->\", cmt.cat, ptr)\n             }\n             Categorization::Interior(ref cmt, interior) => {\n                 write!(f, \"{:?}.{:?}\", cmt.cat, interior)"}, {"sha": "baa18307510e6ee1f16c33eeb529eb47f8da9d49", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -222,9 +222,9 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                                cmt: &mc::cmt<'tcx>)\n                                                -> Option<mc::cmt<'tcx>> {\n     match cmt.cat {\n-        Categorization::Deref(.., mc::BorrowedPtr(..)) |\n-        Categorization::Deref(.., mc::Implicit(..)) |\n-        Categorization::Deref(.., mc::UnsafePtr(..)) |\n+        Categorization::Deref(_, mc::BorrowedPtr(..)) |\n+        Categorization::Deref(_, mc::Implicit(..)) |\n+        Categorization::Deref(_, mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n             Some(cmt.clone())\n         }\n@@ -258,7 +258,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             Some(cmt.clone())\n         }\n \n-        Categorization::Deref(ref b, _, mc::Unique) => {\n+        Categorization::Deref(ref b, mc::Unique) => {\n             check_and_get_illegal_move_origin(bccx, b)\n         }\n     }"}, {"sha": "0a6375ab187d6c82da980442163ccb3241a4436f", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -72,11 +72,11 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n \n         match cmt.cat {\n             Categorization::Rvalue(..) |\n-            Categorization::Local(..) |                         // L-Local\n+            Categorization::Local(..) |                     // L-Local\n             Categorization::Upvar(..) |\n-            Categorization::Deref(.., mc::BorrowedPtr(..)) |  // L-Deref-Borrowed\n-            Categorization::Deref(.., mc::Implicit(..)) |\n-            Categorization::Deref(.., mc::UnsafePtr(..)) => {\n+            Categorization::Deref(_, mc::BorrowedPtr(..)) | // L-Deref-Borrowed\n+            Categorization::Deref(_, mc::Implicit(..)) |\n+            Categorization::Deref(_, mc::UnsafePtr(..)) => {\n                 self.check_scope(self.scope(cmt))\n             }\n \n@@ -85,8 +85,8 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n \n             Categorization::Downcast(ref base, _) |\n-            Categorization::Deref(ref base, _, mc::Unique) |     // L-Deref-Send\n-            Categorization::Interior(ref base, _) => {             // L-Field\n+            Categorization::Deref(ref base, mc::Unique) |   // L-Deref-Send\n+            Categorization::Interior(ref base, _) => {      // L-Field\n                 self.check(base, discr_scope)\n             }\n         }\n@@ -119,15 +119,15 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n                     self.bccx.region_maps.var_scope(local_id)))\n             }\n             Categorization::StaticItem |\n-            Categorization::Deref(.., mc::UnsafePtr(..)) => {\n+            Categorization::Deref(_, mc::UnsafePtr(..)) => {\n                 self.bccx.tcx.types.re_static\n             }\n-            Categorization::Deref(.., mc::BorrowedPtr(_, r)) |\n-            Categorization::Deref(.., mc::Implicit(_, r)) => {\n+            Categorization::Deref(_, mc::BorrowedPtr(_, r)) |\n+            Categorization::Deref(_, mc::Implicit(_, r)) => {\n                 r\n             }\n             Categorization::Downcast(ref cmt, _) |\n-            Categorization::Deref(ref cmt, _, mc::Unique) |\n+            Categorization::Deref(ref cmt, mc::Unique) |\n             Categorization::Interior(ref cmt, _) => {\n                 self.scope(cmt)\n             }"}, {"sha": "f7c3bb36da7ddf33e40975e07151b6f62db853fa", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -138,9 +138,9 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                        move_from: mc::cmt<'tcx>)\n                                        -> DiagnosticBuilder<'a> {\n     match move_from.cat {\n-        Categorization::Deref(.., mc::BorrowedPtr(..)) |\n-        Categorization::Deref(.., mc::Implicit(..)) |\n-        Categorization::Deref(.., mc::UnsafePtr(..)) |\n+        Categorization::Deref(_, mc::BorrowedPtr(..)) |\n+        Categorization::Deref(_, mc::Implicit(..)) |\n+        Categorization::Deref(_, mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n             let mut err = struct_span_err!(bccx, move_from.span, E0507,\n                              \"cannot move out of {}\","}, {"sha": "b7965f81b8826e3e0a8b28d2cafb2d04699179fc", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 RestrictionResult::Safe\n             }\n \n-            Categorization::Deref(cmt_base, _, pk) => {\n+            Categorization::Deref(cmt_base, pk) => {\n                 match pk {\n                     mc::Unique => {\n                         // R-Deref-Send-Pointer"}, {"sha": "0b2cb1b93f92a4df94fd59bbf9f0717200144c79", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -426,7 +426,7 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n             Some(new_lp(LpUpvar(id)))\n         }\n \n-        Categorization::Deref(ref cmt_base, _, pk) => {\n+        Categorization::Deref(ref cmt_base, pk) => {\n             opt_loan_path(cmt_base).map(|lp| {\n                 new_lp(LpExtend(lp, cmt.mutbl, LpDeref(pk)))\n             })"}, {"sha": "09e90b78d604b37a1e0ee8a1996b8080b9737327", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -512,7 +512,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n                 Categorization::StaticItem => {\n                     break;\n                 }\n-                Categorization::Deref(ref cmt, ..) |\n+                Categorization::Deref(ref cmt, _) |\n                 Categorization::Downcast(ref cmt, _) |\n                 Categorization::Interior(ref cmt, _) => {\n                     cur = cmt;"}, {"sha": "2c4188e392d8de633114da2ca1855ca74e67bfcb", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -1224,10 +1224,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                    borrow_kind,\n                    borrow_cmt);\n             match borrow_cmt.cat.clone() {\n-                Categorization::Deref(ref_cmt, _,\n-                                      mc::Implicit(ref_kind, ref_region)) |\n-                Categorization::Deref(ref_cmt, _,\n-                                      mc::BorrowedPtr(ref_kind, ref_region)) => {\n+                Categorization::Deref(ref_cmt, mc::Implicit(ref_kind, ref_region)) |\n+                Categorization::Deref(ref_cmt, mc::BorrowedPtr(ref_kind, ref_region)) => {\n                     match self.link_reborrowed_region(span,\n                                                       borrow_region, borrow_kind,\n                                                       ref_cmt, ref_region, ref_kind,\n@@ -1243,15 +1241,15 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n                 Categorization::Downcast(cmt_base, _) |\n-                Categorization::Deref(cmt_base, _, mc::Unique) |\n+                Categorization::Deref(cmt_base, mc::Unique) |\n                 Categorization::Interior(cmt_base, _) => {\n                     // Borrowing interior or owned data requires the base\n                     // to be valid and borrowable in the same fashion.\n                     borrow_cmt = cmt_base;\n                     borrow_kind = borrow_kind;\n                 }\n \n-                Categorization::Deref(.., mc::UnsafePtr(..)) |\n+                Categorization::Deref(_, mc::UnsafePtr(..)) |\n                 Categorization::StaticItem |\n                 Categorization::Upvar(..) |\n                 Categorization::Local(..) |"}, {"sha": "799d6186653e4544961fa1aa06c067129b847658", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a53c3e90470c893a1b087babb03dec039c64b79/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9a53c3e90470c893a1b087babb03dec039c64b79", "patch": "@@ -281,8 +281,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         debug!(\"adjust_upvar_borrow_kind_for_consume: guarantor={:?}\",\n                guarantor);\n         match guarantor.cat {\n-            Categorization::Deref(.., mc::BorrowedPtr(..)) |\n-            Categorization::Deref(.., mc::Implicit(..)) => {\n+            Categorization::Deref(_, mc::BorrowedPtr(..)) |\n+            Categorization::Deref(_, mc::Implicit(..)) => {\n                 match cmt.note {\n                     mc::NoteUpvarRef(upvar_id) => {\n                         debug!(\"adjust_upvar_borrow_kind_for_consume: \\\n@@ -327,16 +327,16 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                cmt);\n \n         match cmt.cat.clone() {\n-            Categorization::Deref(base, _, mc::Unique) |\n+            Categorization::Deref(base, mc::Unique) |\n             Categorization::Interior(base, _) |\n             Categorization::Downcast(base, _) => {\n                 // Interior or owned data is mutable if base is\n                 // mutable, so iterate to the base.\n                 self.adjust_upvar_borrow_kind_for_mut(base);\n             }\n \n-            Categorization::Deref(base, _, mc::BorrowedPtr(..)) |\n-            Categorization::Deref(base, _, mc::Implicit(..)) => {\n+            Categorization::Deref(base, mc::BorrowedPtr(..)) |\n+            Categorization::Deref(base, mc::Implicit(..)) => {\n                 if !self.try_adjust_upvar_deref(cmt, ty::MutBorrow) {\n                     // assignment to deref of an `&mut`\n                     // borrowed pointer implies that the\n@@ -346,7 +346,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(.., mc::UnsafePtr(..)) |\n+            Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n@@ -361,24 +361,24 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                cmt);\n \n         match cmt.cat.clone() {\n-            Categorization::Deref(base, _, mc::Unique) |\n+            Categorization::Deref(base, mc::Unique) |\n             Categorization::Interior(base, _) |\n             Categorization::Downcast(base, _) => {\n                 // Interior or owned data is unique if base is\n                 // unique.\n                 self.adjust_upvar_borrow_kind_for_unique(base);\n             }\n \n-            Categorization::Deref(base, _, mc::BorrowedPtr(..)) |\n-            Categorization::Deref(base, _, mc::Implicit(..)) => {\n+            Categorization::Deref(base, mc::BorrowedPtr(..)) |\n+            Categorization::Deref(base, mc::Implicit(..)) => {\n                 if !self.try_adjust_upvar_deref(cmt, ty::UniqueImmBorrow) {\n                     // for a borrowed pointer to be unique, its\n                     // base must be unique\n                     self.adjust_upvar_borrow_kind_for_unique(base);\n                 }\n             }\n \n-            Categorization::Deref(.., mc::UnsafePtr(..)) |\n+            Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |"}]}