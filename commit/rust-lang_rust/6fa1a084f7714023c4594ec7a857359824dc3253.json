{"sha": "6fa1a084f7714023c4594ec7a857359824dc3253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTFhMDg0Zjc3MTQwMjNjNDU5NGVjN2E4NTczNTk4MjRkYzMyNTM=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-23T21:53:44Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-23T21:58:16Z"}, "message": "A shareable atomically reference counted pointer wrapper.\n\nNeeds more tests to ensure safety, and probably some more work on usability too.", "tree": {"sha": "86bff507755a6b1aa41a17017e3edac1337610dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86bff507755a6b1aa41a17017e3edac1337610dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa1a084f7714023c4594ec7a857359824dc3253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa1a084f7714023c4594ec7a857359824dc3253", "html_url": "https://github.com/rust-lang/rust/commit/6fa1a084f7714023c4594ec7a857359824dc3253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa1a084f7714023c4594ec7a857359824dc3253/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9773a22119bf416a1c53d0ee30f6a127c7e274e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9773a22119bf416a1c53d0ee30f6a127c7e274e1", "html_url": "https://github.com/rust-lang/rust/commit/9773a22119bf416a1c53d0ee30f6a127c7e274e1"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "9c46db57627d0263024702706c9c8d6d84f050ca", "filename": "src/libstd/arc.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=6fa1a084f7714023c4594ec7a857359824dc3253", "patch": "@@ -0,0 +1,59 @@\n+#[doc = \"An atomically reference counted wrapper that can be used\n+hare immutable data between tasks.\"]\n+\n+export arc, get, clone;\n+\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n+    #[rust_stack]\n+    fn rust_atomic_increment(p: *mut libc::intptr_t)\n+        -> libc::intptr_t;\n+\n+    #[rust_stack]\n+    fn rust_atomic_decrement(p: *mut libc::intptr_t)\n+        -> libc::intptr_t;\n+}\n+\n+type arc_data<T> = {\n+    mut count: libc::intptr_t,\n+    data: T\n+};\n+\n+resource arc_destruct<T>(data: *arc_data<T>) {\n+    unsafe {\n+        let ptr = ptr::mut_addr_of((*data).count);\n+\n+        let new_count = rustrt::rust_atomic_decrement(ptr);\n+        assert new_count >= 0;\n+        if new_count == 0 {\n+            let _ptr : ~arc_data<T> = unsafe::reinterpret_cast(data);\n+            // drop glue takes over.\n+        }\n+    }\n+}\n+\n+type arc<T> = arc_destruct<T>;\n+\n+fn arc<T>(-data: T) -> arc<T> {\n+    let data = ~{mut count: 1, data: data};\n+    unsafe {\n+        let ptr = unsafe::reinterpret_cast(data);\n+        unsafe::forget(data);\n+        arc_destruct(ptr)\n+    }\n+}\n+\n+fn get<T>(rc: &a.arc<T>) -> &a.T {\n+    unsafe {\n+        &(***rc).data\n+    }\n+}\n+\n+fn clone<T>(rc: &arc<T>) -> arc<T> {\n+    let data = **rc;\n+    unsafe {\n+        rustrt::rust_atomic_increment(\n+            ptr::mut_addr_of((*data).count));\n+    }\n+    arc_destruct(**rc)\n+}"}, {"sha": "bcf0574a7f3f372f3752379609850a21e81aa062", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=6fa1a084f7714023c4594ec7a857359824dc3253", "patch": "@@ -17,7 +17,7 @@ export net, net_tcp;\n export uv, uv_ll, uv_hl, uv_global_loop;\n export c_vec, util, timer;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n-export rope, arena;\n+export rope, arena, arc;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;\n \n@@ -66,6 +66,7 @@ mod term;\n mod time;\n mod prettyprint;\n mod arena;\n+mod arc;\n \n #[cfg(unicode)]\n mod unicode;"}, {"sha": "97fbcf4953d73ac85926be804c386a5202f69153", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=6fa1a084f7714023c4594ec7a857359824dc3253", "patch": "@@ -816,6 +816,16 @@ rust_compare_and_swap_ptr(intptr_t *address,\n     return sync::compare_and_swap(address, oldval, newval);\n }\n \n+extern \"C\" CDECL intptr_t\n+rust_atomic_increment(intptr_t *address) {\n+    return sync::increment(address);\n+}\n+\n+extern \"C\" CDECL intptr_t\n+rust_atomic_decrement(intptr_t *address) {\n+    return sync::decrement(address);\n+}\n+\n extern \"C\" CDECL void\n rust_task_weaken(rust_port_id chan) {\n     rust_task *task = rust_get_current_task();"}, {"sha": "d982110bb99482ea2a8f2333627fd36a4c238201", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=6fa1a084f7714023c4594ec7a857359824dc3253", "patch": "@@ -154,6 +154,8 @@ rust_dbg_lock_signal\n rust_dbg_call\n rust_osmain_sched_id\n rust_compare_and_swap_ptr\n+rust_atomic_increment\n+rust_atomic_decrement\n rust_global_env_chan_ptr\n rust_port_take\n rust_port_drop"}, {"sha": "d1c40122840f4dd5f76f998b0836fcd9fd4049ee", "filename": "src/test/run-pass/share-arc.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Ftest%2Frun-pass%2Fshare-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa1a084f7714023c4594ec7a857359824dc3253/src%2Ftest%2Frun-pass%2Fshare-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshare-arc.rs?ref=6fa1a084f7714023c4594ec7a857359824dc3253", "patch": "@@ -0,0 +1,28 @@\n+use std;\n+import std::arc;\n+import comm::*;\n+\n+fn main() {\n+    let v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let arc_v = arc::arc(v);\n+\n+    let p = port();\n+    let c = chan(p);\n+    \n+    task::spawn() {||\n+        let p = port();\n+        c.send(chan(p));\n+\n+        let arc_v = p.recv();\n+\n+        let v = *arc::get::<[int]>(&arc_v);\n+        assert v[3] == 4;\n+    };\n+\n+    let c = p.recv();\n+    c.send(arc::clone(&arc_v));\n+\n+    assert (*arc::get(&arc_v))[2] == 3;\n+\n+    log(info, arc_v);\n+}"}]}