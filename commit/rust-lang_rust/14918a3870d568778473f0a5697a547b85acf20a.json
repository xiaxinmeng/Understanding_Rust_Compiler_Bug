{"sha": "14918a3870d568778473f0a5697a547b85acf20a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTE4YTM4NzBkNTY4Nzc4NDczZjBhNTY5N2E1NDdiODVhY2YyMGE=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-14T00:36:05Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-04-17T14:24:56Z"}, "message": "hir_def: ignore ast::Type in file_item_tree query", "tree": {"sha": "0d8811909d721ddecc3277893b8df874ead68ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8811909d721ddecc3277893b8df874ead68ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14918a3870d568778473f0a5697a547b85acf20a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14918a3870d568778473f0a5697a547b85acf20a", "html_url": "https://github.com/rust-lang/rust/commit/14918a3870d568778473f0a5697a547b85acf20a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14918a3870d568778473f0a5697a547b85acf20a/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ef7c20d79803403be58eeffa18ab1fb21e261c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ef7c20d79803403be58eeffa18ab1fb21e261c", "html_url": "https://github.com/rust-lang/rust/commit/28ef7c20d79803403be58eeffa18ab1fb21e261c"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "fed28550521e8729b397b69d3db14103628c3e26", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14918a3870d568778473f0a5697a547b85acf20a/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14918a3870d568778473f0a5697a547b85acf20a/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=14918a3870d568778473f0a5697a547b85acf20a", "patch": "@@ -104,6 +104,11 @@ impl ItemTree {\n                     // items and expanded during block DefMap computation\n                     return Default::default();\n                 },\n+                ast::Type(_ty) => {\n+                    // FIXME: This occurs because macros in type position are treated as inner\n+                    // items and expanded during block DefMap computation\n+                    return Default::default();\n+                },\n                 ast::Expr(e) => {\n                     // Macros can expand to expressions. We return an empty item tree in this case, but\n                     // still need to collect inner items."}, {"sha": "45b099cf3194e4ecdc5a89582d761a6165ba428a", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14918a3870d568778473f0a5697a547b85acf20a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14918a3870d568778473f0a5697a547b85acf20a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=14918a3870d568778473f0a5697a547b85acf20a", "patch": "@@ -189,16 +189,12 @@ impl Ctx {\n                                 block_stack.push(self.source_ast_id_map.ast_id(&block));\n                             },\n                             ast::Item(item) => {\n-                                // FIXME: This triggers for macro calls in expression/pattern\n-                                if let Some(SyntaxKind::MACRO_TYPE) = node.parent().map(|p| p.kind()) {\n-                                    // Ignore macros at type position\n-                                } else {\n-                                    let mod_items = self.lower_mod_item(&item, true);\n-                                    let current_block = block_stack.last();\n-                                    if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n-                                        if !mod_items.0.is_empty() {\n-                                            self.data().inner_items.entry(*block).or_default().extend(mod_items.0.iter().copied());\n-                                        }\n+                                // FIXME: This triggers for macro calls in expression/pattern/type position\n+                                let mod_items = self.lower_mod_item(&item, true);\n+                                let current_block = block_stack.last();\n+                                if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n+                                    if !mod_items.0.is_empty() {\n+                                        self.data().inner_items.entry(*block).or_default().extend(mod_items.0.iter().copied());\n                                     }\n                                 }\n                             },"}]}