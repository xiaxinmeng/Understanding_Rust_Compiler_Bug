{"sha": "755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWJkYWExOTA4NGMzYWUxMTZhZDgzMjBiOTlhNjkzMmZhN2YwYjE=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-01-29T20:45:12Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-01T15:04:26Z"}, "message": "change skolemizations to use universe index\n\nThese changes were meant to be in\n2b18d8fe9dc05415a8e6b7cadf879c7f7ebe020a (rebased from\n12a230562ece9b0d29018a436676141054dc53b7), but I messed up the rebase a\nbit as the file had been moved.", "tree": {"sha": "23c2acf77700b38149b37f9e42b194962b7f7301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c2acf77700b38149b37f9e42b194962b7f7301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "html_url": "https://github.com/rust-lang/rust/commit/755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755bdaa19084c3ae116ad8320b99a6932fa7f0b1/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17df455c2eda9717e2d7ff2f43809b553852d7e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17df455c2eda9717e2d7ff2f43809b553852d7e6", "html_url": "https://github.com/rust-lang/rust/commit/17df455c2eda9717e2d7ff2f43809b553852d7e6"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "d70631fa519d88972ad4af6524e30a757d4199f3", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/755bdaa19084c3ae116ad8320b99a6932fa7f0b1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/755bdaa19084c3ae116ad8320b99a6932fa7f0b1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "patch": "@@ -598,6 +598,14 @@ name = \"either\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ena\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"endian-type\"\n version = \"0.1.2\"\n@@ -1866,6 +1874,7 @@ name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2861,6 +2870,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e45aa15fe0a8a8f511e6d834626afd55e49b62e5c8802e18328a87e8a8f6065c\"\n \"checksum either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"740178ddf48b1a9e878e6d6509a1442a2d42fd2928aae8e7a6f8a36fb01981b3\"\n+\"checksum ena 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fb80e4764284ff0ec7054cb05c557f5ba01ccf65ff0c265e981c0b303d0ffc\"\n \"checksum endian-type 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\""}, {"sha": "4a75037aa50354ebdc3cdc895695ac3316c9c77a", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/755bdaa19084c3ae116ad8320b99a6932fa7f0b1/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755bdaa19084c3ae116ad8320b99a6932fa7f0b1/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=755bdaa19084c3ae116ad8320b99a6932fa7f0b1", "patch": "@@ -18,7 +18,7 @@ use super::unify_key;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::unify::{self, UnificationTable};\n+use rustc_data_structures::unify as ut;\n use ty::{self, Ty, TyCtxt};\n use ty::{Region, RegionVid};\n use ty::ReStatic;\n@@ -48,7 +48,7 @@ pub struct RegionConstraintCollector<'tcx> {\n     glbs: CombineMap<'tcx>,\n \n     /// Number of skolemized variables currently active.\n-    skolemization_count: u32,\n+    skolemization_count: ty::UniverseIndex,\n \n     /// Global counter used during the GLB algorithm to create unique\n     /// names for fresh bound regions\n@@ -73,7 +73,7 @@ pub struct RegionConstraintCollector<'tcx> {\n     /// is iterating to a fixed point, because otherwise we sometimes\n     /// would wind up with a fresh stream of region variables that\n     /// have been equated but appear distinct.\n-    unification_table: UnificationTable<ty::RegionVid>,\n+    unification_table: ut::UnificationTable<ut::InPlace<ty::RegionVid>>,\n }\n \n pub type VarOrigins = IndexVec<RegionVid, RegionVariableOrigin>;\n@@ -232,8 +232,8 @@ type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n \n pub struct RegionSnapshot {\n     length: usize,\n-    region_snapshot: unify::Snapshot<ty::RegionVid>,\n-    skolemization_count: u32,\n+    region_snapshot: ut::Snapshot<ut::InPlace<ty::RegionVid>>,\n+    skolemization_count: ty::UniverseIndex,\n }\n \n /// When working with skolemized regions, we often wish to find all of\n@@ -277,10 +277,10 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data: RegionConstraintData::default(),\n             lubs: FxHashMap(),\n             glbs: FxHashMap(),\n-            skolemization_count: 0,\n+            skolemization_count: ty::UniverseIndex::ROOT,\n             bound_count: 0,\n             undo_log: Vec::new(),\n-            unification_table: UnificationTable::new(),\n+            unification_table: ut::UnificationTable::new(),\n         }\n     }\n \n@@ -329,7 +329,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             unification_table,\n         } = self;\n \n-        assert_eq!(*skolemization_count, 0);\n+        assert_eq!(skolemization_count.as_usize(), 0);\n \n         // Clear the tables of (lubs, glbs), so that we will create\n         // fresh regions if we do a LUB operation. As it happens,\n@@ -342,7 +342,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         // un-unified\" state. Note that when we unify `a` and `b`, we\n         // also insert `a <= b` and a `b <= a` edges, so the\n         // `RegionConstraintData` contains the relationship here.\n-        *unification_table = UnificationTable::new();\n+        *unification_table = ut::UnificationTable::new();\n         for vid in var_origins.indices() {\n             unification_table.new_key(unify_key::RegionVidKey { min_vid: vid });\n         }\n@@ -371,7 +371,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n             self.skolemization_count == snapshot.skolemization_count,\n-            \"failed to pop skolemized regions: {} now vs {} at start\",\n+            \"failed to pop skolemized regions: {:?} now vs {:?} at start\",\n             self.skolemization_count,\n             snapshot.skolemization_count\n         );\n@@ -479,9 +479,9 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n \n-        let sc = self.skolemization_count;\n-        self.skolemization_count = sc + 1;\n-        tcx.mk_region(ReSkolemized(ty::SkolemizedRegionVid { index: sc }, br))\n+        let universe = self.skolemization_count.subuniverse();\n+        self.skolemization_count = universe;\n+        tcx.mk_region(ReSkolemized(universe, br))\n     }\n \n     /// Removes all the edges to/from the skolemized regions that are\n@@ -499,34 +499,34 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n-            self.skolemization_count as usize >= skols.len(),\n+            self.skolemization_count.as_usize() >= skols.len(),\n             \"popping more skolemized variables than actually exist, \\\n              sc now = {}, skols.len = {}\",\n-            self.skolemization_count,\n+            self.skolemization_count.as_usize(),\n             skols.len()\n         );\n \n-        let last_to_pop = self.skolemization_count;\n-        let first_to_pop = last_to_pop - (skols.len() as u32);\n+        let last_to_pop = self.skolemization_count.subuniverse();\n+        let first_to_pop = ty::UniverseIndex::from(last_to_pop.as_u32() - (skols.len() as u32));\n \n         assert!(\n             first_to_pop >= snapshot.skolemization_count,\n             \"popping more regions than snapshot contains, \\\n-             sc now = {}, sc then = {}, skols.len = {}\",\n+             sc now = {:?}, sc then = {:?}, skols.len = {}\",\n             self.skolemization_count,\n             snapshot.skolemization_count,\n             skols.len()\n         );\n         debug_assert! {\n             skols.iter()\n                  .all(|&k| match *k {\n-                     ty::ReSkolemized(index, _) =>\n-                         index.index >= first_to_pop &&\n-                         index.index < last_to_pop,\n+                     ty::ReSkolemized(universe, _) =>\n+                         universe >= first_to_pop &&\n+                         universe < last_to_pop,\n                      _ =>\n                          false\n                  }),\n-            \"invalid skolemization keys or keys out of range ({}..{}): {:?}\",\n+            \"invalid skolemization keys or keys out of range ({:?}..{:?}): {:?}\",\n             snapshot.skolemization_count,\n             self.skolemization_count,\n             skols\n@@ -776,7 +776,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         rid: RegionVid,\n     ) -> ty::Region<'tcx> {\n-        let vid = self.unification_table.find_value(rid).min_vid;\n+        let vid = self.unification_table.probe_value(rid).min_vid;\n         tcx.mk_region(ty::ReVar(vid))\n     }\n \n@@ -861,7 +861,7 @@ impl fmt::Debug for RegionSnapshot {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             f,\n-            \"RegionSnapshot(length={},skolemization={})\",\n+            \"RegionSnapshot(length={},skolemization={:?})\",\n             self.length,\n             self.skolemization_count\n         )"}]}