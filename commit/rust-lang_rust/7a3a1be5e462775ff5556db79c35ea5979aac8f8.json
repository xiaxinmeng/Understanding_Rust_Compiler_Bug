{"sha": "7a3a1be5e462775ff5556db79c35ea5979aac8f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhM2ExYmU1ZTQ2Mjc3NWZmNTU1NmRiNzljMzVlYTU5NzlhYWM4Zjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-16T01:35:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-16T01:35:49Z"}, "message": "remove the last remnants of old interface", "tree": {"sha": "b32b316ca7e2acd320c517c289b2c91852d6dac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32b316ca7e2acd320c517c289b2c91852d6dac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3a1be5e462775ff5556db79c35ea5979aac8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3a1be5e462775ff5556db79c35ea5979aac8f8", "html_url": "https://github.com/rust-lang/rust/commit/7a3a1be5e462775ff5556db79c35ea5979aac8f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3a1be5e462775ff5556db79c35ea5979aac8f8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09cf1293a2123d316b2434a101a7c10599d7d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09cf1293a2123d316b2434a101a7c10599d7d43", "html_url": "https://github.com/rust-lang/rust/commit/b09cf1293a2123d316b2434a101a7c10599d7d43"}], "stats": {"total": 167, "additions": 29, "deletions": 138}, "files": [{"sha": "e8393d754f2de56fd8b9a5a647bcb2e5408e0738", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7a3a1be5e462775ff5556db79c35ea5979aac8f8", "patch": "@@ -24,9 +24,7 @@ use metadata::csearch;\n use metadata::cstore;\n use metadata::encoder::def_to_u64;\n use metadata::inline::InlinedItem;\n-use metadata::tydecode::{parse_ty_data, parse_region_data,\n-                         parse_type_param_def_data, parse_bare_fn_ty_data,\n-                         parse_trait_ref_data, parse_predicate_data};\n+use metadata::tydecode::TyDecoder;\n use middle::def;\n use middle::lang_items;\n use middle::subst;\n@@ -235,22 +233,25 @@ fn variant_disr_val(d: rbml::Doc) -> Option<ty::Disr> {\n \n fn doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Ty<'tcx> {\n     let tp = reader::get_doc(doc, tag_items_data_item_type);\n-    parse_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n-                  |_, did| translate_def_id(cdata, did))\n+    TyDecoder::with_doc(tcx, cdata.cnum, tp,\n+                        &mut |_, did| translate_def_id(cdata, did))\n+        .parse_ty()\n }\n \n fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Option<Ty<'tcx>> {\n     reader::maybe_get_doc(doc, tag_items_data_item_type).map(|tp| {\n-        parse_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n-                      |_, did| translate_def_id(cdata, did))\n+        TyDecoder::with_doc(tcx, cdata.cnum, tp,\n+                            &mut |_, did| translate_def_id(cdata, did))\n+            .parse_ty()\n     })\n }\n \n fn doc_method_fty<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>,\n                         cdata: Cmd) -> ty::BareFnTy<'tcx> {\n     let tp = reader::get_doc(doc, tag_item_method_fty);\n-    parse_bare_fn_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n-                          |_, did| translate_def_id(cdata, did))\n+    TyDecoder::with_doc(tcx, cdata.cnum, tp,\n+                        &mut |_, did| translate_def_id(cdata, did))\n+        .parse_bare_fn_ty()\n }\n \n pub fn item_type<'tcx>(_item_id: ast::DefId, item: rbml::Doc,\n@@ -260,8 +261,9 @@ pub fn item_type<'tcx>(_item_id: ast::DefId, item: rbml::Doc,\n \n fn doc_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n                        -> ty::TraitRef<'tcx> {\n-    parse_trait_ref_data(doc.data, cdata.cnum, doc.start, tcx,\n-                         |_, did| translate_def_id(cdata, did))\n+    TyDecoder::with_doc(tcx, cdata.cnum, doc,\n+                        &mut |_, did| translate_def_id(cdata, did))\n+        .parse_trait_ref()\n }\n \n fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n@@ -1465,9 +1467,10 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n \n     let mut types = subst::VecPerParamSpace::empty();\n     for p in reader::tagged_docs(doc, tag_type_param_def) {\n-        let bd = parse_type_param_def_data(\n-            p.data, p.start, cdata.cnum, tcx,\n-            |_, did| translate_def_id(cdata, did));\n+        let bd =\n+            TyDecoder::with_doc(tcx, cdata.cnum, p,\n+                                &mut |_, did| translate_def_id(cdata, did))\n+            .parse_type_param_def();\n         types.push(bd.space, bd);\n     }\n \n@@ -1487,8 +1490,9 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n         let index = reader::doc_as_u64(doc) as u32;\n \n         let bounds = reader::tagged_docs(rp_doc, tag_items_data_region).map(|p| {\n-            parse_region_data(p.data, cdata.cnum, p.start, tcx,\n-                              |_, did| translate_def_id(cdata, did))\n+            TyDecoder::with_doc(tcx, cdata.cnum, p,\n+                                &mut |_, did| translate_def_id(cdata, did))\n+            .parse_region()\n         }).collect();\n \n         regions.push(space, ty::RegionParameterDef { name: name,\n@@ -1515,8 +1519,10 @@ fn doc_predicates<'tcx>(base_doc: rbml::Doc,\n         let space = subst::ParamSpace::from_uint(reader::doc_as_u8(space_doc) as usize);\n \n         let data_doc = reader::get_doc(predicate_doc, tag_predicate_data);\n-        let data = parse_predicate_data(data_doc.data, data_doc.start, cdata.cnum, tcx,\n-                                        |_, did| translate_def_id(cdata, did));\n+        let data =\n+            TyDecoder::with_doc(tcx, cdata.cnum, data_doc,\n+                                &mut |_, did| translate_def_id(cdata, did))\n+            .parse_predicate();\n \n         predicates.push(space, data);\n     }"}, {"sha": "9219442cf6282cd9de5ff565539517f269e6f577", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 115, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7a3a1be5e462775ff5556db79c35ea5979aac8f8", "patch": "@@ -58,104 +58,6 @@ pub enum DefIdSource {\n     ClosureSource\n }\n \n-pub fn parse_ty_closure_data<'tcx, F>(data: &[u8],\n-                                      crate_num: ast::CrateNum,\n-                                      pos: usize,\n-                                      tcx: &ty::ctxt<'tcx>,\n-                                      mut conv: F)\n-                                      -> ty::ClosureTy<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_closure_ty()\n-}\n-\n-pub fn parse_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,\n-                              tcx: &ty::ctxt<'tcx>, mut conv: F) -> Ty<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    debug!(\"parse_ty_data {}\", data_log_string(data, pos));\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_ty()\n-}\n-\n-pub fn parse_region_data<F>(data: &[u8], crate_num: ast::CrateNum, pos: usize, tcx: &ty::ctxt,\n-                            mut conv: F) -> ty::Region where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    debug!(\"parse_region_data {}\", data_log_string(data, pos));\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_region()\n-}\n-\n-pub fn parse_bare_fn_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,\n-                                      tcx: &ty::ctxt<'tcx>, mut conv: F)\n-                                      -> ty::BareFnTy<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    debug!(\"parse_bare_fn_ty_data {}\", data_log_string(data, pos));\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_bare_fn_ty()\n-}\n-\n-pub fn parse_trait_ref_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,\n-                                     tcx: &ty::ctxt<'tcx>, mut conv: F)\n-                                     -> ty::TraitRef<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    debug!(\"parse_trait_ref_data {}\", data_log_string(data, pos));\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_trait_ref()\n-}\n-\n-pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,\n-                                  tcx: &ty::ctxt<'tcx>, mut conv: F) -> subst::Substs<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    debug!(\"parse_substs_data{}\", data_log_string(data, pos));\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_substs()\n-}\n-\n-pub fn parse_existential_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,\n-                                              pos: usize, tcx: &ty::ctxt<'tcx>, mut conv: F)\n-                                              -> ty::ExistentialBounds<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_existential_bounds()\n-}\n-\n-pub fn parse_builtin_bounds_data<F>(data: &[u8], crate_num: ast::CrateNum,\n-                                    pos: usize, tcx: &ty::ctxt, mut conv: F)\n-                                    -> ty::BuiltinBounds where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n-    st.parse_builtin_bounds()\n-}\n-\n-pub fn parse_type_param_def_data<'tcx, F>(data: &[u8], start: usize,\n-                                          crate_num: ast::CrateNum, tcx: &ty::ctxt<'tcx>,\n-                                          mut conv: F) -> ty::TypeParameterDef<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = TyDecoder::new(data, crate_num, start, tcx, &mut conv);\n-    st.parse_type_param_def()\n-}\n-\n-pub fn parse_predicate_data<'tcx, F>(data: &[u8],\n-                                     start: usize,\n-                                     crate_num: ast::CrateNum,\n-                                     tcx: &ty::ctxt<'tcx>,\n-                                     mut conv: F)\n-                                     -> ty::Predicate<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = TyDecoder::new(data, crate_num, start, tcx, &mut conv);\n-    st.parse_predicate()\n-}\n-\n pub type DefIdConvert<'a> = &'a mut FnMut(DefIdSource, ast::DefId) -> ast::DefId;\n \n pub struct TyDecoder<'a, 'tcx: 'a> {\n@@ -292,7 +194,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         }\n     }\n \n-    fn parse_region(&mut self) -> ty::Region {\n+    pub fn parse_region(&mut self) -> ty::Region {\n         match self.next() {\n             'b' => {\n                 assert_eq!(self.next(), '[');\n@@ -629,7 +531,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         }\n     }\n \n-    fn parse_bare_fn_ty(&mut self) -> ty::BareFnTy<'tcx> {\n+    pub fn parse_bare_fn_ty(&mut self) -> ty::BareFnTy<'tcx> {\n         let unsafety = parse_unsafety(self.next());\n         let abi = self.parse_abi_set();\n         let sig = self.parse_sig();\n@@ -777,21 +679,6 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n     }\n }\n \n-fn data_log_string(data: &[u8], pos: usize) -> String {\n-    let mut buf = String::new();\n-    buf.push_str(\"<<\");\n-    for i in pos..data.len() {\n-        let c = data[i];\n-        if c > 0x20 && c <= 0x7F {\n-            buf.push(c as char);\n-        } else {\n-            buf.push('.');\n-        }\n-    }\n-    buf.push_str(\">>\");\n-    buf\n-}\n-\n // Rust metadata parsing\n fn parse_defid(buf: &[u8]) -> ast::DefId {\n     let mut colon_idx = 0;"}, {"sha": "591fc043f914c8d8c74ef8ff493320e4ada8d276", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3a1be5e462775ff5556db79c35ea5979aac8f8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7a3a1be5e462775ff5556db79c35ea5979aac8f8", "patch": "@@ -1252,11 +1252,9 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_substs<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                            -> subst::Substs<'tcx> {\n         self.read_opaque(|this, doc| {\n-            Ok(tydecode::parse_substs_data(doc.data,\n-                                           dcx.cdata.cnum,\n-                                           doc.start,\n-                                           dcx.tcx,\n-                                           |s, a| this.convert_def_id(dcx, s, a)))\n+            Ok(tydecode::TyDecoder::with_doc(dcx.tcx, dcx.cdata.cnum, doc,\n+                                             &mut |s, a| this.convert_def_id(dcx, s, a))\n+               .parse_substs())\n         }).unwrap()\n     }\n "}]}