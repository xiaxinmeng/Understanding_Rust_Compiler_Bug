{"sha": "99492278ac8c8a9caf3981b4406dcac6724a6a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NDkyMjc4YWM4YzhhOWNhZjM5ODFiNDQwNmRjYWM2NzI0YTZhOTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-01T14:48:05Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T16:18:30Z"}, "message": "Implement Deref<Target=[Ty]> for Substs", "tree": {"sha": "8ce60ceed908065c416d707942b2c4452ab8f0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce60ceed908065c416d707942b2c4452ab8f0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99492278ac8c8a9caf3981b4406dcac6724a6a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99492278ac8c8a9caf3981b4406dcac6724a6a93", "html_url": "https://github.com/rust-lang/rust/commit/99492278ac8c8a9caf3981b4406dcac6724a6a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99492278ac8c8a9caf3981b4406dcac6724a6a93/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c3ee834d6452c5caa244c3c58504992de38baa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3ee834d6452c5caa244c3c58504992de38baa4", "html_url": "https://github.com/rust-lang/rust/commit/6c3ee834d6452c5caa244c3c58504992de38baa4"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "e7c39487d52b112df193790e0da63b6136e2e666", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/99492278ac8c8a9caf3981b4406dcac6724a6a93/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99492278ac8c8a9caf3981b4406dcac6724a6a93/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=99492278ac8c8a9caf3981b4406dcac6724a6a93", "patch": "@@ -13,6 +13,7 @@ mod infer;\n pub(crate) mod display;\n \n use std::sync::Arc;\n+use std::ops::Deref;\n use std::{fmt, mem};\n \n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams};\n@@ -155,14 +156,6 @@ impl Substs {\n         Substs(self.0.iter().cloned().take(n).collect::<Vec<_>>().into())\n     }\n \n-    pub fn iter(&self) -> impl Iterator<Item = &Ty> {\n-        self.0.iter()\n-    }\n-\n-    pub fn len(&self) -> usize {\n-        self.0.len()\n-    }\n-\n     pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n         // Without an Arc::make_mut_slice, we can't avoid the clone here:\n         let mut v: Vec<_> = self.0.iter().cloned().collect();\n@@ -210,6 +203,14 @@ impl From<Vec<Ty>> for Substs {\n     }\n }\n \n+impl Deref for Substs {\n+    type Target = [Ty];\n+\n+    fn deref(&self) -> &[Ty] {\n+        &self.0\n+    }\n+}\n+\n /// A trait with type parameters. This includes the `Self`, so this represents a concrete type implementing the trait.\n /// Name to be bikeshedded: TraitBound? TraitImplements?\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -221,7 +222,7 @@ pub struct TraitRef {\n \n impl TraitRef {\n     pub fn self_ty(&self) -> &Ty {\n-        &self.substs.0[0]\n+        &self.substs[0]\n     }\n \n     pub fn subst(mut self, substs: &Substs) -> TraitRef {\n@@ -399,8 +400,8 @@ impl Ty {\n     pub fn subst(self, substs: &Substs) -> Ty {\n         self.fold(&mut |ty| match ty {\n             Ty::Param { idx, name } => {\n-                if (idx as usize) < substs.0.len() {\n-                    substs.0[idx as usize].clone()\n+                if (idx as usize) < substs.len() {\n+                    substs[idx as usize].clone()\n                 } else {\n                     Ty::Param { idx, name }\n                 }\n@@ -413,8 +414,8 @@ impl Ty {\n     pub fn subst_bound_vars(self, substs: &Substs) -> Ty {\n         self.fold(&mut |ty| match ty {\n             Ty::Bound(idx) => {\n-                if (idx as usize) < substs.0.len() {\n-                    substs.0[idx as usize].clone()\n+                if (idx as usize) < substs.len() {\n+                    substs[idx as usize].clone()\n                 } else {\n                     Ty::Bound(idx)\n                 }\n@@ -466,8 +467,8 @@ impl HirDisplay for ApplicationTy {\n             TypeCtor::Never => write!(f, \"!\")?,\n             TypeCtor::Tuple => {\n                 let ts = &self.parameters;\n-                if ts.0.len() == 1 {\n-                    write!(f, \"({},)\", ts.0[0].display(f.db))?;\n+                if ts.len() == 1 {\n+                    write!(f, \"({},)\", ts[0].display(f.db))?;\n                 } else {\n                     write!(f, \"(\")?;\n                     f.write_joined(&*ts.0, \", \")?;\n@@ -491,7 +492,7 @@ impl HirDisplay for ApplicationTy {\n                     CallableDef::Function(_) => write!(f, \"fn {}\", name)?,\n                     CallableDef::Struct(_) | CallableDef::EnumVariant(_) => write!(f, \"{}\", name)?,\n                 }\n-                if self.parameters.0.len() > 0 {\n+                if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&*self.parameters.0, \", \")?;\n                     write!(f, \">\")?;\n@@ -507,7 +508,7 @@ impl HirDisplay for ApplicationTy {\n                 }\n                 .unwrap_or_else(Name::missing);\n                 write!(f, \"{}\", name)?;\n-                if self.parameters.0.len() > 0 {\n+                if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&*self.parameters.0, \", \")?;\n                     write!(f, \">\")?;"}, {"sha": "5edb95c315d0369990f2c0d7a9b0cffdfe8abaad", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99492278ac8c8a9caf3981b4406dcac6724a6a93/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99492278ac8c8a9caf3981b4406dcac6724a6a93/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=99492278ac8c8a9caf3981b4406dcac6724a6a93", "patch": "@@ -61,7 +61,6 @@ where\n     pub fn canonicalize_trait_ref(&mut self, trait_ref: TraitRef) -> Canonical<TraitRef> {\n         let substs = trait_ref\n             .substs\n-            .0\n             .iter()\n             .map(|ty| self.canonicalize_ty(ty.clone()).value)\n             .collect::<Vec<_>>();"}]}