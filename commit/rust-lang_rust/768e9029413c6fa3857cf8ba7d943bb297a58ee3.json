{"sha": "768e9029413c6fa3857cf8ba7d943bb297a58ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGU5MDI5NDEzYzZmYTM4NTdjZjhiYTdkOTQzYmIyOTdhNThlZTM=", "commit": {"author": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-03-16T02:27:40Z"}, "committer": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-04-13T00:12:49Z"}, "message": "First attempt at global_asm! macro", "tree": {"sha": "ff3ec89e044e014c86605a423a2447031d30ade0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3ec89e044e014c86605a423a2447031d30ade0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768e9029413c6fa3857cf8ba7d943bb297a58ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768e9029413c6fa3857cf8ba7d943bb297a58ee3", "html_url": "https://github.com/rust-lang/rust/commit/768e9029413c6fa3857cf8ba7d943bb297a58ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768e9029413c6fa3857cf8ba7d943bb297a58ee3/comments", "author": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14481f72102ba2abb5f314d5537fee90352981c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14481f72102ba2abb5f314d5537fee90352981c5", "html_url": "https://github.com/rust-lang/rust/commit/14481f72102ba2abb5f314d5537fee90352981c5"}], "stats": {"total": 186, "additions": 180, "deletions": 6}, "files": [{"sha": "771031db0c045f99e985f96b2e7caf05332c55da", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -57,6 +57,8 @@ pub enum Def {\n     // Macro namespace\n     Macro(DefId, MacroKind),\n \n+    GlobalAsm(DefId),\n+\n     // Both namespaces\n     Err,\n }\n@@ -144,7 +146,8 @@ impl Def {\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n-            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) => {\n+            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) |\n+            Def::GlobalAsm(id) => {\n                 id\n             }\n \n@@ -185,6 +188,7 @@ impl Def {\n             Def::Label(..) => \"label\",\n             Def::SelfTy(..) => \"self type\",\n             Def::Macro(..) => \"macro\",\n+            Def::GlobalAsm(..) => \"global asm\",\n             Def::Err => \"unresolved item\",\n         }\n     }"}, {"sha": "9615ed4af0692eb10d8f25252292c875174d43a2", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -474,6 +474,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n+        ItemGlobalAsm(_) => {}\n         ItemTy(ref typ, ref type_parameters) => {\n             visitor.visit_id(item.id);\n             visitor.visit_ty(typ);"}, {"sha": "c86aaa7bf672745a9fd74bababce0979e59bcd20", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -646,6 +646,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_global_asm(&mut self, ga: &GlobalAsm) -> P<hir::GlobalAsm> {\n+        P(hir::GlobalAsm {\n+            asm: ga.asm,\n+            ctxt: ga.ctxt,\n+        })\n+    }\n+\n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n         Spanned {\n             node: hir::Variant_ {\n@@ -1288,6 +1295,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::Mod(ref m) => hir::ItemMod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemForeignMod(self.lower_foreign_mod(nm)),\n+            ItemKind::GlobalAsm(ref ga) => hir::ItemGlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::Ty(ref t, ref generics) => {\n                 hir::ItemTy(self.lower_ty(t), self.lower_generics(generics))\n             }"}, {"sha": "7ff5152c71a2cd6f29e306f01502dc68ed775a0b", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -109,6 +109,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 DefPathData::ValueNs(i.ident.name.as_str()),\n             ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n+            ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(ref view_path) => {\n                 match view_path.node {\n                     ViewPathGlob(..) => {}"}, {"sha": "48b8a819fff03eb53d018baebac65a13f04db6de", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1077,6 +1077,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemFn(..) => \"fn\",\n                 ItemMod(..) => \"mod\",\n                 ItemForeignMod(..) => \"foreign mod\",\n+                ItemGlobalAsm(..) => \"global asm\",\n                 ItemTy(..) => \"ty\",\n                 ItemEnum(..) => \"enum\",\n                 ItemStruct(..) => \"struct\","}, {"sha": "562b58844409dc495da711300e5cd3aae63f3af1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1495,6 +1495,12 @@ pub struct ForeignMod {\n     pub items: HirVec<ForeignItem>,\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct GlobalAsm {\n+    pub asm: Symbol,\n+    pub ctxt: SyntaxContext,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: HirVec<Variant>,\n@@ -1686,6 +1692,8 @@ pub enum Item_ {\n     ItemMod(Mod),\n     /// An external module\n     ItemForeignMod(ForeignMod),\n+    /// Module-level inline assembly (from global_asm!)\n+    ItemGlobalAsm(P<GlobalAsm>),\n     /// A type alias, e.g. `type Foo = Bar<u8>`\n     ItemTy(P<Ty>, Generics),\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n@@ -1720,6 +1728,7 @@ impl Item_ {\n             ItemFn(..) => \"function\",\n             ItemMod(..) => \"module\",\n             ItemForeignMod(..) => \"foreign module\",\n+            ItemGlobalAsm(..) => \"global asm\",\n             ItemTy(..) => \"type alias\",\n             ItemEnum(..) => \"enum\",\n             ItemStruct(..) => \"struct\","}, {"sha": "5144f75b1a3634d8449f82d8ca5d6b073ce05ab8", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -633,6 +633,11 @@ impl<'a> State<'a> {\n                 self.print_foreign_mod(nmod, &item.attrs)?;\n                 self.bclose(item.span)?;\n             }\n+            hir::ItemGlobalAsm(ref ga) => {\n+                self.head(&visibility_qualified(&item.vis, \"global asm\"))?;\n+                word(&mut self.s, &ga.asm.as_str())?;\n+                self.end()?\n+            }\n             hir::ItemTy(ref ty, ref params) => {\n                 self.ibox(indent_unit)?;\n                 self.ibox(0)?;"}, {"sha": "5b8dc96f013c26c7310e62288593e2883a04ea9b", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1014,6 +1014,19 @@ impl_stable_hash_for!(struct hir::InlineAsmOutput {\n     is_indirect\n });\n \n+impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for hir::GlobalAsm {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let hir::GlobalAsm {\n+            asm,\n+            ctxt: _\n+        } = *self;\n+\n+        asm.hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for hir::InlineAsm {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'tcx>,"}, {"sha": "63455f94cedff32370213bbaf6f1e200fc8db518", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -267,7 +267,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n-                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) => {}\n+                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) |\n+                    hir::ItemGlobalAsm(..) => {}\n                 }\n             }\n             hir_map::NodeTraitItem(trait_method) => {"}, {"sha": "b9938a04047c96b141fc5a47b7484dcffe5d1c87", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -314,7 +314,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemUse(..) |\n             hir::ItemMod(..) |\n             hir::ItemDefaultImpl(..) |\n-            hir::ItemForeignMod(..) => {\n+            hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all.\n                 intravisit::walk_item(self, item);\n             }"}, {"sha": "3498be9dfdf3205d9dd7b5e1583fe9c9f4077143", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -429,6 +429,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n+            EntryKind::GlobalAsm => Def::GlobalAsm(did),\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |"}, {"sha": "50ebf6737a8d7fa8c6ed8dd4a55d605c8592ed9a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -677,6 +677,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n                 return self.encode_info_for_mod(FromId(item.id, (m, &item.attrs, &item.vis)));\n             }\n             hir::ItemForeignMod(_) => EntryKind::ForeignMod,\n+            hir::ItemGlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemTy(..) => EntryKind::Type,\n             hir::ItemEnum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n@@ -917,6 +918,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n             hir::ItemDefaultImpl(..) |"}, {"sha": "ae20dd1a554bafbebe0e8cae0be5414814634d40", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -267,6 +267,7 @@ pub enum EntryKind<'tcx> {\n     ForeignImmStatic,\n     ForeignMutStatic,\n     ForeignMod,\n+    GlobalAsm,\n     Type,\n     Enum(ReprOptions),\n     Field,"}, {"sha": "92f7e48b6be4853f23321529f98156d4be2cfe4d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -160,7 +160,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 self.prev_level\n             }\n             // Other `pub` items inherit levels from parents\n-            _ => {\n+            hir::ItemConst(..) | hir::ItemEnum(..) | hir::ItemExternCrate(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemFn(..) | hir::ItemMod(..) |\n+            hir::ItemStatic(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n+            hir::ItemTy(..) | hir::ItemUnion(..) | hir::ItemUse(..) => {\n                 if item.vis == hir::Public { self.prev_level } else { None }\n             }\n         };\n@@ -212,7 +215,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ => {}\n+            hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n+            hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) |\n+            hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemDefaultImpl(..) => {}\n         }\n \n         // Mark all items in interfaces of reachable items as reachable\n@@ -225,6 +230,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemUse(..) => {}\n             // The interface is empty\n             hir::ItemDefaultImpl(..) => {}\n+            // The interface is empty\n+            hir::ItemGlobalAsm(..) => {}\n             // Visit everything\n             hir::ItemConst(..) | hir::ItemStatic(..) |\n             hir::ItemFn(..) | hir::ItemTy(..) => {\n@@ -1092,6 +1099,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemMod(..) => {}\n             // Checked in resolve\n             hir::ItemUse(..) => {}\n+            // No subitems\n+            hir::ItemGlobalAsm(..) => {}\n             // Subitems of these items have inherited publicity\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n             hir::ItemTy(..) => {"}, {"sha": "80f853778c744b50c909f011a589802c7da969fd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -268,6 +268,8 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, imported_binding);\n             }\n \n+            ItemKind::GlobalAsm(..) => {}\n+\n             ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n \n             ItemKind::Mod(..) => {"}, {"sha": "6ba214f20f98d3b15ad4d603894231f283c40dd8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1709,7 +1709,7 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) => {\n+            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_)=> {\n                 // do nothing, these are just around to be encoded\n             }\n "}, {"sha": "3e8f7e11b6b432fe9635ab655059349bbe6fbe9f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -341,6 +341,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n+            Def::GlobalAsm(_) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\","}, {"sha": "d822f7bea3a30e57891bb1df04f4166bbbf82d0d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -701,6 +701,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Def::SelfTy(..) |\n             Def::Label(..) |\n             Def::Macro(..) |\n+            Def::GlobalAsm(..) |\n             Def::Err => None,\n         }\n     }"}, {"sha": "479c5b5a1d94d65a53f956878a8eb51d66734a83", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -811,6 +811,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..)         |\n             hir::ItemForeignMod(..)  |\n+            hir::ItemGlobalAsm(..)   |\n             hir::ItemTy(..)          |\n             hir::ItemDefaultImpl(..) |\n             hir::ItemTrait(..)       |"}, {"sha": "a7f9b66f659cb1948038767582e2d879362e4342", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1074,6 +1074,7 @@ fn ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemTrait(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n+                ItemGlobalAsm(..) |\n                 ItemExternCrate(..) |\n                 ItemUse(..) => {\n                     span_bug!("}, {"sha": "1bde1eea37c39a0b16c7032a1a16b6fcabb3c628", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemTy(..) |\n             hir::ItemImpl(..) |\n             hir::ItemDefaultImpl(..) => {}"}, {"sha": "890414e317c62f3bc522d7660cfef818a6ef4478", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -251,6 +251,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             hir::ItemFn(..) |\n             hir::ItemMod(..) |\n             hir::ItemForeignMod(..) |\n+            hir::ItemGlobalAsm(..) |\n             hir::ItemTy(..) => {}\n         }\n     }"}, {"sha": "4252f2981ed6193e1ba5d59166c7c7eea0b037ab", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -373,6 +373,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             }\n             // If we're inlining, skip private items.\n             _ if self.inlining && item.vis != hir::Public => {}\n+            hir::ItemGlobalAsm(..) => {}\n             hir::ItemExternCrate(ref p) => {\n                 let cstore = &self.cx.sess().cstore;\n                 om.extern_crates.push(ExternCrate {"}, {"sha": "131adfe47afdac6646dbd31819235deb53b20e02", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1585,6 +1585,15 @@ pub struct ForeignMod {\n     pub items: Vec<ForeignItem>,\n }\n \n+/// Global inline assembly\n+///\n+/// aka module-level assembly or file-scoped assembly\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+pub struct GlobalAsm {\n+    pub asm: Symbol,\n+    pub ctxt: SyntaxContext,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<Variant>,\n@@ -1812,6 +1821,8 @@ pub enum ItemKind {\n     ///\n     /// E.g. `extern {}` or `extern \"C\" {}`\n     ForeignMod(ForeignMod),\n+    /// Module-level inline assembly (from `global_asm!()`)\n+    GlobalAsm(P<GlobalAsm>),\n     /// A type alias (`type` or `pub type`).\n     ///\n     /// E.g. `type Foo = Bar<u8>;`\n@@ -1864,6 +1875,7 @@ impl ItemKind {\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n             ItemKind::ForeignMod(..) => \"foreign module\",\n+            ItemKind::GlobalAsm(..) => \"global asm\",\n             ItemKind::Ty(..) => \"type alias\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\","}, {"sha": "48bfc050223ab82ab60fe6581280c16fe70410a0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1039,6 +1039,7 @@ impl<'feat> ExpansionConfig<'feat> {\n     feature_tests! {\n         fn enable_quotes = quote,\n         fn enable_asm = asm,\n+        fn enable_global_asm = global_asm,\n         fn enable_log_syntax = log_syntax,\n         fn enable_concat_idents = concat_idents,\n         fn enable_trace_macros = trace_macros,"}, {"sha": "70e4f7a42b68dbe380a6cf7415a5b43022086a5c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -346,6 +346,9 @@ declare_features! (\n \n     // Hack to document `-Z linker-flavor` in The Unstable Book\n     (active, linker_flavor, \"1.18.0\", Some(41142)),\n+\n+    // Allows module-level inline assembly by way of global_asm!()\n+    (active, global_asm, \"1.18.0\", Some(35119)),\n );\n \n declare_features! (\n@@ -982,6 +985,9 @@ pub const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_GLOBAL_ASM: &'static str =\n+    \"module-level inline assembly is experimental and subject to change\";\n+\n pub const EXPLAIN_LOG_SYNTAX: &'static str =\n     \"`log_syntax!` is not stable enough for use and is subject to change\";\n "}, {"sha": "a6ab8e10d9f91aef1cff7fe1944be51965869e5c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -140,6 +140,10 @@ pub trait Folder : Sized {\n         noop_fold_foreign_mod(nm, self)\n     }\n \n+    fn fold_global_asm(&mut self, ga: P<GlobalAsm>) -> P<GlobalAsm> {\n+        noop_fold_global_asm(ga, self)\n+    }\n+\n     fn fold_variant(&mut self, v: Variant) -> Variant {\n         noop_fold_variant(v, self)\n     }\n@@ -412,6 +416,11 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n     }\n }\n \n+pub fn noop_fold_global_asm<T: Folder>(ga: P<GlobalAsm>,\n+                                       _: &mut T) -> P<GlobalAsm> {\n+    ga\n+}\n+\n pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant {\n     Spanned {\n         node: Variant_ {\n@@ -867,6 +876,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         }\n         ItemKind::Mod(m) => ItemKind::Mod(folder.fold_mod(m)),\n         ItemKind::ForeignMod(nm) => ItemKind::ForeignMod(folder.fold_foreign_mod(nm)),\n+        ItemKind::GlobalAsm(ga) => ItemKind::GlobalAsm(folder.fold_global_asm(ga)),\n         ItemKind::Ty(t, generics) => {\n             ItemKind::Ty(folder.fold_ty(t), folder.fold_generics(generics))\n         }"}, {"sha": "433ba3d3693f1a396565ec486d2b2d4e53a5d1e5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -1267,6 +1267,11 @@ impl<'a> State<'a> {\n                 self.print_foreign_mod(nmod, &item.attrs)?;\n                 self.bclose(item.span)?;\n             }\n+            ast::ItemKind::GlobalAsm(ref ga) => {\n+                self.head(&visibility_qualified(&item.vis, \"global_asm!\"))?;\n+                word(&mut self.s, &ga.asm.as_str())?;\n+                self.end()?;\n+            }\n             ast::ItemKind::Ty(ref ty, ref params) => {\n                 self.ibox(INDENT_UNIT)?;\n                 self.ibox(0)?;"}, {"sha": "bae1c56db007c66d137cca850179820e91b77eaa", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -58,6 +58,7 @@ pub trait Visitor<'ast>: Sized {\n     }\n     fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) { walk_foreign_item(self, i) }\n+    fn visit_global_asm(&mut self, ga: &'ast GlobalAsm) { walk_global_asm(self, ga) }\n     fn visit_item(&mut self, i: &'ast Item) { walk_item(self, i) }\n     fn visit_local(&mut self, l: &'ast Local) { walk_local(self, l) }\n     fn visit_block(&mut self, b: &'ast Block) { walk_block(self, b) }\n@@ -253,6 +254,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n+        ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n         ItemKind::Ty(ref typ, ref type_parameters) => {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n@@ -464,6 +466,10 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, foreign_item: &'a\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n+pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n+    // Empty!\n+}\n+\n pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, ref modifier) => {"}, {"sha": "d322d138f04cf72f9156c2b865a6cadb4c9a1fd3", "filename": "src/libsyntax_ext/global_asm.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Module-level assembly support.\n+///\n+/// The macro defined here allows you to specify \"top-level\",\n+/// \"file-scoped\", or \"module-level\" assembly. These synonyms\n+/// all correspond to LLVM's module-level inline assembly instruction.\n+///\n+/// For example, `global_asm!(\"some assembly here\")` translates to\n+/// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n+/// therefore apply.\n+\n+use syntax::ast;\n+use syntax::ext::base;\n+use syntax::ext::base::*;\n+use syntax::codemap;\n+use syntax::feature_gate;\n+use syntax::ptr::P;\n+use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n+use syntax::tokenstream;\n+\n+use syntax::util::small_vector::SmallVector;\n+\n+pub const MACRO: &'static str = \"global_asm\";\n+\n+pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n+                              sp: Span,\n+                              tts: &[tokenstream::TokenTree]) -> Box<base::MacResult + 'cx> {\n+    if !cx.ecfg.enable_global_asm() {\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n+                                       MACRO,\n+                                       sp,\n+                                       feature_gate::GateIssue::Language,\n+                                       feature_gate::EXPLAIN_GLOBAL_ASM);\n+        return DummyResult::any(sp);\n+    }\n+\n+    let mut p = cx.new_parser_from_tts(tts);\n+    let (asm, _) = match expr_to_string(cx,\n+                                        panictry!(p.parse_expr()),\n+                                        \"inline assembly must be a string literal\") {\n+        Some((s, st)) => (s, st),\n+        None => return DummyResult::any(sp),\n+    };\n+\n+    MacEager::items(SmallVector::one(P(ast::Item {\n+        ident: ast::Ident::with_empty_ctxt(Symbol::intern(\"\")),\n+        attrs: Vec::new(),\n+        id: ast::DUMMY_NODE_ID,\n+        node: ast::ItemKind::GlobalAsm(P(ast::GlobalAsm {\n+            asm: asm,\n+            ctxt: cx.backtrace(),\n+        })),\n+        vis: ast::Visibility::Inherited,\n+        span: sp,\n+    })))\n+}"}, {"sha": "e35e79df5852066cea8c85a228e3c89b9a40aa65", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768e9029413c6fa3857cf8ba7d943bb297a58ee3/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=768e9029413c6fa3857cf8ba7d943bb297a58ee3", "patch": "@@ -38,6 +38,7 @@ mod concat_idents;\n mod env;\n mod format;\n mod format_foreign;\n+mod global_asm;\n mod log_syntax;\n mod trace_macros;\n \n@@ -99,6 +100,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n         module_path: expand_mod,\n \n         asm: asm::expand_asm,\n+        global_asm: global_asm::expand_global_asm,\n         cfg: cfg::expand_cfg,\n         concat: concat::expand_syntax_ext,\n         concat_idents: concat_idents::expand_syntax_ext,"}]}