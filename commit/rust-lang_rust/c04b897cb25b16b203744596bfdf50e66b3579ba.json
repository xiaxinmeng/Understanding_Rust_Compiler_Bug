{"sha": "c04b897cb25b16b203744596bfdf50e66b3579ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNGI4OTdjYjI1YjE2YjIwMzc0NDU5NmJmZGY1MGU2NmIzNTc5YmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-06T01:30:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-06T01:30:47Z"}, "message": "core: Resolve some FIXMEs", "tree": {"sha": "6c05513f17a9d69395feb4ec420a82b8b5709b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c05513f17a9d69395feb4ec420a82b8b5709b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04b897cb25b16b203744596bfdf50e66b3579ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04b897cb25b16b203744596bfdf50e66b3579ba", "html_url": "https://github.com/rust-lang/rust/commit/c04b897cb25b16b203744596bfdf50e66b3579ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04b897cb25b16b203744596bfdf50e66b3579ba/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34aa956e68e037c9ca0a1d3adf35de7b31fdd4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/34aa956e68e037c9ca0a1d3adf35de7b31fdd4de", "html_url": "https://github.com/rust-lang/rust/commit/34aa956e68e037c9ca0a1d3adf35de7b31fdd4de"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "534f2a492d2ca9a89f08def82bdfec6aa37bf2c2", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=c04b897cb25b16b203744596bfdf50e66b3579ba", "patch": "@@ -164,28 +164,26 @@ mod ct {\n         let noflags: [flag] = [];\n         if i >= lim { ret {flags: noflags, next: i}; }\n \n-        // FIXME: This recursion generates illegal instructions if the return\n-        // value isn't boxed. Only started happening after the ivec conversion\n         fn more_(f: flag, s: str, i: uint, lim: uint) ->\n-           @{flags: [flag], next: uint} {\n+           {flags: [flag], next: uint} {\n             let next = parse_flags(s, i + 1u, lim);\n             let rest = next.flags;\n             let j = next.next;\n             let curr: [flag] = [f];\n-            ret @{flags: curr + rest, next: j};\n+            ret {flags: curr + rest, next: j};\n         }\n         let more = bind more_(_, s, i, lim);\n         let f = s[i];\n         ret if f == '-' as u8 {\n-                *more(flag_left_justify)\n+                more(flag_left_justify)\n             } else if f == '0' as u8 {\n-                *more(flag_left_zero_pad)\n+                more(flag_left_zero_pad)\n             } else if f == ' ' as u8 {\n-                *more(flag_space_for_sign)\n+                more(flag_space_for_sign)\n             } else if f == '+' as u8 {\n-                *more(flag_sign_always)\n+                more(flag_sign_always)\n             } else if f == '#' as u8 {\n-                *more(flag_alternate)\n+                more(flag_alternate)\n             } else { {flags: noflags, next: i} };\n     }\n     fn parse_count(s: str, i: uint, lim: uint) -> {count: count, next: uint} {"}, {"sha": "c7c037c423810d37fcde1f3746289f7b187e1b34", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c04b897cb25b16b203744596bfdf50e66b3579ba", "patch": "@@ -665,8 +665,6 @@ Returns:\n The original string with all occurances of `from` replaced with `to`\n */\n fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n-    // FIXME (694): Shouldn't have to check this\n-    check (is_not_empty(from));\n     if byte_len(s) == 0u {\n         ret \"\";\n     } else if starts_with(s, from) {"}, {"sha": "9d9bdb58078c236e17bbbdb4d4336ba5adb51855", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=c04b897cb25b16b203744596bfdf50e66b3579ba", "patch": "@@ -73,12 +73,6 @@ fn refcount<T>(t: @T) -> uint {\n     ret rustrt::refcount::<T>(t);\n }\n \n-// FIXME: There's a wrapper for this in the task module and this really\n-// just belongs there\n-fn unsupervise() -> () {\n-    ret rustrt::unsupervise();\n-}\n-\n fn log_str<T>(t: T) -> str {\n     rustrt::shape_log_str(get_type_desc::<T>(), t)\n }"}, {"sha": "ec6f98fbf45c32e0d1455f04583282e8d4c52983", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04b897cb25b16b203744596bfdf50e66b3579ba/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=c04b897cb25b16b203744596bfdf50e66b3579ba", "patch": "@@ -72,6 +72,7 @@ native mod rustrt {\n     fn start_task(id: task, closure: *rust_closure);\n \n     fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+    fn unsupervise();\n }\n \n /* Section: Types */\n@@ -287,10 +288,7 @@ fn join(task_port: joinable_task) -> task_result {\n         if _id == id {\n             ret res\n         } else {\n-            // FIXME: uncomment this when extfmt is moved to core\n-            // in a snapshot.\n-            // fail #fmt[\"join received id %d, expected %d\", _id, id]\n-            fail;\n+            fail #fmt[\"join received id %d, expected %d\", _id, id]\n         }\n       }\n     }\n@@ -303,7 +301,9 @@ Detaches this task from its parent in the task tree\n \n An unsupervised task will not propagate its failure up the task tree\n */\n-fn unsupervise() { ret sys::unsupervise(); }\n+fn unsupervise() {\n+    rustrt::unsupervise();\n+}\n \n /*\n Function: currently_unwinding()"}]}