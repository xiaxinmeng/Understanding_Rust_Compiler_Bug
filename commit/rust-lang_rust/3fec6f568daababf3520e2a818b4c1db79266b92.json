{"sha": "3fec6f568daababf3520e2a818b4c1db79266b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWM2ZjU2OGRhYWJhYmYzNTIwZTJhODE4YjRjMWRiNzkyNjZiOTI=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-19T16:47:02Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-26T10:02:07Z"}, "message": "Improve some suggestions for `filter_map_next`, `filter_next` and `map_unwrap_or` lints", "tree": {"sha": "a14ec6cb25178f6c6ce4e9307a7e48a3d239a4dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14ec6cb25178f6c6ce4e9307a7e48a3d239a4dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fec6f568daababf3520e2a818b4c1db79266b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fec6f568daababf3520e2a818b4c1db79266b92", "html_url": "https://github.com/rust-lang/rust/commit/3fec6f568daababf3520e2a818b4c1db79266b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fec6f568daababf3520e2a818b4c1db79266b92/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "html_url": "https://github.com/rust-lang/rust/commit/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "d3e26a09ad431acb5a906a942a091ec52e3c0e47", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3fec6f568daababf3520e2a818b4c1db79266b92/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fec6f568daababf3520e2a818b4c1db79266b92/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3fec6f568daababf3520e2a818b4c1db79266b92", "patch": "@@ -32,8 +32,7 @@ use crate::utils::{\n     is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n     match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n     single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth,\n-    SpanlessEq,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -2753,16 +2752,15 @@ fn lint_map_unwrap_or_else<'tcx>(\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n         let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n-            span_lint_and_note(\n+            let var_snippet = snippet(cx, map_args[0].span, \"..\");\n+            span_lint_and_sugg(\n                 cx,\n                 MAP_UNWRAP_OR,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\n-                    \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n-                    map_snippet, unwrap_snippet,\n-                ),\n+                \"try this\",\n+                format!(\"{}.map_or_else({}, {})\", var_snippet, unwrap_snippet, map_snippet),\n+                Applicability::MachineApplicable,\n             );\n             return true;\n         } else if same_span && multiline {\n@@ -2852,14 +2850,16 @@ fn lint_filter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, fil\n                    `.find(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n+            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n             // add note if not multi-line\n-            span_lint_and_note(\n+            span_lint_and_sugg(\n                 cx,\n                 FILTER_NEXT,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\"replace `filter({0}).next()` with `find({0})`\", filter_snippet),\n+                \"try this\",\n+                format!(\"{}.find({})\", iter_snippet, filter_snippet),\n+                Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint(cx, FILTER_NEXT, expr.span, msg);\n@@ -2908,13 +2908,15 @@ fn lint_filter_map_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>,\n                    `.find_map(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n-            span_lint_and_note(\n+            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n+            span_lint_and_sugg(\n                 cx,\n                 FILTER_MAP_NEXT,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\"replace `filter_map({0}).next()` with `find_map({0})`\", filter_snippet),\n+                \"try this\",\n+                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n+                Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint(cx, FILTER_MAP_NEXT, expr.span, msg);"}, {"sha": "bcedf11e5365df6beceb1784cccdc2409cc3baac", "filename": "tests/ui/filter_map_next.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=3fec6f568daababf3520e2a818b4c1db79266b92", "patch": "@@ -2,10 +2,9 @@ error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly\n   --> $DIR/filter_map_next.rs:6:32\n    |\n LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n    |\n    = note: `-D clippy::filter-map-next` implied by `-D warnings`\n-   = note: replace `filter_map(|s| s.parse().ok()).next()` with `find_map(|s| s.parse().ok())`\n \n error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n   --> $DIR/filter_map_next.rs:10:26"}, {"sha": "1975abb3e9fd1d1393dd5afd2c8df410ed5d00c2", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=3fec6f568daababf3520e2a818b4c1db79266b92", "patch": "@@ -109,9 +109,7 @@ LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or_else(|| 0);\n-   | |_____________________________^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n+   | |_____________________________^ help: try this: `opt.map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:55:13\n@@ -137,25 +135,19 @@ error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be do\n   --> $DIR/map_unwrap_or.rs:88:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:90:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:91:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `res.map_or_else(|e| 0, |x| x + 1)`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "2df1941aaaa4a080d37293dc6afc99484b1808d2", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fec6f568daababf3520e2a818b4c1db79266b92/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=3fec6f568daababf3520e2a818b4c1db79266b92", "patch": "@@ -12,10 +12,9 @@ error: called `filter(..).next()` on an `Iterator`. This is more succinctly expr\n   --> $DIR/methods.rs:126:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `v.iter().find(|&x| *x < 0)`\n    |\n    = note: `-D clippy::filter-next` implied by `-D warnings`\n-   = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n   --> $DIR/methods.rs:129:13"}]}