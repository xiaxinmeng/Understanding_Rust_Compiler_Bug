{"sha": "4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNTFhNjZkNjc0YzMyYjNkOGVlZWJjZDFhZTI3NjYxMWU5ZjRjMTI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-22T23:43:43Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-06T03:40:54Z"}, "message": "Don't share `id_map` and `deref_id_map`\n\nAll the tests passed, so it doesn't seem they need to be shared.\nPlus they should be item/page-specific.\n\nI'm not sure why they were shared before. I think the reason `id_map`\nworked as a shared value before is that it is cleared before rendering\neach item (in `render_item`). And then I'm guessing `deref_id_map`\nworked because it's a hashmap keyed by `DefId`, so there was no overlap\n(though I'm guessing we could have had issues in the future).\n\nNote that `id_map` currently still has to be cleared because otherwise\nchild items would inherit the `id_map` of their parent. I'm hoping to\nfigure out a way to stop cloning `Context`, but until then we have to\nreset `id_map`.", "tree": {"sha": "d599b56312a4e36256ce2b9c56eac444dbdcd59c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d599b56312a4e36256ce2b9c56eac444dbdcd59c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "html_url": "https://github.com/rust-lang/rust/commit/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc879e76bb428d42831179829606dede0c84f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc879e76bb428d42831179829606dede0c84f94", "html_url": "https://github.com/rust-lang/rust/commit/3bc879e76bb428d42831179829606dede0c84f94"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "c2dfb64b2ab0f724817ac1dabf86f0a5fcf5fcda", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "patch": "@@ -6,7 +6,7 @@ use std::rc::Rc;\n use std::sync::mpsc::channel;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -30,7 +30,7 @@ use crate::formats::item_type::ItemType;\n use crate::formats::FormatRenderer;\n use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n-use crate::html::markdown::{self, plain_text_summary, ErrorCodes};\n+use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n use crate::html::{layout, sources};\n \n /// Major driving force in all rustdoc rendering. This contains information\n@@ -52,6 +52,11 @@ crate struct Context<'tcx> {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     pub(super) render_redirect_pages: bool,\n+    /// The map used to ensure all generated 'id=' attributes are unique.\n+    pub(super) id_map: RefCell<IdMap>,\n+    /// Tracks section IDs for `Deref` targets so they match in both the main\n+    /// body and the sidebar.\n+    pub(super) deref_id_map: RefCell<FxHashMap<DefId, String>>,\n     /// Shared mutable state.\n     ///\n     /// Issue for improving the situation: [#82381][]\n@@ -72,7 +77,7 @@ crate struct Context<'tcx> {\n \n // `Context` is cloned a lot, so we don't want the size to grow unexpectedly.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Context<'_>, 72);\n+rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n impl<'tcx> Context<'tcx> {\n     pub(super) fn path(&self, filename: &str) -> PathBuf {\n@@ -95,7 +100,7 @@ impl<'tcx> Context<'tcx> {\n     }\n \n     pub(super) fn derive_id(&self, id: String) -> String {\n-        let mut map = self.shared.id_map.borrow_mut();\n+        let mut map = self.id_map.borrow_mut();\n         map.derive(id)\n     }\n \n@@ -153,8 +158,8 @@ impl<'tcx> Context<'tcx> {\n         };\n \n         {\n-            self.shared.id_map.borrow_mut().reset();\n-            self.shared.id_map.borrow_mut().populate(&INITIAL_IDS);\n+            self.id_map.borrow_mut().reset();\n+            self.id_map.borrow_mut().populate(&INITIAL_IDS);\n         }\n \n         if !self.render_redirect_pages {\n@@ -387,8 +392,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             edition,\n             codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n             playground,\n-            id_map: RefCell::new(id_map),\n-            deref_id_map: RefCell::new(FxHashMap::default()),\n             all: RefCell::new(AllTypes::new()),\n             errors: receiver,\n             redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n@@ -418,6 +421,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: Vec::new(),\n             dst,\n             render_redirect_pages: false,\n+            id_map: RefCell::new(id_map),\n+            deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::new(scx),\n             cache: Rc::new(cache),\n         };"}, {"sha": "339c3ec15f69219a7e3e2f2ad826216e448bcbbc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c51a66d674c32b3d8eeebcd1ae276611e9f4c12/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4c51a66d674c32b3d8eeebcd1ae276611e9f4c12", "patch": "@@ -70,7 +70,7 @@ use crate::html::format::{\n     PrintWithSpace, WhereClause,\n };\n use crate::html::layout;\n-use crate::html::markdown::{self, ErrorCodes, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{self, ErrorCodes, Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -121,11 +121,6 @@ crate struct SharedContext<'tcx> {\n     crate edition: Edition,\n     codes: ErrorCodes,\n     playground: Option<markdown::Playground>,\n-    /// The map used to ensure all generated 'id=' attributes are unique.\n-    id_map: RefCell<IdMap>,\n-    /// Tracks section IDs for `Deref` targets so they match in both the main\n-    /// body and the sidebar.\n-    deref_id_map: RefCell<FxHashMap<DefId, String>>,\n     all: RefCell<AllTypes>,\n     /// Storage for the errors produced while generating documentation so they\n     /// can be printed together at the end.\n@@ -650,7 +645,7 @@ fn render_markdown(\n     prefix: &str,\n     is_hidden: bool,\n ) {\n-    let mut ids = cx.shared.id_map.borrow_mut();\n+    let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n         \"<div class=\\\"docblock{}\\\">{}{}</div>\",\n@@ -810,7 +805,7 @@ fn short_item_info(\n \n         if let Some(note) = note {\n             let note = note.as_str();\n-            let mut ids = cx.shared.id_map.borrow_mut();\n+            let mut ids = cx.id_map.borrow_mut();\n             let html = MarkdownHtml(\n                 &note,\n                 &mut ids,\n@@ -849,7 +844,7 @@ fn short_item_info(\n         message.push_str(&format!(\" ({})\", feature));\n \n         if let Some(unstable_reason) = reason {\n-            let mut ids = cx.shared.id_map.borrow_mut();\n+            let mut ids = cx.id_map.borrow_mut();\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n                 message,\n@@ -1189,8 +1184,7 @@ fn render_assoc_items(\n                     type_.print(cx.cache())\n                 )));\n                 debug!(\"Adding {} to deref id map\", type_.print(cx.cache()));\n-                cx.shared\n-                    .deref_id_map\n+                cx.deref_id_map\n                     .borrow_mut()\n                     .insert(type_.def_id_full(cx.cache()).unwrap(), id.clone());\n                 write!(\n@@ -1497,7 +1491,7 @@ fn render_impl(\n         }\n \n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            let mut ids = cx.shared.id_map.borrow_mut();\n+            let mut ids = cx.id_map.borrow_mut();\n             write!(\n                 w,\n                 \"<div class=\\\"docblock\\\">{}</div>\",\n@@ -2046,7 +2040,7 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n                 .flat_map(|i| get_methods(i.inner_impl(), true, &mut used_links, deref_mut, c))\n                 .collect::<Vec<_>>();\n             if !ret.is_empty() {\n-                let deref_id_map = cx.shared.deref_id_map.borrow();\n+                let deref_id_map = cx.deref_id_map.borrow();\n                 let id = deref_id_map\n                     .get(&real_target.def_id_full(cx.cache()).unwrap())\n                     .expect(\"Deref section without derived id\");"}]}