{"sha": "e3695468b742ff307da3cf29684128ed0785ee03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjk1NDY4Yjc0MmZmMzA3ZGEzY2YyOTY4NDEyOGVkMDc4NWVlMDM=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:20:27Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:20:27Z"}, "message": "libstd: impl `Orderable` for `BigUint`/`BigInt`", "tree": {"sha": "45304cfa311f809eea963ed13eb830a4779e3317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45304cfa311f809eea963ed13eb830a4779e3317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3695468b742ff307da3cf29684128ed0785ee03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3695468b742ff307da3cf29684128ed0785ee03", "html_url": "https://github.com/rust-lang/rust/commit/e3695468b742ff307da3cf29684128ed0785ee03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3695468b742ff307da3cf29684128ed0785ee03/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce0795de51b5305bcb48e69a5fcf8cb2e169a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce0795de51b5305bcb48e69a5fcf8cb2e169a30", "html_url": "https://github.com/rust-lang/rust/commit/5ce0795de51b5305bcb48e69a5fcf8cb2e169a30"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "c35415c53317cca3420ee9f1a99be5afb07eb10a", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e3695468b742ff307da3cf29684128ed0785ee03/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3695468b742ff307da3cf29684128ed0785ee03/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=e3695468b742ff307da3cf29684128ed0785ee03", "patch": "@@ -17,7 +17,7 @@ A BigInt is a combination of BigUint and Sign.\n */\n \n use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n-use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix};\n+use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n \n /**\n A BigDigit is a BigUint's composing element.\n@@ -146,6 +146,24 @@ impl FromStr for BigUint {\n \n impl Num for BigUint {}\n \n+impl Orderable for BigUint {\n+    #[inline(always)]\n+    fn min(&self, other: &BigUint) -> BigUint {\n+        if self < other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &BigUint) -> BigUint {\n+        if self > other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &BigUint, mx: &BigUint) -> BigUint {\n+        if self > mx { mx.clone() } else\n+        if self < mn { mn.clone() } else { self.clone() }\n+    }\n+}\n+\n impl Shl<uint, BigUint> for BigUint {\n     #[inline(always)]\n     fn shl(&self, rhs: &uint) -> BigUint {\n@@ -792,6 +810,24 @@ impl FromStr for BigInt {\n \n impl Num for BigInt {}\n \n+impl Orderable for BigInt {\n+    #[inline(always)]\n+    fn min(&self, other: &BigInt) -> BigInt {\n+        if self < other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &BigInt) -> BigInt {\n+        if self > other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &BigInt, mx: &BigInt) -> BigInt {\n+        if self > mx { mx.clone() } else\n+        if self < mn { mn.clone() } else { self.clone() }\n+    }\n+}\n+\n impl Shl<uint, BigInt> for BigInt {\n     #[inline(always)]\n     fn shl(&self, rhs: &uint) -> BigInt {"}]}