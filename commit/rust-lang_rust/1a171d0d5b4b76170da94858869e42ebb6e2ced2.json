{"sha": "1a171d0d5b4b76170da94858869e42ebb6e2ced2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTcxZDBkNWI0Yjc2MTcwZGE5NDg1ODg2OWU0MmViYjZlMmNlZDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T21:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T21:44:52Z"}, "message": "Rollup merge of #72788 - matthewjasper:projection-bound-validation, r=nikomatsakis\n\nProjection bound validation\n\nDuring selection we use bounds declared on associated types (e.g. `type X: Copy`) to satisfy trait/projection bounds. This would be fine so long as those bounds are checked on any impls/trait objects. For simple cases they are because the bound `Self::X: Copy` gets normalized when we check the impl.\n\nHowever, for default values with specialization and higher-ranked bounds from GATs or otherwise, we can't normalize when checking the impl, and so we use the bound from the trait to prove that the bound applies to the impl, which is clearly unsound.\n\nThis PR makes 2 fixes for this:\n\n1. Requiring that the bounds on the trait apply to a projection type with the corresponding substs, so a bound `for<'a> <Self as X<'a>>::U: Copy` on the trait cannot be used to prove `<T as X<'_>>::U: Copy`.\n2. Actually checking that the bounds that we still allow apply to generic/default associated types.\n\nOpening for a crater run.\n\nCloses #68641\nCloses #68642\nCloses #68643\nCloses #68644\nCloses #68645\nCloses #68656\n\nr? @ghost", "tree": {"sha": "5b0d30b01b14d0f25366d25c9a66b642313dc2af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b0d30b01b14d0f25366d25c9a66b642313dc2af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a171d0d5b4b76170da94858869e42ebb6e2ced2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7oNUCRBK7hj4Ov3rIwAAdHIIAK2W3SAexkJEzvF0NIsJQCzY\ne2UNUPNmeu+R19C7eIU06JdYZgN4kjzhF5Mvs3bQH3Lp7qAiKnQZ8YE//DMPI7Kz\nnCvfbOb+mPWnv1t3WUudNa/yy4tDfJWJqPJDarCTeO+K1dHYhRPDyBSEKxZCUsum\nCqpMScQjttWjnqgBRaskP/bm4Atlz7o80YOv6YqNkiIRhQ7MoXG/D1soSVtuBYVV\nYinPjsYhmmyUQCAiIM+9AOicKvryPrwDjSnVc3nLzmzcTgOWyYRgLzTQFzp0CXO1\n20FOodi+kwF+cturS6u/twDiLRGy2wIpdPim6xidOCRviWLr/TytFkDowKcPTmI=\n=Sc3B\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b0d30b01b14d0f25366d25c9a66b642313dc2af\nparent a1404a93f9632d768d7268934e6380a9b9614834\nparent 5e8c9f4fae106d0ba836a0268ab4e44c19d63f2a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592689492 -0700\ncommitter GitHub <noreply@github.com> 1592689492 -0700\n\nRollup merge of #72788 - matthewjasper:projection-bound-validation, r=nikomatsakis\n\nProjection bound validation\n\nDuring selection we use bounds declared on associated types (e.g. `type X: Copy`) to satisfy trait/projection bounds. This would be fine so long as those bounds are checked on any impls/trait objects. For simple cases they are because the bound `Self::X: Copy` gets normalized when we check the impl.\n\nHowever, for default values with specialization and higher-ranked bounds from GATs or otherwise, we can't normalize when checking the impl, and so we use the bound from the trait to prove that the bound applies to the impl, which is clearly unsound.\n\nThis PR makes 2 fixes for this:\n\n1. Requiring that the bounds on the trait apply to a projection type with the corresponding substs, so a bound `for<'a> <Self as X<'a>>::U: Copy` on the trait cannot be used to prove `<T as X<'_>>::U: Copy`.\n2. Actually checking that the bounds that we still allow apply to generic/default associated types.\n\nOpening for a crater run.\n\nCloses #68641\nCloses #68642\nCloses #68643\nCloses #68644\nCloses #68645\nCloses #68656\n\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a171d0d5b4b76170da94858869e42ebb6e2ced2", "html_url": "https://github.com/rust-lang/rust/commit/1a171d0d5b4b76170da94858869e42ebb6e2ced2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a171d0d5b4b76170da94858869e42ebb6e2ced2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1404a93f9632d768d7268934e6380a9b9614834", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1404a93f9632d768d7268934e6380a9b9614834", "html_url": "https://github.com/rust-lang/rust/commit/a1404a93f9632d768d7268934e6380a9b9614834"}, {"sha": "5e8c9f4fae106d0ba836a0268ab4e44c19d63f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c9f4fae106d0ba836a0268ab4e44c19d63f2a", "html_url": "https://github.com/rust-lang/rust/commit/5e8c9f4fae106d0ba836a0268ab4e44c19d63f2a"}], "stats": {"total": 2074, "additions": 1584, "deletions": 490}, "files": [{"sha": "383979f8640759e97640a69ee1d5db5a3652d226", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,9 +1,8 @@\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n-use crate::traits;\n use rustc_data_structures::captures::Captures;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n@@ -311,18 +310,14 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     fn region_bounds_declared_on_associated_item(\n         &self,\n         assoc_item_def_id: DefId,\n-    ) -> impl Iterator<Item = ty::Region<'tcx>> + 'cx + Captures<'tcx> {\n+    ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let assoc_item = tcx.associated_item(assoc_item_def_id);\n-        let trait_def_id = assoc_item.container.assert_trait();\n-        let trait_predicates = tcx.predicates_of(trait_def_id).predicates.iter().map(|(p, _)| *p);\n-        let identity_substs = InternalSubsts::identity_for_item(tcx, assoc_item_def_id);\n-        let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n-        self.collect_outlives_from_predicate_list(\n-            move |ty| ty == identity_proj,\n-            traits::elaborate_predicates(tcx, trait_predicates).map(|o| o.predicate),\n-        )\n-        .map(|b| b.1)\n+        let predicates = tcx.projection_predicates(assoc_item_def_id);\n+        predicates\n+            .into_iter()\n+            .filter_map(|p| p.to_opt_type_outlives())\n+            .filter_map(|p| p.no_bound_vars())\n+            .map(|b| b.1)\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`."}, {"sha": "43b6d8da03a79b6e9d734f2a02040f14ea10ed30", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -25,8 +25,6 @@ pub use self::project::{\n     Normalized, NormalizedTy, ProjectionCache, ProjectionCacheEntry, ProjectionCacheKey,\n     ProjectionCacheStorage, Reveal,\n };\n-crate use self::util::elaborate_predicates;\n-\n pub use rustc_middle::traits::*;\n \n /// An `Obligation` represents some trait reference (e.g., `int: Eq`) for"}, {"sha": "ca51d5b949c06a072beeb67fa5b7bcaaddb7809f", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -133,6 +133,23 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n+        /// Returns the list of predicates that can be used for\n+        /// `SelectionCandidate::ProjectionCandidate` and\n+        /// `ProjectionTyCandidate::TraitDef`.\n+        /// Specifically this is the bounds (equivalent to) those\n+        /// written on the trait's type definition, or those\n+        /// after the `impl` keyword\n+        ///\n+        /// type X: Bound + 'lt\n+        ///         ^^^^^^^^^^^\n+        /// impl Debug + Display\n+        ///      ^^^^^^^^^^^^^^^\n+        ///\n+        /// `key` is the `DefId` of the associated type or opaque type.\n+        query projection_predicates(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n+            desc { |tcx| \"finding projection predicates for `{}`\", tcx.def_path_str(key) }\n+        }\n+\n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }"}, {"sha": "d13be4f42853482b382b6ed0d501dd6e5a16aa0d", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -93,7 +93,6 @@ impl FlagComputation {\n \n             &ty::Bound(debruijn, _) => {\n                 self.add_binder(debruijn);\n-                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n             &ty::Placeholder(..) => {\n@@ -216,7 +215,6 @@ impl FlagComputation {\n             }\n             ty::ConstKind::Bound(debruijn, _) => {\n                 self.add_binder(debruijn);\n-                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_CT_PARAM);"}, {"sha": "1d680c35636752b20b8b231a89b1b15a3770730b", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1589,19 +1589,16 @@ impl RegionKind {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n-                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n-                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PARAM;\n-                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::ReFree { .. } => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;"}, {"sha": "0cbbb95fd6feff598d35e4080a71b9aefbe55f91", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -333,6 +333,17 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// in a different item, with `target_substs` as the base for\n     /// the target impl/trait, with the source child-specific\n     /// parameters (e.g., method parameters) on top of that base.\n+    ///\n+    /// For example given:\n+    ///\n+    /// trait X<S> { fn f<T>(); }\n+    /// impl<U> X<U> for U { fn f<V>() {} }\n+    ///\n+    /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.\n+    /// * If `source_ancestor` is the def_id of the trait.\n+    /// * If `target_substs` is `[U]`, the substs for the impl.\n+    /// * Then we will return `[U, T]`, the subst for `f` in the impl that\n+    ///   are needed for it to match the trait.\n     pub fn rebase_onto(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "903eee672cf1fbbc2cfe9760a7a16303249081a9", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -883,7 +883,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         })\n                         .collect();\n                     if !lifetimes.is_empty() {\n-                        self.trait_ref_hack = true;\n                         let next_early_index = self.next_early_index();\n                         let scope = Scope::Binder {\n                             lifetimes,\n@@ -895,9 +894,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         let result = self.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n                             this.visit_ty(&bounded_ty);\n+                            this.trait_ref_hack = true;\n                             walk_list!(this, visit_param_bound, bounds);\n+                            this.trait_ref_hack = false;\n                         });\n-                        self.trait_ref_hack = false;\n                         result\n                     } else {\n                         self.visit_ty(&bounded_ty);\n@@ -932,13 +932,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n         let should_pop_missing_lt = self.is_trait_ref_fn_scope(trait_ref);\n-        if !self.trait_ref_hack\n+\n+        let trait_ref_hack = take(&mut self.trait_ref_hack);\n+        if !trait_ref_hack\n             || trait_ref.bound_generic_params.iter().any(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => true,\n                 _ => false,\n             })\n         {\n-            if self.trait_ref_hack {\n+            if trait_ref_hack {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     trait_ref.span,\n@@ -968,10 +970,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n                 walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n                 this.visit_trait_ref(&trait_ref.trait_ref);\n-            })\n+            });\n         } else {\n             self.visit_trait_ref(&trait_ref.trait_ref);\n         }\n+        self.trait_ref_hack = trait_ref_hack;\n         if should_pop_missing_lt {\n             self.missing_named_lifetime_spots.pop();\n         }"}, {"sha": "fc689ffd96fe1c93a7c6fe5c7e1eb21d8382b801", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -896,9 +896,12 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n \n     let tcx = selcx.tcx();\n     // Check whether the self-type is itself a projection.\n-    let (def_id, substs) = match obligation_trait_ref.self_ty().kind {\n-        ty::Projection(ref data) => (data.trait_ref(tcx).def_id, data.substs),\n-        ty::Opaque(def_id, substs) => (def_id, substs),\n+    // If so, extract what we know from the trait and try to come up with a good answer.\n+    let bounds = match obligation_trait_ref.self_ty().kind {\n+        ty::Projection(ref data) => {\n+            tcx.projection_predicates(data.item_def_id).subst(tcx, data.substs)\n+        }\n+        ty::Opaque(def_id, substs) => tcx.projection_predicates(def_id).subst(tcx, substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity.\n@@ -908,17 +911,13 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n         _ => return,\n     };\n \n-    // If so, extract what we know from the trait and try to come up with a good answer.\n-    let trait_predicates = tcx.predicates_of(def_id);\n-    let bounds = trait_predicates.instantiate(tcx, substs);\n-    let bounds = elaborate_predicates(tcx, bounds.predicates.into_iter()).map(|o| o.predicate);\n     assemble_candidates_from_predicates(\n         selcx,\n         obligation,\n         obligation_trait_ref,\n         candidate_set,\n         ProjectionTyCandidate::TraitDef,\n-        bounds,\n+        bounds.iter(),\n     )\n }\n \n@@ -1484,6 +1483,12 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         );\n         return Progress { ty: tcx.ty_error(), obligations: nested };\n     }\n+    // If we're trying to normalize `<Vec<u32> as X>::A<S>` using\n+    //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:\n+    //\n+    // * `obligation.predicate.substs` is `[Vec<u32>, S]`\n+    // * `substs` is `[u32]`\n+    // * `substs` ends up as `[u32, S]`\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);"}, {"sha": "630a24752859b3096d63fb9506460dba02a54fc0", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1273,9 +1273,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             placeholder_trait_predicate,\n         );\n \n-        let (def_id, substs) = match placeholder_trait_predicate.trait_ref.self_ty().kind {\n-            ty::Projection(ref data) => (data.trait_ref(self.tcx()).def_id, data.substs),\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+        let tcx = self.infcx.tcx;\n+        let predicates = match placeholder_trait_predicate.trait_ref.self_ty().kind {\n+            ty::Projection(ref data) => {\n+                tcx.projection_predicates(data.item_def_id).subst(tcx, data.substs)\n+            }\n+            ty::Opaque(def_id, substs) => tcx.projection_predicates(def_id).subst(tcx, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -1285,32 +1288,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        debug!(\n-            \"match_projection_obligation_against_definition_bounds: \\\n-             def_id={:?}, substs={:?}\",\n-            def_id, substs\n-        );\n \n-        let predicates_of = self.tcx().predicates_of(def_id);\n-        let bounds = predicates_of.instantiate(self.tcx(), substs);\n-        debug!(\n-            \"match_projection_obligation_against_definition_bounds: \\\n-             bounds={:?}\",\n-            bounds\n-        );\n-\n-        let elaborated_predicates =\n-            util::elaborate_predicates(self.tcx(), bounds.predicates.into_iter());\n-        let matching_bound = elaborated_predicates.filter_to_traits().find(|bound| {\n-            self.infcx.probe(|_| {\n-                self.match_projection(\n-                    obligation,\n-                    *bound,\n-                    placeholder_trait_predicate.trait_ref,\n-                    &placeholder_map,\n-                    snapshot,\n-                )\n-            })\n+        let matching_bound = predicates.iter().find_map(|bound| {\n+            if let ty::PredicateKind::Trait(bound, _) = bound.kind() {\n+                let bound = bound.to_poly_trait_ref();\n+                if self.infcx.probe(|_| {\n+                    self.match_projection(\n+                        obligation,\n+                        bound,\n+                        placeholder_trait_predicate.trait_ref,\n+                        &placeholder_map,\n+                        snapshot,\n+                    )\n+                }) {\n+                    return Some(bound);\n+                }\n+            }\n+            None\n         });\n \n         debug!("}, {"sha": "595992d01dd2d00f43096896ae8de9e538b845e5", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,8 +1,10 @@\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_infer::traits::util;\n use rustc_middle::hir::map as hir_map;\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n@@ -365,6 +367,133 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     fn_like.asyncness()\n }\n \n+/// For associated types we allow bounds written on the associated type\n+/// (`type X: Trait`) to be used as candidates. We also allow the same bounds\n+/// when desugared as bounds on the trait `where Self::X: Trait`.\n+///\n+/// Note that this filtering is done with the items identity substs to\n+/// simplify checking that these bounds are met in impls. This means that\n+/// a bound such as `for<'b> <Self as X<'b>>::U: Clone` can't be used, as in\n+/// `hr-associated-type-bound-1.rs`.\n+fn associated_type_projection_predicates(\n+    tcx: TyCtxt<'_>,\n+    assoc_item_def_id: DefId,\n+) -> &'_ ty::List<ty::Predicate<'_>> {\n+    let generic_trait_bounds = tcx.predicates_of(assoc_item_def_id);\n+    // We include predicates from the trait as well to handle\n+    // `where Self::X: Trait`.\n+    let item_bounds = generic_trait_bounds.instantiate_identity(tcx);\n+    let item_predicates = util::elaborate_predicates(tcx, item_bounds.predicates.into_iter());\n+\n+    let assoc_item_ty = ty::ProjectionTy {\n+        item_def_id: assoc_item_def_id,\n+        substs: InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n+    };\n+\n+    let predicates = item_predicates.filter_map(|obligation| {\n+        let pred = obligation.predicate;\n+        match pred.kind() {\n+            ty::PredicateKind::Trait(tr, _) => {\n+                if let ty::Projection(p) = tr.skip_binder().self_ty().kind {\n+                    if p == assoc_item_ty {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::Projection(proj) => {\n+                if let ty::Projection(p) = proj.skip_binder().projection_ty.self_ty().kind {\n+                    if p == assoc_item_ty {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::TypeOutlives(outlives) => {\n+                if let ty::Projection(p) = outlives.skip_binder().0.kind {\n+                    if p == assoc_item_ty {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    });\n+\n+    let result = tcx.mk_predicates(predicates);\n+    debug!(\n+        \"associated_type_projection_predicates({}) = {:?}\",\n+        tcx.def_path_str(assoc_item_def_id),\n+        result\n+    );\n+    result\n+}\n+\n+/// Opaque types don't have the same issues as associated types: the only\n+/// predicates on an opaque type (excluding those it inherits from its parent\n+/// item) should be of the form we're expecting.\n+fn opaque_type_projection_predicates(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> &'_ ty::List<ty::Predicate<'_>> {\n+    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+\n+    let bounds = tcx.predicates_of(def_id);\n+    let predicates =\n+        util::elaborate_predicates(tcx, bounds.predicates.into_iter().map(|&(pred, _)| pred));\n+\n+    let filtered_predicates = predicates.filter_map(|obligation| {\n+        let pred = obligation.predicate;\n+        match pred.kind() {\n+            ty::PredicateKind::Trait(tr, _) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) = tr.skip_binder().self_ty().kind {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::Projection(proj) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) =\n+                    proj.skip_binder().projection_ty.self_ty().kind\n+                {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::TypeOutlives(outlives) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) = outlives.skip_binder().0.kind {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                } else {\n+                    // These can come from elaborating other predicates\n+                    return None;\n+                }\n+            }\n+            // These can come from elaborating other predicates\n+            ty::PredicateKind::RegionOutlives(_) => return None,\n+            _ => {}\n+        }\n+        tcx.sess.delay_span_bug(\n+            obligation.cause.span(tcx),\n+            &format!(\"unexpected predicate {:?} on opaque type\", pred),\n+        );\n+        None\n+    });\n+\n+    let result = tcx.mk_predicates(filtered_predicates);\n+    debug!(\"opaque_type_projection_predicates({}) = {:?}\", tcx.def_path_str(def_id), result);\n+    result\n+}\n+\n+fn projection_predicates(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Predicate<'_>> {\n+    match tcx.def_kind(def_id) {\n+        DefKind::AssocTy => associated_type_projection_predicates(tcx, def_id),\n+        DefKind::OpaqueTy => opaque_type_projection_predicates(tcx, def_id),\n+        k => bug!(\"projection_predicates called on {}\", k.descr(def_id)),\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         asyncness,\n@@ -381,6 +510,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        projection_predicates,\n         ..*providers\n     };\n }"}, {"sha": "4c39b2a3b612dbfafb5446425d507cd0371b449d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 147, "deletions": 4, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -4,15 +4,17 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::util::ExplicitSelf;\n-use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n+use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n \n use super::{potentially_plural_count, FnCtxt, Inherited};\n+use std::iter;\n \n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait.\n@@ -1057,13 +1059,15 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorReported> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n-        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)\n+        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)?;\n+\n+        compare_projection_bounds(tcx, trait_ty, impl_ty, impl_ty_span, impl_trait_ref)\n     })();\n }\n \n /// The equivalent of [compare_predicate_entailment], but for associated types\n /// instead of associated functions.\n-fn compare_type_predicate_entailment(\n+fn compare_type_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_ty: &ty::AssocItem,\n     impl_ty_span: Span,\n@@ -1165,6 +1169,145 @@ fn compare_type_predicate_entailment(\n     })\n }\n \n+/// Validate that `ProjectionCandidate`s created for this associated type will\n+/// be valid.\n+///\n+/// Usually given\n+///\n+/// trait X { type Y: Copy } impl X for T { type Y = S; }\n+///\n+/// We are able to normalize `<T as X>::U` to `S`, and so when we check the\n+/// impl is well-formed we have to prove `S: Copy`.\n+///\n+/// For default associated types the normalization is not possible (the value\n+/// from the impl could be overridden). We also can't normalize generic\n+/// associated types (yet) because they contain bound parameters.\n+fn compare_projection_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ty: &ty::AssocItem,\n+    impl_ty: &ty::AssocItem,\n+    impl_ty_span: Span,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> Result<(), ErrorReported> {\n+    let have_gats = tcx.features().generic_associated_types;\n+    if impl_ty.defaultness.is_final() && !have_gats {\n+        // For \"final\", non-generic associate type implementations, we\n+        // don't need this as described above.\n+        return Ok(());\n+    }\n+\n+    let param_env = tcx.param_env(impl_ty.def_id);\n+\n+    // Given\n+    //\n+    // impl<A, B> Foo<u32> for (A, B) {\n+    //     type Bar<C> =...\n+    // }\n+    //\n+    // - `impl_substs` would be `[A, B, C]`\n+    // - `rebased_substs` would be `[(A, B), u32, C]`, combining the substs from\n+    //    the *trait* with the generic associated type parameters.\n+    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    let rebased_substs =\n+        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n+    let impl_ty_value = tcx.type_of(impl_ty.def_id);\n+\n+    // Map the predicate from the trait to the corresponding one for the impl.\n+    // For example:\n+    //\n+    // trait X<A> { type Y<'a>: PartialEq<A> } impl X for T { type Y<'a> = &'a S; }\n+    // impl<'x> X<&'x u32> for () { type Y<'c> = &'c u32; }\n+    //\n+    // For the `for<'a> <<Self as X<A>>::Y<'a>: PartialEq<A>` bound, this\n+    // function would translate and partially normalize\n+    // `[<Self as X<A>>::Y<'a>, A]` to `[&'a u32, &'x u32]`.\n+    let translate_predicate_substs = move |predicate_substs: SubstsRef<'tcx>| {\n+        tcx.mk_substs(\n+            iter::once(impl_ty_value.into())\n+                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, rebased_substs))),\n+        )\n+    };\n+\n+    tcx.infer_ctxt().enter(move |infcx| {\n+        let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n+        let infcx = &inh.infcx;\n+        let mut selcx = traits::SelectionContext::new(&infcx);\n+\n+        let impl_ty_hir_id = tcx.hir().as_local_hir_id(impl_ty.def_id.expect_local());\n+        let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n+        let cause = ObligationCause::new(\n+            impl_ty_span,\n+            impl_ty_hir_id,\n+            ObligationCauseCode::ItemObligation(trait_ty.def_id),\n+        );\n+\n+        let predicates = tcx.projection_predicates(trait_ty.def_id);\n+\n+        debug!(\"compare_projection_bounds: projection_predicates={:?}\", predicates);\n+\n+        for predicate in predicates {\n+            let concrete_ty_predicate = match predicate.kind() {\n+                ty::PredicateKind::Trait(poly_tr, c) => poly_tr\n+                    .map_bound(|tr| {\n+                        let trait_substs = translate_predicate_substs(tr.trait_ref.substs);\n+                        ty::TraitRef { def_id: tr.def_id(), substs: trait_substs }\n+                    })\n+                    .with_constness(*c)\n+                    .to_predicate(tcx),\n+                ty::PredicateKind::Projection(poly_projection) => poly_projection\n+                    .map_bound(|projection| {\n+                        let projection_substs =\n+                            translate_predicate_substs(projection.projection_ty.substs);\n+                        ty::ProjectionPredicate {\n+                            projection_ty: ty::ProjectionTy {\n+                                substs: projection_substs,\n+                                item_def_id: projection.projection_ty.item_def_id,\n+                            },\n+                            ty: projection.ty.subst(tcx, rebased_substs),\n+                        }\n+                    })\n+                    .to_predicate(tcx),\n+                ty::PredicateKind::TypeOutlives(poly_outlives) => poly_outlives\n+                    .map_bound(|outlives| {\n+                        ty::OutlivesPredicate(impl_ty_value, outlives.1.subst(tcx, rebased_substs))\n+                    })\n+                    .to_predicate(tcx),\n+                _ => bug!(\"unexepected projection predicate kind: `{:?}`\", predicate),\n+            };\n+\n+            let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n+                &mut selcx,\n+                param_env,\n+                normalize_cause.clone(),\n+                &concrete_ty_predicate,\n+            );\n+\n+            debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n+\n+            inh.register_predicates(obligations);\n+            inh.register_predicate(traits::Obligation::new(\n+                cause.clone(),\n+                param_env,\n+                normalized_predicate,\n+            ));\n+        }\n+\n+        // Check that all obligations are satisfied by the implementation's\n+        // version.\n+        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(errors, None, false);\n+            return Err(ErrorReported);\n+        }\n+\n+        // Finally, resolve all regions. This catches wily misuses of\n+        // lifetime parameters.\n+        let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n+        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, &[]);\n+\n+        Ok(())\n+    })\n+}\n+\n fn assoc_item_kind_str(impl_item: &ty::AssocItem) -> &'static str {\n     match impl_item.kind {\n         ty::AssocKind::Const => \"const\","}, {"sha": "1594d65e9bdee2c54effc76cfab16febb2973f17", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -2281,7 +2281,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             &ty_trait_item,\n                             impl_trait_ref,\n                             opt_trait_span,\n-                        )\n+                        );\n                     } else {\n                         let mut err = struct_span_err!(\n                             tcx.sess,"}, {"sha": "054165f2b09773d8ab62c9692f837b408b18ba9a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 82, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n@@ -1692,6 +1692,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n \n     let mut is_trait = None;\n     let mut is_default_impl_trait = None;\n+    let mut is_trait_associated_type = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let constness = icx.default_constness_for_trait_bounds();\n@@ -1701,7 +1702,12 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n-        Node::TraitItem(item) => &item.generics,\n+        Node::TraitItem(item) => {\n+            if let hir::TraitItemKind::Type(bounds, _) = item.kind {\n+                is_trait_associated_type = Some((bounds, item.span));\n+            }\n+            &item.generics\n+        }\n \n         Node::ImplItem(item) => &item.generics,\n \n@@ -1925,10 +1931,21 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n         }\n     }\n \n-    // Add predicates from associated type bounds.\n-    if let Some((self_trait_ref, trait_items)) = is_trait {\n+    // Add predicates from associated type bounds (`type X: Bound`)\n+    if tcx.features().generic_associated_types {\n+        // New behavior: bounds declared on associate type are predicates of that\n+        // associated type. Not the default because it needs more testing.\n+        if let Some((bounds, span)) = is_trait_associated_type {\n+            let projection_ty =\n+                tcx.mk_projection(def_id, InternalSubsts::identity_for_item(tcx, def_id));\n+\n+            predicates.extend(associated_item_bounds(tcx, def_id, bounds, projection_ty, span))\n+        }\n+    } else if let Some((self_trait_ref, trait_items)) = is_trait {\n+        // Current behavior: bounds declared on associate type are predicates\n+        // of its parent trait.\n         predicates.extend(trait_items.iter().flat_map(|trait_item_ref| {\n-            associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n+            trait_associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n         }))\n     }\n \n@@ -1958,7 +1975,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     result\n }\n \n-fn associated_item_predicates(\n+fn trait_associated_item_predicates(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     self_trait_ref: ty::TraitRef<'tcx>,\n@@ -1971,92 +1988,40 @@ fn associated_item_predicates(\n         _ => return Vec::new(),\n     };\n \n-    let is_gat = !tcx.generics_of(item_def_id).params.is_empty();\n-\n-    let mut had_error = false;\n-\n-    let mut unimplemented_error = |arg_kind: &str| {\n-        if !had_error {\n-            tcx.sess\n-                .struct_span_err(\n-                    trait_item.span,\n-                    &format!(\"{}-generic associated types are not yet implemented\", arg_kind),\n-                )\n-                .note(\n-                    \"for more information, see issue #44265 \\\n-                     <https://github.com/rust-lang/rust/issues/44265> for more information\",\n-                )\n-                .emit();\n-            had_error = true;\n-        }\n-    };\n-\n-    let mk_bound_param = |param: &ty::GenericParamDef, _: &_| {\n-        match param.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx\n-                .mk_region(ty::RegionKind::ReLateBound(\n-                    ty::INNERMOST,\n-                    ty::BoundRegion::BrNamed(param.def_id, param.name),\n-                ))\n-                .into(),\n-            // FIXME(generic_associated_types): Use bound types and constants\n-            // once they are handled by the trait system.\n-            ty::GenericParamDefKind::Type { .. } => {\n-                unimplemented_error(\"type\");\n-                tcx.ty_error().into()\n-            }\n-            ty::GenericParamDefKind::Const => {\n-                unimplemented_error(\"const\");\n-                tcx.const_error(tcx.type_of(param.def_id)).into()\n-            }\n-        }\n-    };\n+    if !tcx.generics_of(item_def_id).params.is_empty() {\n+        // For GATs the substs provided to the mk_projection call below are\n+        // wrong. We should emit a feature gate error if we get here so skip\n+        // this type.\n+        tcx.sess.delay_span_bug(trait_item.span, \"gats used without feature gate\");\n+        return Vec::new();\n+    }\n \n-    let bound_substs = if is_gat {\n-        // Given:\n-        //\n-        // trait X<'a, B, const C: usize> {\n-        //     type T<'d, E, const F: usize>: Default;\n-        // }\n-        //\n-        // We need to create predicates on the trait:\n-        //\n-        // for<'d, E, const F: usize>\n-        // <Self as X<'a, B, const C: usize>>::T<'d, E, const F: usize>: Sized + Default\n-        //\n-        // We substitute escaping bound parameters for the generic\n-        // arguments to the associated type which are then bound by\n-        // the `Binder` around the the predicate.\n-        //\n-        // FIXME(generic_associated_types): Currently only lifetimes are handled.\n-        self_trait_ref.substs.extend_to(tcx, item_def_id.to_def_id(), mk_bound_param)\n-    } else {\n-        self_trait_ref.substs\n-    };\n+    let assoc_ty = tcx.mk_projection(\n+        tcx.hir().local_def_id(trait_item.hir_id).to_def_id(),\n+        self_trait_ref.substs,\n+    );\n \n-    let assoc_ty =\n-        tcx.mk_projection(tcx.hir().local_def_id(trait_item.hir_id).to_def_id(), bound_substs);\n+    associated_item_bounds(tcx, def_id, bounds, assoc_ty, trait_item.span)\n+}\n \n+fn associated_item_bounds(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    bounds: &'tcx [hir::GenericBound<'tcx>],\n+    projection_ty: Ty<'tcx>,\n+    span: Span,\n+) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     let bounds = AstConv::compute_bounds(\n         &ItemCtxt::new(tcx, def_id),\n-        assoc_ty,\n+        projection_ty,\n         bounds,\n         SizedByDefault::Yes,\n-        trait_item.span,\n+        span,\n     );\n \n-    let predicates = bounds.predicates(tcx, assoc_ty);\n+    let predicates = bounds.predicates(tcx, projection_ty);\n \n-    if is_gat {\n-        // We use shifts to get the regions that we're substituting to\n-        // be bound by the binders in the `Predicate`s rather that\n-        // escaping.\n-        let shifted_in = ty::fold::shift_vars(tcx, &predicates, 1);\n-        let substituted = shifted_in.subst(tcx, bound_substs);\n-        ty::fold::shift_out_vars(tcx, &substituted, 1)\n-    } else {\n-        predicates\n-    }\n+    predicates\n }\n \n /// Converts a specific `GenericBound` from the AST into a set of"}, {"sha": "497b86eeab88d02e8f49f12a5618c834dd44d635", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,18 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(&self, x: &Self::U) {\n+        <Self::U>::clone(x);\n+    }\n+}\n+\n+impl X<'_> for i32 {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone`\n+}\n+\n+fn main() {\n+    1i32.f(\"abc\");\n+}"}, {"sha": "7ef2faef9c6e702afcf819a7bd6f903736e7ce32", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-1.rs:12:14\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<i32 as X<'b>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7ff0fede28cfed9e08f1a2c085f0a5690ee54dcf", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(&self, x: &Self::U) {\n+        <Self::U>::clone(x);\n+    }\n+}\n+\n+impl X<'_> for u32\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U = str;\n+}\n+\n+fn main() {\n+    1u32.f(\"abc\");\n+    //~^ ERROR no method named `f` found for type `u32` in the current scope\n+}"}, {"sha": "2a364d349d77e95053af603d4426f7553114ee3d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `f` found for type `u32` in the current scope\n+  --> $DIR/hr-associated-type-bound-2.rs:19:10\n+   |\n+LL |     1u32.f(\"abc\");\n+   |          ^ method not found in `u32`\n+   |\n+   = note: the method `f` exists but the following trait bounds were not satisfied:\n+           `<u32 as X<'b>>::U: std::clone::Clone`\n+           which is required by `u32: X`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "7c64ae38caf60cbb54cfb212b5e60ec3c9f467fb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,14 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+}\n+fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+    <<T as X<'_>>::U>::clone(x);\n+}\n+\n+pub fn main() {\n+    f::<dyn X<'_, U = str>>(\"abc\");\n+}"}, {"sha": "db966875c708f30e32bd2bb121b5f278da5191e7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-object.rs:7:13\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n+   |             ^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a65f8a8c498b789654de9ff07eb548e21d8f37e4", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,20 @@\n+trait Y<'a, T: ?Sized>\n+where\n+    T: Y<'a, Self>,\n+    for<'b> <Self as Y<'b, T>>::V: Clone,\n+    for<'b> <T as Y<'b, Self>>::V: Clone,\n+{\n+    type V: ?Sized;\n+    fn g(&self, x: &Self::V) {\n+        <Self::V>::clone(x);\n+    }\n+}\n+\n+impl<'a> Y<'a, u8> for u8 {\n+    type V = str;\n+    //~^ ERROR the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+}\n+\n+fn main() {\n+    1u8.g(\"abc\");\n+}"}, {"sha": "347a5818dce31599e51a0f508560f4e7352be49d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-1.rs:14:14\n+   |\n+LL | trait Y<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n+   |                                    ----- required by this bound in `Y`\n+...\n+LL |     type V = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9f849b0327669b05e83a3ae8953e877fd8b8362b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+trait Z<'a, T: ?Sized>\n+where\n+    T: Z<'a, u16>,\n+    //~^ the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+    //~| the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+    for<'b> <T as Z<'b, u16>>::W: Clone,\n+{\n+    type W: ?Sized;\n+    fn h(&self, x: &T::W) {\n+        <T::W>::clone(x);\n+    }\n+}\n+\n+impl<'a> Z<'a, u16> for u16 {\n+    type W = str;\n+    //~^ ERROR the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone\n+}\n+\n+fn main() {\n+    1u16.h(\"abc\");\n+}"}, {"sha": "e06777e36a8c5f061d937f54615e97b54ba7061c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,51 @@\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+LL | where\n+LL |     T: Z<'a, u16>,\n+   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+...\n+LL |     type W = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+LL | where\n+LL |     T: Z<'a, u16>,\n+   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9aca59f8ce6d75bc56000eb85a0f07aa41a3bc88", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+trait X<'a, T>\n+where\n+    for<'b> T: X<'b, T>,\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, (T,)> for (S,) {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<(i32,)>>::f(\"abc\");\n+}"}, {"sha": "ff56f60e4c9e57c8caa844a9f55f420bd5317e73", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-3.rs:15:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ffe43c674c3dcec2a43dcf51de15bdb5b8fdc2ad", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+trait X<'a, T>\n+where\n+    for<'b> (T,): X<'b, T>,\n+    for<'b> <(T,) as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<(T,) as X<'_, T>>::U) {\n+        <<(T,) as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, T> for (S,) {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<i32>>::f(\"abc\");\n+}"}, {"sha": "c41efb8b6e1a2696d49e6ef2675602c91f83e58f", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-4.rs:13:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n+   |                                    ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "dcca0b3ce92aa01d6fba7503d174db14bc850e2d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,41 @@\n+// ignore-tidy-linelength\n+\n+trait Cycle: Sized {\n+    type Next: Cycle<Next = Self>;\n+}\n+\n+impl<T> Cycle for Box<T> {\n+    type Next = Vec<T>;\n+}\n+\n+impl<T> Cycle for Vec<T> {\n+    type Next = Box<T>;\n+}\n+\n+trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+where\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+    for<'b> T::Next: X<'b, T::Next>,\n+    for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, Vec<T>> for S {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+impl<S, T> X<'_, Box<T>> for S {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <i32 as X<Box<i32>>>::f(\"abc\");\n+}"}, {"sha": "39c191e9747771739aa1ec6d5e3791448c83795e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,67 @@\n+error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4b8018cb43024e7a73078bf6233b9d9631a5b186", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,20 @@\n+trait X<'a, T>\n+where\n+    for<'b> T: X<'b, T>,\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, T> for (S,) {\n+    //~^ ERROR the trait bound `for<'b> T: X<'b, T>` is not satisfied\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<i32>>::f(\"abc\");\n+}"}, {"sha": "83845d3a9410e5d4544bdb3eb2a1652027b8ea2c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-6.rs:14:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b, T>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> T: X<'b, T>,\n+   |                -------- required by this bound in `X`\n+...\n+LL | impl<S, T> X<'_, T> for (S,) {\n+   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<S, T: for<'b> X<'b, T>> X<'_, T> for (S,) {\n+   |          ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0d4567a55fc99c6ddaa4c37b74c094951e632747", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+trait UnsafeCopy<'a, T: Copy>\n+where\n+    for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+{\n+    type Item;\n+\n+    fn bug(item: &Self::Item) -> () {\n+        let x: T = **item;\n+        &x as *const _;\n+    }\n+}\n+\n+impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n+    //~^ ERROR the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+    type Item = T;\n+    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref\n+}\n+\n+pub fn main() {\n+    <&'static str>::bug(&\"\");\n+}"}, {"sha": "5ab57410c441bae9a56810e829d5c4f468343656", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+  --> $DIR/hr-associated-type-projection-1.rs:15:17\n+   |\n+LL | trait UnsafeCopy<'a, T: Copy>\n+   |       ---------- required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+   |                                                --------------------------- required by this bound in `UnsafeCopy`\n+...\n+LL |     type Item = T;\n+   |                 ^ the trait `for<'b> std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::ops::Deref>\n+             <&mut T as std::ops::Deref>\n+\n+error[E0277]: the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+  --> $DIR/hr-associated-type-projection-1.rs:13:33\n+   |\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n+   |                                 ^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref {\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "17548d7b9e88c5551bf7a8b49b2cd132146c7eab", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -3,11 +3,9 @@ use std::ops::Deref;\n trait PointerFamily<U> {\n     type Pointer<T>: Deref<Target = T>;\n     //~^ ERROR generic associated types are unstable\n-    //~| ERROR type-generic associated types are not yet implemented\n     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n     //~^ ERROR generic associated types are unstable\n     //~| ERROR where clauses on associated types are unstable\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n struct Foo;"}, {"sha": "8499b1ab70f5d02a4bcbf7bef7d713ac5083064a", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -8,7 +8,7 @@ LL |     type Pointer<T>: Deref<Target = T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n    |\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Pointer<Usize> = Box<Usize>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:18:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:23:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:21:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,30 +53,14 @@ LL |     type Assoc where Self: Sized;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:28:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:26:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/feature-gate-generic_associated_types.rs:4:5\n-   |\n-LL |     type Pointer<T>: Deref<Target = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n-   |\n-LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "5fbae02573c62a31a95e8e9c16cfd633bf6e74e7", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,72 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+// A Collection trait and collection families. Based on\n+// http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n+// associated-type-constructors-part-2-family-traits/\n+\n+// check that we don't normalize with trait defaults.\n+\n+trait Collection<T> {\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n+    type Family: CollectionFamily;\n+    // Test associated type defaults with parameters\n+    type Sibling<U>: Collection<U> =\n+        <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+\n+    fn empty() -> Self;\n+\n+    fn add(&mut self, value: T);\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+}\n+\n+trait CollectionFamily {\n+    type Member<T>: Collection<T, Family = Self>;\n+}\n+\n+struct VecFamily;\n+\n+impl CollectionFamily for VecFamily {\n+    type Member<T> = Vec<T>;\n+}\n+\n+impl<T> Collection<T> for Vec<T> {\n+    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n+    type Family = VecFamily;\n+\n+    fn empty() -> Self {\n+        Vec::new()\n+    }\n+\n+    fn add(&mut self, value: T) {\n+        self.push(value)\n+    }\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+        self.iter()\n+    }\n+}\n+\n+fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+where\n+    C: Collection<i32>,\n+{\n+    let mut res = <C::Family as CollectionFamily>::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+    //~^ ERROR mismatched types\n+}\n+\n+fn use_floatify() {\n+    let a = vec![1i32, 2, 3];\n+    let c = floatify_sibling(&a);\n+    assert_eq!(Some(&1.0), c.iterate().next());\n+}\n+\n+fn main() {\n+    use_floatify();\n+}"}, {"sha": "ca02b2603ba64703160e84ad0e93e0fcf13d2308", "filename": "src/test/ui/generic-associated-types/collections-project-default.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/collections-project-default.rs:60:5\n+   |\n+LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+   |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type\n+...\n+LL |     res\n+   |     ^^^ expected Collection::Sibling, found CollectionFamily::Member\n+   |\n+   = note: expected associated type `<C as Collection<i32>>::Sibling<f32>`\n+              found associated type `<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1b5b9c181fb612ea83926eee74f460b1d9f4a7ea", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -6,13 +6,14 @@\n // http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n \n+// run-pass\n+\n trait Collection<T> {\n-    type Iter<'iter>: Iterator<Item=&'iter T>;\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n     type Family: CollectionFamily;\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^^ ERROR type-generic associated types are not yet implemented\n \n     fn empty() -> Self;\n \n@@ -23,7 +24,6 @@ trait Collection<T> {\n \n trait CollectionFamily {\n     type Member<T>: Collection<T, Family = Self>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n struct VecFamily;\n@@ -33,7 +33,7 @@ impl CollectionFamily for VecFamily {\n }\n \n impl<T> Collection<T> for Vec<T> {\n-    type Iter<'iter> = std::slice::Iter<'iter, T>;\n+    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n     type Family = VecFamily;\n \n     fn empty() -> Self {\n@@ -53,30 +53,19 @@ fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>\n where\n     C: Collection<i32>,\n {\n-    let mut res = C::Family::Member::<f32>::empty();\n-    for &v in ints.iterate() {\n-        res.add(v as f32);\n-    }\n-    res\n-}\n-\n-fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-where\n-    C: Collection<i32>,\n-{\n-    let mut res = C::Family::Member::<f32>::empty();\n+    let mut res = <C::Family as CollectionFamily>::Member::<f32>::empty();\n     for &v in ints.iterate() {\n         res.add(v as f32);\n     }\n     res\n }\n \n fn use_floatify() {\n-    let a = vec![1i32, 2, 3];\n-    let b = floatify(a);\n-    println!(\"{}\", b.iterate().next());\n-    let c = floatify_sibling(a);\n-    println!(\"{}\", c.iterate().next());\n+    let a = vec![1, 2, 3];\n+    let b = floatify(&a);\n+    assert_eq!(Some(&1.0), b.iterate().next());\n }\n \n-fn main() {}\n+fn main() {\n+    use_floatify();\n+}"}, {"sha": "fb06d5e49a3916a2483989b7f646042eb0fde91a", "filename": "src/test/ui/generic-associated-types/collections.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr?ref=a1404a93f9632d768d7268934e6380a9b9614834", "patch": "@@ -1,19 +0,0 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/collections.rs:13:5\n-   |\n-LL | /     type Sibling<U>: Collection<U> =\n-LL | |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-   | |_________________________________________________________________________^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/collections.rs:25:5\n-   |\n-LL |     type Member<T>: Collection<T, Family = Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ff9d61658f4eb2a1da4aad9ebad725cb0ce66881", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,7 +1,7 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#30472) normalize enough to handle this.\n+// check-pass\n \n use std::ops::Deref;\n \n@@ -17,7 +17,6 @@ trait Baz {\n }\n \n impl<T> Baz for T where T: Foo {\n-//~^ ERROR type mismatch resolving\n     type Quux<'a> where T: 'a = T;\n \n     type Baa<'a> where T: 'a = &'a <T as Foo>::Bar<'a, 'static>;"}, {"sha": "b9468b3330b44e5b4a794fe2a7b2824b837dbe34", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=a1404a93f9632d768d7268934e6380a9b9614834", "patch": "@@ -1,18 +0,0 @@\n-error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n-  --> $DIR/construct_with_other_type.rs:19:9\n-   |\n-LL | impl<T> Baz for T where T: Foo {\n-   |      -  ^^^ expected type parameter `T`, found associated type\n-   |      |\n-   |      this type parameter\n-   |\n-   = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n-              found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n-help: consider further restricting this bound\n-   |\n-LL | impl<T> Baz for T where T: Foo + Baz<Quux = T> {\n-   |                                ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "c1d68812e9356e269a24e2f06a1b16d790522d7b", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -6,7 +6,6 @@ struct Foo;\n trait MyTrait {\n     type Item<T>;\n     //~^ ERROR generic associated types are unstable [E0658]\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n impl MyTrait for Foo {"}, {"sha": "34f536dbe8f647b3a96aa8fa9506e0d4325e5561", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -8,22 +8,14 @@ LL |     type Item<T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:13:5\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:12:5\n    |\n LL |     type Item<T> = T;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n-   |\n-LL |     type Item<T>;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "1a94796535c14b1f444097f7c8cca8a624e9aada", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -9,11 +9,8 @@ use std::fmt::{Display, Debug};\n trait Foo {\n     type Assoc where Self: Sized;\n     type Assoc2<T> where T: Display;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type Assoc3<T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n-    type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n+    type WithDefault<'a, T: Debug + 'a>: ?Sized = dyn Iterator<Item=T>;\n     type NoGenerics;\n }\n \n@@ -23,6 +20,7 @@ impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n     type Assoc3<T> where T: Iterator = Vec<T>;\n+    //~^ impl has stricter requirements than trait\n     type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;\n }"}, {"sha": "4d02f2c46a6d062af9f07e308c9f106d6274ddc1", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,26 +1,12 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:11:5\n-   |\n-LL |     type Assoc2<T> where T: Display;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:13:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/generic-associated-types-where.rs:22:5\n    |\n LL |     type Assoc3<T>;\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:15:5\n-   |\n-LL |     type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+   |     --------------- definition of `Assoc3` from trait\n+...\n+LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::iter::Iterator`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "de2b978460f7f19020cc78d6e99384733d0dd405", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -5,13 +5,13 @@\n \n trait Foo {\n     type Assoc3<T>;\n-    //~^ type-generic associated types are not yet implemented\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     type Assoc3<T> where T: Iterator = Vec<T>;\n+    //~^ ERROR impl has stricter requirements than trait\n }\n \n fn main() {}"}, {"sha": "bc5c40ff029f9d3c8cf71e51c875a48d73675c6d", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,10 +1,12 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/issue-47206-where-clause.rs:7:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-47206-where-clause.rs:13:5\n    |\n LL |     type Assoc3<T>;\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+   |     --------------- definition of `Assoc3` from trait\n+...\n+LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::iter::Iterator`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "404be59a36d9258b2da2fb91976e7ba41a0c8c64", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,11 +1,14 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(generic-associated-types) Investigate why this doesn't compile.\n+// check-pass\n \n trait Iterator {\n     type Item<'a>: 'a;\n-    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n+}\n+\n+impl Iterator for () {\n+    type Item<'a> = &'a ();\n }\n \n fn main() {}"}, {"sha": "4b06baa09ffbfa574c57475a7a3d5dcdec8556e4", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=a1404a93f9632d768d7268934e6380a9b9614834", "patch": "@@ -1,10 +0,0 @@\n-error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n-  --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n-   |\n-LL | trait Iterator {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a>: 'a;\n-   |                    ^^ required by this bound in `Iterator`\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa35a3e8b04d1f609078d4aa5a47944d34d7d0d2", "filename": "src/test/ui/generic-associated-types/issue-67424.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,7 +7,6 @@ trait Trait1 {\n trait Trait2 {\n     type Type1<B>: Trait1<A=B>;\n     //~^ ERROR: generic associated types are unstable\n-    //~| ERROR: type-generic associated types are not yet implemented\n }\n \n fn main() {}"}, {"sha": "bbb7d56f5928e071a8e82d8e628f7bb7e89424fc", "filename": "src/test/ui/generic-associated-types/issue-67424.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,14 +7,6 @@ LL |     type Type1<B>: Trait1<A=B>;\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/issue-67424.rs:8:5\n-   |\n-LL |     type Type1<B>: Trait1<A=B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "71f9b2967dc5838c8178170a7f44fbabf9c0e553", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,32 @@\n+// Regression test for #68641\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait UnsafeCopy {\n+    type Item<'a>: Copy;\n+\n+    fn copy<'a>(item: &Self::Item<'a>) -> Self::Item<'a> {\n+        *item\n+    }\n+}\n+\n+impl<T> UnsafeCopy for T {\n+    type Item<'a> = T;\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+}\n+\n+fn main() {\n+    let mut s = String::from(\"Hello world!\");\n+\n+    let copy = String::copy(&s);\n+\n+    // Do we indeed point to the samme memory?\n+    assert!(s.as_ptr() == copy.as_ptr());\n+\n+    // Any use of `copy` is certeinly UB after this\n+    drop(s);\n+\n+    // UB UB UB UB UB!!\n+    println!(\"{}\", copy);\n+}"}, {"sha": "834bc3b7878f20759228a7bb2fe2411cdf1e282a", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68641-check-gat-bounds.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-68641-check-gat-bounds.rs:15:5\n+   |\n+LL |     type Item<'a>: Copy;\n+   |     -------------------- required by `UnsafeCopy::Item`\n+...\n+LL |     type Item<'a> = T;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> UnsafeCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c99073c13284df70da827045e47a710595031c46", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68642\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <fn() -> usize>::callme(|| 1);\n+}"}, {"sha": "89cc5dfd06018fdc4502f744a271ed9b5e8e70a9", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:15:5\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "24133e75cccee0f37289820cd5e3c5825eb06380", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68643\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+pub fn main() {\n+    <fn()>::callme(|| {});\n+}"}, {"sha": "efd3287853f0302d0285a9f910a5a59c94d15d27", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68643-broken-mir.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68643-broken-mir.rs:15:5\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "22620c61b83903c8294e5c7646985abb72a2f75a", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68644\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <u8>::callme(0);\n+}"}, {"sha": "5da924a512f0099b9952652d3a462286377dd239", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68644-codegen-selection.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68644-codegen-selection.rs:15:5\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "423b80e8476f445cc9a288820c0557f5201ba45e", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68645\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <&dyn Iterator<Item = u8>>::callme(&std::iter::once(1));\n+}"}, {"sha": "12d84ab6a369b4d234167159022b7c2850c0a7e6", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:15:5\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4ccd42ba6432d22027e8f272461d1c9bd05bc4d5", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for #68656\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait UnsafeCopy<T: Copy> {\n+    type Item<'a>: std::ops::Deref<Target = T>;\n+\n+    fn bug<'a>(item: &Self::Item<'a>) -> () {\n+        let x: T = **item;\n+        &x as *const _;\n+    }\n+}\n+\n+impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n+    type Item<'a> = T;\n+    //~^ ERROR type mismatch resolving `<T as std::ops::Deref>::Target == T`\n+}\n+\n+fn main() {\n+    <&'static str>::bug(&\"\");\n+}"}, {"sha": "e1ceeac3196a8900388bb51396a87a498ca235e0", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,30 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68656-unsized-values.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0271]: type mismatch resolving `<T as std::ops::Deref>::Target == T`\n+  --> $DIR/issue-68656-unsized-values.rs:16:5\n+   |\n+LL |     type Item<'a>: std::ops::Deref<Target = T>;\n+   |     ------------------------------------------- required by `UnsafeCopy::Item`\n+...\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n+   |      - this type parameter\n+LL |     type Item<'a> = T;\n+   |     ^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |\n+   = note: expected type parameter `T`\n+             found associated type `<T as std::ops::Deref>::Target`\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: Copy + std::ops::Deref + std::ops::Deref<Target = T>> UnsafeCopy<T> for T {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "600a69006c1ea6184a008166e2796f4777a7993f", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,7 +1,7 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#30472) normalize enough to handle this.\n+// run-pass\n \n trait Iterable {\n     type Item<'a> where Self: 'a;\n@@ -13,39 +13,35 @@ trait Iterable {\n // Impl for struct type\n impl<T> Iterable for Vec<T> {\n     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    //~^ ERROR type mismatch resolving\n     type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR type mismatch resolving\n-        self.iter()\n+        self[..].iter()\n     }\n }\n \n // Impl for a primitive type\n impl<T> Iterable for [T] {\n     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    //~^ ERROR type mismatch resolving\n     type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR type mismatch resolving\n         self.iter()\n     }\n }\n \n-fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+fn make_iter<'a, I: Iterable + ?Sized>(it: &'a I) -> I::Iter<'a> {\n     it.iter()\n }\n \n-fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+fn get_first<'a, I: Iterable + ?Sized>(it: &'a I) -> Option<I::Item<'a>> {\n     it.iter().next()\n }\n \n fn main() {\n     let v = vec![1, 2, 3];\n-    assert_eq!(v, make_iter(&v).copied().collect());\n-    assert_eq!(v, make_iter(&*v).copied().collect());\n-    assert_eq!(1, get_first(&v));\n-    assert_eq!(1, get_first(&*v));\n+    assert_eq!(v, make_iter(&v).copied().collect::<Vec<_>>());\n+    assert_eq!(v, make_iter(&*v).copied().collect::<Vec<_>>());\n+    assert_eq!(Some(&1), get_first(&v));\n+    assert_eq!(Some(&1), get_first(&*v));\n }"}, {"sha": "6e75462122513fae82463f1fc6c527b28bafeb90", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=a1404a93f9632d768d7268934e6380a9b9614834", "patch": "@@ -1,59 +0,0 @@\n-error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:15:33\n-   |\n-LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   |\n-   = note:    expected reference `&T`\n-           found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:27:33\n-   |\n-LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   |\n-   = note:    expected reference `&T`\n-           found associated type `<[T] as Iterable>::Item<'_>`\n-   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:19:30\n-   |\n-LL | trait Iterable {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a> where Self: 'a;\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n-   |                             --------------------- required by this bound in `Iterable`\n-...\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n-   |\n-   = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-                    found reference `&T`\n-   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:31:30\n-   |\n-LL | trait Iterable {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a> where Self: 'a;\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n-   |                             --------------------- required by this bound in `Iterable`\n-...\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n-   |\n-   = note: expected associated type `<[T] as Iterable>::Item<'_>`\n-                    found reference `&T`\n-   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "3ba7d043d0759a636d402cea317b26ee3c6a2b9a", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -34,12 +34,11 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where B: Add<Output = B>, B: std::ops::Add<Output = B> {\n-    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+impl<B: Add> Add for E<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+        Self(self.0 + rhs.0)\n     }\n }\n "}, {"sha": "962d2db9476bd73a0b690c940831ec83d567d308", "filename": "src/test/ui/generic-associated-types/missing-bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -34,12 +34,11 @@ impl<B> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+impl<B: Add> Add for E<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+        Self(self.0 + rhs.0)\n     }\n }\n "}, {"sha": "630ceac093ef29764728918fdc1b96b2b78362ee", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,15 +1,3 @@\n-error: equality constraints are not yet supported in `where` clauses\n-  --> $DIR/missing-bounds.rs:37:33\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^ not supported\n-   |\n-   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n-help: if `Output` is an associated type you're trying to set, use the associated type binding syntax\n-   |\n-LL | impl<B: Add> Add for E<B> where B: Add<Output = B> {\n-   |                                 ^^^^^^^^^^^^^^^^^^\n-\n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:11:11\n    |\n@@ -55,23 +43,7 @@ help: consider restricting type parameter `B`\n LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/missing-bounds.rs:42:14\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-   |      - this type parameter\n-...\n-LL |         Self(self.0 + rhs.0)\n-   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n-   |\n-   = note: expected type parameter `B`\n-             found associated type `<B as std::ops::Add>::Output`\n-help: consider further restricting type parameter `B`\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: std::ops::Add<Output = B> {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "f4d09fc1539da658835677719c8b349770930930", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,18 +7,14 @@ trait Foo {\n     type B<'a, 'b>;\n     type C;\n     type D<T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type E<'a, T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type FErr1 = Self::E<'static, 'static>;\n     //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n     type FErr2<T> = Self::E<'static, T, u32>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n-    //~| ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR wrong number of type arguments: expected 1, found 2\n }\n \n fn main() {}"}, {"sha": "ed090e302cefacb513de11b64e4b8f82e1af296e", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,53 +1,21 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:9:5\n-   |\n-LL |     type D<T>;\n-   |     ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:11:5\n-   |\n-LL |     type E<'a, T>;\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:14:5\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:19:5\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:16:35\n+  --> $DIR/parameter_number_and_kind.rs:13:35\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                                   ^^^^^^^ unexpected lifetime argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/parameter_number_and_kind.rs:16:18\n+  --> $DIR/parameter_number_and_kind.rs:13:18\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:19:41\n+  --> $DIR/parameter_number_and_kind.rs:16:41\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n    |                                         ^^^ unexpected type argument\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "b322b752a156738a349bb866f9ef1a837fdb678c", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,15 +1,14 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#44265): allow type-generic associated types.\n+// check-pass\n \n use std::rc::Rc;\n use std::sync::Arc;\n use std::ops::Deref;\n \n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     fn new<T>(value: T) -> Self::Pointer<T>;\n }\n "}, {"sha": "83fe992fcb571dcff6fa1af506545a6614c22b9d", "filename": "src/test/ui/generic-associated-types/pointer_family.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1404a93f9632d768d7268934e6380a9b9614834/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr?ref=a1404a93f9632d768d7268934e6380a9b9614834", "patch": "@@ -1,10 +0,0 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/pointer_family.rs:11:5\n-   |\n-LL |     type Pointer<T>: Deref<Target = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to previous error\n-"}, {"sha": "44528ca1da36e40f37c198167f0b2d087b3c24d2", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -18,12 +18,10 @@ impl<'a> NoShadow<'a> for &'a u32 {\n trait ShadowT<T> {\n     type Bar<T>;\n     //~^ ERROR the name `T` is already used\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n-    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n impl<T> NoShadowT<T> for Option<T> {"}, {"sha": "d51c29080a0c9f662836e24671b1763ea6820bd0", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,7 +7,7 @@ LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:30:14\n+  --> $DIR/shadowing.rs:28:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`\n@@ -30,23 +30,7 @@ LL | impl<'a> NoShadow<'a> for &'a u32 {\n LL |     type Bar<'a> = i32;\n    |              ^^ lifetime 'a already in scope\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/shadowing.rs:19:5\n-   |\n-LL |     type Bar<T>;\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/shadowing.rs:25:5\n-   |\n-LL |     type Bar<U>; // OK\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0403, E0496.\n For more information about an error, try `rustc --explain E0403`."}, {"sha": "7510c58d57489aa76158811c06c3ae1fd8bcdfd1", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,22 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait ATy {\n+    type Item<'a>: 'a;\n+}\n+\n+impl<'b> ATy for &'b () {\n+    type Item<'a> = &'b ();\n+    //~^ ERROR does not fulfill the required lifetime\n+}\n+\n+trait StaticTy {\n+    type Item<'a>: 'static;\n+}\n+\n+impl StaticTy for () {\n+    type Item<'a> = &'a ();\n+    //~^ ERROR does not fulfill the required lifetime\n+}\n+\n+fn main() {}"}, {"sha": "5d612284a21873ebef696a19e25ac31a8ab9c65f", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,23 @@\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:15\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |               ^^\n+\n+error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n+  --> $DIR/unsatisfied-outlives-bound.rs:18:5\n+   |\n+LL |     type Item<'a> = &'a ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: type must satisfy the static lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "a84391b94d1de3fd60eac77f439330c959cb8539", "filename": "src/test/ui/issues/issue-38091.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n #![feature(specialization)]\n //~^ WARN the feature `specialization` is incomplete\n \n@@ -8,6 +7,7 @@ trait Iterate<'a> {\n }\n impl<'a, T> Iterate<'a> for T where T: Check {\n     default type Ty = ();\n+    //~^ ERROR the trait bound `(): Valid` is not satisfied\n     default fn iterate(self) {}\n }\n "}, {"sha": "81beec80263149ad690fd3dfef4a328be12e469c", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -1,11 +1,21 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-38091.rs:2:12\n+  --> $DIR/issue-38091.rs:1:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n-warning: 1 warning emitted\n+error[E0277]: the trait bound `(): Valid` is not satisfied\n+  --> $DIR/issue-38091.rs:9:5\n+   |\n+LL |     type Ty: Valid;\n+   |     --------------- required by `Iterate::Ty`\n+...\n+LL |     default type Ty = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "272a5e3fe10c614d74c3d45e7bbebd4e29f60e8e", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,24 @@\n+// Check that we check that default associated types satisfy the required\n+// bounds on them.\n+\n+#![feature(specialization)]\n+//~^ WARNING `specialization` is incomplete\n+\n+trait X {\n+    type U: Clone;\n+    fn unsafe_clone(&self, x: Option<&Self::U>) {\n+        x.cloned();\n+    }\n+}\n+\n+// We cannot normalize `<T as X>::U` to `str` here, because the default could\n+// be overridden. The error here must therefore be found by a method other than\n+// normalization.\n+impl<T> X for T {\n+    default type U = str;\n+    //~^ ERROR the trait bound `str: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    1.unsafe_clone(None);\n+}"}, {"sha": "90ad5d4c1559b5ad8e0ea229ce5aff7f2bbe5003", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-associated-type-bound-1.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n+  --> $DIR/deafult-associated-type-bound-1.rs:18:5\n+   |\n+LL |     type U: Clone;\n+   |     -------------- required by `X::U`\n+...\n+LL |     default type U = str;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0a21b1f09106ba36feeef0cd479eb277603586ba", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,22 @@\n+// Check that generic predicates are also checked for default associated types.\n+#![feature(specialization)]\n+//~^ WARNING `specialization` is incomplete\n+\n+trait X<T> {\n+    type U: PartialEq<T>;\n+    fn unsafe_compare(x: Option<Self::U>, y: Option<T>) {\n+        match (x, y) {\n+            (Some(a), Some(b)) => a == b,\n+            _ => false,\n+        };\n+    }\n+}\n+\n+impl<B: 'static, T> X<B> for T {\n+    default type U = &'static B;\n+    //~^ ERROR can't compare `&'static B` with `B`\n+}\n+\n+pub fn main() {\n+    <i32 as X<i32>>::unsafe_compare(None, None);\n+}"}, {"sha": "ea40f846e3665a672742bf8b5261b15e6a261760", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-associated-type-bound-2.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error[E0277]: can't compare `&'static B` with `B`\n+  --> $DIR/deafult-associated-type-bound-2.rs:16:5\n+   |\n+LL |     type U: PartialEq<T>;\n+   |     --------------------- required by `X::U`\n+...\n+LL |     default type U = &'static B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`\n+   |\n+   = help: the trait `std::cmp::PartialEq<B>` is not implemented for `&'static B`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8a94ea658d2d0c72f1d842fdfccc20e663fdd525", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,27 @@\n+// Check that default generics associated types are validated.\n+\n+#![feature(specialization)]\n+#![feature(generic_associated_types)]\n+//~^^ WARNING `specialization` is incomplete\n+//~^^ WARNING the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type U<'a>: PartialEq<&'a Self>;\n+    fn unsafe_compare<'b>(x: Option<Self::U<'b>>, y: Option<&'b Self>) {\n+        match (x, y) {\n+            (Some(a), Some(b)) => a == b,\n+            _ => false,\n+        };\n+    }\n+}\n+\n+impl<T: 'static> X for T {\n+    default type U<'a> = &'a T;\n+    //~^ ERROR can't compare `T` with `T`\n+}\n+\n+struct NotComparable;\n+\n+pub fn main() {\n+    <NotComparable as X>::unsafe_compare(None, None);\n+}"}, {"sha": "7f3c49e753fd7e4ebc0f8a7e5f23f0d532e3c32a", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -0,0 +1,36 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-generic-associated-type-bound.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-generic-associated-type-bound.rs:4:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: can't compare `T` with `T`\n+  --> $DIR/deafult-generic-associated-type-bound.rs:19:5\n+   |\n+LL |     type U<'a>: PartialEq<&'a Self>;\n+   |     -------------------------------- required by `X::U`\n+...\n+LL |     default type U<'a> = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n+   |\n+   = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq` for `&'a T`\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: 'static + std::cmp::PartialEq> X for T {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d8677ee959abded82e73e4449e49f72be5dab3de", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.rs?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,7 +7,6 @@ fn f() where\n     //~^ ERROR use of undeclared lifetime name `'a`\n     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n     //~^ ERROR use of undeclared lifetime name `'b`\n-    //~| ERROR nested quantification of lifetimes\n {}\n \n fn main() {}"}, {"sha": "6c52664154bbf333667287e087c21af0396527b6", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a171d0d5b4b76170da94858869e42ebb6e2ced2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=1a171d0d5b4b76170da94858869e42ebb6e2ced2", "patch": "@@ -7,12 +7,6 @@ LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n \n-error[E0316]: nested quantification of lifetimes\n-  --> $DIR/where-lifetime-resolution.rs:8:17\n-   |\n-LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n    |\n@@ -22,6 +16,6 @@ LL | fn f() where\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0261`."}]}