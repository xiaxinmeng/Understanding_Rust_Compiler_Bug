{"sha": "f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTM3MzhiOWM4MjRlNTZmNTYxZTc1ZjBmZjExY2YzYTBkMmRkMDk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-26T14:09:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-27T07:27:31Z"}, "message": "Support an alternate for syntax that calls a higher-order function\n\nThe last argument of the call must be a block, and the type of this\nargument must a function returning bool. `break` and `cont` are\nsupported in the body of the block, and return `false` or `true` from\nthe function. When the end of the function is reached, `true` is\nimplicitly returned.\n\n    for vec::all([1, 2, 3]) {|elt|\n        if elt == 2 { break; }\n        log(error, elt);\n    }\n\nIssue #1619", "tree": {"sha": "ab6624224bc83dc5edc4561b6d3d81860ecf6cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6624224bc83dc5edc4561b6d3d81860ecf6cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "html_url": "https://github.com/rust-lang/rust/commit/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9638e7fece158fd084a1d1f70970d716e9979f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/9638e7fece158fd084a1d1f70970d716e9979f96", "html_url": "https://github.com/rust-lang/rust/commit/9638e7fece158fd084a1d1f70970d716e9979f96"}], "stats": {"total": 201, "additions": 123, "deletions": 78}, "files": [{"sha": "92e88860bbe82fbf1bb67f916506c7829cecec06", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -156,7 +156,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     time(time_passes, \"block-use checking\",\n          bind middle::block_use::check_crate(ty_cx, crate));\n     time(time_passes, \"loop checking\",\n-         bind middle::check_loop::check_crate(sess, crate));\n+         bind middle::check_loop::check_crate(ty_cx, crate));\n     time(time_passes, \"function usage\",\n          bind fn_usage::check_crate_fn_usage(ty_cx, crate));\n     time(time_passes, \"alt checking\","}, {"sha": "de14863368cfa850718377a20cec63a0d52b038e", "filename": "src/rustc/middle/block_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Fblock_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Fblock_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fblock_use.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -33,6 +33,10 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n             i += 1u;\n         }\n       }\n+      expr_loop_body(body) {\n+        cx.allow_block = true;\n+        v.visit_expr(body, cx, v);\n+      }\n       _ {\n         cx.allow_block = false;\n         visit::visit_expr(ex, cx, v);"}, {"sha": "b145ae0d75ab318e9135035168569c479fe14c00", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -4,7 +4,7 @@ import driver::session::session;\n \n type ctx = {in_loop: bool, can_ret: bool};\n \n-fn check_crate(sess: session, crate: @crate) {\n+fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, {in_loop: false,can_ret: true}, visit::mk_vt(@{\n         visit_item: {|i, _cx, v|\n             visit::visit_item(i, {in_loop: false, can_ret: true}, v);\n@@ -21,28 +21,31 @@ fn check_crate(sess: session, crate: @crate) {\n               expr_fn(_, _, _, _) {\n                 visit::visit_expr(e, {in_loop: false, can_ret: true}, v);\n               }\n-              expr_fn_block(fn_decl, blk) {\n-                visit::visit_expr(e, {in_loop: false, can_ret: false}, v);\n+              expr_fn_block(_, b) {\n+                v.visit_block(b, {in_loop: false, can_ret: false}, v);\n+              }\n+              expr_loop_body(@{node: expr_fn_block(_, b), _}) {\n+                v.visit_block(b, {in_loop: true, can_ret: false}, v);\n               }\n               expr_break {\n                 if !cx.in_loop {\n-                    sess.span_err(e.span, \"`break` outside of loop\");\n+                    tcx.sess.span_err(e.span, \"`break` outside of loop\");\n                 }\n               }\n               expr_cont {\n                 if !cx.in_loop {\n-                    sess.span_err(e.span, \"`cont` outside of loop\");\n+                    tcx.sess.span_err(e.span, \"`cont` outside of loop\");\n                 }\n               }\n               expr_ret(oe) {\n                 if !cx.can_ret {\n-                    sess.span_err(e.span, \"`ret` in block function\");\n+                    tcx.sess.span_err(e.span, \"`ret` in block function\");\n                 }\n                 visit::visit_expr_opt(oe, cx, v);\n               }\n               expr_be(re) {\n                 if !cx.can_ret {\n-                    sess.span_err(e.span, \"`be` in block function\");\n+                    tcx.sess.span_err(e.span, \"`be` in block function\");\n                 }\n                 v.visit_expr(re, cx, v);\n               }"}, {"sha": "e1aeb2abc5ea7ec8ee219eff7a349419121b9f7c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -2990,20 +2990,24 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n       }\n       ast::expr_addr_of(_, x) { ret trans_addr_of(bcx, x, dest); }\n       ast::expr_fn(proto, decl, body, cap_clause) {\n-        ret closure::trans_expr_fn(\n-            bcx, proto, decl, body, e.span, e.id, *cap_clause, dest);\n+        ret closure::trans_expr_fn(bcx, proto, decl, body, e.span, e.id,\n+                                   *cap_clause, false, dest);\n       }\n       ast::expr_fn_block(decl, body) {\n-        alt ty::get(expr_ty(bcx, e)).struct {\n+        alt check ty::get(expr_ty(bcx, e)).struct {\n           ty::ty_fn({proto, _}) {\n             #debug(\"translating fn_block %s with type %s\",\n                    expr_to_str(e), ty_to_str(tcx, expr_ty(bcx, e)));\n-            let cap_clause = { copies: [], moves: [] };\n-            ret closure::trans_expr_fn(\n-                bcx, proto, decl, body, e.span, e.id, cap_clause, dest);\n+            ret closure::trans_expr_fn(bcx, proto, decl, body, e.span, e.id,\n+                                       {copies: [], moves: []}, false, dest);\n           }\n-          _ {\n-            fail \"type of fn block is not a function!\";\n+        }\n+      }\n+      ast::expr_loop_body(b@@{node: ast::expr_fn_block(decl, body), _}) {\n+        alt check ty::get(expr_ty(bcx, e)).struct {\n+          ty::ty_fn({proto, _}) {\n+            ret closure::trans_expr_fn(bcx, proto, decl, body, e.span, b.id,\n+                                       {copies: [], moves: []}, true, dest);\n           }\n         }\n       }\n@@ -3375,7 +3379,16 @@ fn trans_break_cont(bcx: block, to_end: bool)\n           }\n           _ {}\n         }\n-        unwind = alt check unwind.parent { parent_some(cx) { cx } };\n+        unwind = alt unwind.parent {\n+          parent_some(cx) { cx }\n+          // This is a return from a loop body block\n+          parent_none {\n+            Store(bcx, C_bool(!to_end), bcx.fcx.llretptr);\n+            cleanup_and_leave(bcx, none, some(bcx.fcx.llreturn));\n+            Unreachable(bcx);\n+            ret bcx;\n+          }\n+        };\n     }\n     cleanup_and_Br(bcx, unwind, target.llbb);\n     Unreachable(bcx);\n@@ -3895,7 +3908,8 @@ fn trans_closure(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n                  ty_self: self_arg,\n                  param_substs: option<param_substs>,\n                  id: ast::node_id,\n-                 maybe_load_env: fn(fn_ctxt)) {\n+                 maybe_load_env: fn(fn_ctxt),\n+                 finish: fn(block)) {\n     let _icx = ccx.insn_ctxt(\"trans_closure\");\n     set_uwtable(llfndecl);\n \n@@ -3932,6 +3946,7 @@ fn trans_closure(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n     } else {\n         bcx = trans_block(bcx, body, save_in(fcx.llretptr));\n     }\n+    finish(bcx);\n     cleanup_and_Br(bcx, bcx_top, fcx.llreturn);\n \n     // Insert the mandatory first few basic blocks before lltop.\n@@ -3957,7 +3972,7 @@ fn trans_fn(ccx: @crate_ctxt,\n         if ccx.sess.opts.extra_debuginfo {\n             debuginfo::create_function(fcx);\n         }\n-    });\n+    }, {|_bcx|});\n     if do_time {\n         let end = time::get_time();\n         log_fn_time(ccx, path_str(path), start, end);"}, {"sha": "0ac132562fe2395a46a343a170d117fcde2f5fb0", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -367,6 +367,7 @@ fn trans_expr_fn(bcx: block,\n                  sp: span,\n                  id: ast::node_id,\n                  cap_clause: ast::capture_clause,\n+                 is_loop_body: bool,\n                  dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"closure::trans_expr_fn\");\n     if dest == ignore { ret bcx; }\n@@ -385,6 +386,8 @@ fn trans_expr_fn(bcx: block,\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self,\n                       bcx.fcx.param_substs, id, {|fcx|\n             load_environment(fcx, cdata_ty, cap_vars, ck);\n+        }, {|bcx|\n+            if is_loop_body { Store(bcx, C_bool(true), bcx.fcx.llretptr); }\n         });\n         llbox\n     };\n@@ -395,7 +398,7 @@ fn trans_expr_fn(bcx: block,\n       ast::proto_uniq { trans_closure_env(ty::ck_uniq) }\n       ast::proto_bare {\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self, none,\n-                      id, {|_fcx|});\n+                      id, {|_fcx|}, {|_bcx|});\n         C_null(T_opaque_box_ptr(ccx))\n       }\n     };"}, {"sha": "5714ef23a5bdd748e004abab6a81ee1e352fc5bb", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -718,9 +718,7 @@ fn C_nil() -> ValueRef {\n }\n \n fn C_bool(b: bool) -> ValueRef {\n-    if b {\n-        ret C_integral(T_bool(), 1u64, False);\n-    } else { ret C_integral(T_bool(), 0u64, False); }\n+    C_integral(T_bool(), if b { 1u64 } else { 0u64 }, False)\n }\n \n fn C_i32(i: i32) -> ValueRef {"}, {"sha": "83d3ad5eb04730f3116ef815a42de04aeab2c9dc", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -190,7 +190,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_fail(_) | expr_break | expr_cont | expr_unary(_, _) |\n       expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n       expr_if_check(_, _, _) | expr_mac(_) | expr_addr_of(_, _) |\n-      expr_ret(_) | expr_loop(_) | expr_bind(_, _) {}\n+      expr_ret(_) | expr_loop(_) | expr_bind(_, _) | expr_loop_body(_) {}\n     }\n }\n "}, {"sha": "03a03cd0aed5ceec49273ae3cfe335316232dc5f", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -360,10 +360,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         find_pre_post_exprs(fcx, es, e.id);\n       }\n       expr_tup(elts) { find_pre_post_exprs(fcx, elts, e.id); }\n-      expr_copy(a) {\n-        find_pre_post_expr(fcx, a);\n-        copy_pre_post(fcx.ccx, e.id, a);\n-      }\n       expr_move(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_move); }\n       expr_swap(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_swap); }\n       expr_assign(lhs, rhs) { handle_update(fcx, e, lhs, rhs, oper_assign); }\n@@ -408,17 +404,10 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                               expr_postcond(fcx.ccx, l));\n         } else { find_pre_post_exprs(fcx, [l, r], e.id); }\n       }\n-      expr_unary(_, operand) {\n-        find_pre_post_expr(fcx, operand);\n-        copy_pre_post(fcx.ccx, e.id, operand);\n-      }\n-      expr_addr_of(_, operand) {\n-        find_pre_post_expr(fcx, operand);\n-        copy_pre_post(fcx.ccx, e.id, operand);\n-      }\n-      expr_cast(operand, _) {\n-        find_pre_post_expr(fcx, operand);\n-        copy_pre_post(fcx.ccx, e.id, operand);\n+      expr_addr_of(_, x) | expr_cast(x, _) | expr_unary(_, x) |\n+      expr_loop_body(x) | expr_assert(x) | expr_copy(x) {\n+        find_pre_post_expr(fcx, x);\n+        copy_pre_post(fcx.ccx, e.id, x);\n       }\n       expr_while(test, body) {\n         find_pre_post_expr(fcx, test);\n@@ -512,10 +501,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                             then everything is true! */\n                          prestate, false_postcond(num_local_vars));\n       }\n-      expr_assert(p) {\n-        find_pre_post_expr(fcx, p);\n-        copy_pre_post(fcx.ccx, e.id, p);\n-      }\n       expr_check(_, p) {\n         find_pre_post_expr(fcx, p);\n         copy_pre_post(fcx.ccx, e.id, p);\n@@ -527,12 +512,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n       expr_if_check(p, conseq, maybe_alt) {\n         join_then_else(fcx, p, conseq, maybe_alt, e.id, if_check);\n       }\n-\n-\n-\n-\n-\n-\n       expr_bind(operator, maybe_args) {\n         let mut args = [];\n         let mut cmodes = callee_modes(fcx, operator.id);"}, {"sha": "c0ebc3a9d36ba6034d2793670fe751e3e41d6439", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -422,7 +422,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                                     init_assign), elts,\n                                       return_val);\n       }\n-      expr_copy(a) { ret find_pre_post_state_sub(fcx, pres, a, e.id, none); }\n       expr_move(lhs, rhs) {\n         ret find_pre_post_state_two(fcx, pres, lhs, rhs, e.id, oper_move);\n       }\n@@ -598,17 +597,10 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret changed | set_poststate_ann(fcx.ccx, e.id, a_post);\n       }\n-      expr_field(val, _, _) {\n-        ret find_pre_post_state_sub(fcx, pres, val, e.id, none);\n-      }\n-      expr_unary(_, operand) {\n-        ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n-      }\n-      expr_addr_of(_, operand) {\n-        ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n-      }\n-      expr_cast(operand, _) {\n-        ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n+      expr_field(x, _, _) | expr_loop_body(x) | expr_unary(_, x) |\n+      expr_addr_of(_, x) | expr_assert(x) | expr_cast(x, _) |\n+      expr_copy(x) {\n+        ret find_pre_post_state_sub(fcx, pres, x, e.id, none);\n       }\n       expr_fail(maybe_fail_val) {\n         // FIXME Should factor out this code,\n@@ -622,9 +614,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                 option::maybe(maybe_fail_val, false, {|fail_val|\n                         find_pre_post_state_expr(fcx, pres, fail_val)});\n       }\n-      expr_assert(p) {\n-        ret find_pre_post_state_sub(fcx, pres, p, e.id, none);\n-      }\n       expr_check(_, p) {\n         /* predicate p holds after this expression executes */\n         let c: sp_constr = expr_to_constr(fcx.ccx.tcx, p);"}, {"sha": "86cf9d348158264e6152e632e40431b220e20b27", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -2910,6 +2910,24 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         check_expr_fn_with_unifier(fcx, expr, proto, decl, body,\n                                    unify, expected);\n       }\n+      ast::expr_loop_body(block) {\n+        let rty = structurally_resolved_type(fcx, expr.span, expected);\n+        let inner_ty = alt check ty::get(rty).struct {\n+          ty::ty_fn(fty) {\n+            demand::simple(fcx, expr.span, fty.output, ty::mk_bool(tcx));\n+            ty::mk_fn(tcx, {output: ty::mk_nil(tcx) with fty})\n+          }\n+        };\n+        check_expr_with(fcx, block, inner_ty);\n+        let block_ty = structurally_resolved_type(\n+            fcx, expr.span, ty::node_id_to_type(tcx, block.id));\n+        alt check ty::get(block_ty).struct {\n+          ty::ty_fn(fty) {\n+            write_ty(tcx, expr.id, ty::mk_fn(tcx, {output: ty::mk_bool(tcx)\n+                                                   with fty}));\n+          }\n+        }\n+      }\n       ast::expr_block(b) {\n         // If this is an unchecked block, turn off purity-checking\n         bot = check_block(fcx, b);"}, {"sha": "e657b6a6fe43ef6b4222f9ce1b4f408ff61e8581", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -303,6 +303,7 @@ enum expr_ {\n     expr_alt(@expr, [arm], alt_mode),\n     expr_fn(proto, fn_decl, blk, @capture_clause),\n     expr_fn_block(fn_decl, blk),\n+    expr_loop_body(@expr),\n     expr_block(blk),\n \n     /*"}, {"sha": "3f98ce5c29ed7c5650d678e213405fb32558bd0d", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -407,6 +407,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n             expr_binary(binop, fld.fold_expr(lhs), fld.fold_expr(rhs))\n           }\n           expr_unary(binop, ohs) { expr_unary(binop, fld.fold_expr(ohs)) }\n+          expr_loop_body(f) { expr_loop_body(fld.fold_expr(f)) }\n           expr_lit(_) { e }\n           expr_cast(expr, ty) { expr_cast(fld.fold_expr(expr), ty) }\n           expr_addr_of(m, ohs) { expr_addr_of(m, fld.fold_expr(ohs)) }"}, {"sha": "a898ee840be401cf18712c040831f8182c75c058", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -1403,13 +1403,37 @@ fn parse_else_expr(p: parser) -> @ast::expr {\n }\n \n fn parse_for_expr(p: parser) -> @ast::expr {\n-    let lo = p.last_span.lo;\n-    let decl = parse_local(p, false, false);\n-    expect_word(p, \"in\");\n-    let seq = parse_expr(p);\n-    let body = parse_block_no_value(p);\n-    let mut hi = body.span.hi;\n-    ret mk_expr(p, lo, hi, ast::expr_for(decl, seq, body));\n+    let lo = p.last_span;\n+    // FIXME remove this kludge after migration and snapshotting (#1619)\n+    let new_style = alt p.token {\n+      token::IDENT(_, false) { alt p.look_ahead(1u) {\n+        token::DOT | token::LPAREN { true }\n+        _ { false }\n+      } }\n+      token::IDENT(_, true) { true }\n+      _ { false }\n+    };\n+    if new_style {\n+        let call = parse_expr(p);\n+        alt call.node {\n+          ast::expr_call(f, args, true) {\n+            let b_arg = vec::last(args);\n+            let last = mk_expr(p, b_arg.span.lo, b_arg.span.hi,\n+                               ast::expr_loop_body(b_arg));\n+            @{node: ast::expr_call(f, vec::init(args) + [last], true)\n+              with *call}\n+          }\n+          _ {\n+            p.span_fatal(lo, \"`for` must be followed by a block call\");\n+          }\n+        }\n+    } else {\n+        let decl = parse_local(p, false, false);\n+        expect_word(p, \"in\");\n+        let seq = parse_expr(p);\n+        let body = parse_block_no_value(p);\n+        mk_expr(p, lo.lo, body.span.hi, ast::expr_for(decl, seq, body))\n+    }\n }\n \n fn parse_while_expr(p: parser) -> @ast::expr {"}, {"sha": "5d259e9bf4a09e5b129b22fbc97d46dead07d233", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -855,9 +855,16 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         pclose(s);\n       }\n       ast::expr_call(func, args, has_block) {\n+        let mut base_args = args;\n+        let blk = if has_block {\n+            let blk_arg = vec::pop(base_args);\n+            alt blk_arg.node {\n+              ast::expr_loop_body(_) { word_nbsp(s, \"for\"); }\n+              _ {}\n+            }\n+            some(blk_arg)\n+        } else { none };\n         print_expr_parens_if_not_bot(s, func);\n-        let mut base_args = args, blk = none;\n-        if has_block { blk = some(vec::pop(base_args)); }\n         if !has_block || vec::len(base_args) > 0u {\n             popen(s);\n             commasep_exprs(s, inconsistent, base_args);\n@@ -989,6 +996,9 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_fn_block_args(s, decl);\n         print_possibly_embedded_block(s, body, block_block_fn, indent_unit);\n       }\n+      ast::expr_loop_body(body) {\n+        print_expr(s, body);\n+      }\n       ast::expr_block(blk) {\n         // containing cbox, will be closed by print-block at }\n         cbox(s, indent_unit);"}, {"sha": "7a84052fa90f14dd2c941aa4c34e437f6c5d5b7a", "filename": "src/rustc/syntax/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09/src%2Frustc%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fvisit.rs?ref=f6e3738b9c824e56f561e75f0ff11cf3a0d2dd09", "patch": "@@ -338,10 +338,12 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for eo: option<@expr> in args { visit_expr_opt(eo, e, v); }\n       }\n       expr_binary(_, a, b) { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n-      expr_unary(_, a) { v.visit_expr(a, e, v); }\n+      expr_addr_of(_, x) | expr_unary(_, x) | expr_loop_body(x) |\n+      expr_check(_, x) | expr_assert(x) {\n+        v.visit_expr(x, e, v);\n+      }\n       expr_lit(_) { }\n       expr_cast(x, t) { v.visit_expr(x, e, v); v.visit_ty(t, e, v); }\n-      expr_addr_of(_, x) { v.visit_expr(x, e, v); }\n       expr_if(x, b, eo) {\n         v.visit_expr(x, e, v);\n         v.visit_block(b, e, v);\n@@ -353,7 +355,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         visit_expr_opt(eo, e, v);\n       }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n-      expr_loop(b)     { v.visit_block(b, e, v); }\n+      expr_loop(b) { v.visit_block(b, e, v); }\n       expr_for(dcl, x, b) {\n         v.visit_local(dcl, e, v);\n         v.visit_expr(x, e, v);\n@@ -394,8 +396,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_expr(lv, e, v);\n         v.visit_expr(x, e, v);\n       }\n-      expr_check(_, x) { v.visit_expr(x, e, v); }\n-      expr_assert(x) { v.visit_expr(x, e, v); }\n       expr_mac(mac) { visit_mac(mac, e, v); }\n     }\n }"}]}