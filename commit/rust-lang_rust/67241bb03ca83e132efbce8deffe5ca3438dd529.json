{"sha": "67241bb03ca83e132efbce8deffe5ca3438dd529", "node_id": "C_kwDOAAsO6NoAKDY3MjQxYmIwM2NhODNlMTMyZWZiY2U4ZGVmZmU1Y2EzNDM4ZGQ1Mjk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-05T14:48:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:51:49Z"}, "message": "Inline WhereClause into Generics.", "tree": {"sha": "c16de1952d285d9da0e7e1b9821d4f2f0cc19f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16de1952d285d9da0e7e1b9821d4f2f0cc19f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67241bb03ca83e132efbce8deffe5ca3438dd529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67241bb03ca83e132efbce8deffe5ca3438dd529", "html_url": "https://github.com/rust-lang/rust/commit/67241bb03ca83e132efbce8deffe5ca3438dd529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67241bb03ca83e132efbce8deffe5ca3438dd529/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faadd8fd14852957c3f7252420439b10668fe409", "url": "https://api.github.com/repos/rust-lang/rust/commits/faadd8fd14852957c3f7252420439b10668fe409", "html_url": "https://github.com/rust-lang/rust/commit/faadd8fd14852957c3f7252420439b10668fe409"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "4ec7c2362f087f69d7d9fae1ef03846ea4393547", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67241bb03ca83e132efbce8deffe5ca3438dd529/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67241bb03ca83e132efbce8deffe5ca3438dd529/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=67241bb03ca83e132efbce8deffe5ca3438dd529", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem,\n     ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier,\n-    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n+    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -130,7 +130,7 @@ fn check_fn_inner<'tcx>(\n     span: Span,\n     report_extra_lifetimes: bool,\n ) {\n-    if span.from_expansion() || has_where_lifetimes(cx, &generics.where_clause) {\n+    if span.from_expansion() || has_where_lifetimes(cx, generics) {\n         return;\n     }\n \n@@ -445,8 +445,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n /// reason about elision.\n-fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereClause<'_>) -> bool {\n-    for predicate in where_clause.predicates {\n+fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, generics: &'tcx Generics<'_>) -> bool {\n+    for predicate in generics.predicates {\n         match *predicate {\n             WherePredicate::RegionPredicate(..) => return true,\n             WherePredicate::BoundPredicate(ref pred) => {"}, {"sha": "c388d2854cc2a38116b6b3cec499f4cc00bab58b", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67241bb03ca83e132efbce8deffe5ca3438dd529/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67241bb03ca83e132efbce8deffe5ca3438dd529/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=67241bb03ca83e132efbce8deffe5ca3438dd529", "patch": "@@ -90,10 +90,9 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n-        let Generics { where_clause, .. } = &item.generics;\n         let mut self_bounds_map = FxHashMap::default();\n \n-        for predicate in where_clause.predicates {\n+        for predicate in item.generics.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n                 if !bound_predicate.span.from_expansion();\n@@ -166,7 +165,7 @@ impl TraitBounds {\n         }\n         let mut map: UnhashMap<SpanlessTy<'_, '_>, Vec<&GenericBound<'_>>> = UnhashMap::default();\n         let mut applicability = Applicability::MaybeIncorrect;\n-        for bound in gen.where_clause.predicates {\n+        for bound in gen.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n@@ -216,7 +215,7 @@ impl TraitBounds {\n }\n \n fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-    if gen.span.from_expansion() || gen.params.is_empty() || gen.where_clause.predicates.is_empty() {\n+    if gen.span.from_expansion() || gen.params.is_empty() || gen.predicates.is_empty() {\n         return;\n     }\n \n@@ -232,7 +231,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         }\n     }\n \n-    for predicate in gen.where_clause.predicates {\n+    for predicate in gen.predicates {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n             if !bound_predicate.span.from_expansion();"}]}