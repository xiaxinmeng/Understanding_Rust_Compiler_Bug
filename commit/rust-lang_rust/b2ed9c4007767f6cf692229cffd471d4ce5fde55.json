{"sha": "b2ed9c4007767f6cf692229cffd471d4ce5fde55", "node_id": "C_kwDOAAsO6NoAKGIyZWQ5YzQwMDc3NjdmNmNmNjkyMjI5Y2ZmZDQ3MWQ0Y2U1ZmRlNTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-03T14:07:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-03T14:08:57Z"}, "message": "Add some inlining.", "tree": {"sha": "b3f600b6f3282ab00d51ee51932154d8da21f6f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f600b6f3282ab00d51ee51932154d8da21f6f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2ed9c4007767f6cf692229cffd471d4ce5fde55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ed9c4007767f6cf692229cffd471d4ce5fde55", "html_url": "https://github.com/rust-lang/rust/commit/b2ed9c4007767f6cf692229cffd471d4ce5fde55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2ed9c4007767f6cf692229cffd471d4ce5fde55/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ae6ec4f343745d94f5fc2cc7a0b7a085cb6c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ae6ec4f343745d94f5fc2cc7a0b7a085cb6c40", "html_url": "https://github.com/rust-lang/rust/commit/48ae6ec4f343745d94f5fc2cc7a0b7a085cb6c40"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "f2e935c59fce282f119d2c41ca79370c18ad08dd", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=b2ed9c4007767f6cf692229cffd471d4ce5fde55", "patch": "@@ -178,12 +178,14 @@ impl<'a> StableHashingContext<'a> {\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for ast::NodeId {\n+    #[inline]\n     fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n         panic!(\"Node IDs should not appear in incremental state\");\n     }\n }\n \n impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n+    #[inline]\n     fn hash_spans(&self) -> bool {\n         self.hash_spans\n     }\n@@ -198,6 +200,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n         self.definitions.def_span(def_id)\n     }\n \n+    #[inline]\n     fn span_data_to_lines_and_cols(\n         &mut self,\n         span: &SpanData,"}, {"sha": "04eb263a977187536acabe3a01a8bc25e6e222a2", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=b2ed9c4007767f6cf692229cffd471d4ce5fde55", "patch": "@@ -26,13 +26,15 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n+    #[inline]\n     fn hash_body_id(&mut self, id: hir::BodyId, hasher: &mut StableHasher) {\n         let hcx = self;\n         if hcx.hash_bodies() {\n             hcx.body_resolver.body(id).hash_stable(hcx, hasher);\n         }\n     }\n \n+    #[inline]\n     fn hash_reference_to_item(&mut self, id: hir::HirId, hasher: &mut StableHasher) {\n         let hcx = self;\n \n@@ -41,6 +43,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         })\n     }\n \n+    #[inline]\n     fn hash_hir_mod(&mut self, module: &hir::Mod<'_>, hasher: &mut StableHasher) {\n         let hcx = self;\n         let hir::Mod { inner: ref inner_span, ref item_ids } = *module;\n@@ -103,6 +106,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n+    #[inline]\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n         let prev_hash_node_ids = self.node_id_hashing_mode;\n         self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n@@ -114,6 +118,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n+    #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body { params, value, generator_kind } = self;\n "}, {"sha": "9d6bd20103989190b9bd5100c755626e192a80ec", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed9c4007767f6cf692229cffd471d4ce5fde55/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=b2ed9c4007767f6cf692229cffd471d4ce5fde55", "patch": "@@ -28,6 +28,7 @@ pub struct CrateSource {\n }\n \n impl CrateSource {\n+    #[inline]\n     pub fn paths(&self) -> impl Iterator<Item = &PathBuf> {\n         self.dylib.iter().chain(self.rlib.iter()).chain(self.rmeta.iter()).map(|p| &p.0)\n     }\n@@ -47,6 +48,7 @@ pub enum CrateDepKind {\n }\n \n impl CrateDepKind {\n+    #[inline]\n     pub fn macros_only(self) -> bool {\n         match self {\n             CrateDepKind::MacrosOnly => true,\n@@ -122,10 +124,12 @@ impl ExternCrate {\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n+    #[inline]\n     pub fn is_direct(&self) -> bool {\n         self.dependency_of == LOCAL_CRATE\n     }\n \n+    #[inline]\n     pub fn rank(&self) -> impl PartialOrd {\n         // Prefer:\n         // - direct extern crate to indirect"}]}