{"sha": "8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTQ2ZTUxZGZjMjBmNmJjMDEyMDdkNjdhNWY2NjYyMzllZDhlMDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-26T19:38:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-26T19:38:06Z"}, "message": "Rollup merge of #88123 - camelid:tup-pat-precise-spans, r=estebank\n\nMake spans for tuple patterns in E0023 more precise\n\nAs suggested in #86307. Closes #86307.\n\nr? ````@estebank````", "tree": {"sha": "7fadae32b3ab315d7f23f275a749fbe9b9d8b788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fadae32b3ab315d7f23f275a749fbe9b9d8b788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJ+2eCRBK7hj4Ov3rIwAAeCUIALM53riW9JfrBrympbnkRNcB\nDAZReJLqhYBVoAhG1disX+JmkaJzThvQxgB2m252bNu3XYDR21mMaKkse/I5yM/I\nzA/fSupZR/FOcg7A5ojg/oqY06mZWIsVwvX9Hwv0hncovcKzzWZyiXmWIclT6g7+\nNY/huqblMOqwF6QMPMOSTqjcijuDJ1yQsrW0DGUBss70yfSKttsPQRX9I0P9cFuy\n7158huz+q8OsuLZG5/ZbnPGFQ+dl7x4YXvGN3xSIeWv6FRsTBGUGrZ2FCA2+0Jh3\nAsFEp0uJtuleX2JUTqE1hQMmwbCU1vw+P+1lW/PqtXTKYHGUXZPmVux5IXxkfPY=\n=1vVq\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fadae32b3ab315d7f23f275a749fbe9b9d8b788\nparent fb7959774c9a7050c1061bd8d7825d78e1945ea9\nparent 8a6501d28831d864a3af6adf2e0bd83a773062ed\nauthor Manish Goregaokar <manishsmail@gmail.com> 1630006686 -0700\ncommitter GitHub <noreply@github.com> 1630006686 -0700\n\nRollup merge of #88123 - camelid:tup-pat-precise-spans, r=estebank\n\nMake spans for tuple patterns in E0023 more precise\n\nAs suggested in #86307. Closes #86307.\n\nr? ````@estebank````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "html_url": "https://github.com/rust-lang/rust/commit/8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb7959774c9a7050c1061bd8d7825d78e1945ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7959774c9a7050c1061bd8d7825d78e1945ea9", "html_url": "https://github.com/rust-lang/rust/commit/fb7959774c9a7050c1061bd8d7825d78e1945ea9"}, {"sha": "8a6501d28831d864a3af6adf2e0bd83a773062ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6501d28831d864a3af6adf2e0bd83a773062ed", "html_url": "https://github.com/rust-lang/rust/commit/8a6501d28831d864a3af6adf2e0bd83a773062ed"}], "stats": {"total": 1242, "additions": 1165, "deletions": 77}, "files": [{"sha": "551e6a57b32bf1e274223945ecb8f01cbfaf03da", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -3183,6 +3183,20 @@ pub enum Node<'hir> {\n }\n \n impl<'hir> Node<'hir> {\n+    /// Get the identifier of this `Node`, if applicable.\n+    ///\n+    /// # Edge cases\n+    ///\n+    /// Calling `.ident()` on a [`Node::Ctor`] will return `None`\n+    /// because `Ctor`s do not have identifiers themselves.\n+    /// Instead, call `.ident()` on the parent struct/variant, like so:\n+    ///\n+    /// ```ignore (illustrative)\n+    /// ctor\n+    ///     .ctor_hir_id()\n+    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n+    ///     .and_then(|parent| parent.ident())\n+    /// ```\n     pub fn ident(&self) -> Option<Ident> {\n         match self {\n             Node::TraitItem(TraitItem { ident, .. })\n@@ -3191,8 +3205,25 @@ impl<'hir> Node<'hir> {\n             | Node::Field(FieldDef { ident, .. })\n             | Node::Variant(Variant { ident, .. })\n             | Node::MacroDef(MacroDef { ident, .. })\n-            | Node::Item(Item { ident, .. }) => Some(*ident),\n-            _ => None,\n+            | Node::Item(Item { ident, .. })\n+            | Node::PathSegment(PathSegment { ident, .. }) => Some(*ident),\n+            Node::Lifetime(lt) => Some(lt.name.ident()),\n+            Node::GenericParam(p) => Some(p.name.ident()),\n+            Node::Param(..)\n+            | Node::AnonConst(..)\n+            | Node::Expr(..)\n+            | Node::Stmt(..)\n+            | Node::Block(..)\n+            | Node::Ctor(..)\n+            | Node::Pat(..)\n+            | Node::Binding(..)\n+            | Node::Arm(..)\n+            | Node::Local(..)\n+            | Node::Visibility(..)\n+            | Node::Crate(..)\n+            | Node::Ty(..)\n+            | Node::TraitRef(..)\n+            | Node::Infer(..) => None,\n         }\n     }\n "}, {"sha": "c10f6dc3401bdbf4fdf9c1df55e5a5bd43a4d57b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -223,7 +223,18 @@ fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItems<'_> {\n }\n \n fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n-    tcx.hir().get_if_local(def_id).and_then(|node| node.ident()).map(|ident| ident.span)\n+    tcx.hir()\n+        .get_if_local(def_id)\n+        .and_then(|node| match node {\n+            // A `Ctor` doesn't have an identifier itself, but its parent\n+            // struct/variant does. Compare with `hir::Map::opt_span`.\n+            hir::Node::Ctor(ctor) => ctor\n+                .ctor_hir_id()\n+                .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n+                .and_then(|parent| parent.ident()),\n+            _ => node.ident(),\n+        })\n+        .map(|ident| ident.span)\n }\n \n /// If the given `DefId` describes an item belonging to a trait,"}, {"sha": "016b3f7a87cf3f8ae7d4355e5369c9391989f517", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -15,7 +15,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n-use rustc_span::{BytePos, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n@@ -990,10 +990,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let subpats_ending = pluralize!(subpats.len());\n         let fields_ending = pluralize!(fields.len());\n+\n+        let subpat_spans = if subpats.is_empty() {\n+            vec![pat_span]\n+        } else {\n+            subpats.iter().map(|p| p.span).collect()\n+        };\n+        let last_subpat_span = *subpat_spans.last().unwrap();\n         let res_span = self.tcx.def_span(res.def_id());\n+        let def_ident_span = self.tcx.def_ident_span(res.def_id()).unwrap_or(res_span);\n+        let field_def_spans = if fields.is_empty() {\n+            vec![res_span]\n+        } else {\n+            fields.iter().map(|f| f.ident.span).collect()\n+        };\n+        let last_field_def_span = *field_def_spans.last().unwrap();\n+\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n-            pat_span,\n+            MultiSpan::from_spans(subpat_spans.clone()),\n             E0023,\n             \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n             subpats.len(),\n@@ -1003,10 +1018,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             fields_ending,\n         );\n         err.span_label(\n-            pat_span,\n-            format!(\"expected {} field{}, found {}\", fields.len(), fields_ending, subpats.len(),),\n-        )\n-        .span_label(res_span, format!(\"{} defined here\", res.descr()));\n+            last_subpat_span,\n+            &format!(\"expected {} field{}, found {}\", fields.len(), fields_ending, subpats.len()),\n+        );\n+        if self.tcx.sess.source_map().is_multiline(qpath.span().between(last_subpat_span)) {\n+            err.span_label(qpath.span(), \"\");\n+        }\n+        if self.tcx.sess.source_map().is_multiline(def_ident_span.between(last_field_def_span)) {\n+            err.span_label(def_ident_span, format!(\"{} defined here\", res.descr()));\n+        }\n+        for span in &field_def_spans[..field_def_spans.len() - 1] {\n+            err.span_label(*span, \"\");\n+        }\n+        err.span_label(\n+            last_field_def_span,\n+            &format!(\"{} has {} field{}\", res.descr(), fields.len(), fields_ending),\n+        );\n \n         // Identify the case `Some(x, y)` where the expected type is e.g. `Option<(T, U)>`.\n         // More generally, the expected type wants a tuple variant with one field of an"}, {"sha": "9aae4b0a3faed76175690c36c9f153cb626a6b6e", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -15,22 +15,22 @@ LL |     Enum::SingleVariant(a, .., b, ..) = Enum::SingleVariant(0, 1);\n    |                            previously used here\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple struct has 2 fields\n-  --> $DIR/tuple_struct_destructure_fail.rs:30:5\n+  --> $DIR/tuple_struct_destructure_fail.rs:30:17\n    |\n LL | struct TupleStruct<S, T>(S, T);\n-   | ------------------------------- tuple struct defined here\n+   |                          -  - tuple struct has 2 fields\n ...\n LL |     TupleStruct(a, a, b) = TupleStruct(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n+   |                 ^  ^  ^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n-  --> $DIR/tuple_struct_destructure_fail.rs:32:5\n+  --> $DIR/tuple_struct_destructure_fail.rs:32:17\n    |\n LL | struct TupleStruct<S, T>(S, T);\n-   | ------------------------------- tuple struct defined here\n+   |                          -  - tuple struct has 2 fields\n ...\n LL |     TupleStruct(_) = TupleStruct(1, 2);\n-   |     ^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |                 ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -42,22 +42,22 @@ LL |     TupleStruct(..) = TupleStruct(1, 2);\n    |                 ~~\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/tuple_struct_destructure_fail.rs:34:5\n+  --> $DIR/tuple_struct_destructure_fail.rs:34:25\n    |\n LL |     SingleVariant(S, T)\n-   |     ------------------- tuple variant defined here\n+   |                   -  - tuple variant has 2 fields\n ...\n LL |     Enum::SingleVariant(a, a, b) = Enum::SingleVariant(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n+   |                         ^  ^  ^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/tuple_struct_destructure_fail.rs:36:5\n+  --> $DIR/tuple_struct_destructure_fail.rs:36:25\n    |\n LL |     SingleVariant(S, T)\n-   |     ------------------- tuple variant defined here\n+   |                   -  - tuple variant has 2 fields\n ...\n LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |                         ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |"}, {"sha": "3e321b037b2b2d5ba59f171e8c1a594c91ee1f90", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -1,43 +1,43 @@\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:11:9\n+  --> $DIR/E0023.rs:11:22\n    |\n LL |     Apple(String, String),\n-   |     --------------------- tuple variant defined here\n+   |           ------  ------ tuple variant has 2 fields\n ...\n LL |         Fruit::Apple(a) => {},\n-   |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |                      ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n LL |         Fruit::Apple(a, _) => {},\n    |                       +++\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:12:9\n+  --> $DIR/E0023.rs:12:22\n    |\n LL |     Apple(String, String),\n-   |     --------------------- tuple variant defined here\n+   |           ------  ------ tuple variant has 2 fields\n ...\n LL |         Fruit::Apple(a, b, c) => {},\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n+   |                      ^  ^  ^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n-  --> $DIR/E0023.rs:13:9\n+  --> $DIR/E0023.rs:13:21\n    |\n LL |     Pear(u32),\n-   |     --------- tuple variant defined here\n+   |          --- tuple variant has 1 field\n ...\n LL |         Fruit::Pear(1, 2) => {},\n-   |         ^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+   |                     ^  ^ expected 1 field, found 2\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n-  --> $DIR/E0023.rs:14:9\n+  --> $DIR/E0023.rs:14:23\n    |\n LL |     Orange((String, String)),\n-   |     ------------------------ tuple variant defined here\n+   |            ---------------- tuple variant has 1 field\n ...\n LL |         Fruit::Orange(a, b) => {},\n-   |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+   |                       ^  ^ expected 1 field, found 2\n    |\n help: missing parentheses\n    |\n@@ -48,7 +48,7 @@ error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has\n   --> $DIR/E0023.rs:15:9\n    |\n LL |     Banana(()),\n-   |     ---------- tuple variant defined here\n+   |            -- tuple variant has 1 field\n ...\n LL |         Fruit::Banana() => {},\n    |         ^^^^^^^^^^^^^^^ expected 1 field, found 0"}, {"sha": "05650f05cbf5b24b94fbde014dc456705f0529cf", "filename": "src/test/ui/issues/issue-72574-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -19,13 +19,13 @@ LL |         Binder(_a, _x @ ..) => {}\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n-  --> $DIR/issue-72574-2.rs:6:9\n+  --> $DIR/issue-72574-2.rs:6:16\n    |\n LL | struct Binder(i32, i32, i32);\n-   | ----------------------------- tuple struct defined here\n+   |               ---  ---  --- tuple struct has 3 fields\n ...\n LL |         Binder(_a, _x @ ..) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |                ^^  ^^^^^^^ expected 3 fields, found 2\n    |\n help: use `_` to explicitly ignore each field\n    |"}, {"sha": "c994ee4f6d4ffe39b4246a51a77f2fd8ee8b63cb", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -1,11 +1,11 @@\n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n-  --> $DIR/match-pattern-field-mismatch.rs:10:11\n+  --> $DIR/match-pattern-field-mismatch.rs:10:22\n    |\n LL |         Rgb(usize, usize, usize),\n-   |         ------------------------ tuple variant defined here\n+   |             -----  -----  ----- tuple variant has 3 fields\n ...\n LL |           Color::Rgb(_, _) => { }\n-   |           ^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |                      ^  ^ expected 3 fields, found 2\n    |\n help: use `_` to explicitly ignore each field\n    |"}, {"sha": "f7373c453966c1fa1ad25534deea38c6b34f649f", "filename": "src/test/ui/pattern/auxiliary/declarations-for-tuple-field-count-errors.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fauxiliary%2Fdeclarations-for-tuple-field-count-errors.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -0,0 +1,20 @@\n+pub struct Z0;\n+pub struct Z1();\n+\n+pub struct S(pub u8, pub u8, pub u8);\n+pub struct M(\n+    pub u8,\n+    pub u8,\n+    pub u8,\n+);\n+\n+pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+\n+pub enum E2 {\n+    S(u8, u8, u8),\n+    M(\n+        u8,\n+        u8,\n+        u8,\n+    ),\n+}"}, {"sha": "75a231f6b4ba32fee613d9327a7bd82df5782e05", "filename": "src/test/ui/pattern/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -13,7 +13,7 @@ error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has\n   --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n    |\n LL | struct P<T>(T); // 1 type parameter wanted\n-   | --------------- tuple struct defined here\n+   |             - tuple struct has 1 field\n ...\n LL |     let P() = U {};\n    |         ^^^ expected 1 field, found 0"}, {"sha": "7443946c013f7294bb51bed7e9389897ce75873a", "filename": "src/test/ui/pattern/issue-74539.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -19,13 +19,13 @@ LL |         E::A(x @ ..) => {\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/issue-74539.rs:8:9\n+  --> $DIR/issue-74539.rs:8:14\n    |\n LL |     A(u8, u8),\n-   |     --------- tuple variant defined here\n+   |       --  -- tuple variant has 2 fields\n ...\n LL |         E::A(x @ ..) => {\n-   |         ^^^^^^^^^^^^ expected 2 fields, found 1\n+   |              ^^^^^^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |"}, {"sha": "b63da4e154f73d1be6e1f57c6f96c21878e01297", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -0,0 +1,57 @@\n+// aux-build:declarations-for-tuple-field-count-errors.rs\n+\n+extern crate declarations_for_tuple_field_count_errors;\n+\n+use declarations_for_tuple_field_count_errors::*;\n+\n+fn main() {\n+    match Z0 {\n+        Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+        Z0(x) => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+    }\n+    match Z1() {\n+        Z1 => {} //~ ERROR match bindings cannot shadow tuple structs\n+        Z1(x) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+    }\n+\n+    match S(1, 2, 3) {\n+        S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+        S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+        S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+        S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+    }\n+    match M(1, 2, 3) {\n+        M() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+        M(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+        M(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+        M(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+    }\n+\n+    match E1::Z0 {\n+        E1::Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+        E1::Z0(x) => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+    }\n+    match E1::Z1() {\n+        E1::Z1 => {} //~ ERROR expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+        E1::Z1(x) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+    }\n+    match E1::S(1, 2, 3) {\n+        E1::S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E1::S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E1::S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E1::S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+\n+    match E2::S(1, 2, 3) {\n+        E2::S() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E2::S(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E2::S(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E2::S(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+    match E2::M(1, 2, 3) {\n+        E2::M() => {} //~ ERROR this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+        E2::M(1) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+        E2::M(xyz, abc) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+        E2::M(1, 2, 3, 4) => {} //~ ERROR this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+    }\n+}"}, {"sha": "cab8d4759df6414b2c49a38fa63994ed9640c00e", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "added", "additions": 536, "deletions": 0, "changes": 536, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -0,0 +1,536 @@\n+error[E0530]: match bindings cannot shadow tuple structs\n+  --> $DIR/pat-tuple-field-count-cross.rs:13:9\n+   |\n+LL | use declarations_for_tuple_field_count_errors::*;\n+   |     -------------------------------------------- the tuple struct `Z1` is imported here\n+...\n+LL |         Z1 => {}\n+   |         ^^ cannot be named the same as a tuple struct\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:9:9\n+   |\n+LL |         Z0() => {}\n+   |         ^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n+   |\n+LL | pub struct Z0;\n+   | -------------- `Z0` defined here\n+LL | pub struct Z1();\n+   | ---------------- similarly named tuple struct `Z1` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1() => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:10:9\n+   |\n+LL |         Z0(x) => {}\n+   |         ^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:1:1\n+   |\n+LL | pub struct Z0;\n+   | -------------- `Z0` defined here\n+LL | pub struct Z1();\n+   | ---------------- similarly named tuple struct `Z1` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1(x) => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:31:9\n+   |\n+LL |         E1::Z0() => {}\n+   |         ^^^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               |\n+   |               `E1::Z0` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1() => {}\n+   |             ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-field-count-cross.rs:32:9\n+   |\n+LL |         E1::Z0(x) => {}\n+   |         ^^^^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               |\n+   |               `E1::Z0` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1(x) => {}\n+   |             ~~\n+\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+  --> $DIR/pat-tuple-field-count-cross.rs:35:9\n+   |\n+LL |         E1::Z1 => {}\n+   |         ^^^^^^\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |               --  ---- `E1::Z1` defined here\n+   |               |\n+   |               similarly named unit variant `Z0` defined here\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         E1::Z1(/* fields */) => {}\n+   |         ~~~~~~~~~~~~~~~~~~~~\n+help: a unit variant with a similar name exists\n+   |\n+LL |         E1::Z0 => {}\n+   |             ~~\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:14:12\n+   |\n+LL |         Z1(x) => {}\n+   |            ^ expected 0 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:2:1\n+   |\n+LL | pub struct Z1();\n+   | ---------------- tuple struct has 0 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:18:9\n+   |\n+LL |         S() => {}\n+   |         ^^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _, _) => {}\n+   |           +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         S(..) => {}\n+   |           ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:19:11\n+   |\n+LL |         S(1) => {}\n+   |           ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(1, _, _) => {}\n+   |            ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         S(1, ..) => {}\n+   |            ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:20:11\n+   |\n+LL |         S(xyz, abc) => {}\n+   |           ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(xyz, abc, _) => {}\n+   |                   +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:21:11\n+   |\n+LL |         S(1, 2, 3, 4) => {}\n+   |           ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:4:14\n+   |\n+LL | pub struct S(pub u8, pub u8, pub u8);\n+   |              ------  ------  ------ tuple struct has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:24:9\n+   |\n+LL |           M() => {}\n+   |           ^^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(_, _, _) => {}\n+   |           +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         M(..) => {}\n+   |           ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:25:11\n+   |\n+LL |           M(1) => {}\n+   |             ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(1, _, _) => {}\n+   |            ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         M(1, ..) => {}\n+   |            ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:26:11\n+   |\n+LL |           M(xyz, abc) => {}\n+   |             ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         M(xyz, abc, _) => {}\n+   |                   +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:27:11\n+   |\n+LL |           M(1, 2, 3, 4) => {}\n+   |             ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+   |\n+LL | / pub struct M(\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------\n+LL | |     pub u8,\n+   | |     ------ tuple struct has 3 fields\n+LL | | );\n+   | |__- tuple struct defined here\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:36:16\n+   |\n+LL |         E1::Z1(x) => {}\n+   |                ^ expected 0 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                   ---- tuple variant has 0 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:39:9\n+   |\n+LL |         E1::S() => {}\n+   |         ^^^^^^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E1::S(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:40:15\n+   |\n+LL |         E1::S(1) => {}\n+   |               ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E1::S(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:41:15\n+   |\n+LL |         E1::S(xyz, abc) => {}\n+   |               ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E1::S(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:42:15\n+   |\n+LL |         E1::S(1, 2, 3, 4) => {}\n+   |               ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:27\n+   |\n+LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n+   |                           --  --  -- tuple variant has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:46:9\n+   |\n+LL |         E2::S() => {}\n+   |         ^^^^^^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E2::S(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:47:15\n+   |\n+LL |         E2::S(1) => {}\n+   |               ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E2::S(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:48:15\n+   |\n+LL |         E2::S(xyz, abc) => {}\n+   |               ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::S(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:49:15\n+   |\n+LL |         E2::S(1, 2, 3, 4) => {}\n+   |               ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:14:7\n+   |\n+LL |     S(u8, u8, u8),\n+   |       --  --  -- tuple variant has 3 fields\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:52:9\n+   |\n+LL |           E2::M() => {}\n+   |           ^^^^^^^ expected 3 fields, found 0\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(_, _, _) => {}\n+   |               +++++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E2::M(..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:53:15\n+   |\n+LL |           E2::M(1) => {}\n+   |                 ^ expected 3 fields, found 1\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(1, _, _) => {}\n+   |                ++++++\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         E2::M(1, ..) => {}\n+   |                ++++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:54:15\n+   |\n+LL |           E2::M(xyz, abc) => {}\n+   |                 ^^^  ^^^ expected 3 fields, found 2\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E2::M(xyz, abc, _) => {}\n+   |                       +++\n+\n+error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n+  --> $DIR/pat-tuple-field-count-cross.rs:55:15\n+   |\n+LL |           E2::M(1, 2, 3, 4) => {}\n+   |                 ^  ^  ^  ^ expected 3 fields, found 4\n+   |\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n+   |\n+LL | /     M(\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         --\n+LL | |         u8,\n+   | |         -- tuple variant has 3 fields\n+LL | |     ),\n+   | |_____- tuple variant defined here\n+\n+error: aborting due to 28 previous errors\n+\n+Some errors have detailed explanations: E0023, E0530, E0532.\n+For more information about an error, try `rustc --explain E0023`."}, {"sha": "c863c657514f393271655e8165d1826a1039d74c", "filename": "src/test/ui/pattern/pat-tuple-overfield.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -1,4 +1,18 @@\n struct S(u8, u8, u8);\n+struct M(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+struct Z0;\n+struct Z1();\n+enum E1 {\n+    Z0,\n+    Z1(),\n+}\n \n fn main() {\n     match (1, 2, 3) {\n@@ -13,4 +27,48 @@ fn main() {\n         //~^ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n         _ => {}\n     }\n+    match M(1, 2, 3, 4, 5) {\n+        M(1, 2, 3, 4, 5, 6) => {}\n+        //~^ ERROR this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+        M(1,\n+          2,\n+          3,\n+          4,\n+          5,\n+          6) => {}\n+        //~^ ERROR this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+        M(\n+            1,\n+            2,\n+            3,\n+            4,\n+            5,\n+            6,\n+        ) => {}\n+        //~^^ ERROR this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+    }\n+    match Z0 {\n+        Z0 => {}\n+        Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+        Z0(_) => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+        Z0(_, _) => {} //~ ERROR expected tuple struct or tuple variant, found unit struct `Z0`\n+    }\n+    match Z1() {\n+        Z1 => {} //~ ERROR match bindings cannot shadow tuple structs\n+        Z1() => {}\n+        Z1(_) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+        Z1(_, _) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple struct has 0 fields\n+    }\n+    match E1::Z0 {\n+        E1::Z0 => {}\n+        E1::Z0() => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+        E1::Z0(_) => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+        E1::Z0(_, _) => {} //~ ERROR expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+    }\n+    match E1::Z1() {\n+        E1::Z1 => {} //~ ERROR expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+        E1::Z1() => {}\n+        E1::Z1(_) => {} //~ ERROR this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+        E1::Z1(_, _) => {} //~ ERROR this pattern has 2 fields, but the corresponding tuple variant has 0 fields\n+    }\n }"}, {"sha": "1c44f7e5f6f1fa8e1015628fc662c57ffa388a10", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 274, "deletions": 10, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -1,5 +1,154 @@\n+error[E0530]: match bindings cannot shadow tuple structs\n+  --> $DIR/pat-tuple-overfield.rs:57:9\n+   |\n+LL | struct Z1();\n+   | ------------ the tuple struct `Z1` is defined here\n+...\n+LL |         Z1 => {}\n+   |         ^^ cannot be named the same as a tuple struct\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-overfield.rs:52:9\n+   |\n+LL | struct Z0;\n+   | ---------- `Z0` defined here\n+LL | struct Z1();\n+   | ------------ similarly named tuple struct `Z1` defined here\n+...\n+LL |         Z0() => {}\n+   |         ^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1() => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-overfield.rs:53:9\n+   |\n+LL | struct Z0;\n+   | ---------- `Z0` defined here\n+LL | struct Z1();\n+   | ------------ similarly named tuple struct `Z1` defined here\n+...\n+LL |         Z0(_) => {}\n+   |         ^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1(_) => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Z0`\n+  --> $DIR/pat-tuple-overfield.rs:54:9\n+   |\n+LL | struct Z0;\n+   | ---------- `Z0` defined here\n+LL | struct Z1();\n+   | ------------ similarly named tuple struct `Z1` defined here\n+...\n+LL |         Z0(_, _) => {}\n+   |         ^^^^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Z0 => {}\n+   |         ~~\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         Z1(_, _) => {}\n+   |         ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-overfield.rs:64:9\n+   |\n+LL |     Z0,\n+   |     -- `E1::Z0` defined here\n+LL |     Z1(),\n+   |     ---- similarly named tuple variant `Z1` defined here\n+...\n+LL |         E1::Z0() => {}\n+   |         ^^^^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1() => {}\n+   |             ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-overfield.rs:65:9\n+   |\n+LL |     Z0,\n+   |     -- `E1::Z0` defined here\n+LL |     Z1(),\n+   |     ---- similarly named tuple variant `Z1` defined here\n+...\n+LL |         E1::Z0(_) => {}\n+   |         ^^^^^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1(_) => {}\n+   |             ~~\n+\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E1::Z0`\n+  --> $DIR/pat-tuple-overfield.rs:66:9\n+   |\n+LL |     Z0,\n+   |     -- `E1::Z0` defined here\n+LL |     Z1(),\n+   |     ---- similarly named tuple variant `Z1` defined here\n+...\n+LL |         E1::Z0(_, _) => {}\n+   |         ^^^^^^^^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         E1::Z0 => {}\n+   |         ~~~~~~\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         E1::Z1(_, _) => {}\n+   |             ~~\n+\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E1::Z1`\n+  --> $DIR/pat-tuple-overfield.rs:69:9\n+   |\n+LL |     Z0,\n+   |     -- similarly named unit variant `Z0` defined here\n+LL |     Z1(),\n+   |     ---- `E1::Z1` defined here\n+...\n+LL |         E1::Z1 => {}\n+   |         ^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         E1::Z1() => {}\n+   |         ~~~~~~~~\n+help: a unit variant with a similar name exists\n+   |\n+LL |         E1::Z0 => {}\n+   |             ~~\n+\n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-overfield.rs:5:9\n+  --> $DIR/pat-tuple-overfield.rs:19:9\n    |\n LL |     match (1, 2, 3) {\n    |           --------- this expression has type `({integer}, {integer}, {integer})`\n@@ -10,7 +159,7 @@ LL |         (1, 2, 3, 4) => {}\n               found tuple `(_, _, _, _)`\n \n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-overfield.rs:6:9\n+  --> $DIR/pat-tuple-overfield.rs:20:9\n    |\n LL |     match (1, 2, 3) {\n    |           --------- this expression has type `({integer}, {integer}, {integer})`\n@@ -22,24 +171,139 @@ LL |         (1, 2, .., 3, 4) => {}\n               found tuple `(_, _, _, _)`\n \n error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n-  --> $DIR/pat-tuple-overfield.rs:10:9\n+  --> $DIR/pat-tuple-overfield.rs:24:11\n    |\n LL | struct S(u8, u8, u8);\n-   | --------------------- tuple struct defined here\n+   |          --  --  -- tuple struct has 3 fields\n ...\n LL |         S(1, 2, 3, 4) => {}\n-   |         ^^^^^^^^^^^^^ expected 3 fields, found 4\n+   |           ^  ^  ^  ^ expected 3 fields, found 4\n \n error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n-  --> $DIR/pat-tuple-overfield.rs:12:9\n+  --> $DIR/pat-tuple-overfield.rs:26:11\n    |\n LL | struct S(u8, u8, u8);\n-   | --------------------- tuple struct defined here\n+   |          --  --  -- tuple struct has 3 fields\n ...\n LL |         S(1, 2, .., 3, 4) => {}\n-   |         ^^^^^^^^^^^^^^^^^ expected 3 fields, found 4\n+   |           ^  ^      ^  ^ expected 3 fields, found 4\n+\n+error[E0023]: this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+  --> $DIR/pat-tuple-overfield.rs:31:11\n+   |\n+LL | struct M(\n+   |        - tuple struct defined here\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     -- tuple struct has 5 fields\n+...\n+LL |         M(1, 2, 3, 4, 5, 6) => {}\n+   |           ^  ^  ^  ^  ^  ^ expected 5 fields, found 6\n+\n+error[E0023]: this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+  --> $DIR/pat-tuple-overfield.rs:33:11\n+   |\n+LL | struct M(\n+   |        - tuple struct defined here\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     -- tuple struct has 5 fields\n+...\n+LL |         M(1,\n+   |         - ^\n+LL |           2,\n+   |           ^\n+LL |           3,\n+   |           ^\n+LL |           4,\n+   |           ^\n+LL |           5,\n+   |           ^\n+LL |           6) => {}\n+   |           ^ expected 5 fields, found 6\n+\n+error[E0023]: this pattern has 6 fields, but the corresponding tuple struct has 5 fields\n+  --> $DIR/pat-tuple-overfield.rs:41:13\n+   |\n+LL | struct M(\n+   |        - tuple struct defined here\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     --\n+LL |     u8,\n+   |     -- tuple struct has 5 fields\n+...\n+LL |         M(\n+   |         -\n+LL |             1,\n+   |             ^\n+LL |             2,\n+   |             ^\n+LL |             3,\n+   |             ^\n+LL |             4,\n+   |             ^\n+LL |             5,\n+   |             ^\n+LL |             6,\n+   |             ^ expected 5 fields, found 6\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 0 fields\n+  --> $DIR/pat-tuple-overfield.rs:59:12\n+   |\n+LL | struct Z1();\n+   | ------------ tuple struct has 0 fields\n+...\n+LL |         Z1(_) => {}\n+   |            ^ expected 0 fields, found 1\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 0 fields\n+  --> $DIR/pat-tuple-overfield.rs:60:12\n+   |\n+LL | struct Z1();\n+   | ------------ tuple struct has 0 fields\n+...\n+LL |         Z1(_, _) => {}\n+   |            ^  ^ expected 0 fields, found 2\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 0 fields\n+  --> $DIR/pat-tuple-overfield.rs:71:16\n+   |\n+LL |     Z1(),\n+   |     ---- tuple variant has 0 fields\n+...\n+LL |         E1::Z1(_) => {}\n+   |                ^ expected 0 fields, found 1\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 0 fields\n+  --> $DIR/pat-tuple-overfield.rs:72:16\n+   |\n+LL |     Z1(),\n+   |     ---- tuple variant has 0 fields\n+...\n+LL |         E1::Z1(_, _) => {}\n+   |                ^  ^ expected 0 fields, found 2\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0023, E0308.\n+Some errors have detailed explanations: E0023, E0308, E0530, E0532.\n For more information about an error, try `rustc --explain E0023`."}, {"sha": "dac60e3fab2c0038e2d617007f80bf23b65c4c86", "filename": "src/test/ui/pattern/pat-tuple-underfield.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -21,6 +21,12 @@ fn main() {\n         //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n         //~| HELP use `_` to explicitly ignore each field\n         //~| HELP use `..` to ignore all fields\n+\n+        // Test non-standard formatting\n+        S () => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n     }\n \n     match E::S(0, 1.0) {\n@@ -39,6 +45,12 @@ fn main() {\n         //~^ ERROR this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n         //~| HELP use `_` to explicitly ignore each field\n         //~| HELP use `..` to ignore all fields\n+\n+        // Test non-standard formatting\n+        E::S () => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n     }\n     match E::S(0, 1.0) {\n         E::S => {}"}, {"sha": "e75f9b38da56640a90e20896aee3f6dafd4b26a6", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -1,5 +1,5 @@\n error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E::S`\n-  --> $DIR/pat-tuple-underfield.rs:44:9\n+  --> $DIR/pat-tuple-underfield.rs:56:9\n    |\n LL |     S(i32, f32),\n    |     ----------- `E::S` defined here\n@@ -8,27 +8,27 @@ LL |         E::S => {}\n    |         ^^^^ help: use the tuple variant pattern syntax instead: `E::S(_, _)`\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n-  --> $DIR/pat-tuple-underfield.rs:9:9\n+  --> $DIR/pat-tuple-underfield.rs:9:11\n    |\n LL | struct S(i32, f32);\n-   | ------------------- tuple struct defined here\n+   |          ---  --- tuple struct has 2 fields\n ...\n LL |         S(x) => {}\n-   |         ^^^^ expected 2 fields, found 1\n+   |           ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n LL |         S(x, _) => {}\n    |            +++\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n-  --> $DIR/pat-tuple-underfield.rs:14:9\n+  --> $DIR/pat-tuple-underfield.rs:14:11\n    |\n LL | struct S(i32, f32);\n-   | ------------------- tuple struct defined here\n+   |          ---  --- tuple struct has 2 fields\n ...\n LL |         S(_) => {}\n-   |         ^^^^ expected 2 fields, found 1\n+   |           ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -43,7 +43,7 @@ error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has\n   --> $DIR/pat-tuple-underfield.rs:20:9\n    |\n LL | struct S(i32, f32);\n-   | ------------------- tuple struct defined here\n+   |          ---  --- tuple struct has 2 fields\n ...\n LL |         S() => {}\n    |         ^^^ expected 2 fields, found 0\n@@ -57,28 +57,46 @@ help: use `..` to ignore all fields\n LL |         S(..) => {}\n    |           ++\n \n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:26:9\n+   |\n+LL | struct S(i32, f32);\n+   |          ---  --- tuple struct has 2 fields\n+...\n+LL |         S () => {}\n+   |         ^^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S (_, _) => {}\n+   |            ++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         S (..) => {}\n+   |            ++\n+\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/pat-tuple-underfield.rs:27:9\n+  --> $DIR/pat-tuple-underfield.rs:33:14\n    |\n LL |     S(i32, f32),\n-   |     ----------- tuple variant defined here\n+   |       ---  --- tuple variant has 2 fields\n ...\n LL |         E::S(x) => {}\n-   |         ^^^^^^^ expected 2 fields, found 1\n+   |              ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n LL |         E::S(x, _) => {}\n    |               +++\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/pat-tuple-underfield.rs:32:9\n+  --> $DIR/pat-tuple-underfield.rs:38:14\n    |\n LL |     S(i32, f32),\n-   |     ----------- tuple variant defined here\n+   |       ---  --- tuple variant has 2 fields\n ...\n LL |         E::S(_) => {}\n-   |         ^^^^^^^ expected 2 fields, found 1\n+   |              ^ expected 2 fields, found 1\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -90,10 +108,10 @@ LL |         E::S(..) => {}\n    |              ~~\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/pat-tuple-underfield.rs:38:9\n+  --> $DIR/pat-tuple-underfield.rs:44:9\n    |\n LL |     S(i32, f32),\n-   |     ----------- tuple variant defined here\n+   |       ---  --- tuple variant has 2 fields\n ...\n LL |         E::S() => {}\n    |         ^^^^^^ expected 2 fields, found 0\n@@ -107,14 +125,32 @@ help: use `..` to ignore all fields\n LL |         E::S(..) => {}\n    |              ++\n \n-error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 4 fields\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:50:9\n    |\n+LL |     S(i32, f32),\n+   |       ---  --- tuple variant has 2 fields\n+...\n+LL |         E::S () => {}\n+   |         ^^^^^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S (_, _) => {}\n+   |               ++++\n+help: use `..` to ignore all fields\n+   |\n+LL |         E::S (..) => {}\n+   |               ++\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 4 fields\n+  --> $DIR/pat-tuple-underfield.rs:62:19\n+   |\n LL | struct Point4(i32, i32, i32, i32);\n-   | ---------------------------------- tuple struct defined here\n+   |               ---  ---  ---  --- tuple struct has 4 fields\n ...\n LL |         Point4(   a   ,     _    ) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 4 fields, found 2\n+   |                   ^         ^ expected 4 fields, found 2\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -125,7 +161,7 @@ help: use `..` to ignore the rest of the fields\n LL |         Point4(   a, ..) => {}\n    |                    ~~~~\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0023, E0532.\n For more information about an error, try `rustc --explain E0023`."}, {"sha": "c800afdae2afb4ef205fbfdce14a090139c75504", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -26,13 +26,13 @@ LL |         A::B(_) => (),\n    |            ~\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/pattern-error-continue.rs:17:9\n+  --> $DIR/pattern-error-continue.rs:17:14\n    |\n LL |     B(isize, isize),\n-   |     --------------- tuple variant defined here\n+   |       -----  ----- tuple variant has 2 fields\n ...\n LL |         A::B(_, _, _) => (),\n-   |         ^^^^^^^^^^^^^ expected 2 fields, found 3\n+   |              ^  ^  ^ expected 2 fields, found 3\n \n error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:22:9"}, {"sha": "37543c137f66f861d4dbf23e8d50afa15c09b35a", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -5,6 +5,12 @@ LL |     <E>::V();\n    |     ^^^^^^-- supplied 0 arguments\n    |     |\n    |     expected 1 argument\n+   |\n+note: tuple variant defined here\n+  --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:5:5\n+   |\n+LL |     V(u8)\n+   |     ^\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}, {"sha": "6e99feed33f9c9d99c43ceeb17961e0c319aee5d", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa46e51dfc20f6bc01207d67a5f666239ed8e07/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=8aa46e51dfc20f6bc01207d67a5f666239ed8e07", "patch": "@@ -29,6 +29,12 @@ LL |     let _ = Wrapper();\n    |             ^^^^^^^-- supplied 0 arguments\n    |             |\n    |             expected 1 argument\n+   |\n+note: tuple struct defined here\n+  --> $DIR/struct-enum-wrong-args.rs:2:8\n+   |\n+LL | struct Wrapper(i32);\n+   |        ^^^^^^^\n \n error[E0061]: this struct takes 1 argument but 2 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:10:13\n@@ -37,6 +43,12 @@ LL |     let _ = Wrapper(5, 2);\n    |             ^^^^^^^ -  - supplied 2 arguments\n    |             |\n    |             expected 1 argument\n+   |\n+note: tuple struct defined here\n+  --> $DIR/struct-enum-wrong-args.rs:2:8\n+   |\n+LL | struct Wrapper(i32);\n+   |        ^^^^^^^\n \n error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:11:13\n@@ -45,6 +57,12 @@ LL |     let _ = DoubleWrapper();\n    |             ^^^^^^^^^^^^^-- supplied 0 arguments\n    |             |\n    |             expected 2 arguments\n+   |\n+note: tuple struct defined here\n+  --> $DIR/struct-enum-wrong-args.rs:3:8\n+   |\n+LL | struct DoubleWrapper(i32, i32);\n+   |        ^^^^^^^^^^^^^\n \n error[E0061]: this struct takes 2 arguments but 1 argument was supplied\n   --> $DIR/struct-enum-wrong-args.rs:12:13\n@@ -53,6 +71,12 @@ LL |     let _ = DoubleWrapper(5);\n    |             ^^^^^^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 2 arguments\n+   |\n+note: tuple struct defined here\n+  --> $DIR/struct-enum-wrong-args.rs:3:8\n+   |\n+LL | struct DoubleWrapper(i32, i32);\n+   |        ^^^^^^^^^^^^^\n \n error[E0061]: this struct takes 2 arguments but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:13:13\n@@ -61,6 +85,12 @@ LL |     let _ = DoubleWrapper(5, 2, 7);\n    |             ^^^^^^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 2 arguments\n+   |\n+note: tuple struct defined here\n+  --> $DIR/struct-enum-wrong-args.rs:3:8\n+   |\n+LL | struct DoubleWrapper(i32, i32);\n+   |        ^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}]}