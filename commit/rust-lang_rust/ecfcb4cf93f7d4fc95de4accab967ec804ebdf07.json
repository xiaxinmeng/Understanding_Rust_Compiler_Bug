{"sha": "ecfcb4cf93f7d4fc95de4accab967ec804ebdf07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZmNiNGNmOTNmN2Q0ZmM5NWRlNGFjY2FiOTY3ZWM4MDRlYmRmMDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T17:17:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T17:17:15Z"}, "message": "Rollup merge of #65370 - Cerberuser:patch-1, r=jonas-schievink\n\nAdd `dyn` to `Any` documentation\n\nI noticed that in documentation to `Any` trait the old trait object syntax is used, which could be confusing for newcomers, since we generally recommend using `dyn Trait` instead of just `Trait`. This PR changes the documentation comment, so that it uses `&dyn Any`, `&mut dyn Any` and `Box<dyn Any>`, correspondingly.", "tree": {"sha": "572ac30f59416b135a6fd383159815b57bc9bf00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572ac30f59416b135a6fd383159815b57bc9bf00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdo1wbCRBK7hj4Ov3rIwAAdHIIAF2ULbVNxhUIEoXGVuoomVlx\nOv5g9vNA0uEKtLWJhuOx3uazAe2TpHWffPKrhUPxZAoMqfqUevnSzG9EtRfd3C3l\nz5hxP/qzlojWHuXhWGDu+dH3nvrtWhDnIiQmR7lBr6jo1nct6RcWSigetEHLj8Dx\nNAkDrSkisMjxQLMvbSh4UqOJK7vaw1Otsfime3E6Z7WpFi1RvVAMzZ/Yqc6JQviu\n1olxSguEwxGRdNKIfgs+3RoS46z5NrOC3YQY92SXDVW842eobjnpNFMiKjqBXR7x\ng2fK/BP6T5U4jS2Ac69SKbK8MZzRkjsvNWpRMp4q8aW/t74BHz0RL/09PfPgQeg=\n=ZQld\n-----END PGP SIGNATURE-----\n", "payload": "tree 572ac30f59416b135a6fd383159815b57bc9bf00\nparent 77f685390c5b85e84aeb010b37b3bb9c5839eb4d\nparent 0510bbfb35c4628f4574b6b798d395bfa9f9a218\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570987035 +0200\ncommitter GitHub <noreply@github.com> 1570987035 +0200\n\nRollup merge of #65370 - Cerberuser:patch-1, r=jonas-schievink\n\nAdd `dyn` to `Any` documentation\n\nI noticed that in documentation to `Any` trait the old trait object syntax is used, which could be confusing for newcomers, since we generally recommend using `dyn Trait` instead of just `Trait`. This PR changes the documentation comment, so that it uses `&dyn Any`, `&mut dyn Any` and `Box<dyn Any>`, correspondingly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07", "html_url": "https://github.com/rust-lang/rust/commit/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f685390c5b85e84aeb010b37b3bb9c5839eb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f685390c5b85e84aeb010b37b3bb9c5839eb4d", "html_url": "https://github.com/rust-lang/rust/commit/77f685390c5b85e84aeb010b37b3bb9c5839eb4d"}, {"sha": "0510bbfb35c4628f4574b6b798d395bfa9f9a218", "url": "https://api.github.com/repos/rust-lang/rust/commits/0510bbfb35c4628f4574b6b798d395bfa9f9a218", "html_url": "https://github.com/rust-lang/rust/commit/0510bbfb35c4628f4574b6b798d395bfa9f9a218"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f75b7a454438406c25bbf0025fc26ac6e8644367", "filename": "src/libcore/any.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfcb4cf93f7d4fc95de4accab967ec804ebdf07/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=ecfcb4cf93f7d4fc95de4accab967ec804ebdf07", "patch": "@@ -2,14 +2,14 @@\n //! of any `'static` type through runtime reflection.\n //!\n //! `Any` itself can be used to get a `TypeId`, and has more features when used\n-//! as a trait object. As `&Any` (a borrowed trait object), it has the `is` and\n-//! `downcast_ref` methods, to test if the contained value is of a given type,\n-//! and to get a reference to the inner value as a type. As `&mut Any`, there\n+//! as a trait object. As `&dyn Any` (a borrowed trait object), it has the `is`\n+//! and `downcast_ref` methods, to test if the contained value is of a given type,\n+//! and to get a reference to the inner value as a type. As `&mut dyn Any`, there\n //! is also the `downcast_mut` method, for getting a mutable reference to the\n-//! inner value. `Box<Any>` adds the `downcast` method, which attempts to\n+//! inner value. `Box<dyn Any>` adds the `downcast` method, which attempts to\n //! convert to a `Box<T>`. See the [`Box`] documentation for the full details.\n //!\n-//! Note that &Any is limited to testing whether a value is of a specified\n+//! Note that `&dyn Any` is limited to testing whether a value is of a specified\n //! concrete type, and cannot be used to test whether a type implements a trait.\n //!\n //! [`Box`]: ../../std/boxed/struct.Box.html"}]}