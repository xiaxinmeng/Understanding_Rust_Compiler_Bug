{"sha": "9fc083323503134a9af73516f22347ecc6650705", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzA4MzMyMzUwMzEzNGE5YWY3MzUxNmYyMjM0N2VjYzY2NTA3MDU=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-16T22:43:04Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-20T21:38:06Z"}, "message": "Stop accessing module level int consts via crate::<Ty>", "tree": {"sha": "e88dd08ef6b68c1a473e2a86eb06be542e63b9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88dd08ef6b68c1a473e2a86eb06be542e63b9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc083323503134a9af73516f22347ecc6650705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc083323503134a9af73516f22347ecc6650705", "html_url": "https://github.com/rust-lang/rust/commit/9fc083323503134a9af73516f22347ecc6650705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc083323503134a9af73516f22347ecc6650705/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce3f840ae9b735a66531996c32330f24b877cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "html_url": "https://github.com/rust-lang/rust/commit/8ce3f840ae9b735a66531996c32330f24b877cb0"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "e9fc1b612dd39aa385edd5a5912ae0a44acbadd5", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -2,7 +2,6 @@ use crate::cmp;\n use crate::fmt;\n use crate::intrinsics;\n use crate::ops::{Add, AddAssign, Try};\n-use crate::usize;\n \n use super::{from_fn, LoopState};\n use super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedLen};"}, {"sha": "37369289c512e9b3314d1b7c1b79dc7d48bdb3d6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -1,7 +1,6 @@\n use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Add, Sub, Try};\n-use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n "}, {"sha": "d76fa89bd012c22f4167b25e336a4aa917d321f0", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -1,6 +1,5 @@\n use crate::fmt;\n use crate::marker;\n-use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n "}, {"sha": "9bf56e93d896f1d96db0c7de7b6e0053ea62b1e6", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -123,7 +123,6 @@ functions.\n )]\n \n pub use self::decoder::{decode, DecodableFloat, Decoded, FullDecoded};\n-use crate::i16;\n \n pub mod decoder;\n pub mod estimator;"}, {"sha": "3b13ed5fed396918ac7ab575eb6e17ba3a3ab54b", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -34,7 +34,7 @@ fn repeat_byte(b: u8) -> usize {\n #[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n fn repeat_byte(b: u8) -> usize {\n-    (b as usize) * (crate::usize::MAX / 255)\n+    (b as usize) * (usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`."}, {"sha": "dc395bcfba5ccf5be2d38f62cdf686da8bf27910", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -28,7 +28,6 @@ use crate::cmp;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::fmt;\n use crate::intrinsics::{assume, exact_div, is_aligned_and_not_null, unchecked_sub};\n-use crate::isize;\n use crate::iter::*;\n use crate::marker::{self, Copy, Send, Sized, Sync};\n use crate::mem;"}, {"sha": "ef0ec42bc8fcf1c7fec5ae7c3ed0a13a13cf538e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -12,7 +12,6 @@\n use crate::cmp;\n use crate::fmt;\n use crate::slice::memchr;\n-use crate::usize;\n \n // Pattern\n "}, {"sha": "ed1d5d46db5c4c02c7b793f3ad240edb9f68d007", "filename": "src/libcore/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -12,9 +12,9 @@\n //! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n //! ```\n \n+use crate::fmt;\n use crate::iter::Sum;\n use crate::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n-use crate::{fmt, u64};\n \n const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;"}, {"sha": "7a3cbbe4562ff70f8ff480c85e703ed2614d593e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc083323503134a9af73516f22347ecc6650705/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc083323503134a9af73516f22347ecc6650705/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=9fc083323503134a9af73516f22347ecc6650705", "patch": "@@ -1062,7 +1062,7 @@ impl ThreadId {\n \n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n-            if COUNTER == crate::u64::MAX {\n+            if COUNTER == u64::MAX {\n                 panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n             }\n "}]}