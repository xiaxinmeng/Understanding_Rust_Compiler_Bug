{"sha": "3698b3eab870706e6db075b3dcae7f095086c18c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OThiM2VhYjg3MDcwNmU2ZGIwNzViM2RjYWU3ZjA5NTA4NmMxOGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T09:40:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T09:40:31Z"}, "message": "Avoid duplicate `cargo check`s", "tree": {"sha": "eb6d9380064c0c8bbdf46b936add1946d829762e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6d9380064c0c8bbdf46b936add1946d829762e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3698b3eab870706e6db075b3dcae7f095086c18c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3698b3eab870706e6db075b3dcae7f095086c18c", "html_url": "https://github.com/rust-lang/rust/commit/3698b3eab870706e6db075b3dcae7f095086c18c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3698b3eab870706e6db075b3dcae7f095086c18c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca59733e396c47fd3ab4c07c9567e9ec67a849c", "html_url": "https://github.com/rust-lang/rust/commit/9ca59733e396c47fd3ab4c07c9567e9ec67a849c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "ae364f8627c96a840314c450f77bdaabb8267660", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3698b3eab870706e6db075b3dcae7f095086c18c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698b3eab870706e6db075b3dcae7f095086c18c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3698b3eab870706e6db075b3dcae7f095086c18c", "patch": "@@ -2,6 +2,7 @@\n //! requests/replies and notifications back to the client.\n use std::{\n     env, fmt,\n+    sync::Arc,\n     time::{Duration, Instant},\n };\n \n@@ -229,17 +230,23 @@ impl GlobalState {\n                                 }\n                                 ProjectWorkspaceProgress::End(workspaces) => {\n                                     self.fetch_workspaces_completed(workspaces);\n+\n+                                    let old = Arc::clone(&self.workspaces);\n                                     self.switch_workspaces();\n-                                    if self.config.run_build_scripts() {\n+                                    let workspaces_updated = !Arc::ptr_eq(&old, &self.workspaces);\n+\n+                                    if self.config.run_build_scripts() && workspaces_updated {\n                                         let mut collector = BuildDataCollector::default();\n                                         for ws in self.workspaces.iter() {\n                                             ws.collect_build_data_configs(&mut collector);\n                                         }\n                                         self.fetch_build_data_request(collector)\n                                     }\n+\n                                     (Progress::End, None)\n                                 }\n                             };\n+\n                             self.report_progress(\"fetching\", state, msg, None);\n                         }\n                         Task::FetchBuildData(progress) => {\n@@ -250,15 +257,19 @@ impl GlobalState {\n                                 }\n                                 BuildDataProgress::End(build_data_result) => {\n                                     self.fetch_build_data_completed(build_data_result);\n+\n                                     self.switch_workspaces();\n+\n                                     (Some(Progress::End), None)\n                                 }\n                             };\n+\n                             if let Some(state) = state {\n                                 self.report_progress(\"loading\", state, msg, None);\n                             }\n                         }\n                     }\n+\n                     // Coalesce multiple task events into one loop turn\n                     task = match self.task_pool.receiver.try_recv() {\n                         Ok(task) => task,"}]}