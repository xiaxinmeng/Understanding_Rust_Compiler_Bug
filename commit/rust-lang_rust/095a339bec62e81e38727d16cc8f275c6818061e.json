{"sha": "095a339bec62e81e38727d16cc8f275c6818061e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NWEzMzliZWM2MmU4MWUzODcyN2QxNmNjOGYyNzVjNjgxODA2MWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-23T14:19:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-06-27T12:00:34Z"}, "message": "Remove the now redundant CodeMap::new_filemap_with_lines() method.", "tree": {"sha": "744f0c5097bc46ade5425c20ac499f41940a06ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744f0c5097bc46ade5425c20ac499f41940a06ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/095a339bec62e81e38727d16cc8f275c6818061e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/095a339bec62e81e38727d16cc8f275c6818061e", "html_url": "https://github.com/rust-lang/rust/commit/095a339bec62e81e38727d16cc8f275c6818061e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/095a339bec62e81e38727d16cc8f275c6818061e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257d279fe47bbf3431c76f0942654c1bcf60d501", "url": "https://api.github.com/repos/rust-lang/rust/commits/257d279fe47bbf3431c76f0942654c1bcf60d501", "html_url": "https://github.com/rust-lang/rust/commit/257d279fe47bbf3431c76f0942654c1bcf60d501"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "5e23c1b0d6207eed4fe695240cf1f45f69e6026d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=095a339bec62e81e38727d16cc8f275c6818061e", "patch": "@@ -211,8 +211,7 @@ impl CodeMap {\n         }\n     }\n \n-    /// Creates a new filemap without setting its line information. If you don't\n-    /// intend to set the line information yourself, you should use new_filemap_and_lines.\n+    /// Creates a new filemap.\n     /// This does not ensure that only one FileMap exists per file name.\n     pub fn new_filemap(&self, filename: FileName, src: String) -> Lrc<FileMap> {\n         let start_pos = self.next_start_pos();\n@@ -247,13 +246,6 @@ impl CodeMap {\n         filemap\n     }\n \n-    /// Creates a new filemap and sets its line information.\n-    /// This does not ensure that only one FileMap exists per file name.\n-    pub fn new_filemap_and_lines(&self, filename: &Path, src: &str) -> Lrc<FileMap> {\n-        self.new_filemap(filename.to_owned().into(), src.to_owned())\n-    }\n-\n-\n     /// Allocates a new FileMap representing a source file from an external\n     /// crate. The source code of such an \"imported filemap\" is not available,\n     /// but we still know enough to generate accurate debuginfo location\n@@ -1188,7 +1180,7 @@ mod tests {\n         let cm = CodeMap::new(FilePathMapping::empty());\n         let inputtext = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n         let selection = \"     \\n    ~~\\n~~~\\n~~~~~     \\n   \\n\";\n-        cm.new_filemap_and_lines(Path::new(\"blork.rs\"), inputtext);\n+        cm.new_filemap(Path::new(\"blork.rs\").to_owned().into(), inputtext.to_string());\n         let span = span_from_selection(inputtext, selection);\n \n         // check that we are extracting the text we thought we were extracting\n@@ -1231,7 +1223,7 @@ mod tests {\n         let inputtext  = \"bbbb BB\\ncc CCC\\n\";\n         let selection1 = \"     ~~\\n      \\n\";\n         let selection2 = \"       \\n   ~~~\\n\";\n-        cm.new_filemap_and_lines(Path::new(\"blork.rs\"), inputtext);\n+        cm.new_filemap(Path::new(\"blork.rs\").to_owned().into(), inputtext.to_owned());\n         let span1 = span_from_selection(inputtext, selection1);\n         let span2 = span_from_selection(inputtext, selection2);\n "}, {"sha": "094e572693ccaf2b7808df99e1209f4a784801c9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=095a339bec62e81e38727d16cc8f275c6818061e", "patch": "@@ -1487,17 +1487,19 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n                     match String::from_utf8(buf) {\n                         Ok(src) => {\n+                            let src_interned = Symbol::intern(&src);\n+\n                             // Add this input file to the code map to make it available as\n                             // dependency information\n-                            self.cx.codemap().new_filemap_and_lines(&filename, &src);\n+                            self.cx.codemap().new_filemap(filename.into(), src);\n \n                             let include_info = vec![\n                                 dummy_spanned(ast::NestedMetaItemKind::MetaItem(\n                                         attr::mk_name_value_item_str(Ident::from_str(\"file\"),\n                                                                      dummy_spanned(file)))),\n                                 dummy_spanned(ast::NestedMetaItemKind::MetaItem(\n                                         attr::mk_name_value_item_str(Ident::from_str(\"contents\"),\n-                                                            dummy_spanned(Symbol::intern(&src))))),\n+                                                            dummy_spanned(src_interned)))),\n                             ];\n \n                             let include_ident = Ident::from_str(\"include\");"}, {"sha": "669536f519ce31274453123b7ea42d384851921d", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=095a339bec62e81e38727d16cc8f275c6818061e", "patch": "@@ -150,11 +150,13 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenT\n     };\n     match String::from_utf8(bytes) {\n         Ok(src) => {\n+            let interned_src = Symbol::intern(&src);\n+\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            cx.codemap().new_filemap_and_lines(&file, &src);\n+            cx.codemap().new_filemap(file.into(), src);\n \n-            base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&src)))\n+            base::MacEager::expr(cx.expr_str(sp, interned_src))\n         }\n         Err(_) => {\n             cx.span_err(sp,\n@@ -182,7 +184,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n         Ok(..) => {\n             // Add this input file to the code map to make it available as\n             // dependency information, but don't enter it's contents\n-            cx.codemap().new_filemap_and_lines(&file, \"\");\n+            cx.codemap().new_filemap(file.into(), \"\".to_string());\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         }"}, {"sha": "c7e4fbd1073d7c06cb8657c0cd12f4d0b07a2b54", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095a339bec62e81e38727d16cc8f275c6818061e/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=095a339bec62e81e38727d16cc8f275c6818061e", "patch": "@@ -51,7 +51,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n         let code_map = Lrc::new(CodeMap::new(FilePathMapping::empty()));\n-        code_map.new_filemap_and_lines(Path::new(\"test.rs\"), &file_text);\n+        code_map.new_filemap(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n \n         let primary_span = make_span(&file_text, &span_labels[0].start, &span_labels[0].end);\n         let mut msp = MultiSpan::from_span(primary_span);"}]}