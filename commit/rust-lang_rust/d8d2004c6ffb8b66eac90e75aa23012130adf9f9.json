{"sha": "d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDIwMDRjNmZmYjhiNjZlYWM5MGU3NWFhMjMwMTIxMzBhZGY5Zjk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T14:53:14Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T19:41:03Z"}, "message": "Don't use \"if let\" bindings to only check a value and not actually bind anything.\n\nFor example:  `if let Some(_) = foo() {}`\tcan be reduced to\t`if foo().is_some() {}`   (clippy::redundant_pattern_matching)", "tree": {"sha": "3f827a8f9ab5363f24cc85cecc91a8318551cbf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f827a8f9ab5363f24cc85cecc91a8318551cbf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "html_url": "https://github.com/rust-lang/rust/commit/d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38f5db72681289f6ebbcb3c89081f021aa6fdc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f5db72681289f6ebbcb3c89081f021aa6fdc63", "html_url": "https://github.com/rust-lang/rust/commit/38f5db72681289f6ebbcb3c89081f021aa6fdc63"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "0c243128104e789fb447af1be383e317ec22ee18", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -725,7 +725,7 @@ pub(crate) unsafe fn codegen(\n                         Err(_) => return 0,\n                     };\n \n-                    if let Err(_) = write!(cursor, \"{:#}\", demangled) {\n+                    if write!(cursor, \"{:#}\", demangled).is_err() {\n                         // Possible only if provided buffer is not big enough\n                         return 0;\n                     }"}, {"sha": "b313bf57d4a9a016a4f108a4b8d9d1d9a978b9c7", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -1257,7 +1257,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                 if main_thread_worker_state == MainThreadWorkerState::Idle {\n                     if !queue_full_enough(work_items.len(), running, max_workers) {\n                         // The queue is not full enough, codegen more items:\n-                        if let Err(_) = codegen_worker_send.send(Message::CodegenItem) {\n+                        if codegen_worker_send.send(Message::CodegenItem).is_err() {\n                             panic!(\"Could not send Message::CodegenItem to main thread\")\n                         }\n                         main_thread_worker_state = MainThreadWorkerState::Codegenning;"}, {"sha": "f0e388a597b408ff554449d657ecc0c20e70bbb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -163,7 +163,7 @@ impl CodeSuggestion {\n                         None => buf.push_str(&line[lo..]),\n                     }\n                 }\n-                if let None = hi_opt {\n+                if hi_opt.is_none() {\n                     buf.push('\\n');\n                 }\n             }"}, {"sha": "7866ddbd4ccd85e8bf3642d05c24ab0e1952bc9e", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -426,7 +426,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n             if let Some(n) = a.value_str() {\n-                if let Some(_) = categorize_crate_type(n) {\n+                if categorize_crate_type(n).is_some() {\n                     return;\n                 }\n "}, {"sha": "a6e8a0ab9301c1c3660dc50cfab99c937bdd6bdd", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -335,7 +335,7 @@ impl LintStore {\n             lint_name.to_string()\n         };\n         // If the lint was scoped with `tool::` check if the tool lint exists\n-        if let Some(_) = tool_name {\n+        if tool_name.is_some() {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n                     None => return CheckLintNameResult::Tool(Err((None, String::new()))),"}, {"sha": "652de6c7b6fdf0d6abef7dd2064b3addec1b9c22", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -1905,7 +1905,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // expressions evaluate through `as_temp` or `into` a return\n             // slot or local, so to find all unsized rvalues it is enough\n             // to check all temps, return slots and locals.\n-            if let None = self.reported_errors.replace((ty, span)) {\n+            if self.reported_errors.replace((ty, span)).is_none() {\n                 let mut diag = struct_span_err!(\n                     self.tcx().sess,\n                     span,"}, {"sha": "b0f048ff1a6fdbd0da04c0d29638088b27ba356b", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -64,7 +64,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     }\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n-        if let Some(_) = &mut self.borrowck_context {\n+        if self.borrowck_context.is_some() {\n             let origin = NLLRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {"}, {"sha": "3c4a1857f9690e80fb69c60c4a91e33aa540e2be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -565,7 +565,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n-        if let Some(_) = self.get_fn_alloc(id) {\n+        if self.get_fn_alloc(id).is_some() {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n                 throw_unsup!(DerefFunctionPointer)"}, {"sha": "86596e205562ed034919e2a15ac8567caecfe548", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d2004c6ffb8b66eac90e75aa23012130adf9f9/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "patch": "@@ -196,7 +196,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead.\n-    if let Ok(_) = tcx.sess.source_map().lookup_line(sp.lo()) {\n+    if tcx.sess.source_map().lookup_line(sp.lo()).is_ok() {\n         err.set_span(sp);\n         err.span_label(sp, &note);\n     } else {"}]}