{"sha": "ce4b5c8afc735454fd8476de957e9804c61bff01", "node_id": "C_kwDOAAsO6NoAKGNlNGI1YzhhZmM3MzU0NTRmZDg0NzZkZTk1N2U5ODA0YzYxYmZmMDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T16:10:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Skip inlining if there are normalization issues.", "tree": {"sha": "94781ac7f1f5d8726393c2031d4baeef7bd2747a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94781ac7f1f5d8726393c2031d4baeef7bd2747a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce4b5c8afc735454fd8476de957e9804c61bff01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4b5c8afc735454fd8476de957e9804c61bff01", "html_url": "https://github.com/rust-lang/rust/commit/ce4b5c8afc735454fd8476de957e9804c61bff01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce4b5c8afc735454fd8476de957e9804c61bff01/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0161ecd13f31d3521791d419522bab55eabfa717", "url": "https://api.github.com/repos/rust-lang/rust/commits/0161ecd13f31d3521791d419522bab55eabfa717", "html_url": "https://github.com/rust-lang/rust/commit/0161ecd13f31d3521791d419522bab55eabfa717"}], "stats": {"total": 158, "additions": 97, "deletions": 61}, "files": [{"sha": "8d34d723bfb83587145b9641474ca92671b60e9f", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ce4b5c8afc735454fd8476de957e9804c61bff01/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4b5c8afc735454fd8476de957e9804c61bff01/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=ce4b5c8afc735454fd8476de957e9804c61bff01", "patch": "@@ -1,6 +1,7 @@\n //! Inlining pass for MIR functions\n use crate::deref_separator::deref_finder;\n use rustc_attr::InlineAttr;\n+use rustc_const_eval::transform::validate::equal_up_to_regions;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -166,6 +167,45 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"failed to normalize callee body\");\n         };\n \n+        // Check call signature compatibility.\n+        // Normally, this shouldn't be required, but trait normalization failure can create a\n+        // validation ICE.\n+        let terminator = caller_body[callsite.block].terminator.as_ref().unwrap();\n+        let TerminatorKind::Call { args, destination, .. } = &terminator.kind else { bug!() };\n+        let destination_ty = destination.ty(&caller_body.local_decls, self.tcx).ty;\n+        let output_type = callee_body.return_ty();\n+        if !equal_up_to_regions(self.tcx, self.param_env, output_type, destination_ty) {\n+            trace!(?output_type, ?destination_ty);\n+            return Err(\"failed to normalize return type\");\n+        }\n+        if callsite.fn_sig.abi() == Abi::RustCall {\n+            let mut args = args.into_iter();\n+            let _ = args.next(); // Skip `self` argument.\n+            let arg_tuple_ty = args.next().unwrap().ty(&caller_body.local_decls, self.tcx);\n+            assert!(args.next().is_none());\n+\n+            let ty::Tuple(arg_tuple_tys) = arg_tuple_ty.kind() else {\n+                bug!(\"Closure arguments are not passed as a tuple\");\n+            };\n+\n+            for (arg_ty, input) in arg_tuple_tys.iter().zip(callee_body.args_iter().skip(1)) {\n+                let input_type = callee_body.local_decls[input].ty;\n+                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                    trace!(?arg_ty, ?input_type);\n+                    return Err(\"failed to normalize tuple argument type\");\n+                }\n+            }\n+        } else {\n+            for (arg, input) in args.iter().zip(callee_body.args_iter()) {\n+                let input_type = callee_body.local_decls[input].ty;\n+                let arg_ty = arg.ty(&caller_body.local_decls, self.tcx);\n+                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                    trace!(?arg_ty, ?input_type);\n+                    return Err(\"failed to normalize argument type\");\n+                }\n+            }\n+        }\n+\n         let old_blocks = caller_body.basic_blocks().next_index();\n         self.inline_call(caller_body, &callsite, callee_body);\n         let new_blocks = old_blocks..caller_body.basic_blocks().next_index();"}, {"sha": "32aa3b6f1cad80af681e5dbec9c11920c3137ecf", "filename": "src/test/mir-opt/inline/caller-with-trivial-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce4b5c8afc735454fd8476de957e9804c61bff01/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4b5c8afc735454fd8476de957e9804c61bff01/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller-with-trivial-bound.rs?ref=ce4b5c8afc735454fd8476de957e9804c61bff01", "patch": "@@ -0,0 +1,24 @@\n+#![crate_type = \"lib\"]\n+\n+pub trait Factory<T> {\n+    type Item;\n+}\n+\n+pub struct IntFactory;\n+\n+impl<T> Factory<T> for IntFactory {\n+    type Item = usize;\n+}\n+\n+// EMIT_MIR caller_with_trivial_bound.foo.Inline.diff\n+pub fn foo<T>()\n+where\n+    IntFactory: Factory<T>,\n+{\n+    let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n+}\n+\n+#[inline(always)]\n+pub fn bar<T>() -> <IntFactory as Factory<T>>::Item {\n+    0usize\n+}"}, {"sha": "a1ce24f44dab3af410e9605e6fcdaa3b8a9bf568", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce4b5c8afc735454fd8476de957e9804c61bff01/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ce4b5c8afc735454fd8476de957e9804c61bff01/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff?ref=ce4b5c8afc735454fd8476de957e9804c61bff01", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `foo` before Inline\n++ // MIR for `foo` after Inline\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/caller-with-trivial-bound.rs:15:1: 15:1\n+      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller-with-trivial-bound.rs:18:9: 18:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/caller-with-trivial-bound.rs:18:9: 18:14\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:18:9: 18:14\n+          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:18:51: 18:61\n+                                           // mir::Constant\n+                                           // + span: $DIR/caller-with-trivial-bound.rs:18:51: 18:59\n+                                           // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/caller-with-trivial-bound.rs:17:1: 19:2\n+          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller-with-trivial-bound.rs:19:1: 19:2\n+      }\n+  \n+      bb2: {\n+          StorageDead(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:19:1: 19:2\n+          return;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:19:2: 19:2\n+      }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:14:1: 19:2\n+      }\n+  }\n+  "}, {"sha": "fd975aaaee4a812adaf0e6c3dd545eeae8647434", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -1,43 +0,0 @@\n-// known-bug: #93008\n-// build-fail\n-// failure-status: 101\n-// compile-flags:--crate-type=lib -Zmir-opt-level=3\n-// rustc-env:RUST_BACKTRACE=0\n-\n-// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// normalize-stderr-test \"error: internal compiler error.*\" -> \"error: internal compiler error\"\n-// normalize-stderr-test \"encountered.*with incompatible types:\" \"encountered ... with incompatible types:\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n-// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n-// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n-// normalize-stderr-test \"#.*\\n\" -> \"\"\n-\n-// This is a known bug that @compiler-errors tried to fix in #94238,\n-// but the solution was probably not correct.\n-\n-pub trait Factory<T> {\n-    type Item;\n-}\n-\n-pub struct IntFactory;\n-\n-impl<T> Factory<T> for IntFactory {\n-    type Item = usize;\n-}\n-\n-pub fn foo<T>()\n-where\n-    IntFactory: Factory<T>,\n-{\n-    let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n-}\n-\n-#[inline]\n-pub fn bar<T>() -> <IntFactory as Factory<T>>::Item {\n-    0usize\n-}"}, {"sha": "56cc5c93c96f23ba33aa66a2d7d28a2cb9d3dfa0", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0161ecd13f31d3521791d419522bab55eabfa717/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0161ecd13f31d3521791d419522bab55eabfa717/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.stderr?ref=0161ecd13f31d3521791d419522bab55eabfa717", "patch": "@@ -1,18 +0,0 @@\n-error: internal compiler error\n-\n-error: internal compiler error\n-                                encountered ... with incompatible types:\n-                                left-hand side has type: <IntFactory as Factory<T>>::Item\n-                                right-hand side has type: usize\n-  --> $DIR/select-param-env-instead-of-blanket.rs:42:5\n-   |\n-LL |     let mut x: <IntFactory as Factory<T>>::Item = bar::<T>();\n-   |                                                   ---------- in this inlined function call\n-...\n-LL |     0usize\n-   |     ^^^^^^\n-   |\n-   = note: delayed at compiler/rustc_const_eval/src/transform/validate.rs:128:36\n-\n-thread 'rustc' panicked\n-"}]}