{"sha": "cc0584731a24a51e92466ebf761ed50954d087bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDU4NDczMWEyNGE1MWU5MjQ2NmViZjc2MWVkNTA5NTRkMDg3YmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-23T19:15:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: De-`@mut` the def map.\n\nThis is the last `@mut` in `librustc` that does not depend on libsyntax.", "tree": {"sha": "220105117281e71068ee25e5467f6b29f9a4918b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220105117281e71068ee25e5467f6b29f9a4918b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0584731a24a51e92466ebf761ed50954d087bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0584731a24a51e92466ebf761ed50954d087bd", "html_url": "https://github.com/rust-lang/rust/commit/cc0584731a24a51e92466ebf761ed50954d087bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0584731a24a51e92466ebf761ed50954d087bd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b9a207ab83fe91e26eb54c21fcd1fe36c2e047", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b9a207ab83fe91e26eb54c21fcd1fe36c2e047", "html_url": "https://github.com/rust-lang/rust/commit/56b9a207ab83fe91e26eb54c21fcd1fe36c2e047"}], "stats": {"total": 363, "additions": 246, "deletions": 117}, "files": [{"sha": "7bd87f5dff816148e04f3de621c3bfa5b3c1cef8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -1694,7 +1694,8 @@ impl<'a,'b> Visitor<()> for ImplVisitor<'a,'b> {\n         match item.node {\n             item_impl(_, Some(ref trait_ref), _, _) => {\n                 let def_map = self.ecx.tcx.def_map;\n-                let trait_def = def_map.get_copy(&trait_ref.ref_id);\n+                let def_map = def_map.borrow();\n+                let trait_def = def_map.get().get_copy(&trait_ref.ref_id);\n                 let def_id = ast_util::def_id_of_def(trait_def);\n \n                 // Load eagerly if this is an implementation of the Drop trait"}, {"sha": "38f23a900d8902672924395346854347774b4a6c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -910,7 +910,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     debug!(\"Encoding side tables for id {}\", id);\n \n     {\n-        let r = tcx.def_map.find(&id);\n+        let def_map = tcx.def_map.borrow();\n+        let r = def_map.get().find(&id);\n         for def in r.iter() {\n             ebml_w.tag(c::tag_table_def, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1238,7 +1239,8 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                 match value {\n                     c::tag_table_def => {\n                         let def = decode_def(xcx, val_doc);\n-                        dcx.tcx.def_map.insert(id, def);\n+                        let mut def_map = dcx.tcx.def_map.borrow_mut();\n+                        def_map.get().insert(id, def);\n                     }\n                     c::tag_table_node_type => {\n                         let ty = val_dsr.read_ty(xcx);"}, {"sha": "d5823e025be10a7f0afa7d07f750c5043d3cb574", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -496,7 +496,8 @@ impl CFGBuilder {\n             }\n \n             Some(_) => {\n-                match self.tcx.def_map.find(&expr.id) {\n+                let def_map = self.tcx.def_map.borrow();\n+                match def_map.get().find(&expr.id) {\n                     Some(&ast::DefLabel(loop_id)) => {\n                         for l in self.loop_scopes.iter() {\n                             if l.loop_id == loop_id {"}, {"sha": "4dfdd00c27ad6cec195fa4371feb664ee798ca6e", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -148,7 +148,8 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n                     e.span, \"paths in constants may only refer to \\\n                              items without type parameters\");\n             }\n-            match def_map.find(&e.id) {\n+            let def_map = def_map.borrow();\n+            match def_map.get().find(&e.id) {\n               Some(&DefStatic(..)) |\n               Some(&DefFn(_, _)) |\n               Some(&DefVariant(_, _, _)) |\n@@ -167,7 +168,8 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n             }\n           }\n           ExprCall(callee, _, NoSugar) => {\n-            match def_map.find(&callee.id) {\n+            let def_map = def_map.borrow();\n+            match def_map.get().find(&callee.id) {\n                 Some(&DefStruct(..)) => {}    // OK.\n                 Some(&DefVariant(..)) => {}    // OK.\n                 _ => {\n@@ -260,15 +262,19 @@ impl Visitor<()> for CheckItemRecursionVisitor {\n \n     fn visit_expr(&mut self, e: @Expr, _: ()) {\n         match e.node {\n-            ExprPath(..) => match self.env.def_map.find(&e.id) {\n-                Some(&DefStatic(def_id, _)) if ast_util::is_local(def_id) =>\n-                    match self.env.ast_map.get_copy(&def_id.node) {\n-                        ast_map::node_item(it, _) => {\n-                            self.visit_item(it, ());\n-                        }\n-                        _ => fail!(\"const not bound to an item\")\n-                    },\n-                _ => ()\n+            ExprPath(..) => {\n+                let def_map = self.env.def_map.borrow();\n+                match def_map.get().find(&e.id) {\n+                    Some(&DefStatic(def_id, _)) if\n+                            ast_util::is_local(def_id) =>\n+                        match self.env.ast_map.get_copy(&def_id.node) {\n+                            ast_map::node_item(it, _) => {\n+                                self.visit_item(it, ());\n+                            }\n+                            _ => fail!(\"const not bound to an item\")\n+                        },\n+                    _ => ()\n+                }\n             },\n             _ => ()\n         }"}, {"sha": "35ac2190888a5b60e9218fe36a4f05d7b4ab7911", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -121,8 +121,12 @@ fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n \n             // Check that we do not match against a static NaN (#6804)\n             let pat_matches_nan: |&Pat| -> bool = |p| {\n-                match cx.tcx.def_map.find(&p.id) {\n-                    Some(&DefStatic(did, false)) => {\n+                let opt_def = {\n+                    let def_map = cx.tcx.def_map.borrow();\n+                    def_map.get().find_copy(&p.id)\n+                };\n+                match opt_def {\n+                    Some(DefStatic(did, false)) => {\n                         let const_expr = lookup_const_by_id(cx.tcx, did).unwrap();\n                         match eval_const_expr(cx.tcx, const_expr) {\n                             const_float(f) if f.is_nan() => true,\n@@ -334,9 +338,13 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     match pat.node {\n       PatWild | PatWildMulti => { None }\n       PatIdent(_, _, _) | PatEnum(_, _) => {\n-        match cx.tcx.def_map.find(&pat.id) {\n-          Some(&DefVariant(_, id, _)) => Some(variant(id)),\n-          Some(&DefStatic(did, false)) => {\n+        let opt_def = {\n+            let def_map = cx.tcx.def_map.borrow();\n+            def_map.get().find_copy(&pat.id)\n+        };\n+        match opt_def {\n+          Some(DefVariant(_, id, _)) => Some(variant(id)),\n+          Some(DefStatic(did, false)) => {\n             let const_expr = lookup_const_by_id(cx.tcx, did).unwrap();\n             Some(val(eval_const_expr(cx.tcx, const_expr)))\n           }\n@@ -348,7 +356,8 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n         Some(range(eval_const_expr(cx.tcx, lo), eval_const_expr(cx.tcx, hi)))\n       }\n       PatStruct(..) => {\n-        match cx.tcx.def_map.find(&pat.id) {\n+        let def_map = cx.tcx.def_map.borrow();\n+        match def_map.get().find(&pat.id) {\n           Some(&DefVariant(_, id, _)) => Some(variant(id)),\n           _ => Some(single)\n         }\n@@ -370,7 +379,8 @@ fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     match pat.node {\n       PatWild | PatWildMulti => { true }\n       PatIdent(_, _, _) => {\n-        match cx.tcx.def_map.find(&pat.id) {\n+        let def_map = cx.tcx.def_map.borrow();\n+        match def_map.get().find(&pat.id) {\n           Some(&DefVariant(_, _, _)) | Some(&DefStatic(..)) => { false }\n           _ => { true }\n         }\n@@ -551,15 +561,19 @@ fn specialize(cx: &MatchCheckCtxt,\n                 Some(vec::append(vec::from_elem(arity, wild_multi()), r.tail()))\n             }\n             PatIdent(_, _, _) => {\n-                match cx.tcx.def_map.find(&pat_id) {\n-                    Some(&DefVariant(_, id, _)) => {\n+                let opt_def = {\n+                    let def_map = cx.tcx.def_map.borrow();\n+                    def_map.get().find_copy(&pat_id)\n+                };\n+                match opt_def {\n+                    Some(DefVariant(_, id, _)) => {\n                         if variant(id) == *ctor_id {\n                             Some(r.tail().to_owned())\n                         } else {\n                             None\n                         }\n                     }\n-                    Some(&DefStatic(did, _)) => {\n+                    Some(DefStatic(did, _)) => {\n                         let const_expr =\n                             lookup_const_by_id(cx.tcx, did).unwrap();\n                         let e_v = eval_const_expr(cx.tcx, const_expr);\n@@ -608,7 +622,11 @@ fn specialize(cx: &MatchCheckCtxt,\n                 }\n             }\n             PatEnum(_, args) => {\n-                match cx.tcx.def_map.get_copy(&pat_id) {\n+                let opt_def = {\n+                    let def_map = cx.tcx.def_map.borrow();\n+                    def_map.get().get_copy(&pat_id)\n+                };\n+                match opt_def {\n                     DefStatic(did, _) => {\n                         let const_expr =\n                             lookup_const_by_id(cx.tcx, did).unwrap();\n@@ -668,7 +686,11 @@ fn specialize(cx: &MatchCheckCtxt,\n             }\n             PatStruct(_, ref pattern_fields, _) => {\n                 // Is this a struct or an enum variant?\n-                match cx.tcx.def_map.get_copy(&pat_id) {\n+                let opt_def = {\n+                    let def_map = cx.tcx.def_map.borrow();\n+                    def_map.get().get_copy(&pat_id)\n+                };\n+                match opt_def {\n                     DefVariant(_, variant_id, _) => {\n                         if variant(variant_id) == *ctor_id {\n                             let struct_fields = ty::lookup_struct_fields(cx.tcx, variant_id);\n@@ -838,13 +860,17 @@ fn check_fn(v: &mut CheckMatchVisitor,\n }\n \n fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n-    match cx.tcx.def_map.find(&pat.id) {\n-      Some(&DefVariant(enum_id, _, _)) => {\n+    let opt_def = {\n+        let def_map = cx.tcx.def_map.borrow();\n+        def_map.get().find_copy(&pat.id)\n+    };\n+    match opt_def {\n+      Some(DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n             return true;\n         }\n       }\n-      Some(&DefStatic(..)) => return true,\n+      Some(DefStatic(..)) => return true,\n       _ => ()\n     }\n "}, {"sha": "d0dd36cda96052066f0c54e888afe3eff2a556b0", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -78,11 +78,17 @@ pub fn join_all<It: Iterator<constness>>(mut cs: It) -> constness {\n }\n \n pub fn lookup_const(tcx: ty::ctxt, e: &Expr) -> Option<@Expr> {\n-    match tcx.def_map.find(&e.id) {\n-        Some(&ast::DefStatic(def_id, false)) =>\n-            lookup_const_by_id(tcx, def_id),\n-        Some(&ast::DefVariant(enum_def, variant_def, _)) =>\n-            lookup_variant_by_id(tcx, enum_def, variant_def),\n+    let opt_def = {\n+        let def_map = tcx.def_map.borrow();\n+        def_map.get().find_copy(&e.id)\n+    };\n+    match opt_def {\n+        Some(ast::DefStatic(def_id, false)) => {\n+            lookup_const_by_id(tcx, def_id)\n+        }\n+        Some(ast::DefVariant(enum_def, variant_def, _)) => {\n+            lookup_variant_by_id(tcx, enum_def, variant_def)\n+        }\n         _ => None\n     }\n }"}, {"sha": "142c69a5233eff5e9cc20cc067aba60fe5c0f8dd", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -874,7 +874,8 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n             }\n \n             Some(_) => {\n-                match self.tcx().def_map.find(&expr.id) {\n+                let def_map = self.tcx().def_map.borrow();\n+                match def_map.get().find(&expr.id) {\n                     Some(&ast::DefLabel(loop_id)) => {\n                         match loop_scopes.iter().position(|l| l.loop_id == loop_id) {\n                             Some(i) => i,"}, {"sha": "d26954ad458566c264e6824e23d3458a65a55aef", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -63,7 +63,8 @@ impl MarkSymbolVisitor {\n     }\n \n     fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) {\n-        let def = match self.tcx.def_map.find(id) {\n+        let def_map = self.tcx.def_map.borrow();\n+        let def = match def_map.get().find(id) {\n             Some(&def) => def,\n             None => return\n         };"}, {"sha": "9d7dc6fdc7e8fa42054f3b5ef49dfd2de6f2611f", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -52,7 +52,8 @@ impl Visitor<int> for CollectFreevarsVisitor {\n               }\n               ast::ExprPath(..) | ast::ExprSelf => {\n                   let mut i = 0;\n-                  match self.def_map.find(&expr.id) {\n+                  let def_map = self.def_map.borrow();\n+                  match def_map.get().find(&expr.id) {\n                     None => fail!(\"path not found\"),\n                     Some(&df) => {\n                       let mut def = df;"}, {"sha": "e426f92759fac4ecac6793771041895b8b0a10b0", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -116,8 +116,10 @@ fn check_struct_safe_for_destructor(cx: &mut Context,\n }\n \n fn check_impl_of_trait(cx: &mut Context, it: @item, trait_ref: &trait_ref, self_type: &Ty) {\n-    let ast_trait_def = cx.tcx.def_map.find(&trait_ref.ref_id)\n-                            .expect(\"trait ref not in def map!\");\n+    let def_map = cx.tcx.def_map.borrow();\n+    let ast_trait_def = def_map.get()\n+                               .find(&trait_ref.ref_id)\n+                               .expect(\"trait ref not in def map!\");\n     let trait_def_id = ast_util::def_id_of_def(*ast_trait_def);\n     let trait_def;\n     {\n@@ -144,7 +146,7 @@ fn check_impl_of_trait(cx: &mut Context, it: @item, trait_ref: &trait_ref, self_\n         match self_type.node {\n             ty_path(_, ref bounds, path_node_id) => {\n                 assert!(bounds.is_none());\n-                let struct_def = cx.tcx.def_map.get_copy(&path_node_id);\n+                let struct_def = def_map.get().get_copy(&path_node_id);\n                 let struct_did = ast_util::def_id_of_def(struct_def);\n                 check_struct_safe_for_destructor(cx, self_type.span, struct_did);\n             }\n@@ -272,9 +274,11 @@ pub fn check_expr(cx: &mut Context, e: @Expr) {\n         let node_type_substs = cx.tcx.node_type_substs.borrow();\n         let r = node_type_substs.get().find(&type_parameter_id);\n         for ts in r.iter() {\n+            let def_map = cx.tcx.def_map.borrow();\n             let type_param_defs = match e.node {\n               ExprPath(_) => {\n-                let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&e.id));\n+                let did = ast_util::def_id_of_def(def_map.get()\n+                                                         .get_copy(&e.id));\n                 ty::lookup_item_type(cx.tcx, did).generics.type_param_defs\n               }\n               _ => {\n@@ -335,7 +339,8 @@ fn check_ty(cx: &mut Context, aty: &Ty) {\n           let node_type_substs = cx.tcx.node_type_substs.borrow();\n           let r = node_type_substs.get().find(&id);\n           for ts in r.iter() {\n-              let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&id));\n+              let def_map = cx.tcx.def_map.borrow();\n+              let did = ast_util::def_id_of_def(def_map.get().get_copy(&id));\n               let type_param_defs =\n                   ty::lookup_item_type(cx.tcx, did).generics.type_param_defs;\n               for (&ty, type_param_def) in ts.iter().zip(type_param_defs.iter()) {"}, {"sha": "d94bfe1447e019486819152e7e62e7fb9e028df5", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -712,7 +712,8 @@ fn check_item_ctypes(cx: &Context, it: &ast::item) {\n     fn check_ty(cx: &Context, ty: &ast::Ty) {\n         match ty.node {\n             ast::ty_path(_, _, id) => {\n-                match cx.tcx.def_map.get_copy(&id) {\n+                let def_map = cx.tcx.def_map.borrow();\n+                match def_map.get().get_copy(&id) {\n                     ast::DefPrimTy(ast::ty_int(ast::ty_i)) => {\n                         cx.span_lint(ctypes, ty.span,\n                                 \"found rust type `int` in foreign module, while \\\n@@ -983,7 +984,8 @@ fn check_item_non_uppercase_statics(cx: &Context, it: &ast::item) {\n \n fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n     // Lint for constants that look like binding identifiers (#7526)\n-    match (&p.node, cx.tcx.def_map.find(&p.id)) {\n+    let def_map = cx.tcx.def_map.borrow();\n+    match (&p.node, def_map.get().find(&p.id)) {\n         (&ast::PatIdent(_, ref path, _), Some(&ast::DefStatic(_, false))) => {\n             // last identifier alone is right choice for this lint.\n             let ident = path.segments.last().identifier;\n@@ -1197,7 +1199,8 @@ fn check_missing_doc_variant(cx: &Context, v: &ast::variant) {\n fn check_stability(cx: &Context, e: &ast::Expr) {\n     let id = match e.node {\n         ast::ExprPath(..) | ast::ExprStruct(..) => {\n-            match cx.tcx.def_map.find(&e.id) {\n+            let def_map = cx.tcx.def_map.borrow();\n+            match def_map.get().find(&e.id) {\n                 Some(&def) => ast_util::def_id_of_def(def),\n                 None => return\n             }"}, {"sha": "8532f959a2cd11e1c43a383f48e561a679a38cf9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -486,7 +486,8 @@ fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @IrMaps) {\n     match expr.node {\n       // live nodes required for uses or definitions of variables:\n       ExprPath(_) | ExprSelf => {\n-        let def = this.tcx.def_map.get_copy(&expr.id);\n+        let def_map = this.tcx.def_map.borrow();\n+        let def = def_map.get().get_copy(&expr.id);\n         debug!(\"expr {}: path that leads to {:?}\", expr.id, def);\n         if moves::moved_variable_node_id_from_def(def).is_some() {\n             this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n@@ -755,13 +756,16 @@ impl Liveness {\n                            sp: Span)\n                            -> NodeId {\n         match opt_label {\n-            Some(_) => // Refers to a labeled loop. Use the results of resolve\n-                      // to find with one\n-                match self.tcx.def_map.find(&id) {\n+            Some(_) => {\n+                // Refers to a labeled loop. Use the results of resolve\n+                // to find with one\n+                let def_map = self.tcx.def_map.borrow();\n+                match def_map.get().find(&id) {\n                     Some(&DefLabel(loop_id)) => loop_id,\n                     _ => self.tcx.sess.span_bug(sp, \"Label on break/loop \\\n                                                      doesn't refer to a loop\")\n-                },\n+                }\n+            }\n             None => {\n                 // Vanilla 'break' or 'loop', so use the enclosing\n                 // loop scope\n@@ -1344,7 +1348,8 @@ impl Liveness {\n \n     pub fn access_path(&self, expr: &Expr, succ: LiveNode, acc: uint)\n                        -> LiveNode {\n-        let def = self.tcx.def_map.get_copy(&expr.id);\n+        let def_map = self.tcx.def_map.borrow();\n+        let def = def_map.get().get_copy(&expr.id);\n         match moves::moved_variable_node_id_from_def(def) {\n           Some(nid) => {\n             let ln = self.live_node(expr.id, expr.span);\n@@ -1572,7 +1577,8 @@ impl Liveness {\n     pub fn check_lvalue(&mut self, expr: @Expr) {\n         match expr.node {\n           ExprPath(_) => {\n-            match self.tcx.def_map.get_copy(&expr.id) {\n+            let def_map = self.tcx.def_map.borrow();\n+            match def_map.get().get_copy(&expr.id) {\n               DefLocal(nid, _) => {\n                 // Assignment to an immutable variable or argument: only legal\n                 // if there is no later assignment. If this local is actually"}, {"sha": "b39ddecf8c4f6c2759b1d666a93eb1a824efa5eb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -420,7 +420,8 @@ impl mem_categorization_ctxt {\n           }\n \n           ast::ExprPath(_) | ast::ExprSelf => {\n-            let def = self.tcx.def_map.get_copy(&expr.id);\n+            let def_map = self.tcx.def_map.borrow();\n+            let def = def_map.get().get_copy(&expr.id);\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n@@ -888,7 +889,8 @@ impl mem_categorization_ctxt {\n             // variant(..)\n           }\n           ast::PatEnum(_, Some(ref subpats)) => {\n-            match self.tcx.def_map.find(&pat.id) {\n+            let def_map = self.tcx.def_map.borrow();\n+            match def_map.get().find(&pat.id) {\n                 Some(&ast::DefVariant(enum_did, _, _)) => {\n                     // variant(x, y, z)\n \n@@ -1074,7 +1076,8 @@ pub fn field_mutbl(tcx: ty::ctxt,\n         }\n       }\n       ty::ty_enum(..) => {\n-        match tcx.def_map.get_copy(&node_id) {\n+        let def_map = tcx.def_map.borrow();\n+        match def_map.get().get_copy(&node_id) {\n           ast::DefVariant(_, variant_id, _) => {\n             let r = ty::lookup_struct_fields(tcx, variant_id);\n             for fld in r.iter() {"}, {"sha": "f4f0c5c8073d545099ff7ad0ef10f904b96afef2", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -341,7 +341,8 @@ impl VisitContext {\n             ExprPath(..) | ExprSelf => {\n                 match comp_mode {\n                     Move => {\n-                        let def = self.tcx.def_map.get_copy(&expr.id);\n+                        let def_map = self.tcx.def_map.borrow();\n+                        let def = def_map.get().get_copy(&expr.id);\n                         let r = moved_variable_node_id_from_def(def);\n                         for &id in r.iter() {\n                             let mut moved_variables_set ="}, {"sha": "85217a7d55ece2d75ab5b1a69bdd70439a624b52", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -31,7 +31,8 @@ pub fn pat_id_map(dm: resolve::DefMap, pat: &Pat) -> PatIdMap {\n pub fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: &Pat) -> bool {\n     match pat.node {\n         PatEnum(_, _) | PatIdent(_, _, None) | PatStruct(..) => {\n-            match dm.find(&pat.id) {\n+            let dm = dm.borrow();\n+            match dm.get().find(&pat.id) {\n                 Some(&DefVariant(..)) | Some(&DefStruct(..)) => true,\n                 _ => false\n             }\n@@ -43,7 +44,8 @@ pub fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: &Pat) -> bool {\n pub fn pat_is_const(dm: resolve::DefMap, pat: &Pat) -> bool {\n     match pat.node {\n         PatIdent(_, _, None) | PatEnum(..) => {\n-            match dm.find(&pat.id) {\n+            let dm = dm.borrow();\n+            match dm.get().find(&pat.id) {\n                 Some(&DefStatic(_, false)) => true,\n                 _ => false\n             }"}, {"sha": "707446a78fe217473f9ea3f2294ceecb0cf9507f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -220,7 +220,8 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n             ast::item_impl(_, _, ref ty, ref methods) => {\n                 let public_ty = match ty.node {\n                     ast::ty_path(_, _, id) => {\n-                        match self.tcx.def_map.get_copy(&id) {\n+                        let def_map = self.tcx.def_map.borrow();\n+                        match def_map.get().get_copy(&id) {\n                             ast::DefPrimTy(..) => true,\n                             def => {\n                                 let did = def_id_of_def(def);\n@@ -559,7 +560,8 @@ impl<'a> PrivacyVisitor<'a> {\n     // Checks that a path is in scope.\n     fn check_path(&mut self, span: Span, path_id: ast::NodeId, path: &ast::Path) {\n         debug!(\"privacy - path {}\", self.nodestr(path_id));\n-        let def = self.tcx.def_map.get_copy(&path_id);\n+        let def_map = self.tcx.def_map.borrow();\n+        let def = def_map.get().get_copy(&path_id);\n         let ck = |tyname: &str| {\n             let origdid = def_id_of_def(def);\n             match *self.last_private_map.get(&path_id) {\n@@ -572,7 +574,8 @@ impl<'a> PrivacyVisitor<'a> {\n                 }\n             }\n         };\n-        match self.tcx.def_map.get_copy(&path_id) {\n+        let def_map = self.tcx.def_map.borrow();\n+        match def_map.get().get_copy(&path_id) {\n             ast::DefStaticMethod(..) => ck(\"static method\"),\n             ast::DefFn(..) => ck(\"function\"),\n             ast::DefStatic(..) => ck(\"static\"),\n@@ -665,7 +668,8 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n-                        match self.tcx.def_map.get_copy(&expr.id) {\n+                        let def_map = self.tcx.def_map.borrow();\n+                        match def_map.get().get_copy(&expr.id) {\n                             ast::DefVariant(_, variant_id, _) => {\n                                 for field in fields.iter() {\n                                     self.check_field(expr.span, variant_id,\n@@ -750,7 +754,8 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n-                        match self.tcx.def_map.find(&pattern.id) {\n+                        let def_map = self.tcx.def_map.borrow();\n+                        match def_map.get().find(&pattern.id) {\n                             Some(&ast::DefVariant(_, variant_id, _)) => {\n                                 for field in fields.iter() {\n                                     self.check_field(pattern.span, variant_id,"}, {"sha": "bbf366c0b061f0ff2c8bd0667c36c8d9958a92d5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -104,7 +104,8 @@ impl Visitor<()> for MarkSymbolVisitor {\n \n         match expr.node {\n             ast::ExprPath(_) => {\n-                let def = match self.tcx.def_map.find(&expr.id) {\n+                let def_map = self.tcx.def_map.borrow();\n+                let def = match def_map.get().find(&expr.id) {\n                     Some(&def) => def,\n                     None => {\n                         self.tcx.sess.span_bug(expr.span,"}, {"sha": "40934b985d346da1bee2f7e7b60ebc337e39d8e6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -35,7 +35,7 @@ use std::hashmap::{HashMap, HashSet};\n use std::util;\n \n // Definition mapping\n-pub type DefMap = @mut HashMap<NodeId,Def>;\n+pub type DefMap = @RefCell<HashMap<NodeId,Def>>;\n \n struct binding_info {\n     span: Span,\n@@ -812,7 +812,7 @@ fn Resolver(session: Session,\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n-        def_map: @mut HashMap::new(),\n+        def_map: @RefCell::new(HashMap::new()),\n         export_map2: @RefCell::new(HashMap::new()),\n         trait_map: HashMap::new(),\n         used_imports: HashSet::new(),\n@@ -2468,7 +2468,8 @@ impl Resolver {\n         match import_resolution.value_target.get() {\n             Some(target) => {\n                 let def = target.bindings.def_for_namespace(ValueNS).unwrap();\n-                self.def_map.insert(directive.id, def);\n+                let mut def_map = self.def_map.borrow_mut();\n+                def_map.get().insert(directive.id, def);\n                 let did = def_id_of_def(def);\n                 self.last_private.insert(directive.id,\n                     if used_public {lp} else {DependsOn(did)});\n@@ -2478,7 +2479,8 @@ impl Resolver {\n         match import_resolution.type_target.get() {\n             Some(target) => {\n                 let def = target.bindings.def_for_namespace(TypeNS).unwrap();\n-                self.def_map.insert(directive.id, def);\n+                let mut def_map = self.def_map.borrow_mut();\n+                def_map.get().insert(directive.id, def);\n                 let did = def_id_of_def(def);\n                 self.last_private.insert(directive.id,\n                     if used_public {lp} else {DependsOn(did)});\n@@ -2636,7 +2638,8 @@ impl Resolver {\n         // Record the destination of this import\n         match containing_module.def_id.get() {\n             Some(did) => {\n-                self.def_map.insert(id, DefMod(did));\n+                let mut def_map = self.def_map.borrow_mut();\n+                def_map.get().insert(id, DefMod(did));\n                 self.last_private.insert(id, lp);\n             }\n             None => {}\n@@ -3511,9 +3514,11 @@ impl Resolver {\n                   // If the def is a ty param, and came from the parent\n                   // item, it's ok\n                   match def {\n-                    DefTyParam(did, _)\n-                        if self.def_map.find(&did.node).map(|x| *x)\n-                            == Some(DefTyParamBinder(item_id)) => {\n+                    DefTyParam(did, _) if {\n+                        let def_map = self.def_map.borrow();\n+                        def_map.get().find(&did.node).map(|x| *x)\n+                            == Some(DefTyParamBinder(item_id))\n+                    } => {\n                       // ok\n                     }\n                     _ => {\n@@ -4094,7 +4099,8 @@ impl Resolver {\n                     // Record the current set of trait references.\n                     let mut new_trait_refs = ~[];\n                     {\n-                        let r = this.def_map.find(&trait_reference.ref_id);\n+                        let def_map = this.def_map.borrow();\n+                        let r = def_map.get().find(&trait_reference.ref_id);\n                         for &def in r.iter() {\n                             new_trait_refs.push(def_id_of_def(*def));\n                         }\n@@ -5525,7 +5531,8 @@ impl Resolver {\n         debug!(\"(recording def) recording {:?} for {:?}, last private {:?}\",\n                 def, node_id, lp);\n         self.last_private.insert(node_id, lp);\n-        self.def_map.insert_or_update_with(node_id, def, |_, old_value| {\n+        let mut def_map = self.def_map.borrow_mut();\n+        def_map.get().insert_or_update_with(node_id, def, |_, old_value| {\n             // Resolve appears to \"resolve\" the same ID multiple\n             // times, so here is a sanity check it at least comes to\n             // the same conclusion! - nmatsakis"}, {"sha": "949a4369f0b3cf1037102947081e11bc5e8c2b6f", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -349,7 +349,8 @@ fn trans_opt(bcx: @Block, o: &Opt) -> opt_result {\n fn variant_opt(bcx: @Block, pat_id: ast::NodeId)\n     -> Opt {\n     let ccx = bcx.ccx();\n-    match ccx.tcx.def_map.get_copy(&pat_id) {\n+    let def_map = ccx.tcx.def_map.borrow();\n+    match def_map.get().get_copy(&pat_id) {\n         ast::DefVariant(enum_id, var_id, _) => {\n             let variants = ty::enum_variants(ccx.tcx, enum_id);\n             for v in (*variants).iter() {\n@@ -622,7 +623,10 @@ fn enter_opt<'r>(bcx: @Block,\n         let answer = match p.node {\n             ast::PatEnum(..) |\n             ast::PatIdent(_, _, None) if pat_is_const(tcx.def_map, p) => {\n-                let const_def = tcx.def_map.get_copy(&p.id);\n+                let const_def = {\n+                    let def_map = tcx.def_map.borrow();\n+                    def_map.get().get_copy(&p.id)\n+                };\n                 let const_def_id = ast_util::def_id_of_def(const_def);\n                 if opt_eq(tcx, &lit(ConstLit(const_def_id)), opt) {\n                     Some(~[])\n@@ -659,7 +663,11 @@ fn enter_opt<'r>(bcx: @Block,\n                 if opt_eq(tcx, &variant_opt(bcx, p.id), opt) {\n                     // Look up the struct variant ID.\n                     let struct_id;\n-                    match tcx.def_map.get_copy(&p.id) {\n+                    let defn = {\n+                        let def_map = tcx.def_map.borrow();\n+                        def_map.get().get_copy(&p.id)\n+                    };\n+                    match defn {\n                         ast::DefVariant(_, found_struct_id, _) => {\n                             struct_id = found_struct_id;\n                         }\n@@ -940,16 +948,20 @@ fn get_options(bcx: @Block, m: &[Match], col: uint) -> ~[Opt] {\n             ast::PatIdent(..) => {\n                 // This is one of: an enum variant, a unit-like struct, or a\n                 // variable binding.\n-                match ccx.tcx.def_map.find(&cur.id) {\n-                    Some(&ast::DefVariant(..)) => {\n+                let opt_def = {\n+                    let def_map = ccx.tcx.def_map.borrow();\n+                    def_map.get().find_copy(&cur.id)\n+                };\n+                match opt_def {\n+                    Some(ast::DefVariant(..)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n                     }\n-                    Some(&ast::DefStruct(..)) => {\n+                    Some(ast::DefStruct(..)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(UnitLikeStructLit(cur.id)));\n                     }\n-                    Some(&ast::DefStatic(const_did, false)) => {\n+                    Some(ast::DefStatic(const_did, false)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(ConstLit(const_did)));\n                     }\n@@ -959,13 +971,17 @@ fn get_options(bcx: @Block, m: &[Match], col: uint) -> ~[Opt] {\n             ast::PatEnum(..) | ast::PatStruct(..) => {\n                 // This could be one of: a tuple-like enum variant, a\n                 // struct-like enum variant, or a struct.\n-                match ccx.tcx.def_map.find(&cur.id) {\n-                    Some(&ast::DefFn(..)) |\n-                    Some(&ast::DefVariant(..)) => {\n+                let opt_def = {\n+                    let def_map = ccx.tcx.def_map.borrow();\n+                    def_map.get().find_copy(&cur.id)\n+                };\n+                match opt_def {\n+                    Some(ast::DefFn(..)) |\n+                    Some(ast::DefVariant(..)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n                     }\n-                    Some(&ast::DefStatic(const_did, false)) => {\n+                    Some(ast::DefStatic(const_did, false)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(ConstLit(const_did)));\n                     }\n@@ -1170,7 +1186,8 @@ fn any_tuple_struct_pat(bcx: @Block, m: &[Match], col: uint) -> bool {\n         let pat = br.pats[col];\n         match pat.node {\n             ast::PatEnum(_, Some(_)) => {\n-                match bcx.tcx().def_map.find(&pat.id) {\n+                let def_map = bcx.tcx().def_map.borrow();\n+                match def_map.get().find(&pat.id) {\n                     Some(&ast::DefFn(..)) |\n                     Some(&ast::DefStruct(..)) => true,\n                     _ => false\n@@ -2166,7 +2183,8 @@ fn bind_irrefutable_pat(bcx: @Block,\n             }\n         }\n         ast::PatEnum(_, ref sub_pats) => {\n-            match bcx.tcx().def_map.find(&pat.id) {\n+            let def_map = bcx.tcx().def_map.borrow();\n+            match def_map.get().find(&pat.id) {\n                 Some(&ast::DefVariant(enum_id, var_id, _)) => {\n                     let repr = adt::represent_node(bcx, pat.id);\n                     let vinfo = ty::enum_variant_with_id(ccx.tcx,"}, {"sha": "0fadcbe53be09dbda230b9c8e2ecdd0b877e02bd", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -748,7 +748,8 @@ impl Block {\n     }\n \n     pub fn def(&self, nid: ast::NodeId) -> ast::Def {\n-        match self.tcx().def_map.find(&nid) {\n+        let def_map = self.tcx().def_map.borrow();\n+        match def_map.get().find(&nid) {\n             Some(&v) => v,\n             None => {\n                 self.tcx().sess.bug(format!("}, {"sha": "19dc19262c0224e390c973a57fbbaafaa34255d3", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -585,8 +585,12 @@ fn const_expr_unadjusted(cx: @CrateContext,\n             assert!(pth.segments.iter().all(|seg| seg.types.is_empty()));\n \n             let tcx = cx.tcx;\n-            match tcx.def_map.find(&e.id) {\n-                Some(&ast::DefFn(def_id, _purity)) => {\n+            let opt_def = {\n+                let def_map = tcx.def_map.borrow();\n+                def_map.get().find_copy(&e.id)\n+            };\n+            match opt_def {\n+                Some(ast::DefFn(def_id, _purity)) => {\n                     if !ast_util::is_local(def_id) {\n                         let ty = csearch::get_type(cx.tcx, def_id).ty;\n                         (base::trans_external_path(cx, def_id, ty), true)\n@@ -595,18 +599,18 @@ fn const_expr_unadjusted(cx: @CrateContext,\n                         (base::get_item_val(cx, def_id.node), true)\n                     }\n                 }\n-                Some(&ast::DefStatic(def_id, false)) => {\n+                Some(ast::DefStatic(def_id, false)) => {\n                     get_const_val(cx, def_id)\n                 }\n-                Some(&ast::DefVariant(enum_did, variant_did, _)) => {\n+                Some(ast::DefVariant(enum_did, variant_did, _)) => {\n                     let ety = ty::expr_ty(cx.tcx, e);\n                     let repr = adt::represent_type(cx, ety);\n                     let vinfo = ty::enum_variant_with_id(cx.tcx,\n                                                          enum_did,\n                                                          variant_did);\n                     (adt::trans_const(cx, repr, vinfo.disr_val, []), true)\n                 }\n-                Some(&ast::DefStruct(_)) => {\n+                Some(ast::DefStruct(_)) => {\n                     let ety = ty::expr_ty(cx.tcx, e);\n                     let llty = type_of::type_of(cx, ety);\n                     (C_null(llty), true)\n@@ -618,14 +622,18 @@ fn const_expr_unadjusted(cx: @CrateContext,\n           }\n           ast::ExprCall(callee, ref args, _) => {\n               let tcx = cx.tcx;\n-              match tcx.def_map.find(&callee.id) {\n-                  Some(&ast::DefStruct(_)) => {\n+              let opt_def = {\n+                  let def_map = tcx.def_map.borrow();\n+                  def_map.get().find_copy(&callee.id)\n+              };\n+              match opt_def {\n+                  Some(ast::DefStruct(_)) => {\n                       let ety = ty::expr_ty(cx.tcx, e);\n                       let repr = adt::represent_type(cx, ety);\n                       let (arg_vals, inlineable) = map_list(cx, *args);\n                       (adt::trans_const(cx, repr, 0, arg_vals), inlineable)\n                   }\n-                  Some(&ast::DefVariant(enum_did, variant_did, _)) => {\n+                  Some(ast::DefVariant(enum_did, variant_did, _)) => {\n                       let ety = ty::expr_ty(cx.tcx, e);\n                       let repr = adt::represent_type(cx, ety);\n                       let vinfo = ty::enum_variant_with_id(cx.tcx,"}, {"sha": "2990a27391fe6f9f9fd047cb73df6f3ff1ffcb0a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -1180,7 +1180,11 @@ pub fn with_field_tys<R>(\n                         ty.repr(tcx)));\n                 }\n                 Some(node_id) => {\n-                    match tcx.def_map.get_copy(&node_id) {\n+                    let opt_def = {\n+                        let def_map = tcx.def_map.borrow();\n+                        def_map.get().get_copy(&node_id)\n+                    };\n+                    match opt_def {\n                         ast::DefVariant(enum_id, variant_id, _) => {\n                             let variant_info = ty::enum_variant_with_id(\n                                 tcx, enum_id, variant_id);"}, {"sha": "60bbca6cf358a64712dabb8725781d37b658920b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -3080,7 +3080,8 @@ pub fn method_call_type_param_defs(tcx: ctxt,\n }\n \n pub fn resolve_expr(tcx: ctxt, expr: &ast::Expr) -> ast::Def {\n-    match tcx.def_map.find(&expr.id) {\n+    let def_map = tcx.def_map.borrow();\n+    match def_map.get().find(&expr.id) {\n         Some(&def) => def,\n         None => {\n             tcx.sess.span_bug(expr.span, format!(\n@@ -3675,7 +3676,10 @@ pub fn impl_trait_ref(cx: ctxt, id: ast::DefId) -> Option<@TraitRef> {\n }\n \n pub fn trait_ref_to_def_id(tcx: ctxt, tr: &ast::trait_ref) -> ast::DefId {\n-    let def = tcx.def_map.find(&tr.ref_id).expect(\"no def-map entry for trait\");\n+    let def_map = tcx.def_map.borrow();\n+    let def = def_map.get()\n+                     .find(&tr.ref_id)\n+                     .expect(\"no def-map entry for trait\");\n     ast_util::def_id_of_def(*def)\n }\n "}, {"sha": "0da9db5d5c2e3454b7ead9094e916c8df3a26619", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -319,7 +319,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                 // Note that the \"bounds must be empty if path is not a trait\"\n                 // restriction is enforced in the below case for ty_path, which\n                 // will run after this as long as the path isn't a trait.\n-                match tcx.def_map.find(&id) {\n+                let def_map = tcx.def_map.borrow();\n+                match def_map.get().find(&id) {\n                     Some(&ast::DefPrimTy(ast::ty_str)) if a_seq_ty.mutbl == ast::MutImmutable => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                         return ty::mk_estr(tcx, vst);\n@@ -461,7 +462,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n           ty::mk_closure(tcx, fn_decl)\n       }\n       ast::ty_path(ref path, ref bounds, id) => {\n-        let a_def = match tcx.def_map.find(&id) {\n+        let def_map = tcx.def_map.borrow();\n+        let a_def = match def_map.get().find(&id) {\n           None => tcx.sess.span_fatal(\n               ast_ty.span, format!(\"unbound path {}\",\n                                 path_to_str(path, tcx.sess.intr()))),"}, {"sha": "739437d278d97474838b470cc32bfc758619cda4", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -357,7 +357,8 @@ pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::NodeId, span: Span,\n     let class_fields = ty::lookup_struct_fields(tcx, struct_id);\n \n     // Check to ensure that the struct is the one specified.\n-    match tcx.def_map.find(&pat_id) {\n+    let def_map = tcx.def_map.borrow();\n+    match def_map.get().find(&pat_id) {\n         Some(&ast::DefStruct(supplied_def_id))\n                 if supplied_def_id == struct_id => {\n             // OK.\n@@ -391,7 +392,8 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n     let tcx = pcx.fcx.ccx.tcx;\n \n     // Find the variant that was specified.\n-    match tcx.def_map.find(&pat_id) {\n+    let def_map = tcx.def_map.borrow();\n+    match def_map.get().find(&pat_id) {\n         Some(&ast::DefVariant(found_enum_id, variant_id, _))\n                 if found_enum_id == enum_id => {\n             // Get the struct fields from this struct-like enum variant.\n@@ -461,7 +463,9 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::Pat, expected: ty::t) {\n       }\n       ast::PatEnum(..) |\n       ast::PatIdent(..) if pat_is_const(tcx.def_map, pat) => {\n-        let const_did = ast_util::def_id_of_def(tcx.def_map.get_copy(&pat.id));\n+        let def_map = tcx.def_map.borrow();\n+        let const_did = ast_util::def_id_of_def(def_map.get()\n+                                                       .get_copy(&pat.id));\n         let const_tpt = ty::lookup_item_type(tcx, const_did);\n         demand::suptype(fcx, pat.span, expected, const_tpt.ty);\n         fcx.write_ty(pat.id, const_tpt.ty);\n@@ -524,14 +528,15 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::Pat, expected: ty::t) {\n             }\n             _ => {\n                // See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs\n-               fcx.infcx().type_error_message_str_with_expected(pat.span,\n+                fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                                 |expected, actual| {\n                             expected.map_default(~\"\", |e| {\n                                     format!(\"mismatched types: expected `{}` but found {}\",\n                                          e, actual)})},\n                                          Some(expected), ~\"a structure pattern\",\n                                          None);\n-                match tcx.def_map.find(&pat.id) {\n+                let def_map = tcx.def_map.borrow();\n+                match def_map.get().find(&pat.id) {\n                     Some(&ast::DefStruct(supplied_def_id)) => {\n                          check_struct_pat(pcx, pat.id, pat.span, ty::mk_err(), path, *fields, etc,\n                          supplied_def_id,"}, {"sha": "74575ba3517fe6ac671a23be5a2c64d0d2e0c4c3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -3200,7 +3200,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n       }\n       ast::ExprStruct(ref path, ref fields, base_expr) => {\n         // Resolve the path.\n-        match tcx.def_map.find(&id) {\n+        let def_map = tcx.def_map.borrow();\n+        match def_map.get().find(&id) {\n             Some(&ast::DefStruct(type_def_id)) => {\n                 check_struct_constructor(fcx, id, expr.span, type_def_id,\n                                          *fields, base_expr);\n@@ -3928,11 +3929,13 @@ pub fn may_break(cx: ty::ctxt, id: ast::NodeId, b: ast::P<ast::Block>) -> bool {\n    // <id> nested anywhere inside the loop?\n     (block_query(b, |e| {\n         match e.node {\n-            ast::ExprBreak(Some(_)) =>\n-                match cx.def_map.find(&e.id) {\n+            ast::ExprBreak(Some(_)) => {\n+                let def_map = cx.def_map.borrow();\n+                match def_map.get().find(&e.id) {\n                     Some(&ast::DefLabel(loop_id)) if id == loop_id => true,\n                     _ => false,\n-                },\n+                }\n+            }\n             _ => false\n         }}))\n }"}, {"sha": "f2899cb634002925008429e6990155f90bf395e7", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -570,7 +570,8 @@ pub fn early_resolve_expr(ex: @ast::Expr,\n         fcx.opt_node_ty_substs(ex.id, |substs| {\n             debug!(\"vtable resolution on parameter bounds for expr {}\",\n                    ex.repr(fcx.tcx()));\n-            let def = cx.tcx.def_map.get_copy(&ex.id);\n+            let def_map = cx.tcx.def_map.borrow();\n+            let def = def_map.get().get_copy(&ex.id);\n             let did = ast_util::def_id_of_def(def);\n             let item_ty = ty::lookup_item_type(cx.tcx, did);\n             debug!(\"early resolve expr: def {:?} {:?}, {:?}, {}\", ex.id, did, def,"}, {"sha": "376af7e9d3dfab8ae97d198a7bda1c405b78c603", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -547,7 +547,8 @@ impl CoherenceChecker {\n \n     pub fn trait_ref_to_trait_def_id(&self, trait_ref: &trait_ref) -> DefId {\n         let def_map = self.crate_context.tcx.def_map;\n-        let trait_def = def_map.get_copy(&trait_ref.ref_id);\n+        let def_map = def_map.borrow();\n+        let trait_def = def_map.get().get_copy(&trait_ref.ref_id);\n         let trait_id = def_id_of_def(trait_def);\n         return trait_id;\n     }\n@@ -559,7 +560,8 @@ impl CoherenceChecker {\n                                               -> bool {\n         match original_type.node {\n             ty_path(_, _, path_id) => {\n-                match self.crate_context.tcx.def_map.get_copy(&path_id) {\n+                let def_map = self.crate_context.tcx.def_map.borrow();\n+                match def_map.get().get_copy(&path_id) {\n                     DefTy(def_id) | DefStruct(def_id) => {\n                         if def_id.crate != LOCAL_CRATE {\n                             return false;"}, {"sha": "835c739c0852b099cd4e9686fd8bd3cd320b3269", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -265,7 +265,8 @@ pub fn write_tpt_to_tcx(tcx: ty::ctxt,\n }\n \n pub fn lookup_def_tcx(tcx: ty::ctxt, sp: Span, id: ast::NodeId) -> ast::Def {\n-    match tcx.def_map.find(&id) {\n+    let def_map = tcx.def_map.borrow();\n+    match def_map.get().find(&id) {\n       Some(&x) => x,\n       _ => {\n         tcx.sess.span_fatal(sp, \"internal error looking up a definition\")"}, {"sha": "7d80cea23c160b9a6e6d5d783a989f52376edb1c", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0584731a24a51e92466ebf761ed50954d087bd/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=cc0584731a24a51e92466ebf761ed50954d087bd", "patch": "@@ -1153,7 +1153,8 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n         None => return Bool\n     };\n     debug!(\"searching for {:?} in defmap\", id);\n-    let d = match tycx.def_map.find(&id) {\n+    let def_map = tycx.def_map.borrow();\n+    let d = match def_map.get().find(&id) {\n         Some(k) => k,\n         None => {\n             debug!(\"could not find {:?} in defmap (`{}`)\", id,\n@@ -1210,7 +1211,8 @@ fn resolve_def(id: ast::NodeId) -> Option<ast::DefId> {\n     let cx = local_data::get(super::ctxtkey, |x| *x.unwrap());\n     match cx.tycx {\n         Some(tcx) => {\n-            tcx.def_map.find(&id).map(|&d| ast_util::def_id_of_def(d))\n+            let def_map = tcx.def_map.borrow();\n+            def_map.get().find(&id).map(|&d| ast_util::def_id_of_def(d))\n         }\n         None => None\n     }"}]}