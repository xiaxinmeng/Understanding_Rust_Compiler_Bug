{"sha": "a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzY1ZDdjYThiZDZiN2FhYWNlZjRhMWQ5ODBmMTg4Y2E4ZjYwYzY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-08T08:02:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-08T08:02:21Z"}, "message": "Merge pull request #2127 from topecongiro/issue-2126\n\nHandle chain with a single long child with a small parent", "tree": {"sha": "61e4a9dfd080ef50d2f9229936e08f1fb6e68fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e4a9dfd080ef50d2f9229936e08f1fb6e68fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaAroNCRBK7hj4Ov3rIwAAdHIIAIwSUQgkRzDEE49GkgbTHlQ5\nsoDczUkJ5XDPgA65maCF0SND8V4lCQTconOTnoRzaRDaRL8BWytFxjVwQZ//Fdj1\neEoGaXST4/5mEewcjwnJp8m6j/YFsxBnlvq1E/k+9pNofoKmcnBDMOGcifEIdB5y\nLtXDdJaRDSHKIzbn8PxDWa3tg7+5GUgsV80u5XIapVoFJiFIqj2/yF0bRhMhQGWn\nL6Xo6aALGEC47vbsz96nlOPjIg7aomPrT3Aevfme2IsIroeqlj4pyCCAZ4UepqDp\nQ6FIB2UjRUqFahgsqg4uZhYE7AjZj6E66Fk5GdLEP5FwFS0Is9oRwM/drrrOilw=\n=8P/5\n-----END PGP SIGNATURE-----\n", "payload": "tree 61e4a9dfd080ef50d2f9229936e08f1fb6e68fca\nparent e8bc2bf966d1d4999e7fdb3d683c768a54dbfdb6\nparent 30959bc16f8bdbb95bff66537021d6b01281a99d\nauthor Nick Cameron <nrc@ncameron.org> 1510128141 +1300\ncommitter GitHub <noreply@github.com> 1510128141 +1300\n\nMerge pull request #2127 from topecongiro/issue-2126\n\nHandle chain with a single long child with a small parent "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "html_url": "https://github.com/rust-lang/rust/commit/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bc2bf966d1d4999e7fdb3d683c768a54dbfdb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8bc2bf966d1d4999e7fdb3d683c768a54dbfdb6", "html_url": "https://github.com/rust-lang/rust/commit/e8bc2bf966d1d4999e7fdb3d683c768a54dbfdb6"}, {"sha": "30959bc16f8bdbb95bff66537021d6b01281a99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/30959bc16f8bdbb95bff66537021d6b01281a99d", "html_url": "https://github.com/rust-lang/rust/commit/30959bc16f8bdbb95bff66537021d6b01281a99d"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "5ab538c8c4e597d5c1c96eef1b42aa1d34a2e2bf", "filename": "src/chains.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "patch": "@@ -126,7 +126,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     let first_child_shape = if extend {\n         let overhead = last_line_width(&parent_rewrite);\n-        let offset = trimmed_last_line_width(&parent_rewrite);\n+        let offset = trimmed_last_line_width(&parent_rewrite) + prefix_try_num;\n         match context.config.chain_indent() {\n             IndentStyle::Visual => parent_shape.offset_left(overhead)?,\n             IndentStyle::Block => parent_shape.block().offset_left(offset)?,\n@@ -166,9 +166,16 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let all_in_one_line = !parent_rewrite_contains_newline\n         && rewrites.iter().all(|s| !s.contains('\\n'))\n         && almost_total < one_line_budget;\n-    let last_shape = match context.config.chain_indent() {\n-        IndentStyle::Visual => other_child_shape.sub_width(shape.rhs_overhead(context.config))?,\n-        IndentStyle::Block => other_child_shape,\n+    let last_shape = {\n+        let last_shape = if rewrites.len() == 0 {\n+            first_child_shape\n+        } else {\n+            other_child_shape\n+        };\n+        match context.config.chain_indent() {\n+            IndentStyle::Visual => last_shape.sub_width(shape.rhs_overhead(context.config))?,\n+            IndentStyle::Block => last_shape,\n+        }\n     };\n     let last_shape = last_shape.sub_width(suffix_try_num)?;\n "}, {"sha": "dc3abd88ffd89619f2fe7ccc377eb12d63c13f03", "filename": "src/items.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "patch": "@@ -2142,7 +2142,9 @@ fn rewrite_args(\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n     let mut arg_item_strs = args.iter()\n-        .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n+        .map(|arg| {\n+            arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n+        })\n         .collect::<Option<Vec<_>>>()?;\n \n     // Account for sugary self.\n@@ -2841,15 +2843,17 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.node {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n-                context,\n-                shape.indent,\n-                self.ident,\n-                &FnSig::new(fn_decl, generics, self.vis.clone()),\n-                span,\n-                false,\n-                false,\n-            ).map(|(s, _)| format!(\"{};\", s)),\n+            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n+                rewrite_fn_base(\n+                    context,\n+                    shape.indent,\n+                    self.ident,\n+                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n+                    span,\n+                    false,\n+                    false,\n+                ).map(|(s, _)| format!(\"{};\", s))\n+            }\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "6199eb77edc73e3c2f623b097d04fd08ae2b7e94", "filename": "tests/source/chains.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "patch": "@@ -170,3 +170,19 @@ impl Settings {\n         let mut file = File::create(&settings_path).chain_err(|| ErrorKind::WriteError(settings_path.clone()))?;\n     }\n }\n+\n+fn issue2126() {\n+    {\n+        {\n+            {\n+                {\n+                    {\n+                        let x = self.span_from(sub_span.expect(\"No span found for struct arant variant\"));\n+                        self.sspanpan_from_span(sub_span.expect(\"No span found for struct variant\"));\n+                        let x = self.spanpan_from_span(sub_span.expect(\"No span found for struct variant\"))?;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "48691b3b6c90aadb1f7b2df96cd576a6672e832a", "filename": "tests/target/chains.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=a3c65d7ca8bd6b7aaacef4a1d980f188ca8f60c6", "patch": "@@ -193,3 +193,25 @@ impl Settings {\n             .chain_err(|| ErrorKind::WriteError(settings_path.clone()))?;\n     }\n }\n+\n+fn issue2126() {\n+    {\n+        {\n+            {\n+                {\n+                    {\n+                        let x = self.span_from(\n+                            sub_span.expect(\"No span found for struct arant variant\"),\n+                        );\n+                        self.sspanpan_from_span(\n+                            sub_span.expect(\"No span found for struct variant\"),\n+                        );\n+                        let x = self.spanpan_from_span(\n+                            sub_span.expect(\"No span found for struct variant\"),\n+                        )?;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}