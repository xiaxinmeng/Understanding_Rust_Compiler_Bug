{"sha": "49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjViMGE4Y2YxYTJkNTg4YTU1ZjZjYjhlYTQzOTQyZTE0N2M2NmI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-23T04:58:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-23T06:49:06Z"}, "message": "Remove `open_span` and `close_span` from `Delimited`.", "tree": {"sha": "8c33f46a70291aaf165e913371c1728fa57c4040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c33f46a70291aaf165e913371c1728fa57c4040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "html_url": "https://github.com/rust-lang/rust/commit/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31417efcd3e739b48c1cf78214e8c4ff82dc424f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31417efcd3e739b48c1cf78214e8c4ff82dc424f", "html_url": "https://github.com/rust-lang/rust/commit/31417efcd3e739b48c1cf78214e8c4ff82dc424f"}], "stats": {"total": 90, "additions": 35, "deletions": 55}, "files": [{"sha": "300b4df89294354edcafa092abe5601a700245f6", "filename": "src/libproc_macro_plugin/qquote.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibproc_macro_plugin%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibproc_macro_plugin%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fqquote.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -52,8 +52,6 @@ fn delimit(delim: token::DelimToken, stream: TokenStream) -> TokenStream {\n     TokenTree::Delimited(DUMMY_SP, Rc::new(Delimited {\n         delim: delim,\n         tts: stream.trees().cloned().collect(),\n-        open_span: DUMMY_SP,\n-        close_span: DUMMY_SP,\n     })).into()\n }\n \n@@ -129,8 +127,6 @@ impl Quote for TokenTree {\n impl Quote for Rc<Delimited> {\n     fn quote(&self) -> TokenStream {\n         quote!(::std::rc::Rc::new(::syntax::tokenstream::Delimited {\n-            open_span: ::syntax::ext::quote::rt::DUMMY_SP,\n-            close_span: ::syntax::ext::quote::rt::DUMMY_SP,\n             delim: (quote self.delim),\n             tts: (quote self.tts),\n         }))"}, {"sha": "3427a42526181c7205ade8b9f0e6549f29a0da2d", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -1034,18 +1034,14 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                 hash_span!(self, span);\n                 let tokenstream::Delimited {\n                     ref delim,\n-                    open_span,\n                     ref tts,\n-                    close_span,\n                 } = **delimited;\n \n                 delim.hash(self.st);\n-                hash_span!(self, open_span);\n                 tts.len().hash(self.st);\n                 for sub_tt in tts {\n                     self.hash_token_tree(sub_tt);\n                 }\n-                hash_span!(self, close_span);\n             }\n             tokenstream::TokenTree::Sequence(span, ref sequence_repetition) => {\n                 hash_span!(self, span);"}, {"sha": "8258a7427b62bbb5ba3ff5208e85b0d59c4996ca", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -231,9 +231,7 @@ pub mod rt {\n             }\n             r.push(TokenTree::Delimited(self.span, Rc::new(tokenstream::Delimited {\n                 delim: token::Bracket,\n-                open_span: self.span,\n                 tts: self.value.to_tokens(cx),\n-                close_span: self.span,\n             })));\n             r\n         }\n@@ -250,9 +248,7 @@ pub mod rt {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n             vec![TokenTree::Delimited(DUMMY_SP, Rc::new(tokenstream::Delimited {\n                 delim: token::Paren,\n-                open_span: DUMMY_SP,\n                 tts: vec![],\n-                close_span: DUMMY_SP,\n             }))]\n         }\n     }\n@@ -757,11 +753,11 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<ast::Stm\n                                     vec![e_tok]);\n             vec![cx.stmt_expr(e_push)]\n         },\n-        TokenTree::Delimited(_, ref delimed) => {\n-            statements_mk_tt(cx, &delimed.open_tt(), matcher).into_iter()\n+        TokenTree::Delimited(span, ref delimed) => {\n+            statements_mk_tt(cx, &delimed.open_tt(span), matcher).into_iter()\n                 .chain(delimed.tts.iter()\n                                   .flat_map(|tt| statements_mk_tt(cx, tt, matcher)))\n-                .chain(statements_mk_tt(cx, &delimed.close_tt(), matcher))\n+                .chain(statements_mk_tt(cx, &delimed.close_tt(span), matcher))\n                 .collect()\n         },\n         TokenTree::Sequence(sp, ref seq) => {"}, {"sha": "d0c1c0efea7a399e4496e8b24c9e732d5a06e6dc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -350,9 +350,9 @@ impl FirstSets {\n                     TokenTree::Token(sp, ref tok) => {\n                         first.replace_with((sp, tok.clone()));\n                     }\n-                    TokenTree::Delimited(_, ref delimited) => {\n+                    TokenTree::Delimited(span, ref delimited) => {\n                         build_recur(sets, &delimited.tts[..]);\n-                        first.replace_with((delimited.open_span,\n+                        first.replace_with((delimited.open_tt(span).span(),\n                                             Token::OpenDelim(delimited.delim)));\n                     }\n                     TokenTree::Sequence(sp, ref seq_rep) => {\n@@ -410,8 +410,8 @@ impl FirstSets {\n                     first.add_one((sp, tok.clone()));\n                     return first;\n                 }\n-                TokenTree::Delimited(_, ref delimited) => {\n-                    first.add_one((delimited.open_span,\n+                TokenTree::Delimited(span, ref delimited) => {\n+                    first.add_one((delimited.open_tt(span).span(),\n                                    Token::OpenDelim(delimited.delim)));\n                     return first;\n                 }\n@@ -603,8 +603,9 @@ fn check_matcher_core(sess: &ParseSess,\n                     suffix_first = build_suffix_first();\n                 }\n             }\n-            TokenTree::Delimited(_, ref d) => {\n-                let my_suffix = TokenSet::singleton((d.close_span, Token::CloseDelim(d.delim)));\n+            TokenTree::Delimited(span, ref d) => {\n+                let my_suffix = TokenSet::singleton((d.close_tt(span).span(),\n+                                                     Token::CloseDelim(d.delim)));\n                 check_matcher_core(sess, first_sets, &d.tts, &my_suffix);\n                 // don't track non NT tokens\n                 last.replace_with_irrelevant();"}, {"sha": "c42bf24578f0a376a0feb7e1f939a71bd6fa4cda", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -543,9 +543,7 @@ pub fn noop_fold_tt<T: Folder>(tt: &TokenTree, fld: &mut T) -> TokenTree {\n             TokenTree::Delimited(fld.new_span(span), Rc::new(\n                             Delimited {\n                                 delim: delimed.delim,\n-                                open_span: fld.new_span(delimed.open_span),\n                                 tts: fld.fold_tts(&delimed.tts),\n-                                close_span: fld.new_span(delimed.close_span),\n                             }\n                         ))\n         },"}, {"sha": "eafc3f77ab05227bbe40a6f20ab9eec74f559371", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -59,17 +59,15 @@ impl<'a> StringReader<'a> {\n \n                 // Parse the open delimiter.\n                 self.open_braces.push((delim, self.span));\n-                let open_span = self.span;\n                 self.real_token();\n \n                 // Parse the token trees within the delimiters.\n                 // We stop at any delimiter so we can try to recover if the user\n                 // uses an incorrect delimiter.\n                 let tts = self.parse_token_trees_until_close_delim();\n \n-                let close_span = self.span;\n                 // Expand to cover the entire delimited token tree\n-                let span = Span { hi: close_span.hi, ..pre_span };\n+                let span = Span { hi: self.span.hi, ..pre_span };\n \n                 match self.token {\n                     // Correct delimiter.\n@@ -115,9 +113,7 @@ impl<'a> StringReader<'a> {\n \n                 Ok(TokenTree::Delimited(span, Rc::new(Delimited {\n                     delim: delim,\n-                    open_span: open_span,\n                     tts: tts,\n-                    close_span: close_span,\n                 })))\n             },\n             token::CloseDelim(_) => {"}, {"sha": "f1a3b523cfd93cef737bd75d0311c04f3c538ca8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -725,24 +725,20 @@ mod tests {\n                 sp(5, 14),\n                 Rc::new(tokenstream::Delimited {\n                     delim: token::DelimToken::Paren,\n-                    open_span: sp(5, 6),\n                     tts: vec![\n                         TokenTree::Token(sp(6, 7), token::Ident(Ident::from_str(\"b\"))),\n                         TokenTree::Token(sp(8, 9), token::Colon),\n                         TokenTree::Token(sp(10, 13), token::Ident(Ident::from_str(\"i32\"))),\n                     ],\n-                    close_span: sp(13, 14),\n                 })),\n             TokenTree::Delimited(\n                 sp(15, 21),\n                 Rc::new(tokenstream::Delimited {\n                     delim: token::DelimToken::Brace,\n-                    open_span: sp(15, 16),\n                     tts: vec![\n                         TokenTree::Token(sp(17, 18), token::Ident(Ident::from_str(\"b\"))),\n                         TokenTree::Token(sp(18, 19), token::Semi),\n                     ],\n-                    close_span: sp(20, 21),\n                 }))\n         ];\n "}, {"sha": "f172f52104c3d6677c524e50d872ccf47f5ecea6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -254,9 +254,7 @@ impl<'a> Parser<'a> {\n                -> Self {\n         let tt = TokenTree::Delimited(syntax_pos::DUMMY_SP, Rc::new(Delimited {\n             delim: token::NoDelim,\n-            open_span: syntax_pos::DUMMY_SP,\n             tts: tokens,\n-            close_span: syntax_pos::DUMMY_SP,\n         }));\n         let mut parser = Parser {\n             sess: sess,\n@@ -2717,7 +2715,7 @@ impl<'a> Parser<'a> {\n                 }\n \n                 let parsing_token_tree = ::std::mem::replace(&mut self.parsing_token_tree, true);\n-                let open_span = self.span;\n+                let lo = self.span.lo;\n                 self.bump();\n                 let tts = self.parse_seq_to_before_tokens(&[&token::CloseDelim(token::Brace),\n                                                             &token::CloseDelim(token::Paren),\n@@ -2726,16 +2724,11 @@ impl<'a> Parser<'a> {\n                                                           |p| p.parse_token_tree(),\n                                                           |mut e| e.emit());\n                 self.parsing_token_tree = parsing_token_tree;\n-\n-                let close_span = self.span;\n                 self.bump();\n \n-                let span = Span { lo: open_span.lo, ..close_span };\n-                Ok(TokenTree::Delimited(span, Rc::new(Delimited {\n+                Ok(TokenTree::Delimited(Span { lo: lo, ..self.prev_span }, Rc::new(Delimited {\n                     delim: delim,\n-                    open_span: open_span,\n                     tts: tts,\n-                    close_span: close_span,\n                 })))\n             },\n             token::CloseDelim(_) | token::Eof => unreachable!(),"}, {"sha": "bf790b96e37f6c09270284840e549b9d379afc03", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -49,6 +49,12 @@ pub enum DelimToken {\n     NoDelim,\n }\n \n+impl DelimToken {\n+    pub fn len(&self) -> u32 {\n+        if *self == NoDelim { 0 } else { 1 }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum Lit {\n     Byte(ast::Name),"}, {"sha": "f29a168e6df196c7131a910074f5833a59dee564", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=49f5b0a8cf1a2d588a55f6cb8ea43942e147c66b", "patch": "@@ -25,7 +25,7 @@\n //! ownership of the original.\n \n use ast::{self, AttrStyle, LitKind};\n-use syntax_pos::Span;\n+use syntax_pos::{BytePos, Span, DUMMY_SP};\n use codemap::Spanned;\n use ext::base;\n use ext::tt::macro_parser;\n@@ -45,12 +45,8 @@ use std::rc::Rc;\n pub struct Delimited {\n     /// The type of delimiter\n     pub delim: token::DelimToken,\n-    /// The span covering the opening delimiter\n-    pub open_span: Span,\n     /// The delimited sequence of token trees\n     pub tts: Vec<TokenTree>,\n-    /// The span covering the closing delimiter\n-    pub close_span: Span,\n }\n \n impl Delimited {\n@@ -65,13 +61,21 @@ impl Delimited {\n     }\n \n     /// Returns the opening delimiter as a token tree.\n-    pub fn open_tt(&self) -> TokenTree {\n-        TokenTree::Token(self.open_span, self.open_token())\n+    pub fn open_tt(&self, span: Span) -> TokenTree {\n+        let open_span = match span {\n+            DUMMY_SP => DUMMY_SP,\n+            _ => Span { hi: span.lo + BytePos(self.delim.len()), ..span },\n+        };\n+        TokenTree::Token(open_span, self.open_token())\n     }\n \n     /// Returns the closing delimiter as a token tree.\n-    pub fn close_tt(&self) -> TokenTree {\n-        TokenTree::Token(self.close_span, self.close_token())\n+    pub fn close_tt(&self, span: Span) -> TokenTree {\n+        let close_span = match span {\n+            DUMMY_SP => DUMMY_SP,\n+            _ => Span { lo: span.hi - BytePos(self.delim.len()), ..span },\n+        };\n+        TokenTree::Token(close_span, self.close_token())\n     }\n \n     /// Returns the token trees inside the delimiters.\n@@ -175,23 +179,21 @@ impl TokenTree {\n \n                 TokenTree::Delimited(sp, Rc::new(Delimited {\n                     delim: token::Bracket,\n-                    open_span: sp,\n                     tts: vec![TokenTree::Token(sp, token::Ident(ast::Ident::from_str(\"doc\"))),\n                               TokenTree::Token(sp, token::Eq),\n                               TokenTree::Token(sp, token::Literal(\n                                   token::StrRaw(Symbol::intern(&stripped), num_of_hashes), None))],\n-                    close_span: sp,\n                 }))\n             }\n             (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {\n                 delimed.tts[index].clone()\n             }\n-            (&TokenTree::Delimited(_, ref delimed), _) => {\n+            (&TokenTree::Delimited(span, ref delimed), _) => {\n                 if index == 0 {\n-                    return delimed.open_tt();\n+                    return delimed.open_tt(span);\n                 }\n                 if index == delimed.tts.len() + 1 {\n-                    return delimed.close_tt();\n+                    return delimed.close_tt(span);\n                 }\n                 delimed.tts[index - 1].clone()\n             }"}]}