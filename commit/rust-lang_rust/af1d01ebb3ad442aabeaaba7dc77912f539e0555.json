{"sha": "af1d01ebb3ad442aabeaaba7dc77912f539e0555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMWQwMWViYjNhZDQ0MmFhYmVhYWJhN2RjNzc5MTJmNTM5ZTA1NTU=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-07-03T18:55:13Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-07-17T18:45:29Z"}, "message": "Fix various tests to run on windows-gnu", "tree": {"sha": "db0e8e8e5ee27e61141eaec6bb1ec3b9aa20e359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0e8e8e5ee27e61141eaec6bb1ec3b9aa20e359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1d01ebb3ad442aabeaaba7dc77912f539e0555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1d01ebb3ad442aabeaaba7dc77912f539e0555", "html_url": "https://github.com/rust-lang/rust/commit/af1d01ebb3ad442aabeaaba7dc77912f539e0555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1d01ebb3ad442aabeaaba7dc77912f539e0555/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933a06d8a3eb24260f88bd408586044fc3592cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/933a06d8a3eb24260f88bd408586044fc3592cee", "html_url": "https://github.com/rust-lang/rust/commit/933a06d8a3eb24260f88bd408586044fc3592cee"}], "stats": {"total": 81, "additions": 39, "deletions": 42}, "files": [{"sha": "0cf5d1855212d6ea064661ba22a0ba21168b188d", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# only-mingw\n+# only-windows-gnu\n \n all:\n \t$(CXX) foo.cpp -c -o $(TMPDIR)/foo.o"}, {"sha": "f91af88efe1b715a3dc9fdc183de419de76b90e5", "filename": "src/test/run-make-fulldeps/include_bytes_deps/Makefile", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,10 +1,6 @@\n -include ../tools.mk\n \n-# ignore-windows\n # ignore-freebsd\n-# FIXME: on windows `rustc --dep-info` produces Makefile dependency with\n-# windows native paths (e.g. `c:\\path\\to\\libfoo.a`)\n-# but msys make seems to fail to recognize such paths, so test fails.\n \n all:\n \t$(RUSTC) --emit dep-info main.rs"}, {"sha": "2037728568e2409493a3cea9ef7bc2dfc232fe7e", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# ignore-windows\n+# ignore-windows-msvc\n #\n # Because of Windows exception handling, the code is not necessarily any shorter.\n # https://github.com/llvm-mirror/llvm/commit/64b2297786f7fd6f5fa24cdd4db0298fbf211466"}, {"sha": "ba3d3b7100745e0debe024ac76d776f86f7e868a", "filename": "src/test/run-make-fulldeps/issue-51671/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# ignore-windows\n+# ignore-windows-msvc\n \n all:\n \t$(RUSTC) --emit=obj app.rs"}, {"sha": "8468d102bec8312a276df6de130368ef4d492891", "filename": "src/test/run-make-fulldeps/redundant-libs/Makefile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,8 +1,6 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-all:\n-else\n+# ignore-windows-msvc\n \n # rustc will remove one of the two redundant references to foo below.  Depending\n # on which one gets removed, we'll get a linker error on SOME platforms (like\n@@ -23,5 +21,3 @@ RUSTC_FLAGS = \\\n all: $(call DYLIB,foo) $(call STATICLIB,bar) $(call STATICLIB,baz)\n \t$(RUSTC) $(RUSTC_FLAGS) main.rs\n \t$(call RUN,main)\n-\n-endif"}, {"sha": "dc55c947d89a2fef1017bee007cc63dbb2735e6a", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,9 +1,6 @@\n include ../tools.mk\n \n-# ignore-windows\n-#\n-# On MINGW the --version-script, --dynamic-list, and --retain-symbol args don't\n-# seem to work reliably.\n+# ignore-windows-msvc\n \n NM=nm -D\n CDYLIB_NAME=liba_cdylib.so\n@@ -19,6 +16,14 @@ EXE_NAME=an_executable\n COMBINED_CDYLIB_NAME=libcombined_rlib_dylib.dylib\n endif\n \n+ifdef IS_WINDOWS\n+NM=nm -g\n+CDYLIB_NAME=liba_cdylib.dll.a\n+RDYLIB_NAME=liba_rust_dylib.dll.a\n+EXE_NAME=an_executable.exe\n+COMBINED_CDYLIB_NAME=libcombined_rlib_dylib.dll.a\n+endif\n+\n # `grep` regex for symbols produced by either `legacy` or `v0` mangling\n RE_ANY_RUST_SYMBOL=\"_ZN.*h.*E\\|_R[a-zA-Z0-9_]+\"\n \n@@ -30,38 +35,38 @@ all:\n \t$(RUSTC) -Zshare-generics=no a_cdylib.rs --crate-name combined_rlib_dylib --crate-type=rlib,cdylib\n \n \t# Check that a cdylib exports its public #[no_mangle] functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \t# Check that a Rust dylib exports its monomorphic functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n \t# Check that a Rust dylib does not export generics if -Zshare-generics=no\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n \n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a Rust dylib does not export generics if -Zshare-generics=no\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n-\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n \n \n \t# Check the combined case, where we generate a cdylib and an rlib in the same\n \t# compilation session:\n \t# Check that a cdylib exports its public #[no_mangle] functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n-\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -v __imp_ | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \n \t$(RUSTC) -Zshare-generics=yes an_rlib.rs\n@@ -70,22 +75,22 @@ all:\n \t$(RUSTC) -Zshare-generics=yes an_executable.rs\n \n \t# Check that a cdylib exports its public #[no_mangle] functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -v __imp_ | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \t# Check that a Rust dylib exports its monomorphic functions, including generics this time\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n-\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_rust_function_from_exe)\" -eq \"0\" ]"}, {"sha": "4d904472931ece12732a5a3e31b4684dbb0e6d0a", "filename": "src/test/run-make-fulldeps/used/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af1d01ebb3ad442aabeaaba7dc77912f539e0555/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile?ref=af1d01ebb3ad442aabeaaba7dc77912f539e0555", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# ignore-windows\n+# ignore-windows-msvc\n \n all:\n \t$(RUSTC) -C opt-level=3 --emit=obj used.rs"}]}