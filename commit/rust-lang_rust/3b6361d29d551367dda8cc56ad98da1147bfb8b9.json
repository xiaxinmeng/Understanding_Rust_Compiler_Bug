{"sha": "3b6361d29d551367dda8cc56ad98da1147bfb8b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjM2MWQyOWQ1NTEzNjdkZGE4Y2M1NmFkOThkYTExNDdiZmI4Yjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-30T17:58:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:47Z"}, "message": "switch to using `NonZeroU32` to represent indices", "tree": {"sha": "038c652cb670f3e5edb7480f1211c2d04e455f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038c652cb670f3e5edb7480f1211c2d04e455f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6361d29d551367dda8cc56ad98da1147bfb8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6361d29d551367dda8cc56ad98da1147bfb8b9", "html_url": "https://github.com/rust-lang/rust/commit/3b6361d29d551367dda8cc56ad98da1147bfb8b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6361d29d551367dda8cc56ad98da1147bfb8b9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f702bd6a529ce9d2e311ea0254a04228a4a2f129", "url": "https://api.github.com/repos/rust-lang/rust/commits/f702bd6a529ce9d2e311ea0254a04228a4a2f129", "html_url": "https://github.com/rust-lang/rust/commit/f702bd6a529ce9d2e311ea0254a04228a4a2f129"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "acd35e1aa958d0686a59d61504011826a0071dc4", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3b6361d29d551367dda8cc56ad98da1147bfb8b9", "patch": "@@ -1273,7 +1273,7 @@ impl DebruijnIndex {\n     ///\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n-    pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n+    pub fn shifted_in(self, amount: u32) -> DebruijnIndex {\n         unsafe {\n             DebruijnIndex::from_u32_unchecked(self.as_u32() + amount)\n         }\n@@ -1288,7 +1288,7 @@ impl DebruijnIndex {\n     /// Returns the resulting index when this value is moved out from\n     /// `amount` number of new binders.\n     #[must_use]\n-    pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n+    pub fn shifted_out(self, amount: u32) -> DebruijnIndex {\n         unsafe {\n             DebruijnIndex::from_u32_unchecked(self.as_u32() - amount)\n         }"}, {"sha": "f068fc77d322d2e33e33db791e2b342ba724a30c", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=3b6361d29d551367dda8cc56ad98da1147bfb8b9", "patch": "@@ -98,7 +98,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         $v struct $type {\n-            private: u32\n+            private: ::std::num::NonZeroU32\n         }\n \n         impl $type {\n@@ -124,7 +124,7 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n-                $type { private: value }\n+                $type { private: ::std::num::NonZeroU32::new_unchecked(value + 1) }\n             }\n \n             /// Extract value of this index as an integer.\n@@ -135,13 +135,13 @@ macro_rules! newtype_index {\n \n             /// Extract value of this index as a usize.\n             #[inline]\n-            $v const fn as_u32(self) -> u32 {\n-                self.private\n+            $v fn as_u32(self) -> u32 {\n+                self.private.get() - 1\n             }\n \n             /// Extract value of this index as a u32.\n             #[inline]\n-            $v const fn as_usize(self) -> usize {\n+            $v fn as_usize(self) -> usize {\n                 self.as_u32() as usize\n             }\n         }"}, {"sha": "57c00f252ef16f0caa647db89595d5453f776283", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6361d29d551367dda8cc56ad98da1147bfb8b9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=3b6361d29d551367dda8cc56ad98da1147bfb8b9", "patch": "@@ -183,8 +183,13 @@ fn test_env_with_pool<F>(\n     });\n }\n \n-const D1: ty::DebruijnIndex = ty::INNERMOST;\n-const D2: ty::DebruijnIndex = D1.shifted_in(1);\n+fn d1() -> ty::DebruijnIndex {\n+    ty::INNERMOST\n+}\n+\n+fn d2() -> ty::DebruijnIndex {\n+    d1().shifted_in(1)\n+}\n \n impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -337,7 +342,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_late_bound(&self, id: u32) -> Ty<'tcx> {\n-        let r = self.re_late_bound_with_debruijn(id, D1);\n+        let r = self.re_late_bound_with_debruijn(id, d1());\n         self.infcx.tcx.mk_imm_ref(r, self.tcx().types.isize)\n     }\n \n@@ -494,7 +499,7 @@ fn subst_ty_renumber_bound() {\n \n         // t_expected = fn(&'a isize)\n         let t_expected = {\n-            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_fn(&[t_ptr_bound2], env.t_nil())\n         };\n \n@@ -531,7 +536,7 @@ fn subst_ty_renumber_some_bounds() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n         };\n \n@@ -559,10 +564,10 @@ fn escaping() {\n         let t_rptr_free1 = env.t_rptr_free(1);\n         assert!(!t_rptr_free1.has_escaping_regions());\n \n-        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, D1);\n+        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, d1());\n         assert!(t_rptr_bound1.has_escaping_regions());\n \n-        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n         assert!(t_rptr_bound2.has_escaping_regions());\n \n         // t_fn = fn(A)\n@@ -578,7 +583,7 @@ fn escaping() {\n #[test]\n fn subst_region_renumber_region() {\n     test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n-        let re_bound1 = env.re_late_bound_with_debruijn(1, D1);\n+        let re_bound1 = env.re_late_bound_with_debruijn(1, d1());\n \n         // type t_source<'a> = fn(&'a isize)\n         let t_source = {\n@@ -593,7 +598,7 @@ fn subst_region_renumber_region() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n             env.t_fn(&[t_rptr_bound2], env.t_nil())\n         };\n "}]}