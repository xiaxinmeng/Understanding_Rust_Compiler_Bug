{"sha": "7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYjUwZTQwMDYzYTVmMTFhZWMxNDhmNTlhZDRkMzJlMmExM2ZkNzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T15:50:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-08T15:50:33Z"}, "message": "Rollup merge of #65785 - Centril:compat-to-error-2, r=oli-obk\n\nTransition future compat lints to {ERROR, DENY} - Take 2\n\nFollow up to https://github.com/rust-lang/rust/pull/63247 implementing https://github.com/rust-lang/rust/pull/63247#issuecomment-536295992.\n\n- `legacy_ctor_visibility` (ERROR) -- closes #39207\n- `legacy_directory_ownership` (ERROR) -- closes #37872\n- `safe_extern_static` (ERROR) -- closes #36247\n- `parenthesized_params_in_types_and_modules` (ERROR) -- closes #42238\n- `duplicate_macro_exports` (ERROR)\n- `nested_impl_trait` (ERROR) -- closes #59014\n- `ill_formed_attribute_input` (DENY) -- transitions #57571\n- `patterns_in_fns_without_body` (DENY) -- transitions #35203\n\nr? @varkor\ncc @petrochenkov", "tree": {"sha": "5450ddc2785c74a9a373a0d5a92182d20d8551d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5450ddc2785c74a9a373a0d5a92182d20d8551d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxY7KCRBK7hj4Ov3rIwAAdHIIAHQNHcBavkGRT8VndsOjfO6U\nVEkhGjJ40uTLgpmSJa18OirYqoVrJ+kSYHh0ZJxwDYHlwi1VhGUjXRZpJFGMg4K4\nixMZq2wtXs9xehq7J2OWABpL0nxSgBFmuHknzUBulbHjeQBZ2OSIu1U6xcAXLuMe\n72k1ne4rKJi5dl+ZKHNzTvwu3l2qJUXTYwZiLqlQhpOGGw2d6JuKEZ3Gc6pFrXVZ\nm5W8tPDlLgo/wMFfnjrcWXC5zdXrkiRHFF0ZEVCnA5vB90oEesqT9IH1RVODShUk\nbK1rjaa01PvFDEQL4C3pRwdc++xXHCA1OGTzOBubeGrro9veDSKqNfD8BukNO/U=\n=r/DH\n-----END PGP SIGNATURE-----\n", "payload": "tree 5450ddc2785c74a9a373a0d5a92182d20d8551d8\nparent 76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc\nparent 574d2b83a16dbbe975bbb3cf2ed541563a2f756c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573228233 +0100\ncommitter GitHub <noreply@github.com> 1573228233 +0100\n\nRollup merge of #65785 - Centril:compat-to-error-2, r=oli-obk\n\nTransition future compat lints to {ERROR, DENY} - Take 2\n\nFollow up to https://github.com/rust-lang/rust/pull/63247 implementing https://github.com/rust-lang/rust/pull/63247#issuecomment-536295992.\n\n- `legacy_ctor_visibility` (ERROR) -- closes #39207\n- `legacy_directory_ownership` (ERROR) -- closes #37872\n- `safe_extern_static` (ERROR) -- closes #36247\n- `parenthesized_params_in_types_and_modules` (ERROR) -- closes #42238\n- `duplicate_macro_exports` (ERROR)\n- `nested_impl_trait` (ERROR) -- closes #59014\n- `ill_formed_attribute_input` (DENY) -- transitions #57571\n- `patterns_in_fns_without_body` (DENY) -- transitions #35203\n\nr? @varkor\ncc @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "html_url": "https://github.com/rust-lang/rust/commit/7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "html_url": "https://github.com/rust-lang/rust/commit/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc"}, {"sha": "574d2b83a16dbbe975bbb3cf2ed541563a2f756c", "url": "https://api.github.com/repos/rust-lang/rust/commits/574d2b83a16dbbe975bbb3cf2ed541563a2f756c", "html_url": "https://github.com/rust-lang/rust/commit/574d2b83a16dbbe975bbb3cf2ed541563a2f756c"}], "stats": {"total": 1064, "additions": 260, "deletions": 804}, "files": [{"sha": "dc5a9e44acfa2670b3a5869e7accbe9d82b8ce50", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 27, "deletions": 64, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -45,53 +45,6 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n \n-## legacy-constructor-visibility\n-\n-[RFC 1506](https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md) modified some\n-visibility rules, and changed the visibility of struct constructors. Some\n-example code that triggers this lint:\n-\n-```rust,ignore\n-mod m {\n-    pub struct S(u8);\n-    \n-    fn f() {\n-        // this is trying to use S from the 'use' line, but because the `u8` is\n-        // not pub, it is private\n-        ::S;\n-    }\n-}\n-\n-use m::S;\n-```\n-\n-This will produce:\n-\n-```text\n-error: private struct constructors are not usable through re-exports in outer modules\n- --> src/main.rs:5:9\n-  |\n-5 |         ::S;\n-  |         ^^^\n-  |\n-  = note: `#[deny(legacy_constructor_visibility)]` on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n-```\n-\n-\n-## legacy-directory-ownership\n-\n-The legacy_directory_ownership warning is issued when\n-\n-* There is a non-inline module with a `#[path]` attribute (e.g. `#[path = \"foo.rs\"] mod bar;`),\n-* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n-* The module's file contains a non-inline child module without a `#[path]` attribute.\n-\n-The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n-it into its own directory if appropriate.\n-\n-\n ## missing-fragment-specifier\n \n The missing_fragment_specifier warning is issued when an unused pattern in a\n@@ -169,39 +122,49 @@ error: literal out of range for u8\n   |\n ```\n \n-## parenthesized-params-in-types-and-modules\n+## patterns-in-fns-without-body\n \n-This lint detects incorrect parentheses. Some example code that triggers this\n-lint:\n+This lint detects patterns in functions without body were that were\n+previously erroneously allowed. Some example code that triggers this lint:\n \n-```rust,ignore\n-let x = 5 as usize();\n+```rust,compile_fail\n+trait Trait {\n+    fn foo(mut arg: u8);\n+}\n ```\n \n This will produce:\n \n ```text\n-error: parenthesized parameters may only be used with a trait\n- --> src/main.rs:2:21\n+warning: patterns aren't allowed in methods without bodies\n+ --> src/main.rs:2:12\n   |\n-2 |   let x = 5 as usize();\n-  |                     ^^\n+2 |     fn foo(mut arg: u8);\n+  |            ^^^^^^^\n   |\n-  = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n+  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n ```\n \n-To fix it, remove the `()`s.\n+To fix this, remove the pattern; it can be used in the implementation without\n+being used in the definition. That is:\n \n-## pub-use-of-private-extern-crate\n+```rust\n+trait Trait {\n+    fn foo(arg: u8);\n+}\n \n-This lint detects a specific situation of re-exporting a private `extern crate`;\n+impl Trait for i32 {\n+    fn foo(mut arg: u8) {\n+\n+    }\n+}\n+```\n \n-## safe-extern-statics\n+## pub-use-of-private-extern-crate\n \n-In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n-to be accessed in safe code. This lint now catches and denies this kind of code.\n+This lint detects a specific situation of re-exporting a private `extern crate`;\n \n ## unknown-crate-types\n "}, {"sha": "77642a850fae847c6c517ed2221055591ee91afe", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -307,46 +307,6 @@ warning: path statement with no effect\n   |\n ```\n \n-## patterns-in-fns-without-body\n-\n-This lint detects patterns in functions without body were that were\n-previously erroneously allowed. Some example code that triggers this lint:\n-\n-```rust\n-trait Trait {\n-    fn foo(mut arg: u8);\n-}\n-```\n-\n-This will produce:\n-\n-```text\n-warning: patterns aren't allowed in methods without bodies\n- --> src/main.rs:2:12\n-  |\n-2 |     fn foo(mut arg: u8);\n-  |            ^^^^^^^\n-  |\n-  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n-```\n-\n-To fix this, remove the pattern; it can be used in the implementation without\n-being used in the definition. That is:\n-\n-```rust\n-trait Trait {\n-    fn foo(arg: u8);\n-}\n-\n-impl Trait for i32 {\n-    fn foo(mut arg: u8) {\n-\n-    }\n-}\n-```\n-\n ## plugin-as-library\n \n This lint detects when compiler plugins are used as ordinary library in"}, {"sha": "278f45371b1511f2df1ebcbeb8604e5fdeafb3af", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -44,8 +44,7 @@ use crate::hir::def::{Namespace, Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n use crate::hir::ptr::P;\n use crate::lint;\n-use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                    ELIDED_LIFETIMES_IN_PATHS};\n+use crate::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n use crate::session::Session;\n use crate::session::config::nightly_options;\n@@ -298,7 +297,6 @@ enum ParamMode {\n \n enum ParenthesizedGenericArgs {\n     Ok,\n-    Warn,\n     Err,\n }\n \n@@ -1701,29 +1699,19 @@ impl<'a> LoweringContext<'a> {\n                     };\n                     let parenthesized_generic_args = match partial_res.base_res() {\n                         // `a::b::Trait(Args)`\n-                        Res::Def(DefKind::Trait, _)\n-                            if i + 1 == proj_start => ParenthesizedGenericArgs::Ok,\n+                        Res::Def(DefKind::Trait, _) if i + 1 == proj_start => {\n+                            ParenthesizedGenericArgs::Ok\n+                        }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n-                        | Res::Def(DefKind::AssocConst, _)\n-                        | Res::Def(DefKind::AssocTy, _)\n-                            if i + 2 == proj_start =>\n-                        {\n+                        Res::Def(DefKind::Method, _) |\n+                        Res::Def(DefKind::AssocConst, _) |\n+                        Res::Def(DefKind::AssocTy, _) if i + 2 == proj_start => {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // Avoid duplicated errors.\n                         Res::Err => ParenthesizedGenericArgs::Ok,\n                         // An error\n-                        Res::Def(DefKind::Struct, _)\n-                        | Res::Def(DefKind::Enum, _)\n-                        | Res::Def(DefKind::Union, _)\n-                        | Res::Def(DefKind::TyAlias, _)\n-                        | Res::Def(DefKind::Variant, _) if i + 1 == proj_start =>\n-                        {\n-                            ParenthesizedGenericArgs::Err\n-                        }\n-                        // A warning for now, for compatibility reasons.\n-                        _ => ParenthesizedGenericArgs::Warn,\n+                        _ => ParenthesizedGenericArgs::Err,\n                     };\n \n                     let num_lifetimes = type_def_id.map_or(0, |def_id| {\n@@ -1786,7 +1774,7 @@ impl<'a> LoweringContext<'a> {\n                 segment,\n                 param_mode,\n                 0,\n-                ParenthesizedGenericArgs::Warn,\n+                ParenthesizedGenericArgs::Err,\n                 itctx.reborrow(),\n                 None,\n             ));\n@@ -1862,15 +1850,6 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n                     ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n-                    ParenthesizedGenericArgs::Warn => {\n-                        self.resolver.lint_buffer().buffer_lint(\n-                            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                            CRATE_NODE_ID,\n-                            data.span,\n-                            msg.into(),\n-                        );\n-                        (hir::GenericArgs::none(), true)\n-                    }\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");"}, {"sha": "f8a592d22c19c1a3f6ce285fa294ffa9a44a6688", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 81, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -177,16 +177,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub SAFE_EXTERN_STATICS,\n-    Deny,\n-    \"safe access to extern statics was erroneously allowed\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n@@ -199,35 +189,14 @@ declare_lint! {\n \n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n-    Warn,\n+    Deny,\n     \"patterns in functions without body were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n         edition: None,\n     };\n }\n \n-declare_lint! {\n-    pub LEGACY_DIRECTORY_OWNERSHIP,\n-    Deny,\n-    \"non-inline, non-`#[path]` modules (e.g., `mod foo;`) were erroneously allowed in some files \\\n-     not named `mod.rs`\",\n-     @future_incompatible = FutureIncompatibleInfo {\n-         reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-         edition: None,\n-     };\n-}\n-\n-declare_lint! {\n-    pub LEGACY_CONSTRUCTOR_VISIBILITY,\n-    Deny,\n-    \"detects use of struct constructors that would be invisible with new visibility rules\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub MISSING_FRAGMENT_SPECIFIER,\n     Deny,\n@@ -238,16 +207,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-    Deny,\n-    \"detects parenthesized generic parameters in type and module names\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n@@ -372,16 +331,6 @@ declare_lint! {\n     \"detects labels that are never used\"\n }\n \n-declare_lint! {\n-    pub DUPLICATE_MACRO_EXPORTS,\n-    Deny,\n-    \"detects duplicate macro exports\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n-        edition: Some(Edition::Edition2018),\n-    };\n-}\n-\n declare_lint! {\n     pub INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     Warn,\n@@ -459,7 +408,7 @@ declare_lint! {\n pub mod parser {\n     declare_lint! {\n         pub ILL_FORMED_ATTRIBUTE_INPUT,\n-        Warn,\n+        Deny,\n         \"ill-formed attribute inputs that were previously accepted and used in practice\",\n         @future_incompatible = super::FutureIncompatibleInfo {\n             reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n@@ -497,16 +446,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub NESTED_IMPL_TRAIT,\n-    Warn,\n-    \"nested occurrence of `impl Trait` type\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n     Warn,\n@@ -556,13 +495,9 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n-        SAFE_EXTERN_STATICS,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n-        LEGACY_DIRECTORY_OWNERSHIP,\n-        LEGACY_CONSTRUCTOR_VISIBILITY,\n         MISSING_FRAGMENT_SPECIFIER,\n-        PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         DEPRECATED,\n@@ -578,7 +513,6 @@ declare_lint_pass! {\n         ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n         UNSTABLE_NAME_COLLISIONS,\n         IRREFUTABLE_LET_PATTERNS,\n-        DUPLICATE_MACRO_EXPORTS,\n         INTRA_DOC_LINK_RESOLUTION_FAILURE,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS,\n@@ -590,7 +524,6 @@ declare_lint_pass! {\n         parser::META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n-        NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n@@ -604,13 +537,11 @@ pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n-    DuplicatedMacroExports(ast::Ident, Span, Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n-    NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n }\n@@ -687,10 +618,6 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion(span, \"use `crate`\", sugg, app);\n             }\n-            BuiltinLintDiagnostics::DuplicatedMacroExports(ident, earlier_span, later_span) => {\n-                db.span_label(later_span, format!(\"`{}` already exported\", ident));\n-                db.span_note(earlier_span, \"previous macro export is now shadowed\");\n-            }\n             BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n                 db.span_label(span, \"names from parent modules are not \\\n                                      accessible without an explicit import\");\n@@ -723,12 +650,6 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n-            BuiltinLintDiagnostics::NestedImplTrait {\n-                outer_impl_trait_span, inner_impl_trait_span\n-            } => {\n-                db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n-                db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n-            }\n             BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n                 for (span, is_imported) in spans {\n                     let introduced = if is_imported { \"imported\" } else { \"defined\" };"}, {"sha": "2eaf05beb2e9f8004f1f1be94c950d4cde4c5720", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -2701,7 +2701,6 @@ pub enum UnsafetyViolationKind {\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n-    ExternStatic(hir::HirId),\n     BorrowPacked(hir::HirId),\n }\n "}, {"sha": "a1e50018f8aa245d693fdf618e8d9e0f7cbde3e8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -339,6 +339,18 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/57742\");\n     store.register_removed(\"incoherent_fundamental_impls\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n+    store.register_removed(\"legacy_constructor_visibility\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/39207\");\n+    store.register_removed(\"legacy_disrectory_ownership\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n+    store.register_removed(\"safe_extern_statics\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36247\");\n+    store.register_removed(\"parenthesized_params_in_types_and_modules\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/42238\");\n+    store.register_removed(\"duplicate_macro_exports\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/35896\");\n+    store.register_removed(\"nested_impl_trait\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/59014\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "9dc4fdf53083fbea4c99600bd7cce22298f9f3ae", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::cast::CastTy;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n-use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n+use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n@@ -208,23 +208,20 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n             PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                 if self.tcx.is_mutable_static(def_id) {\n-                    self.require_unsafe(\"use of mutable static\",\n+                    self.require_unsafe(\n+                        \"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing \\\n-                         violations or data races will cause undefined behavior\",\n-                         UnsafetyViolationKind::General);\n+                        violations or data races will cause undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 } else if self.tcx.is_foreign_item(def_id) {\n-                    let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n-                    self.register_violations(&[UnsafetyViolation {\n-                        source_info,\n-                        description: Symbol::intern(\"use of extern static\"),\n-                        details: Symbol::intern(\n-                            \"extern statics are not controlled by the Rust type system: \\\n-                            invalid data, aliasing violations or data races will cause \\\n-                            undefined behavior\"),\n-                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n-                    }], &[]);\n+                    self.require_unsafe(\n+                        \"use of extern static\",\n+                        \"extern statics are not controlled by the Rust type system: \\\n+                        invalid data, aliasing violations or data races will cause \\\n+                        undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 }\n             }\n         }\n@@ -351,8 +348,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn |\n                         UnsafetyViolationKind::General => {},\n-                        UnsafetyViolationKind::BorrowPacked(_) |\n-                        UnsafetyViolationKind::ExternStatic(_) => if self.min_const_fn {\n+                        UnsafetyViolationKind::BorrowPacked(_) => if self.min_const_fn {\n                             // const fns don't need to be backwards compatible and can\n                             // emit these violations as a hard error instead of a backwards\n                             // compat lint\n@@ -380,8 +376,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             UnsafetyViolationKind::GeneralAndConstFn => {},\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General |\n-                            UnsafetyViolationKind::BorrowPacked(_) |\n-                            UnsafetyViolationKind::ExternStatic(_) => {\n+                            UnsafetyViolationKind::BorrowPacked(_) => {\n                                 let mut violation = violation.clone();\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n@@ -646,14 +641,6 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                     .note(&details.as_str())\n                     .emit();\n             }\n-            UnsafetyViolationKind::ExternStatic(lint_hir_id) => {\n-                tcx.lint_node_note(SAFE_EXTERN_STATICS,\n-                              lint_hir_id,\n-                              source_info.span,\n-                              &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                        (error E0133)\", description),\n-                              &details.as_str());\n-            }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.unsafe_derive_on_repr_packed(impl_def_id);"}, {"sha": "4cf2a5f3584a60d07354080db1e60fe35dca9716", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 112, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -9,7 +9,6 @@\n use std::mem;\n use syntax::print::pprust;\n use rustc::lint;\n-use rustc::lint::builtin::{BuiltinLintDiagnostics, NESTED_IMPL_TRAIT};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n@@ -23,39 +22,14 @@ use syntax::{span_err, struct_span_err, walk_list};\n use syntax_pos::{Span, MultiSpan};\n use errors::{Applicability, FatalError};\n \n-#[derive(Copy, Clone, Debug)]\n-struct OuterImplTrait {\n-    span: Span,\n-\n-    /// rust-lang/rust#57979: a bug in original implementation caused\n-    /// us to fail sometimes to record an outer `impl Trait`.\n-    /// Therefore, in order to reliably issue a warning (rather than\n-    /// an error) in the *precise* places where we are newly injecting\n-    /// the diagnostic, we have to distinguish between the places\n-    /// where the outer `impl Trait` has always been recorded, versus\n-    /// the places where it has only recently started being recorded.\n-    only_recorded_since_pull_request_57730: bool,\n-}\n-\n-impl OuterImplTrait {\n-    /// This controls whether we should downgrade the nested impl\n-    /// trait diagnostic to a warning rather than an error, based on\n-    /// whether the outer impl trait had been improperly skipped in\n-    /// earlier implementations of the analysis on the stable\n-    /// compiler.\n-    fn should_warn_instead_of_error(&self) -> bool {\n-        self.only_recorded_since_pull_request_57730\n-    }\n-}\n-\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,\n \n     /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     /// Nested `impl Trait` _is_ allowed in associated type position,\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n-    outer_impl_trait: Option<OuterImplTrait>,\n+    outer_impl_trait: Option<Span>,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -65,26 +39,10 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    /// rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n-    /// until PRs #57730 and #57981 landed: it would jump directly to\n-    /// walk_ty rather than visit_ty (or skip recurring entirely for\n-    /// impl trait in projections), and thus miss some cases. We track\n-    /// whether we should downgrade to a warning for short-term via\n-    /// these booleans.\n-    warning_period_57979_didnt_record_next_impl_trait: bool,\n-    warning_period_57979_impl_trait_in_proj: bool,\n-\n     lint_buffer: &'a mut lint::LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n-    fn with_impl_trait_in_proj_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let old = mem::replace(&mut self.warning_period_57979_impl_trait_in_proj, v);\n-        let ret = f(self);\n-        self.warning_period_57979_impl_trait_in_proj = old;\n-        ret\n-    }\n-\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n@@ -97,22 +55,15 @@ impl<'a> AstValidator<'a> {\n         self.is_assoc_ty_bound_banned = old;\n     }\n \n-    fn with_impl_trait(&mut self, outer: Option<OuterImplTrait>, f: impl FnOnce(&mut Self)) {\n+    fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n-            AssocTyConstraintKind::Equality { ref ty } => {\n-                // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-                // `walk_ty` rather than `visit_ty`, skipping outer `impl Trait`\n-                // if it happened to occur at `ty`.\n-                if let TyKind::ImplTrait(..) = ty.kind {\n-                    self.warning_period_57979_didnt_record_next_impl_trait = true;\n-                }\n-            }\n+            AssocTyConstraintKind::Equality { .. } => {}\n             AssocTyConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n                     self.err_handler().span_err(constraint.span,\n@@ -124,37 +75,11 @@ impl<'a> AstValidator<'a> {\n         self.visit_assoc_ty_constraint(constraint);\n     }\n \n-    fn visit_ty_from_generic_args(&mut self, ty: &'a Ty) {\n-        // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-        // `walk_ty` rather than `visit_ty`, skippping outer `impl Trait`\n-        // if it happened to occur at `ty`.\n-        if let TyKind::ImplTrait(..) = ty.kind {\n-            self.warning_period_57979_didnt_record_next_impl_trait = true;\n-        }\n-        self.visit_ty(ty);\n-    }\n-\n-    fn outer_impl_trait(&mut self, span: Span) -> OuterImplTrait {\n-        let only_recorded_since_pull_request_57730 =\n-            self.warning_period_57979_didnt_record_next_impl_trait;\n-\n-        // (This flag is designed to be set to `true`, and then only\n-        // reach the construction point for the outer impl trait once,\n-        // so its safe and easiest to unconditionally reset it to\n-        // false.)\n-        self.warning_period_57979_didnt_record_next_impl_trait = false;\n-\n-        OuterImplTrait {\n-            span, only_recorded_since_pull_request_57730,\n-        }\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match t.kind {\n             TyKind::ImplTrait(..) => {\n-                let outer_impl_trait = self.outer_impl_trait(t.span);\n-                self.with_impl_trait(Some(outer_impl_trait), |this| visit::walk_ty(this, t))\n+                self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n@@ -484,40 +409,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n-                    if self.warning_period_57979_impl_trait_in_proj {\n-                        self.lint_buffer.buffer_lint(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"`impl Trait` is not allowed in path parameters\");\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0667,\n-                            \"`impl Trait` is not allowed in path parameters\").emit();\n-                    }\n+                    struct_span_err!(\n+                        self.session, ty.span, E0667,\n+                        \"`impl Trait` is not allowed in path parameters\"\n+                    )\n+                    .emit();\n                 }\n \n-                if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                    if outer_impl_trait.should_warn_instead_of_error() {\n-                        self.lint_buffer.buffer_lint_with_diagnostic(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"nested `impl Trait` is not allowed\",\n-                            BuiltinLintDiagnostics::NestedImplTrait {\n-                                outer_impl_trait_span: outer_impl_trait.span,\n-                                inner_impl_trait_span: ty.span,\n-                            });\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0666,\n-                            \"nested `impl Trait` is not allowed\")\n-                            .span_label(outer_impl_trait.span, \"outer `impl Trait`\")\n-                            .span_label(ty.span, \"nested `impl Trait` here\")\n-                            .emit();\n-                    }\n+                if let Some(outer_impl_trait_sp) = self.outer_impl_trait {\n+                    struct_span_err!(\n+                        self.session, ty.span, E0666,\n+                        \"nested `impl Trait` is not allowed\"\n+                    )\n+                    .span_label(outer_impl_trait_sp, \"outer `impl Trait`\")\n+                    .span_label(ty.span, \"nested `impl Trait` here\")\n+                    .emit();\n                 }\n \n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n \n-                self.with_impl_trait_in_proj_warning(true, |this| this.walk_ty(ty));\n+                self.walk_ty(ty);\n                 return;\n             }\n             _ => {}\n@@ -654,11 +568,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, sym::path);\n-                if attr::contains_name(&item.attrs, sym::warn_directory_ownership) {\n-                    let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n-                    let msg = \"cannot declare a new module at this location\";\n-                    self.lint_buffer.buffer_lint(lint, item.id, item.span, msg);\n-                }\n             }\n             ItemKind::Union(ref vdata, _) => {\n                 if let VariantData::Tuple(..) | VariantData::Unit(..) = vdata {\n@@ -731,7 +640,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if let Some(ref type_) = data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty_from_generic_args(type_));\n+                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n                 }\n             }\n         }\n@@ -849,8 +758,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffe\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n-        warning_period_57979_didnt_record_next_impl_trait: false,\n-        warning_period_57979_impl_trait_in_proj: false,\n         lint_buffer: lints,\n     };\n     visit::walk_crate(&mut validator, krate);"}, {"sha": "9c8425975119d29b0d35863d2dc8e5bd0f4f93e4", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1539,25 +1539,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 if is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err {\n                     partial_res\n                 } else {\n-                    // Add a temporary hack to smooth the transition to new struct ctor\n-                    // visibility rules. See #38932 for more details.\n-                    let mut res = None;\n-                    if let Res::Def(DefKind::Struct, def_id) = partial_res.base_res() {\n-                        if let Some((ctor_res, ctor_vis))\n-                                = self.r.struct_constructors.get(&def_id).cloned() {\n-                            if is_expected(ctor_res) &&\n-                               self.r.is_accessible_from(ctor_vis, self.parent_scope.module) {\n-                                let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n-                                self.r.lint_buffer.buffer_lint(lint, id, span,\n-                                    \"private struct constructors are not usable through \\\n-                                     re-exports in outer modules\",\n-                                );\n-                                res = Some(PartialRes::new(ctor_res));\n-                            }\n-                        }\n-                    }\n-\n-                    res.unwrap_or_else(|| report_errors(self, Some(partial_res.base_res())))\n+                    report_errors(self, Some(partial_res.base_res()))\n                 }\n             }\n             Some(partial_res) if source.defer_to_typeck() => {"}, {"sha": "083b11daaa1532b183143d218461502ed9f4724c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -16,18 +16,14 @@ use errors::{Applicability, pluralize};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n-use rustc::lint::builtin::{\n-    DUPLICATE_MACRO_EXPORTS,\n-    PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n-    UNUSED_IMPORTS,\n-};\n+use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::{self, PartialRes, Export};\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n \n-use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n+use syntax::ast::{Ident, Name, NodeId};\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{struct_span_err, unwrap_or};\n@@ -496,13 +492,13 @@ impl<'a> Resolver<'a> {\n                         if let (&NameBindingKind::Res(_, true), &NameBindingKind::Res(_, true)) =\n                                (&old_binding.kind, &binding.kind) {\n \n-                            this.lint_buffer.buffer_lint_with_diagnostic(\n-                                DUPLICATE_MACRO_EXPORTS,\n-                                CRATE_NODE_ID,\n+                            this.session.struct_span_err(\n                                 binding.span,\n                                 &format!(\"a macro named `{}` has already been exported\", key.ident),\n-                                BuiltinLintDiagnostics::DuplicatedMacroExports(\n-                                    key.ident, old_binding.span, binding.span));\n+                            )\n+                            .span_label(binding.span, format!(\"`{}` already exported\", key.ident))\n+                            .span_note(old_binding.span, \"previous macro export is now shadowed\")\n+                            .emit();\n \n                             resolution.binding = Some(binding);\n                         } else {"}, {"sha": "b54f4862f1220a14c06d992c42431b08bd095055", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -37,7 +37,7 @@ pub enum DirectoryOwnership {\n         relative: Option<ast::Ident>,\n     },\n     UnownedViaBlock,\n-    UnownedViaMod(bool /* legacy warnings? */),\n+    UnownedViaMod,\n }\n \n // A bunch of utility functions of the form `parse_<thing>_from_<source>`"}, {"sha": "3e5974c2eee770cfd1dc3ce479379007e9154b90", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -23,7 +23,6 @@ pub(super) struct ModulePath {\n pub(super) struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n-    warn: bool,\n }\n \n impl<'a> Parser<'a> {\n@@ -57,17 +56,10 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership, warn } =\n+                let ModulePathSuccess { path, directory_ownership } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, mut attrs) =\n+                let (module, attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n-                // Record that we fetched the mod from an external file.\n-                if warn {\n-                    let attr = attr::mk_attr_outer(\n-                        attr::mk_word_item(Ident::with_dummy_span(sym::warn_directory_ownership)));\n-                    attr::mark_known(&attr);\n-                    attrs.push(attr);\n-                }\n                 Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n                 let placeholder = ast::Mod {\n@@ -138,17 +130,16 @@ impl<'a> Parser<'a> {\n                     // `#[path]` included and contains a `mod foo;` declaration.\n                     // If you encounter this, it's your own darn fault :P\n                     Some(_) => DirectoryOwnership::Owned { relative: None },\n-                    _ => DirectoryOwnership::UnownedViaMod(true),\n+                    _ => DirectoryOwnership::UnownedViaMod,\n                 },\n                 path,\n-                warn: false,\n             });\n         }\n \n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n             DirectoryOwnership::UnownedViaBlock |\n-            DirectoryOwnership::UnownedViaMod(_) => None,\n+            DirectoryOwnership::UnownedViaMod => None,\n         };\n         let paths = Parser::default_submod_path(\n                         id, relative, &self.directory.path, self.sess.source_map());\n@@ -169,12 +160,7 @@ impl<'a> Parser<'a> {\n                 }\n                 Err(err)\n             }\n-            DirectoryOwnership::UnownedViaMod(warn) => {\n-                if warn {\n-                    if let Ok(result) = paths.result {\n-                        return Ok(ModulePathSuccess { warn: true, ..result });\n-                    }\n-                }\n+            DirectoryOwnership::UnownedViaMod => {\n                 let mut err = self.diagnostic().struct_span_err(id_sp,\n                     \"cannot declare a new module at this location\");\n                 if !id_sp.is_dummy() {\n@@ -252,14 +238,12 @@ impl<'a> Parser<'a> {\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: Some(id),\n                 },\n-                warn: false,\n             }),\n             (false, true) => Ok(ModulePathSuccess {\n                 path: secondary_path,\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: None,\n                 },\n-                warn: false,\n             }),\n             (false, false) => Err(Error::FileNotFoundForModule {\n                 mod_name: mod_name.clone(),"}, {"sha": "516b284cecd609cbe2158aa98a408247a7d87325", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1301,7 +1301,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         Some(_) => DirectoryOwnership::Owned {\n                             relative: Some(item.ident),\n                         },\n-                        None => DirectoryOwnership::UnownedViaMod(false),\n+                        None => DirectoryOwnership::UnownedViaMod,\n                     };\n                     path.pop();\n                     module.directory = path;"}, {"sha": "ae82ffd63838b9a4449eae1a45302e3f2aeae817", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -739,7 +739,6 @@ symbols! {\n         visible_private_types,\n         volatile,\n         warn,\n-        warn_directory_ownership,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}, {"sha": "80c602eb00afb61503e7dca2a5ef9408cd0d41bf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -15,7 +15,7 @@ mod inline {\n     //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] fn f() { }\n-    //~^ WARN attribute must be of the form\n+    //~^ ERROR attribute must be of the form\n     //~| WARN this was previously accepted\n \n     #[inline] struct S;"}, {"sha": "0987937192fe21f9ea681bfb12770f69ff9deedf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,10 +1,10 @@\n-warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n   --> $DIR/issue-43106-gating-of-inline.rs:17:5\n    |\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(ill_formed_attribute_input)]` on by default\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n@@ -47,6 +47,6 @@ error[E0518]: attribute should be applied to function or closure\n LL |     #[inline] impl S { }\n    |     ^^^^^^^^^ ---------- not a function or closure\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0518`."}, {"sha": "0daec3305c0aeb399d9e5fa52fe6116b6873e13f", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,42 +1,17 @@\n // rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n // properly check syntax hidden behind an associated type projection,\n // but it did catch *some cases*. This is checking that we continue to\n-// properly emit errors for those, even with the new\n-// future-incompatibility warnings.\n+// properly emit errors for those.\n //\n // issue-57979-nested-impl-trait-in-assoc-proj.rs shows the main case\n // that we were previously failing to catch.\n \n struct Deeper<T>(T);\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "6bebbc01f3d6f88142fa8fdec54941e366fac1a3", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,30 +1,12 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:18:59\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:14:48\n    |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n+LL | pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+   |                                       ---------^^^^^^^^-\n+   |                                       |        |\n+   |                                       |        nested `impl Trait` here\n+   |                                       outer `impl Trait`\n \n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:28:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:38:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0666`."}, {"sha": "c5ecd1caae1f946de6141ff9d3f21b69a1f5dcd1", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within a path\n // component in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ WARN `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ ERROR `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n+pub trait Bar { }\n+pub trait Quux<T> { type Assoc; }\n+pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+impl<T> Quux<T> for () { type Assoc = u32; }\n \n fn main() { }"}, {"sha": "f64545d83b8d6b7f1324db534020da9776944c8e", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.stderr", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,30 +1,8 @@\n-warning: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:20:52\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:8:48\n    |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:31:52\n-   |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+LL | pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a444d3dfddfa12a18cb650c2f788e318009fea3", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within an\n // `impl Trait` in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ WARN nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "8d3d4b5e20618b0eb4af44bbaa5f3b8a5b0a6442", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,36 +1,12 @@\n-warning: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:21:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:32:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:9:41\n+   |\n+LL | pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                ---------^^^^^^^^-\n+   |                                |        |\n+   |                                |        nested `impl Trait` here\n+   |                                outer `impl Trait`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0666`."}, {"sha": "15d072957cbd8292639e7abd96225a7a50ccf386", "filename": "src/test/ui/issues/auxiliary/issue-38715-modern.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715-modern.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,7 +0,0 @@\n-#![allow(duplicate_macro_exports)]\n-\n-#[macro_export]\n-macro_rules! foo_modern { ($i:ident) => {} }\n-\n-#[macro_export]\n-macro_rules! foo_modern { () => {} }"}, {"sha": "5c15073f5a5e687a65621ddbb9d7aaea5437f0e8", "filename": "src/test/ui/issues/auxiliary/issue-38715.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-38715.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,7 +0,0 @@\n-#![allow(duplicate_macro_exports)]\n-\n-#[macro_export]\n-macro_rules! foo { ($i:ident) => {} }\n-\n-#[macro_export]\n-macro_rules! foo { () => {} }"}, {"sha": "d80eefc41bf53cd3bba4cf0a9ba46eec8b024f80", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,10 +1,7 @@\n-#![allow(safe_extern_statics, warnings)]\n-\n extern {\n     pub static symbol: u32;\n }\n static CRASH: u32 = symbol;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "f9cdbe452df9c4b5f09774dd4dbf95a5467a0b14", "filename": "src/test/ui/issues/issue-14227.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-14227.rs:6:21\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-14227.rs:4:21\n    |\n LL | static CRASH: u32 = symbol;\n-   |                     ^^^^^^ tried to read from foreign (extern) static\n+   |                     ^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "54d9a732912c77b80ac6ed0bdb59027c6fcdd337", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,5 +1,3 @@\n-#![allow(safe_extern_statics)]\n-\n mod Y {\n     pub type X = usize;\n     extern {\n@@ -13,5 +11,6 @@ mod Y {\n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n //~| ERROR E0015\n+//~| ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "5e1f95a989ee0fbf7cc812ecdf6e360a019a76b6", "filename": "src/test/ui/issues/issue-16538.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,19 +1,27 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:13:27\n+  --> $DIR/issue-16538.rs:11:27\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:13:1\n+  --> $DIR/issue-16538.rs:11:1\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `*const usize`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:11:34\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                                  ^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n+Some errors have detailed explanations: E0015, E0133, E0277.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "bb48508a4a438d5f51eb853447411932b8babf62", "filename": "src/test/ui/issues/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,11 +1,8 @@\n-#![allow(safe_extern_statics)]\n-\n extern {\n     static error_message_count: u32;\n }\n \n pub static BAZ: u32 = *&error_message_count;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "d7dad99215204f0f02985133fa3809a59dd297d3", "filename": "src/test/ui/issues/issue-28324.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-28324.rs:7:23\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28324.rs:5:24\n    |\n LL | pub static BAZ: u32 = *&error_message_count;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^ tried to read from foreign (extern) static\n+   |                        ^^^^^^^^^^^^^^^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "e713a64d3f5a63fdd94ba260a5cff679bddee299", "filename": "src/test/ui/issues/issue-32995-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,18 +1,13 @@\n-#![allow(unused)]\n-\n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     { fn f() -> impl ::std::marker()::Send { } }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-//~| WARN previously accepted"}, {"sha": "6c2d772a23332cf48ad7a0beeb7481a2f486c942", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,30 +1,21 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:22\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:2:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                      ^^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:5:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:12:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^^^^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "0d07a76939f2a214aa4f44d942bd4afc7f763660", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,33 +1,24 @@\n-#![allow(unused)]\n-\n fn main() {\n     let x: usize() = 1;\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }"}, {"sha": "b868011b99b2443672e3a7104530a09649766d24", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 22, "deletions": 43, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,66 +1,45 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:12\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:2:12\n    |\n LL |     let x: usize() = 1;\n-   |            ^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |            ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:19\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:5:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                   ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                   ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:20\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:8:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                    ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                    ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:25\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:11:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                         ^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                         ^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:14:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:35\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:17:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                   ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                                   ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:22:13\n    |\n LL |     let d : X() = Default::default();\n-   |             ^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "e3c3a027f3cd0cd3829e61b4d955b1afbb99dfa1", "filename": "src/test/ui/issues/issue-38715-rpass.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715-rpass.rs?ref=76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-// aux-build:issue-38715.rs\n-// aux-build:issue-38715-modern.rs\n-\n-// Test that `#[macro_export] macro_rules!` shadow earlier `#[macro_export] macro_rules!`\n-\n-#[macro_use]\n-extern crate issue_38715;\n-#[macro_use]\n-extern crate issue_38715_modern;\n-\n-fn main() {\n-    foo!();\n-    foo_modern!();\n-}"}, {"sha": "7e9defab588644cf31a6bcaf65e5fa07fb06a037", "filename": "src/test/ui/issues/issue-38715.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -3,6 +3,5 @@ macro_rules! foo { ($i:ident) => {} }\n \n #[macro_export]\n macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n-                              //~| WARN this was previously accepted\n \n fn main() {}"}, {"sha": "d7c4f88ff50792bd90e7988d0b20f67e2361d6ef", "filename": "src/test/ui/issues/issue-38715.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -4,9 +4,6 @@ error: a macro named `foo` has already been exported\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n    |\n-   = note: `#[deny(duplicate_macro_exports)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #35896 <https://github.com/rust-lang/rust/issues/35896>\n note: previous macro export is now shadowed\n   --> $DIR/issue-38715.rs:2:1\n    |"}, {"sha": "ac1444bbaef4ed6ce945c04533535c330aadb66f", "filename": "src/test/ui/malformed/malformed-regressions.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,18 +1,12 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+#[doc] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[ignore()] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[inline = \"\"] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[link] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n+#[link = \"\"] //~ ERROR attribute must be of the form\n+//~^ WARN this was previously accepted\n \n-#[doc]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[ignore()]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[inline = \"\"]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[link]\n-//~^WARN attribute must be of the form\n-//~| WARN this was previously accepted\n-#[link = \"\"]\n-//~^ WARN attribute must be of the form\n-//~| WARN this was previously accepted\n fn main() {}"}, {"sha": "b14f99be50c2ddfdb7a43f6bb87313ab57a47cdb", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,46 +1,48 @@\n-warning: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"string\"]`\n-  --> $DIR/malformed-regressions.rs:3:1\n+error: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"string\"]`\n+  --> $DIR/malformed-regressions.rs:1:1\n    |\n LL | #[doc]\n    | ^^^^^^\n    |\n-   = note: `#[warn(ill_formed_attribute_input)]` on by default\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[ignore]` or `#[ignore = \"reason\"]`\n-  --> $DIR/malformed-regressions.rs:6:1\n+error: attribute must be of the form `#[ignore]` or `#[ignore = \"reason\"]`\n+  --> $DIR/malformed-regressions.rs:3:1\n    |\n LL | #[ignore()]\n    | ^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n-  --> $DIR/malformed-regressions.rs:9:1\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/malformed-regressions.rs:5:1\n    |\n LL | #[inline = \"\"]\n    | ^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n-  --> $DIR/malformed-regressions.rs:12:1\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:7:1\n    |\n LL | #[link]\n    | ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n-  --> $DIR/malformed-regressions.rs:15:1\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:9:1\n    |\n LL | #[link = \"\"]\n    | ^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "5732b6446fea8e1b43b0d3af268ac576a738c292", "filename": "src/test/ui/privacy/legacy-ctor-visibility.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,7 +1,3 @@\n-// ignore-tidy-linelength\n-\n-#![allow(unused)]\n-\n use m::S;\n \n mod m {\n@@ -11,8 +7,7 @@ mod m {\n         use S;\n         fn f() {\n             S(10);\n-            //~^ ERROR private struct constructors are not usable through re-exports in outer modules\n-            //~| WARN this was previously accepted\n+            //~^ ERROR expected function, tuple struct or tuple variant, found struct `S`\n         }\n     }\n }"}, {"sha": "74a1f1ceeffb4c7c3474546dd89f2da2ea4c970d", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,12 +1,13 @@\n-error: private struct constructors are not usable through re-exports in outer modules\n-  --> $DIR/legacy-ctor-visibility.rs:13:13\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `S`\n+  --> $DIR/legacy-ctor-visibility.rs:9:13\n    |\n-LL |             S(10);\n-   |             ^\n-   |\n-   = note: `#[deny(legacy_constructor_visibility)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n+LL | /         fn f() {\n+LL | |             S(10);\n+   | |             ^ help: a function with a similar name exists: `f`\n+LL | |\n+LL | |         }\n+   | |_________- similarly named function `f` defined here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "0535a078d2c31cb9c3ca006bf03c1aaeeafad5ef", "filename": "src/test/ui/safe-extern-statics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,7 +1,5 @@\n // aux-build:extern-statics.rs\n \n-#![allow(unused)]\n-\n extern crate extern_statics;\n use extern_statics::*;\n \n@@ -11,11 +9,7 @@ extern {\n \n fn main() {\n     let a = A; //~ ERROR use of extern static is unsafe\n-               //~^ WARN this was previously accepted by the compiler\n     let ra = &A; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xa = XA; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xra = &XA; //~ ERROR use of extern static is unsafe\n-                   //~^ WARN this was previously accepted by the compiler\n }"}, {"sha": "b42572ea3eeb52b39dbb55bd128c078f6db5d411", "filename": "src/test/ui/safe-extern-statics.stderr", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,43 +1,35 @@\n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:13:13\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:11:13\n    |\n LL |     let a = A;\n-   |             ^\n+   |             ^ use of extern static\n    |\n-   = note: `#[deny(safe_extern_statics)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:15:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:12:14\n    |\n LL |     let ra = &A;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:17:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:13:14\n    |\n LL |     let xa = XA;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:19:15\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:14:15\n    |\n LL |     let xra = &XA;\n-   |               ^^^\n+   |               ^^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "94c72a31e5e6c267fe2fb33b01aad852df626658", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -1,9 +1,9 @@\n pub fn foo(num: i32) -> i32 {\n     let foo: i32::from_be(num);\n     //~^ ERROR expected type, found local variable `num`\n+    //~| ERROR type arguments are not allowed for this type\n     //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| ERROR ambiguous associated type\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n     foo\n }\n "}, {"sha": "5353b3a75b24931869eb1766c3f78ab3380996a0", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -6,23 +6,28 @@ LL |     let foo: i32::from_be(num);\n    |            |\n    |            help: use `=` if you meant to assign\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n    |                   ^^^^^^^^^^^^\n+   |                   |\n+   |                   only `Fn` traits may use parentheses\n+   |                   help: use angle brackets instead: `from_be<num>`\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n    |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+LL |     let foo: i32::from_be(num);\n+   |                           ^^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n    |\n LL |     let foo: i32::from_be(num);\n    |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0223, E0573.\n-For more information about an error, try `rustc --explain E0223`.\n+Some errors have detailed explanations: E0109, E0214, E0223, E0573.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "c0d39c59014eca7d094d19ad13c876f2e9a0abc0", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -8,7 +8,6 @@ impl Reactor {\n         //~^ ERROR cannot find value `input_cells` in this scope\n         //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n         //~| ERROR wrong number of type arguments: expected 1, found 0\n-        //~| WARNING this was previously accepted by the compiler but is being phased out\n     }\n }\n "}, {"sha": "7895cf77fc0bf0cacf93bffd8f45746b7aa12145", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ab50e40063a5f11aec148f59ad4d32e2a13fd70/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=7ab50e40063a5f11aec148f59ad4d32e2a13fd70", "patch": "@@ -4,15 +4,11 @@ error[E0425]: cannot find value `input_cells` in this scope\n LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-34255-1.rs:7:27\n    |\n LL |         input_cells: Vec::new()\n-   |                           ^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                           ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-34255-1.rs:7:22\n@@ -22,5 +18,5 @@ LL |         input_cells: Vec::new()\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0425.\n+Some errors have detailed explanations: E0107, E0214, E0425.\n For more information about an error, try `rustc --explain E0107`."}]}