{"sha": "d115944809467bd9011d769abbdfd326f8a9d619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTU5NDQ4MDk0NjdiZDkwMTFkNzY5YWJiZGZkMzI2ZjhhOWQ2MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T01:19:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T01:19:56Z"}, "message": "Remove expn_info box typedef from codemap", "tree": {"sha": "0c41ec76d84f3fdcc75cfb440df4ec6faca49195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c41ec76d84f3fdcc75cfb440df4ec6faca49195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d115944809467bd9011d769abbdfd326f8a9d619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d115944809467bd9011d769abbdfd326f8a9d619", "html_url": "https://github.com/rust-lang/rust/commit/d115944809467bd9011d769abbdfd326f8a9d619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d115944809467bd9011d769abbdfd326f8a9d619/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a825bda0a6098d3d8982784f3dffb908df5e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a825bda0a6098d3d8982784f3dffb908df5e40", "html_url": "https://github.com/rust-lang/rust/commit/18a825bda0a6098d3d8982784f3dffb908df5e40"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "c4e922628a230c14bab7767b4fa5af7c55ae61c2", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d115944809467bd9011d769abbdfd326f8a9d619/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d115944809467bd9011d769abbdfd326f8a9d619/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d115944809467bd9011d769abbdfd326f8a9d619", "patch": "@@ -39,7 +39,11 @@ export loc;\n export get_filemap;\n export new_codemap;\n \n-struct span {lo: uint, hi: uint, expn_info: expn_info}\n+struct span {\n+    lo: uint,\n+    hi: uint,\n+    expn_info: Option<@expn_info>\n+}\n \n impl span : cmp::Eq {\n     pure fn eq(other: &span) -> bool {\n@@ -59,11 +63,10 @@ impl<D: Deserializer> span: Deserializable<D> {\n     }\n }\n \n-enum expn_info_ {\n+enum expn_info {\n     expanded_from({call_site: span,\n                    callie: {name: ~str, span: Option<span>}})\n }\n-type expn_info = Option<@expn_info_>;\n \n type filename = ~str;\n "}, {"sha": "127e4a13e27abaebef002c314479738165ee9b3e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d115944809467bd9011d769abbdfd326f8a9d619/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d115944809467bd9011d769abbdfd326f8a9d619/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d115944809467bd9011d769abbdfd326f8a9d619", "patch": "@@ -129,11 +129,11 @@ trait ext_ctxt {\n     fn parse_sess() -> parse::parse_sess;\n     fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n-    fn backtrace() -> expn_info;\n+    fn backtrace() -> Option<@expn_info>;\n     fn mod_push(mod_name: ast::ident);\n     fn mod_pop();\n     fn mod_path() -> ~[ast::ident];\n-    fn bt_push(ei: codemap::expn_info_);\n+    fn bt_push(ei: codemap::expn_info);\n     fn bt_pop();\n     fn span_fatal(sp: span, msg: &str) -> !;\n     fn span_err(sp: span, msg: &str);\n@@ -153,19 +153,19 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n            cfg: ast::crate_cfg) -> ext_ctxt {\n     type ctxt_repr = {parse_sess: parse::parse_sess,\n                       cfg: ast::crate_cfg,\n-                      mut backtrace: expn_info,\n+                      mut backtrace: Option<@expn_info>,\n                       mut mod_path: ~[ast::ident],\n                       mut trace_mac: bool};\n     impl ctxt_repr: ext_ctxt {\n         fn codemap() -> @CodeMap { self.parse_sess.cm }\n         fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }\n-        fn backtrace() -> expn_info { self.backtrace }\n+        fn backtrace() -> Option<@expn_info> { self.backtrace }\n         fn mod_push(i: ast::ident) { self.mod_path.push(i); }\n         fn mod_pop() { self.mod_path.pop(); }\n         fn mod_path() -> ~[ast::ident] { return self.mod_path; }\n-        fn bt_push(ei: codemap::expn_info_) {\n+        fn bt_push(ei: codemap::expn_info) {\n             match ei {\n               expanded_from({call_site: cs, callie: callie}) => {\n                 self.backtrace ="}]}