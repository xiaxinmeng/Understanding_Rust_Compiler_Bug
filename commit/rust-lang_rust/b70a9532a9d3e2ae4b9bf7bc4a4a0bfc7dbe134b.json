{"sha": "b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MGE5NTMyYTlkM2UyYWU0YjliZjdiYzRhNGEwYmZjN2RiZTEzNGI=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2019-02-20T14:11:22Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2019-02-27T16:07:35Z"}, "message": "Replace `s` with `self` in docs for str methods taking self.", "tree": {"sha": "775893a41fb87cad4baaa9a0f6cfacc3d58c3944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/775893a41fb87cad4baaa9a0f6cfacc3d58c3944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b", "html_url": "https://github.com/rust-lang/rust/commit/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485537074062d6310178101b198606573527723c", "url": "https://api.github.com/repos/rust-lang/rust/commits/485537074062d6310178101b198606573527723c", "html_url": "https://github.com/rust-lang/rust/commit/485537074062d6310178101b198606573527723c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "53334adadb856d83a4888393c5fc00a5663a0a0d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b70a9532a9d3e2ae4b9bf7bc4a4a0bfc7dbe134b", "patch": "@@ -3965,7 +3965,7 @@ impl str {\n         me.make_ascii_lowercase()\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_debug`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n     ///\n     /// Note: only extended grapheme codepoints that begin the string will be\n     /// escaped.\n@@ -4013,7 +4013,7 @@ impl str {\n         }\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_default`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_default`].\n     ///\n     /// [`char::escape_default`]: ../std/primitive.char.html#method.escape_default\n     ///\n@@ -4051,7 +4051,7 @@ impl str {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_unicode`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n     ///\n     /// [`char::escape_unicode`]: ../std/primitive.char.html#method.escape_unicode\n     ///"}]}