{"sha": "695bedbe270cbae05d19b7837a95d12d7bd9637a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWJlZGJlMjcwY2JhZTA1ZDE5Yjc4MzdhOTVkMTJkN2JkOTYzN2E=", "commit": {"author": {"name": "Alexey Zabelin", "email": "hello@alexeyzabelin.com", "date": "2017-08-24T22:21:46Z"}, "committer": {"name": "Alexey Zabelin", "email": "hello@alexeyzabelin.com", "date": "2017-08-25T00:42:50Z"}, "message": "Rename `match_path_old` to `match_path`\n\nThe old `match_path` was renamed to `match_qpath`.\n\nAs per #1983.", "tree": {"sha": "7f9ef64e2754d9e5347c2cdd2a4d8f199609f3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9ef64e2754d9e5347c2cdd2a4d8f199609f3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695bedbe270cbae05d19b7837a95d12d7bd9637a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEyGBf8fbcGdY6ClTCOhaZhUeDJOkFAlmfcooACgkQOhaZhUeD\nJOndLAf+IA0QzSj/YTP6fmySHScPxgqv2qwg6+JPO7R9MbkJe0K5GI/M+QhZdKnS\nKbPzAGK7la+UaU7f32B5WTxJiBs0loZgSAseFgj3zrDwYteZbjXfo+xsbOl85AcL\ndrmdfjBYZqD/cN57ij5H5Xshi3GwXk0qjVTi/yc1xkxkZIPahZrcH93QBWLLylmI\n7AVY2ebsbQ9eqvMP77R10TRh7Ot5bnkTl8acDSCodznBimuCk1V15UF6k23oKcD+\nHIsYcAalIn4xRGYJBgfxLcDRAD29PhT4+tvH0r7i29FrSXMmhE34OFQZU3VkBkst\n3QHEKDwErzCqfuvInUfamZ0iigDsfQ==\n=+kGY\n-----END PGP SIGNATURE-----", "payload": "tree 7f9ef64e2754d9e5347c2cdd2a4d8f199609f3d9\nparent ab362031ed2a4897b6010f2004472d1860ba3872\nauthor Alexey Zabelin <hello@alexeyzabelin.com> 1503613306 -0400\ncommitter Alexey Zabelin <hello@alexeyzabelin.com> 1503621770 -0400\n\nRename `match_path_old` to `match_path`\n\nThe old `match_path` was renamed to `match_qpath`.\n\nAs per #1983.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695bedbe270cbae05d19b7837a95d12d7bd9637a", "html_url": "https://github.com/rust-lang/rust/commit/695bedbe270cbae05d19b7837a95d12d7bd9637a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695bedbe270cbae05d19b7837a95d12d7bd9637a/comments", "author": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab362031ed2a4897b6010f2004472d1860ba3872", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab362031ed2a4897b6010f2004472d1860ba3872", "html_url": "https://github.com/rust-lang/rust/commit/ab362031ed2a4897b6010f2004472d1860ba3872"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "36576365eac8b6cb2dcd0edd9fe07fcdd3aeadf0", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::{self, Ty};\n use rustc::hir::*;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{is_automatically_derived, span_lint_and_then, match_path_old, is_copy};\n+use utils::{is_automatically_derived, span_lint_and_then, match_path, is_copy};\n \n /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n /// explicitly.\n@@ -92,7 +92,7 @@ fn check_hash_peq<'a, 'tcx>(\n     hash_is_automatically_derived: bool,\n ) {\n     if_let_chain! {[\n-        match_path_old(&trait_ref.path, &paths::HASH),\n+        match_path(&trait_ref.path, &paths::HASH),\n         let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()\n     ], {\n         // Look for the PartialEq implementations for `ty`\n@@ -132,7 +132,7 @@ fn check_hash_peq<'a, 'tcx>(\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref: &TraitRef, ty: Ty<'tcx>) {\n-    if match_path_old(&trait_ref.path, &paths::CLONE_TRAIT) {\n+    if match_path(&trait_ref.path, &paths::CLONE_TRAIT) {\n         if !is_copy(cx, ty) {\n             return;\n         }"}, {"sha": "0e1dd6449ab4114fac43c0d0129bb325d1a037f8", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::codemap::Span;\n-use utils::{paths, span_lint_and_then, match_path, snippet};\n+use utils::{paths, span_lint_and_then, match_qpath, snippet};\n \n /// **What it does:*** Lint for redundant pattern matching over `Result` or\n /// `Option`\n@@ -53,18 +53,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n                 let good_method = match arms[0].pats[0].node {\n                     PatKind::TupleStruct(ref path, ref pats, _) if pats.len() == 1 && pats[0].node == PatKind::Wild => {\n-                        if match_path(path, &paths::RESULT_OK) {\n+                        if match_qpath(path, &paths::RESULT_OK) {\n                             \"is_ok()\"\n-                        } else if match_path(path, &paths::RESULT_ERR) {\n+                        } else if match_qpath(path, &paths::RESULT_ERR) {\n                             \"is_err()\"\n-                        } else if match_path(path, &paths::OPTION_SOME) {\n+                        } else if match_qpath(path, &paths::OPTION_SOME) {\n                             \"is_some()\"\n                         } else {\n                             return;\n                         }\n                     },\n \n-                    PatKind::Path(ref path) if match_path(path, &paths::OPTION_NONE) => \"is_none()\",\n+                    PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n \n                     _ => return,\n                 };"}, {"sha": "fcb84e90eb603a1b3e3017cf39697074d5aad2e1", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::hir::*;\n use rustc::ty;\n use syntax::ast;\n-use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet,\n+use utils::{is_adjusted, match_qpath, match_trait_method, match_type, remove_blocks, paths, snippet,\n             span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n \n /// **What it does:** Checks for mapping `clone()` over an iterator.\n@@ -74,7 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         }}\n                     },\n                     ExprPath(ref path) => {\n-                        if match_path(path, &paths::CLONE) {\n+                        if match_qpath(path, &paths::CLONE) {\n                             let type_name = get_type_name(cx, expr, &args[0]).unwrap_or(\"_\");\n                             span_help_and_lint(\n                                 cx,"}, {"sha": "1811142ae2775ef9ab5cb84bdb5eb6cf2745136f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -8,10 +8,10 @@ use rustc_const_eval::ConstContext;\n use std::borrow::Cow;\n use std::fmt;\n use syntax::codemap::Span;\n-use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, match_path, match_trait_method,\n+use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, match_qpath, match_trait_method,\n             match_type, method_chain_args, return_ty, same_tys, snippet, span_lint, span_lint_and_then,\n             span_lint_and_sugg, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, last_path_segment,\n-            single_segment_path, match_def_path, is_self, is_self_ty, iter_input_pats, match_path_old};\n+            single_segment_path, match_def_path, is_self, is_self_ty, iter_input_pats, match_path};\n use utils::paths;\n use utils::sugg;\n \n@@ -1462,7 +1462,7 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n                 param.bounds.iter().any(|bound| {\n                     if let hir::TyParamBound::TraitTyParamBound(ref ptr, ..) = *bound {\n                         let path = &ptr.trait_ref.path;\n-                        match_path_old(path, name) &&\n+                        match_path(path, name) &&\n                             path.segments.last().map_or(false, |s| {\n                                 if let hir::PathParameters::AngleBracketedParameters(ref data) = s.parameters {\n                                     data.types.len() == 1 &&\n@@ -1540,7 +1540,7 @@ impl OutType {\n \n fn is_bool(ty: &hir::Ty) -> bool {\n     if let hir::TyPath(ref p) = ty.node {\n-        match_path(p, &[\"bool\"])\n+        match_qpath(p, &[\"bool\"])\n     } else {\n         false\n     }"}, {"sha": "43c539a7a6515bd71cde3deaa6e903ecff8c7c37", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, ExpnFormat};\n-use utils::{get_item_name, get_parent_expr, implements_trait, in_macro, is_integer_literal, match_path, snippet,\n+use utils::{get_item_name, get_parent_expr, implements_trait, in_macro, is_integer_literal, match_qpath, snippet,\n             span_lint, span_lint_and_then, walk_ptrs_ty, last_path_segment, iter_input_pats, in_constant,\n             match_trait_method, paths};\n use utils::sugg::Sugg;\n@@ -486,7 +486,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr) {\n         },\n         ExprCall(ref path, ref v) if v.len() == 1 => {\n             if let ExprPath(ref path) = path.node {\n-                if match_path(path, &[\"String\", \"from_str\"]) || match_path(path, &[\"String\", \"from\"]) {\n+                if match_qpath(path, &[\"String\", \"from_str\"]) || match_qpath(path, &[\"String\", \"from\"]) {\n                     (cx.tables.expr_ty_adjusted(&v[0]), snippet(cx, v[0].span, \"..\"))\n                 } else {\n                     return;"}, {"sha": "982b46e20d3d0ca286cbbdc46b6a6f4e77c7da3a", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::*;\n use rustc::hir::map::Node::{NodeItem, NodeImplItem};\n use rustc::lint::*;\n use utils::paths;\n-use utils::{is_expn_of, match_def_path, resolve_node, span_lint, match_path_old};\n+use utils::{is_expn_of, match_def_path, resolve_node, span_lint, match_path};\n use format::get_argument_fmtstr_parts;\n \n /// **What it does:** This lint warns when you using `print!()` with a format\n@@ -144,7 +144,7 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n         // `Debug` impl\n         if let Some(NodeItem(item)) = map.find(map.get_parent(item.id)) {\n             if let ItemImpl(_, _, _, _, Some(ref tr), _, _) = item.node {\n-                return match_path_old(&tr.path, &[\"Debug\"]);\n+                return match_path(&tr.path, &[\"Debug\"]);\n             }\n         }\n     }"}, {"sha": "a21142a257d7ec7a676e0d3184d0ca865e4fc2c4", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use syntax_pos::MultiSpan;\n-use utils::{match_path, match_type, paths, span_lint, span_lint_and_then};\n+use utils::{match_qpath, match_type, paths, span_lint, span_lint_and_then};\n \n /// **What it does:** This lint checks for function arguments of type `&String`\n /// or `&Vec` unless\n@@ -190,7 +190,7 @@ fn is_null_path(expr: &Expr) -> bool {\n     if let ExprCall(ref pathexp, ref args) = expr.node {\n         if args.is_empty() {\n             if let ExprPath(ref path) = pathexp.node {\n-                return match_path(path, &paths::PTR_NULL) || match_path(path, &paths::PTR_NULL_MUT);\n+                return match_qpath(path, &paths::PTR_NULL) || match_qpath(path, &paths::PTR_NULL_MUT);\n             }\n         }\n     }"}, {"sha": "1ac775ce7c19730213c56581d0b799fa25798a45", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir;\n-use utils::{span_lint, match_path, match_trait_method, is_try, paths};\n+use utils::{span_lint, match_qpath, match_trait_method, is_try, paths};\n \n /// **What it does:** Checks for unused written/read amount.\n ///\n@@ -49,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n             hir::ExprMatch(ref res, _, _) if is_try(expr).is_some() => {\n                 if let hir::ExprCall(ref func, ref args) = res.node {\n                     if let hir::ExprPath(ref path) = func.node {\n-                        if match_path(path, &paths::TRY_INTO_RESULT) && args.len() == 1 {\n+                        if match_qpath(path, &paths::TRY_INTO_RESULT) && args.len() == 1 {\n                             check_method_call(cx, &args[0], expr);\n                         }\n                     }"}, {"sha": "ba8f0022b32b237f143b68b04ccad685fa15c1c5", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -428,7 +428,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n \n     fn visit_qpath(&mut self, path: &QPath, _: NodeId, _: Span) {\n-        print!(\"    match_path({}, &[\", self.current);\n+        print!(\"    match_qpath({}, &[\", self.current);\n         print_path(path, &mut true);\n         println!(\"]),\");\n     }"}, {"sha": "aa57e12bca88e9be517bf919ff03214b3f7f682a", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -6,7 +6,7 @@\n use rustc::hir;\n use rustc::lint::LateContext;\n use syntax::ast;\n-use utils::{is_expn_of, match_path, match_def_path, resolve_node, paths};\n+use utils::{is_expn_of, match_qpath, match_def_path, resolve_node, paths};\n \n /// Convert a hir binary operator to the corresponding `ast` type.\n pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {\n@@ -63,7 +63,7 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n \n     match expr.node {\n         hir::ExprPath(ref path) => {\n-            if match_path(path, &paths::RANGE_FULL_STD) || match_path(path, &paths::RANGE_FULL) {\n+            if match_qpath(path, &paths::RANGE_FULL_STD) || match_qpath(path, &paths::RANGE_FULL) {\n                 Some(Range {\n                     start: None,\n                     end: None,\n@@ -74,31 +74,31 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n             }\n         },\n         hir::ExprStruct(ref path, ref fields, None) => {\n-            if match_path(path, &paths::RANGE_FROM_STD) || match_path(path, &paths::RANGE_FROM) {\n+            if match_qpath(path, &paths::RANGE_FROM_STD) || match_qpath(path, &paths::RANGE_FROM) {\n                 Some(Range {\n                     start: get_field(\"start\", fields),\n                     end: None,\n                     limits: ast::RangeLimits::HalfOpen,\n                 })\n-            } else if match_path(path, &paths::RANGE_INCLUSIVE_STD) || match_path(path, &paths::RANGE_INCLUSIVE) {\n+            } else if match_qpath(path, &paths::RANGE_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_INCLUSIVE) {\n                 Some(Range {\n                     start: get_field(\"start\", fields),\n                     end: get_field(\"end\", fields),\n                     limits: ast::RangeLimits::Closed,\n                 })\n-            } else if match_path(path, &paths::RANGE_STD) || match_path(path, &paths::RANGE) {\n+            } else if match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE) {\n                 Some(Range {\n                     start: get_field(\"start\", fields),\n                     end: get_field(\"end\", fields),\n                     limits: ast::RangeLimits::HalfOpen,\n                 })\n-            } else if match_path(path, &paths::RANGE_TO_INCLUSIVE_STD) || match_path(path, &paths::RANGE_TO_INCLUSIVE) {\n+            } else if match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_TO_INCLUSIVE) {\n                 Some(Range {\n                     start: None,\n                     end: get_field(\"end\", fields),\n                     limits: ast::RangeLimits::Closed,\n                 })\n-            } else if match_path(path, &paths::RANGE_TO_STD) || match_path(path, &paths::RANGE_TO) {\n+            } else if match_qpath(path, &paths::RANGE_TO_STD) || match_qpath(path, &paths::RANGE_TO) {\n                 Some(Range {\n                     start: None,\n                     end: get_field(\"end\", fields),"}, {"sha": "d83e094212a21792f989a2547959651e1c495aab", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use rustc::hir::intravisit::{Visitor, walk_expr, NestedVisitorMap};\n-use utils::{paths, match_path, span_lint};\n+use utils::{paths, match_qpath, span_lint};\n use syntax::symbol::InternedString;\n use syntax::ast::{Name, NodeId, ItemKind, Crate as AstCrate};\n use syntax::codemap::Span;\n@@ -167,7 +167,7 @@ fn is_lint_ref_type(ty: &Ty) -> bool {\n             return false;\n         }\n         if let TyPath(ref path) = inner.node {\n-            return match_path(path, &paths::LINT);\n+            return match_qpath(path, &paths::LINT);\n         }\n     }\n     false\n@@ -176,7 +176,7 @@ fn is_lint_ref_type(ty: &Ty) -> bool {\n \n fn is_lint_array_type(ty: &Ty) -> bool {\n     if let TyPath(ref path) = ty.node {\n-        match_path(path, &paths::LINT_ARRAY)\n+        match_qpath(path, &paths::LINT_ARRAY)\n     } else {\n         false\n     }"}, {"sha": "c08f7d4254fe9f5c51e0ddd3e437fc95b80da7d7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -240,15 +240,15 @@ pub fn single_segment_path(path: &QPath) -> Option<&PathSegment> {\n ///\n /// # Examples\n /// ```rust,ignore\n-/// match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n+/// match_qpath(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n-pub fn match_path(path: &QPath, segments: &[&str]) -> bool {\n+pub fn match_qpath(path: &QPath, segments: &[&str]) -> bool {\n     match *path {\n-        QPath::Resolved(_, ref path) => match_path_old(path, segments),\n+        QPath::Resolved(_, ref path) => match_path(path, segments),\n         QPath::TypeRelative(ref ty, ref segment) => {\n             match ty.node {\n                 TyPath(ref inner_path) => {\n-                    !segments.is_empty() && match_path(inner_path, &segments[..(segments.len() - 1)]) &&\n+                    !segments.is_empty() && match_qpath(inner_path, &segments[..(segments.len() - 1)]) &&\n                         segment.name == segments[segments.len() - 1]\n                 },\n                 _ => false,\n@@ -257,7 +257,7 @@ pub fn match_path(path: &QPath, segments: &[&str]) -> bool {\n     }\n }\n \n-pub fn match_path_old(path: &Path, segments: &[&str]) -> bool {\n+pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n     path.segments.iter().rev().zip(segments.iter().rev()).all(\n         |(a, b)| a.name == *b,\n     )\n@@ -267,7 +267,7 @@ pub fn match_path_old(path: &Path, segments: &[&str]) -> bool {\n ///\n /// # Examples\n /// ```rust,ignore\n-/// match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n+/// match_qpath(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n     path.segments.iter().rev().zip(segments.iter().rev()).all(\n@@ -988,7 +988,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n     fn is_ok(arm: &Arm) -> bool {\n         if_let_chain! {[\n             let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node,\n-            match_path(path, &paths::RESULT_OK[1..]),\n+            match_qpath(path, &paths::RESULT_OK[1..]),\n             let PatKind::Binding(_, defid, _, None) = pat[0].node,\n             let ExprPath(QPath::Resolved(None, ref path)) = arm.body.node,\n             path.def.def_id() == defid,\n@@ -1000,7 +1000,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n \n     fn is_err(arm: &Arm) -> bool {\n         if let PatKind::TupleStruct(ref path, _, _) = arm.pats[0].node {\n-            match_path(path, &paths::RESULT_ERR[1..])\n+            match_qpath(path, &paths::RESULT_ERR[1..])\n         } else {\n             false\n         }"}, {"sha": "52ec01260bebf9f21a5134a88b6d5da278d2b825", "filename": "tests/ui/trailing_zeros.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695bedbe270cbae05d19b7837a95d12d7bd9637a/tests%2Fui%2Ftrailing_zeros.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/695bedbe270cbae05d19b7837a95d12d7bd9637a/tests%2Fui%2Ftrailing_zeros.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.stdout?ref=695bedbe270cbae05d19b7837a95d12d7bd9637a", "patch": "@@ -4,7 +4,7 @@ if_let_chain!{[\n     let Expr_::ExprBinary(ref op1, ref left1, ref right1) = left.node,\n     BinOp_::BiBitAnd == op1.node,\n     let Expr_::ExprPath(ref path) = left1.node,\n-    match_path(path, &[\"x\"]),\n+    match_qpath(path, &[\"x\"]),\n     let Expr_::ExprLit(ref lit) = right1.node,\n     let LitKind::Int(15, _) = lit.node,\n     let Expr_::ExprLit(ref lit1) = right.node,"}]}