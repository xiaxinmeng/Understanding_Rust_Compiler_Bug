{"sha": "54eafc009d1595a04862b242fb6825f9e7b51799", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWFmYzAwOWQxNTk1YTA0ODYyYjI0MmZiNjgyNWY5ZTdiNTE3OTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T21:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T21:46:45Z"}, "message": "auto merge of #6639 : osaut/rust/arc-clean, r=brson\n\n* Add ARC::get method and implements the function from it.\r\n* Add an example showing a simple use of ARC.\r\n\r\nUpdate PR #6622 to avoid git noise.\r\n\r\nI will remove the function get later.", "tree": {"sha": "222044cfff9889483363aa20a6d7924d885ab5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222044cfff9889483363aa20a6d7924d885ab5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54eafc009d1595a04862b242fb6825f9e7b51799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54eafc009d1595a04862b242fb6825f9e7b51799", "html_url": "https://github.com/rust-lang/rust/commit/54eafc009d1595a04862b242fb6825f9e7b51799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54eafc009d1595a04862b242fb6825f9e7b51799/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "url": "https://api.github.com/repos/rust-lang/rust/commits/26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "html_url": "https://github.com/rust-lang/rust/commit/26babaafcdbcfdf2e842d84dbeabbed0dae6efef"}, {"sha": "3f232bc4a01d102599de0565ff769acdc06bac53", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f232bc4a01d102599de0565ff769acdc06bac53", "html_url": "https://github.com/rust-lang/rust/commit/3f232bc4a01d102599de0565ff769acdc06bac53"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9c7db35f6f206a9d86d1b6ab61be1cb95ced8ff7", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/54eafc009d1595a04862b242fb6825f9e7b51799/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54eafc009d1595a04862b242fb6825f9e7b51799/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=54eafc009d1595a04862b242fb6825f9e7b51799", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/**\n+/*!\n  * Concurrency-enabled mechanisms for sharing mutable and/or immutable state\n  * between tasks.\n+ *\n+ * # Example\n+ *\n+ * In this example, a large vector of floats is shared between several tasks.\n+ * With simple pipes, without ARC, a copy would have to be made for each task.\n+ *\n+ * ~~~\n+ * extern mod std;\n+ * use std::arc;\n+ * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n+ * let shared_numbers=arc::ARC(numbers);\n+ *\n+ *   for 10.times {\n+ *       let (port, chan)  = stream();\n+ *       chan.send(shared_numbers.clone());\n+ *\n+ *       do spawn {\n+ *           let shared_numbers=port.recv();\n+ *           let local_numbers=shared_numbers.get();\n+ *\n+ *           // Work with the local numbers\n+ *       }\n+ *   }\n+ * ~~~\n  */\n \n use sync;\n@@ -21,7 +45,7 @@ use core::unstable::sync::UnsafeAtomicRcBox;\n use core::ptr;\n use core::task;\n \n-/// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n+/// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'self> {\n     is_mutex: bool,\n     failed: &'self mut bool,\n@@ -93,9 +117,14 @@ pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n  * wrapper.\n  */\n pub fn get<'a, T:Const + Owned>(rc: &'a ARC<T>) -> &'a T {\n-    unsafe { &*rc.x.get_immut() }\n+    rc.get()\n }\n \n+impl<T:Const+Owned> ARC<T> {\n+    pub fn get<'a>(&'a self) -> &'a T {\n+        unsafe { &*self.x.get_immut() }\n+    }\n+}\n /**\n  * Duplicate an atomically reference counted wrapper.\n  *\n@@ -508,6 +537,7 @@ mod tests {\n         c.send(arc::clone(&arc_v));\n \n         assert_eq!((*arc::get(&arc_v))[2], 3);\n+        assert_eq!(arc_v.get()[4], 5);\n \n         info!(arc_v);\n     }"}]}