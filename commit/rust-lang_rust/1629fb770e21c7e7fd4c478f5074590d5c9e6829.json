{"sha": "1629fb770e21c7e7fd4c478f5074590d5c9e6829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MjlmYjc3MGUyMWM3ZTdmZDRjNDc4ZjUwNzQ1OTBkNWM5ZTY4Mjk=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T15:00:57Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T15:00:57Z"}, "message": "Push obligation instead of matching on solution", "tree": {"sha": "dee9864cb0139f9ba11cce1fb62facb49d0dd5e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee9864cb0139f9ba11cce1fb62facb49d0dd5e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1629fb770e21c7e7fd4c478f5074590d5c9e6829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1629fb770e21c7e7fd4c478f5074590d5c9e6829", "html_url": "https://github.com/rust-lang/rust/commit/1629fb770e21c7e7fd4c478f5074590d5c9e6829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1629fb770e21c7e7fd4c478f5074590d5c9e6829/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f5192d99886c89418879cc7d81ba298b0596db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5192d99886c89418879cc7d81ba298b0596db", "html_url": "https://github.com/rust-lang/rust/commit/d8f5192d99886c89418879cc7d81ba298b0596db"}], "stats": {"total": 85, "additions": 40, "deletions": 45}, "files": [{"sha": "a9565a58d1cbdd92764661faa48bac09cc23444d", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 36, "deletions": 41, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1629fb770e21c7e7fd4c478f5074590d5c9e6829/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1629fb770e21c7e7fd4c478f5074590d5c9e6829/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1629fb770e21c7e7fd4c478f5074590d5c9e6829", "patch": "@@ -15,15 +15,15 @@ use ra_syntax::ast::RangeOp;\n \n use crate::{\n     autoderef, method_resolution, op,\n-    traits::{FnTrait, Guidance, InEnvironment, SolutionVariables},\n+    traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Rawness, Substs,\n     TraitRef, Ty, TypeCtor,\n };\n \n use super::{\n     find_breakable, BindingMode, BreakableContext, Diverges, Expectation, InferenceContext,\n-    InferenceDiagnostic, Solution, TypeMismatch,\n+    InferenceDiagnostic, TypeMismatch,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -65,52 +65,47 @@ impl<'a> InferenceContext<'a> {\n \n     fn callable_sig_from_fn_trait(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n         let krate = self.resolver.krate()?;\n-        let fn_traits: Vec<crate::TraitId> = [FnTrait::FnOnce, FnTrait::FnMut, FnTrait::Fn]\n-            .iter()\n-            .filter_map(|f| f.get_id(self.db, krate))\n-            .collect();\n         let fn_once_trait = FnTrait::FnOnce.get_id(self.db, krate)?;\n         let output_assoc_type =\n             self.db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n-        for fn_trait in fn_traits {\n-            let generic_params = generics(self.db.upcast(), fn_trait.into());\n-            if generic_params.len() != 2 {\n-                continue;\n-            }\n-\n-            let mut param_builder = Substs::builder(num_args);\n-            for _ in 0..num_args {\n-                param_builder = param_builder.push(self.table.new_type_var());\n-            }\n-            let arg_ty = Ty::Apply(ApplicationTy {\n-                ctor: TypeCtor::Tuple { cardinality: num_args as u16 },\n-                parameters: param_builder.build(),\n-            });\n-            let substs = Substs::build_for_generics(&generic_params)\n-                .push(ty.clone())\n-                .push(arg_ty.clone())\n-                .build();\n-\n-            let trait_ref = TraitRef { trait_: fn_trait, substs: substs.clone() };\n-            let trait_env = Arc::clone(&self.trait_env);\n-            let implements_fn_goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n-                value: Obligation::Trait(trait_ref),\n-                environment: trait_env,\n-            });\n-            let solution = match self.db.trait_solve(krate, implements_fn_goal.value.clone()) {\n-                Some(Solution::Unique(SolutionVariables(solution)))\n-                | Some(Solution::Ambig(Guidance::Definite(SolutionVariables(solution))))\n-                | Some(Solution::Ambig(Guidance::Suggested(SolutionVariables(solution)))) => {\n-                    solution\n-                }\n-                _ => continue,\n-            };\n+        let generic_params = generics(self.db.upcast(), fn_once_trait.into());\n+        if generic_params.len() != 2 {\n+            return None;\n+        }\n+\n+        let mut param_builder = Substs::builder(num_args);\n+        let mut arg_tys = vec![];\n+        for _ in 0..num_args {\n+            let arg = self.table.new_type_var();\n+            param_builder = param_builder.push(arg.clone());\n+            arg_tys.push(arg);\n+        }\n+        let parameters = param_builder.build();\n+        let arg_ty = Ty::Apply(ApplicationTy {\n+            ctor: TypeCtor::Tuple { cardinality: num_args as u16 },\n+            parameters,\n+        });\n+        let substs = Substs::build_for_generics(&generic_params)\n+            .push(ty.clone())\n+            .push(arg_ty.clone())\n+            .build();\n+\n+        let trait_env = Arc::clone(&self.trait_env);\n+        let implements_fn_trait =\n+            Obligation::Trait(TraitRef { trait_: fn_once_trait, substs: substs.clone() });\n+        let goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n+            value: implements_fn_trait.clone(),\n+            environment: trait_env,\n+        });\n+        if self.db.trait_solve(krate, goal.value).is_some() {\n+            self.obligations.push(implements_fn_trait);\n             let output_proj_ty =\n                 crate::ProjectionTy { associated_ty: output_assoc_type, parameters: substs };\n             let return_ty = self.normalize_projection_ty(output_proj_ty);\n-            return Some((solution.value, return_ty));\n+            Some((arg_tys, return_ty))\n+        } else {\n+            None\n         }\n-        None\n     }\n \n     pub fn callable_sig(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {"}, {"sha": "961be4abdff6b40c855f420498af08abb8f385b2", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1629fb770e21c7e7fd4c478f5074590d5c9e6829/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1629fb770e21c7e7fd4c478f5074590d5c9e6829/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=1629fb770e21c7e7fd4c478f5074590d5c9e6829", "patch": "@@ -3028,7 +3028,7 @@ fn infer_box_fn_arg() {\n     656..667 '&self.inner': &*mut T\n     657..661 'self': &Box<T>\n     657..667 'self.inner': *mut T\n-    812..957 '{     ...     }': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, ({unknown},)>\n+    812..957 '{     ...     }': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n     834..835 's': Option<i32>\n     838..850 'Option::None': Option<i32>\n     872..873 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n@@ -3037,7 +3037,7 @@ fn infer_box_fn_arg() {\n     913..915 'ps': {unknown}\n     917..919 '{}': ()\n     938..939 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n-    938..943 'f(&s)': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, ({unknown},)>\n+    938..943 'f(&s)': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n     940..942 '&s': &Option<i32>\n     941..942 's': Option<i32>\n     \"###\n@@ -3105,9 +3105,9 @@ fn infer_dyn_fn_output() {\n     937..946 'box(|| 5)': Box<|| -> i32>\n     941..945 '|| 5': || -> i32\n     944..945 '5': i32\n-    968..969 'x': i32\n+    968..969 'x': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n     972..973 'f': Box<dyn Fn<(), Output = i32>>\n-    972..975 'f()': i32\n+    972..975 'f()': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n     \"###\n     );\n }"}]}