{"sha": "b8033260632de3963909c22e325e48253c42bb73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MDMzMjYwNjMyZGUzOTYzOTA5YzIyZTMyNWU0ODI1M2M0MmJiNzM=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-09T17:56:32Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-15T22:35:27Z"}, "message": "Change `node_id`s when expanding, to avoid duplicates.", "tree": {"sha": "e3ee301e0fa30657a83e5a1971640a3a386f7a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ee301e0fa30657a83e5a1971640a3a386f7a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8033260632de3963909c22e325e48253c42bb73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8033260632de3963909c22e325e48253c42bb73", "html_url": "https://github.com/rust-lang/rust/commit/b8033260632de3963909c22e325e48253c42bb73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8033260632de3963909c22e325e48253c42bb73/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50a582126e35300bba5a3a8bec001ae6c301ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50a582126e35300bba5a3a8bec001ae6c301ed5", "html_url": "https://github.com/rust-lang/rust/commit/f50a582126e35300bba5a3a8bec001ae6c301ed5"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "76960abc85430d4c167b6523c1f99f1ad3c0cae3", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8033260632de3963909c22e325e48253c42bb73/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8033260632de3963909c22e325e48253c42bb73/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=b8033260632de3963909c22e325e48253c42bb73", "patch": "@@ -15,6 +15,7 @@ import base::expr_to_str;\n import base::expr_to_ident;\n \n import fold::*;\n+import ast::node_id;\n import ast::respan;\n import ast::ident;\n import ast::path;\n@@ -198,6 +199,7 @@ fn use_selectors_to_bind(b: &binders, e: @expr) -> option::t[bindings] {\n \n fn transcribe(cx: &ext_ctxt, b: &bindings, body: @expr) -> @expr {\n     let idx_path: @mutable [uint] = @mutable ~[];\n+    fn new_id(old: node_id, cx: &ext_ctxt) -> node_id { ret cx.next_id(); }\n     let afp = default_ast_fold();\n     let f_pre =\n         {fold_ident: bind transcribe_ident(cx, b, idx_path, _, _),\n@@ -207,7 +209,8 @@ fn transcribe(cx: &ext_ctxt, b: &bindings, body: @expr) -> @expr {\n          fold_ty: bind transcribe_type(cx, b, idx_path, _, _, afp.fold_ty),\n          fold_block:\n              bind transcribe_block(cx, b, idx_path, _, _, afp.fold_block),\n-         map_exprs: bind transcribe_exprs(cx, b, idx_path, _, _) with *afp};\n+         map_exprs: bind transcribe_exprs(cx, b, idx_path, _, _),\n+         new_id: bind new_id(_, cx) with *afp};\n     let f = make_fold(f_pre);\n     let result = f.fold_expr(body);\n     dummy_out(f); //temporary: kill circular reference"}, {"sha": "96e20918a5b3ac3cfa3e6252fd730115233709c4", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8033260632de3963909c22e325e48253c42bb73/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8033260632de3963909c22e325e48253c42bb73/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=b8033260632de3963909c22e325e48253c42bb73", "patch": "@@ -43,7 +43,8 @@ type ast_fold_precursor =\n      fold_ident: fn(&ident, ast_fold) -> ident ,\n      fold_path: fn(&path_, ast_fold) -> path_ ,\n      fold_local: fn(&local_, ast_fold) -> local_ ,\n-     map_exprs: fn(fn(&@expr) -> @expr , [@expr]) -> [@expr] };\n+     map_exprs: fn(fn(&@expr) -> @expr , [@expr]) -> [@expr],\n+     new_id: fn(node_id) -> node_id};\n \n type a_f =\n     {fold_crate: fn(&crate) -> crate ,\n@@ -68,7 +69,9 @@ type a_f =\n      fold_ident: fn(&ident) -> ident ,\n      fold_path: fn(&path) -> path ,\n      fold_local: fn(&@local) -> @local ,\n-     map_exprs: fn(fn(&@expr) -> @expr , [@expr]) -> [@expr] };\n+     map_exprs: fn(fn(&@expr) -> @expr , [@expr]) -> [@expr],\n+     new_id: fn(node_id) -> node_id};\n+\n \n //fn nf_dummy[T](&T node) -> T { fail; }\n fn nf_crate_dummy(c: &crate) -> crate { fail; }\n@@ -509,6 +512,8 @@ fn noop_map_exprs(f: fn(&@expr) -> @expr , es: [@expr]) -> [@expr] {\n     ret ivec::map(f, es);\n }\n \n+fn noop_id(i: node_id) -> node_id { ret i; }\n+\n \n fn default_ast_fold() -> @ast_fold_precursor {\n     ret @{fold_crate: noop_fold_crate,\n@@ -533,7 +538,8 @@ fn default_ast_fold() -> @ast_fold_precursor {\n           fold_ident: noop_fold_ident,\n           fold_path: noop_fold_path,\n           fold_local: noop_fold_local,\n-          map_exprs: noop_map_exprs};\n+          map_exprs: noop_map_exprs,\n+          new_id: noop_id};\n }\n \n fn dummy_out(a: ast_fold) {\n@@ -560,7 +566,8 @@ fn dummy_out(a: ast_fold) {\n          fold_ident: nf_ident_dummy,\n          fold_path: nf_path_dummy,\n          fold_local: nf_local_dummy,\n-         map_exprs: noop_map_exprs};\n+         map_exprs: noop_map_exprs,\n+         new_id: noop_id};\n }\n \n \n@@ -588,7 +595,8 @@ fn make_fold(afp: &ast_fold_precursor) -> ast_fold {\n                   fold_ident: nf_ident_dummy,\n                   fold_path: nf_path_dummy,\n                   fold_local: nf_local_dummy,\n-                  map_exprs: noop_map_exprs};\n+                  map_exprs: noop_map_exprs,\n+                  new_id: noop_id};\n \n     /* naturally, a macro to write these would be nice */\n     fn f_crate(afp: &ast_fold_precursor, f: ast_fold, c: &crate) -> crate {\n@@ -627,13 +635,15 @@ fn make_fold(afp: &ast_fold_precursor) -> ast_fold {\n         ret afp.fold_arm(x, f);\n     }\n     fn f_pat(afp: &ast_fold_precursor, f: ast_fold, x: &@pat) -> @pat {\n-        ret @{id: x.id, node: afp.fold_pat(x.node, f), span: x.span};\n+        ret @{id: afp.new_id(x.id),\n+              node: afp.fold_pat(x.node, f), span: x.span};\n     }\n     fn f_decl(afp: &ast_fold_precursor, f: ast_fold, x: &@decl) -> @decl {\n         ret @{node: afp.fold_decl(x.node, f), span: x.span};\n     }\n     fn f_expr(afp: &ast_fold_precursor, f: ast_fold, x: &@expr) -> @expr {\n-        ret @{id: x.id, node: afp.fold_expr(x.node, f), span: x.span};\n+        ret @{id: afp.new_id(x.id),\n+              node: afp.fold_expr(x.node, f), span: x.span};\n     }\n     fn f_ty(afp: &ast_fold_precursor, f: ast_fold, x: &@ty) -> @ty {\n         ret @{node: afp.fold_ty(x.node, f), span: x.span};\n@@ -689,7 +699,8 @@ fn make_fold(afp: &ast_fold_precursor) -> ast_fold {\n          fold_ident: bind f_ident(afp, result, _),\n          fold_path: bind f_path(afp, result, _),\n          fold_local: bind f_local(afp, result, _),\n-         map_exprs: afp.map_exprs};\n+         map_exprs: afp.map_exprs,\n+         new_id: afp.new_id};\n     ret result;\n }\n "}]}