{"sha": "65bd9bc3a800e09f52a315cf98e86c120c366c2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmQ5YmMzYTgwMGUwOWY1MmEzMTVjZjk4ZTg2YzEyMGMzNjZjMmM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T21:06:23Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T22:06:41Z"}, "message": "Handle impl generics in method calls", "tree": {"sha": "954a439a7c83898c36a0f2516e4a91c37c03c7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/954a439a7c83898c36a0f2516e4a91c37c03c7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bd9bc3a800e09f52a315cf98e86c120c366c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd9bc3a800e09f52a315cf98e86c120c366c2c", "html_url": "https://github.com/rust-lang/rust/commit/65bd9bc3a800e09f52a315cf98e86c120c366c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bd9bc3a800e09f52a315cf98e86c120c366c2c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af067b391bf37950cf1d3f1af863d931b385af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af067b391bf37950cf1d3f1af863d931b385af5", "html_url": "https://github.com/rust-lang/rust/commit/2af067b391bf37950cf1d3f1af863d931b385af5"}], "stats": {"total": 199, "additions": 122, "deletions": 77}, "files": [{"sha": "26ebc445bfc8d1f9149cea6cc3a453eb48303f07", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -463,7 +463,7 @@ impl Function {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n@@ -497,6 +497,12 @@ impl Function {\n         db.generic_params((*self).into())\n     }\n \n+    /// The containing impl block, if this is a method.\n+    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+        let module_impls = db.impls_in_module(self.module(db));\n+        ImplBlock::containing(module_impls, (*self).into())\n+    }\n+\n     // TODO: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n@@ -527,6 +533,16 @@ impl Const {\n     pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n         self.id.source(db)\n     }\n+\n+    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+        self.id.module(db)\n+    }\n+\n+    /// The containing impl block, if this is a method.\n+    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+        let module_impls = db.impls_in_module(self.module(db));\n+        ImplBlock::containing(module_impls, (*self).into())\n+    }\n }\n \n impl Docs for Const {\n@@ -544,6 +560,10 @@ impl Static {\n     pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n         self.id.source(db)\n     }\n+\n+    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+        self.id.module(db)\n+    }\n }\n \n impl Docs for Static {\n@@ -562,6 +582,10 @@ impl Trait {\n         self.id.source(db)\n     }\n \n+    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+        self.id.module(db)\n+    }\n+\n     pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n@@ -586,6 +610,16 @@ impl Type {\n     pub fn generic_params(&self, db: &impl PersistentHirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n+\n+    pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n+        self.id.module(db)\n+    }\n+\n+    /// The containing impl block, if this is a method.\n+    pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n+        let module_impls = db.impls_in_module(self.module(db));\n+        ImplBlock::containing(module_impls, (*self).into())\n+    }\n }\n \n impl Docs for Type {"}, {"sha": "c401528c6080b995ba80a6a5d5887a64a67038d0", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -3,22 +3,11 @@ use std::sync::Arc;\n use ra_syntax::ast::{self, NameOwner};\n \n use crate::{\n-    HirDatabase, Name, AsName, Function, FnSignature,\n+    Name, AsName, Function, FnSignature,\n     type_ref::{TypeRef, Mutability},\n     PersistentHirDatabase,\n-    impl_block::ImplBlock,\n };\n \n-impl Function {\n-    // TODO impl_block should probably also be part of the code model API?\n-\n-    /// The containing impl block, if this is a method.\n-    pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Option<ImplBlock> {\n-        let module_impls = db.impls_in_module(self.module(db));\n-        ImplBlock::containing(module_impls, (*self).into())\n-    }\n-}\n-\n impl FnSignature {\n     pub(crate) fn fn_signature_query(\n         db: &impl PersistentHirDatabase,"}, {"sha": "fcc5133535d89356a83c245214aa4c7b2c82738c", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -20,6 +20,7 @@ pub struct GenericParam {\n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct GenericParams {\n+    pub(crate) parent_params: Option<Arc<GenericParams>>,\n     pub(crate) params: Vec<GenericParam>,\n }\n \n@@ -40,33 +41,50 @@ impl GenericParams {\n         def: GenericDef,\n     ) -> Arc<GenericParams> {\n         let mut generics = GenericParams::default();\n+        let parent = match def {\n+            GenericDef::Function(it) => it.impl_block(db),\n+            GenericDef::Type(it) => it.impl_block(db),\n+            GenericDef::Struct(_) | GenericDef::Enum(_) | GenericDef::Trait(_) => None,\n+            GenericDef::ImplBlock(_) => None,\n+        };\n+        generics.parent_params = parent.map(|p| p.generic_params(db));\n+        let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         match def {\n-            GenericDef::Function(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::Struct(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::Enum(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::Trait(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::Type(it) => generics.fill(&*it.source(db).1),\n-            GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1),\n+            GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Struct(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Trait(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Type(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1, start),\n         }\n \n         Arc::new(generics)\n     }\n \n-    fn fill(&mut self, node: &impl TypeParamsOwner) {\n+    fn fill(&mut self, node: &impl TypeParamsOwner, start: u32) {\n         if let Some(params) = node.type_param_list() {\n-            self.fill_params(params)\n+            self.fill_params(params, start)\n         }\n     }\n \n-    fn fill_params(&mut self, params: &ast::TypeParamList) {\n+    fn fill_params(&mut self, params: &ast::TypeParamList, start: u32) {\n         for (idx, type_param) in params.type_params().enumerate() {\n             let name = type_param.name().map(AsName::as_name).unwrap_or_else(Name::missing);\n-            let param = GenericParam { idx: idx as u32, name };\n+            let param = GenericParam { idx: idx as u32 + start, name };\n             self.params.push(param);\n         }\n     }\n \n     pub(crate) fn find_by_name(&self, name: &Name) -> Option<&GenericParam> {\n         self.params.iter().find(|p| &p.name == name)\n     }\n+\n+    pub fn count_parent_params(&self) -> usize {\n+        self.parent_params.as_ref().map(|p| p.count_params_including_parent()).unwrap_or(0)\n+    }\n+\n+    pub fn count_params_including_parent(&self) -> usize {\n+        let parent_count = self.count_parent_params();\n+        parent_count + self.params.len()\n+    }\n }"}, {"sha": "6df037859dd67ad1f98bd4617f2a7451cf1a867a", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -9,7 +9,6 @@ use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, SyntaxNodePtr, ast};\n use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n-    HirDatabase,\n     Module,\n     PersistentHirDatabase,\n };\n@@ -215,7 +214,7 @@ pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n             N::cast(&syntax).unwrap_or_else(|| panic!(\"invalid ItemLoc: {:?}\", loc.raw)).to_owned();\n         (loc.raw.file_id, ast)\n     }\n-    fn module(self, db: &impl HirDatabase) -> Module {\n+    fn module(self, db: &impl PersistentHirDatabase) -> Module {\n         let int = Self::interner(db.as_ref());\n         let loc = int.id2loc(self);\n         loc.module"}, {"sha": "db0a20514fa14f484a91c1815e05575d1a95b58c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -421,7 +421,8 @@ impl Ty {\n                 (var.parent_enum(db).generic_params(db), segment)\n             }\n         };\n-        // substs_from_path\n+        let parent_param_count = def_generics.count_parent_params();\n+        substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n         if let Some(generic_args) = &segment.args_and_bindings {\n             // if args are provided, it should be all of them, but we can't rely on that\n             let param_count = def_generics.params.len();\n@@ -436,9 +437,8 @@ impl Ty {\n         }\n         // add placeholders for args that were not provided\n         // TODO: handle defaults\n-        let supplied_params =\n-            segment.args_and_bindings.as_ref().map(|ga| ga.args.len()).unwrap_or(0);\n-        for _ in supplied_params..def_generics.params.len() {\n+        let supplied_params = substs.len();\n+        for _ in supplied_params..def_generics.count_params_including_parent() {\n             substs.push(Ty::Unknown);\n         }\n         assert_eq!(substs.len(), def_generics.params.len());\n@@ -666,7 +666,12 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n }\n \n fn make_substs(generics: &GenericParams) -> Substs {\n-    Substs(generics.params.iter().map(|_p| Ty::Unknown).collect::<Vec<_>>().into())\n+    Substs(\n+        (0..generics.count_params_including_parent())\n+            .map(|_p| Ty::Unknown)\n+            .collect::<Vec<_>>()\n+            .into(),\n+    )\n }\n \n fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Ty {"}, {"sha": "d1ce87b0a2ccbffc53a4f58fdfa1117f2eaf3f8b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_generic_chain.snap", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -1,36 +1,36 @@\n ---\n-created: \"2019-01-27T14:52:29.938713255+00:00\"\n-creator: insta@0.5.2\n-expression: \"&result\"\n+created: \"2019-02-16T20:53:59.655361804Z\"\n+creator: insta@0.6.2\n source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n ---\n-[53; 57) 'self': A<[unknown]>\n-[65; 87) '{     ...     }': [unknown]\n-[75; 79) 'self': A<[unknown]>\n-[75; 81) 'self.x': [unknown]\n+[53; 57) 'self': A<T2>\n+[65; 87) '{     ...     }': T2\n+[75; 79) 'self': A<T2>\n+[75; 81) 'self.x': T2\n [99; 100) 't': T\n [110; 115) '{ t }': T\n [112; 113) 't': T\n [135; 261) '{     ....x() }': i128\n-[146; 147) 'x': i32\n-[150; 151) '1': i32\n-[162; 163) 'y': i32\n-[166; 168) 'id': fn id<i32>(T) -> T\n-[166; 171) 'id(x)': i32\n-[169; 170) 'x': i32\n-[182; 183) 'a': A<i32>\n-[186; 200) 'A { x: id(y) }': A<i32>\n-[193; 195) 'id': fn id<i32>(T) -> T\n-[193; 198) 'id(y)': i32\n-[196; 197) 'y': i32\n-[211; 212) 'z': i32\n-[215; 217) 'id': fn id<i32>(T) -> T\n-[215; 222) 'id(a.x)': i32\n-[218; 219) 'a': A<i32>\n-[218; 221) 'a.x': i32\n-[233; 234) 'b': A<i32>\n-[237; 247) 'A { x: z }': A<i32>\n-[244; 245) 'z': i32\n-[254; 255) 'b': A<i32>\n+[146; 147) 'x': i128\n+[150; 151) '1': i128\n+[162; 163) 'y': i128\n+[166; 168) 'id': fn id<i128>(T) -> T\n+[166; 171) 'id(x)': i128\n+[169; 170) 'x': i128\n+[182; 183) 'a': A<i128>\n+[186; 200) 'A { x: id(y) }': A<i128>\n+[193; 195) 'id': fn id<i128>(T) -> T\n+[193; 198) 'id(y)': i128\n+[196; 197) 'y': i128\n+[211; 212) 'z': i128\n+[215; 217) 'id': fn id<i128>(T) -> T\n+[215; 222) 'id(a.x)': i128\n+[218; 219) 'a': A<i128>\n+[218; 221) 'a.x': i128\n+[233; 234) 'b': A<i128>\n+[237; 247) 'A { x: z }': A<i128>\n+[244; 245) 'z': i128\n+[254; 255) 'b': A<i128>\n [254; 259) 'b.x()': i128\n "}, {"sha": "eabbe52fdabaa83f6710176efef820d133ef5ae5", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_impl_generics.snap", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/65bd9bc3a800e09f52a315cf98e86c120c366c2c/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap?ref=65bd9bc3a800e09f52a315cf98e86c120c366c2c", "patch": "@@ -1,39 +1,39 @@\n ---\n-created: \"2019-02-16T19:27:11.573533475Z\"\n+created: \"2019-02-16T20:53:59.657979128Z\"\n creator: insta@0.6.2\n source: crates/ra_hir/src/ty/tests.rs\n expression: \"&result\"\n ---\n-[74; 78) 'self': A<[unknown], [unknown]>\n-[85; 107) '{     ...     }': [unknown]\n-[95; 99) 'self': A<[unknown], [unknown]>\n-[95; 101) 'self.x': [unknown]\n-[117; 121) 'self': A<[unknown], [unknown]>\n-[128; 150) '{     ...     }': [unknown]\n-[138; 142) 'self': A<[unknown], [unknown]>\n-[138; 144) 'self.y': [unknown]\n-[163; 167) 'self': A<[unknown], [unknown]>\n+[74; 78) 'self': A<X, Y>\n+[85; 107) '{     ...     }': X\n+[95; 99) 'self': A<X, Y>\n+[95; 101) 'self.x': X\n+[117; 121) 'self': A<X, Y>\n+[128; 150) '{     ...     }': Y\n+[138; 142) 'self': A<X, Y>\n+[138; 144) 'self.y': Y\n+[163; 167) 'self': A<X, Y>\n [169; 170) 't': T\n-[188; 223) '{     ...     }': ([unknown], [unknown], T)\n-[198; 217) '(self.....y, t)': ([unknown], [unknown], T)\n-[199; 203) 'self': A<[unknown], [unknown]>\n-[199; 205) 'self.x': [unknown]\n-[207; 211) 'self': A<[unknown], [unknown]>\n-[207; 213) 'self.y': [unknown]\n+[188; 223) '{     ...     }': (X, Y, T)\n+[198; 217) '(self.....y, t)': (X, Y, T)\n+[199; 203) 'self': A<X, Y>\n+[199; 205) 'self.x': X\n+[207; 211) 'self': A<X, Y>\n+[207; 213) 'self.y': Y\n [215; 216) 't': T\n [245; 342) '{     ...(1); }': ()\n [255; 256) 'a': A<u64, i64>\n [259; 281) 'A { x:...1i64 }': A<u64, i64>\n [266; 270) '1u64': u64\n [275; 279) '1i64': i64\n [287; 288) 'a': A<u64, i64>\n-[287; 292) 'a.x()': [unknown]\n+[287; 292) 'a.x()': u64\n [298; 299) 'a': A<u64, i64>\n-[298; 303) 'a.y()': [unknown]\n+[298; 303) 'a.y()': i64\n [309; 310) 'a': A<u64, i64>\n-[309; 319) 'a.z(1i128)': ([unknown], [unknown], i128)\n+[309; 319) 'a.z(1i128)': (u64, i64, i128)\n [313; 318) '1i128': i128\n [325; 326) 'a': A<u64, i64>\n-[325; 339) 'a.z::<u128>(1)': ([unknown], [unknown], i32)\n+[325; 339) 'a.z::<u128>(1)': (u64, i64, i32)\n [337; 338) '1': i32\n "}]}