{"sha": "54a14e844c6a5ed51741e039e6376822f88ac121", "node_id": "C_kwDOAAsO6NoAKDU0YTE0ZTg0NGM2YTVlZDUxNzQxZTAzOWU2Mzc2ODIyZjg4YWMxMjE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T05:33:07Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T19:48:47Z"}, "message": "Remove the last use of the side channel", "tree": {"sha": "10ee13ef6046e798c1961a73e0325474309c01e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10ee13ef6046e798c1961a73e0325474309c01e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a14e844c6a5ed51741e039e6376822f88ac121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a14e844c6a5ed51741e039e6376822f88ac121", "html_url": "https://github.com/rust-lang/rust/commit/54a14e844c6a5ed51741e039e6376822f88ac121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a14e844c6a5ed51741e039e6376822f88ac121/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde94538bf893fe11148354bc2da0028207ea47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde94538bf893fe11148354bc2da0028207ea47c", "html_url": "https://github.com/rust-lang/rust/commit/fde94538bf893fe11148354bc2da0028207ea47c"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "097cb3989503d7dc648485592dc890d5dbdb2d2f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54a14e844c6a5ed51741e039e6376822f88ac121/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a14e844c6a5ed51741e039e6376822f88ac121/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=54a14e844c6a5ed51741e039e6376822f88ac121", "patch": "@@ -827,19 +827,28 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     ) -> Option<Res> {\n         // resolve() can't be used for macro namespace\n         let result = match ns {\n-            Namespace::MacroNS => self.resolve_macro(path_str, module_id).map_err(ErrorKind::from),\n+            Namespace::MacroNS => self\n+                .resolve_macro(path_str, module_id)\n+                .map(|res| (res, None))\n+                .map_err(ErrorKind::from),\n             Namespace::TypeNS | Namespace::ValueNS => {\n-                self.resolve(path_str, ns, module_id, extra_fragment).map(|(res, _)| res)\n+                self.resolve(path_str, ns, module_id, extra_fragment)\n             }\n         };\n \n         let res = match result {\n-            Ok(res) => Some(res),\n+            Ok((res, frag)) => {\n+                if let Some(UrlFragment::Def(_, id)) = frag {\n+                    Some(Res::Def(self.cx.tcx.def_kind(id), id))\n+                } else {\n+                    Some(res)\n+                }\n+            }\n             Err(ErrorKind::Resolve(box kind)) => kind.full_res(),\n             Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res))) => Some(res),\n             Err(ErrorKind::AnchorFailure(AnchorFailure::MultipleAnchors)) => None,\n         };\n-        self.kind_side_channel.take().map(|(kind, id)| Res::Def(kind, id)).or(res)\n+        res\n     }\n }\n "}]}