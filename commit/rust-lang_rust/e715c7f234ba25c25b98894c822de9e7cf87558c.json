{"sha": "e715c7f234ba25c25b98894c822de9e7cf87558c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTVjN2YyMzRiYTI1YzI1Yjk4ODk0YzgyMmRlOWU3Y2Y4NzU1OGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2020-09-24T01:13:25Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@google.com", "date": "2020-09-28T19:32:46Z"}, "message": "bootstrap: Always build for host, even when target is given\n\nThis changes the behavior from *not* building for host whenever an\nexplicit target is specified. I find this much less confusing.\n\nYou can still disable host steps by passing an explicit empty list for\nhost.\n\nFixes #76990.", "tree": {"sha": "657b3071c1d2693aba462d1bd3a7d82c7a943086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657b3071c1d2693aba462d1bd3a7d82c7a943086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e715c7f234ba25c25b98894c822de9e7cf87558c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e715c7f234ba25c25b98894c822de9e7cf87558c", "html_url": "https://github.com/rust-lang/rust/commit/e715c7f234ba25c25b98894c822de9e7cf87558c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e715c7f234ba25c25b98894c822de9e7cf87558c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62d3f7fa9a91d933213cc10e20e740608983f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62d3f7fa9a91d933213cc10e20e740608983f64", "html_url": "https://github.com/rust-lang/rust/commit/d62d3f7fa9a91d933213cc10e20e740608983f64"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "3ca41be0a9f3b4fe186a0f1d5d73190df030b431", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e715c7f234ba25c25b98894c822de9e7cf87558c/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715c7f234ba25c25b98894c822de9e7cf87558c/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=e715c7f234ba25c25b98894c822de9e7cf87558c", "patch": "@@ -342,31 +342,29 @@ mod dist {\n     }\n \n     #[test]\n-    fn dist_with_target_flag() {\n-        let mut config = configure(&[\"B\"], &[\"C\"]);\n-        config.skip_only_host_steps = true; // as-if --target=C was passed\n+    fn dist_with_empty_host() {\n+        let mut config = configure(&[], &[\"C\"]);\n+        config.skip_only_host_steps = true;\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n \n         let a = TargetSelection::from_user(\"A\");\n-        let b = TargetSelection::from_user(\"B\");\n         let c = TargetSelection::from_user(\"C\");\n \n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n-            &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n+            &[dist::Docs { host: a }, dist::Docs { host: c },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<dist::Mingw>()),\n-            &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n+            &[dist::Mingw { host: a }, dist::Mingw { host: c },]\n         );\n         assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n         assert_eq!(\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n             ]\n         );\n@@ -464,15 +462,14 @@ mod dist {\n     }\n \n     #[test]\n-    fn build_with_target_flag() {\n-        let mut config = configure(&[\"B\"], &[\"C\"]);\n+    fn build_with_empty_host() {\n+        let mut config = configure(&[], &[\"C\"]);\n         config.skip_only_host_steps = true;\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n \n         let a = TargetSelection::from_user(\"A\");\n-        let b = TargetSelection::from_user(\"B\");\n         let c = TargetSelection::from_user(\"C\");\n \n         assert_eq!(\n@@ -481,8 +478,6 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n             ]\n         );"}, {"sha": "942d1178a641d30c73b5d908b75f9ee97d519ee3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e715c7f234ba25c25b98894c822de9e7cf87558c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715c7f234ba25c25b98894c822de9e7cf87558c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e715c7f234ba25c25b98894c822de9e7cf87558c", "patch": "@@ -586,18 +586,15 @@ impl Config {\n \n         let build = toml.build.unwrap_or_default();\n \n-        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n-        let has_hosts = build.host.is_some() || flags.host.is_some();\n-        let has_targets = build.target.is_some() || flags.target.is_some();\n-        config.skip_only_host_steps = !has_hosts && has_targets;\n-\n         config.hosts = if let Some(arg_host) = flags.host {\n             arg_host\n         } else if let Some(file_host) = build.host {\n             file_host.iter().map(|h| TargetSelection::from_user(h)).collect()\n         } else {\n             vec![config.build]\n         };\n+        // If host was explicitly given an empty list, don't run any host-only steps.\n+        config.skip_only_host_steps = config.hosts.is_empty();\n         config.targets = if let Some(arg_target) = flags.target {\n             arg_target\n         } else if let Some(file_target) = build.target {"}]}