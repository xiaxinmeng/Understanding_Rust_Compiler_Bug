{"sha": "c766492d2625dba65c3bd933841c71938f6dc747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjY0OTJkMjYyNWRiYTY1YzNiZDkzMzg0MWM3MTkzOGY2ZGM3NDc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T20:05:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T20:15:26Z"}, "message": "Properly handle doc attributes in doc-comment highlight injection", "tree": {"sha": "79fc22c7f6018bafa8856fa52494646ebf9781d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fc22c7f6018bafa8856fa52494646ebf9781d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c766492d2625dba65c3bd933841c71938f6dc747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c766492d2625dba65c3bd933841c71938f6dc747", "html_url": "https://github.com/rust-lang/rust/commit/c766492d2625dba65c3bd933841c71938f6dc747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c766492d2625dba65c3bd933841c71938f6dc747/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3daa302cd39c779cae0b096972f2fdc3e67e214c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3daa302cd39c779cae0b096972f2fdc3e67e214c", "html_url": "https://github.com/rust-lang/rust/commit/3daa302cd39c779cae0b096972f2fdc3e67e214c"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "265a084f38bae372e6aa6eb10aaa9f0aa10990d3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c766492d2625dba65c3bd933841c71938f6dc747", "patch": "@@ -89,7 +89,7 @@ pub use crate::{\n pub use {\n     hir_def::{\n         adt::StructKind,\n-        attr::{Attrs, Documentation},\n+        attr::{Attr, Attrs, Documentation},\n         body::scope::ExprScopes,\n         find_path::PrefixKind,\n         import_map,"}, {"sha": "e7019e0c9c520968b9390159fd2174adab07e239", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=c766492d2625dba65c3bd933841c71938f6dc747", "patch": "@@ -162,7 +162,6 @@ impl RawAttrs {\n                     let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n                     // FIXME hygiene\n                     let hygiene = Hygiene::new_unhygienic();\n-                    // FIXME same index is assigned to multiple attributes\n                     Attr::from_src(attr, &hygiene).map(|attr| Attr { index, ..attr })\n                 });\n \n@@ -450,6 +449,13 @@ impl Attr {\n             _ => None,\n         }\n     }\n+\n+    pub fn string_value(&self) -> Option<&SmolStr> {\n+        match self.input.as_ref()? {\n+            AttrInput::Literal(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "0f1de4fb8177c0bedb6c0194261c78b0eddf3408", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=c766492d2625dba65c3bd933841c71938f6dc747", "patch": "@@ -5,7 +5,7 @@ use hir::{HasAttrs, Semantics};\n use ide_db::call_info::ActiveParameter;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner, DocCommentsOwner},\n-    match_ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n@@ -153,7 +153,6 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n     if attributes.docs().map_or(true, |docs| !String::from(docs).contains(RUSTDOC_FENCE)) {\n         return;\n     }\n-    let doc_comments = attributes.by_key(\"doc\").attrs().map(|attr| attr.to_src(&owner));\n \n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");\n@@ -164,13 +163,28 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n-    for comment in doc_comments {\n-        let (line, range, prefix) = match &comment {\n-            Either::Left(_) => continue, // FIXME\n+    let mut string;\n+    for attr in attributes.by_key(\"doc\").attrs() {\n+        let src = attr.to_src(&owner);\n+        let (line, range, prefix) = match &src {\n+            Either::Left(it) => {\n+                string = match find_doc_string_in_attr(attr, it) {\n+                    Some(it) => it,\n+                    None => continue,\n+                };\n+                let text_range = string.syntax().text_range();\n+                let text_range = TextRange::new(\n+                    text_range.start() + TextSize::from(1),\n+                    text_range.end() - TextSize::from(1),\n+                );\n+                let text = string.text();\n+                (&text[1..text.len() - 1], text_range, \"\")\n+            }\n             Either::Right(comment) => {\n                 (comment.text(), comment.syntax().text_range(), comment.prefix())\n             }\n         };\n+\n         match line.find(RUSTDOC_FENCE) {\n             Some(idx) => {\n                 is_codeblock = !is_codeblock;\n@@ -222,3 +236,27 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n         });\n     }\n }\n+\n+fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::String> {\n+    match it.literal() {\n+        // #[doc = lit]\n+        Some(lit) => match lit.kind() {\n+            ast::LiteralKind::String(it) => Some(it),\n+            _ => None,\n+        },\n+        // #[cfg_attr(..., doc = \"\", ...)]\n+        None => {\n+            // We gotta hunt the string token manually here\n+            let text = attr.string_value()?;\n+            // FIXME: We just pick the first string literal that has the same text as the doc attribute\n+            // This means technically we might highlight the wrong one\n+            it.syntax()\n+                .descendants_with_tokens()\n+                .filter_map(NodeOrToken::into_token)\n+                .filter_map(ast::String::cast)\n+                .find(|string| {\n+                    string.text().get(1..string.text().len() - 1).map_or(false, |it| it == text)\n+                })\n+        }\n+    }\n+}"}, {"sha": "45817faf960d7ef2773a58fcd70ab101520b13f9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=c766492d2625dba65c3bd933841c71938f6dc747", "patch": "@@ -105,4 +105,20 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"punctuation\">$</span>expr\n     <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span>\n+\n+<span class=\"comment documentation\">/// ```rust</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">///</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">///</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">/// ```</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "a5ef2d29be1b837c5c4928a7b4cc3771a4cb5fa3", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c766492d2625dba65c3bd933841c71938f6dc747/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=c766492d2625dba65c3bd933841c71938f6dc747", "patch": "@@ -541,6 +541,22 @@ macro_rules! noop {\n         $expr\n     }\n }\n+\n+/// ```rust\n+/// let _ = example(&[1, 2, 3]);\n+/// ```\n+///\n+/// ```\n+/// loop {}\n+#[cfg_attr(not(feature = \"false\"), doc = \"loop {}\")]\n+#[doc = \"loop {}\"]\n+/// ```\n+///\n+#[cfg_attr(feature = \"alloc\", doc = \"```rust\")]\n+#[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n+/// let _ = example(&alloc::vec![1, 2, 3]);\n+/// ```\n+pub fn mix_and_match() {}\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlight_doctest.html\"],"}]}