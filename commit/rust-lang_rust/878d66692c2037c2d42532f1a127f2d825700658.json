{"sha": "878d66692c2037c2d42532f1a127f2d825700658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OGQ2NjY5MmMyMDM3YzJkNDI1MzJmMWExMjdmMmQ4MjU3MDA2NTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-19T10:46:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T14:04:57Z"}, "message": "Maybe prevent marking statics as immutable", "tree": {"sha": "ea5fb85e947593ec46d8ec56b7d3afd415f9fc0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea5fb85e947593ec46d8ec56b7d3afd415f9fc0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/878d66692c2037c2d42532f1a127f2d825700658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrQuRIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARb\nhg/+LqEKJsJxdMDQyVzv9DVLLbDYloy19kN5aQzv1vcBHYtMO4BadqObBKFz5Dqj\no2Iym8kBi+m0ynn6MmfoS4w4u3c/Ou2feHHNwc5Td4ipjb7GTft0h+tkD/e1lh9p\nwtxb7nUTuyHnHhliIqfRyknvIEpvCQ7IcsBDtE3ABruyVcAwNiyhgq3orORxGWu5\nliEbrJxKUC3pmgRRpGf3NfGCskICndugwxkvfTSxmpvxWulOgL+FbdVW3Z4Veicy\nulMgkngxfudh0bhAZiy0Tur2U97WqTDdKHMuEBkDONe8XcOhX4YgWSK4s3LYAMBw\n0+5rFfYnVNgKf0QXwmszLIwHwpqH46qAdRsDAQuaLWa5xi0E//jfPcRk7VV2vutN\nBPPLqtgB8nDMbyfKvOlVHBQGeogm+aIolI6rzmH48gIXXgjdqupR6d1nnVzRB6a8\ntXAUWq/9d+ZOCnemjUXoqIaX7bYSiwtEexwrQ87gTokspDkAFGenstOeiBrRM/wD\n6iQKFTr4tOnXDma9xhehb951vVUtB5ud1PF/Df0C/s5+Mxqeq5wWIrNxU+gx8gUM\nzKiU/UG/iRyzdzHhepi3EnGhNaQBS73sdFGcfdQ66LrU6i4/WsFsjMfpn9gawwO3\ns31ZzqSLVUtD3Tqu4xBfqEQ+hLUpBJrP7aGKBR+721gcygM=\n=gqQo\n-----END PGP SIGNATURE-----", "payload": "tree ea5fb85e947593ec46d8ec56b7d3afd415f9fc0e\nparent 680bcf86f03632e0f1d17fdf89f5274a2f42da92\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1521456378 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523628297 +0200\n\nMaybe prevent marking statics as immutable"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/878d66692c2037c2d42532f1a127f2d825700658", "html_url": "https://github.com/rust-lang/rust/commit/878d66692c2037c2d42532f1a127f2d825700658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/878d66692c2037c2d42532f1a127f2d825700658/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680bcf86f03632e0f1d17fdf89f5274a2f42da92", "url": "https://api.github.com/repos/rust-lang/rust/commits/680bcf86f03632e0f1d17fdf89f5274a2f42da92", "html_url": "https://github.com/rust-lang/rust/commit/680bcf86f03632e0f1d17fdf89f5274a2f42da92"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "0e3d00f1f15a363931c7317d7dd9a94a5274add0", "filename": "miri/lib.rs", "status": "modified", "additions": 63, "deletions": 13, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/878d66692c2037c2d42532f1a127f2d825700658/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878d66692c2037c2d42532f1a127f2d825700658/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=878d66692c2037c2d42532f1a127f2d825700658", "patch": "@@ -268,19 +268,69 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         cid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, AllocId> {\n-ecx.const_eval(cid)?;\n-        return Ok(ecx\n-            .tcx\n-            .interpret_interner\n-            .get_cached(cid.instance.def_id())\n-            .expect(\"uncached static\"));\n-        let def_id = cid.instance.def_id();\n-        let ty = ecx.tcx.type_of(def_id);\n-        let layout = ecx.tcx.layout_of(ty::ParamEnvAnd {\n-            param_env: ty::ParamEnv::reveal_all(),\n-            value: ty\n-        }).expect(\"Couldn't compute layout for the type of a static\");\n-        ecx.memory.allocate(layout.size.bytes(), layout.align, None).map(|mptr|mptr.alloc_id)\n+        let tcx = self.tcx.tcx;\n+        let mir = None;\n+        let param_env = ty::ParamEnv::reveal_all();\n+        // we start out with the best span we have\n+        // and try improving it down the road when more information is available\n+        let res = (|| {\n+            let mut mir = match mir {\n+                Some(mir) => mir,\n+                None => ecx.load_mir(cid.instance.def)?,\n+            };\n+            if let Some(index) = cid.promoted {\n+                mir = &mir.promoted[index];\n+            }\n+            span = mir.span;\n+            let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n+            let alloc = tcx.interpret_interner.get_cached(cid.instance.def_id());\n+            let is_static = tcx.is_static(cid.instance.def_id()).is_some();\n+            let alloc = match alloc {\n+                Some(alloc) => {\n+                    assert!(cid.promoted.is_none());\n+                    assert!(param_env.caller_bounds.is_empty());\n+                    alloc\n+                },\n+                None => {\n+                    assert!(!layout.is_unsized());\n+                    let ptr = ecx.memory.allocate(\n+                        layout.size.bytes(),\n+                        layout.align,\n+                        None,\n+                    )?;\n+                    if is_static {\n+                        tcx.interpret_interner.cache(cid.instance.def_id(), ptr.alloc_id);\n+                    }\n+                    let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n+                    let mutability = tcx.is_static(cid.instance.def_id());\n+                    let mutability = if mutability == Some(hir::Mutability::MutMutable) || internally_mutable {\n+                        Mutability::Mutable\n+                    } else {\n+                        Mutability::Immutable\n+                    };\n+                    let cleanup = StackPopCleanup::MarkStatic(mutability);\n+                    let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n+                    let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n+                    trace!(\"const_eval: pushing stack frame for global: {}{}\", name, prom);\n+                    assert!(mir.arg_count == 0);\n+                    ecx.push_stack_frame(\n+                        cid.instance,\n+                        mir.span,\n+                        mir,\n+                        Place::from_ptr(ptr, layout.align),\n+                        cleanup,\n+                    )?;\n+\n+                    while ecx.step()? {}\n+                    ptr.alloc_id\n+                }\n+            };\n+            let ptr = MemoryPointer::new(alloc, 0).into();\n+            // always try to read the value and report errors\n+            Ok((ptr, layout.ty))\n+        })();\n+        let (mem_ptr, _) = res?;\n+        Ok(mem_ptr.alloc_id)\n     }\n \n     fn box_alloc<'a>("}]}