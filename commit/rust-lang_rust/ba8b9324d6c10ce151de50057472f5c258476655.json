{"sha": "ba8b9324d6c10ce151de50057472f5c258476655", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGI5MzI0ZDZjMTBjZTE1MWRlNTAwNTc0NzJmNWMyNTg0NzY2NTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-21T08:39:33Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-21T23:02:34Z"}, "message": "Move `placement_in_syntax` gated feature checking from expansion to the post-expansion visitor", "tree": {"sha": "e3cbb0eb373a2f70240d3f447e343ee8f59d9064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3cbb0eb373a2f70240d3f447e343ee8f59d9064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8b9324d6c10ce151de50057472f5c258476655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8b9324d6c10ce151de50057472f5c258476655", "html_url": "https://github.com/rust-lang/rust/commit/ba8b9324d6c10ce151de50057472f5c258476655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8b9324d6c10ce151de50057472f5c258476655/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b49cd2000859c8208cf15a78441a72a3edc499", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b49cd2000859c8208cf15a78441a72a3edc499", "html_url": "https://github.com/rust-lang/rust/commit/82b49cd2000859c8208cf15a78441a72a3edc499"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "df1bbf5f26ecd3101ae8443bfba94b8fb6375ad1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba8b9324d6c10ce151de50057472f5c258476655/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8b9324d6c10ce151de50057472f5c258476655/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ba8b9324d6c10ce151de50057472f5c258476655", "patch": "@@ -70,7 +70,6 @@ impl_macro_generable! {\n }\n \n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n-    let expr_span = e.span;\n     return e.and_then(|ast::Expr {id, node, span, attrs}| match node {\n \n         // expr_mac should really be expr_ext or something; it's the\n@@ -79,21 +78,6 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             expand_mac_invoc(mac, None, attrs.into_attr_vec(), span, fld)\n         }\n \n-        ast::ExprKind::InPlace(placer, value_expr) => {\n-            // Ensure feature-gate is enabled\n-            if !fld.cx.ecfg.features.unwrap().placement_in_syntax {\n-                feature_gate::emit_feature_err(\n-                    &fld.cx.parse_sess.span_diagnostic, \"placement_in_syntax\", expr_span,\n-                    feature_gate::GateIssue::Language, feature_gate::EXPLAIN_PLACEMENT_IN\n-                );\n-            }\n-\n-            let placer = fld.fold_expr(placer);\n-            let value_expr = fld.fold_expr(value_expr);\n-            fld.cx.expr(span, ast::ExprKind::InPlace(placer, value_expr))\n-                .with_attrs(fold_thin_attrs(attrs, fld))\n-        }\n-\n         ast::ExprKind::While(cond, body, opt_ident) => {\n             let cond = fld.fold_expr(cond);\n             let (body, opt_ident) = expand_loop_block(body, opt_ident, fld);"}, {"sha": "dbef06f7aa495532b360016a2c5e258bb88d8cd3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba8b9324d6c10ce151de50057472f5c258476655/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8b9324d6c10ce151de50057472f5c258476655/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ba8b9324d6c10ce151de50057472f5c258476655", "patch": "@@ -997,6 +997,9 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Try(..) => {\n                 gate_feature_post!(&self, question_mark, e.span, \"the `?` operator is not stable\");\n             }\n+            ast::ExprKind::InPlace(..) => {\n+                gate_feature_post!(&self, placement_in_syntax, e.span, EXPLAIN_PLACEMENT_IN);\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}]}