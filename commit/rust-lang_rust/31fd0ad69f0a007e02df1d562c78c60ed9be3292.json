{"sha": "31fd0ad69f0a007e02df1d562c78c60ed9be3292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZmQwYWQ2OWYwYTAwN2UwMmRmMWQ1NjJjNzhjNjBlZDliZTMyOTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-26T10:58:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-26T10:58:15Z"}, "message": "Rollup merge of #77076 - GuillaumeGomez:missing-code-examples-slice-iter, r=Dylan-DPC\n\nAdd missing code examples on slice iter types\n\nr? @Dylan-DPC", "tree": {"sha": "b3a3652bed90e992468d54e058fa4c37b77b2cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a3652bed90e992468d54e058fa4c37b77b2cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31fd0ad69f0a007e02df1d562c78c60ed9be3292", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbx7ICRBK7hj4Ov3rIwAAdHIIAKOVhqcJmllweYFUBYz8AsAV\nmLaf0t/wv/sMQlf7yNsBGadkSsJTbG7wPGXwk8AhUpOfBpamovu97FWW2GLoH86J\nNhZYXr3YsM6Res2O+ds5FTSZZeaTcMGEaJTTOoL58HNMPWvigvvt/E73urK6V8v0\naVFybH1E75VLau7unF+EC4xBOTKsH1KoOQKTd/Q9dMZx4Qw3FmbzxY9bA31INp4R\nFJW9UVBQ90qABpmNd7pCN24qB/PyJvRwfuB2vkHqHC58nFWxM7RC3UBdLtNlf5Ft\nD1s6vTSijgSPEBJgM3UHiKOj3O2He3Pf75B1Sb8Auy3WCNYZLPTEYRBjwPKwgsA=\n=IIe3\n-----END PGP SIGNATURE-----\n", "payload": "tree b3a3652bed90e992468d54e058fa4c37b77b2cb2\nparent c39598aeea81c4147b9cff1dfde6bae95c9a38a4\nparent 187162e9917b6255c5eb12434362e6c4cc9c6976\nauthor Ralf Jung <post@ralfj.de> 1601117895 +0200\ncommitter GitHub <noreply@github.com> 1601117895 +0200\n\nRollup merge of #77076 - GuillaumeGomez:missing-code-examples-slice-iter, r=Dylan-DPC\n\nAdd missing code examples on slice iter types\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31fd0ad69f0a007e02df1d562c78c60ed9be3292", "html_url": "https://github.com/rust-lang/rust/commit/31fd0ad69f0a007e02df1d562c78c60ed9be3292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31fd0ad69f0a007e02df1d562c78c60ed9be3292/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "html_url": "https://github.com/rust-lang/rust/commit/c39598aeea81c4147b9cff1dfde6bae95c9a38a4"}, {"sha": "187162e9917b6255c5eb12434362e6c4cc9c6976", "url": "https://api.github.com/repos/rust-lang/rust/commits/187162e9917b6255c5eb12434362e6c4cc9c6976", "html_url": "https://github.com/rust-lang/rust/commit/187162e9917b6255c5eb12434362e6c4cc9c6976"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "793cbf994956f695dda6a8ce4c8b402cee91f59b", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/31fd0ad69f0a007e02df1d562c78c60ed9be3292/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fd0ad69f0a007e02df1d562c78c60ed9be3292/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=31fd0ad69f0a007e02df1d562c78c60ed9be3292", "patch": "@@ -319,6 +319,13 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n ///\n /// This struct is created by the [`split`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split`]: ../../std/primitive.slice.html#method.split\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -434,6 +441,15 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -539,6 +555,13 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n ///\n /// This struct is created by the [`split_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -661,6 +684,15 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -775,6 +807,13 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n ///\n /// This struct is created by the [`rsplit`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -854,6 +893,13 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`rsplit_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit_mut(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -966,6 +1012,13 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n ///\n /// This struct is created by the [`splitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -999,6 +1052,13 @@ where\n ///\n /// This struct is created by the [`rsplitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1031,6 +1091,13 @@ where\n ///\n /// This struct is created by the [`splitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1064,6 +1131,13 @@ where\n ///\n /// This struct is created by the [`rsplitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1100,6 +1174,13 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n ///\n /// This struct is created by the [`windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['r', 'u', 's', 't'];\n+/// let iter = slice.windows(2);\n+/// ```\n+///\n /// [`windows`]: ../../std/primitive.slice.html#method.windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1239,6 +1320,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n ///\n /// This struct is created by the [`chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks(2);\n+/// ```\n+///\n /// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1400,6 +1488,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n ///\n /// This struct is created by the [`chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_mut(2);\n+/// ```\n+///\n /// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1559,6 +1654,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact(2);\n+/// ```\n+///\n /// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1708,6 +1810,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact_mut(2);\n+/// ```\n+///\n /// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1850,6 +1959,15 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n ///\n /// This struct is created by the [`array_windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_windows)]\n+///\n+/// let slice = [0, 1, 2, 3];\n+/// let iter = slice.array_windows::<2>();\n+/// ```\n+///\n /// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug, Clone, Copy)]\n@@ -1962,6 +2080,15 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n ///\n /// This struct is created by the [`array_chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks::<2>();\n+/// ```\n+///\n /// [`array_chunks`]: ../../std/primitive.slice.html#method.array_chunks\n /// [`remainder`]: ArrayChunks::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2080,6 +2207,15 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N>\n ///\n /// This struct is created by the [`array_chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks_mut::<2>();\n+/// ```\n+///\n /// [`array_chunks_mut`]: ../../std/primitive.slice.html#method.array_chunks_mut\n /// [`into_remainder`]: ../../std/slice/struct.ArrayChunksMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2190,6 +2326,13 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T,\n ///\n /// This struct is created by the [`rchunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks(2);\n+/// ```\n+///\n /// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2347,6 +2490,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n ///\n /// This struct is created by the [`rchunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_mut(2);\n+/// ```\n+///\n /// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2504,6 +2654,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact(2);\n+/// ```\n+///\n /// [`rchunks_exact`]: ../../std/primitive.slice.html#method.rchunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2657,6 +2814,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact_mut(2);\n+/// ```\n+///\n /// [`rchunks_exact_mut`]: ../../std/primitive.slice.html#method.rchunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html"}]}