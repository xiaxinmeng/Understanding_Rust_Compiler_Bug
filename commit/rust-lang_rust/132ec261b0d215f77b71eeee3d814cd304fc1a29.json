{"sha": "132ec261b0d215f77b71eeee3d814cd304fc1a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMmVjMjYxYjBkMjE1Zjc3YjcxZWVlZTNkODE0Y2QzMDRmYzFhMjk=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-02-22T22:21:43Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-02-23T13:40:08Z"}, "message": "Enable API documentation for `std::os::wasi`.\n\nThis adds API documentation support for `std::os::wasi` modeled after\nhow `std::os::unix` works, so that WASI can be documented [here] along\nwith the other platforms.\n\n[here]: https://doc.rust-lang.org/stable/std/os/index.html\n\nTwo changes of particular interest:\n\n - This changes the `AsRawFd` for `io::Stdin` for WASI to return\n   `libc::STDIN_FILENO` instead of `sys::stdio::Stdin.as_raw_fd()` (and\n   similar for `Stdout` and `Stderr`), which matches how the `unix`\n   version works. `STDIN_FILENO` etc. may not always be explicitly\n   reserved at the WASI level, but as long as we have Rust's `std` and\n   `libc`, I think it's reasonable to guarantee that we'll always use\n   `libc::STDIN_FILENO` for stdin.\n\n - This duplicates the `osstr2str` utility function, rather than\n   trying to share it across all the configurations that need it.", "tree": {"sha": "65a17c82edeeb35b3d25c17906b4d6313de96a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a17c82edeeb35b3d25c17906b4d6313de96a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/132ec261b0d215f77b71eeee3d814cd304fc1a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/132ec261b0d215f77b71eeee3d814cd304fc1a29", "html_url": "https://github.com/rust-lang/rust/commit/132ec261b0d215f77b71eeee3d814cd304fc1a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/132ec261b0d215f77b71eeee3d814cd304fc1a29/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "fad5886def700b96e3ce9730062440182d4de282", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=132ec261b0d215f77b71eeee3d814cd304fc1a29", "patch": "@@ -22,6 +22,9 @@ pub use crate::sys::windows_ext as windows;\n #[doc(cfg(target_os = \"linux\"))]\n pub mod linux;\n \n+#[cfg(doc)]\n+pub use crate::sys::wasi_ext as wasi;\n+\n // If we're not documenting libstd then we just expose the main modules as we otherwise would.\n \n #[cfg(not(doc))]"}, {"sha": "d3f53801d2d0fc0b42902b438b3d9c6bea6869c4", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=132ec261b0d215f77b71eeee3d814cd304fc1a29", "patch": "@@ -61,9 +61,9 @@ cfg_if::cfg_if! {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as unix_ext;\n     } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n+                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On wasm right now the module below doesn't compile\n+        // On non-WASI wasm right now the module below doesn't compile\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n@@ -85,9 +85,9 @@ cfg_if::cfg_if! {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as windows_ext;\n     } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n+                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On wasm right now the shim below doesn't compile, so\n+        // On non-WASI wasm right now the shim below doesn't compile, so\n         // just omit it\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n         #[allow(missing_docs)]\n@@ -106,3 +106,25 @@ cfg_if::cfg_if! {\n         pub mod windows_ext;\n     }\n }\n+\n+#[cfg(doc)]\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"wasi\")] {\n+        // On WASI we'll document what's already available\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use self::ext as wasi_ext;\n+    } else if #[cfg(any(target_os = \"hermit\",\n+                        target_arch = \"wasm32\",\n+                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n+        // On non-WASI wasm right now the module below doesn't compile\n+        // (missing things in `libc` which is empty) so just omit everything\n+        // with an empty module\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        #[allow(missing_docs)]\n+        pub mod wasi_ext {}\n+    } else {\n+        // On other platforms like Windows document the bare bones of WASI\n+        #[path = \"wasi/ext/mod.rs\"]\n+        pub mod wasi_ext;\n+    }\n+}"}, {"sha": "66b6caf25127d59ba3c590ddeabdfee48a14a315", "filename": "library/std/src/sys/wasi/ext/fs.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=132ec261b0d215f77b71eeee3d814cd304fc1a29", "patch": "@@ -3,11 +3,14 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n+use crate::ffi::OsStr;\n use crate::fs::{self, File, Metadata, OpenOptions};\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n-use crate::sys::fs::osstr2str;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n+// Used for `File::read` on intra-doc links\n+#[allow(unused_imports)]\n+use io::{Read, Write};\n \n /// WASI-specific extensions to [`File`].\n pub trait FileExt {\n@@ -54,11 +57,11 @@ pub trait FileExt {\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n+    /// [`io::ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n+    /// the buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -131,16 +134,16 @@ pub trait FileExt {\n     /// The current file cursor is not affected by this function.\n     ///\n     /// This method will continuously call [`write_at`] until there is no more data\n-    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n+    /// to be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n+    /// not of [`io::ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n+    /// non-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n     /// [`write_at`]: FileExt::write_at\n     #[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]\n@@ -426,7 +429,7 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// WASI-specific extensions for [`FileType`].\n+/// WASI-specific extensions for [`fs::FileType`].\n ///\n /// Adds support for special WASI file types such as block/character devices,\n /// pipes, and sockets.\n@@ -517,8 +520,12 @@ pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(\n \n /// Create a symbolic link.\n ///\n-/// This is a convenience API similar to [`std::os::unix::fs::symlink`] and\n-/// [`std::os::windows::fs::symlink_file`] and [`symlink_dir`](std::os::windows::fs::symlink_dir).\n+/// This is a convenience API similar to `std::os::unix::fs::symlink` and\n+/// `std::os::windows::fs::symlink_file` and `std::os::windows::fs::symlink_dir`.\n pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()> {\n     crate::sys::fs::symlink(old_path.as_ref(), new_path.as_ref())\n }\n+\n+fn osstr2str(f: &OsStr) -> io::Result<&str> {\n+    f.to_str().ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"input must be utf-8\"))\n+}"}, {"sha": "d0edfa9f35f907bb78ef9337a8c697010bf8bf53", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=132ec261b0d215f77b71eeee3d814cd304fc1a29", "patch": "@@ -145,36 +145,36 @@ impl IntoRawFd for fs::File {\n \n impl AsRawFd for io::Stdin {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdin.as_raw_fd()\n+        libc::STDIN_FILENO\n     }\n }\n \n impl AsRawFd for io::Stdout {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdout.as_raw_fd()\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stderr.as_raw_fd()\n+        libc::STDERR_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdin.as_raw_fd()\n+        libc::STDIN_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdout.as_raw_fd()\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stderr.as_raw_fd()\n+        libc::STDERR_FILENO\n     }\n }"}, {"sha": "8a83b24700391272b02bbe41e23826b57e66ae69", "filename": "library/std/src/sys/wasi/ext/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132ec261b0d215f77b71eeee3d814cd304fc1a29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs?ref=132ec261b0d215f77b71eeee3d814cd304fc1a29", "patch": "@@ -1,4 +1,32 @@\n+//! Platform-specific extensions to `std` for WASI.\n+//!\n+//! Provides access to platform-level information on WASI, and exposes\n+//! WASI-specific functions that would otherwise be inappropriate as\n+//! part of the core `std` library.\n+//!\n+//! It exposes more ways to deal with platform-specific strings (`OsStr`,\n+//! `OsString`), allows to set permissions more granularly, extract low-level\n+//! file descriptors from files and sockets, and has platform-specific helpers\n+//! for spawning processes.\n+//!\n+//! # Examples\n+//!\n+//! ```no_run\n+//! use std::fs::File;\n+//! use std::os::wasi::prelude::*;\n+//!\n+//! fn main() -> std::io::Result<()> {\n+//!     let f = File::create(\"foo.txt\")?;\n+//!     let fd = f.as_raw_fd();\n+//!\n+//!     // use fd with native WASI bindings\n+//!\n+//!     Ok(())\n+//! }\n+//! ```\n+\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![doc(cfg(target_os = \"wasi\"))]\n \n pub mod ffi;\n pub mod fs;"}]}