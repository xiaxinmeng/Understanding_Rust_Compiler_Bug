{"sha": "cf99f504fde3cab40e4b961281e53bbe18858829", "node_id": "C_kwDOAAsO6NoAKGNmOTlmNTA0ZmRlM2NhYjQwZTRiOTYxMjgxZTUzYmJlMTg4NTg4Mjk", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-24T23:41:43Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-24T23:41:43Z"}, "message": "remove extra lifetime", "tree": {"sha": "703eb9ccc1cfa9b5a3dc48a06cee40801d7eb8f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703eb9ccc1cfa9b5a3dc48a06cee40801d7eb8f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf99f504fde3cab40e4b961281e53bbe18858829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf99f504fde3cab40e4b961281e53bbe18858829", "html_url": "https://github.com/rust-lang/rust/commit/cf99f504fde3cab40e4b961281e53bbe18858829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf99f504fde3cab40e4b961281e53bbe18858829/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "html_url": "https://github.com/rust-lang/rust/commit/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "16c9e49ff11d236a40d185a0de2aabd2d6103c11", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf99f504fde3cab40e4b961281e53bbe18858829/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf99f504fde3cab40e4b961281e53bbe18858829/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=cf99f504fde3cab40e4b961281e53bbe18858829", "patch": "@@ -8,7 +8,7 @@ use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Option<RustcVersion>) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n     if !meets_msrv(msrv.as_ref(), &msrvs::PTR_SLICE_RAW_PARTS) {\n         return;\n@@ -102,21 +102,20 @@ fn get_raw_slice_ty_mut(ty: Ty<'_>) -> Option<TypeAndMut<'_>> {\n     }\n }\n \n-struct CastChainInfo<'expr, 'tcx> {\n+struct CastChainInfo<'tcx> {\n     /// The left most part of the cast chain, or in other words, the first cast in the chain\n     /// Used for diagnostics\n-    left_cast: &'expr Expr<'expr>,\n+    left_cast: &'tcx Expr<'tcx>,\n     /// The starting type of the cast chain\n     start_ty: TypeAndMut<'tcx>,\n     /// The final type of the cast chain\n     end_ty: TypeAndMut<'tcx>,\n }\n \n-// FIXME(asquared31415): unbounded recursion linear with the number of casts in an expression\n /// Returns a `CastChainInfo` with the left-most cast in the chain and the original ptr T and final\n /// ptr U if the expression is composed of casts.\n /// Returns None if the expr is not a Cast\n-fn expr_cast_chain_tys<'tcx, 'expr>(cx: &LateContext<'tcx>, expr: &Expr<'expr>) -> Option<CastChainInfo<'expr, 'tcx>> {\n+fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<CastChainInfo<'tcx>> {\n     if let ExprKind::Cast(cast_expr, _cast_to_hir_ty) = expr.peel_blocks().kind {\n         let cast_to = cx.typeck_results().expr_ty(expr);\n         let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;"}]}