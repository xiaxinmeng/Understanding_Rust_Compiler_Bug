{"sha": "efd7a311506d3a4291dc8f9ed21bda43e39686ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDdhMzExNTA2ZDNhNDI5MWRjOGY5ZWQyMWJkYTQzZTM5Njg2YWU=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-08T02:28:37Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-10-08T02:46:19Z"}, "message": "in which rightward drift is opposed\n\nThanks to reviewers Tyler Mandry (for pointing out that this is\nridiculous and we need a helper function), Niko Matsakis (for pointing\nout that the span-calculation code only has a couple free variables),\nand Esteban K\u00fcber (for pointing out `get_generics`).", "tree": {"sha": "5dfb2fd837e42e0238ce9a20a6ccc50361033a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dfb2fd837e42e0238ce9a20a6ccc50361033a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd7a311506d3a4291dc8f9ed21bda43e39686ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd7a311506d3a4291dc8f9ed21bda43e39686ae", "html_url": "https://github.com/rust-lang/rust/commit/efd7a311506d3a4291dc8f9ed21bda43e39686ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd7a311506d3a4291dc8f9ed21bda43e39686ae/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b684ef2398b073b49498e34c6c6af583ce2a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b684ef2398b073b49498e34c6c6af583ce2a94", "html_url": "https://github.com/rust-lang/rust/commit/b1b684ef2398b073b49498e34c6c6af583ce2a94"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "2f3fdb7966f25adde4a27f6ccd3ef2f29173211c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/efd7a311506d3a4291dc8f9ed21bda43e39686ae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd7a311506d3a4291dc8f9ed21bda43e39686ae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=efd7a311506d3a4291dc8f9ed21bda43e39686ae", "patch": "@@ -1398,6 +1398,30 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n     }\n \n+    /// helper method to determine the span to remove when suggesting the\n+    /// deletion of a lifetime\n+    fn lifetime_deletion_span(&self, name: ast::Ident, generics: &hir::Generics) -> Option<Span> {\n+        if generics.params.len() == 1 {\n+            // if sole lifetime, remove the `<>` brackets\n+            Some(generics.span)\n+        } else {\n+            generics.params.iter().enumerate()\n+                .find_map(|(i, param)| {\n+                    if param.name.ident() == name {\n+                        // We also want to delete a leading or trailing comma\n+                        // as appropriate\n+                        if i >= generics.params.len() - 1 {\n+                            Some(generics.params[i-1].span.shrink_to_hi().to(param.span))\n+                        } else {\n+                            Some(param.span.to(generics.params[i+1].span.shrink_to_lo()))\n+                        }\n+                    } else {\n+                        None\n+                    }\n+                })\n+        }\n+    }\n+\n     fn check_uses_for_lifetimes_defined_by_scope(&mut self) {\n         let defined_by = match self.scope {\n             Scope::Binder { lifetimes, .. } => lifetimes,\n@@ -1475,50 +1499,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             &format!(\"lifetime parameter `{}` never used\", name)\n                         );\n                         if let Some(parent_def_id) = self.tcx.parent(def_id) {\n-                            if let Some(node_id) = self.tcx.hir.as_local_node_id(parent_def_id) {\n-                                if let Some(Node::Item(hir_item)) = self.tcx.hir.find(node_id) {\n-                                    match hir_item.node {\n-                                        hir::ItemKind::Fn(_, _, ref generics, _) |\n-                                        hir::ItemKind::Impl(_, _, _, ref generics, _, _, _) => {\n-                                            let unused_lt_span = if generics.params.len() == 1 {\n-                                                // if sole lifetime, remove the `<>` brackets\n-                                                Some(generics.span)\n-                                            } else {\n-                                                generics.params.iter().enumerate()\n-                                                    .find_map(|(i, param)| {\n-                                                        if param.name.ident() == name {\n-                                                            // We also want to delete a leading or\n-                                                            // trailing comma as appropriate\n-                                                            if i >= generics.params.len() - 1 {\n-                                                                Some(\n-                                                                    generics.params[i-1]\n-                                                                        .span.shrink_to_hi()\n-                                                                        .to(param.span)\n-                                                                )\n-                                                            } else {\n-                                                                Some(\n-                                                                    param.span.to(\n-                                                                        generics.params[i+1]\n-                                                                            .span.shrink_to_lo()\n-                                                                    )\n-                                                                )\n-                                                            }\n-                                                        } else {\n-                                                            None\n-                                                        }\n-                                                    })\n-                                            };\n-                                            if let Some(span) = unused_lt_span {\n-                                                err.span_suggestion_with_applicability(\n-                                                    span,\n-                                                    \"remove it\",\n-                                                    String::new(),\n-                                                    Applicability::MachineApplicable\n-                                                );\n-                                            }\n-                                        },\n-                                        _ => {}\n-                                    }\n+                            if let Some(generics) = self.tcx.hir.get_generics(parent_def_id) {\n+                                let unused_lt_span = self.lifetime_deletion_span(name, generics);\n+                                if let Some(span) = unused_lt_span {\n+                                    err.span_suggestion_with_applicability(\n+                                        span,\n+                                        \"remove it\",\n+                                        String::new(),\n+                                        Applicability::MachineApplicable\n+                                    );\n                                 }\n                             }\n                         }"}]}