{"sha": "7259cc82f362bd1cd00f47ff3ffc71be769162b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNTljYzgyZjM2MmJkMWNkMDBmNDdmZjNmZmM3MWJlNzY5MTYyYjY=", "commit": {"author": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-03T11:46:28Z"}, "committer": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-03T14:46:04Z"}, "message": "Resolve most of corner cases", "tree": {"sha": "1f3d6a6170cca8eee1973d7c3fd8cd47cbb6de77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3d6a6170cca8eee1973d7c3fd8cd47cbb6de77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7259cc82f362bd1cd00f47ff3ffc71be769162b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7259cc82f362bd1cd00f47ff3ffc71be769162b6", "html_url": "https://github.com/rust-lang/rust/commit/7259cc82f362bd1cd00f47ff3ffc71be769162b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7259cc82f362bd1cd00f47ff3ffc71be769162b6/comments", "author": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "html_url": "https://github.com/rust-lang/rust/commit/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "5b0d5d97103bd3bf37423b60c3e0f4ca97742cd7", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7259cc82f362bd1cd00f47ff3ffc71be769162b6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7259cc82f362bd1cd00f47ff3ffc71be769162b6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=7259cc82f362bd1cd00f47ff3ffc71be769162b6", "patch": "@@ -13,9 +13,6 @@ pub(crate) fn replace_impl_trait_with_generic(\n     let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n     let type_fn = type_param.syntax().ancestors().nth(2).and_then(ast::Fn::cast)?;\n \n-    let generic_param_list =\n-        type_fn.generic_param_list().unwrap_or_else(|| make::generic_param_list(None));\n-\n     let impl_trait_ty = type_impl_trait\n         .syntax()\n         .descendants()\n@@ -31,11 +28,16 @@ pub(crate) fn replace_impl_trait_with_generic(\n         target,\n         |edit| {\n             let generic_letter = impl_trait_ty[..1].to_string();\n-            edit.replace_ast::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter));\n \n-            let new_params = generic_param_list\n-                .append_param(make::generic_param(generic_letter, Some(impl_trait_ty)));\n-            let new_type_fn = type_fn.replace_descendant(generic_param_list, new_params);\n+            let generic_param_list = type_fn\n+                .generic_param_list()\n+                .unwrap_or_else(|| make::generic_param_list(None))\n+                .append_param(make::generic_param(generic_letter.clone(), Some(impl_trait_ty)));\n+\n+            let new_type_fn = type_fn\n+                .replace_descendant::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter))\n+                .with_generic_params(generic_param_list);\n+\n             edit.replace_ast(type_fn.clone(), new_type_fn);\n         },\n     )\n@@ -48,7 +50,7 @@ mod tests {\n     use crate::tests::check_assist;\n \n     #[test]\n-    fn replace_with_generic_params() {\n+    fn replace_impl_trait_with_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n@@ -59,4 +61,96 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn replace_impl_trait_without_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_two_impl_trait_with_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<G>(foo: impl Foo, bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_empty_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_empty_multiline_generic_params() {\n+        // FIXME: It would be more correct to place the generic parameter\n+        // on the next line after the left angle.\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<\n+            >(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B: Bar,\n+            >(bar: B) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore = \"This case is very rare but there is no simple solutions to fix it.\"]\n+    fn replace_impl_trait_with_exist_generic_letter() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<B>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<B, C: Bar>(bar: C) {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_impl_trait_with_multiline_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<\n+                G: Foo,\n+                F,\n+                H,\n+            >(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<\n+                G: Foo,\n+                F,\n+                H,\n+                B: Bar,\n+            >(bar: B) {}\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "68987dbf6c50bbac6c5f56be7d6b1768e728525e", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7259cc82f362bd1cd00f47ff3ffc71be769162b6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7259cc82f362bd1cd00f47ff3ffc71be769162b6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=7259cc82f362bd1cd00f47ff3ffc71be769162b6", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     ast::{\n         self,\n         make::{self, tokens},\n-        AstNode, TypeBoundsOwner,\n+        AstNode, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n     },\n     AstToken, Direction, InsertPosition, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n@@ -46,6 +46,19 @@ impl ast::Fn {\n         to_insert.push(body.syntax().clone().into());\n         self.replace_children(single_node(old_body_or_semi), to_insert)\n     }\n+\n+    #[must_use]\n+    pub fn with_generic_params(&self, generic_args: ast::GenericParamList) -> ast::Fn {\n+        if let Some(old) = self.generic_param_list() {\n+            return self.replace_descendant(old, generic_args);\n+        }\n+\n+        let anchor = self.name().expect(\"The function must have a name\").syntax().clone();\n+\n+        let mut to_insert: ArrayVec<[SyntaxElement; 1]> = ArrayVec::new();\n+        to_insert.push(generic_args.syntax().clone().into());\n+        self.insert_children(InsertPosition::After(anchor.into()), to_insert)\n+    }\n }\n \n fn make_multiline<N>(node: N) -> N\n@@ -461,14 +474,17 @@ impl ast::MatchArmList {\n \n impl ast::GenericParamList {\n     #[must_use]\n-    pub fn append_params(&self, params: impl IntoIterator<Item = ast::GenericParam>) -> Self {\n+    pub fn append_params(\n+        &self,\n+        params: impl IntoIterator<Item = ast::GenericParam>,\n+    ) -> ast::GenericParamList {\n         let mut res = self.clone();\n         params.into_iter().for_each(|it| res = res.append_param(it));\n         res\n     }\n \n     #[must_use]\n-    pub fn append_param(&self, item: ast::GenericParam) -> Self {\n+    pub fn append_param(&self, item: ast::GenericParam) -> ast::GenericParamList {\n         let is_multiline = self.syntax().text().contains_char('\\n');\n         let ws;\n         let space = if is_multiline {\n@@ -482,7 +498,9 @@ impl ast::GenericParamList {\n         };\n \n         let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n-        to_insert.push(space.into());\n+        if self.generic_params().next().is_some() {\n+            to_insert.push(space.into());\n+        }\n         to_insert.push(item.syntax().clone().into());\n         to_insert.push(make::token(T![,]).into());\n "}]}