{"sha": "a148a32fdc3f3767487d54147edbbe2c225c4fbf", "node_id": "C_kwDOAAsO6NoAKGExNDhhMzJmZGMzZjM3Njc0ODdkNTQxNDdlZGJiZTJjMjI1YzRmYmY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T05:52:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:13:48Z"}, "message": "Move condition out of `maybe_recover_from_question_mark`.", "tree": {"sha": "e84a0b0dd62f70153c36d97bb4dda5225831010b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84a0b0dd62f70153c36d97bb4dda5225831010b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a148a32fdc3f3767487d54147edbbe2c225c4fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a148a32fdc3f3767487d54147edbbe2c225c4fbf", "html_url": "https://github.com/rust-lang/rust/commit/a148a32fdc3f3767487d54147edbbe2c225c4fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a148a32fdc3f3767487d54147edbbe2c225c4fbf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b422451aeb61b57e2843d379d83d710ea50b9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b422451aeb61b57e2843d379d83d710ea50b9d9", "html_url": "https://github.com/rust-lang/rust/commit/1b422451aeb61b57e2843d379d83d710ea50b9d9"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "3ed19219fa4374d07b6c6ccb7b9a365d9dda8929", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a148a32fdc3f3767487d54147edbbe2c225c4fbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a148a32fdc3f3767487d54147edbbe2c225c4fbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a148a32fdc3f3767487d54147edbbe2c225c4fbf", "patch": "@@ -1,5 +1,5 @@\n use super::pat::Expected;\n-use super::ty::{AllowPlus, RecoverQuestionMark};\n+use super::ty::AllowPlus;\n use super::{\n     BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n@@ -1248,14 +1248,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Swift lets users write `Ty?` to mean `Option<Ty>`. Parse the construct and recover from it.\n-    pub(super) fn maybe_recover_from_question_mark(\n-        &mut self,\n-        ty: P<Ty>,\n-        recover_question_mark: RecoverQuestionMark,\n-    ) -> P<Ty> {\n-        if let RecoverQuestionMark::No = recover_question_mark {\n-            return ty;\n-        }\n+    pub(super) fn maybe_recover_from_question_mark(&mut self, ty: P<Ty>) -> P<Ty> {\n         if self.token == token::Question {\n             self.bump();\n             self.struct_span_err(self.prev_token.span, \"invalid `?` in type\")"}, {"sha": "6c8eb8b39d11fdf37deecac154d08f39637969c9", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a148a32fdc3f3767487d54147edbbe2c225c4fbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a148a32fdc3f3767487d54147edbbe2c225c4fbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=a148a32fdc3f3767487d54147edbbe2c225c4fbf", "patch": "@@ -312,12 +312,14 @@ impl<'a> Parser<'a> {\n         };\n \n         let span = lo.to(self.prev_token.span);\n-        let ty = self.mk_ty(span, kind);\n+        let mut ty = self.mk_ty(span, kind);\n \n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_question_mark(ty, recover_question_mark);\n+        if let RecoverQuestionMark::Yes = recover_question_mark {\n+            ty = self.maybe_recover_from_question_mark(ty);\n+        }\n         if allow_qpath_recovery { self.maybe_recover_from_bad_qpath(ty) } else { Ok(ty) }\n     }\n "}]}