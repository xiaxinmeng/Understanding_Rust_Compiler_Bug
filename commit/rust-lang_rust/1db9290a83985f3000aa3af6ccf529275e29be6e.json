{"sha": "1db9290a83985f3000aa3af6ccf529275e29be6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjkyOTBhODM5ODVmMzAwMGFhM2FmNmNjZjUyOTI3NWUyOWJlNmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-06T23:18:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-06T23:18:10Z"}, "message": "Rollup merge of #76340 - jonas-schievink:rm-dupe, r=Mark-Simulacrum\n\nRemove unused duplicated `trivial_dropck_outlives`\n\nThe copy that is actually in use now lives here:\n\nhttps://github.com/rust-lang/rust/blob/d2454643e137bde519786ee9e650c455d7ad6f34/compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs#L84", "tree": {"sha": "2059830f606496e20a8c69df88ef47369d0c3bf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2059830f606496e20a8c69df88ef47369d0c3bf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db9290a83985f3000aa3af6ccf529275e29be6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfVW4yCRBK7hj4Ov3rIwAAdHIIAAmHwLWBjhlJCtp+izAmZ9QO\nSiFa+KD77DNPeMqZWPIjbUF8Wg2ks40kp9PGhefhwwBmslV+tJwcuiSFJxIuzegc\na5LJUNXp+zhTU4v5CCr7dSoBQvxpZNfNNtkAN8kRpkriMakXtHF9/2bbS43ewDfE\nz2v7g4wYq3hylUIaZtdP5lNcviadukF2eHucZA88QtkDwqq6KZ1aJbVDZ/CqurXw\n5PDKTGDhYv3oTDMwC/RseUaDzMRiKJ1ci5c4rjXzkaH8p20XeorhZRqc+j1tfBCc\nn8Wvnu6ZrNAq93l/zHctuXDY99MMgdJQeg98cMsvTkcTfWYBwINLOu1DnD6lVSU=\n=WuiF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2059830f606496e20a8c69df88ef47369d0c3bf1\nparent 9f69a232a63fb835a5583388675d8c9af590ae43\nparent bcfd15b09c4f30ea1451440b65359902d702b3e5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599434290 +0200\ncommitter GitHub <noreply@github.com> 1599434290 +0200\n\nRollup merge of #76340 - jonas-schievink:rm-dupe, r=Mark-Simulacrum\n\nRemove unused duplicated `trivial_dropck_outlives`\n\nThe copy that is actually in use now lives here:\n\nhttps://github.com/rust-lang/rust/blob/d2454643e137bde519786ee9e650c455d7ad6f34/compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs#L84\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db9290a83985f3000aa3af6ccf529275e29be6e", "html_url": "https://github.com/rust-lang/rust/commit/1db9290a83985f3000aa3af6ccf529275e29be6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db9290a83985f3000aa3af6ccf529275e29be6e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f69a232a63fb835a5583388675d8c9af590ae43", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f69a232a63fb835a5583388675d8c9af590ae43", "html_url": "https://github.com/rust-lang/rust/commit/9f69a232a63fb835a5583388675d8c9af590ae43"}, {"sha": "bcfd15b09c4f30ea1451440b65359902d702b3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfd15b09c4f30ea1451440b65359902d702b3e5", "html_url": "https://github.com/rust-lang/rust/commit/bcfd15b09c4f30ea1451440b65359902d702b3e5"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "f9cadb3bb2dbc03948e2c413a13c103d5e3abe0d", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1db9290a83985f3000aa3af6ccf529275e29be6e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db9290a83985f3000aa3af6ccf529275e29be6e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=1db9290a83985f3000aa3af6ccf529275e29be6e", "patch": "@@ -190,74 +190,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n     }\n }\n \n-/// This returns true if the type `ty` is \"trivial\" for\n-/// dropck-outlives -- that is, if it doesn't require any types to\n-/// outlive. This is similar but not *quite* the same as the\n-/// `needs_drop` test in the compiler already -- that is, for every\n-/// type T for which this function return true, needs-drop would\n-/// return `false`. But the reverse does not hold: in particular,\n-/// `needs_drop` returns false for `PhantomData`, but it is not\n-/// trivial for dropck-outlives.\n-///\n-/// Note also that `needs_drop` requires a \"global\" type (i.e., one\n-/// with erased regions), but this function does not.\n-pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        // None of these types have a destructor and hence they do not\n-        // require anything in particular to outlive the dtor's\n-        // execution.\n-        ty::Infer(ty::FreshIntTy(_))\n-        | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::Bool\n-        | ty::Int(_)\n-        | ty::Uint(_)\n-        | ty::Float(_)\n-        | ty::Never\n-        | ty::FnDef(..)\n-        | ty::FnPtr(_)\n-        | ty::Char\n-        | ty::GeneratorWitness(..)\n-        | ty::RawPtr(_)\n-        | ty::Ref(..)\n-        | ty::Str\n-        | ty::Foreign(..)\n-        | ty::Error(_) => true,\n-\n-        // [T; N] and [T] have same properties as T.\n-        ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),\n-\n-        // (T1..Tn) and closures have same properties as T1..Tn --\n-        // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n-        ty::Closure(_, ref substs) => {\n-            substs.as_closure().upvar_tys().all(|t| trivial_dropck_outlives(tcx, t))\n-        }\n-\n-        ty::Adt(def, _) => {\n-            if Some(def.did) == tcx.lang_items().manually_drop() {\n-                // `ManuallyDrop` never has a dtor.\n-                true\n-            } else {\n-                // Other types might. Moreover, PhantomData doesn't\n-                // have a dtor, but it is considered to own its\n-                // content, so it is non-trivial. Unions can have `impl Drop`,\n-                // and hence are non-trivial as well.\n-                false\n-            }\n-        }\n-\n-        // The following *might* require a destructor: needs deeper inspection.\n-        ty::Dynamic(..)\n-        | ty::Projection(..)\n-        | ty::Param(_)\n-        | ty::Opaque(..)\n-        | ty::Placeholder(..)\n-        | ty::Infer(_)\n-        | ty::Bound(..)\n-        | ty::Generator(..) => false,\n-    }\n-}\n-\n #[derive(Debug, HashStable)]\n pub struct CandidateStep<'tcx> {\n     pub self_ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,"}]}