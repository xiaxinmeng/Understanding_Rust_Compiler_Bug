{"sha": "9a650456117284bc8fb9aa5e976531ad539bcd7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjUwNDU2MTE3Mjg0YmM4ZmI5YWE1ZTk3NjUzMWFkNTM5YmNkN2Q=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T15:55:21Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T15:55:29Z"}, "message": "TRPL: casting\n\nDue to documenting `transmute`, addresses part of #12905", "tree": {"sha": "f6c580fba8dda0c97be1fdf3d52347af19254fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c580fba8dda0c97be1fdf3d52347af19254fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a650456117284bc8fb9aa5e976531ad539bcd7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a650456117284bc8fb9aa5e976531ad539bcd7d", "html_url": "https://github.com/rust-lang/rust/commit/9a650456117284bc8fb9aa5e976531ad539bcd7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a650456117284bc8fb9aa5e976531ad539bcd7d/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5910dc0e8e396a4af7b948b83bab03f27b414a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5910dc0e8e396a4af7b948b83bab03f27b414a0e", "html_url": "https://github.com/rust-lang/rust/commit/5910dc0e8e396a4af7b948b83bab03f27b414a0e"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "90731b64a38dc5185ddba8b316a40fc7e859fac1", "filename": "src/doc/trpl/casting-between-types.md", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9a650456117284bc8fb9aa5e976531ad539bcd7d/src%2Fdoc%2Ftrpl%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a650456117284bc8fb9aa5e976531ad539bcd7d/src%2Fdoc%2Ftrpl%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcasting-between-types.md?ref=9a650456117284bc8fb9aa5e976531ad539bcd7d", "patch": "@@ -1,3 +1,89 @@\n % Casting Between Types\n \n-Coming Soon\n+Rust, with its focus on safety, provides two different ways of casting\n+different types between each other. The first, `as`, is for safe casts.\n+In contrast, `transmute` allows for arbitrary casting, and is one of the\n+most dangerous features of Rust!\n+\n+# `as`\n+\n+The `as` keyword does basic casting:\n+\n+```rust\n+let x: i32 = 5;\n+\n+let y = x as i64;\n+```\n+\n+It only allows certain kinds of casting, however:\n+\n+```rust,ignore\n+let a = [0u8, 0u8, 0u8, 0u8];\n+\n+let b = a as u32; // four eights makes 32\n+```\n+\n+This errors with:\n+\n+```text\n+error: non-scalar cast: `[u8; 4]` as `u32`\n+let b = a as u32; // four eights makes 32\n+        ^~~~~~~~\n+```\n+\n+It\u2019s a \u2018non-scalar cast\u2019 because we have multiple values here: the four\n+elements of the array. These kinds of casts are very dangerous, because they\n+make assumptions about the way that multiple underlying strucutres are\n+implemented. For this, we need something more dangerous.\n+\n+# `transmute`\n+\n+The `transmute` function is provided by a [compiler intrinsic][intrinsics], and\n+what it does is very simple, but very scary. It tells Rust to treat a value of\n+one type as though it were another type. It does this regardless of the\n+typechecking system, and just completely trusts you.\n+\n+[intrinsic]: intrinsics.html\n+\n+In our previous example, we know that an array of four `u8`s represents a `u32`\n+properly, and so we want to do the cast. Using `transmute` instead of `as`,\n+Rust lets us:\n+\n+```rust\n+use std::mem;\n+\n+unsafe {\n+    let a = [0u8, 0u8, 0u8, 0u8];\n+\n+    let b = mem::transmute::<[u8; 4], u32>(a);\n+}\n+```\n+\n+We have to wrap the operation in an `unsafe` block, but this will compile\n+successfully. Technically, only the `mem::transmute` call itself needs to be in\n+the block, but it's nice in this case to enclose everything related, so you\n+know where to look. In this case, the details about `a` are also important, and\n+so they're in the block. You'll see code in either style, sometimes the context\n+is too far away, and wrapping all of the code in `unsafe` isn't a great idea.\n+\n+While `transmute` does very little checking, it will at least make sure that\n+the types are the same size. This errors:\n+\n+```rust,ignore\n+use std::mem;\n+\n+unsafe {\n+    let a = [0u8, 0u8, 0u8, 0u8];\n+\n+    let b = mem::transmute::<[u8; 4], u64>(a);\n+}\n+```\n+\n+with:\n+\n+```text\n+error: transmute called on types with different sizes: [u8; 4] (32 bits) to u64\n+(64 bits)\n+```\n+\n+Other than that, you're on your own!"}]}