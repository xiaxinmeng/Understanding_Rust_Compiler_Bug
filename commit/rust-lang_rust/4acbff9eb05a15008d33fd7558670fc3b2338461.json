{"sha": "4acbff9eb05a15008d33fd7558670fc3b2338461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhY2JmZjllYjA1YTE1MDA4ZDMzZmQ3NTU4NjcwZmMzYjIzMzg0NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T15:15:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T15:15:28Z"}, "message": "Auto merge of #7437 - ebobrow:redundant-closure-move, r=flip1995\n\nsuggest `&mut` for redundant FnMut closures\n\nfixes #6903\n\nchangelog: suggest `&mut` for redundant FnMut closures", "tree": {"sha": "2785613188c780381e53ccae8a2ea246824bf162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2785613188c780381e53ccae8a2ea246824bf162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4acbff9eb05a15008d33fd7558670fc3b2338461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4acbff9eb05a15008d33fd7558670fc3b2338461", "html_url": "https://github.com/rust-lang/rust/commit/4acbff9eb05a15008d33fd7558670fc3b2338461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4acbff9eb05a15008d33fd7558670fc3b2338461/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07feca40c3eed82592b1e4862f9e67f57a880d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07feca40c3eed82592b1e4862f9e67f57a880d1", "html_url": "https://github.com/rust-lang/rust/commit/f07feca40c3eed82592b1e4862f9e67f57a880d1"}, {"sha": "4c398e07e042c21a4cf0e953669075275e656543", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c398e07e042c21a4cf0e953669075275e656543", "html_url": "https://github.com/rust-lang/rust/commit/4c398e07e042c21a4cf0e953669075275e656543"}], "stats": {"total": 125, "additions": 120, "deletions": 5}, "files": [{"sha": "667eb8eb283bbb09997d47f8589bd86118e53e52", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4acbff9eb05a15008d33fd7558670fc3b2338461/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acbff9eb05a15008d33fd7558670fc3b2338461/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=4acbff9eb05a15008d33fd7558670fc3b2338461", "patch": "@@ -1,15 +1,16 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::higher;\n use clippy_utils::higher::VecArgs;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, type_is_unsafe_function};\n+use clippy_utils::usage::UsedAfterExprVisitor;\n+use clippy_utils::{get_enclosing_loop_or_closure, higher};\n use clippy_utils::{is_adjusted, iter_input_pats};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id, Expr, ExprKind, Param, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, ClosureKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -86,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n     }\n }\n \n-fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+fn check_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let ExprKind::Closure(_, decl, eid, _, _) = expr.kind {\n         let body = cx.tcx.hir().body(eid);\n         let ex = &body.value;\n@@ -131,7 +132,18 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n \n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure\", |diag| {\n-                    if let Some(snippet) = snippet_opt(cx, caller.span) {\n+                    if let Some(mut snippet) = snippet_opt(cx, caller.span) {\n+                        if_chain! {\n+                            if let ty::Closure(_, substs) = fn_ty.kind();\n+                            if let ClosureKind::FnMut = substs.as_closure().kind();\n+                            if UsedAfterExprVisitor::is_found(cx, caller)\n+                                || get_enclosing_loop_or_closure(cx.tcx, expr).is_some();\n+\n+                            then {\n+                                // Mutable closure is used after current expr; we cannot consume it.\n+                                snippet = format!(\"&mut {}\", snippet);\n+                            }\n+                        }\n                         diag.span_suggestion(\n                             expr.span,\n                             \"replace the closure with the function itself\","}, {"sha": "182d8cb11ea80df397453a5bd62cb995ca8636ad", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4acbff9eb05a15008d33fd7558670fc3b2338461/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acbff9eb05a15008d33fd7558670fc3b2338461/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=4acbff9eb05a15008d33fd7558670fc3b2338461", "patch": "@@ -199,3 +199,50 @@ pub fn contains_return_break_continue_macro(expression: &Expr<'_>) -> bool {\n     recursive_visitor.visit_expr(expression);\n     recursive_visitor.seen_return_break_continue\n }\n+\n+pub struct UsedAfterExprVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    definition: HirId,\n+    past_expr: bool,\n+    used_after_expr: bool,\n+}\n+impl<'a, 'tcx> UsedAfterExprVisitor<'a, 'tcx> {\n+    pub fn is_found(cx: &'a LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+        utils::path_to_local(expr).map_or(false, |definition| {\n+            let mut visitor = UsedAfterExprVisitor {\n+                cx,\n+                expr,\n+                definition,\n+                past_expr: false,\n+                used_after_expr: false,\n+            };\n+            utils::get_enclosing_block(cx, definition).map_or(false, |block| {\n+                visitor.visit_block(block);\n+                visitor.used_after_expr\n+            })\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedAfterExprVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if self.used_after_expr {\n+            return;\n+        }\n+\n+        if expr.hir_id == self.expr.hir_id {\n+            self.past_expr = true;\n+        } else if self.past_expr && utils::path_to_local_id(expr, self.definition) {\n+            self.used_after_expr = true;\n+        } else {\n+            intravisit::walk_expr(self, expr);\n+        }\n+    }\n+}"}, {"sha": "91b837f9a85884d19cc74471d262c1016987cf79", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=4acbff9eb05a15008d33fd7558670fc3b2338461", "patch": "@@ -220,3 +220,19 @@ impl std::ops::Deref for Bar {\n fn test_deref_with_trait_method() {\n     let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n }\n+\n+fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {\n+    let mut res = Vec::new();\n+    let mut add_to_res = |n| res.push(n);\n+    x.into_iter().for_each(&mut add_to_res);\n+    y.into_iter().for_each(&mut add_to_res);\n+    z.into_iter().for_each(add_to_res);\n+}\n+\n+fn mutable_closure_in_loop() {\n+    let mut value = 0;\n+    let mut closure = |n| value += n;\n+    for _ in 0..5 {\n+        Some(1).map(&mut closure);\n+    }\n+}"}, {"sha": "1b53700289db303678d57850d0b59eb7a17b998d", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=4acbff9eb05a15008d33fd7558670fc3b2338461", "patch": "@@ -220,3 +220,19 @@ impl std::ops::Deref for Bar {\n fn test_deref_with_trait_method() {\n     let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n }\n+\n+fn mutable_closure_used_again(x: Vec<i32>, y: Vec<i32>, z: Vec<i32>) {\n+    let mut res = Vec::new();\n+    let mut add_to_res = |n| res.push(n);\n+    x.into_iter().for_each(|x| add_to_res(x));\n+    y.into_iter().for_each(|x| add_to_res(x));\n+    z.into_iter().for_each(|x| add_to_res(x));\n+}\n+\n+fn mutable_closure_in_loop() {\n+    let mut value = 0;\n+    let mut closure = |n| value += n;\n+    for _ in 0..5 {\n+        Some(1).map(|n| closure(n));\n+    }\n+}"}, {"sha": "28da8941346192d0a6e6c61c478a1cc57bb5415d", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4acbff9eb05a15008d33fd7558670fc3b2338461/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=4acbff9eb05a15008d33fd7558670fc3b2338461", "patch": "@@ -82,5 +82,29 @@ error: redundant closure\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`\n \n-error: aborting due to 13 previous errors\n+error: redundant closure\n+  --> $DIR/eta.rs:227:28\n+   |\n+LL |     x.into_iter().for_each(|x| add_to_res(x));\n+   |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:228:28\n+   |\n+LL |     y.into_iter().for_each(|x| add_to_res(x));\n+   |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:229:28\n+   |\n+LL |     z.into_iter().for_each(|x| add_to_res(x));\n+   |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `add_to_res`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:236:21\n+   |\n+LL |         Some(1).map(|n| closure(n));\n+   |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut closure`\n+\n+error: aborting due to 17 previous errors\n "}]}