{"sha": "61885df263f1f4fb992189f0d149bebcf2b698ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODg1ZGYyNjNmMWY0ZmI5OTIxODlmMGQxNDliZWJjZjJiNjk4Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T23:48:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T23:48:16Z"}, "message": "Auto merge of #87980 - Manishearth:rollup-vkuix3y, r=Manishearth\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #87916 (Implement `black_box` using intrinsic)\n - #87922 (Add c_enum_min_bits target spec field, use for arm-none and thumb-none targets)\n - #87953 (Improve formatting of closure capture migration suggestion for multi-line closures.)\n - #87965 (Silence non_fmt_panic from external macros.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "65808d4edd0465e5119b88b55d11a5cc432c09df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65808d4edd0465e5119b88b55d11a5cc432c09df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61885df263f1f4fb992189f0d149bebcf2b698ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61885df263f1f4fb992189f0d149bebcf2b698ca", "html_url": "https://github.com/rust-lang/rust/commit/61885df263f1f4fb992189f0d149bebcf2b698ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61885df263f1f4fb992189f0d149bebcf2b698ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa3190394475a84360b34e074e719d519bc40f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa3190394475a84360b34e074e719d519bc40f1", "html_url": "https://github.com/rust-lang/rust/commit/0fa3190394475a84360b34e074e719d519bc40f1"}, {"sha": "2d27976b8beabaa45cdfc538f08af0a32a82f432", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d27976b8beabaa45cdfc538f08af0a32a82f432", "html_url": "https://github.com/rust-lang/rust/commit/2d27976b8beabaa45cdfc538f08af0a32a82f432"}], "stats": {"total": 780, "additions": 667, "deletions": 113}, "files": [{"sha": "ec53625f10525014264c53f0dc895ec7c858aa19", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -2,6 +2,7 @@ use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n@@ -75,6 +76,11 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     let (span, panic, symbol_str) = panic_call(cx, f);\n \n+    if in_external_macro(cx.sess(), span) {\n+        // Nothing that can be done about it in the current crate.\n+        return;\n+    }\n+\n     // Find the span of the argument to `panic!()`, before expansion in the\n     // case of `panic!(some_macro!())`.\n     // We don't use source_callsite(), because this `panic!(..)` might itself\n@@ -152,6 +158,13 @@ fn check_panic_str<'tcx>(\n         return;\n     }\n \n+    let (span, _, _) = panic_call(cx, f);\n+\n+    if in_external_macro(cx.sess(), span) && in_external_macro(cx.sess(), arg.span) {\n+        // Nothing that can be done about it in the current crate.\n+        return;\n+    }\n+\n     let fmt_span = arg.span.source_callsite();\n \n     let (snippet, style) = match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n@@ -167,8 +180,6 @@ fn check_panic_str<'tcx>(\n         Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n-    let (span, _, _) = panic_call(cx, f);\n-\n     if n_arguments > 0 && fmt_parser.errors.is_empty() {\n         let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n             [] => vec![fmt_span],"}, {"sha": "3caca313ffddd9de044f12345c5ee3ca5c636083", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -112,9 +112,6 @@ impl IntegerExt for Integer {\n         let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));\n         let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));\n \n-        let mut min_from_extern = None;\n-        let min_default = I8;\n-\n         if let Some(ity) = repr.int {\n             let discr = Integer::from_attr(&tcx, ity);\n             let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n@@ -128,19 +125,14 @@ impl IntegerExt for Integer {\n             return (discr, ity.is_signed());\n         }\n \n-        if repr.c() {\n-            match &tcx.sess.target.arch[..] {\n-                \"hexagon\" => min_from_extern = Some(I8),\n-                // WARNING: the ARM EABI has two variants; the one corresponding\n-                // to `at_least == I32` appears to be used on Linux and NetBSD,\n-                // but some systems may use the variant corresponding to no\n-                // lower bound. However, we don't run on those yet...?\n-                \"arm\" => min_from_extern = Some(I32),\n-                _ => min_from_extern = Some(I32),\n-            }\n-        }\n-\n-        let at_least = min_from_extern.unwrap_or(min_default);\n+        let at_least = if repr.c() {\n+            // This is usually I32, however it can be different on some platforms,\n+            // notably hexagon and arm-none/thumb-none\n+            tcx.data_layout().c_enum_min_size\n+        } else {\n+            // repr(Rust) enums try to be as small as possible\n+            I8\n+        };\n \n         // If there are no negative values, we can use the unsigned fit.\n         if min >= 0 {"}, {"sha": "8ef6e142caecfe02745d6a58cdddce78fd852af6", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -36,6 +36,9 @@ pub struct TargetDataLayout {\n     pub vector_align: Vec<(Size, AbiAndPrefAlign)>,\n \n     pub instruction_address_space: AddressSpace,\n+\n+    /// Minimum size of #[repr(C)] enums (default I32 bits)\n+    pub c_enum_min_size: Integer,\n }\n \n impl Default for TargetDataLayout {\n@@ -60,6 +63,7 @@ impl Default for TargetDataLayout {\n                 (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),\n             ],\n             instruction_address_space: AddressSpace::DATA,\n+            c_enum_min_size: Integer::I32,\n         }\n     }\n }\n@@ -173,6 +177,8 @@ impl TargetDataLayout {\n             ));\n         }\n \n+        dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;\n+\n         Ok(dl)\n     }\n \n@@ -610,6 +616,17 @@ impl Integer {\n         }\n         I8\n     }\n+\n+    fn from_size(size: Size) -> Result<Self, String> {\n+        match size.bits() {\n+            8 => Ok(Integer::I8),\n+            16 => Ok(Integer::I16),\n+            32 => Ok(Integer::I32),\n+            64 => Ok(Integer::I64),\n+            128 => Ok(Integer::I128),\n+            _ => Err(format!(\"rust does not support integers with {} bits\", size.bits())),\n+        }\n+    }\n }\n \n /// Fundamental unit of memory access and layout."}, {"sha": "ed4779c0c023210a112ffd5fa61392f875db0db6", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -20,6 +20,8 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "b60e2895d7727db2863ac5638ca4c872f1609239", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -21,6 +21,8 @@ pub fn target() -> Target {\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "88040f49d9e4e926dfd4cce8cb4776f64427d87b", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -28,6 +28,7 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     };\n     Target {"}, {"sha": "af324843cede5c7090c01279be7fef673308a1c7", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -19,6 +19,8 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n+        // GCC and Clang default to 8 for arm-none here\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     };\n     Target {"}, {"sha": "c0e970983e70484470aceaeb49af0142128c9385", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -19,6 +19,8 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "b126887b27b33f946dded05057718f7945e61f47", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -20,6 +20,8 @@ pub fn target() -> Target {\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "27d306c41b79550f462224fbd7d32e44909f936c", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -13,6 +13,8 @@ pub fn target() -> Target {\n     base.dynamic_linking = true;\n     base.executables = true;\n \n+    base.c_enum_min_bits = 8;\n+\n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n         pointer_width: 32,"}, {"sha": "911956859b8619b263b1e1c252627642bea512bd", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -1336,6 +1336,9 @@ pub struct TargetOptions {\n \n     /// If present it's a default value to use for adjusting the C ABI.\n     pub default_adjusted_cabi: Option<Abi>,\n+\n+    /// Minimum number of bits in #[repr(C)] enum. Defaults to 32.\n+    pub c_enum_min_bits: u64,\n }\n \n impl Default for TargetOptions {\n@@ -1440,6 +1443,7 @@ impl Default for TargetOptions {\n             split_debuginfo: SplitDebuginfo::Off,\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n+            c_enum_min_bits: 32,\n         }\n     }\n }\n@@ -1604,6 +1608,12 @@ impl Target {\n                     base.$key_name = s;\n                 }\n             } );\n+            ($key_name:ident, u64) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n+                    base.$key_name = s;\n+                }\n+            } );\n             ($key_name:ident, Option<u32>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n@@ -2017,6 +2027,7 @@ impl Target {\n         key!(split_debuginfo, SplitDebuginfo)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n+        key!(c_enum_min_bits, u64);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2255,6 +2266,7 @@ impl ToJson for Target {\n         target_option_val!(has_thumb_interworking);\n         target_option_val!(split_debuginfo);\n         target_option_val!(supported_sanitizers);\n+        target_option_val!(c_enum_min_bits);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());"}, {"sha": "e2e528561e79719c9a78f8d29b26c394fa0ba584", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -53,6 +53,9 @@ pub fn opts() -> TargetOptions {\n         // LLVM is eager to trash the link register when calling `noreturn` functions, which\n         // breaks debugging. Preserve LR by default to prevent that from happening.\n         frame_pointer: FramePointer::Always,\n+        // ARM supports multiple ABIs for enums, the linux one matches the default of 32 here\n+        // but any arm-none or thumb-none target will be defaulted to 8 on GCC and clang\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     }\n }"}, {"sha": "9cf741bc63fef60c593a354f44e414c737edafa9", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -649,11 +649,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                             Ok(s) => {\n                                 let trimmed = s.trim_start();\n+                                let mut lines = trimmed.lines();\n+                                let line1 = lines.next().unwrap_or_default();\n \n                                 // If the closure contains a block then replace the opening brace\n                                 // with \"{ let _ = (..); \"\n-                                let sugg = if let Some('{') = trimmed.chars().next() {\n-                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..])\n+                                let sugg = if line1.trim_end() == \"{\" {\n+                                    // This is a multi-line closure with just a `{` on the first line,\n+                                    // so we put the `let` on its own line.\n+                                    // We take the indentation from the next non-empty line.\n+                                    let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n+                                    let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n+                                    format!(\"{{\\n{}{};{}\", indent, migration_string, &trimmed[line1.len()..])\n+                                } else if line1.starts_with('{') {\n+                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..].trim_start())\n                                 } else {\n                                     format!(\"{{ {}; {} }}\", migration_string, s)\n                                 };"}, {"sha": "35be93b0590326121fad5b9b18aa71d5c8b157f2", "filename": "src/test/ui/auxiliary/fancy-panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -1,5 +1,8 @@\n #[macro_export]\n macro_rules! fancy_panic {\n+    () => {\n+        panic!(\"{}\");\n+    };\n     ($msg:expr) => {\n         panic!($msg)\n     };"}, {"sha": "546ad9622d4b35aea90c5c877b19ec8f150c578c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -55,7 +55,8 @@ impl Clone for U {\n \n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n-    let c = || { let _ = &f; \n+    let c = || {\n+        let _ = &f;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see"}, {"sha": "1b10f799bca4a8201e3a9cb89675d74b6f1a0b64", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -58,12 +58,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f; \n+LL ~     let c = || {\n+LL +         let _ = &f;\n LL +\n LL +\n LL +\n LL +\n-LL +         let f_1 = f.1;\n  ...\n \n error: aborting due to 3 previous errors"}, {"sha": "862a2b99019facefc5ead134d42cc9dcb6dc4d45", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -12,7 +12,8 @@ fn test1_all_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1, &t2); \n+    let c = || {\n+        let _ = (&t, &t1, &t2);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n@@ -38,7 +39,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1); \n+    let c = || {\n+        let _ = (&t, &t1);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -59,7 +61,8 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -80,7 +83,8 @@ fn test4_only_non_copy_types_need_migration() {\n     // `t1` is Copy because all of its elements are Copy\n     let t1 = (0i32, 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -101,7 +105,8 @@ fn test5_only_drop_types_need_migration() {\n     // `s` doesn't implement Drop or any elements within it, and doesn't need migration\n     let s = S(0i32, 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -119,7 +124,8 @@ fn test5_only_drop_types_need_migration() {\n fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = move || { let _ = (&t1, &t); \n+    let c = move || {\n+        let _ = (&t1, &t);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -139,7 +145,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "c85519d6b314eda82051ab3587dd12e5c77c467b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1, &t2);\n LL +\n LL +\n LL +\n LL + \n-LL +         let _t = t.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -154,12 +154,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = (&t1, &t); \n+LL ~     let c = move || {\n+LL +         let _ = (&t1, &t);\n LL +\n LL +\n LL +\n LL +         println!(\"{} {}\", t1.1, t.1);\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: aborting due to 7 previous errors"}, {"sha": "6e58ffb6035e584f58e29c3f3eb85f524db5bdb4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -34,7 +34,8 @@ impl<T> Drop for GenericStruct<T> {\n fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -54,7 +55,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n     let t = Wrapper(GenericStruct(SigDrop {}, SigDrop {}), 5);\n \n     // move is used to force i32 to be copied instead of being a ref\n-    let c = move || { let _ = &t; \n+    let c = move || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "8461939dc3d2a8053c7297d8bdc26246ca2fea2f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -41,12 +41,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = &t; \n+LL ~     let c = move || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.1;\n-LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "d9fa0a7fc3596b72bde73d89a40bc97a5503bd70", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -16,7 +16,8 @@ impl Drop for Foo {\n \n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured"}, {"sha": "2bfdeffbcb1012fd481c30f0b1d3db72258866a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order"}, {"sha": "0ad382061a1f59b10785f7ef378e0ff0a1e77db4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -17,7 +17,8 @@ where\n     F: FnOnce(),\n {\n     let f = panic::AssertUnwindSafe(f);\n-    let result = panic::catch_unwind(move || { let _ = &f; \n+    let result = panic::catch_unwind(move || {\n+        let _ = &f;\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see"}, {"sha": "02ee0419b9e31884491d67fb7c8e4a0a9d9b3f5a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -15,12 +15,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n-LL ~     let result = panic::catch_unwind(move || { let _ = &f; \n+LL ~     let result = panic::catch_unwind(move || {\n+LL +         let _ = &f;\n LL +\n LL +\n LL +\n LL +\n-LL +         f.0()\n  ...\n \n error: aborting due to previous error"}, {"sha": "ef077a3ce3f98415d2793db2500951ee140fad96", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -20,7 +20,8 @@ impl Clone for U {\n fn test_multi_issues() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n     let f2 = U(S(String::from(\"bar\")), T(0));\n-    let c = || { let _ = (&f1, &f2); \n+    let c = || {\n+        let _ = (&f1, &f2);\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -39,7 +40,8 @@ fn test_multi_issues() {\n \n fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(String::from(\"foo\")), T(0));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -64,7 +66,8 @@ impl Clone for U1 {\n \n fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n@@ -83,7 +86,8 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n \n fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n-    let c = || { let _ = &f1; \n+    let c = || {\n+        let _ = &f1;\n         //~^ ERROR: `Clone` trait implementation for closure and drop order\n         //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see"}, {"sha": "d4bd029052a00668411c0a4acbb8fd0f09ec9167", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -21,12 +21,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&f1, &f2); \n+LL ~     let c = || {\n+LL +         let _ = (&f1, &f2);\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -41,12 +41,12 @@ LL |         let _f_1 = f1.0;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_1 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n@@ -67,8 +67,8 @@ LL |         let _f_2 = f1.2;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n-LL +\n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n@@ -96,12 +96,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1` to be fully captured\n    |\n-LL ~     let c = || { let _ = &f1; \n+LL ~     let c = || {\n+LL +         let _ = &f1;\n LL +\n LL +\n LL +\n LL +\n-LL +         let _f_0 = f1.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure"}, {"sha": "fa0831460548d8d82a274099d5edaefb100fc0d0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -17,7 +17,8 @@ struct ConstainsDropField(Foo, Foo);\n fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -42,7 +43,8 @@ struct U(T, T);\n fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n-    let c = || { let _ = &u; \n+    let c = || {\n+        let _ = &u;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured"}, {"sha": "f0b1e2c4c866af4fdc96b016468cd3dbfcfb4374", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -18,12 +18,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -51,12 +51,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n-LL ~     let c = || { let _ = &u; \n+LL ~     let c = || {\n+LL +         let _ = &u;\n LL +\n LL +\n LL +\n LL +         let _x = u.0.0;\n-LL +\n  ...\n \n error: aborting due to 2 previous errors"}, {"sha": "0926c07eed3791b7379d8dee3d21231bc7536b4c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -22,7 +22,8 @@ fn test1_all_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1, &t2); \n+    let c = || {\n+        let _ = (&t, &t1, &t2);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n@@ -47,7 +48,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1); \n+    let c = || {\n+        let _ = (&t, &t1);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -68,7 +70,8 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -88,7 +91,8 @@ fn test3_only_by_value_need_migration() {\n fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -106,7 +110,8 @@ fn test4_type_contains_drop_need_migration() {\n fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -122,7 +127,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n-    let c = || { let _ = &t; \n+    let c = || {\n+        let _ = &t;\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n@@ -140,7 +146,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n-    let c = move || { let _ = (&t1, &t); \n+    let c = move || {\n+        let _ = (&t1, &t);\n         //~^ ERROR: drop order\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -160,7 +167,8 @@ fn test8_drop_order_and_blocks() {\n         let tuple =\n           (String::from(\"foo\"), String::from(\"bar\"));\n         {\n-            let c = || { let _ = &tuple; \n+            let c = || {\n+                let _ = &tuple;\n                 //~^ ERROR: drop order\n                 //~| NOTE: for more information, see\n                 //~| HELP: add a dummy let to cause `tuple` to be fully captured\n@@ -178,7 +186,8 @@ fn test9_drop_order_and_nested_closures() {\n     let tuple =\n         (String::from(\"foo\"), String::from(\"bar\"));\n     let b = || {\n-        let c = || { let _ = &tuple; \n+        let c = || {\n+            let _ = &tuple;\n             //~^ ERROR: drop order\n             //~| NOTE: for more information, see\n             //~| HELP: add a dummy let to cause `tuple` to be fully captured"}, {"sha": "643807d614a3494736951f55e3c9ff547fd64813", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -28,12 +28,12 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1, &t2); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1, &t2);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -57,12 +57,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n-LL ~     let c = || { let _ = (&t, &t1); \n+LL ~     let c = || {\n+LL +         let _ = (&t, &t1);\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -80,12 +80,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -103,12 +103,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -126,12 +126,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -149,12 +149,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n-LL ~     let c = || { let _ = &t; \n+LL ~     let c = || {\n+LL +         let _ = &t;\n LL +\n LL +\n LL +\n LL +         let _t = t.1;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -177,12 +177,12 @@ LL | }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n-LL ~     let c = move || { let _ = (&t1, &t); \n+LL ~     let c = move || {\n+LL +         let _ = (&t1, &t);\n LL +\n LL +\n LL +\n LL +         println!(\"{:?} {:?}\", t1.1, t.1);\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -200,12 +200,12 @@ LL |         }\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL ~             let c = || { let _ = &tuple; \n+LL ~             let c = || {\n+LL +                 let _ = &tuple;\n LL +\n LL +\n LL +\n LL +                 tuple.0;\n-LL +\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n@@ -223,12 +223,12 @@ LL |     };\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n    |\n-LL ~         let c = || { let _ = &tuple; \n+LL ~         let c = || {\n+LL +             let _ = &tuple;\n LL +\n LL +\n LL +\n LL +             tuple.0;\n-LL +\n  ...\n \n error: aborting due to 9 previous errors"}, {"sha": "3b43b1b83fa6e039f4185587a132972c5fa8d63d", "filename": "src/test/ui/layout/thumb-enum.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: --target thumbv8m.main-none-eabihf\n+// needs-llvm-components: arm\n+//\n+// Verify that thumb targets implement the repr(C) for enums correctly.\n+//\n+// See #87917\n+#![feature(never_type, rustc_attrs, no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum A { Apple } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum B { Banana = 255, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum C { Chaenomeles = 256, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum P { Peach = 0x1000_0000isize, } //~ ERROR: layout_of\n+\n+const TANGERINE: usize = 0x8100_0000; // hack to get negative numbers without negation operator!\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum T { Tangerine = TANGERINE as isize } //~ ERROR: layout_of"}, {"sha": "898a61b904db50bd0dbf1fa8f6feb492d2878290", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -0,0 +1,442 @@\n+error: layout_of(A) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 0..=0,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:16:1\n+   |\n+LL | enum A { Apple }\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: layout_of(B) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 255..=255,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:20:1\n+   |\n+LL | enum B { Banana = 255, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(C) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 1,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 2,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I16,\n+                    false,\n+                ),\n+                valid_range: 256..=256,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 1,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 2,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:24:1\n+   |\n+LL | enum C { Chaenomeles = 256, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(P) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 268435456..=268435456,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:28:1\n+   |\n+LL | enum P { Peach = 0x1000_0000isize, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(T) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    true,\n+                ),\n+                valid_range: 2164260864..=2164260864,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:34:1\n+   |\n+LL | enum T { Tangerine = TANGERINE as isize }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "0de424ce279f3e4cb6cdbc33ebbb5bcc43c66664", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -26,8 +26,8 @@ fn main() {\n     fancy_panic::fancy_panic!(\"test {} 123\");\n     //~^ WARN panic message contains an unused formatting placeholder\n \n-    fancy_panic::fancy_panic!(S);\n-    //~^ WARN panic message is not a string literal\n+    fancy_panic::fancy_panic!(); // OK\n+    fancy_panic::fancy_panic!(S); // OK\n \n     macro_rules! a {\n         () => { 123 };"}, {"sha": "4b18f5546b9b80121bfbe4bffeece9792f105b93", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61885df263f1f4fb992189f0d149bebcf2b698ca/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=61885df263f1f4fb992189f0d149bebcf2b698ca", "patch": "@@ -180,15 +180,6 @@ LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n \n-warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:29:31\n-   |\n-LL |     fancy_panic::fancy_panic!(S);\n-   |                               ^\n-   |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-\n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:36:12\n    |\n@@ -285,5 +276,5 @@ help: or use std::panic::panic_any instead\n LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n-warning: 20 warnings emitted\n+warning: 19 warnings emitted\n "}]}