{"sha": "0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmZhZTZjYjcyYTE5ZTY5MGI3NGJkNTdhNjdiOWIzNmRlZWY4MWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T17:17:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "fix validating arrays of ZSTs\n\nFixes #54751", "tree": {"sha": "dd6c095341092816aa5e0608b997eb13da91f71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6c095341092816aa5e0608b997eb13da91f71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "html_url": "https://github.com/rust-lang/rust/commit/0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "html_url": "https://github.com/rust-lang/rust/commit/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "f8e1e9e55d530e43d37ba0af3722d8d175bbfa2a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "patch": "@@ -131,6 +131,18 @@ impl MemPlace {\n }\n \n impl<'tcx> MPlaceTy<'tcx> {\n+    /// Produces a MemPlace that works for ZST but nothing else\n+    #[inline]\n+    pub fn dangling(layout: TyLayout<'tcx>, cx: impl HasDataLayout) -> Self {\n+        MPlaceTy {\n+            mplace: MemPlace::from_scalar_ptr(\n+                Scalar::from_uint(layout.align.abi(), cx.pointer_size()),\n+                layout.align\n+            ),\n+            layout\n+        }\n+    }\n+\n     #[inline]\n     fn from_aligned_ptr(ptr: Pointer, layout: TyLayout<'tcx>) -> Self {\n         MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align), layout }"}, {"sha": "23f09cf108e5ae588d547975b46c841fa095c399", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "patch": "@@ -365,8 +365,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // The fields don't need to correspond to any bit pattern of the union's fields.\n                 // See https://github.com/rust-lang/rust/issues/32836#issuecomment-406875389\n             },\n-            layout::FieldPlacement::Array { stride, .. } if !dest.layout.is_zst() => {\n-                let dest = dest.to_mem_place(); // non-ZST array/slice/str cannot be immediate\n+            layout::FieldPlacement::Array { stride, .. } => {\n+                let dest = if dest.layout.is_zst() {\n+                    // it's a ZST, the memory content cannot matter\n+                    MPlaceTy::dangling(dest.layout, self)\n+                } else {\n+                    // non-ZST array/slice/str cannot be immediate\n+                    dest.to_mem_place()\n+                };\n                 match dest.layout.ty.sty {\n                     // Special handling for strings to verify UTF-8\n                     ty::Str => {\n@@ -429,9 +435,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     }\n                 }\n             },\n-            layout::FieldPlacement::Array { .. } => {\n-                // An empty array.  Nothing to do.\n-            }\n             layout::FieldPlacement::Arbitrary { ref offsets, .. } => {\n                 for i in 0..offsets.len() {\n                     let field = self.operand_field(dest, i as u64)?;"}, {"sha": "99305beee52814c58bd999e3d005d93fa5cab671", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-union Foo {\n-    a: usize,\n-    b: Bar,\n-    c: &'static Bar,\n-}\n+#![feature(const_transmute)]\n+\n+use std::mem;\n \n #[derive(Copy, Clone)]\n enum Bar {}\n \n-const BAD_BAD_BAD: Bar = unsafe { Foo { a: 1 }.b };\n+const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n+//~^ ERROR this constant likely exhibits undefined behavior\n+\n+const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n //~^ ERROR this constant likely exhibits undefined behavior\n \n-const BAD_BAD_REF: &Bar = unsafe { Foo { a: 1 }.c };\n+const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n //~^ ERROR this constant likely exhibits undefined behavior\n \n fn main() {"}, {"sha": "136d5f29199467a284a8ae9b000a68399691ad03", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a2fae6cb72a19e690b74bd57a67b9b36deef81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=0a2fae6cb72a19e690b74bd57a67b9b36deef81c", "patch": "@@ -1,19 +1,27 @@\n error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/ub-uninhabit.rs:20:1\n+  --> $DIR/ub-uninhabit.rs:18:1\n    |\n-LL | const BAD_BAD_BAD: Bar = unsafe { Foo { a: 1 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n+LL | const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/ub-uninhabit.rs:23:1\n+  --> $DIR/ub-uninhabit.rs:21:1\n    |\n-LL | const BAD_BAD_REF: &Bar = unsafe { Foo { a: 1 }.c };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n+LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 2 previous errors\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/ub-uninhabit.rs:24:1\n+   |\n+LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at [0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}