{"sha": "80fcd7c40ec46613b130b5d732162ecbfda6c509", "node_id": "C_kwDOAAsO6NoAKDgwZmNkN2M0MGVjNDY2MTNiMTMwYjVkNzMyMTYyZWNiZmRhNmM1MDk", "commit": {"author": {"name": "Cassaundra Smith", "email": "cass@cassaundra.org", "date": "2023-01-30T21:39:25Z"}, "committer": {"name": "Cassaundra Smith", "email": "cass@cassaundra.org", "date": "2023-01-30T21:39:25Z"}, "message": "Fix invalid float literal suggestions when recovering an integer\n\nOnly suggest adding a zero to integers with a preceding dot when the change will\nresult in a valid floating point literal.\n\nFor example, `.0x0` should not be turned into `0.0x0`.", "tree": {"sha": "57f2681328bbd5129ed1fe708f6f9b80e230be5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57f2681328bbd5129ed1fe708f6f9b80e230be5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80fcd7c40ec46613b130b5d732162ecbfda6c509", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEwVHIrt/ZuT7try0K6Ah7Dz1nTZsFAmPYORIACgkQ6Ah7Dz1n\nTZszQg//ekahd0Bcv3dtey5jBytsomO+wXCzH5+H2YljbaFbvy5iP8kx4ZPgZD7J\nA7mIfvXRCrShh+BHwyaATXagXXSzZw5Zsm+VtbrbTeJDimItRLBMNxiYWWwUk0MH\ni6tUdbZQuzO3kDHkkMXc2btBXjcw+g+3v2JpTb/TxLKqIE7HRZux4vv/hIGTwiER\n6To0vbHQwBWVGo8NUqu9Mud9Jx2XzaVjn4uHqLPQjdmoE0Z0sr1dB/XBtixnDd8B\nHaPbXKxYaZBC695sOA0nnjOCFNGLfw3Y+r3SwCnvUJL1HooutPRoBf8EarCXvB0u\nsNljDca6W0WwEjbEl3i5//U2tm3ooBHIq3GRKqbWUZVd8388uWtfi8VFqZOikQl7\nUuURjvqM4Ksr6/0USqutQEOuEUQIhUmG851pLcrKBewjVztjIhuRXU4x863sIv3N\nn86iivMxOPjmP/mZgAGTIhYjATJOfEDtQpatt5eoV1eVOENOs7C/bTMTC5Sazcag\na/EqYcZdl881AqcVu06veePsU0tHW6X5KgaR76RBgCK5if7zuevUKhyZfR5gVq+v\nHR2NsS+cRCAvP0C5eKG0CaVJhODU6Mpob/NK7GXdds9QymD2Dsz8fWJreulx/U+Y\n209QvktiDIWpNKdJJnrsUg3YE6eqsYH0oC2yLp+g+blowgLOfMw=\n=TEEC\n-----END PGP SIGNATURE-----", "payload": "tree 57f2681328bbd5129ed1fe708f6f9b80e230be5f\nparent 481725984b4cd94ef5c00917b01c1771b6e5299c\nauthor Cassaundra Smith <cass@cassaundra.org> 1675114765 -0800\ncommitter Cassaundra Smith <cass@cassaundra.org> 1675114765 -0800\n\nFix invalid float literal suggestions when recovering an integer\n\nOnly suggest adding a zero to integers with a preceding dot when the change will\nresult in a valid floating point literal.\n\nFor example, `.0x0` should not be turned into `0.0x0`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80fcd7c40ec46613b130b5d732162ecbfda6c509", "html_url": "https://github.com/rust-lang/rust/commit/80fcd7c40ec46613b130b5d732162ecbfda6c509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80fcd7c40ec46613b130b5d732162ecbfda6c509/comments", "author": {"login": "cassaundra", "id": 21976313, "node_id": "MDQ6VXNlcjIxOTc2MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/21976313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassaundra", "html_url": "https://github.com/cassaundra", "followers_url": "https://api.github.com/users/cassaundra/followers", "following_url": "https://api.github.com/users/cassaundra/following{/other_user}", "gists_url": "https://api.github.com/users/cassaundra/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassaundra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassaundra/subscriptions", "organizations_url": "https://api.github.com/users/cassaundra/orgs", "repos_url": "https://api.github.com/users/cassaundra/repos", "events_url": "https://api.github.com/users/cassaundra/events{/privacy}", "received_events_url": "https://api.github.com/users/cassaundra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassaundra", "id": 21976313, "node_id": "MDQ6VXNlcjIxOTc2MzEz", "avatar_url": "https://avatars.githubusercontent.com/u/21976313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassaundra", "html_url": "https://github.com/cassaundra", "followers_url": "https://api.github.com/users/cassaundra/followers", "following_url": "https://api.github.com/users/cassaundra/following{/other_user}", "gists_url": "https://api.github.com/users/cassaundra/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassaundra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassaundra/subscriptions", "organizations_url": "https://api.github.com/users/cassaundra/orgs", "repos_url": "https://api.github.com/users/cassaundra/repos", "events_url": "https://api.github.com/users/cassaundra/events{/privacy}", "received_events_url": "https://api.github.com/users/cassaundra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "6bf1a68f84cb69b1f977de1b22194c6264aedb5d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80fcd7c40ec46613b130b5d732162ecbfda6c509/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fcd7c40ec46613b130b5d732162ecbfda6c509/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=80fcd7c40ec46613b130b5d732162ecbfda6c509", "patch": "@@ -1854,7 +1854,16 @@ impl<'a> Parser<'a> {\n                 if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =\n                     next_token.kind\n                 {\n-                    if self.token.span.hi() == next_token.span.lo() {\n+                    // If this integer looks like a float, then recover as such.\n+                    //\n+                    // We will never encounter the exponent part of a floating\n+                    // point literal here, since there's no use of the exponent\n+                    // syntax that also constitutes a valid integer, so we need\n+                    // not check for that.\n+                    if suffix.map_or(true, |s| s == sym::f32 || s == sym::f64)\n+                        && symbol.as_str().chars().all(|c| c.is_numeric() || c == '_')\n+                        && self.token.span.hi() == next_token.span.lo()\n+                    {\n                         let s = String::from(\"0.\") + symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n                         return Some(Token::new(kind, self.token.span.to(next_token.span)));"}, {"sha": "79430d8c0513d7daa089b281325def2a546587cf", "filename": "tests/ui/suggestions/recover-invalid-float-invalid.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80fcd7c40ec46613b130b5d732162ecbfda6c509/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fcd7c40ec46613b130b5d732162ecbfda6c509/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs?ref=80fcd7c40ec46613b130b5d732162ecbfda6c509", "patch": "@@ -0,0 +1,24 @@\n+// Check that suggestions to add a zero to integers with a preceding dot only appear when the change\n+// will result in a valid floating point literal.\n+\n+fn main() {}\n+\n+fn a() {\n+    _ = .3u32;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn b() {\n+    _ = .0b0;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn c() {\n+    _ = .0o07;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn d() {\n+    _ = .0x0ABC;\n+    //~^ ERROR expected expression, found `.`\n+}"}, {"sha": "5764afc1a21fa260d77e586ba70af8d07f399ac6", "filename": "tests/ui/suggestions/recover-invalid-float-invalid.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/80fcd7c40ec46613b130b5d732162ecbfda6c509/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80fcd7c40ec46613b130b5d732162ecbfda6c509/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr?ref=80fcd7c40ec46613b130b5d732162ecbfda6c509", "patch": "@@ -0,0 +1,26 @@\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:7:9\n+   |\n+LL |     _ = .3u32;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:12:9\n+   |\n+LL |     _ = .0b0;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:17:9\n+   |\n+LL |     _ = .0o07;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:22:9\n+   |\n+LL |     _ = .0x0ABC;\n+   |         ^ expected expression\n+\n+error: aborting due to 4 previous errors\n+"}]}