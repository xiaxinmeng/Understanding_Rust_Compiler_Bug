{"sha": "957939292ec9038f139bd10e093e9673609eea04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NzkzOTI5MmVjOTAzOGYxMzliZDEwZTA5M2U5NjczNjA5ZWVhMDQ=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-16T15:45:46Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-26T16:11:50Z"}, "message": "completion relevance consider if types can be unified", "tree": {"sha": "5babed3a488b43ea561874be3bda36198ccb421b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5babed3a488b43ea561874be3bda36198ccb421b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957939292ec9038f139bd10e093e9673609eea04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957939292ec9038f139bd10e093e9673609eea04", "html_url": "https://github.com/rust-lang/rust/commit/957939292ec9038f139bd10e093e9673609eea04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957939292ec9038f139bd10e093e9673609eea04/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20e32fc946010f8c46728d6cb8bab1b96b3f48b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e32fc946010f8c46728d6cb8bab1b96b3f48b9", "html_url": "https://github.com/rust-lang/rust/commit/20e32fc946010f8c46728d6cb8bab1b96b3f48b9"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "4ee08ef212a4629e1e809f87a8e26b8f6f234555", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=957939292ec9038f139bd10e093e9673609eea04", "patch": "@@ -51,7 +51,7 @@ use hir_def::{\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n-    autoderef,\n+    autoderef, could_unify,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,\n     to_assoc_type_id,\n@@ -2154,6 +2154,10 @@ impl Type {\n \n         walk_type(db, self, &mut cb);\n     }\n+\n+    pub fn could_unify_with(&self, other: &Type) -> bool {\n+        could_unify(&self.ty, &other.ty)\n+    }\n }\n \n // FIXME: closures"}, {"sha": "e4407ff5051db6e55277192557e291e8b455fbf5", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=957939292ec9038f139bd10e093e9673609eea04", "patch": "@@ -45,6 +45,11 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id, AliasEq, AliasTy, Interner, TyKind,\n };\n \n+// This lint has a false positive here. See the link below for details.\n+//\n+// https://github.com/rust-lang/rust/issues/57411\n+#[allow(unreachable_pub)]\n+pub use unify::could_unify;\n pub(crate) use unify::unify;\n \n mod unify;"}, {"sha": "6e7b0f5a63340053b0f25b51cb82ce524911e96f", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=957939292ec9038f139bd10e093e9673609eea04", "patch": "@@ -157,6 +157,10 @@ impl<T> Canonicalized<T> {\n     }\n }\n \n+pub fn could_unify(t1: &Ty, t2: &Ty) -> bool {\n+    InferenceTable::new().unify(t1, t2)\n+}\n+\n pub(crate) fn unify(tys: &Canonical<(Ty, Ty)>) -> Option<Substitution> {\n     let mut table = InferenceTable::new();\n     let vars = Substitution("}, {"sha": "6f9c698e64cc21d4ada64bae68cd505a14126376", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957939292ec9038f139bd10e093e9673609eea04/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=957939292ec9038f139bd10e093e9673609eea04", "patch": "@@ -41,7 +41,7 @@ use crate::{\n };\n \n pub use autoderef::autoderef;\n-pub use infer::{InferenceResult, InferenceVar};\n+pub use infer::{could_unify, InferenceResult, InferenceVar};\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,"}, {"sha": "12453f8896d30f296d4153b475d4b5f28d0ae9a3", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/957939292ec9038f139bd10e093e9673609eea04/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957939292ec9038f139bd10e093e9673609eea04/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=957939292ec9038f139bd10e093e9673609eea04", "patch": "@@ -314,7 +314,8 @@ fn compute_exact_type_match(ctx: &CompletionContext, completion_ty: &hir::Type)\n         Some(expected_type) => {\n             // We don't ever consider unit type to be an exact type match, since\n             // nearly always this is not meaningful to the user.\n-            completion_ty == expected_type && !expected_type.is_unit()\n+            (completion_ty == expected_type || expected_type.could_unify_with(completion_ty))\n+                && !expected_type.is_unit()\n         }\n         None => false,\n     }\n@@ -1353,4 +1354,34 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn generic_enum() {\n+        check_relevance(\n+            r#\"\n+enum Foo<T> { A(T), B }\n+// bar() should not be an exact type match\n+// because the generic parameters are different\n+fn bar() -> Foo<u8> { Foo::B }\n+// FIXME baz() should be an exact type match\n+// because the types could unify, but it currently\n+// is not. This is due to the T here being\n+// TyKind::Placeholder rather than TyKind::Missing.\n+fn baz<T>() -> Foo<T> { Foo::B }\n+fn foo() {\n+    let foo: Foo<u32> = Foo::B;\n+    let _: Foo<u32> = f$0;\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::A(\u2026) [type]\n+                ev Foo::B [type]\n+                lc foo [type+local]\n+                en Foo []\n+                fn baz() []\n+                fn bar() []\n+                fn foo() []\n+            \"#]],\n+        );\n+    }\n }"}]}