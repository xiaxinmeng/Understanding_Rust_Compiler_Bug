{"sha": "d3460cd3c8020e01a842df03b61a6996ce0af835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDYwY2QzYzgwMjBlMDFhODQyZGYwM2I2MWE2OTk2Y2UwYWY4MzU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-16T14:53:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T14:53:56Z"}, "message": "Rollup merge of #83091 - usbalbin:const_copy, r=oli-obk\n\nConstify `copy` related functions\n\nConstify\n\n* `*const T::copy_to[_nonoverlapping]`\n* `*mut T::copy_to[_nonoverlapping]`\n* `*mut T::copy_from[_nonoverlapping]`\n* `mem::transmute_copy`\n* `mem::swap`\n* `ptr::swap[_nonoverlapping]`\n* `mem::replace`\n* `ptr::replace`", "tree": {"sha": "b86d1732a731ac53c2cc81fcd97f8473af5a41ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b86d1732a731ac53c2cc81fcd97f8473af5a41ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3460cd3c8020e01a842df03b61a6996ce0af835", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUMaFCRBK7hj4Ov3rIwAAdHIIADP5vNiIuRvYE7cJaBiN/XAs\n6P4AHXmuoq6E17eq5J09Fwj/BJ8rG1B1qS8InxDT5abtDD0kKYhWxAAfs1HVS/I6\nmEQ7rA/OSWaLL2TmHpZuZ8PbvDToLl/9dLfcXOwtFt3N7BLbAIldXJ1ghPbTOn7A\n575aF99LZEmUvl34g8lxoAZYXTyfMI5hQztpnpRjSntuqI+RfOkK003J1M6NWnhg\nFI/eGVRWoNLlAnXuzbv5empFqb/XPF5fqjC43GVFCbUrmbhxbGmrB17abFp7cNQ+\nNzc64FK2yjRANKqy1zHQeUj3x4Drm5CZuy55Uxf4diz/8fuM6Lz8Z9ph86olkY0=\n=6FD3\n-----END PGP SIGNATURE-----\n", "payload": "tree b86d1732a731ac53c2cc81fcd97f8473af5a41ea\nparent dbdb2a1312eb4a3dd87f8974a434951c32884d6d\nparent db9a53b5d7dcf2be60496a6ee19f03476d354344\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615906436 +0900\ncommitter GitHub <noreply@github.com> 1615906436 +0900\n\nRollup merge of #83091 - usbalbin:const_copy, r=oli-obk\n\nConstify `copy` related functions\n\nConstify\n\n* `*const T::copy_to[_nonoverlapping]`\n* `*mut T::copy_to[_nonoverlapping]`\n* `*mut T::copy_from[_nonoverlapping]`\n* `mem::transmute_copy`\n* `mem::swap`\n* `ptr::swap[_nonoverlapping]`\n* `mem::replace`\n* `ptr::replace`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3460cd3c8020e01a842df03b61a6996ce0af835", "html_url": "https://github.com/rust-lang/rust/commit/d3460cd3c8020e01a842df03b61a6996ce0af835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3460cd3c8020e01a842df03b61a6996ce0af835/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "html_url": "https://github.com/rust-lang/rust/commit/dbdb2a1312eb4a3dd87f8974a434951c32884d6d"}, {"sha": "db9a53b5d7dcf2be60496a6ee19f03476d354344", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9a53b5d7dcf2be60496a6ee19f03476d354344", "html_url": "https://github.com/rust-lang/rust/commit/db9a53b5d7dcf2be60496a6ee19f03476d354344"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "4c2472ed82c5ef226ea11f7efe0b51d8b7a6673f", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -1902,18 +1902,6 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n }\n \n-/// Checks whether the regions of memory starting at `src` and `dst` of size\n-/// `count * size_of::<T>()` do *not* overlap.\n-pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {\n-    let src_usize = src as usize;\n-    let dst_usize = dst as usize;\n-    let size = mem::size_of::<T>().checked_mul(count).unwrap();\n-    let diff = if src_usize > dst_usize { src_usize - dst_usize } else { dst_usize - src_usize };\n-    // If the absolute distance between the ptrs is at least as big as the size of the buffer,\n-    // they do not overlap.\n-    diff >= size\n-}\n-\n /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n /// `val`.\n ///"}, {"sha": "8e35adcbd9ef5944f1b4648151a45d0da6b193af", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -98,6 +98,7 @@\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n+#![feature(const_swap)]\n #![feature(const_align_of_val)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]"}, {"sha": "37e8d65db6a38a5fdae75da762bf7dbaae1d920c", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -812,7 +813,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-pub fn replace<T>(dest: &mut T, src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic.\n@@ -931,7 +933,8 @@ pub fn drop<T>(_x: T) {}\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+#[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n+pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     // If U has a higher alignment requirement, src may not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads."}, {"sha": "b511466acd6397c302275723e00d9b7ff4e22555", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -819,9 +819,10 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -837,9 +838,10 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {"}, {"sha": "3a27f01444be8e5cc3c5e7ee39cbedee81fcb670", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -67,7 +67,7 @@\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::hash;\n-use crate::intrinsics::{self, abort, is_aligned_and_not_null, is_nonoverlapping};\n+use crate::intrinsics::{self, abort, is_aligned_and_not_null};\n use crate::mem::{self, MaybeUninit};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -394,7 +394,8 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with.\n     // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n     let mut tmp = MaybeUninit::<T>::uninit();\n@@ -451,16 +452,8 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n-pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n-    if cfg!(debug_assertions)\n-        && !(is_aligned_and_not_null(x)\n-            && is_aligned_and_not_null(y)\n-            && is_nonoverlapping(x, y, count))\n-    {\n-        // Not panicking to keep codegen impact smaller.\n-        abort();\n-    }\n-\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     let x = x as *mut u8;\n     let y = y as *mut u8;\n     let len = mem::size_of::<T>() * count;\n@@ -470,7 +463,8 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // For types smaller than the block optimization below,\n     // just swap directly to avoid pessimizing codegen.\n     if mem::size_of::<T>() < 32 {\n@@ -488,7 +482,8 @@ pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n }\n \n #[inline]\n-unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n     // that swapping either 32 bytes or 64 bytes at a time is most efficient for Intel\n     // Haswell E processors. LLVM is more able to optimize if we give a struct a\n@@ -589,7 +584,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct"}, {"sha": "fa09cf854353d21e15a0a5f8d5272ea540406290", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3460cd3c8020e01a842df03b61a6996ce0af835/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d3460cd3c8020e01a842df03b61a6996ce0af835", "patch": "@@ -926,9 +926,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -944,9 +945,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -962,9 +964,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_from(self, src: *const T, count: usize)\n+    pub const unsafe fn copy_from(self, src: *const T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -980,9 +983,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n+    pub const unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n     where\n         T: Sized,\n     {"}]}