{"sha": "18a1e092e9406c6670cd38d17997325bba7bbfdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YTFlMDkyZTk0MDZjNjY3MGNkMzhkMTc5OTczMjViYmE3YmJmZGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-30T10:30:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-30T10:30:17Z"}, "message": "Move memory usage statistics to ra_prof", "tree": {"sha": "65284e826535842d1a28db8713881151000da874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65284e826535842d1a28db8713881151000da874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18a1e092e9406c6670cd38d17997325bba7bbfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18a1e092e9406c6670cd38d17997325bba7bbfdc", "html_url": "https://github.com/rust-lang/rust/commit/18a1e092e9406c6670cd38d17997325bba7bbfdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18a1e092e9406c6670cd38d17997325bba7bbfdc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18389d2684a8da9937fe37f9598fabf67c65fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18389d2684a8da9937fe37f9598fabf67c65fee", "html_url": "https://github.com/rust-lang/rust/commit/e18389d2684a8da9937fe37f9598fabf67c65fee"}], "stats": {"total": 146, "additions": 78, "deletions": 68}, "files": [{"sha": "b26e2454c979a7a1a1ec2eb78ffa6af99258af14", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -1147,8 +1147,6 @@ dependencies = [\n  \"fst 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jemalloc-ctl 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jemallocator 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proptest 0.9.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1223,6 +1221,8 @@ dependencies = [\n  \"backtrace 0.3.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cpuprofiler 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jemalloc-ctl 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jemallocator 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "2eaf784a6b92c5822363ff6003a72982216209a4", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -112,6 +112,6 @@ pub fn run(verbose: bool, path: &Path, only: Option<&str>) -> Result<()> {\n         num_exprs_partially_unknown,\n         (num_exprs_partially_unknown * 100 / num_exprs)\n     );\n-    println!(\"Analysis: {:?}\", analysis_time.elapsed());\n+    println!(\"Analysis: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n     Ok(())\n }"}, {"sha": "5bd76881713a934fcc36cf60016331afc8366179", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -16,9 +16,6 @@ unicase = \"2.2.0\"\n superslice = \"1.0.0\"\n rand = \"0.6.5\"\n \n-jemallocator = { version = \"0.1.9\", optional = true }\n-jemalloc-ctl = { version = \"0.2.0\", optional = true }\n-\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n@@ -36,6 +33,3 @@ version = \"0.9.0\"\n # Disable `fork` feature to allow compiling on webassembly\n default-features = false\n features = [\"std\", \"bit-set\", \"break-dead-code\"]\n-\n-[features]\n-jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]"}, {"sha": "28a74c003a615f3f3bf8631e936b4b554544b800", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -74,12 +74,6 @@ pub use crate::{\n pub use ra_db::{Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId, Edition};\n pub use hir::Documentation;\n \n-// We use jemalloc mainly to get heap usage statistics, actual performance\n-// difference is not measures.\n-#[cfg(feature = \"jemalloc\")]\n-#[global_allocator]\n-static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n-\n pub type Cancelable<T> = Result<T, Canceled>;\n \n #[derive(Debug)]"}, {"sha": "ce25f4a875a0b3ed0aae7726f4edfeb1b1d3658e", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -9,6 +9,7 @@ use ra_db::{\n     FileTextQuery, SourceRootId,\n     salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n };\n+use ra_prof::{Bytes, memory_usage};\n use hir::MacroFile;\n \n use crate::{\n@@ -34,7 +35,7 @@ pub(crate) fn status(db: &RootDatabase) -> String {\n         symbols_stats,\n         syntax_tree_stats,\n         macro_syntax_tree_stats,\n-        MemoryStats::current(),\n+        memory_usage(),\n         db.last_gc.elapsed().as_secs(),\n     )\n }\n@@ -138,54 +139,3 @@ impl FromIterator<TableEntry<SourceRootId, Arc<SymbolIndex>>> for LibrarySymbols\n         res\n     }\n }\n-\n-struct MemoryStats {\n-    allocated: Bytes,\n-    resident: Bytes,\n-}\n-\n-impl MemoryStats {\n-    #[cfg(feature = \"jemalloc\")]\n-    fn current() -> MemoryStats {\n-        jemalloc_ctl::epoch().unwrap();\n-        MemoryStats {\n-            allocated: Bytes(jemalloc_ctl::stats::allocated().unwrap()),\n-            resident: Bytes(jemalloc_ctl::stats::resident().unwrap()),\n-        }\n-    }\n-\n-    #[cfg(not(feature = \"jemalloc\"))]\n-    fn current() -> MemoryStats {\n-        MemoryStats { allocated: Bytes(0), resident: Bytes(0) }\n-    }\n-}\n-\n-impl fmt::Display for MemoryStats {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} allocated {} resident\", self.allocated, self.resident,)\n-    }\n-}\n-\n-#[derive(Default)]\n-struct Bytes(usize);\n-\n-impl fmt::Display for Bytes {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let bytes = self.0;\n-        if bytes < 4096 {\n-            return write!(f, \"{} bytes\", bytes);\n-        }\n-        let kb = bytes / 1024;\n-        if kb < 4096 {\n-            return write!(f, \"{}kb\", kb);\n-        }\n-        let mb = kb / 1024;\n-        write!(f, \"{}mb\", mb)\n-    }\n-}\n-\n-impl std::ops::AddAssign<usize> for Bytes {\n-    fn add_assign(&mut self, x: usize) {\n-        self.0 += x;\n-    }\n-}"}, {"sha": "4491b85900180644b4452c025cf0d58dd2eb0a89", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -32,4 +32,4 @@ tempfile = \"3\"\n test_utils = { path = \"../test_utils\" }\n \n [features]\n-jemalloc = [ \"ra_ide_api/jemalloc\" ]\n+jemalloc = [ \"ra_prof/jemalloc\" ]"}, {"sha": "e986019ca90d6eca44b17650154d239b9bc1a064", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -10,3 +10,9 @@ once_cell = \"0.2.0\"\n itertools = \"0.8.0\"\n backtrace = \"0.3.28\"\n cpuprofiler = { version = \"0.0.3\", optional = true }\n+jemallocator = { version = \"0.1.9\", optional = true }\n+jemalloc-ctl = { version = \"0.2.0\", optional = true }\n+\n+\n+[features]\n+jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]"}, {"sha": "6f79187456fa10f69eb36eb691c4faec4b8e7c8d", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -1,3 +1,5 @@\n+mod memory_usage;\n+\n use std::{\n     cell::RefCell,\n     time::{Duration, Instant},\n@@ -11,6 +13,14 @@ use std::{\n use once_cell::sync::Lazy;\n use itertools::Itertools;\n \n+pub use crate::memory_usage::{MemoryUsage, Bytes};\n+\n+// We use jemalloc mainly to get heap usage statistics, actual performance\n+// difference is not measures.\n+#[cfg(feature = \"jemalloc\")]\n+#[global_allocator]\n+static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n+\n /// Set profiling filter. It specifies descriptions allowed to profile.\n /// This is helpful when call stack has too many nested profiling scopes.\n /// Additionally filter can specify maximum depth of profiling scopes nesting.\n@@ -288,6 +298,10 @@ impl Drop for CpuProfiler {\n     }\n }\n \n+pub fn memory_usage() -> MemoryUsage {\n+    MemoryUsage::current()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "2bde8fb5fbafc5ddc2f9de8b4da404fba3017599", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a1e092e9406c6670cd38d17997325bba7bbfdc/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=18a1e092e9406c6670cd38d17997325bba7bbfdc", "patch": "@@ -0,0 +1,52 @@\n+use std::fmt;\n+\n+pub struct MemoryUsage {\n+    pub allocated: Bytes,\n+    pub resident: Bytes,\n+}\n+\n+impl MemoryUsage {\n+    #[cfg(feature = \"jemalloc\")]\n+    pub fn current() -> MemoryUsage {\n+        jemalloc_ctl::epoch().unwrap();\n+        MemoryUsage {\n+            allocated: Bytes(jemalloc_ctl::stats::allocated().unwrap()),\n+            resident: Bytes(jemalloc_ctl::stats::resident().unwrap()),\n+        }\n+    }\n+\n+    #[cfg(not(feature = \"jemalloc\"))]\n+    pub fn current() -> MemoryUsage {\n+        MemoryUsage { allocated: Bytes(0), resident: Bytes(0) }\n+    }\n+}\n+\n+impl fmt::Display for MemoryUsage {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{} allocated {} resident\", self.allocated, self.resident,)\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct Bytes(usize);\n+\n+impl fmt::Display for Bytes {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let bytes = self.0;\n+        if bytes < 4096 {\n+            return write!(f, \"{} bytes\", bytes);\n+        }\n+        let kb = bytes / 1024;\n+        if kb < 4096 {\n+            return write!(f, \"{}kb\", kb);\n+        }\n+        let mb = kb / 1024;\n+        write!(f, \"{}mb\", mb)\n+    }\n+}\n+\n+impl std::ops::AddAssign<usize> for Bytes {\n+    fn add_assign(&mut self, x: usize) {\n+        self.0 += x;\n+    }\n+}"}]}