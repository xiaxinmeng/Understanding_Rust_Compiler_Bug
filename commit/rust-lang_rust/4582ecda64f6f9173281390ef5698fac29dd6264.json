{"sha": "4582ecda64f6f9173281390ef5698fac29dd6264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODJlY2RhNjRmNmY5MTczMjgxMzkwZWY1Njk4ZmFjMjlkZDYyNjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-06T05:54:58Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-11T08:57:52Z"}, "message": "compiletest: Support custom normalization rules.", "tree": {"sha": "3dde868a179fef84c7b28db8284f80051b92c95e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dde868a179fef84c7b28db8284f80051b92c95e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4582ecda64f6f9173281390ef5698fac29dd6264", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZZJMQAAoJEP72yAUdDgE8Yh0QAKJMqwv82uroENNrH0Jbk8n7\nV4lIq/TCbqffagCsLFKdYX7JwFfrPlSrhvWfMOfs0Enum2IUHgddpSQRZDrY9YyK\nb9sOiVqT0dj6m017z4ilvFGKjtHE8474tISiaAql6aZ/nK+G+GC5f+LoyLpLqKTO\n+IRb/LCQVgnz1myRugPoKvEgQkUCfYJmg+B+4e05Qp3vzXdb0foyfvvc1uHmxrRM\nTT9D6xNW60Ro2x02WwERTDShYLh2UC7lf4Sdx+ckExg9hIvx7SS2lk2hD02J89Nm\nw83URO7gTHkCEiBzXsHr8dvxC9fGw0ezvJ8STRxt2HmvFzDVhqjt89MyUK0FYS9S\njMkb/tIlSw1S6i3X6PLNU/+eZiLpv0qC0TO9ZBMk00Gl+vlLDRkFQ7qTLGAESGwL\nVe7YBPuYpxe1fTF+gcdj3tYvjymVrlqL6Wr+W+bHduBA3Z0QXeuYXUsGMdbiP+V8\nrFlWT2bEnyJzlkpWS6nfvcN/BlrZd0jrpcqgTtHTNco+NYjWQ7gOrnJs9ucV+m7z\nOzMyNvuaB4C+hV3KwWr2rrIL6jFF2KI86KKCfqTeEdTWF7D7jUyfiawgpElneUwq\nkqUFMhR2CjBN2S7bROPWo2P+7HV1AcMtegZWixJsRny+zKw9wUUOizk8g6puYKrH\nXP8Nr406c+OCsebeGOyZ\n=M1TK\n-----END PGP SIGNATURE-----", "payload": "tree 3dde868a179fef84c7b28db8284f80051b92c95e\nparent 18712e6edf685855ce0e0470730192165e56e0b1\nauthor kennytm <kennytm@gmail.com> 1499320498 +0800\ncommitter kennytm <kennytm@gmail.com> 1499763472 +0800\n\ncompiletest: Support custom normalization rules.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4582ecda64f6f9173281390ef5698fac29dd6264", "html_url": "https://github.com/rust-lang/rust/commit/4582ecda64f6f9173281390ef5698fac29dd6264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4582ecda64f6f9173281390ef5698fac29dd6264/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18712e6edf685855ce0e0470730192165e56e0b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/18712e6edf685855ce0e0470730192165e56e0b1", "html_url": "https://github.com/rust-lang/rust/commit/18712e6edf685855ce0e0470730192165e56e0b1"}], "stats": {"total": 192, "additions": 112, "deletions": 80}, "files": [{"sha": "582998a986d0016d4ba9d884dfdb80a18ccde05e", "filename": "src/test/ui/enum-size-variance.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Fenum-size-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Fenum-size-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ^ ignore 32-bit targets, as the error message is target-dependent. see PR #41968.\n \n #![warn(variant_size_differences)]\n #![allow(dead_code)]\n@@ -24,26 +20,26 @@ enum Enum1 { }\n \n enum Enum2 { A, B, C }\n \n-enum Enum3 { D(isize), E, F }\n+enum Enum3 { D(i64), E, F }\n \n-enum Enum4 { H(isize), I(isize), J }\n+enum Enum4 { H(i64), I(i64), J }\n \n enum Enum5 {\n-    L(isize, isize, isize, isize), //~ WARNING three times larger\n-    M(isize),\n+    L(i64, i64, i64, i64), //~ WARNING three times larger\n+    M(i64),\n     N\n }\n \n enum Enum6<T, U> {\n     O(T),\n     P(U),\n-    Q(isize)\n+    Q(i64)\n }\n \n #[allow(variant_size_differences)]\n enum Enum7 {\n-    R(isize, isize, isize, isize),\n-    S(isize),\n+    R(i64, i64, i64, i64),\n+    S(i64),\n     T\n }\n pub fn main() { }"}, {"sha": "a21243a49907fbab91eb9853122b7138f72ce003", "filename": "src/test/ui/enum-size-variance.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Fenum-size-variance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-size-variance.stderr?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -1,12 +1,12 @@\n warning: enum variant is more than three times larger (32 bytes) than the next largest\n-  --> $DIR/enum-size-variance.rs:32:5\n+  --> $DIR/enum-size-variance.rs:28:5\n    |\n-32 |     L(isize, isize, isize, isize), //~ WARNING three times larger\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+28 |     L(i64, i64, i64, i64), //~ WARNING three times larger\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/enum-size-variance.rs:17:9\n+  --> $DIR/enum-size-variance.rs:13:9\n    |\n-17 | #![warn(variant_size_differences)]\n+13 | #![warn(variant_size_differences)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "ab448de656e67334de347128bf874e8eec51a0c4", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n+// normalize-stderr-32bit: \"&str (64 bits)\" -> \"&str ($STR bits)\"\n+// normalize-stderr-64bit: \"&str (128 bits)\" -> \"&str ($STR bits)\"\n+\n+\n \n #![feature(untagged_unions)]\n use std::mem::transmute;"}, {"sha": "b7e34d3e0bc467e08f686541b3d904b2560afb67", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -22,7 +22,7 @@ error[E0512]: transmute called with types of different sizes\n 34 |     let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n    |                 ^^^^^^^^^\n    |\n-   = note: source type: &str (128 bits)\n+   = note: source type: &str ($STR bits)\n    = note: target type: u8 (8 bits)\n \n error[E0512]: transmute called with types of different sizes"}, {"sha": "d60c97f1d59a8c4a1013d4af456cc8879bc78b94", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -8,14 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n-\n use std::mem;\n \n-unsafe fn foo() -> (i32, *const (), Option<fn()>) {\n+unsafe fn foo() -> (i8, *const (), Option<fn()>) {\n     let i = mem::transmute(bar);\n     //~^ ERROR is zero-sized and can't be transmuted\n     //~^^ NOTE cast with `as` to a pointer instead\n@@ -46,7 +41,7 @@ unsafe fn bar() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<fn(), u32>(main);\n+    mem::transmute::<fn(), usize>(main);\n }\n \n unsafe fn baz() {\n@@ -63,7 +58,7 @@ unsafe fn baz() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<Option<fn()>, u32>(Some(main));\n+    mem::transmute::<Option<fn()>, usize>(Some(main));\n }\n \n fn main() {"}, {"sha": "197daf1b79596a1baa588fdd05dd21cc5b539a55", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.stderr", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -1,108 +1,90 @@\n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:19:13\n+  --> $DIR/transmute-from-fn-item-types-error.rs:14:13\n    |\n-19 |     let i = mem::transmute(bar);\n+14 |     let i = mem::transmute(bar);\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar} (0 bits)\n-   = note: target type: i32 (32 bits)\n+   = note: target type: i8 (8 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:23:13\n+  --> $DIR/transmute-from-fn-item-types-error.rs:18:13\n    |\n-23 |     let p = mem::transmute(foo);\n+18 |     let p = mem::transmute(foo);\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *const ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:27:14\n+  --> $DIR/transmute-from-fn-item-types-error.rs:22:14\n    |\n-27 |     let of = mem::transmute(main);\n+22 |     let of = mem::transmute(main);\n    |              ^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:36:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:31:5\n    |\n-36 |     mem::transmute::<_, u8>(main);\n+31 |     mem::transmute::<_, u8>(main);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main} (0 bits)\n    = note: target type: u8 (8 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:40:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:35:5\n    |\n-40 |     mem::transmute::<_, *mut ()>(foo);\n+35 |     mem::transmute::<_, *mut ()>(foo);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:44:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:39:5\n    |\n-44 |     mem::transmute::<_, fn()>(bar);\n+39 |     mem::transmute::<_, fn()>(bar);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n-error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:49:5\n-   |\n-49 |     mem::transmute::<fn(), u32>(main);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: source type: fn() (64 bits)\n-   = note: target type: u32 (32 bits)\n-\n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:53:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:48:5\n    |\n-53 |     mem::transmute::<_, *mut ()>(Some(foo));\n+48 |     mem::transmute::<_, *mut ()>(Some(foo));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i8, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:57:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:52:5\n    |\n-57 |     mem::transmute::<_, fn()>(Some(bar));\n+52 |     mem::transmute::<_, fn()>(Some(bar));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:61:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:56:5\n    |\n-61 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n+56 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {baz}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n-error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:66:5\n-   |\n-66 |     mem::transmute::<Option<fn()>, u32>(Some(main));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: source type: std::option::Option<fn()> (64 bits)\n-   = note: target type: u32 (32 bits)\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "117fc2cc5df2496931a5a7ab742958baaedde312", "filename": "src/test/ui/transmute/transmute-type-parameters.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore 32-bit platforms (test output is different)\n+\n+\n+\n+\n \n // Tests that `transmute` cannot be called on type parameters.\n "}, {"sha": "bb9bf57d55e2ff558b90e647321ec4e45b87e3ef", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -211,6 +211,9 @@ pub struct TestProps {\n     // The test must be compiled and run successfully. Only used in UI tests for\n     // now.\n     pub run_pass: bool,\n+    // customized normalization rules\n+    pub normalize_stdout: Vec<(String, String)>,\n+    pub normalize_stderr: Vec<(String, String)>,\n }\n \n impl TestProps {\n@@ -237,6 +240,8 @@ impl TestProps {\n             must_compile_successfully: false,\n             check_test_line_numbers_match: false,\n             run_pass: false,\n+            normalize_stdout: vec![],\n+            normalize_stderr: vec![],\n         }\n     }\n \n@@ -351,6 +356,13 @@ impl TestProps {\n             if !self.run_pass {\n                 self.run_pass = config.parse_run_pass(ln);\n             }\n+\n+            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n+                self.normalize_stdout.push(rule);\n+            }\n+            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n+                self.normalize_stderr.push(rule);\n+            }\n         });\n \n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -399,7 +411,6 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n }\n \n impl Config {\n-\n     fn parse_error_pattern(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"error-pattern\")\n     }\n@@ -497,6 +508,22 @@ impl Config {\n         }\n     }\n \n+    fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n+        if self.parse_cfg_name_directive(line, prefix) {\n+            let from = match parse_normalization_string(&mut line) {\n+                Some(s) => s,\n+                None => return None,\n+            };\n+            let to = match parse_normalization_string(&mut line) {\n+                Some(s) => s,\n+                None => return None,\n+            };\n+            Some((from, to))\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Parses a name-value directive which contains config-specific information, e.g. `ignore-x86`\n     /// or `normalize-stderr-32bit`. Returns `true` if the line matches it.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> bool {\n@@ -568,3 +595,29 @@ fn expand_variables(mut value: String, config: &Config) -> String {\n \n     value\n }\n+\n+/// Finds the next quoted string `\"...\"` in `line`, and extract the content from it. Move the `line`\n+/// variable after the end of the quoted string.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n+/// let first = parse_normalization_string(&mut s);\n+/// assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+/// assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n+/// ```\n+fn parse_normalization_string(line: &mut &str) -> Option<String> {\n+    // FIXME support escapes in strings.\n+    let begin = match line.find('\"') {\n+        Some(i) => i + 1,\n+        None => return None,\n+    };\n+    let end = match line[begin..].find('\"') {\n+        Some(i) => i + begin,\n+        None => return None,\n+    };\n+    let result = line[begin..end].to_owned();\n+    *line = &line[end+1..];\n+    Some(result)\n+}"}, {"sha": "45a733d411ab930abb41ece5ddb792e28fc650c7", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4582ecda64f6f9173281390ef5698fac29dd6264/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4582ecda64f6f9173281390ef5698fac29dd6264", "patch": "@@ -2228,8 +2228,10 @@ actual:\\n\\\n         let expected_stdout_path = self.expected_output_path(\"stdout\");\n         let expected_stdout = self.load_expected_output(&expected_stdout_path);\n \n-        let normalized_stdout = self.normalize_output(&proc_res.stdout);\n-        let normalized_stderr = self.normalize_output(&proc_res.stderr);\n+        let normalized_stdout =\n+            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n+        let normalized_stderr =\n+            self.normalize_output(&proc_res.stderr, &self.props.normalize_stderr);\n \n         let mut errors = 0;\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n@@ -2375,13 +2377,17 @@ actual:\\n\\\n         mir_dump_dir\n     }\n \n-    fn normalize_output(&self, output: &str) -> String {\n+    fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let parent_dir_str = parent_dir.display().to_string();\n-        output.replace(&parent_dir_str, \"$DIR\")\n+        let mut normalized = output.replace(&parent_dir_str, \"$DIR\")\n               .replace(\"\\\\\", \"/\") // normalize for paths on windows\n               .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n-              .replace(\"\\t\", \"\\\\t\") // makes tabs visible\n+              .replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n+        for rule in custom_rules {\n+            normalized = normalized.replace(&rule.0, &rule.1);\n+        }\n+        normalized\n     }\n \n     fn expected_output_path(&self, kind: &str) -> PathBuf {"}]}