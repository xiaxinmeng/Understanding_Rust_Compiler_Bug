{"sha": "2913ad6db0f72fed5139253faed73200c7af3535", "node_id": "C_kwDOAAsO6NoAKDI5MTNhZDZkYjBmNzJmZWQ1MTM5MjUzZmFlZDczMjAwYzdhZjM1MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T11:56:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T11:56:07Z"}, "message": "Auto merge of #111585 - matthiaskrgr:rollup-468pykj, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #102673 (Update doc for `PhantomData` to match code example)\n - #111531 (Fix ice caused by shorthand fields in NoFieldsForFnCall)\n - #111547 (Start node has no immediate dominator)\n - #111548 (add util function to TokenStream to eliminate some clones)\n - #111560 (Simplify find_width_of_character_at_span.)\n - #111569 (Appease lints)\n - #111581 (Fix some misleading and copy-pasted `Pattern` examples)\n - #111582 ((docs) Change \"wanting\" to \"want\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "aae689eb3707efe3394f54f76a2490f224fed1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae689eb3707efe3394f54f76a2490f224fed1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2913ad6db0f72fed5139253faed73200c7af3535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2913ad6db0f72fed5139253faed73200c7af3535", "html_url": "https://github.com/rust-lang/rust/commit/2913ad6db0f72fed5139253faed73200c7af3535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2913ad6db0f72fed5139253faed73200c7af3535/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8006510ab0f69ee75e9c3f7e8bff3776886dae51", "url": "https://api.github.com/repos/rust-lang/rust/commits/8006510ab0f69ee75e9c3f7e8bff3776886dae51", "html_url": "https://github.com/rust-lang/rust/commit/8006510ab0f69ee75e9c3f7e8bff3776886dae51"}, {"sha": "75186c0f7d3df657eff76c623dbec82d23e60f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/75186c0f7d3df657eff76c623dbec82d23e60f47", "html_url": "https://github.com/rust-lang/rust/commit/75186c0f7d3df657eff76c623dbec82d23e60f47"}], "stats": {"total": 151, "additions": 84, "deletions": 67}, "files": [{"sha": "db296aa44db2b6edc65f820c55f62132c7bad6c7", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -551,6 +551,10 @@ impl TokenStream {\n             vec_mut.extend(stream_iter);\n         }\n     }\n+\n+    pub fn chunks(&self, chunk_size: usize) -> core::slice::Chunks<'_, TokenTree> {\n+        self.0.chunks(chunk_size)\n+    }\n }\n \n /// By-reference iterator over a [`TokenStream`], that produces `&TokenTree`"}, {"sha": "3c350e25ba6ec066ad1fad4938ce150e97894fda", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 if let Some(root) = post_contract_node.get(&bb) {\n                     break *root;\n                 }\n-                let parent = doms.immediate_dominator(bb);\n+                let parent = doms.immediate_dominator(bb).unwrap();\n                 dom_path.push(bb);\n                 if !self.body.basic_blocks[parent].is_cleanup {\n                     break bb;"}, {"sha": "a7de709ba72bf677d3feddfaf5fe9e650db129b2", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -242,7 +242,9 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         immediate_dominators[*node] = Some(pre_order_to_real[idom[idx]]);\n     }\n \n-    Dominators { post_order_rank, immediate_dominators }\n+    let start_node = graph.start_node();\n+    immediate_dominators[start_node] = None;\n+    Dominators { start_node, post_order_rank, immediate_dominators }\n }\n \n /// Evaluate the link-eval virtual forest, providing the currently minimum semi\n@@ -308,6 +310,7 @@ fn compress(\n /// Tracks the list of dominators for each node.\n #[derive(Clone, Debug)]\n pub struct Dominators<N: Idx> {\n+    start_node: N,\n     post_order_rank: IndexVec<N, usize>,\n     // Even though we track only the immediate dominator of each node, it's\n     // possible to get its full list of dominators by looking up the dominator\n@@ -316,14 +319,14 @@ pub struct Dominators<N: Idx> {\n }\n \n impl<Node: Idx> Dominators<Node> {\n-    /// Whether the given Node has an immediate dominator.\n+    /// Returns true if node is reachable from the start node.\n     pub fn is_reachable(&self, node: Node) -> bool {\n-        self.immediate_dominators[node].is_some()\n+        node == self.start_node || self.immediate_dominators[node].is_some()\n     }\n \n-    pub fn immediate_dominator(&self, node: Node) -> Node {\n-        assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n-        self.immediate_dominators[node].unwrap()\n+    /// Returns the immediate dominator of node, if any.\n+    pub fn immediate_dominator(&self, node: Node) -> Option<Node> {\n+        self.immediate_dominators[node]\n     }\n \n     /// Provides an iterator over each dominator up the CFG, for the given Node.\n@@ -357,12 +360,7 @@ impl<'dom, Node: Idx> Iterator for Iter<'dom, Node> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if let Some(node) = self.node {\n-            let dom = self.dominators.immediate_dominator(node);\n-            if dom == node {\n-                self.node = None; // reached the root\n-            } else {\n-                self.node = Some(dom);\n-            }\n+            self.node = self.dominators.immediate_dominator(node);\n             Some(node)\n         } else {\n             None"}, {"sha": "8b124516623d60bbe44e253e5a205f965e5a2753", "filename": "compiler/rustc_data_structures/src/graph/dominators/tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -8,7 +8,7 @@ fn diamond() {\n \n     let dominators = dominators(&graph);\n     let immediate_dominators = &dominators.immediate_dominators;\n-    assert_eq!(immediate_dominators[0], Some(0));\n+    assert_eq!(immediate_dominators[0], None);\n     assert_eq!(immediate_dominators[1], Some(0));\n     assert_eq!(immediate_dominators[2], Some(0));\n     assert_eq!(immediate_dominators[3], Some(0));\n@@ -30,7 +30,7 @@ fn paper() {\n     assert_eq!(immediate_dominators[3], Some(6));\n     assert_eq!(immediate_dominators[4], Some(6));\n     assert_eq!(immediate_dominators[5], Some(6));\n-    assert_eq!(immediate_dominators[6], Some(6));\n+    assert_eq!(immediate_dominators[6], None);\n }\n \n #[test]\n@@ -43,3 +43,13 @@ fn paper_slt() {\n \n     dominators(&graph);\n }\n+\n+#[test]\n+fn immediate_dominator() {\n+    let graph = TestGraph::new(1, &[(1, 2), (2, 3)]);\n+    let dominators = dominators(&graph);\n+    assert_eq!(dominators.immediate_dominator(0), None);\n+    assert_eq!(dominators.immediate_dominator(1), None);\n+    assert_eq!(dominators.immediate_dominator(2), Some(1));\n+    assert_eq!(dominators.immediate_dominator(3), Some(2));\n+}"}, {"sha": "ee712a8e1b5db6530e1de2219a42a442bd632051", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -1180,6 +1180,10 @@ impl<'a> Parser<'a> {\n                         self.restore_snapshot(snapshot);\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(close_paren);\n+                        // filter shorthand fields\n+                        let fields: Vec<_> =\n+                            fields.into_iter().filter(|field| !field.is_shorthand).collect();\n+\n                         if !fields.is_empty() &&\n                             // `token.kind` should not be compared here.\n                             // This is because the `snapshot.token.kind` is treated as the same as"}, {"sha": "97cb734619e3c79a481e4a20728dc7002106da97", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -20,6 +20,7 @@\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n #![feature(let_chains)]\n+#![feature(round_char_boundary)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "11ea5fe4ddf9f8e89cc606d4016311d5d7eb3ed8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -1019,36 +1019,19 @@ impl SourceMap {\n \n         let src = local_begin.sf.external_src.borrow();\n \n-        // We need to extend the snippet to the end of the src rather than to end_index so when\n-        // searching forwards for boundaries we've got somewhere to search.\n-        let snippet = if let Some(ref src) = local_begin.sf.src {\n-            &src[start_index..]\n+        let snippet = if let Some(src) = &local_begin.sf.src {\n+            src\n         } else if let Some(src) = src.get_source() {\n-            &src[start_index..]\n+            src\n         } else {\n             return 1;\n         };\n-        debug!(\"snippet=`{:?}`\", snippet);\n \n-        let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n-        debug!(\"initial target=`{:?}`\", target);\n-\n-        while !snippet.is_char_boundary(target - start_index) && target < source_len {\n-            target = if forwards {\n-                target + 1\n-            } else {\n-                match target.checked_sub(1) {\n-                    Some(target) => target,\n-                    None => {\n-                        break;\n-                    }\n-                }\n-            };\n-            debug!(\"target=`{:?}`\", target);\n+        if forwards {\n+            (snippet.ceil_char_boundary(end_index + 1) - end_index) as u32\n+        } else {\n+            (end_index - snippet.floor_char_boundary(end_index - 1)) as u32\n         }\n-        debug!(\"final target=`{:?}`\", target);\n-\n-        if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }\n     }\n \n     pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {"}, {"sha": "47a3e78b4d5c7828def6fb11f149d27c429ca44c", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -695,7 +695,7 @@ impl<T: ?Sized> !Sync for *mut T {}\n /// }\n /// ```\n ///\n-/// This also in turn requires the annotation `T: 'a`, indicating\n+/// This also in turn infers the lifetime bound `T: 'a`, indicating\n /// that any references in `T` are valid over the lifetime `'a`.\n ///\n /// When initializing a `Slice` you simply provide the value"}, {"sha": "91ee2903aab43a2f3ca56cda7544e8b91a013b31", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -791,8 +791,8 @@ pub struct CharArrayRefSearcher<'a, 'b, const N: usize>(\n /// # Examples\n ///\n /// ```\n-/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n-/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n /// ```\n impl<'a, const N: usize> Pattern<'a> for [char; N] {\n     pattern_methods!(CharArraySearcher<'a, N>, MultiCharEqPattern, CharArraySearcher);\n@@ -811,8 +811,8 @@ unsafe impl<'a, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, N>\n /// # Examples\n ///\n /// ```\n-/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n-/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['o', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['h', 'w']), Some(6));\n /// ```\n impl<'a, 'b, const N: usize> Pattern<'a> for &'b [char; N] {\n     pattern_methods!(CharArrayRefSearcher<'a, 'b, N>, MultiCharEqPattern, CharArrayRefSearcher);"}, {"sha": "2a6b1a5ec73e49a2c748a21a46b03cf096a54cb0", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -1946,7 +1946,7 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// On success, the total number of bytes copied is returned and it is equal to\n /// the length of the `to` file as reported by `metadata`.\n ///\n-/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// If you want to copy the contents of one file to another and you\u2019re\n /// working with [`File`]s, see the [`io::copy()`] function.\n ///\n /// # Platform-specific behavior"}, {"sha": "1d9d93f5b64ecf2e149be34ba3270f7b4ed1cf9d", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -10,7 +10,7 @@ use crate::mem::MaybeUninit;\n /// On success, the total number of bytes that were copied from\n /// `reader` to `writer` is returned.\n ///\n-/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// If you want to copy the contents of one file to another and you\u2019re\n /// working with filesystem paths, see the [`fs::copy`] function.\n ///\n /// [`fs::copy`]: crate::fs::copy"}, {"sha": "17aa6b38e389c3fba44ec5ec42aa9548fdb9bc02", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -594,9 +594,8 @@ pub(super) fn display_macro_source(\n     def_id: DefId,\n     vis: ty::Visibility<DefId>,\n ) -> String {\n-    let tts: Vec<_> = def.body.tokens.clone().into_trees().collect();\n     // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-    let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+    let matchers = def.body.tokens.chunks(4).map(|arm| &arm[0]);\n \n     if def.macro_rules {\n         format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx.tcx, matchers, \";\"))"}, {"sha": "c8a370085a045390869c6ded5c4a9f5bb44f1411", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -139,18 +139,18 @@ enum FileEntry {\n type Cache = HashMap<String, FileEntry>;\n \n fn small_url_encode(s: &str) -> String {\n-    s.replace(\"<\", \"%3C\")\n-        .replace(\">\", \"%3E\")\n-        .replace(\" \", \"%20\")\n-        .replace(\"?\", \"%3F\")\n-        .replace(\"'\", \"%27\")\n-        .replace(\"&\", \"%26\")\n-        .replace(\",\", \"%2C\")\n-        .replace(\":\", \"%3A\")\n-        .replace(\";\", \"%3B\")\n-        .replace(\"[\", \"%5B\")\n-        .replace(\"]\", \"%5D\")\n-        .replace(\"\\\"\", \"%22\")\n+    s.replace('<', \"%3C\")\n+        .replace('>', \"%3E\")\n+        .replace(' ', \"%20\")\n+        .replace('?', \"%3F\")\n+        .replace('\\'', \"%27\")\n+        .replace('&', \"%26\")\n+        .replace(',', \"%2C\")\n+        .replace(':', \"%3A\")\n+        .replace(';', \"%3B\")\n+        .replace('[', \"%5B\")\n+        .replace(']', \"%5D\")\n+        .replace('\\\"', \"%22\")\n }\n \n impl Checker {\n@@ -267,7 +267,6 @@ impl Checker {\n                 FileEntry::OtherFile => return,\n                 FileEntry::Redirect { target } => {\n                     let t = target.clone();\n-                    drop(target);\n                     let (target, redir_entry) = self.load_file(&t, report);\n                     match redir_entry {\n                         FileEntry::Missing => {\n@@ -391,7 +390,7 @@ impl Checker {\n         const ERROR_INVALID_NAME: i32 = 123;\n \n         let pretty_path =\n-            file.strip_prefix(&self.root).unwrap_or(&file).to_str().unwrap().to_string();\n+            file.strip_prefix(&self.root).unwrap_or(file).to_str().unwrap().to_string();\n \n         let entry =\n             self.cache.entry(pretty_path.clone()).or_insert_with(|| match fs::metadata(file) {\n@@ -470,10 +469,8 @@ fn is_exception(file: &Path, link: &str) -> bool {\n         // NOTE: This cannot be added to `LINKCHECK_EXCEPTIONS` because the resolved path\n         // calculated in `check` function is outside `build/<triple>/doc` dir.\n         // So the `strip_prefix` method just returns the old absolute broken path.\n-        if file.ends_with(\"std/primitive.slice.html\") {\n-            if link.ends_with(\"primitive.slice.html\") {\n-                return true;\n-            }\n+        if file.ends_with(\"std/primitive.slice.html\") && link.ends_with(\"primitive.slice.html\") {\n+            return true;\n         }\n         false\n     }\n@@ -545,7 +542,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(source: &str, attr: &str, m\n fn parse_ids(ids: &mut HashSet<String>, file: &str, source: &str, report: &mut Report) {\n     if ids.is_empty() {\n         with_attrs_in_source(source, \" id\", |fragment, i, _| {\n-            let frag = fragment.trim_start_matches(\"#\").to_owned();\n+            let frag = fragment.trim_start_matches('#').to_owned();\n             let encoded = small_url_encode(&frag);\n             if !ids.insert(frag) {\n                 report.errors += 1;"}, {"sha": "cfd1b6b99ba7605104bc3f634484c2f072567eca", "filename": "tests/ui/parser/issues/issue-111416.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let my = monad_bind(mx, T: Try); //~ ERROR invalid `struct` delimiters or `fn` call arguments\n+}"}, {"sha": "ddacf4d6dfc310ba8ecf5ddd7e21f22a53ada318", "filename": "tests/ui/parser/issues/issue-111416.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2913ad6db0f72fed5139253faed73200c7af3535/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2913ad6db0f72fed5139253faed73200c7af3535/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr?ref=2913ad6db0f72fed5139253faed73200c7af3535", "patch": "@@ -0,0 +1,18 @@\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-111416.rs:2:14\n+   |\n+LL |     let my = monad_bind(mx, T: Try);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: if `monad_bind` is a struct, use braces as delimiters\n+   |\n+LL |     let my = monad_bind { mx, T: Try };\n+   |                         ~            ~\n+help: if `monad_bind` is a function, use the arguments directly\n+   |\n+LL -     let my = monad_bind(mx, T: Try);\n+LL +     let my = monad_bind(mx, Try);\n+   |\n+\n+error: aborting due to previous error\n+"}]}