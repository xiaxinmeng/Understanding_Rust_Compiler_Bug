{"sha": "668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OGYzYTkwYTg1ZWRjOGQ0ZTE0NzJhZjBlYjUzMGZhN2M0YmIyZWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-14T00:15:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-14T00:15:25Z"}, "message": "Move the friendly-names table to semant, reuse it in the name mangler.", "tree": {"sha": "a706955634a5a3036ebe79ba8ef0af31a1293ef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a706955634a5a3036ebe79ba8ef0af31a1293ef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "html_url": "https://github.com/rust-lang/rust/commit/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c2a1549c2dda91d147d20edd62f6465b90d9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c2a1549c2dda91d147d20edd62f6465b90d9e4", "html_url": "https://github.com/rust-lang/rust/commit/52c2a1549c2dda91d147d20edd62f6465b90d9e4"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "8372b64a3e31f9e6d2dc4b5a3899d1a43a845b5a", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "patch": "@@ -877,6 +877,18 @@ let process_crate\n     (* Post-resolve, we can establish a tag cache. *)\n     cx.ctxt_tag_cache <- Some (Hashtbl.create 0);\n     cx.ctxt_rebuild_cache <- Some (Hashtbl.create 0);\n+\n+    (* Also index all the type names for future error messages. *)\n+    Hashtbl.iter\n+      begin\n+        fun item_id ty ->\n+          let item_names = cx.Semant.ctxt_all_item_names in\n+            if Hashtbl.mem item_names item_id then\n+              Hashtbl.add cx.Semant.ctxt_user_type_names ty\n+                (Hashtbl.find item_names item_id)\n+      end\n+      cx.Semant.ctxt_all_type_items;\n+\n ;;\n \n (*"}, {"sha": "010494b4d14994a24a36557637a15b782892cb10", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "patch": "@@ -115,6 +115,7 @@ type ctxt =\n       ctxt_item_files: (node_id,filename) Hashtbl.t;\n       ctxt_all_lvals: (node_id,Ast.lval) Hashtbl.t;\n       ctxt_call_lval_params: (node_id,Ast.ty array) Hashtbl.t;\n+      ctxt_user_type_names: (Ast.ty,Ast.name) Hashtbl.t;\n \n       (* A directed graph that encodes the containment relation among tags. *)\n       ctxt_tag_containment: (opaque_id, tag_graph_node) Hashtbl.t;\n@@ -227,6 +228,7 @@ let new_ctxt sess abi crate =\n     ctxt_all_lvals = Hashtbl.create 0;\n     ctxt_all_defns = Hashtbl.create 0;\n     ctxt_call_lval_params = Hashtbl.create 0;\n+    ctxt_user_type_names = Hashtbl.create 0;\n \n     ctxt_tag_containment = Hashtbl.create 0;\n \n@@ -2624,7 +2626,10 @@ let ty_str (cx:ctxt) (ty:Ast.ty) : string =\n          ty_fold_constrained = (fun (t,_)-> t) }\n   in\n     htab_search_or_add cx.ctxt_type_str_cache ty\n-      (fun _ -> fold_ty cx fold ty)\n+      (fun _ ->\n+         match htab_search cx.ctxt_user_type_names ty with\n+             None -> \"$\" ^ (fold_ty cx fold ty)\n+           | Some name -> string_of_name name)\n ;;\n \n let glue_str (cx:ctxt) (g:glue) : string ="}, {"sha": "66dd240efa94ebe998b387099f9ad2553a96108c", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=668f3a90a85edc8d4e1472af0eb530fa7c4bb2ed", "patch": "@@ -38,23 +38,9 @@ let iflog cx thunk =\n ;;\n \n (* Pretty-printing of type names *)\n-let type_name_cache = ref None\n-let get_type_name_cache cx =\n-  match !type_name_cache with\n-      None ->\n-        let cache = Hashtbl.create 0 in\n-        let add item_id ty =\n-          let item_names = cx.Semant.ctxt_all_item_names in\n-          if Hashtbl.mem item_names item_id then\n-            Hashtbl.add cache ty (Hashtbl.find item_names item_id)\n-        in\n-        Hashtbl.iter add cx.Semant.ctxt_all_type_items;\n-        type_name_cache := Some cache;\n-        cache\n-    | Some cache -> cache\n \n let rec friendly_stringify cx fallback ty =\n-  let cache = get_type_name_cache cx in\n+  let cache = cx.Semant.ctxt_user_type_names in\n   if Hashtbl.mem cache ty then\n     let names = List.map (Ast.sprintf_name ()) (Hashtbl.find_all cache ty) in\n     String.concat \" = \" names"}]}