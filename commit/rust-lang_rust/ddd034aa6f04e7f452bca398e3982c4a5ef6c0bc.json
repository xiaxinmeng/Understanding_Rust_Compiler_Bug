{"sha": "ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZDAzNGFhNmYwNGU3ZjQ1MmJjYTM5OGUzOTgyYzRhNWVmNmMwYmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-31T13:32:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-31T13:32:25Z"}, "message": "Fix invalid bounds string generation in rustdoc", "tree": {"sha": "ac7389dabe7dd103a103fdee12ad897032913d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac7389dabe7dd103a103fdee12ad897032913d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "html_url": "https://github.com/rust-lang/rust/commit/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002b4b39a16760f37107cf02d7a91ff316d3073", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002b4b39a16760f37107cf02d7a91ff316d3073", "html_url": "https://github.com/rust-lang/rust/commit/2002b4b39a16760f37107cf02d7a91ff316d3073"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "b94b5f820629401e187c6535f0c32f6edf92b551", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -1918,7 +1918,15 @@ fn explicit_predicates_of<'a, 'tcx>(\n         }\n     }\n \n-    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let hir_id = match tcx.hir().as_local_hir_id(def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            return Lrc::new(ty::GenericPredicates {\n+                parent: None,\n+                predicates: Vec::new(),\n+            })\n+        }\n+    };\n     let node = tcx.hir().get_by_hir_id(hir_id);\n \n     let mut is_trait = None;"}, {"sha": "555cb1bd64f6e16abfc39572409e538d175783a6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 (replaced.clone(), replaced.clean(self.cx))\n             });\n \n-        let full_generics = (&type_generics, &tcx.predicates_of(did));\n+        let full_generics = (&type_generics, &tcx.explicit_predicates_of(did));\n         let Generics {\n             params: mut generic_params,\n             .."}, {"sha": "570c61f1ffc99840532419e3f7013bc9ed851226", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                                      .collect();\n \n                         let ty = self.cx.get_real_ty(def_id, def_ctor, &real_name, generics);\n-                        let predicates = infcx.tcx.predicates_of(impl_def_id);\n+                        let predicates = infcx.tcx.explicit_predicates_of(impl_def_id);\n \n                         impls.push(Item {\n                             source: infcx.tcx.def_span(impl_def_id).clean(self.cx),"}, {"sha": "8da71cf708aa085fac99d61aa8644c11711fbc52", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -228,7 +228,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n }\n \n fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Enum {\n         generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n@@ -238,7 +238,7 @@ fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n }\n \n fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n@@ -254,7 +254,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n }\n \n fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n@@ -266,7 +266,7 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n }\n \n fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Typedef {\n         type_: cx.tcx.type_of(did).clean(cx),\n@@ -325,7 +325,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, ret: &mut Vec<clean::Item>) {\n         }\n     }\n \n-    let predicates = tcx.predicates_of(did);\n+    let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n         match tcx.hir().expect_item_by_hir_id(hir_id).node {\n             hir::ItemKind::Impl(.., ref gen, _, _, ref item_ids) => {"}, {"sha": "842617d1fdb649fbefb49abb062839a930e67274", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -2281,7 +2281,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             }\n             ty::AssociatedKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n-                                &cx.tcx.predicates_of(self.def_id)).clean(cx);\n+                                &cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n                 let mut decl = (self.def_id, sig).clean(cx);\n \n@@ -2354,7 +2354,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     // are actually located on the trait/impl itself, so we need to load\n                     // all of the generics from there and then look for bounds that are\n                     // applied to this associated type in question.\n-                    let predicates = cx.tcx.predicates_of(did);\n+                    let predicates = cx.tcx.explicit_predicates_of(did);\n                     let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n                     let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n                         let (name, self_type, trait_, bounds) = match *pred {\n@@ -3062,7 +3062,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Opaque(def_id, substs) => {\n                 // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n                 // by looking up the projections associated with the def_id.\n-                let predicates_of = cx.tcx.predicates_of(def_id);\n+                let predicates_of = cx.tcx.explicit_predicates_of(def_id);\n                 let substs = cx.tcx.lift(&substs).expect(\"Opaque lift failed\");\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n                 let mut regions = vec![];"}, {"sha": "d40456dbcf1c0ae9548c9a429cdf45dc16c84b93", "filename": "src/test/rustdoc/useless_lifetime_bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs?ref=ddd034aa6f04e7f452bca398e3982c4a5ef6c0bc", "patch": "@@ -0,0 +1,7 @@\n+use std::marker::PhantomData;\n+\n+// @has useless_lifetime_bound/struct.Scope.html\n+// @!has - '//*[@class=\"rust struct\"]' \"'env: 'env\"\n+pub struct Scope<'env> {\n+    _marker: PhantomData<&'env mut &'env ()>,\n+}\n\\ No newline at end of file"}]}