{"sha": "d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzFjNGE2YTc1OTRjZGNiZTY2NWI0MGI0NjkwZTEwOWM2MGJkYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T12:21:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-30T12:21:24Z"}, "message": "Move ir comments generation to abi/comments.rs\n\nAlso list locals stored in ssa vars in the comments", "tree": {"sha": "5ddf625978c12e293d63d09edbef422a59c3d8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddf625978c12e293d63d09edbef422a59c3d8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "html_url": "https://github.com/rust-lang/rust/commit/d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deeae2fce46cba99a2dcce835b85f7d42238c3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/deeae2fce46cba99a2dcce835b85f7d42238c3c8", "html_url": "https://github.com/rust-lang/rust/commit/deeae2fce46cba99a2dcce835b85f7d42238c3c8"}], "stats": {"total": 210, "additions": 112, "deletions": 98}, "files": [{"sha": "674449cf06d524272efee594be4beab141a2cd6b", "filename": "src/abi/comments.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "patch": "@@ -0,0 +1,94 @@\n+use std::borrow::Cow;\n+\n+use rustc::mir;\n+\n+use crate::prelude::*;\n+use crate::abi::pass_mode::*;\n+\n+pub fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+    fx.add_global_comment(format!(\n+        \"msg   loc.idx    param    pass mode                            ssa flags  ty\"\n+    ));\n+}\n+\n+pub fn add_arg_comment<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    msg: &str,\n+    local: mir::Local,\n+    local_field: Option<usize>,\n+    params: EmptySinglePair<Value>,\n+    pass_mode: PassMode,\n+    ssa: crate::analyze::Flags,\n+    ty: Ty<'tcx>,\n+) {\n+    let local_field = if let Some(local_field) = local_field {\n+        Cow::Owned(format!(\".{}\", local_field))\n+    } else {\n+        Cow::Borrowed(\"\")\n+    };\n+    let params = match params {\n+        Empty => Cow::Borrowed(\"-\"),\n+        Single(param) => Cow::Owned(format!(\"= {:?}\", param)),\n+        Pair(param_a, param_b) => Cow::Owned(format!(\"= {:?}, {:?}\", param_a, param_b)),\n+    };\n+    let pass_mode = format!(\"{:?}\", pass_mode);\n+    fx.add_global_comment(format!(\n+        \"{msg:5}{local:>3}{local_field:<5} {params:10} {pass_mode:36} {ssa:10} {ty:?}\",\n+        msg = msg,\n+        local = format!(\"{:?}\", local),\n+        local_field = local_field,\n+        params = params,\n+        pass_mode = pass_mode,\n+        ssa = format!(\"{:?}\", ssa),\n+        ty = ty,\n+    ));\n+}\n+\n+pub fn add_local_place_comments<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    place: CPlace<'tcx>,\n+    local: Local,\n+) {\n+    let TyLayout { ty, details } = place.layout();\n+    let ty::layout::LayoutDetails {\n+        size,\n+        align,\n+        abi: _,\n+        variants: _,\n+        fields: _,\n+        largest_niche: _,\n+    } = details;\n+    match *place.inner() {\n+        CPlaceInner::Var(var) => {\n+            assert_eq!(local, var);\n+            fx.add_global_comment(format!(\n+                \"ssa   {:?}: {:?} size={} align={}, {}\",\n+                local,\n+                ty,\n+                size.bytes(),\n+                align.abi.bytes(),\n+                align.pref.bytes(),\n+            ));\n+        }\n+        CPlaceInner::Stack(stack_slot) => fx.add_entity_comment(\n+            stack_slot,\n+            format!(\n+                \"{:?}: {:?} size={} align={},{}\",\n+                local,\n+                ty,\n+                size.bytes(),\n+                align.abi.bytes(),\n+                align.pref.bytes(),\n+            ),\n+        ),\n+        CPlaceInner::NoPlace => fx.add_global_comment(format!(\n+            \"zst   {:?}: {:?} size={} align={}, {}\",\n+            local,\n+            ty,\n+            size.bytes(),\n+            align.abi.bytes(),\n+            align.pref.bytes(),\n+        )),\n+        CPlaceInner::Addr(_, _) => unreachable!(),\n+    }\n+}"}, {"sha": "512b1b68ad973ea8b807b752c7595aadeabd2778", "filename": "src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 85, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "patch": "@@ -1,8 +1,8 @@\n+#[cfg(debug_assertions)]\n+mod comments;\n mod returning;\n mod pass_mode;\n \n-use std::borrow::Cow;\n-\n use rustc_target::spec::abi::Abi;\n \n use crate::prelude::*;\n@@ -193,47 +193,6 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n }\n \n-#[cfg(debug_assertions)]\n-fn add_arg_comment<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    msg: &str,\n-    local: mir::Local,\n-    local_field: Option<usize>,\n-    params: EmptySinglePair<Value>,\n-    pass_mode: PassMode,\n-    ssa: crate::analyze::Flags,\n-    ty: Ty<'tcx>,\n-) {\n-    let local_field = if let Some(local_field) = local_field {\n-        Cow::Owned(format!(\".{}\", local_field))\n-    } else {\n-        Cow::Borrowed(\"\")\n-    };\n-    let params = match params {\n-        Empty => Cow::Borrowed(\"-\"),\n-        Single(param) => Cow::Owned(format!(\"= {:?}\", param)),\n-        Pair(param_a, param_b) => Cow::Owned(format!(\"= {:?}, {:?}\", param_a, param_b)),\n-    };\n-    let pass_mode = format!(\"{:?}\", pass_mode);\n-    fx.add_global_comment(format!(\n-        \"{msg:5} {local:>3}{local_field:<5} {params:10} {pass_mode:36} {ssa:10} {ty:?}\",\n-        msg = msg,\n-        local = format!(\"{:?}\", local),\n-        local_field = local_field,\n-        params = params,\n-        pass_mode = pass_mode,\n-        ssa = format!(\"{:?}\", ssa),\n-        ty = ty,\n-    ));\n-}\n-\n-#[cfg(debug_assertions)]\n-fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n-    fx.add_global_comment(format!(\n-        \"msg   loc.idx    param    pass mode                            ssa flags  ty\"\n-    ));\n-}\n-\n fn local_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     local: Local,\n@@ -243,46 +202,12 @@ fn local_place<'tcx>(\n     let place = if is_ssa {\n         CPlace::new_var(fx, local, layout)\n     } else {\n-        let place = CPlace::new_stack_slot(fx, layout.ty);\n-\n-        #[cfg(debug_assertions)]\n-        {\n-            let TyLayout { ty, details } = layout;\n-            let ty::layout::LayoutDetails {\n-                size,\n-                align,\n-                abi: _,\n-                variants: _,\n-                fields: _,\n-                largest_niche: _,\n-            } = details;\n-            match *place.inner() {\n-                CPlaceInner::Stack(stack_slot) => fx.add_entity_comment(\n-                    stack_slot,\n-                    format!(\n-                        \"{:?}: {:?} size={} align={},{}\",\n-                        local,\n-                        ty,\n-                        size.bytes(),\n-                        align.abi.bytes(),\n-                        align.pref.bytes(),\n-                    ),\n-                ),\n-                CPlaceInner::NoPlace => fx.add_global_comment(format!(\n-                    \"zst    {:?}: {:?} size={} align={}, {}\",\n-                    local,\n-                    ty,\n-                    size.bytes(),\n-                    align.abi.bytes(),\n-                    align.pref.bytes(),\n-                )),\n-                _ => unreachable!(),\n-            }\n-        }\n-\n-        place\n+        CPlace::new_stack_slot(fx, layout.ty)\n     };\n \n+    #[cfg(debug_assertions)]\n+    self::comments::add_local_place_comments(fx, place, local);\n+\n     let prev_place = fx.local_map.insert(local, place);\n     debug_assert!(prev_place.is_none());\n     fx.local_map[&local]\n@@ -295,10 +220,7 @@ pub fn codegen_fn_prelude(\n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n     #[cfg(debug_assertions)]\n-    {\n-        fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n-        add_local_header_comment(fx);\n-    }\n+    self::comments::add_local_header_comment(fx);\n \n     self::returning::codegen_return_param(fx, &ssa_analyzed, start_ebb);\n "}, {"sha": "f5c91338842c2ced31afe9a20edb400a687cfb2b", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "patch": "@@ -145,7 +145,7 @@ pub fn cvalue_for_param<'tcx>(\n     let ebb_params = clif_types.map(|t| fx.bcx.append_ebb_param(start_ebb, t));\n \n     #[cfg(debug_assertions)]\n-    super::add_arg_comment(\n+    crate::abi::comments::add_arg_comment(\n         fx,\n         \"arg\",\n         local,"}, {"sha": "465127e9b7196f68bd3b42fb8a5c669a55675ecd", "filename": "src/abi/returning.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d731c4a6a7594cdcbe665b40b4690e109c60bdbf/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=d731c4a6a7594cdcbe665b40b4690e109c60bdbf", "patch": "@@ -37,18 +37,16 @@ pub fn codegen_return_param(\n     };\n \n     #[cfg(debug_assertions)]\n-    {\n-        super::add_arg_comment(\n-            fx,\n-            \"ret\",\n-            RETURN_PLACE,\n-            None,\n-            ret_param,\n-            output_pass_mode,\n-            ssa_analyzed[&RETURN_PLACE],\n-            ret_layout.ty,\n-        );\n-    }\n+    crate::abi::comments::add_arg_comment(\n+        fx,\n+        \"ret\",\n+        RETURN_PLACE,\n+        None,\n+        ret_param,\n+        output_pass_mode,\n+        ssa_analyzed[&RETURN_PLACE],\n+        ret_layout.ty,\n+    );\n }\n \n pub fn codegen_with_call_return_arg<'tcx, B: Backend, T>("}]}