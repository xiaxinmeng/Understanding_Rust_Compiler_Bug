{"sha": "4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2ZjNWFkNjczNjhlOGM5ZWYwY2UxYTQ1NjRlODIyOGU2Nzc0MGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-12T15:32:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T15:32:17Z"}, "message": "Rollup merge of #69722 - estebank:negative-impl-span-ast, r=Centril\n\nTweak output for invalid negative impl AST errors\n\nUse more accurate spans for negative `impl` errors.\n\nr? @Centril", "tree": {"sha": "a2ca04f7812d5bf806e899be490545a577a0d97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ca04f7812d5bf806e899be490545a577a0d97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJealYBCRBK7hj4Ov3rIwAAdHIIAClERtUvJ28LZgZjHD/TxnmH\nFMU+NiGQXCd+wYt+C9MgF6I1i6GdBicJTeNNFUE5hi173CxfphQni+965KEdbs2/\nppWfLPqCF8oEl3z5Dfus/kqW0LOSFGgIU3IKS1cRwdrmC9KHdZ0OcJ3awI665uJc\nJU5/Xo9rxBxtiChaDy76nxuvqiQGYV9BQbOT62BWAg9jaayleUiXnifC02oNdBRz\n9ALP2oZ4YawfkBESl0kRDyfuVjaR0C4nplY8tahVZfhpM57VzzUaBBK0in5iZPHc\nZ5zi7m9i6rJWWqwKp008VMkjJmYtCLGMCsBuAk5K+VayoC2jhbjzHCWTduyb8W4=\n=H9R4\n-----END PGP SIGNATURE-----\n", "payload": "tree a2ca04f7812d5bf806e899be490545a577a0d97b\nparent 3d23de7bafffa6f331b59ce775327bb4aa343166\nparent 7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584027137 +0100\ncommitter GitHub <noreply@github.com> 1584027137 +0100\n\nRollup merge of #69722 - estebank:negative-impl-span-ast, r=Centril\n\nTweak output for invalid negative impl AST errors\n\nUse more accurate spans for negative `impl` errors.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "html_url": "https://github.com/rust-lang/rust/commit/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d23de7bafffa6f331b59ce775327bb4aa343166", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d23de7bafffa6f331b59ce775327bb4aa343166", "html_url": "https://github.com/rust-lang/rust/commit/3d23de7bafffa6f331b59ce775327bb4aa343166"}, {"sha": "7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "html_url": "https://github.com/rust-lang/rust/commit/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1"}], "stats": {"total": 325, "additions": 184, "deletions": 141}, "files": [{"sha": "7faba4600a90a4882e37f74acd17e6c7596f4d86", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -2118,14 +2118,14 @@ pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n     /// `impl !Trait for Type`\n-    Negative,\n+    Negative(Span),\n }\n \n impl fmt::Debug for ImplPolarity {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ImplPolarity::Positive => \"positive\".fmt(f),\n-            ImplPolarity::Negative => \"negative\".fmt(f),\n+            ImplPolarity::Negative(_) => \"negative\".fmt(f),\n         }\n     }\n }"}, {"sha": "a2d83a525cc7876b21ce55f9a5a7ab9be7c8de3e", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 77, "deletions": 49, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -9,6 +9,7 @@\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n+use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n@@ -594,6 +595,54 @@ impl<'a> AstValidator<'a> {\n             .span_label(ident.span, format!(\"`_` is not a valid name for this `{}` item\", kind))\n             .emit();\n     }\n+\n+    fn deny_generic_params(&self, generics: &Generics, ident_span: Span) {\n+        if !generics.params.is_empty() {\n+            struct_span_err!(\n+                self.session,\n+                generics.span,\n+                E0567,\n+                \"auto traits cannot have generic parameters\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have generic parameters\")\n+            .span_suggestion(\n+                generics.span,\n+                \"remove the parameters\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        }\n+    }\n+\n+    fn deny_super_traits(&self, bounds: &GenericBounds, ident_span: Span) {\n+        if let [first @ last] | [first, .., last] = &bounds[..] {\n+            let span = first.span().to(last.span());\n+            struct_span_err!(self.session, span, E0568, \"auto traits cannot have super traits\")\n+                .span_label(ident_span, \"auto trait cannot have super traits\")\n+                .span_suggestion(\n+                    span,\n+                    \"remove the super traits\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n+    fn deny_items(&self, trait_items: &[P<AssocItem>], ident_span: Span) {\n+        if !trait_items.is_empty() {\n+            let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n+            struct_span_err!(\n+                self.session,\n+                spans,\n+                E0380,\n+                \"auto traits cannot have methods or associated items\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have items\")\n+            .emit();\n+        }\n+    }\n }\n \n fn validate_generic_param_order<'a>(\n@@ -779,7 +828,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 defaultness: _,\n                 constness: _,\n                 generics: _,\n-                of_trait: Some(_),\n+                of_trait: Some(ref t),\n                 ref self_ty,\n                 items: _,\n             } => {\n@@ -794,13 +843,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .help(\"use `auto trait Trait {}` instead\")\n                             .emit();\n                     }\n-                    if let (Unsafe::Yes(span), ImplPolarity::Negative) = (unsafety, polarity) {\n+                    if let (Unsafe::Yes(span), ImplPolarity::Negative(sp)) = (unsafety, polarity) {\n                         struct_span_err!(\n                             this.session,\n-                            item.span,\n+                            sp.to(t.path.span),\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n+                        .span_label(sp, \"negative because of this\")\n                         .span_label(span, \"unsafe because of this\")\n                         .emit();\n                     }\n@@ -816,38 +866,36 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 constness,\n                 generics: _,\n                 of_trait: None,\n-                self_ty: _,\n+                ref self_ty,\n                 items: _,\n             } => {\n+                let error = |annotation_span, annotation| {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        self_ty.span,\n+                        &format!(\"inherent impls cannot be {}\", annotation),\n+                    );\n+                    err.span_label(annotation_span, &format!(\"{} because of this\", annotation));\n+                    err.span_label(self_ty.span, \"inherent impl for this type\");\n+                    err\n+                };\n+\n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n-                    struct_span_err!(\n-                        self.session,\n-                        item.span,\n-                        E0197,\n-                        \"inherent impls cannot be unsafe\"\n-                    )\n-                    .span_label(span, \"unsafe because of this\")\n-                    .emit();\n+                    error(span, \"unsafe\").code(error_code!(E0197)).emit();\n                 }\n-                if polarity == ImplPolarity::Negative {\n-                    self.err_handler().span_err(item.span, \"inherent impls cannot be negative\");\n+                if let ImplPolarity::Negative(span) = polarity {\n+                    error(span, \"negative\").emit();\n                 }\n                 if let Defaultness::Default(def_span) = defaultness {\n-                    let span = self.session.source_map().def_span(item.span);\n-                    self.err_handler()\n-                        .struct_span_err(span, \"inherent impls cannot be `default`\")\n-                        .span_label(def_span, \"`default` because of this\")\n+                    error(def_span, \"`default`\")\n                         .note(\"only trait implementations may be annotated with `default`\")\n                         .emit();\n                 }\n                 if let Const::Yes(span) = constness {\n-                    self.err_handler()\n-                        .struct_span_err(item.span, \"inherent impls cannot be `const`\")\n-                        .span_label(span, \"`const` because of this\")\n+                    error(span, \"`const`\")\n                         .note(\"only trait implementations may be annotated with `const`\")\n                         .emit();\n                 }\n@@ -882,33 +930,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n-                    if !generics.params.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0567,\n-                            \"auto traits cannot have generic parameters\"\n-                        )\n-                        .emit();\n-                    }\n-                    if !bounds.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0568,\n-                            \"auto traits cannot have super traits\"\n-                        )\n-                        .emit();\n-                    }\n-                    if !trait_items.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0380,\n-                            \"auto traits cannot have methods or associated items\"\n-                        )\n-                        .emit();\n-                    }\n+                    self.deny_generic_params(generics, item.ident.span);\n+                    self.deny_super_traits(bounds, item.ident.span);\n+                    self.deny_items(trait_items, item.ident.span);\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n \n@@ -1153,9 +1177,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }) = fk.header()\n         {\n             self.err_handler()\n-                .struct_span_err(span, \"functions cannot be both `const` and `async`\")\n+                .struct_span_err(\n+                    vec![*cspan, *aspan],\n+                    \"functions cannot be both `const` and `async`\",\n+                )\n                 .span_label(*cspan, \"`const` because of this\")\n                 .span_label(*aspan, \"`async` because of this\")\n+                .span_label(span, \"\") // Point at the fn header.\n                 .emit();\n         }\n "}, {"sha": "5f36149451dd27c29b2d2e80cc0982d72061a023", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -337,14 +337,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl { polarity, defaultness, .. } => {\n-                if polarity == ast::ImplPolarity::Negative {\n+            ast::ItemKind::Impl { polarity, defaultness, ref of_trait, .. } => {\n+                if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n                         optin_builtin_traits,\n-                        i.span,\n+                        span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n-                                        use marker types for now\"\n+                         use marker types for now\"\n                     );\n                 }\n "}, {"sha": "10081d36754ba43f652593ee3ab13e91a69fdcf4", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bindings_after_at)]\n //! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n //! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n //! by `rustc_ast_lowering`."}, {"sha": "007694f7276bbf867b56c8ce5303d44fd5ca9e17", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1160,7 +1160,7 @@ impl<'a> State<'a> {\n                     self.s.space();\n                 }\n \n-                if polarity == ast::ImplPolarity::Negative {\n+                if let ast::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n "}, {"sha": "7eb5cc417b7e6463b3de7476b7079ae20596e71f", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -652,7 +652,7 @@ impl<'a> State<'a> {\n                     self.word_nbsp(\"const\");\n                 }\n \n-                if let hir::ImplPolarity::Negative = polarity {\n+                if let hir::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n "}, {"sha": "513507f9bb83312b2b66824473d483514453e11c", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -373,6 +373,16 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n+    fn parse_polarity(&mut self) -> ast::ImplPolarity {\n+        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n+        if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n+            self.bump(); // `!`\n+            ast::ImplPolarity::Negative(self.prev_token.span)\n+        } else {\n+            ast::ImplPolarity::Positive\n+        }\n+    }\n+\n     /// Parses an implementation item.\n     ///\n     /// ```\n@@ -411,13 +421,7 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n         }\n \n-        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n-        let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n-            self.bump(); // `!`\n-            ast::ImplPolarity::Negative\n-        } else {\n-            ast::ImplPolarity::Positive\n-        };\n+        let polarity = self.parse_polarity();\n \n         // Parse both types and traits as a type, then reinterpret if necessary.\n         let err_path = |span| ast::Path::from_ident(Ident::new(kw::Invalid, span));"}, {"sha": "2cffd7f365d82ccc02ce314fd2a1fb39b7be7db6", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -519,7 +519,7 @@ impl Sig for ast::Item {\n                 text.push(' ');\n \n                 let trait_sig = if let Some(ref t) = *of_trait {\n-                    if polarity == ast::ImplPolarity::Negative {\n+                    if let ast::ImplPolarity::Negative(_) = polarity {\n                         text.push('!');\n                     }\n                     let trait_sig = t.path.make(offset + text.len(), id, scx)?;"}, {"sha": "3b25f67aacc63b14772537ba640c708f0f1755df", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -69,11 +69,11 @@ impl UnsafetyChecker<'tcx> {\n                     .emit();\n                 }\n \n-                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative) => {\n+                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n                     // Reported in AST validation\n                     self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n                 }\n-                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative)\n+                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n                 | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, None, Unsafety::Normal, _) => {"}, {"sha": "cd63dacdcda0e0a3f07fa4cdd57b05c8fcdaffa0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1548,7 +1548,7 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(hir_id);\n     match &item.kind {\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative, .. } => {\n+        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => {\n             if is_rustc_reservation {\n                 tcx.sess.span_err(item.span, \"reservation impls can't be negative\");\n             }"}, {"sha": "4e59bb507676f27e5e83a58b2f58075a4e2b37fa", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,8 @@\n error: functions cannot be both `const` and `async`\n-  --> $DIR/no-const-async.rs:4:1\n+  --> $DIR/no-const-async.rs:4:5\n    |\n LL | pub const async fn x() {}\n-   | ^^^^-----^-----^^^^^^^^^^\n+   | ----^^^^^-^^^^^----------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this"}, {"sha": "4040e66c6af776f65aa5f99e5a0f5fafd9504761", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,20 +1,26 @@\n error[E0567]: auto traits cannot have generic parameters\n-  --> $DIR/auto-trait-validation.rs:3:1\n+  --> $DIR/auto-trait-validation.rs:3:19\n    |\n LL | auto trait Generic<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -------^^^ help: remove the parameters\n+   |            |\n+   |            auto trait cannot have generic parameters\n \n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/auto-trait-validation.rs:5:1\n+  --> $DIR/auto-trait-validation.rs:5:20\n    |\n LL | auto trait Bound : Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/auto-trait-validation.rs:7:1\n+  --> $DIR/auto-trait-validation.rs:7:25\n    |\n LL | auto trait MyTrait { fn foo() {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -------      ^^^\n+   |            |\n+   |            auto trait cannot have items\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1bd37f395902a287e532460cf11a3409fce3cfcd", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,9 +1,10 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:7:1\n+  --> $DIR/coherence-negative-impls-safe.rs:7:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "35e1042649ef9e382e40b324b5e71d158a9e172d", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,8 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/E0197.rs:3:1\n+  --> $DIR/E0197.rs:3:13\n    |\n LL | unsafe impl Foo { }\n-   | ------^^^^^^^^^^^^^\n+   | ------      ^^^ inherent impl for this type\n    | |\n    | unsafe because of this\n "}, {"sha": "bb2efefb427bad08dff28f7c81b1450fb58b7179", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,9 +1,10 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/E0198.rs:5:1\n+  --> $DIR/E0198.rs:5:13\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "490d29ad8a35f33eef20f9ffde326f6b0a3b404b", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -8,10 +8,10 @@ LL | auto trait AutoDummyTrait {}\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:9:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:9:6\n    |\n LL | impl !AutoDummyTrait for DummyStruct {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "d20bb4bd90726f66d6cf2ce15c6221a5197e4ee2", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -3,8 +3,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    type Output;\n+    type Output; //~ ERROR E0380\n }\n \n fn call_method<T: Trait>(x: T) {}"}, {"sha": "fcd1ecfa98288ff1d43db80a2e7d50b50ce2ed15", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,11 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:5:1\n+  --> $DIR/issue-23080-2.rs:6:10\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     type Output;\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     type Output;\n+   |          ^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<() as Trait>::Output`\n    |"}, {"sha": "fa5c35316bc28d4853fe4868586a435c1fc6d395", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    fn method(&self) {\n+    fn method(&self) { //~ ERROR E0380\n         println!(\"Hello\");\n     }\n }"}, {"sha": "dbb9861b5784a8669a26114a3a13b7113c3c0017", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,13 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:3:1\n+  --> $DIR/issue-23080.rs:4:8\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     fn method(&self) {\n-LL | |         println!(\"Hello\");\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     fn method(&self) {\n+   |        ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d6b36fbb71450ed258c04fa042c687ac93b21920", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -2,7 +2,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:13:5\n    |\n LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n-   |     -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^-^^^^^------------------------------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this\n@@ -45,7 +45,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -88,7 +88,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -97,7 +97,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:46:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -160,7 +160,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this"}, {"sha": "834f6a409f5b69bcbf8c1410a51f6c365880c05f", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,18 +1,18 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:1\n+  --> $DIR/inherent-impl.rs:9:12\n    |\n LL | impl const S {}\n-   | ^^^^^-----^^^^^\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:1\n+  --> $DIR/inherent-impl.rs:12:12\n    |\n LL | impl const T {}\n-   | ^^^^^-----^^^^^\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |"}, {"sha": "6e19d79e48f6b136e02150e6a6154c2cceb8fbb6", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,8 @@\n error: inherent impls cannot be `default`\n-  --> $DIR/validation.rs:7:1\n+  --> $DIR/validation.rs:7:14\n    |\n LL | default impl S {}\n-   | -------^^^^^^^\n+   | -------      ^ inherent impl for this type\n    | |\n    | `default` because of this\n    |"}, {"sha": "5d4c1b354f700614cb27649b367962a9f5dc471c", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:1\n+  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:6\n    |\n LL | impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "5777e0ade908eb315ecf16ab0b6311ab9b747f57", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,29 +1,35 @@\n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:7:1\n+  --> $DIR/syntax-trait-polarity.rs:7:7\n    |\n LL | impl !TestType {}\n-   | ^^^^^^^^^^^^^^^^^\n+   |      -^^^^^^^^ inherent impl for this type\n+   |      |\n+   |      negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:12:1\n+  --> $DIR/syntax-trait-polarity.rs:12:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:1\n+  --> $DIR/syntax-trait-polarity.rs:19:10\n    |\n LL | impl<T> !TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         -^^^^^^^^^^^^ inherent impl for this type\n+   |         |\n+   |         negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:22:1\n+  --> $DIR/syntax-trait-polarity.rs:22:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------         -^^^^\n+   | |              |\n+   | |              negative because of this\n    | unsafe because of this\n \n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)"}, {"sha": "0738d2973e2d7585ff28efa876e207ac43eaf0a4", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,14 +1,10 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/trait-safety-inherent-impl.rs:5:1\n+  --> $DIR/trait-safety-inherent-impl.rs:5:13\n    |\n-LL |   unsafe impl SomeStruct {\n-   |   ^-----\n-   |   |\n-   |  _unsafe because of this\n+LL | unsafe impl SomeStruct {\n+   | ------      ^^^^^^^^^^ inherent impl for this type\n    | |\n-LL | |     fn foo(self) { }\n-LL | | }\n-   | |_^\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "a83ff3701511d8e608e57e39d993d71a7b41a552", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:1\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23"}, {"sha": "e3976293277549ae8972901670efa6ef51ca37e2", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:1\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:20\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}, {"sha": "b1602e3642ecb4d190f0736c2be7c6f7bdc19aa3", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=4f7fc5ad67368e8c9ef0ce1a4564e8228e67740a", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:1\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}]}