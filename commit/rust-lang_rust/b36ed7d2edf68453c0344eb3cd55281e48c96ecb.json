{"sha": "b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmVkN2QyZWRmNjg0NTNjMDM0NGViM2NkNTUyODFlNDhjOTZlY2I=", "commit": {"author": {"name": "Johannes Oertel", "email": "johannes.oertel@uni-due.de", "date": "2015-06-03T10:38:42Z"}, "committer": {"name": "Johannes Oertel", "email": "johannes.oertel@uni-due.de", "date": "2015-06-08T10:05:33Z"}, "message": "Implement RFC 839\n\nCloses #25976.", "tree": {"sha": "e1bda74459df66821d1182fb397048f24e3829fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bda74459df66821d1182fb397048f24e3829fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "html_url": "https://github.com/rust-lang/rust/commit/b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/comments", "author": {"login": "jooert", "id": 1774713, "node_id": "MDQ6VXNlcjE3NzQ3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1774713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooert", "html_url": "https://github.com/jooert", "followers_url": "https://api.github.com/users/jooert/followers", "following_url": "https://api.github.com/users/jooert/following{/other_user}", "gists_url": "https://api.github.com/users/jooert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooert/subscriptions", "organizations_url": "https://api.github.com/users/jooert/orgs", "repos_url": "https://api.github.com/users/jooert/repos", "events_url": "https://api.github.com/users/jooert/events{/privacy}", "received_events_url": "https://api.github.com/users/jooert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jooert", "id": 1774713, "node_id": "MDQ6VXNlcjE3NzQ3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1774713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooert", "html_url": "https://github.com/jooert", "followers_url": "https://api.github.com/users/jooert/followers", "following_url": "https://api.github.com/users/jooert/following{/other_user}", "gists_url": "https://api.github.com/users/jooert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooert/subscriptions", "organizations_url": "https://api.github.com/users/jooert/orgs", "repos_url": "https://api.github.com/users/jooert/repos", "events_url": "https://api.github.com/users/jooert/events{/privacy}", "received_events_url": "https://api.github.com/users/jooert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5979be9fefe671fa81ec70720234602f8112bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5979be9fefe671fa81ec70720234602f8112bec", "html_url": "https://github.com/rust-lang/rust/commit/a5979be9fefe671fa81ec70720234602f8112bec"}], "stats": {"total": 292, "additions": 291, "deletions": 1}, "files": [{"sha": "97bdd8e6a6ef5a6cdf0903bc41461af91b092c47", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -760,3 +760,10 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n         }\n     }\n }\n+\n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> {\n+    fn extend<I: IntoIterator<Item=&'a T>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}"}, {"sha": "37797425e7ad271a47b646149e1540e8da18c298", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -1070,6 +1070,13 @@ impl Extend<bool> for BitVec {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a> Extend<&'a bool> for BitVec {\n+    fn extend<I: IntoIterator<Item=&'a bool>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for BitVec {\n     #[inline]\n@@ -1278,6 +1285,13 @@ impl Extend<usize> for BitSet {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a> Extend<&'a usize> for BitSet {\n+    fn extend<I: IntoIterator<Item=&'a usize>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for BitSet {\n     #[inline]"}, {"sha": "c7c336e38a1c84cf8151c82376b297a0872b3f51", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -879,6 +879,13 @@ impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> {\n+    fn extend<I: IntoIterator<Item=(&'a K, &'a V)>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     fn hash<H: Hasher>(&self, state: &mut H) {"}, {"sha": "ec6c5e63e2daf37fec2e0f2075ff9163871b6447", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -509,6 +509,13 @@ impl<T: Ord> Extend<T> for BTreeSet<T> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n+    fn extend<I: IntoIterator<Item=&'a T>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BTreeSet<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ad90f9f1caa9c532182f7b73f5604f63b60024be", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -288,3 +288,10 @@ impl<E:CLike> Extend<E> for EnumSet<E> {\n         }\n     }\n }\n+\n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, E: 'a + CLike + Copy> Extend<&'a E> for EnumSet<E> {\n+    fn extend<I: IntoIterator<Item=&'a E>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}"}, {"sha": "e47892f44545fcdf347130678635b96b542e23a2", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -871,6 +871,13 @@ impl<A> Extend<A> for LinkedList<A> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, T: 'a + Copy> Extend<&'a T> for LinkedList<T> {\n+    fn extend<I: IntoIterator<Item=&'a T>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialEq> PartialEq for LinkedList<A> {\n     fn eq(&self, other: &LinkedList<A>) -> bool {"}, {"sha": "d0f59cbf0470ec993b328a3f67b666e550dbca3e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -793,6 +793,13 @@ impl Extend<char> for String {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a> Extend<&'a char> for String {\n+    fn extend<I: IntoIterator<Item=&'a char>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Extend<&'a str> for String {\n     fn extend<I: IntoIterator<Item=&'a str>>(&mut self, iterable: I) {"}, {"sha": "7ce4bd546b97c26450973f4e261d164459725624", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -1578,6 +1578,13 @@ impl<T> Extend<T> for Vec<T> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n+    fn extend<I: IntoIterator<Item=&'a T>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n __impl_slice_eq1! { Vec<A>, Vec<B> }\n __impl_slice_eq1! { Vec<A>, &'b [B] }\n __impl_slice_eq1! { Vec<A>, &'b mut [B] }"}, {"sha": "88d0a96b78cc7f0494bd812f817330f52ce1a241", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -1785,6 +1785,13 @@ impl<A> Extend<A> for VecDeque<A> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> {\n+    fn extend<I: IntoIterator<Item=&'a T>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "8180f1d56df1205d1e6743a1cbc6354cd3b1ccf6", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -828,6 +828,13 @@ impl<V> Extend<(usize, V)> for VecMap<V> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n+impl<'a, V: Copy> Extend<(usize, &'a V)> for VecMap<V> {\n+    fn extend<I: IntoIterator<Item=(usize, &'a V)>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().map(|(key, &value)| (key, value)));\n+    }\n+}\n+\n impl<V> Index<usize> for VecMap<V> {\n     type Output = V;\n "}, {"sha": "303a0ce811df6f825d60eed5d87d763ea0937e2b", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -217,3 +217,28 @@ fn test_drain() {\n \n     assert!(q.is_empty());\n }\n+\n+#[test]\n+fn test_extend_ref() {\n+    let mut a = BinaryHeap::new();\n+    a.push(1);\n+    a.push(2);\n+\n+    a.extend(&[3, 4, 5]);\n+\n+    assert_eq!(a.len(), 5);\n+    assert_eq!(a.into_sorted_vec(), [1, 2, 3, 4, 5]);\n+\n+    let mut a = BinaryHeap::new();\n+    a.push(1);\n+    a.push(2);\n+    let mut b = BinaryHeap::new();\n+    b.push(3);\n+    b.push(4);\n+    b.push(5);\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 5);\n+    assert_eq!(a.into_sorted_vec(), [1, 2, 3, 4, 5]);\n+}"}, {"sha": "8ab3eff0f4f6425e490adf4c09b6da257867e527", "filename": "src/libcollectionstest/bit/set.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbit%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbit%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbit%2Fset.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -448,6 +448,26 @@ fn test_bit_set_split_off() {\n                                                             0b00101011, 0b10101101])));\n }\n \n+#[test]\n+fn test_bit_set_extend_ref() {\n+    let mut a = BitSet::new();\n+    a.insert(3);\n+\n+    a.extend(&[5, 7, 10]);\n+\n+    assert_eq!(a.len(), 4);\n+    assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b00010101,0b00100000])));\n+\n+    let mut b = BitSet::new();\n+    b.insert(11);\n+    b.insert(15);\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 6);\n+    assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b00010101,0b00110001])));\n+}\n+\n mod bench {\n     use std::collections::{BitSet, BitVec};\n     use std::__rand::{Rng, thread_rng, ThreadRng};"}, {"sha": "696ae8aa7b68e87aeb1219a7b15e0519f6ca9f9d", "filename": "src/libcollectionstest/bit/vec.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbit%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbit%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbit%2Fvec.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -630,6 +630,24 @@ fn test_bit_vec_extend() {\n                                  0b01001001, 0b10010010, 0b10111101]));\n }\n \n+#[test]\n+fn test_bit_vecextend_ref() {\n+    let mut bv = BitVec::from_bytes(&[0b10100011]);\n+    bv.extend(&[true, false, true]);\n+\n+    assert_eq!(bv.len(), 11);\n+    assert!(bv.eq_vec(&[true, false, true, false, false, false, true, true,\n+                        true, false, true]));\n+\n+    let bw = BitVec::from_bytes(&[0b00010001]);\n+    bv.extend(&bw);\n+\n+    assert_eq!(bv.len(), 19);\n+    assert!(bv.eq_vec(&[true, false, true, false, false, false, true, true,\n+                        true, false, true, false, false, false, true, false,\n+                        false, false, true]));\n+}\n+\n #[test]\n fn test_bit_vec_append() {\n     // Append to BitVec that holds a multiple of u32::BITS bits"}, {"sha": "e617e194d300a6d348581e86cbf78d89f7c5d9be", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -249,6 +249,22 @@ fn test_entry(){\n     assert_eq!(map.len(), 6);\n }\n \n+#[test]\n+fn test_extend_ref() {\n+    let mut a = BTreeMap::new();\n+    a.insert(1, \"one\");\n+    let mut b = BTreeMap::new();\n+    b.insert(2, \"two\");\n+    b.insert(3, \"three\");\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 3);\n+    assert_eq!(a[&1], \"one\");\n+    assert_eq!(a[&2], \"two\");\n+    assert_eq!(a[&3], \"three\");\n+}\n+\n mod bench {\n     use std::collections::BTreeMap;\n     use std::__rand::{Rng, thread_rng};"}, {"sha": "97fb4b6b15fd63d94e6d6c9623bda7f0e54f12ef", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -184,3 +184,31 @@ fn test_show() {\n     assert_eq!(set_str, \"{1, 2}\");\n     assert_eq!(format!(\"{:?}\", empty), \"{}\");\n }\n+\n+#[test]\n+fn test_extend_ref() {\n+    let mut a = BTreeSet::new();\n+    a.insert(1);\n+\n+    a.extend(&[2, 3, 4]);\n+\n+    assert_eq!(a.len(), 4);\n+    assert!(a.contains(&1));\n+    assert!(a.contains(&2));\n+    assert!(a.contains(&3));\n+    assert!(a.contains(&4));\n+\n+    let mut b = BTreeSet::new();\n+    b.insert(5);\n+    b.insert(6);\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 6);\n+    assert!(a.contains(&1));\n+    assert!(a.contains(&2));\n+    assert!(a.contains(&3));\n+    assert!(a.contains(&4));\n+    assert!(a.contains(&5));\n+    assert!(a.contains(&6));\n+}"}, {"sha": "b073c2f3ae4dd307d99ef5e79a1b3e74c8044b32", "filename": "src/libcollectionstest/enum_set.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fenum_set.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -242,3 +242,25 @@ fn test_overflow() {\n     let mut set = EnumSet::new();\n     set.insert(Bar::V64);\n }\n+\n+#[test]\n+fn test_extend_ref() {\n+    let mut a = EnumSet::new();\n+    a.insert(A);\n+\n+    a.extend(&[A, C]);\n+\n+    assert_eq!(a.len(), 2);\n+    assert!(a.contains(&A));\n+    assert!(a.contains(&C));\n+\n+    let mut b = EnumSet::new();\n+    b.insert(B);\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 3);\n+    assert!(a.contains(&A));\n+    assert!(a.contains(&B));\n+    assert!(a.contains(&C));\n+}"}, {"sha": "d04ce574ed0a5ace60e5ba3a9575655fd7601f85", "filename": "src/libcollectionstest/linked_list.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flinked_list.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -321,6 +321,25 @@ fn test_show() {\n     assert_eq!(format!(\"{:?}\", list), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n }\n \n+#[test]\n+fn test_extend_ref() {\n+    let mut a = LinkedList::new();\n+    a.push_back(1);\n+\n+    a.extend(&[2, 3, 4]);\n+\n+    assert_eq!(a.len(), 4);\n+    assert_eq!(a, list_from(&[1, 2, 3, 4]));\n+\n+    let mut b = LinkedList::new();\n+    b.push_back(5);\n+    b.push_back(6);\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 6);\n+    assert_eq!(a, list_from(&[1, 2, 3, 4, 5, 6]));\n+}\n+\n #[bench]\n fn bench_collect_into(b: &mut test::Bencher) {\n     let v = &[0; 64];"}, {"sha": "0e9559c55b0d6ab348638d503f8b17cb6a9dbcd3", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -365,6 +365,14 @@ fn test_drain() {\n     assert_eq!(t, \"\");\n }\n \n+#[test]\n+fn test_extend_ref() {\n+    let mut a = \"foo\".to_string();\n+    a.extend(&['b', 'a', 'r']);\n+\n+    assert_eq!(&a, \"foobar\");\n+}\n+\n #[bench]\n fn bench_with_capacity(b: &mut Bencher) {\n     b.iter(|| {"}, {"sha": "8df2398c97e0d9d72f72d47df5d820e0017a6242", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -112,6 +112,21 @@ fn test_extend() {\n     assert_eq!(v, w);\n }\n \n+#[test]\n+fn test_extend_ref() {\n+    let mut v = vec![1, 2];\n+    v.extend(&[3, 4, 5]);\n+\n+    assert_eq!(v.len(), 5);\n+    assert_eq!(v, [1, 2, 3, 4, 5]);\n+\n+    let w = vec![6, 7];\n+    v.extend(&w);\n+\n+    assert_eq!(v.len(), 7);\n+    assert_eq!(v, [1, 2, 3, 4, 5, 6, 7]);\n+}\n+\n #[test]\n fn test_slice_from_mut() {\n     let mut values = vec![1, 2, 3, 4, 5];"}, {"sha": "14a36b7c4db791ae3b2259a90c77515e603aa8a5", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -894,3 +894,29 @@ fn test_retain() {\n     let v: Vec<_> = buf.into_iter().collect();\n     assert_eq!(&v[..], &[2, 4]);\n }\n+\n+#[test]\n+fn test_extend_ref() {\n+    let mut v = VecDeque::new();\n+    v.push_back(1);\n+    v.extend(&[2, 3, 4]);\n+\n+    assert_eq!(v.len(), 4);\n+    assert_eq!(v[0], 1);\n+    assert_eq!(v[1], 2);\n+    assert_eq!(v[2], 3);\n+    assert_eq!(v[3], 4);\n+\n+    let mut w = VecDeque::new();\n+    w.push_back(5);\n+    w.push_back(6);\n+    v.extend(&w);\n+\n+    assert_eq!(v.len(), 6);\n+    assert_eq!(v[0], 1);\n+    assert_eq!(v[1], 2);\n+    assert_eq!(v[2], 3);\n+    assert_eq!(v[3], 4);\n+    assert_eq!(v[4], 5);\n+    assert_eq!(v[5], 6);\n+}"}, {"sha": "3ab32323603ca1bd096d9e2e9fdc4115b6187457", "filename": "src/libcollectionstest/vec_map.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibcollectionstest%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_map.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -493,6 +493,22 @@ fn test_entry(){\n     assert_eq!(map.len(), 6);\n }\n \n+#[test]\n+fn test_extend_ref() {\n+    let mut a = VecMap::new();\n+    a.insert(1, \"one\");\n+    let mut b = VecMap::new();\n+    b.insert(2, \"two\");\n+    b.insert(3, \"three\");\n+\n+    a.extend(&b);\n+\n+    assert_eq!(a.len(), 3);\n+    assert_eq!(a[&1], \"one\");\n+    assert_eq!(a[&2], \"two\");\n+    assert_eq!(a[&3], \"three\");\n+}\n+\n mod bench {\n     use std::collections::VecMap;\n "}, {"sha": "333e1f0152a2bb9f325acfe7cbc256b95cbb850e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ed7d2edf68453c0344eb3cd55281e48c96ecb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b36ed7d2edf68453c0344eb3cd55281e48c96ecb", "patch": "@@ -2284,7 +2284,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         }\n         try!(write!(w, \"<h2 id='implementations'>Trait \\\n                           Implementations</h2>\"));\n-        let (derived, manual): (Vec<_>, _) = traits.iter().partition(|i| {\n+        let (derived, manual): (Vec<_>, Vec<&Impl>) = traits.iter().partition(|i| {\n             i.impl_.derived\n         });\n         for i in &manual {"}]}