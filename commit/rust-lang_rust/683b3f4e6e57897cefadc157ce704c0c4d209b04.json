{"sha": "683b3f4e6e57897cefadc157ce704c0c4d209b04", "node_id": "C_kwDOAAsO6NoAKDY4M2IzZjRlNmU1Nzg5N2NlZmFkYzE1N2NlNzA0YzBjNGQyMDliMDQ", "commit": {"author": {"name": "PunkyMunky64", "email": "46407361+PunkyMunky64@users.noreply.github.com", "date": "2022-08-17T05:29:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T05:29:14Z"}, "message": "Fixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time.", "tree": {"sha": "30e2c0f91910e3ff74e47246b1436dad81687db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e2c0f91910e3ff74e47246b1436dad81687db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683b3f4e6e57897cefadc157ce704c0c4d209b04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/HyqCRBK7hj4Ov3rIwAAYI0IAIaodss1chRbobMpLPzoxlD0\nz5HQZQPPoW4cmop5D/MZKgFWesgT+pQLXGeb0w/hk+s58VvayYZbKWLfLF7fH7rF\nYQQuyLUGlTtyuIIEAja1lWKkNpq+zSGnBcWHjm/Sh31BDy1Wuvm3aDCY+4511+n/\nFoY+5O6sl9yfx8tjQOlkuQTTaHSzXyckT1eelBDihL+ufSITXonCwiuKIA80rckx\nZ7s2dq9yesWnCdvGKAGmMIvZmpOta20b3R/n1Skb0Try7okvOatvSdRbA2U5X1ym\nSwWvqrxnnbkKtyBX2pse1pCg1b2WW1xs+qx4D3SVk+5MqG9XY/n7GOPu8ClYIxs=\n=1JKn\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e2c0f91910e3ff74e47246b1436dad81687db5\nparent 86c6ebee8fa0a5ad1e18e375113b06bd2849b634\nauthor PunkyMunky64 <46407361+PunkyMunky64@users.noreply.github.com> 1660714154 -0700\ncommitter GitHub <noreply@github.com> 1660714154 -0700\n\nFixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683b3f4e6e57897cefadc157ce704c0c4d209b04", "html_url": "https://github.com/rust-lang/rust/commit/683b3f4e6e57897cefadc157ce704c0c4d209b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683b3f4e6e57897cefadc157ce704c0c4d209b04/comments", "author": {"login": "PunkyMunky64", "id": 46407361, "node_id": "MDQ6VXNlcjQ2NDA3MzYx", "avatar_url": "https://avatars.githubusercontent.com/u/46407361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PunkyMunky64", "html_url": "https://github.com/PunkyMunky64", "followers_url": "https://api.github.com/users/PunkyMunky64/followers", "following_url": "https://api.github.com/users/PunkyMunky64/following{/other_user}", "gists_url": "https://api.github.com/users/PunkyMunky64/gists{/gist_id}", "starred_url": "https://api.github.com/users/PunkyMunky64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PunkyMunky64/subscriptions", "organizations_url": "https://api.github.com/users/PunkyMunky64/orgs", "repos_url": "https://api.github.com/users/PunkyMunky64/repos", "events_url": "https://api.github.com/users/PunkyMunky64/events{/privacy}", "received_events_url": "https://api.github.com/users/PunkyMunky64/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "html_url": "https://github.com/rust-lang/rust/commit/86c6ebee8fa0a5ad1e18e375113b06bd2849b634"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b5c8241d2943dedebb6f21393cfb49502aadaf3b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/683b3f4e6e57897cefadc157ce704c0c4d209b04/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683b3f4e6e57897cefadc157ce704c0c4d209b04/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=683b3f4e6e57897cefadc157ce704c0c4d209b04", "patch": "@@ -393,7 +393,7 @@ impl f64 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// Note that IEEE-754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -624,7 +624,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -655,7 +655,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases."}]}