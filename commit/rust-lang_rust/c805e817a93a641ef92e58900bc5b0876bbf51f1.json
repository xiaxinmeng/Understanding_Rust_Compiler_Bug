{"sha": "c805e817a93a641ef92e58900bc5b0876bbf51f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MDVlODE3YTkzYTY0MWVmOTJlNTg5MDBiYzViMDg3NmJiZjUxZjE=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-29T19:29:50Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-29T20:57:40Z"}, "message": "Fix doc comments", "tree": {"sha": "225f45aa93d0835fa73a5256333a8a214ea6b5a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225f45aa93d0835fa73a5256333a8a214ea6b5a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c805e817a93a641ef92e58900bc5b0876bbf51f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c805e817a93a641ef92e58900bc5b0876bbf51f1", "html_url": "https://github.com/rust-lang/rust/commit/c805e817a93a641ef92e58900bc5b0876bbf51f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c805e817a93a641ef92e58900bc5b0876bbf51f1/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b82f790b0342fa7eb4e3b81bf1ae00681b4543", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b82f790b0342fa7eb4e3b81bf1ae00681b4543", "html_url": "https://github.com/rust-lang/rust/commit/b2b82f790b0342fa7eb4e3b81bf1ae00681b4543"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ce5aee81ef9d7f822a22172fa3d89f39b14352a6", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c805e817a93a641ef92e58900bc5b0876bbf51f1/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c805e817a93a641ef92e58900bc5b0876bbf51f1/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c805e817a93a641ef92e58900bc5b0876bbf51f1", "patch": "@@ -16,15 +16,15 @@\n //! Here are the key differences:\n //!\n //! - This code may choose to bypass some checks (e.g. the occurs check)\n-//!   in case we know that there are no unbound type inference variables.\n-//!   This is the case for NLL, because at NLL time types are fully inferred\n-//!   up-to regions.\n+//!   in the case where we know that there are no unbound type inference\n+//!   variables. This is the case for NLL, because at NLL time types are fully\n+//!   inferred up-to regions.\n //! - This code uses \"universes\" to handle higher-ranked regions and\n //!   not the leak-check. This is \"more correct\" than what rustc does\n //!   and we are generally migrating in this direction, but NLL had to\n //!   get there first.\n //!\n-//! Also, this code assumes that there are no bound type vars at all, not even\n+//! Also, this code assumes that there are no bound types at all, not even\n //! free ones. This is ok because:\n //! - we are not relating anything quantified over some type variable\n //! - we will have instantiated all the bound type vars already (the one\n@@ -265,7 +265,7 @@ where\n     }\n \n     /// Relate a projection type and some value type lazily. This will always\n-    /// succeed, but we are pushing an additional `ProjectionEq` goal depending\n+    /// succeed, but we push an additional `ProjectionEq` goal depending\n     /// on the value type:\n     /// - if the value type is any type `T` which is not a projection, we push\n     ///   `ProjectionEq(projection = T)`."}, {"sha": "225e2841fb0ac15dd4e7c837f589d9541c431e6e", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c805e817a93a641ef92e58900bc5b0876bbf51f1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c805e817a93a641ef92e58900bc5b0876bbf51f1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=c805e817a93a641ef92e58900bc5b0876bbf51f1", "patch": "@@ -118,7 +118,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n     }\n \n     fn push_domain_goal(&mut self, _: DomainGoal<'tcx>) {\n-        // No-op\n+        bug!(\"should never be invoked with eager normalization\")\n     }\n \n     fn normalization() -> NormalizationStrategy {"}]}