{"sha": "9aee389b6e5a58eb867f4d035729f39e694f51ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWUzODliNmU1YTU4ZWI4NjdmNGQwMzU3MjlmMzllNjk0ZjUxZWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:14Z"}, "message": "rollup merge of #22485: pnkfelix/fsk-int-uint-audit\n\ncc #22240", "tree": {"sha": "795d7fd7acb8895c099d5ec3c2fbdd7c4f930243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795d7fd7acb8895c099d5ec3c2fbdd7c4f930243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aee389b6e5a58eb867f4d035729f39e694f51ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aee389b6e5a58eb867f4d035729f39e694f51ec", "html_url": "https://github.com/rust-lang/rust/commit/9aee389b6e5a58eb867f4d035729f39e694f51ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aee389b6e5a58eb867f4d035729f39e694f51ec/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90e40718f8e98dd99731e114a63ddbfb177dd25", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90e40718f8e98dd99731e114a63ddbfb177dd25", "html_url": "https://github.com/rust-lang/rust/commit/b90e40718f8e98dd99731e114a63ddbfb177dd25"}, {"sha": "fc0f6e86b6aead84fa0692340a30cce6d3622365", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0f6e86b6aead84fa0692340a30cce6d3622365", "html_url": "https://github.com/rust-lang/rust/commit/fc0f6e86b6aead84fa0692340a30cce6d3622365"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "3131952d94dbbdd96c28806484782c3976d705b7", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=9aee389b6e5a58eb867f4d035729f39e694f51ec", "patch": "@@ -124,7 +124,7 @@ impl<T> ToOwned<T> for T where T: Clone {\n /// ```rust\n /// use std::borrow::Cow;\n ///\n-/// fn abs_all(input: &mut Cow<Vec<int>, [int]>) {\n+/// fn abs_all(input: &mut Cow<Vec<i32>, [i32]>) {\n ///     for i in 0..input.len() {\n ///         let v = input[i];\n ///         if v < 0 {"}, {"sha": "b37bad5f7546c21094828cf36e6c54e70593d210", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=9aee389b6e5a58eb867f4d035729f39e694f51ec", "patch": "@@ -215,7 +215,7 @@ impl Ord for Ordering {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n-        (*self as int).cmp(&(*other as int))\n+        (*self as i32).cmp(&(*other as i32))\n     }\n }\n \n@@ -224,7 +224,7 @@ impl PartialOrd for Ordering {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {\n-        (*self as int).partial_cmp(&(*other as int))\n+        (*self as i32).partial_cmp(&(*other as i32))\n     }\n }\n \n@@ -482,7 +482,7 @@ mod impls {\n     }\n \n     partial_eq_impl! {\n-        bool char uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64\n+        bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64\n     }\n \n     macro_rules! eq_impl {\n@@ -492,7 +492,7 @@ mod impls {\n         )*)\n     }\n \n-    eq_impl! { () bool char uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n+    eq_impl! { () bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n     macro_rules! partial_ord_impl {\n         ($($t:ty)*) => ($(\n@@ -535,7 +535,7 @@ mod impls {\n         }\n     }\n \n-    partial_ord_impl! { char uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n+    partial_ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n     macro_rules! ord_impl {\n         ($($t:ty)*) => ($(\n@@ -565,7 +565,7 @@ mod impls {\n         }\n     }\n \n-    ord_impl! { char uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n+    ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n     // & pointers\n "}, {"sha": "7f46d9cbe5021d3da0308e397e8c3418ba8a82c5", "filename": "src/libcore/default.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=9aee389b6e5a58eb867f4d035729f39e694f51ec", "patch": "@@ -16,7 +16,7 @@\n //!\n //! ```\n //! struct SomeOptions {\n-//!     foo: int,\n+//!     foo: i32,\n //!     bar: f32,\n //! }\n //! ```\n@@ -28,7 +28,7 @@\n //!\n //! #[derive(Default)]\n //! struct SomeOptions {\n-//!     foo: int,\n+//!     foo: i32,\n //!     bar: f32,\n //! }\n //!\n@@ -56,7 +56,7 @@\n //!\n //! #[derive(Default)]\n //! struct SomeOptions {\n-//!     foo: int,\n+//!     foo: i32,\n //!     bar: f32,\n //!     baz: Kind,\n //! }\n@@ -73,7 +73,7 @@\n //! # use std::default::Default;\n //! # #[derive(Default)]\n //! # struct SomeOptions {\n-//! #     foo: int,\n+//! #     foo: i32,\n //! #     bar: f32,\n //! # }\n //! fn main() {\n@@ -93,7 +93,7 @@\n /// ```\n /// #[derive(Default)]\n /// struct SomeOptions {\n-///     foo: int,\n+///     foo: i32,\n ///     bar: f32,\n /// }\n /// ```\n@@ -113,7 +113,7 @@ pub trait Default {\n     ///\n     /// let i: i8 = Default::default();\n     /// let (x, y): (Option<String>, f64) = Default::default();\n-    /// let (a, b, (c, d)): (int, uint, (bool, bool)) = Default::default();\n+    /// let (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();\n     /// ```\n     ///\n     /// Making your own:\n@@ -150,13 +150,13 @@ default_impl! { (), () }\n default_impl! { bool, false }\n default_impl! { char, '\\x00' }\n \n-default_impl! { uint, 0 }\n+default_impl! { usize, 0 }\n default_impl! { u8, 0 }\n default_impl! { u16, 0 }\n default_impl! { u32, 0 }\n default_impl! { u64, 0 }\n \n-default_impl! { int, 0 }\n+default_impl! { isize, 0 }\n default_impl! { i8, 0 }\n default_impl! { i16, 0 }\n default_impl! { i32, 0 }"}, {"sha": "b2ee95963878edb13af4a4b99c9cf529377b13f4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee389b6e5a58eb867f4d035729f39e694f51ec/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9aee389b6e5a58eb867f4d035729f39e694f51ec", "patch": "@@ -50,10 +50,10 @@ pub type GlueFn = extern \"Rust\" fn(*const i8);\n #[derive(Copy)]\n pub struct TyDesc {\n     // sizeof(T)\n-    pub size: uint,\n+    pub size: usize,\n \n     // alignof(T)\n-    pub align: uint,\n+    pub align: usize,\n \n     // Called when a value of type `T` is no longer needed\n     pub drop_glue: GlueFn,\n@@ -186,15 +186,15 @@ extern \"rust-intrinsic\" {\n     /// would *exactly* overwrite a value. When laid out in vectors\n     /// and structures there may be additional padding between\n     /// elements.\n-    pub fn size_of<T>() -> uint;\n+    pub fn size_of<T>() -> usize;\n \n     /// Move a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: &mut T, src: T);\n \n-    pub fn min_align_of<T>() -> uint;\n-    pub fn pref_align_of<T>() -> uint;\n+    pub fn min_align_of<T>() -> usize;\n+    pub fn pref_align_of<T>() -> usize;\n \n     /// Get a static pointer to a type descriptor.\n     pub fn get_tydesc<T: ?Sized>() -> *const TyDesc;\n@@ -253,7 +253,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an\n     /// integer, since the conversion would throw away aliasing information.\n-    pub fn offset<T>(dst: *const T, offset: int) -> *const T;\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may *not* overlap.\n@@ -294,7 +294,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[unstable(feature = \"core\")]\n-    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may overlap.\n@@ -324,33 +324,33 @@ extern \"rust-intrinsic\" {\n     /// ```\n     ///\n     #[unstable(feature = \"core\")]\n-    pub fn copy_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n     /// bytes of memory starting at `dst` to `c`.\n     #[unstable(feature = \"core\",\n                reason = \"uncertain about naming and semantics\")]\n-    pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n+    pub fn set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n     pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T,\n-                                                  count: uint);\n+                                                  count: usize);\n     /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n-    pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n     /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n     /// size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`.\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n-    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: uint);\n+    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Perform a volatile load from the `src` pointer.\n     pub fn volatile_load<T>(src: *const T) -> T;"}]}