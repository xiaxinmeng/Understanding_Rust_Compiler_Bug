{"sha": "1b8a294555348d128b0641e3afec4fa830624d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGEyOTQ1NTUzNDhkMTI4YjA2NDFlM2FmZWM0ZmE4MzA2MjRkOGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-01T12:52:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-01T12:52:29Z"}, "message": "Merge #10108\n\n10108: fix: make `goto_implementation` multi-token mapping aware r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ddd92487059a011de3d8c650bed2290f5238d5ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd92487059a011de3d8c650bed2290f5238d5ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8a294555348d128b0641e3afec4fa830624d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhL3eNCRBK7hj4Ov3rIwAAQTcIADM0v8/JUVotIvH2f/Ic/NN2\nbkP/ZhxVdgBsbajsSbRusG/MMsVloNc/Gxb+1yFtRvQLZwswUUnu2HfCkV3bntjm\nf/zAlZxP/mJGP2+62bbYaQjVC+itQS+5cVxQMc4LFmNZ7CdaYl8mqrTIGswF3iaZ\nvFPLgmnMMTene5Y8jcoLta6OLG+zOU//T8NWGH5BSmx1w6hcJtl/fuCKRmM70MkR\nkIj3pvIEVihRvWW8nnJ4VNMVX2+TFOUBt8DYDCDey6vSVlRf7U1WNVR9eOIuGuxT\nItU4H138Kwh04Hp2OV3plBnX9Bhe2JxJmpSZhLONl+zmUfj+8xiL0POabtONCow=\n=zmzH\n-----END PGP SIGNATURE-----\n", "payload": "tree ddd92487059a011de3d8c650bed2290f5238d5ec\nparent 25368d24308d6a94ffe8b99f0122bcf5a2175322\nparent 68bf3593637adf9aa36cc4d1e11938720ca056eb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630500749 +0000\ncommitter GitHub <noreply@github.com> 1630500749 +0000\n\nMerge #10108\n\n10108: fix: make `goto_implementation` multi-token mapping aware r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8a294555348d128b0641e3afec4fa830624d8d", "html_url": "https://github.com/rust-lang/rust/commit/1b8a294555348d128b0641e3afec4fa830624d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8a294555348d128b0641e3afec4fa830624d8d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25368d24308d6a94ffe8b99f0122bcf5a2175322", "url": "https://api.github.com/repos/rust-lang/rust/commits/25368d24308d6a94ffe8b99f0122bcf5a2175322", "html_url": "https://github.com/rust-lang/rust/commit/25368d24308d6a94ffe8b99f0122bcf5a2175322"}, {"sha": "68bf3593637adf9aa36cc4d1e11938720ca056eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bf3593637adf9aa36cc4d1e11938720ca056eb", "html_url": "https://github.com/rust-lang/rust/commit/68bf3593637adf9aa36cc4d1e11938720ca056eb"}], "stats": {"total": 115, "additions": 67, "deletions": 48}, "files": [{"sha": "e5b882612750977c9467d0a426c436f1909736fc", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 66, "deletions": 45, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1b8a294555348d128b0641e3afec4fa830624d8d/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8a294555348d128b0641e3afec4fa830624d8d/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=1b8a294555348d128b0641e3afec4fa830624d8d", "patch": "@@ -1,9 +1,11 @@\n use hir::{AsAssocItem, Impl, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n+    helpers::pick_best_token,\n     RootDatabase,\n };\n-use syntax::{ast, AstNode};\n+use itertools::Itertools;\n+use syntax::{ast, AstNode, SyntaxKind::*, T};\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n \n@@ -26,52 +28,71 @@ pub(crate) fn goto_implementation(\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax().clone();\n \n-    let node = sema.find_node_at_offset_with_descend(&syntax, position.offset)?;\n-    let def = match &node {\n-        ast::NameLike::Name(name) => NameClass::classify(&sema, name).map(|class| match class {\n-            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n-                Definition::Local(local_def)\n-            }\n-        }),\n-        ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(&sema, name_ref).map(|class| match class {\n-                NameRefClass::Definition(def) => def,\n-                NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n-                    Definition::Local(local_ref)\n+    let original_token =\n+        pick_best_token(syntax.token_at_offset(position.offset), |kind| match kind {\n+            IDENT | T![self] => 1,\n+            _ => 0,\n+        })?;\n+    let range = original_token.text_range();\n+    let navs =\n+        sema.descend_into_macros_many(original_token)\n+            .into_iter()\n+            .filter_map(|token| token.parent().and_then(ast::NameLike::cast))\n+            .filter_map(|node| {\n+                let def = match &node {\n+                    ast::NameLike::Name(name) => {\n+                        NameClass::classify(&sema, name).map(|class| match class {\n+                            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                                Definition::Local(local_def)\n+                            }\n+                        })\n+                    }\n+                    ast::NameLike::NameRef(name_ref) => NameRefClass::classify(&sema, name_ref)\n+                        .map(|class| match class {\n+                            NameRefClass::Definition(def) => def,\n+                            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                                Definition::Local(local_ref)\n+                            }\n+                        }),\n+                    ast::NameLike::Lifetime(_) => None,\n+                }?;\n+\n+                match def {\n+                    Definition::ModuleDef(def) => Some(def),\n+                    _ => None,\n                 }\n             })\n-        }\n-        ast::NameLike::Lifetime(_) => None,\n-    }?;\n-\n-    let def = match def {\n-        Definition::ModuleDef(def) => def,\n-        _ => return None,\n-    };\n-    let navs = match def {\n-        hir::ModuleDef::Trait(trait_) => impls_for_trait(&sema, trait_),\n-        hir::ModuleDef::Adt(adt) => impls_for_ty(&sema, adt.ty(sema.db)),\n-        hir::ModuleDef::TypeAlias(alias) => impls_for_ty(&sema, alias.ty(sema.db)),\n-        hir::ModuleDef::BuiltinType(builtin) => {\n-            let module = sema.to_module_def(position.file_id)?;\n-            impls_for_ty(&sema, builtin.ty(sema.db, module))\n-        }\n-        hir::ModuleDef::Function(f) => {\n-            let assoc = f.as_assoc_item(sema.db)?;\n-            let name = assoc.name(sema.db)?;\n-            let trait_ = assoc.containing_trait_or_trait_impl(sema.db)?;\n-            impls_for_trait_item(&sema, trait_, name)\n-        }\n-        hir::ModuleDef::Const(c) => {\n-            let assoc = c.as_assoc_item(sema.db)?;\n-            let name = assoc.name(sema.db)?;\n-            let trait_ = assoc.containing_trait_or_trait_impl(sema.db)?;\n-            impls_for_trait_item(&sema, trait_, name)\n-        }\n-        _ => return None,\n-    };\n-    Some(RangeInfo { range: node.syntax().text_range(), info: navs })\n+            .unique()\n+            .filter_map(|def| {\n+                let navs = match def {\n+                    hir::ModuleDef::Trait(trait_) => impls_for_trait(&sema, trait_),\n+                    hir::ModuleDef::Adt(adt) => impls_for_ty(&sema, adt.ty(sema.db)),\n+                    hir::ModuleDef::TypeAlias(alias) => impls_for_ty(&sema, alias.ty(sema.db)),\n+                    hir::ModuleDef::BuiltinType(builtin) => {\n+                        let module = sema.to_module_def(position.file_id)?;\n+                        impls_for_ty(&sema, builtin.ty(sema.db, module))\n+                    }\n+                    hir::ModuleDef::Function(f) => {\n+                        let assoc = f.as_assoc_item(sema.db)?;\n+                        let name = assoc.name(sema.db)?;\n+                        let trait_ = assoc.containing_trait_or_trait_impl(sema.db)?;\n+                        impls_for_trait_item(&sema, trait_, name)\n+                    }\n+                    hir::ModuleDef::Const(c) => {\n+                        let assoc = c.as_assoc_item(sema.db)?;\n+                        let name = assoc.name(sema.db)?;\n+                        let trait_ = assoc.containing_trait_or_trait_impl(sema.db)?;\n+                        impls_for_trait_item(&sema, trait_, name)\n+                    }\n+                    _ => return None,\n+                };\n+                Some(navs)\n+            })\n+            .flatten()\n+            .collect();\n+\n+    Some(RangeInfo { range, info: navs })\n }\n \n fn impls_for_ty(sema: &Semantics<RootDatabase>, ty: hir::Type) -> Vec<NavigationTarget> {"}, {"sha": "c288c5c3e0816c54689358e8596688ff5f98e312", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8a294555348d128b0641e3afec4fa830624d8d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8a294555348d128b0641e3afec4fa830624d8d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=1b8a294555348d128b0641e3afec4fa830624d8d", "patch": "@@ -442,9 +442,7 @@ impl<'a> FindUsages<'a> {\n                         continue;\n                     }\n \n-                    if let Some(ast::NameLike::NameRef(name_ref)) =\n-                        sema.find_node_at_offset_with_descend(&tree, offset)\n-                    {\n+                    for name_ref in sema.find_nodes_at_offset_with_descend(&tree, offset) {\n                         if self.found_self_module_name_ref(&name_ref, sink) {\n                             return;\n                         }"}]}