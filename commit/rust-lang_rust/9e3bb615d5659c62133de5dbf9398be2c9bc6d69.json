{"sha": "9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllM2JiNjE1ZDU2NTljNjIxMzNkZTVkYmY5Mzk4YmUyYzliYzZkNjk=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T14:16:01Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:55:41Z"}, "message": "Accept `LocalDefId` as argument for `mir_build::lint::check`", "tree": {"sha": "b47137320a57dc0642e578d2a7e16a8c94a55c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47137320a57dc0642e578d2a7e16a8c94a55c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "html_url": "https://github.com/rust-lang/rust/commit/9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3bb615d5659c62133de5dbf9398be2c9bc6d69/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eada4101a0544fc97dca688810e32856ea9020e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eada4101a0544fc97dca688810e32856ea9020e1", "html_url": "https://github.com/rust-lang/rust/commit/eada4101a0544fc97dca688810e32856ea9020e1"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "69a04e772ecee741c26fa26eb79069923415266d", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3bb615d5659c62133de5dbf9398be2c9bc6d69/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3bb615d5659c62133de5dbf9398be2c9bc6d69/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "patch": "@@ -181,7 +181,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Body<'_> {\n             build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n-        lints::check(tcx, &body, def_id.to_def_id());\n+        lints::check(tcx, &body, def_id);\n \n         // The borrow checker will replace all the regions here with its own\n         // inference variables. There's no point having non-erased regions here."}, {"sha": "990f55f6d422fba5c4e4792af4537a10b044be78", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e3bb615d5659c62133de5dbf9398be2c9bc6d69/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3bb615d5659c62133de5dbf9398be2c9bc6d69/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=9e3bb615d5659c62133de5dbf9398be2c9bc6d69", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::graph::iterate::{\n     ControlFlow, NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::mir::{BasicBlock, Body, Operand, TerminatorKind};\n@@ -10,8 +10,8 @@ use rustc_middle::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc_span::Span;\n \n-crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n-    let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: LocalDefId) {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id);\n \n     if let Some(fn_like_node) = FnLikeNode::from_node(tcx.hir().get(hir_id)) {\n         if let FnKind::Closure(_) = fn_like_node.kind() {\n@@ -20,12 +20,12 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n         }\n \n         // If this is trait/impl method, extract the trait's substs.\n-        let trait_substs = match tcx.opt_associated_item(def_id) {\n+        let trait_substs = match tcx.opt_associated_item(def_id.to_def_id()) {\n             Some(AssocItem {\n                 container: AssocItemContainer::TraitContainer(trait_def_id), ..\n             }) => {\n                 let trait_substs_count = tcx.generics_of(trait_def_id).count();\n-                &InternalSubsts::identity_for_item(tcx, def_id)[..trait_substs_count]\n+                &InternalSubsts::identity_for_item(tcx, def_id.to_def_id())[..trait_substs_count]\n             }\n             _ => &[],\n         };\n@@ -37,7 +37,7 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n \n         vis.reachable_recursive_calls.sort();\n \n-        let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+        let hir_id = tcx.hir().as_local_hir_id(def_id);\n         let sp = tcx.sess.source_map().guess_head_span(tcx.hir().span(hir_id));\n         tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION, hir_id, sp, |lint| {\n             let mut db = lint.build(\"function cannot return without recursing\");\n@@ -57,7 +57,7 @@ struct NonRecursive;\n struct Search<'mir, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'mir Body<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     trait_substs: &'tcx [GenericArg<'tcx>],\n \n     reachable_recursive_calls: Vec<Span>,\n@@ -84,7 +84,8 @@ impl<'mir, 'tcx> Search<'mir, 'tcx> {\n             // calling into an entirely different method (for example, a call from the default\n             // method in the trait to `<A as Trait<B>>::method`, where `A` and/or `B` are\n             // specific types).\n-            return call_fn_id == def_id && &call_substs[..trait_substs.len()] == trait_substs;\n+            return call_fn_id == def_id.to_def_id()\n+                && &call_substs[..trait_substs.len()] == trait_substs;\n         }\n \n         false"}]}