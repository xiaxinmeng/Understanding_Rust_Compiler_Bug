{"sha": "022ebc198b9e9e42880a4f3bcd31565533333296", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMmViYzE5OGI5ZTllNDI4ODBhNGYzYmNkMzE1NjU1MzMzMzMyOTY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-23T19:22:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-27T16:58:39Z"}, "message": "Implementation mising features in lock_and_signal for Win32. Also  lowered the minimum stack size to get the pfib benchmark to run without exhausting its address space on Windows.", "tree": {"sha": "251ee1e8648e352da07ba927cfd7bd8cb9ebd5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251ee1e8648e352da07ba927cfd7bd8cb9ebd5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022ebc198b9e9e42880a4f3bcd31565533333296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022ebc198b9e9e42880a4f3bcd31565533333296", "html_url": "https://github.com/rust-lang/rust/commit/022ebc198b9e9e42880a4f3bcd31565533333296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022ebc198b9e9e42880a4f3bcd31565533333296/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/681c063ec02ce9fc6bdcd99b0b73f016a9839d59", "html_url": "https://github.com/rust-lang/rust/commit/681c063ec02ce9fc6bdcd99b0b73f016a9839d59"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "ca3ee9c6a30e674cf01a134d617581beed96d983", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=022ebc198b9e9e42880a4f3bcd31565533333296", "patch": "@@ -87,6 +87,7 @@ rust_dom::malloc(size_t size, memory_region::memory_region_type type) {\n     } else if (type == memory_region::SYNCHRONIZED) {\n         return synchronized_region.malloc(size);\n     }\n+    I(this, false);\n     return NULL;\n }\n "}, {"sha": "64befd6ee42d667a896141661ddd030a8744ee74", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=022ebc198b9e9e42880a4f3bcd31565533333296", "patch": "@@ -54,8 +54,7 @@ rust_srv::fatal(const char *expression,\n              \"fatal, '%s' failed, %s:%d %s\",\n              expression, file, (int)line, buf);\n     log(msg);\n-    abort();\n-    //exit(1);\n+    exit(1);\n }\n \n void"}, {"sha": "754ff1edaf13b59b776f57d512e4c163e5973a3b", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=022ebc198b9e9e42880a4f3bcd31565533333296", "patch": "@@ -14,9 +14,9 @@\n \n // FIXME (issue #151): This should be 0x300; the change here is for\n // practicality's sake until stack growth is working.\n-static size_t const min_stk_bytes = 0x300000;\n-// static size_t const min_stk_bytes = 0x10000;\n-\n+//static size_t const min_stk_bytes = 0x300000;\n+//static size_t const min_stk_bytes = 0x10000;\n+static size_t const min_stk_bytes = 0x100000;\n \n // Task stack segments. Heap allocated and chained together.\n "}, {"sha": "93275ca3e07a372cf634614ce7da056d03da1ac3", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=022ebc198b9e9e42880a4f3bcd31565533333296", "patch": "@@ -41,18 +41,19 @@ lock_and_signal::~lock_and_signal() {\n void lock_and_signal::lock() {\n #if defined(__WIN32__)\n     EnterCriticalSection(&_cs);\n+    _holding_thread = GetCurrentThreadId();\n #else\n     CHECKED(pthread_mutex_lock(&_mutex));\n     _holding_thread = pthread_self();\n-    _locked = true;\n #endif\n+    _locked = true;\n }\n \n void lock_and_signal::unlock() {\n+    _locked = false;\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n #else\n-    _locked = false;\n     CHECKED(pthread_mutex_unlock(&_mutex));\n #endif\n }\n@@ -108,8 +109,7 @@ void lock_and_signal::signal_all() {\n bool lock_and_signal::lock_held_by_current_thread()\n {\n #if defined(__WIN32__)\n-    // TODO: implement this functionality for win32.\n-    return false;\n+    return _locked && _holding_thread == GetCurrentThreadId();\n #else\n     return _locked && _holding_thread == pthread_self();\n #endif"}, {"sha": "608c1fcbe3e8f9304b809d0c01139bc846f5e053", "filename": "src/rt/sync/lock_and_signal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Fsync%2Flock_and_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/022ebc198b9e9e42880a4f3bcd31565533333296/src%2Frt%2Fsync%2Flock_and_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.h?ref=022ebc198b9e9e42880a4f3bcd31565533333296", "patch": "@@ -6,13 +6,14 @@ class lock_and_signal {\n #if defined(__WIN32__)\n     HANDLE _event;\n     CRITICAL_SECTION _cs;\n+    DWORD _holding_thread;\n #else\n     pthread_cond_t _cond;\n     pthread_mutex_t _mutex;\n \n     pthread_t _holding_thread;\n-    bool _locked;\n #endif\n+    bool _locked;\n public:\n     lock_and_signal();\n     virtual ~lock_and_signal();"}]}