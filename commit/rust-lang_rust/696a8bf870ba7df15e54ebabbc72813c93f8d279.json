{"sha": "696a8bf870ba7df15e54ebabbc72813c93f8d279", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NmE4YmY4NzBiYTdkZjE1ZTU0ZWJhYmJjNzI4MTNjOTNmOGQyNzk=", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-05-15T12:07:32Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-05-15T12:44:45Z"}, "message": "Address comments and add more tests\n\nFix tests\n\nFmt code", "tree": {"sha": "2d588e40a18ce9d1f7c8e81ee411751ac8e659a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d588e40a18ce9d1f7c8e81ee411751ac8e659a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696a8bf870ba7df15e54ebabbc72813c93f8d279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696a8bf870ba7df15e54ebabbc72813c93f8d279", "html_url": "https://github.com/rust-lang/rust/commit/696a8bf870ba7df15e54ebabbc72813c93f8d279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696a8bf870ba7df15e54ebabbc72813c93f8d279/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0222565d8a4f8e60c5f175305d29dc9af0b3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0222565d8a4f8e60c5f175305d29dc9af0b3a5", "html_url": "https://github.com/rust-lang/rust/commit/3f0222565d8a4f8e60c5f175305d29dc9af0b3a5"}], "stats": {"total": 274, "additions": 249, "deletions": 25}, "files": [{"sha": "f301932ad709da1f5679084e8bdfd55904839b24", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 249, "deletions": 25, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/696a8bf870ba7df15e54ebabbc72813c93f8d279/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696a8bf870ba7df15e54ebabbc72813c93f8d279/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=696a8bf870ba7df15e54ebabbc72813c93f8d279", "patch": "@@ -3,11 +3,12 @@ use crate::{\n     AssistId,\n };\n use ide_db::helpers::FamousDefs;\n+use itertools::Itertools;\n+use stdx::format_to;\n use syntax::{\n-    ast::{self, Impl, NameOwner},\n+    ast::{self, AttrsOwner, GenericParamsOwner, Impl, NameOwner, TypeBoundsOwner},\n     AstNode,\n };\n-use crate::utils::generate_trait_impl_text;\n \n // Assist: generate_default_from_new\n //\n@@ -60,37 +61,66 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     let insert_location = impl_.syntax().text_range();\n-    let code = match ast::Struct::cast(impl_.self_ty().unwrap().syntax().clone()){\n-        None => {\n-            default_fn_node_for_new(impl_)\n-        }\n-        Some(strukt) => {\n-            generate_trait_impl_text(&ast::Adt::Struct(strukt),\"core:default:Default\",\"    fn default() -> Self {{\n-        Self::new()\n-    }}\")\n-        }\n-    };\n+\n     acc.add(\n         AssistId(\"generate_default_from_new\", crate::AssistKind::Generate),\n         \"Generate a Default impl from a new fn\",\n         insert_location,\n         move |builder| {\n+            let default_code = \"    fn default() -> Self {\n+        Self::new()\n+    }\";\n+            let code = generate_trait_impl_text_from_impl(&impl_, \"Default\", default_code);\n             builder.insert(insert_location.end(), code);\n         },\n     )\n }\n \n-fn default_fn_node_for_new(impl_: Impl) -> String {\n-    format!(\n-        \"\n+fn generate_trait_impl_text_from_impl(impl_: &ast::Impl, trait_text: &str, code: &str) -> String {\n+    let generic_params = impl_.generic_param_list();\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\n\");\n+    impl_\n+        .attrs()\n+        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+    buf.push_str(\"impl\");\n+\n+    if let Some(generic_params) = &generic_params {\n+        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n+        let type_params = generic_params.type_params().map(|type_param| {\n+            let mut buf = String::new();\n+            if let Some(it) = type_param.name() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            if let Some(it) = type_param.colon_token() {\n+                format_to!(buf, \"{} \", it);\n+            }\n+            if let Some(it) = type_param.type_bound_list() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            buf\n+        });\n+        let const_params = generic_params.const_params().map(|t| t.syntax().to_string());\n+        let generics = lifetimes.chain(type_params).chain(const_params).format(\", \");\n+        format_to!(buf, \"<{}>\", generics);\n+    }\n+\n+    buf.push(' ');\n+    buf.push_str(trait_text);\n+    buf.push_str(\" for \");\n+    buf.push_str(&impl_.self_ty().unwrap().syntax().text().to_string());\n+\n+    match impl_.where_clause() {\n+        Some(where_clause) => {\n+            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+        }\n+        None => {\n+            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+        }\n+    }\n \n-impl Default for {} {{\n-    fn default() -> Self {{\n-        Self::new()\n-    }}\n-}}\",\n-        impl_.self_ty().unwrap().syntax().text()\n-    )\n+    buf\n }\n \n fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> bool {\n@@ -185,7 +215,7 @@ impl Default for Test {\n     }\n \n     #[test]\n-    fn generate_default3() {\n+    fn new_function_with_generic() {\n         check_pass(\n             r#\"\n pub struct Foo<T> {\n@@ -194,7 +224,7 @@ pub struct Foo<T> {\n \n impl<T> Foo<T> {\n     pub fn ne$0w() -> Self {\n-        todo!()\n+        unimplemented!()\n     }\n }\n \"#,\n@@ -205,7 +235,7 @@ pub struct Foo<T> {\n \n impl<T> Foo<T> {\n     pub fn new() -> Self {\n-        todo!()\n+        unimplemented!()\n     }\n }\n \n@@ -218,6 +248,200 @@ impl<T> Default for Foo<T> {\n         );\n     }\n \n+    #[test]\n+    fn new_function_with_generics() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: *mut T,\n+    _bar: *mut B,\n+}\n+\n+impl<T, B> Foo<T, B> {\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: *mut T,\n+    _bar: *mut B,\n+}\n+\n+impl<T, B> Foo<T, B> {\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T, B> Default for Foo<T, B> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generic_and_bound() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T> {\n+    pub fn ne$0w() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T> {\n+    pub fn new() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\n+impl<T: From<i32>> Default for Foo<T> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generics_and_bounds() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B> {\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B> {\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Default for Foo<T, B> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generic_and_where() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    pub fn ne$0w() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    pub fn new() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\n+impl<T: From<i32>> Default for Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generics_and_wheres() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Default for Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn new_function_with_parameters() {\n         cov_mark::check!(new_function_with_parameters);"}]}