{"sha": "816e31b1c608626f1a67387676f85544f3da843d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmUzMWIxYzYwODYyNmYxYTY3Mzg3Njc2Zjg1NTQ0ZjNkYTg0M2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T19:31:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T19:31:53Z"}, "message": "Rollup merge of #57481 - euclio:bool-cast-suggestion, r=estebank\n\nprovide suggestion for invalid boolean cast\n\nAlso, don't suggest comparing to zero for non-numeric expressions.", "tree": {"sha": "910cec77aea608f59c6492c0fea3482882bfa0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910cec77aea608f59c6492c0fea3482882bfa0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816e31b1c608626f1a67387676f85544f3da843d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPOOpCRBK7hj4Ov3rIwAAdHIIAAVrPkID4QKR4cptPE301nTL\nedeUpn03OUERC+TkGtrQXRbPjQulDnuA+RpY8yw9d82wxgK6L/bq1bOpP3u8KDmE\nXF2fSN7v+hT4FiMP875/Qtm5TG883xI/uJvHyeoqGV4mPm4ntGoYsuRAKLuwLkWE\nvy/nwkXnSaEDOqDcLoJEXKUWElwSGxZDqWOTxs38CCKUNjVMI7lYJC+Y9o/lQxlB\nH/N6Opz2/xTA0Bi6DbpNhDAZpuFLIVqpbW0Mo28CxHl94UgHI8fLTrpbnPEiB9bX\nfWVQoquMIUDBYdP/V1V4jYGA/QbEKiwo/uYqG7WUtlPxcgknqFZ0QGlFsw5ZAjo=\n=js1S\n-----END PGP SIGNATURE-----\n", "payload": "tree 910cec77aea608f59c6492c0fea3482882bfa0d0\nparent 8c001b12cc500358661415f51798bf1468d0e9b2\nparent 565c39de439f59e83efe2f0064c0dbebb287c8e9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547494313 +0100\ncommitter GitHub <noreply@github.com> 1547494313 +0100\n\nRollup merge of #57481 - euclio:bool-cast-suggestion, r=estebank\n\nprovide suggestion for invalid boolean cast\n\nAlso, don't suggest comparing to zero for non-numeric expressions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816e31b1c608626f1a67387676f85544f3da843d", "html_url": "https://github.com/rust-lang/rust/commit/816e31b1c608626f1a67387676f85544f3da843d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816e31b1c608626f1a67387676f85544f3da843d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c001b12cc500358661415f51798bf1468d0e9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c001b12cc500358661415f51798bf1468d0e9b2", "html_url": "https://github.com/rust-lang/rust/commit/8c001b12cc500358661415f51798bf1468d0e9b2"}, {"sha": "565c39de439f59e83efe2f0064c0dbebb287c8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/565c39de439f59e83efe2f0064c0dbebb287c8e9", "html_url": "https://github.com/rust-lang/rust/commit/565c39de439f59e83efe2f0064c0dbebb287c8e9"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "3f185ba194903f068cd8e7571b18239f8bc30c8d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -257,10 +257,28 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     .emit();\n             }\n             CastError::CastToBool => {\n-                struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\")\n-                    .span_label(self.span, \"unsupported cast\")\n-                    .help(\"compare with zero instead\")\n-                    .emit();\n+                let mut err =\n+                    struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\");\n+\n+                if self.expr_ty.is_numeric() {\n+                    match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                        Ok(snippet) => {\n+                            err.span_suggestion_with_applicability(\n+                                self.span,\n+                                \"compare with zero instead\",\n+                                format!(\"{} != 0\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                        Err(_) => {\n+                            err.span_help(self.span, \"compare with zero instead\");\n+                        }\n+                    }\n+                } else {\n+                    err.span_label(self.span, \"unsupported cast\");\n+                }\n+\n+                err.emit();\n             }\n             CastError::CastToChar => {\n                 type_error_struct!(fcx.tcx.sess, self.span, self.expr_ty, E0604,"}, {"sha": "8130f4dedc9aa80c94c2d3b9f0e601c87a4fa18d", "filename": "src/test/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -1,4 +1,9 @@\n fn main() {\n-    let u = 5 as bool;\n-    //~^ ERROR cannot cast as `bool`\n+    let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+                       //~| HELP compare with zero instead\n+                       //~| SUGGESTION 5 != 0\n+    let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+                             //~| HELP compare with zero instead\n+                             //~| SUGGESTION (1 + 2) != 0\n+    let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n }"}, {"sha": "6099a4195b329b9f99c03121d87616a14d2a14e7", "filename": "src/test/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -1,11 +1,21 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:2:13\n    |\n-LL |     let u = 5 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n+LL |     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:5:13\n+   |\n+LL |     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:8:13\n    |\n-   = help: compare with zero instead\n+LL |     let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n+   |             ^^^^^^^^^^^^^^^ unsupported cast\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0054`."}, {"sha": "52f6af78a9be5f00f893910254297b2bf1141ca8", "filename": "src/test/ui/cast/cast-rfc0401-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-rfc0401-2.stderr?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401-2.rs:6:13\n    |\n LL |     let _ = 3 as bool;\n-   |             ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^ help: compare with zero instead: `3 != 0`\n \n error: aborting due to previous error\n "}, {"sha": "cce32fa2944077ab23431769a2bb0ded4e77c6ca", "filename": "src/test/ui/error-codes/E0054.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0054.stderr?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -2,9 +2,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/E0054.rs:3:24\n    |\n LL |     let x_is_nonzero = x as bool; //~ ERROR E0054\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error: aborting due to previous error\n "}, {"sha": "ff6504e9688e590edbfdeb771cc775bd6eaed532", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -52,9 +52,7 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/error-festival.rs:33:24\n    |\n LL |     let x_is_nonzero = x as bool;\n-   |                        ^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |                        ^^^^^^^^^ help: compare with zero instead: `x != 0`\n \n error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18"}, {"sha": "76091f2d09ed4ec2fd2ee2f172e23e01356d096d", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/816e31b1c608626f1a67387676f85544f3da843d/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=816e31b1c608626f1a67387676f85544f3da843d", "patch": "@@ -90,17 +90,13 @@ error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:39:13\n    |\n LL |     let _ = 3_i32 as bool; //~ ERROR cannot cast\n-   |             ^^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n+   |             ^^^^^^^^^^^^^ help: compare with zero instead: `3_i32 != 0`\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-rfc0401.rs:40:13\n    |\n LL |     let _ = E::A as bool; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^ unsupported cast\n-   |\n-   = help: compare with zero instead\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13"}]}