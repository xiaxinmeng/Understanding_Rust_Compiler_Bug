{"sha": "3b7720399a9006d9d7b89c251fa37ead46f9db7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzcyMDM5OWE5MDA2ZDlkN2I4OWMyNTFmYTM3ZWFkNDZmOWRiN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T18:51:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T18:51:46Z"}, "message": "Auto merge of #52616 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #51807 (Deprecation of str::slice_unchecked(_mut))\n - #52051 (mem::swap the obvious way for types smaller than the SIMD optimization's block size)\n - #52465 (Add CI test harness for `thumb*` targets. [IRR-2018-embedded])\n - #52507 (Reword when `_` couldn't be inferred)\n - #52508 (Document that Unique::empty() and NonNull::dangling() aren't sentinel values)\n - #52521 (Fix links in rustdoc book.)\n - #52581 (Avoid using `#[macro_export]` for documenting builtin macros)\n - #52582 (Typo)\n - #52587 (Add missing backtick in UniversalRegions doc comment)\n - #52594 (Run the error index tool against the sysroot libdir)\n - #52615 (Added new lines to .gitignore.)", "tree": {"sha": "893229ffba03c1f5b454d36ae07257ccf1a75d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/893229ffba03c1f5b454d36ae07257ccf1a75d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7720399a9006d9d7b89c251fa37ead46f9db7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7720399a9006d9d7b89c251fa37ead46f9db7a", "html_url": "https://github.com/rust-lang/rust/commit/3b7720399a9006d9d7b89c251fa37ead46f9db7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7720399a9006d9d7b89c251fa37ead46f9db7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32772fddd52013a38ece584279b6bc422b2d8b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/32772fddd52013a38ece584279b6bc422b2d8b9b", "html_url": "https://github.com/rust-lang/rust/commit/32772fddd52013a38ece584279b6bc422b2d8b9b"}, {"sha": "b954d4d1b5a97cf9c13929a742e81035f3158440", "url": "https://api.github.com/repos/rust-lang/rust/commits/b954d4d1b5a97cf9c13929a742e81035f3158440", "html_url": "https://github.com/rust-lang/rust/commit/b954d4d1b5a97cf9c13929a742e81035f3158440"}], "stats": {"total": 274, "additions": 165, "deletions": 109}, "files": [{"sha": "9ffaa82e1c8b5dace88ca77f19aa55047dc4f7cc", "filename": ".gitignore", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -86,15 +86,18 @@ __pycache__/\n target/\n /test/\n /tmp/\n+tags\n+tags.*\n TAGS\n-TAGS.emacs\n-TAGS.vi\n+TAGS.*\n \\#*\n \\#*\\#\n config.mk\n config.stamp\n keywords.md\n lexer.ml\n+mir_dump\n+Session.vim\n src/etc/dl\n tmp.*.rs\n version.md"}, {"sha": "38bba40aa654bda8b8b34a39455540acdff9c708", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -966,7 +966,9 @@ impl Step for Compiletest {\n             builder.ensure(compile::Rustc { compiler, target });\n         }\n \n-        builder.ensure(compile::Test { compiler, target });\n+        if builder.no_std(target) != Some(true) {\n+            builder.ensure(compile::Test { compiler, target });\n+        }\n         builder.ensure(native::TestHelpers { target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n "}, {"sha": "0969e5abe07dcb52273ae0078e39a9f3c429944c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -275,7 +275,7 @@ pub fn prepare_tool_cargo(\n \n macro_rules! tool {\n     ($($name:ident, $path:expr, $tool_name:expr, $mode:expr $(,llvm_tools = $llvm:expr)*;)+) => {\n-        #[derive(Copy, Clone)]\n+        #[derive(Copy, PartialEq, Eq, Clone)]\n         pub enum Tool {\n             $(\n                 $name,\n@@ -640,7 +640,7 @@ impl<'a> Builder<'a> {\n     fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n-            if compiler.stage == 0 {\n+            if compiler.stage == 0 && tool != Tool::ErrorIndex {\n                 self.build.rustc_snapshot_libdir()\n             } else {\n                 PathBuf::from(&self.sysroot_libdir(compiler, compiler.host))"}, {"sha": "702f9b2886e708d14aac472e6d3674d72e2c16be", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -80,6 +80,11 @@ RUN \\\n   echo \"# a\" >> /usr/local/mips-linux-musl/bin/mips-openwrt-linux-musl-wrapper.sh && \\\n   echo \"# b\" >> /usr/local/mipsel-linux-musl/bin/mipsel-openwrt-linux-musl-wrapper.sh\n \n+ENV RUN_MAKE_TARGETS=thumbv6m-none-eabi\n+ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7m-none-eabi\n+ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabi\n+ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabihf\n+\n ENV TARGETS=asmjs-unknown-emscripten\n ENV TARGETS=$TARGETS,wasm32-unknown-emscripten\n ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\n@@ -120,7 +125,9 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-emscripten \\\n       --disable-docs\n \n-ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n+ENV SCRIPT \\ \n+      python2.7 ../x.py test --target $RUN_MAKE_TARGETS src/test/run-make && \\\n+      python2.7 ../x.py dist --target $TARGETS\n \n # sccache\n COPY scripts/sccache.sh /scripts/"}, {"sha": "615b3dca199f1cc218a426b49b1bfd2e74d40435", "filename": "src/doc/rustdoc/src/passes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -5,8 +5,8 @@ Rustdoc has a concept called \"passes\". These are transformations that\n \n In addition to the passes below, check out the docs for these flags:\n \n-* [`--passes`](command-line-arguments.html#--passes-add-more-rustdoc-passes)\n-* [`--no-defaults`](command-line-arguments.html#--no-defaults-dont-run-default-passes)\n+* [`--passes`](command-line-arguments.html#a--passes-add-more-rustdoc-passes)\n+* [`--no-defaults`](command-line-arguments.html#a--no-defaults-dont-run-default-passes)\n \n ## Default passes\n "}, {"sha": "870bf971cd3f626d82c086dfd5021a94378b2df8", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -268,11 +268,11 @@ impl str {\n         let mut result = String::new();\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(from) {\n-            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(unsafe { self.get_unchecked(last_end..start) });\n             result.push_str(to);\n             last_end = start + part.len();\n         }\n-        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });\n         result\n     }\n \n@@ -309,11 +309,11 @@ impl str {\n         let mut result = String::with_capacity(32);\n         let mut last_end = 0;\n         for (start, part) in self.match_indices(pat).take(count) {\n-            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(unsafe { self.get_unchecked(last_end..start) });\n             result.push_str(to);\n             last_end = start + part.len();\n         }\n-        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });\n         result\n     }\n "}, {"sha": "631779a17a1655e6e261e9864f277d3ae32bc881", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1222,7 +1222,7 @@ impl String {\n \n         while idx < len {\n             let ch = unsafe {\n-                self.slice_unchecked(idx, len).chars().next().unwrap()\n+                self.get_unchecked(idx..len).chars().next().unwrap()\n             };\n             let ch_len = ch.len_utf8();\n "}, {"sha": "6275c7bb112063dc2205fc75698a7d6f7b8d3ba1", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -177,9 +177,9 @@ fn test_join_for_different_lengths_with_long_separator() {\n \n #[test]\n fn test_unsafe_slice() {\n-    assert_eq!(\"ab\", unsafe {\"abc\".slice_unchecked(0, 2)});\n-    assert_eq!(\"bc\", unsafe {\"abc\".slice_unchecked(1, 3)});\n-    assert_eq!(\"\", unsafe {\"abc\".slice_unchecked(1, 1)});\n+    assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n+    assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n+    assert_eq!(\"\", unsafe {\"abc\".get_unchecked(1..1)});\n     fn a_million_letter_a() -> String {\n         let mut i = 0;\n         let mut rs = String::new();\n@@ -200,7 +200,7 @@ fn test_unsafe_slice() {\n     }\n     let letters = a_million_letter_a();\n     assert_eq!(half_a_million_letter_a(),\n-        unsafe { letters.slice_unchecked(0, 500000)});\n+        unsafe { letters.get_unchecked(0..500000)});\n }\n \n #[test]"}, {"sha": "83f9dfea8f2676059c9dc6cf4c0617534ddd6201", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -543,6 +543,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n+#[cfg(dox)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n@@ -551,8 +552,7 @@ mod builtin {\n     ///\n     /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -564,8 +564,7 @@ mod builtin {\n     ///\n     /// [`std::format_args!`]: ../std/macro.format_args.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -577,8 +576,7 @@ mod builtin {\n     ///\n     /// [`std::env!`]: ../std/macro.env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -590,8 +588,7 @@ mod builtin {\n     ///\n     /// [`std::option_env!`]: ../std/macro.option_env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -603,8 +600,7 @@ mod builtin {\n     ///\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -616,8 +612,7 @@ mod builtin {\n     ///\n     /// [`std::concat!`]: ../std/macro.concat.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -629,8 +624,7 @@ mod builtin {\n     ///\n     /// [`std::line!`]: ../std/macro.line.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -639,8 +633,7 @@ mod builtin {\n     ///\n     /// [`std::column!`]: ../std/macro.column.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -649,8 +642,7 @@ mod builtin {\n     ///\n     /// [`std::file!`]: ../std/macro.file.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -659,8 +651,7 @@ mod builtin {\n     ///\n     /// [`std::stringify!`]: ../std/macro.stringify.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -669,8 +660,7 @@ mod builtin {\n     ///\n     /// [`std::include_str!`]: ../std/macro.include_str.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -682,8 +672,7 @@ mod builtin {\n     ///\n     /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -695,8 +684,7 @@ mod builtin {\n     ///\n     /// [`std::module_path!`]: ../std/macro.module_path.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -705,8 +693,7 @@ mod builtin {\n     ///\n     /// [`std::cfg!`]: ../std/macro.cfg.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -715,8 +702,7 @@ mod builtin {\n     ///\n     /// [`std::include!`]: ../std/macro.include.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -727,9 +713,8 @@ mod builtin {\n     /// For more information, see the documentation for [`std::assert!`].\n     ///\n     /// [`std::assert!`]: ../std/macro.assert.html\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(dox)]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "a0fe6e98806062059136688fc77f9374ecfde8b5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -638,7 +638,7 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        ptr::swap_nonoverlapping(x, y, 1);\n+        ptr::swap_nonoverlapping_one(x, y);\n     }\n }\n "}, {"sha": "d020e14be4cbdd8a6dba3e445e6af0e08dc4404e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -187,6 +187,19 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     swap_nonoverlapping_bytes(x, y, len)\n }\n \n+#[inline]\n+pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+    // For types smaller than the block optimization below,\n+    // just swap directly to avoid pessimizing codegen.\n+    if mem::size_of::<T>() < 32 {\n+        let z = read(x);\n+        copy_nonoverlapping(y, x, 1);\n+        write(y, z);\n+    } else {\n+        swap_nonoverlapping(x, y, 1);\n+    }\n+}\n+\n #[inline]\n unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n@@ -2703,6 +2716,11 @@ impl<T: Sized> Unique<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     // FIXME: rename to dangling() to match NonNull?\n     pub const fn empty() -> Self {\n         unsafe {\n@@ -2834,6 +2852,11 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {"}, {"sha": "3e215de58dd219be108ee841a3324449b7928a34", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1055,7 +1055,7 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         if !self.finished && (self.allow_trailing_empty || self.end - self.start > 0) {\n             self.finished = true;\n             unsafe {\n-                let string = self.matcher.haystack().slice_unchecked(self.start, self.end);\n+                let string = self.matcher.haystack().get_unchecked(self.start..self.end);\n                 Some(string)\n             }\n         } else {\n@@ -1070,7 +1070,7 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         let haystack = self.matcher.haystack();\n         match self.matcher.next_match() {\n             Some((a, b)) => unsafe {\n-                let elt = haystack.slice_unchecked(self.start, a);\n+                let elt = haystack.get_unchecked(self.start..a);\n                 self.start = b;\n                 Some(elt)\n             },\n@@ -1095,13 +1095,13 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n         let haystack = self.matcher.haystack();\n         match self.matcher.next_match_back() {\n             Some((a, b)) => unsafe {\n-                let elt = haystack.slice_unchecked(b, self.end);\n+                let elt = haystack.get_unchecked(b..self.end);\n                 self.end = a;\n                 Some(elt)\n             },\n             None => unsafe {\n                 self.finished = true;\n-                Some(haystack.slice_unchecked(self.start, self.end))\n+                Some(haystack.get_unchecked(self.start..self.end))\n             },\n         }\n     }\n@@ -1222,7 +1222,7 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n     #[inline]\n     fn next(&mut self) -> Option<(usize, &'a str)> {\n         self.0.next_match().map(|(start, end)| unsafe {\n-            (start, self.0.haystack().slice_unchecked(start, end))\n+            (start, self.0.haystack().get_unchecked(start..end))\n         })\n     }\n \n@@ -1231,7 +1231,7 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n         where P::Searcher: ReverseSearcher<'a>\n     {\n         self.0.next_match_back().map(|(start, end)| unsafe {\n-            (start, self.0.haystack().slice_unchecked(start, end))\n+            (start, self.0.haystack().get_unchecked(start..end))\n         })\n     }\n }\n@@ -1274,7 +1274,7 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n     fn next(&mut self) -> Option<&'a str> {\n         self.0.next_match().map(|(a, b)| unsafe {\n             // Indices are known to be on utf8 boundaries\n-            self.0.haystack().slice_unchecked(a, b)\n+            self.0.haystack().get_unchecked(a..b)\n         })\n     }\n \n@@ -1284,7 +1284,7 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n     {\n         self.0.next_match_back().map(|(a, b)| unsafe {\n             // Indices are known to be on utf8 boundaries\n-            self.0.haystack().slice_unchecked(a, b)\n+            self.0.haystack().get_unchecked(a..b)\n         })\n     }\n }\n@@ -2453,6 +2453,7 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked(begin..end)` instead\")]\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         (begin..end).get_unchecked(self)\n@@ -2483,6 +2484,7 @@ impl str {\n     /// * `begin` and `end` must be byte positions within the string slice.\n     /// * `begin` and `end` must lie on UTF-8 sequence boundaries.\n     #[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]\n+    #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked_mut(begin..end)` instead\")]\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         (begin..end).get_unchecked_mut(self)\n@@ -2524,8 +2526,8 @@ impl str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             unsafe {\n-                (self.slice_unchecked(0, mid),\n-                 self.slice_unchecked(mid, self.len()))\n+                (self.get_unchecked(0..mid),\n+                 self.get_unchecked(mid..self.len()))\n             }\n         } else {\n             slice_error_fail(self, 0, mid)\n@@ -3702,7 +3704,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(i, j)\n+            self.get_unchecked(i..j)\n         }\n     }\n \n@@ -3741,7 +3743,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(i, self.len())\n+            self.get_unchecked(i..self.len())\n         }\n     }\n \n@@ -3788,7 +3790,7 @@ impl str {\n         }\n         unsafe {\n             // Searcher is known to return valid indices\n-            self.slice_unchecked(0, j)\n+            self.get_unchecked(0..j)\n         }\n     }\n "}, {"sha": "5e63fa9ff354c60d1adcb892041a8077a323b956", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -354,7 +354,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n         let old_finger = self.finger_back;\n-        let slice = unsafe { self.haystack.slice_unchecked(self.finger, old_finger) };\n+        let slice = unsafe { self.haystack.get_unchecked(self.finger..old_finger) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next_back() {"}, {"sha": "8e27a9914f485618f964d5dd021da44f84316af9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -3191,7 +3191,8 @@ impl<'a> LoweringContext<'a> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n-            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") {\n+            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n+                              attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n                 self.exported_macros.push(hir::MacroDef {\n                     name,"}, {"sha": "dbcb63addb846f3ee68ebc05add77f631357dddb", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -97,7 +97,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let name = self.extract_type_name(&ty);\n \n         let mut err_span = span;\n-        let mut labels = vec![(span, format!(\"cannot infer type for `{}`\", name))];\n+        let mut labels = vec![(\n+            span,\n+            if &name == \"_\" {\n+                \"cannot infer type\".to_string()\n+            } else {\n+                format!(\"cannot infer type for `{}`\", name)\n+            },\n+        )];\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,"}, {"sha": "808e8b6b8fdfc5a2664b37fcef899f13359aa619", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -57,7 +57,7 @@ pub struct UniversalRegions<'tcx> {\n     /// externals, then locals. So things from:\n     /// - `FIRST_GLOBAL_INDEX..first_extern_index` are global;\n     /// - `first_extern_index..first_local_index` are external; and\n-    /// - first_local_index..num_universals` are local.\n+    /// - `first_local_index..num_universals` are local.\n     first_extern_index: usize,\n \n     /// See `first_extern_index`."}, {"sha": "54cf82a19b4762d0b3e3055091d223c9402e605c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1273,15 +1273,13 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n         if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n-            Some(def)\n-        } else {\n-            None\n+            return Some(def);\n         }\n-    } else if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n-        Some(*def)\n-    } else {\n-        None\n     }\n+    if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n+        return Some(*def);\n+    }\n+    None\n }\n \n #[derive(Debug)]"}, {"sha": "0025f21da22a887cca799674c555d61e6c1608ad", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -317,7 +317,7 @@ macro_rules! assert_approx_eq {\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n #[cfg(dox)]\n-pub mod builtin {\n+mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n@@ -355,7 +355,7 @@ pub mod builtin {\n     ///\n     /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -407,7 +407,7 @@ pub mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -445,7 +445,7 @@ pub mod builtin {\n     /// error: what's that?!\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -471,7 +471,7 @@ pub mod builtin {\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -502,7 +502,7 @@ pub mod builtin {\n     /// # }\n     /// ```\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -524,7 +524,7 @@ pub mod builtin {\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -552,7 +552,7 @@ pub mod builtin {\n     /// println!(\"defined on line: {}\", current_line);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -577,7 +577,7 @@ pub mod builtin {\n     /// println!(\"defined on column: {}\", current_col);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -601,7 +601,7 @@ pub mod builtin {\n     /// println!(\"defined in file: {}\", this_file);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -620,7 +620,7 @@ pub mod builtin {\n     /// assert_eq!(one_plus_one, \"1 + 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -654,7 +654,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -691,7 +691,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -715,7 +715,7 @@ pub mod builtin {\n     /// test::foo();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -737,7 +737,7 @@ pub mod builtin {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -780,7 +780,7 @@ pub mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -833,7 +833,7 @@ pub mod builtin {\n     /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "0c60129494d5c3ecf0a012c73fa697be38a9c4a1", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1836,7 +1836,7 @@ impl Path {\n     /// * On Unix, a path has a root if it begins with `/`.\n     ///\n     /// * On Windows, a path has a root if it:\n-    ///     * has no prefix and begins with a separator, e.g. `\\\\windows`\n+    ///     * has no prefix and begins with a separator, e.g. `\\windows`\n     ///     * has a prefix followed by a separator, e.g. `c:\\windows` but not `c:windows`\n     ///     * has any non-disk prefix, e.g. `\\\\server\\share`\n     ///"}, {"sha": "30137439e7740c7ad598e3729329774cc2eb9538", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -687,7 +687,8 @@ pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, Att\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name))\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name)) ||\n+    attr.name().as_str().starts_with(\"rustc_\")\n }\n \n // Attributes that have a special meaning to rustc or rustdoc"}, {"sha": "46406ee5182a732f2bb07386e04ede9f82428d0f", "filename": "src/test/codegen/swap-small-types.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+use std::mem::swap;\n+\n+type RGB48 = [u16; 3];\n+\n+// CHECK-LABEL: @swap_rgb48\n+#[no_mangle]\n+pub fn swap_rgb48(x: &mut RGB48, y: &mut RGB48) {\n+// CHECK-NOT: alloca\n+// CHECK: load i48\n+// CHECK: store i48\n+    swap(x, y)\n+}"}, {"sha": "6862e2d8688fd6d8b2e09a947bf586c1904b9bba", "filename": "src/test/ui/error-codes/E0282.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x = \"hello\".chars().rev().collect(); //~ ERROR E0282\n    |         ^\n    |         |\n-   |         cannot infer type for `_`\n+   |         cannot infer type\n    |         consider giving `x` a type\n \n error: aborting due to previous error"}, {"sha": "94afd6aab574f7661684707ca67a0e7bceec4f10", "filename": "src/test/ui/issue-12187-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-1.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let &v = new();\n    |         -^\n    |         ||\n-   |         |cannot infer type for `_`\n+   |         |cannot infer type\n    |         consider giving the pattern a type\n \n error: aborting due to previous error"}, {"sha": "90b41e397c6d03f107140e457a46a981f71a8bcf", "filename": "src/test/ui/issue-12187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-2.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let &v = new();\n    |         -^\n    |         ||\n-   |         |cannot infer type for `_`\n+   |         |cannot infer type\n    |         consider giving the pattern a type\n \n error: aborting due to previous error"}, {"sha": "3162556986e2b0eed2a1942b4defd68eb75a9599", "filename": "src/test/ui/issue-15965.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-15965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-15965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15965.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL | /         { return () }\n LL | | //~^ ERROR type annotations needed [E0282]\n LL | |     ()\n-   | |______^ cannot infer type for `_`\n+   | |______^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "084e859111bf133e532f5f5d446e7ce236adcc43", "filename": "src/test/ui/issue-18159.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-18159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-18159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18159.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x; //~ ERROR type annotations needed\n    |         ^\n    |         |\n-   |         cannot infer type for `_`\n+   |         cannot infer type\n    |         consider giving `x` a type\n \n error: aborting due to previous error"}, {"sha": "6cdddcff9291326be0863a5b2a0db157f59cc91b", "filename": "src/test/ui/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20261.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     for (ref i,) in [].iter() {\n    |                     --------- the element type for this iterator is not specified\n LL |         i.clone();\n-   |           ^^^^^ cannot infer type for `_`\n+   |           ^^^^^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "516c5287b319a4e2acd179e826c4a2b111158478", "filename": "src/test/ui/issue-2151.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-2151.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x = panic!();\n    |         - consider giving `x` a type\n LL |     x.clone(); //~ ERROR type annotations needed\n-   |     ^ cannot infer type for `_`\n+   |     ^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "e97a97fec09f28457de4c18ca2beb68dda8b72d1", "filename": "src/test/ui/issue-23041.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-23041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-23041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23041.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-23041.rs:16:22\n    |\n LL |     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n-   |                      ^^^^^^^^ cannot infer type for `_`\n+   |                      ^^^^^^^^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "5729bdf2064f5df6569d2971ec28c391ae9b7092", "filename": "src/test/ui/issue-24013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-24013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-24013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24013.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-24013.rs:15:20\n    |\n LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-   |                    ^^^^^^ cannot infer type for `_`\n+   |                    ^^^^^^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "c01559b11261c59dd3fb27a35eee9734627bcc45", "filename": "src/test/ui/issue-51116.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-51116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-51116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -15,7 +15,7 @@ fn main() {\n             //~^ NOTE the element type for this iterator is not specified\n             *tile = 0;\n             //~^ ERROR type annotations needed\n-            //~| NOTE cannot infer type for `_`\n+            //~| NOTE cannot infer type\n             //~| NOTE type must be known at this point\n         }\n     }"}, {"sha": "fc84ee9028d3bc40f9499272d4432f021051406c", "filename": "src/test/ui/issue-51116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-51116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-51116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -5,7 +5,7 @@ LL |         for tile in row {\n    |                     --- the element type for this iterator is not specified\n LL |             //~^ NOTE the element type for this iterator is not specified\n LL |             *tile = 0;\n-   |             ^^^^^ cannot infer type for `_`\n+   |             ^^^^^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "3ab01982057b459596581cf8f5ea38ff0658cccd", "filename": "src/test/ui/issue-7813.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-7813.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-7813.rs:12:13\n    |\n LL |     let v = &[]; //~ ERROR type annotations needed\n-   |         -   ^^^ cannot infer type for `_`\n+   |         -   ^^^ cannot infer type\n    |         |\n    |         consider giving `v` a type\n "}, {"sha": "d2d5a4a4b12655707ee49d2196b1989fd6eb744a", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -13,7 +13,7 @@ error[E0282]: type annotations needed\n    |\n LL | /     data.iter() //~ ERROR 22:5: 23:20: type annotations needed\n LL | |         .sum::<_>()\n-   | |___________________^ cannot infer type for `_`\n+   | |___________________^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "8a8c1e467b9fa7a007eae1063ed4f1a1cec76ae5", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let mut x = Default::default();\n    |         ----- consider giving `x` a type\n LL |     x.0;\n-   |     ^ cannot infer type for `_`\n+   |     ^ cannot infer type\n    |\n    = note: type must be known at this point\n \n@@ -14,7 +14,7 @@ error[E0282]: type annotations needed\n LL |     let mut x = Default::default();\n    |         ----- consider giving `x` a type\n LL |     x[0];\n-   |     ^ cannot infer type for `_`\n+   |     ^ cannot infer type\n    |\n    = note: type must be known at this point\n "}, {"sha": "bfdd614e50d313e562450785ad44507d858a0621", "filename": "src/test/ui/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot_infer_local_or_array.rs:12:13\n    |\n LL |     let x = []; //~ ERROR type annotations needed\n-   |         -   ^^ cannot infer type for `_`\n+   |         -   ^^ cannot infer type\n    |         |\n    |         consider giving `x` a type\n "}]}