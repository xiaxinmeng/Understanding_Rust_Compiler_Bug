{"sha": "ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGFjZDg1NmU2ZjM3NjE4M2E0YTZlZDJiYzliYjBmZDZmNjNiMzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-13T07:44:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-13T07:44:13Z"}, "message": "Rollup merge of #67313 - oli-obk:document_all_the_t\u0336h\u0336i\u0336n\u0336g\u0336s\u0336dataflow, r=ecstatic-morse\n\nDocument more use cases of dataflow\n\nr? @ecstatic-morse", "tree": {"sha": "ed8af87abdf81dab247ebf0f33de4336b37fca13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8af87abdf81dab247ebf0f33de4336b37fca13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHB/NCRBK7hj4Ov3rIwAAdHIIACSfZe8nLkn4sFXkDf5b9Qdk\nI4JbQtYvy7gYKOkRZmb1U7OPGT108NRcGru2jRtvTTmVk8Yu7pLljtnIakcIsZwC\nsSrJNZ0u/U85BHwyWFIdOOf/99zKxJoZS8d84i2AF4U+8suIqTKfPZ8bJ9GM9efy\nBiRz/jud2FXyV21zgP42z5NJR6+hvoqUR55bFoPXVAaOj6oaVidqJwLtMEOlRFe1\nRIEwnbn5BuA7n1D0cBtDT7/dgnV4OC3o4K930Emt8edANEplieZGe+KhgKuubvcy\nA4BhdK3sO72AM6jnOz3eNzF4viAtCV1rORuVwCOqxfvA0fYCFejwSwk/P9VJyOI=\n=D9MU\n-----END PGP SIGNATURE-----\n", "payload": "tree ed8af87abdf81dab247ebf0f33de4336b37fca13\nparent e82febc78e5a14356de5f713b904eebef1e86956\nparent 5f08df104742ce400e966f6cd80c9029f0328922\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578901453 +0900\ncommitter GitHub <noreply@github.com> 1578901453 +0900\n\nRollup merge of #67313 - oli-obk:document_all_the_t\u0336h\u0336i\u0336n\u0336g\u0336s\u0336dataflow, r=ecstatic-morse\n\nDocument more use cases of dataflow\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32", "html_url": "https://github.com/rust-lang/rust/commit/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82febc78e5a14356de5f713b904eebef1e86956", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82febc78e5a14356de5f713b904eebef1e86956", "html_url": "https://github.com/rust-lang/rust/commit/e82febc78e5a14356de5f713b904eebef1e86956"}, {"sha": "5f08df104742ce400e966f6cd80c9029f0328922", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f08df104742ce400e966f6cd80c9029f0328922", "html_url": "https://github.com/rust-lang/rust/commit/5f08df104742ce400e966f6cd80c9029f0328922"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "e29730f267c2c61493866554f7070e2d0070c9cc", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=ac8acd856e6f376183a4a6ed2bc9bb0fd6f63b32", "patch": "@@ -668,6 +668,26 @@ pub trait BottomValue {\n     const BOTTOM_VALUE: bool;\n \n     /// Merges `in_set` into `inout_set`, returning `true` if `inout_set` changed.\n+    ///\n+    /// It is almost certainly wrong to override this, since it automatically applies\n+    /// * `inout_set & in_set` if `BOTTOM_VALUE == true`\n+    /// * `inout_set | in_set` if `BOTTOM_VALUE == false`\n+    ///\n+    /// This means that if a bit is not `BOTTOM_VALUE`, it is propagated into all target blocks.\n+    /// For clarity, the above statement again from a different perspective:\n+    /// A bit in the block's entry set is `!BOTTOM_VALUE` if *any* predecessor block's bit value is\n+    /// `!BOTTOM_VALUE`.\n+    ///\n+    /// There are situations where you want the opposite behaviour: propagate only if *all*\n+    /// predecessor blocks's value is `!BOTTOM_VALUE`.\n+    /// E.g. if you want to know whether a bit is *definitely* set at a specific location. This\n+    /// means that all code paths leading to the location must have set the bit, instead of any\n+    /// code path leading there.\n+    ///\n+    /// If you want this kind of \"definitely set\" analysis, you need to\n+    /// 1. Invert `BOTTOM_VALUE`\n+    /// 2. Reset the `entry_set` in `start_block_effect` to `!BOTTOM_VALUE`\n+    /// 3. Override `join` to do the opposite from what it's doing now.\n     #[inline]\n     fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n         if Self::BOTTOM_VALUE == false {\n@@ -685,7 +705,9 @@ pub trait BottomValue {\n /// for each block individually. The entry set for all other basic blocks is\n /// initialized to `Self::BOTTOM_VALUE`. The dataflow analysis then\n /// iteratively modifies the various entry sets (but leaves the the transfer\n-/// function unchanged).\n+/// function unchanged). `BottomValue::join` is used to merge the bitsets from\n+/// two blocks (e.g. when two blocks' terminator jumps to a single block, that\n+/// target block's state is the merged state of both incoming blocks).\n pub trait BitDenotation<'tcx>: BottomValue {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;"}]}