{"sha": "871993f7a19794a01cd229a4a9810c1a0fc574f7", "node_id": "C_kwDOAAsO6NoAKDg3MTk5M2Y3YTE5Nzk0YTAxY2QyMjlhNGE5ODEwYzFhMGZjNTc0Zjc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-03T13:10:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-10T18:16:32Z"}, "message": "Encode def_ident_span using the query.", "tree": {"sha": "8e9895a6a190398982f42a3c58dca62156cee0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e9895a6a190398982f42a3c58dca62156cee0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871993f7a19794a01cd229a4a9810c1a0fc574f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871993f7a19794a01cd229a4a9810c1a0fc574f7", "html_url": "https://github.com/rust-lang/rust/commit/871993f7a19794a01cd229a4a9810c1a0fc574f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871993f7a19794a01cd229a4a9810c1a0fc574f7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df59705301dec301f05091a661e6ad2466edc90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/df59705301dec301f05091a661e6ad2466edc90a", "html_url": "https://github.com/rust-lang/rust/commit/df59705301dec301f05091a661e6ad2466edc90a"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "360fc02f7a699bb678ac4a88edd655f2d3c5622e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/871993f7a19794a01cd229a4a9810c1a0fc574f7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871993f7a19794a01cd229a4a9810c1a0fc574f7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=871993f7a19794a01cd229a4a9810c1a0fc574f7", "patch": "@@ -774,17 +774,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {\n         let name = self.opt_item_name(item_index)?;\n-        let span = match self.root.tables.def_ident_span.get(self, item_index) {\n-            Some(lazy_span) => lazy_span.decode((self, sess)),\n-            None => {\n-                // FIXME: this weird case of a name with no span is specific to `extern crate`\n-                // items, which are supposed to be treated like `use` items and only be encoded\n-                // to metadata as `Export`s, return `None` because that's what all the callers\n-                // expect in this case.\n-                assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);\n-                return None;\n-            }\n-        };\n+        let span = self.root.tables.def_ident_span.get(self, item_index)?.decode((self, sess));\n         Some(Ident::new(name, span))\n     }\n "}, {"sha": "d4b55eb0a13ee7aa012f75d9464082c39efb080f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/871993f7a19794a01cd229a4a9810c1a0fc574f7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871993f7a19794a01cd229a4a9810c1a0fc574f7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=871993f7a19794a01cd229a4a9810c1a0fc574f7", "patch": "@@ -31,7 +31,7 @@ use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{\n     self, DebuggerVisualizerFile, ExternalSource, FileName, SourceFile, Span, SyntaxContext,\n };\n@@ -1011,6 +1011,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             self.encode_attrs(local_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n+            if let Some(ident_span) = tcx.def_ident_span(def_id) {\n+                record!(self.tables.def_ident_span[def_id] <- ident_span);\n+            }\n             if def_kind.has_codegen_attrs() {\n                 record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n             }\n@@ -1075,7 +1078,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             assert!(f.did.is_local());\n             f.did.index\n         }));\n-        self.encode_ident_span(def_id, variant.ident(tcx));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.\n@@ -1167,7 +1169,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_field({:?})\", def_id);\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n-        self.encode_ident_span(def_id, field.ident(self.tcx));\n         self.encode_item_type(def_id);\n     }\n \n@@ -1246,7 +1247,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        self.encode_ident_span(def_id, ast_item.ident);\n         match trait_item.kind {\n             ty::AssocKind::Const | ty::AssocKind::Fn => {\n                 self.encode_item_type(def_id);\n@@ -1310,7 +1310,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        self.encode_ident_span(def_id, impl_item.ident(self.tcx));\n         self.encode_item_type(def_id);\n         if let Some(trait_item_def_id) = impl_item.trait_item_def_id {\n             self.tables.trait_item_def_id.set(def_id.index, trait_item_def_id.into());\n@@ -1412,8 +1411,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         debug!(\"EncodeContext::encode_info_for_item({:?})\", def_id);\n \n-        self.encode_ident_span(def_id, item.ident);\n-\n         let entry_kind = match item.kind {\n             hir::ItemKind::Static(..) => EntryKind::Static,\n             hir::ItemKind::Const(_, body_id) => {\n@@ -1959,7 +1956,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignType);\n             }\n         }\n-        self.encode_ident_span(def_id, nitem.ident);\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -2041,10 +2037,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {\n-        record!(self.tables.def_ident_span[def_id] <- ident.span);\n-    }\n-\n     /// In some cases, along with the item itself, we also\n     /// encode some sub-items. Usually we want some info from the item\n     /// so it's easier to do that here then to wait until we would encounter"}]}