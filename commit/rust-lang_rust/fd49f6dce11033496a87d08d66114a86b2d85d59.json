{"sha": "fd49f6dce11033496a87d08d66114a86b2d85d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNDlmNmRjZTExMDMzNDk2YTg3ZDA4ZDY2MTE0YTg2YjJkODVkNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T09:36:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T09:36:06Z"}, "message": "auto merge of #9073 : alexcrichton/rust/remove-local-data-hax, r=huonw\n\nThese compiler bugs have since been fixed (one less layer of indirection)", "tree": {"sha": "f0126a3c76aaf6318a6dc85796d6cb1f24ccedae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0126a3c76aaf6318a6dc85796d6cb1f24ccedae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd49f6dce11033496a87d08d66114a86b2d85d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd49f6dce11033496a87d08d66114a86b2d85d59", "html_url": "https://github.com/rust-lang/rust/commit/fd49f6dce11033496a87d08d66114a86b2d85d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd49f6dce11033496a87d08d66114a86b2d85d59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09f569aac99a4ef2f577d288d547504e3dcf588", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09f569aac99a4ef2f577d288d547504e3dcf588", "html_url": "https://github.com/rust-lang/rust/commit/d09f569aac99a4ef2f577d288d547504e3dcf588"}, {"sha": "500077f637114be0ac9e6ef5fb92933c4c97804d", "url": "https://api.github.com/repos/rust-lang/rust/commits/500077f637114be0ac9e6ef5fb92933c4c97804d", "html_url": "https://github.com/rust-lang/rust/commit/500077f637114be0ac9e6ef5fb92933c4c97804d"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "a13c75635dc412b00d8ccdbdaf2d07a0dc39dc8d", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd49f6dce11033496a87d08d66114a86b2d85d59/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd49f6dce11033496a87d08d66114a86b2d85d59/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=fd49f6dce11033496a87d08d66114a86b2d85d59", "patch": "@@ -155,13 +155,13 @@ pub fn pop<T: 'static>(key: Key<T>) -> Option<T> {\n \n                 // Move `data` into transmute to get out the memory that it\n                 // owns, we must free it manually later.\n-                let (_vtable, box): (uint, ~~T) = unsafe {\n+                let (_vtable, box): (uint, ~T) = unsafe {\n                     cast::transmute(data)\n                 };\n \n                 // Now that we own `box`, we can just move out of it as we would\n                 // with any other data.\n-                return Some(**box);\n+                return Some(*box);\n             }\n             _ => {}\n         }\n@@ -244,13 +244,13 @@ fn get_with<T: 'static, U>(key: Key<T>,\n                                   want.describe(), cur.describe());\n                         }\n                     }\n-                    // data was created with `~~T as ~LocalData`, so we extract\n-                    // pointer part of the trait, (as ~~T), and then use\n+                    // data was created with `~T as ~LocalData`, so we extract\n+                    // pointer part of the trait, (as ~T), and then use\n                     // compiler coercions to achieve a '&' pointer.\n                     unsafe {\n-                        match *cast::transmute::<&TLSValue, &(uint, ~~T)>(data){\n+                        match *cast::transmute::<&TLSValue, &(uint, ~T)>(data){\n                             (_vtable, ref box) => {\n-                                let value: &T = **box;\n+                                let value: &T = *box;\n                                 ret = f(Some(value));\n                             }\n                         }\n@@ -294,9 +294,7 @@ pub fn set<T: 'static>(key: Key<T>, data: T) {\n     // everything to a trait (LocalData) which is then stored inside the map.\n     // Upon destruction of the map, all the objects will be destroyed and the\n     // traits have enough information about them to destroy themselves.\n-    //\n-    // FIXME(#7673): This should be \"~data as ~LocalData\" (only one sigil)\n-    let data = ~~data as ~LocalData:;\n+    let data = ~data as ~LocalData:;\n \n     fn insertion_position(map: &mut Map,\n                           key: *libc::c_void) -> Option<uint> {"}]}