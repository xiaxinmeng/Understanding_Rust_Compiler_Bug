{"sha": "adf4ef7b98212e1295e7cbc68a7133e67f9af846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjRlZjdiOTgyMTJlMTI5NWU3Y2JjNjhhNzEzM2U2N2Y5YWY4NDY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-02T01:12:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-02T18:44:27Z"}, "message": "Use LitToConstError rather than bool for errors", "tree": {"sha": "d6b67e095b2165d400efc652c8b874fd6da190c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b67e095b2165d400efc652c8b874fd6da190c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf4ef7b98212e1295e7cbc68a7133e67f9af846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf4ef7b98212e1295e7cbc68a7133e67f9af846", "html_url": "https://github.com/rust-lang/rust/commit/adf4ef7b98212e1295e7cbc68a7133e67f9af846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf4ef7b98212e1295e7cbc68a7133e67f9af846/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d66b65850cba7302c79c031f9fa61e7162aca43", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66b65850cba7302c79c031f9fa61e7162aca43", "html_url": "https://github.com/rust-lang/rust/commit/4d66b65850cba7302c79c031f9fa61e7162aca43"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "a32fdbb285d12cdae128c30dcf4a80077589893b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adf4ef7b98212e1295e7cbc68a7133e67f9af846/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf4ef7b98212e1295e7cbc68a7133e67f9af846/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=adf4ef7b98212e1295e7cbc68a7133e67f9af846", "patch": "@@ -1115,13 +1115,10 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n-            ty::TyParam(_) => {\n-                return Err(LayoutError::Unknown(ty));\n-            }\n             ty::TyGeneratorWitness(..) | ty::TyInfer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n-            ty::TyError => {\n+            ty::TyParam(_) | ty::TyError => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n         })"}, {"sha": "636969e263222d81e942aa9ea847babf0a062343", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/adf4ef7b98212e1295e7cbc68a7133e67f9af846/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf4ef7b98212e1295e7cbc68a7133e67f9af846/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=adf4ef7b98212e1295e7cbc68a7133e67f9af846", "patch": "@@ -743,8 +743,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(float_bug) => {\n-                        if float_bug {\n+                    Err(e) => {\n+                        if e == LitToConstError::UnparseableFloat {\n                             self.errors.push(PatternError::FloatBug);\n                         }\n                         PatternKind::Wild\n@@ -766,8 +766,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(float_bug) => {\n-                        if float_bug {\n+                    Err(e) => {\n+                        if e == LitToConstError::UnparseableFloat {\n                             self.errors.push(PatternError::FloatBug);\n                         }\n                         PatternKind::Wild\n@@ -1122,12 +1122,18 @@ pub fn compare_const_vals<'a, 'tcx>(\n     fallback()\n }\n \n+#[derive(PartialEq)]\n+enum LitToConstError {\n+    UnparseableFloat,\n+    Propagated,\n+}\n+\n // FIXME: Combine with rustc_mir::hair::cx::const_eval_literal\n fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           ty: Ty<'tcx>,\n                           neg: bool)\n-                          -> Result<&'tcx ty::Const<'tcx>, bool> {\n+                          -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n     use syntax::ast::*;\n \n     use rustc::mir::interpret::*;\n@@ -1156,11 +1162,10 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n                 ty::TyInt(other) => Int::Signed(other),\n                 ty::TyUint(UintTy::Usize) => Int::Unsigned(tcx.sess.target.usize_ty),\n                 ty::TyUint(other) => Int::Unsigned(other),\n-                ty::TyError => {\n-                    // Avoid ICE\n-                    return Err(false);\n+                ty::TyError => { // Avoid ICE (#51963)\n+                    return Err(LitToConstError::Propagated);\n                 }\n-                _ => bug!(\"{:?}\", ty.sty),\n+                _ => bug!(\"literal integer type with bad type ({:?})\", ty.sty),\n             };\n             // This converts from LitKind::Int (which is sign extended) to\n             // Scalar::Bytes (which is zero extended)\n@@ -1190,14 +1195,14 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n             })\n         },\n         LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg).map_err(|_| true)?\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n         }\n         LitKind::FloatUnsuffixed(n) => {\n             let fty = match ty.sty {\n                 ty::TyFloat(fty) => fty,\n                 _ => bug!()\n             };\n-            parse_float(n, fty, neg).map_err(|_| true)?\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n         }\n         LitKind::Bool(b) => ConstValue::Scalar(Scalar::Bits {\n             bits: b as u128,"}]}