{"sha": "6bdce7bedd765438ce4f138cb0ce9335659e32d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZGNlN2JlZGQ3NjU0MzhjZTRmMTM4Y2IwY2U5MzM1NjU5ZTMyZDY=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-02T16:59:20Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-02T16:59:20Z"}, "message": "new fix method and update tests", "tree": {"sha": "dd9bc7a6c6162b9f4398d2f1c8af2bdea71e86c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9bc7a6c6162b9f4398d2f1c8af2bdea71e86c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bdce7bedd765438ce4f138cb0ce9335659e32d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce7bedd765438ce4f138cb0ce9335659e32d6", "html_url": "https://github.com/rust-lang/rust/commit/6bdce7bedd765438ce4f138cb0ce9335659e32d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce7bedd765438ce4f138cb0ce9335659e32d6/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9088807dd31f205b443fd2f6cef32f5ea295ecae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9088807dd31f205b443fd2f6cef32f5ea295ecae", "html_url": "https://github.com/rust-lang/rust/commit/9088807dd31f205b443fd2f6cef32f5ea295ecae"}], "stats": {"total": 278, "additions": 143, "deletions": 135}, "files": [{"sha": "278d7a6374d4c692fbac49d75ebc032bf581eb05", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -44,6 +44,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidate: &mut Candidate<'pat, 'tcx>,\n     ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n+        debug!(\"simplify_candidate(candidate={:?})\", candidate);\n+        let mut new_bindings = Vec::new();\n         loop {\n             let match_pairs = mem::take(&mut candidate.match_pairs);\n \n@@ -56,7 +58,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             let mut changed = false;\n             for match_pair in match_pairs {\n-                match self.simplify_match_pair(match_pair, candidate) {\n+                match self.simplify_match_pair(match_pair, candidate, &mut new_bindings) {\n                     Ok(()) => {\n                         changed = true;\n                     }\n@@ -65,13 +67,31 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                 }\n             }\n+            // issue #69971: the binding order should be right to left if there are more\n+            // bindings after `@` to please the borrow checker\n+            // Ex\n+            // struct NonCopyStruct {\n+            //     copy_field: u32,\n+            // }\n+            //\n+            // fn foo1(x: NonCopyStruct) {\n+            //     let y @ NonCopyStruct { copy_field: z } = x;\n+            //     // the above should turn into\n+            //     let z = x.copy_field;\n+            //     let y = x;\n+            // }\n+            new_bindings.extend_from_slice(&candidate.bindings);\n+            mem::swap(&mut candidate.bindings, &mut new_bindings);\n+            new_bindings.clear();\n+\n             if !changed {\n                 // Move or-patterns to the end, because they can result in us\n                 // creating additional candidates, so we want to test them as\n                 // late as possible.\n                 candidate\n                     .match_pairs\n                     .sort_by_key(|pair| matches!(*pair.pattern.kind, PatKind::Or { .. }));\n+                debug!(\"simplify_candidate: simplifed {:?}\", candidate);\n                 return false; // if we were not able to simplify any, done.\n             }\n         }\n@@ -104,6 +124,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         match_pair: MatchPair<'pat, 'tcx>,\n         candidate: &mut Candidate<'pat, 'tcx>,\n+        bindings: &mut Vec<Binding<'tcx>>,\n     ) -> Result<(), MatchPair<'pat, 'tcx>> {\n         let tcx = self.hir.tcx();\n         match *match_pair.pattern.kind {\n@@ -131,20 +152,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n-                // issue #69971: the binding order should be right to left if there are more\n-                // bindings after `@` to please the borrow checker\n-                // Ex\n-                // struct NonCopyStruct {\n-                //     copy_field: u32,\n-                // }\n-                //\n-                // fn foo1(x: NonCopyStruct) {\n-                //     let y @ NonCopyStruct { copy_field: z } = x;\n-                //     // the above should turn into\n-                //     let z = x.copy_field;\n-                //     let y = x;\n-                // }\n-                candidate.bindings.insert(0, Binding {\n+                bindings.push(Binding {\n                     name,\n                     mutability,\n                     span: match_pair.pattern.span,"}, {"sha": "0db0f8349bb73ed58787201f2a86db7e73c51362", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -61,19 +61,19 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     }\n \n     bb9: {\n-        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n-        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n         StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n         _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n         StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n         _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n         StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n         _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n         _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:8:83: 8:88\n         StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n         StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n-        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n         StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n+        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n         goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n     }\n "}, {"sha": "23aefe07892fd44434392a3dc2c39c820a4c398f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -89,10 +89,10 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n           (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -106,8 +106,8 @@\n   \n       bb1: {\n           StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n@@ -133,8 +133,8 @@\n           _19 = &_20;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_17.1: &&i32) = move _19;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _28 = (_17.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = (_17.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = (_17.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _24 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "b9cb58e14c45dda02bc3cfe2e46e8c0fe3f8851a", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -138,10 +138,10 @@\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -159,8 +159,8 @@\n       bb3: {\n           _8 = const ();                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n@@ -205,10 +205,10 @@\n           (_31.1: &&i32) = move _34;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_34);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_32);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_37);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _37 = (_31.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _36 = (_31.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_37);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _37 = (_31.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_38);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -284,8 +284,8 @@\n           _30 = [move _38, move _41];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_41);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_38);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_36);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_37);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_36);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _29 = &_30;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _28 = _29;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = move _28 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "499134b69919fa11a7e822276aaa878bac2188fc", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -78,12 +78,12 @@\n       }\n   \n       bb2: {\n-          StorageLive(_15);                // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n-          _15 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n-          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n-          _14 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n           StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n           _13 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n+          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n+          _14 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n+          StorageLive(_15);                // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n+          _15 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n           StorageLive(_16);                // scope 2 at $DIR/issue_76432.rs:9:38: 9:52\n           StorageLive(_17);                // scope 2 at $DIR/issue_76432.rs:9:38: 9:52\n           _17 = &raw const (*_13);         // scope 2 at $DIR/issue_76432.rs:9:38: 9:40\n@@ -103,9 +103,9 @@\n           StorageDead(_18);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n           StorageDead(_17);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n           StorageDead(_16);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n-          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n-          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n           StorageDead(_15);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n           StorageDead(_9);                 // scope 1 at $DIR/issue_76432.rs:11:6: 11:7\n           _0 = const ();                   // scope 0 at $DIR/issue_76432.rs:6:44: 12:2\n           StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:12:1: 12:2"}, {"sha": "4e7cd77035eec70d7d0ec90be3e19d791e07eaa7", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -59,28 +59,27 @@\n -     }\n - \n -     bb6: {\n-          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n-          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n -         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb7: {\n +     bb4: {\n           _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n +         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n   \n -     bb8: {\n +     bb5: {\n-          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n-          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n -         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n           StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n@@ -117,31 +116,31 @@\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n-          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n-          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n -         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb13: {\n +     bb9: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         falseEdge -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n +         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n -     bb14: {\n +     bb10: {\n-          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n-          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n -         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n           StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n@@ -178,55 +177,56 @@\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n-          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n-          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n -         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb19: {\n +     bb14: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n +         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n -     bb20: {\n +     bb15: {\n           StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb21: {\n +     bb16: {\n           _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n-          StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n -         drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n +         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }\n   \n -     bb22: {\n +     bb17: {\n-          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n-          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n -         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n -     bb23: {\n +     bb18: {\n           StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+          StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n -         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n +         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n@@ -239,8 +239,8 @@\n   \n -     bb25: {\n +     bb20: {\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }"}, {"sha": "ead02414a622b065345e7c26a3ada83bffbe28ec", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -1,4 +1,4 @@\n-error[E0507]: cannot move out of `f.1` which is behind a shared reference\n+error[E0507]: cannot move out of `f.0` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {"}, {"sha": "d3388e071aa5349820cf42dc7e010d031f96f152", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -32,23 +32,23 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:25:23\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n-   |                    ------------- immutable borrow occurs here\n+   |                                   ------------- immutable borrow occurs here\n ...\n LL |         if let [_, _, ref mut from_begin2, ..] = *s {\n    |                       ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n-   |                                                      --------- immutable borrow later used here\n+   |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:28:26\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n-   |                    ------------- immutable borrow occurs here\n+   |                                   ------------- immutable borrow occurs here\n ...\n LL |         if let [_, _, _, ref mut from_begin3, ..] = *s {\n    |                          ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n-   |                                                      --------- immutable borrow later used here\n+   |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:33:21\n@@ -75,12 +75,12 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:39:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n-   |                                                  --------------- immutable borrow occurs here\n+   |                              --------------- immutable borrow occurs here\n ...\n LL |         if let [.., ref mut from_end4, _, _, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n-   |                                             ----------- immutable borrow later used here\n+   |                                ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:47:20"}, {"sha": "0df326425ad9c60ca035007ba74b75f4ffaf39c2", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -97,18 +97,6 @@ LL |         B::U(D(s)) => (),\n    |                data moved here\n    |                move occurs because `s` has type `String`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `*x.1` which is behind a shared reference\n-  --> $DIR/move-errors.rs:92:11\n-   |\n-LL |     match x {\n-   |           ^\n-...\n-LL |         (D(s), &t) => (),\n-   |                 -\n-   |                 |\n-   |                 data moved here\n-   |                 move occurs because `t` has type `String`, which does not implement the `Copy` trait\n-\n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:92:11\n    |\n@@ -121,6 +109,18 @@ LL |         (D(s), &t) => (),\n    |            data moved here\n    |            move occurs because `s` has type `String`, which does not implement the `Copy` trait\n \n+error[E0507]: cannot move out of `*x.1` which is behind a shared reference\n+  --> $DIR/move-errors.rs:92:11\n+   |\n+LL |     match x {\n+   |           ^\n+...\n+LL |         (D(s), &t) => (),\n+   |                 -\n+   |                 |\n+   |                 data moved here\n+   |                 move occurs because `t` has type `String`, which does not implement the `Copy` trait\n+\n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:102:11\n    |"}, {"sha": "482ebd9b423fb7c50bfeed946f776a0702184ff1", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -11,9 +11,9 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (U, U);\n-   |         ^^^^^-^^^^\n-   |         |    |\n-   |         |    value partially moved here\n+   |         ^^^^^^^^-^\n+   |         |       |\n+   |         |       value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -22,9 +22,9 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:17:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n-   |         ^^^^^-^^^^\n-   |         |    |\n-   |         |    value partially moved here\n+   |         ^^^^^^^^-^\n+   |         |       |\n+   |         |       value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -63,9 +63,9 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:27:9\n    |\n LL |         xs @ [a, .., b] => {}\n-   |         ^^^^^^-^^^^^^^^\n-   |         |     |\n-   |         |     value partially moved here\n+   |         ^^^^^^^^^^^^^-^\n+   |         |            |\n+   |         |            value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait"}, {"sha": "c1ea5d8ec6dda68658b0c6e8011359ec3801d3aa", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -262,9 +262,9 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |         ^^^^^-----------------^^^^^^^^^^^^\n-   |         |    |\n-   |         |    value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n+   |         |                       |\n+   |         |                       value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -273,9 +273,9 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |         ^^^^^-----------------^^^^^^^^^^^^\n-   |         |    |\n-   |         |    value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n+   |         |                       |\n+   |         |                       value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -284,39 +284,39 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         ^^^^^^^^^^-----------------^^^^^^^^^^^^^\n-   |         |         |\n-   |         |         value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^\n+   |         |                            |\n+   |         |                            value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving the value\n    |\n-LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n-   |                   ^^^\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      ^^^\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         ^^^^^^^^^^-----------------^^^^^^^^^^^^^\n-   |         |         |\n-   |         |         value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^\n+   |         |                            |\n+   |         |                            value partially moved here\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving the value\n    |\n-LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n-   |                   ^^^\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      ^^^\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           ^^^^^^^^^---------^^^^^^^^^^^^^^^^\n-   |           |        |\n-   |           |        value partially moved here\n+   |           ^^^^^^^^^^^^^^^^^^^^-------------^\n+   |           |                   |\n+   |           |                   value partially moved here\n    |           value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait"}, {"sha": "a39ff8774f79e3b2d1d678326c647a5e966b8ddd", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -237,9 +237,9 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n-   |         ^^^^^^^^^^^^^-^^^^^^^^\n-   |         |            |\n-   |         |            value partially moved here\n+   |         ^^^^^^^^^^^^^^^^-----^\n+   |         |               |\n+   |         |               value partially moved here\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -279,9 +279,9 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n-   |         ^^^^^^^^^^^^^-^^^^^^^^\n-   |         |            |\n-   |         |            value partially moved here\n+   |         ^^^^^^^^^^^^^^^^-----^\n+   |         |               |\n+   |         |               value partially moved here\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -290,16 +290,16 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:61:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ^^^^^^^^^^^^^^^^^^-^^^^^^^^^\n-   |         |                 |\n-   |         |                 value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^-----^^\n+   |         |                    |\n+   |         |                    value partially moved here\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving the value\n    |\n-LL |         ref mut a @ Some([ref b, mut c]) => {}\n-   |                           ^^^\n+LL |         ref mut a @ Some([b, ref mut c]) => {}\n+   |                              ^^^\n \n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:67:9\n@@ -350,16 +350,16 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:82:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ^^^^^^^^^^^^^^^^^^-^^^^^^^^^\n-   |         |                 |\n-   |         |                 value partially moved here\n+   |         ^^^^^^^^^^^^^^^^^^^^^-----^^\n+   |         |                    |\n+   |         |                    value partially moved here\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving the value\n    |\n-LL |         ref mut a @ Some([ref b, mut c]) => {}\n-   |                           ^^^\n+LL |         ref mut a @ Some([b, ref mut c]) => {}\n+   |                              ^^^\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n@@ -397,9 +397,9 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-   |           ^^^^^^^^^^^^^-^^^^^^^^\n-   |           |            |\n-   |           |            value partially moved here\n+   |           ^^^^^^^^^^^^^^^^-----^\n+   |           |               |\n+   |           |               value partially moved here\n    |           value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait"}, {"sha": "26182a1bc7419aebf322fc19474a327c4867ed8e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -442,12 +442,12 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^^^^^^^^^^^^---------^\n-   |         |                   |\n-   |         |                   mutable borrow occurs here\n+   |         ^^^^^^^^^---------^^^^^^^^^^^^\n+   |         |        |\n+   |         |        mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |     *c = U;\n+LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n@@ -466,12 +466,12 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:135:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^^^^^^^^^^^^---------^\n-   |         |                   |\n-   |         |                   mutable borrow occurs here\n+   |         ^^^^^^^^^---------^^^^^^^^^^^^\n+   |         |        |\n+   |         |        mutable borrow occurs here\n    |         immutable borrow occurs here\n-...\n-LL |     *c = U;\n+LL |\n+LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0382]: borrow of moved value"}, {"sha": "1d6d9acead1d44478b94dc291f8e7b06dd50b967", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -74,6 +74,6 @@ fn main() {\n         };\n         lam((mk(19), mk(20), mk(21), mk(22)));\n     }\n-    let expected = [2, 3, 6, 5, 7, 8, 12, 11, 9, 10, 13, 18, 14, 15, 16, 17, 19, 21, 20, 22, 4, 1];\n+    let expected = [2, 3, 6, 5, 7, 8, 12, 11, 9, 10, 18, 13, 14, 15, 16, 17, 21, 19, 20, 22, 4, 1];\n     assert_eq!(&*d.borrow(), &expected);\n }"}, {"sha": "07ae138ac71eae3c91807e2acc1c56a719389299", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -8,7 +8,9 @@ LL | }\n    | -\n    | |\n    | `d2` dropped here while still borrowed\n-   | borrow might be used here, when `d2` is dropped and runs the `Drop` code for type `D`\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `d1` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:38:19\n@@ -20,9 +22,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow might be used here, when `d2` is dropped and runs the `Drop` code for type `D`\n-   |\n-   = note: values in a scope are dropped in the opposite order they are defined\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bcd07e116477769fa44e720d4a0237f53908877c", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce7bedd765438ce4f138cb0ce9335659e32d6/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=6bdce7bedd765438ce4f138cb0ce9335659e32d6", "patch": "@@ -24,7 +24,7 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:25\n    |\n LL |     let (_tx, rx) = {\n-   |               -- borrow later used here\n+   |          --- borrow later used here\n ...\n LL |         let _ = tx.send(&x);\n    |                         ^^ borrowed value does not live long enough"}]}