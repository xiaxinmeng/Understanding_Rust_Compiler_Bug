{"sha": "c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGJlYmQzZDRhZDIxZTgwZWY0ZTc1MzVkZDFlODY4YWFhZDdlNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-17T07:22:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-17T07:22:32Z"}, "message": "Auto merge of #73365 - Manishearth:rustdoc-vis, r=GuillaumeGomez\n\nRecord visibility of reexports for all items, not just type items\n\nThis fixes https://github.com/rust-lang/rust/issues/73363\n\nUnfortunately I can't add a test for this since this bug is obscured by the cross-crate bug, being fixed in https://github.com/rust-lang/rust/issues/73363 . Tests will be added later.\n\ncc @jyn514\n\nr? @GuillaumeGomez", "tree": {"sha": "44aa8336d181f7ead3cea1005758c162bcb89267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44aa8336d181f7ead3cea1005758c162bcb89267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "html_url": "https://github.com/rust-lang/rust/commit/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "html_url": "https://github.com/rust-lang/rust/commit/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7"}, {"sha": "90c678cb037c612e1ff4427f3649eb64e62bb671", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c678cb037c612e1ff4427f3649eb64e62bb671", "html_url": "https://github.com/rust-lang/rust/commit/90c678cb037c612e1ff4427f3649eb64e62bb671"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "735446d235c2e65154489af5826d637edf611ab9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "patch": "@@ -303,26 +303,22 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if !res_did.is_local() && !is_no_inline {\n             let attrs = clean::inline::load_attrs(self.cx, res_did);\n             let self_is_hidden = attrs.lists(sym::doc).has_word(sym::hidden);\n-            match res {\n-                Res::Def(\n-                    DefKind::Trait\n-                    | DefKind::Struct\n-                    | DefKind::Union\n-                    | DefKind::Enum\n-                    | DefKind::ForeignTy\n-                    | DefKind::TyAlias,\n-                    did,\n-                ) if !self_is_hidden => {\n-                    self.cx.renderinfo.get_mut().access_levels.map.insert(did, AccessLevel::Public);\n-                }\n-                Res::Def(DefKind::Mod, did) => {\n-                    if !self_is_hidden {\n-                        crate::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did);\n+            if !self_is_hidden {\n+                if let Res::Def(kind, did) = res {\n+                    if kind == DefKind::Mod {\n+                        crate::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did)\n+                    } else {\n+                        // All items need to be handled here in case someone wishes to link\n+                        // to them with intra-doc links\n+                        self.cx\n+                            .renderinfo\n+                            .get_mut()\n+                            .access_levels\n+                            .map\n+                            .insert(did, AccessLevel::Public);\n                     }\n                 }\n-                _ => {}\n             }\n-\n             return false;\n         }\n "}, {"sha": "23e38523a4f914217eaa0d03f066805c68e9ebf8", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/hidden.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fhidden.rs?ref=c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "patch": "@@ -0,0 +1,19 @@\n+#![crate_name = \"hidden_dep\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+#[doc(hidden)]\n+pub mod __reexport {\n+    pub use crate::*;\n+}\n+\n+pub mod future {\n+    mod ready {\n+\n+        /// Link to [`ready`](function@ready)\n+        pub struct Ready;\n+        pub fn ready() {}\n+\n+    }\n+    pub use self::ready::{ready, Ready};\n+\n+}"}, {"sha": "e3d2af16db19ca56b96c6ab9fa90e5c27dfee6a4", "filename": "src/test/rustdoc/intra-doc-crate/hidden.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fhidden.rs?ref=c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:hidden.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+// tests https://github.com/rust-lang/rust/issues/73363\n+\n+extern crate hidden_dep;\n+\n+// @has 'hidden/struct.Ready.html' '//a/@href' '../hidden/fn.ready.html'\n+pub use hidden_dep::future::{ready, Ready};"}]}