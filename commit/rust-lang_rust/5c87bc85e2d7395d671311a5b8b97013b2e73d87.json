{"sha": "5c87bc85e2d7395d671311a5b8b97013b2e73d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODdiYzg1ZTJkNzM5NWQ2NzEzMTFhNWI4Yjk3MDEzYjJlNzNkODc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-04T10:24:09Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-07T21:28:16Z"}, "message": "Minor cosmetic changes.", "tree": {"sha": "ef00e671be5f00287446ef4ad46d6c7edaf53976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef00e671be5f00287446ef4ad46d6c7edaf53976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c87bc85e2d7395d671311a5b8b97013b2e73d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c87bc85e2d7395d671311a5b8b97013b2e73d87", "html_url": "https://github.com/rust-lang/rust/commit/5c87bc85e2d7395d671311a5b8b97013b2e73d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c87bc85e2d7395d671311a5b8b97013b2e73d87/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497a772d04731d9e93abb71ae99696684e514bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/497a772d04731d9e93abb71ae99696684e514bb3", "html_url": "https://github.com/rust-lang/rust/commit/497a772d04731d9e93abb71ae99696684e514bb3"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "1f7ae7c3034f3916cba7985a33565a61fd5049a7", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c87bc85e2d7395d671311a5b8b97013b2e73d87/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c87bc85e2d7395d671311a5b8b97013b2e73d87/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=5c87bc85e2d7395d671311a5b8b97013b2e73d87", "patch": "@@ -417,7 +417,7 @@ impl<'a> Resolver<'a> {\n }\n \n impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n-    /// Add suggestions for a path that cannot be resolved.\n+    /// Adds suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,\n         span: Span,\n@@ -431,7 +431,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             // On 2015 `{{root}}` is usually added implicitly.\n             (Some(fst), Some(snd)) if fst.ident.name == keywords::PathRoot.name() &&\n                                       !snd.ident.is_path_segment_keyword() => {}\n-            // `ident::...` on 2018\n+            // `ident::...` on 2018.\n             (Some(fst), _) if fst.ident.span.rust_2018() &&\n                               !fst.ident.is_path_segment_keyword() => {\n                 // Insert a placeholder that's later replaced by `self`/`super`/etc.\n@@ -470,7 +470,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    /// Suggest a missing `crate::` if that resolves to an correct module.\n+    /// Suggests a missing `crate::` if that resolves to an correct module.\n     ///\n     /// ```\n     ///    |\n@@ -501,7 +501,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    /// Suggest a missing `super::` if that resolves to an correct module.\n+    /// Suggests a missing `super::` if that resolves to an correct module.\n     ///\n     /// ```\n     ///    |\n@@ -525,7 +525,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    /// Suggest a missing external crate name if that resolves to an correct module.\n+    /// Suggests a missing external crate name if that resolves to an correct module.\n     ///\n     /// ```\n     ///    |\n@@ -546,7 +546,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n \n         // Sort extern crate names in reverse order to get\n-        // 1) some consistent ordering for emitted dignostics and\n+        // 1) some consistent ordering for emitted dignostics, and\n         // 2) `std` suggestions before `core` suggestions.\n         let mut extern_crate_names =\n             self.resolver.extern_prelude.iter().map(|(ident, _)| ident.name).collect::<Vec<_>>();"}, {"sha": "69f8722a82b9b52011402ff1a9f38796ff8c31f7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c87bc85e2d7395d671311a5b8b97013b2e73d87/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c87bc85e2d7395d671311a5b8b97013b2e73d87/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5c87bc85e2d7395d671311a5b8b97013b2e73d87", "patch": "@@ -1737,7 +1737,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    /// resolve_hir_path, but takes a callback in case there was an error\n+    /// Like `resolve_hir_path`, but takes a callback in case there was an error.\n     fn resolve_hir_path_cb<F>(\n         &mut self,\n         path: &ast::Path,\n@@ -1750,7 +1750,7 @@ impl<'a> Resolver<'a> {\n         let span = path.span;\n         let segments = &path.segments;\n         let path = Segment::from_path(&path);\n-        // FIXME (Manishearth): Intra doc links won't get warned of epoch changes\n+        // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.\n         let def = match self.resolve_path_without_parent_scope(&path, Some(namespace), true,\n                                                                span, CrateLint::No) {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n@@ -5066,7 +5066,6 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     (variant_path_string, enum_path_string)\n }\n \n-\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way"}]}