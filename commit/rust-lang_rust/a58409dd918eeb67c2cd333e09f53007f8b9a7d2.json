{"sha": "a58409dd918eeb67c2cd333e09f53007f8b9a7d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ODQwOWRkOTE4ZWViNjdjMmNkMzMzZTA5ZjUzMDA3ZjhiOWE3ZDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-14T18:44:07Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-16T15:32:11Z"}, "message": "Notify users that this example is shared through integer types", "tree": {"sha": "2d035b9bd18b061433b889c28f8906e2d21042be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d035b9bd18b061433b889c28f8906e2d21042be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a58409dd918eeb67c2cd333e09f53007f8b9a7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a58409dd918eeb67c2cd333e09f53007f8b9a7d2", "html_url": "https://github.com/rust-lang/rust/commit/a58409dd918eeb67c2cd333e09f53007f8b9a7d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a58409dd918eeb67c2cd333e09f53007f8b9a7d2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a30673d2b5a647af1e54bf852ee7503f6151f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a30673d2b5a647af1e54bf852ee7503f6151f9f", "html_url": "https://github.com/rust-lang/rust/commit/9a30673d2b5a647af1e54bf852ee7503f6151f9f"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "9c84eb6dba5cc396fa017cccaff430553b905408", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a58409dd918eeb67c2cd333e09f53007f8b9a7d2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58409dd918eeb67c2cd333e09f53007f8b9a7d2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a58409dd918eeb67c2cd333e09f53007f8b9a7d2", "patch": "@@ -255,6 +255,9 @@ $EndFeature, \"\n         ///\n         /// # Examples\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i64` is used here.\n+        ///\n         /// Basic usage:\n         ///\n         /// ```\n@@ -277,6 +280,9 @@ $EndFeature, \"\n         ///\n         /// # Examples\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i64` is used here.\n+        ///\n         /// Basic usage:\n         ///\n         /// ```\n@@ -295,6 +301,9 @@ $EndFeature, \"\n         ///\n         /// # Examples\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i16` is used here.\n+        ///\n         /// Basic usage:\n         ///\n         /// ```\n@@ -1362,13 +1371,13 @@ impl i128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, \"\", \"\" }\n+    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, \"\", \"\" }\n+    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -1477,22 +1486,23 @@ Basic usage:\n             }\n         }\n \n-        /// Returns the number of leading zeros in the binary representation\n-        /// of `self`.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n = 0b0101000u16;\n-        ///\n-        /// assert_eq!(n.leading_zeros(), 10);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn leading_zeros(self) -> u32 {\n-            unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n+        doc_comment! {\n+            concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"let n = \", stringify!($SelfT), \"::max_value() >> 2;\n+\n+assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn leading_zeros(self) -> u32 {\n+                unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n+            }\n         }\n \n         doc_comment! {\n@@ -1537,6 +1547,9 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n         ///\n         /// Basic usage:\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u64` is used here.\n+        ///\n         /// ```\n         /// let n = 0x0123456789ABCDEFu64;\n         /// let m = 0x3456789ABCDEF012u64;\n@@ -1561,6 +1574,9 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n         ///\n         /// Basic usage:\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u64` is used here.\n+        ///\n         /// ```\n         /// let n = 0x0123456789ABCDEFu64;\n         /// let m = 0xDEF0123456789ABCu64;\n@@ -1581,6 +1597,9 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n         ///\n         /// Basic usage:\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u16` is used here.\n+        ///\n         /// ```\n         /// let n: u16 = 0b0000000_01010101;\n         /// assert_eq!(n, 85);\n@@ -1985,6 +2004,9 @@ $EndFeature, \"\n         ///\n         /// Basic usage:\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u8` is used here.\n+        ///\n         /// ```\n         /// assert_eq!(10u8.wrapping_mul(12), 120);\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n@@ -2054,6 +2076,9 @@ Basic usage:\n         ///\n         /// Basic usage:\n         ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i8` is used here.\n+        ///\n         /// ```\n         /// assert_eq!(100i8.wrapping_neg(), -100);\n         /// assert_eq!((-128i8).wrapping_neg(), -128);\n@@ -2187,7 +2212,10 @@ $EndFeature, \"\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n+        /// Basic usage:\n+        ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u32` is used here.\n         ///\n         /// ```\n         /// assert_eq!(5u32.overflowing_mul(2), (10, false));"}]}