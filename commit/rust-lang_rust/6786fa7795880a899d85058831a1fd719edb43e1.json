{"sha": "6786fa7795880a899d85058831a1fd719edb43e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ODZmYTc3OTU4ODBhODk5ZDg1MDU4ODMxYTFmZDcxOWVkYjQzZTE=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-04-05T18:49:46Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-04-08T21:22:31Z"}, "message": "Rename Waker::new_unchecked to Waker::from_raw", "tree": {"sha": "37b780b6a8fcdc47e84b20d66470f1d2ef3c5305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b780b6a8fcdc47e84b20d66470f1d2ef3c5305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6786fa7795880a899d85058831a1fd719edb43e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6786fa7795880a899d85058831a1fd719edb43e1", "html_url": "https://github.com/rust-lang/rust/commit/6786fa7795880a899d85058831a1fd719edb43e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6786fa7795880a899d85058831a1fd719edb43e1/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01be78d69ff69daa5f1ad20888446779656e191c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01be78d69ff69daa5f1ad20888446779656e191c", "html_url": "https://github.com/rust-lang/rust/commit/01be78d69ff69daa5f1ad20888446779656e191c"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "006cbbb6ce6bddfc069568446a254cb1ea4f07d6", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6786fa7795880a899d85058831a1fd719edb43e1/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6786fa7795880a899d85058831a1fd719edb43e1/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=6786fa7795880a899d85058831a1fd719edb43e1", "patch": "@@ -215,7 +215,7 @@ impl Waker {\n         // Don't call `drop` -- the waker will be consumed by `wake`.\n         crate::mem::forget(self);\n \n-        // SAFETY: This is safe because `Waker::new_unchecked` is the only way\n+        // SAFETY: This is safe because `Waker::from_raw` is the only way\n         // to initialize `wake` and `data` requiring the user to acknowledge\n         // that the contract of `RawWaker` is upheld.\n         unsafe { (wake)(data) };\n@@ -253,7 +253,7 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n-    pub unsafe fn new_unchecked(waker: RawWaker) -> Waker {\n+    pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker {\n             waker,\n         }\n@@ -264,7 +264,7 @@ impl Clone for Waker {\n     #[inline]\n     fn clone(&self) -> Self {\n         Waker {\n-            // SAFETY: This is safe because `Waker::new_unchecked` is the only way\n+            // SAFETY: This is safe because `Waker::from_raw` is the only way\n             // to initialize `clone` and `data` requiring the user to acknowledge\n             // that the contract of [`RawWaker`] is upheld.\n             waker: unsafe { (self.waker.vtable.clone)(self.waker.data) },\n@@ -275,7 +275,7 @@ impl Clone for Waker {\n impl Drop for Waker {\n     #[inline]\n     fn drop(&mut self) {\n-        // SAFETY: This is safe because `Waker::new_unchecked` is the only way\n+        // SAFETY: This is safe because `Waker::from_raw` is the only way\n         // to initialize `drop` and `data` requiring the user to acknowledge\n         // that the contract of `RawWaker` is upheld.\n         unsafe { (self.waker.vtable.drop)(self.waker.data) }"}, {"sha": "93e074e7ee55c7f49ade4fb53285b68a9321a1ca", "filename": "src/test/run-pass/auxiliary/arc_wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6786fa7795880a899d85058831a1fd719edb43e1/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6786fa7795880a899d85058831a1fd719edb43e1/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs?ref=6786fa7795880a899d85058831a1fd719edb43e1", "patch": "@@ -30,7 +30,7 @@ pub trait ArcWake {\n         let ptr = Arc::into_raw(wake) as *const ();\n \n         unsafe {\n-            Waker::new_unchecked(RawWaker::new(ptr, waker_vtable!(Self)))\n+            Waker::from_raw(RawWaker::new(ptr, waker_vtable!(Self)))\n         }\n     }\n }"}]}