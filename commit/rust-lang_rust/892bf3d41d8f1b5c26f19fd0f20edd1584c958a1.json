{"sha": "892bf3d41d8f1b5c26f19fd0f20edd1584c958a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmJmM2Q0MWQ4ZjFiNWMyNmYxOWZkMGYyMGVkZDE1ODRjOTU4YTE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-08-23T15:26:34Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-08-23T20:07:48Z"}, "message": "Use a macro in test_decode_utf8 to preserve line numbers in panic messages.", "tree": {"sha": "598fddac8199a10623196adde139947b6c0773ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598fddac8199a10623196adde139947b6c0773ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1", "html_url": "https://github.com/rust-lang/rust/commit/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599f1b96b19c2a67b1e854a64e0cd43af3de164d", "url": "https://api.github.com/repos/rust-lang/rust/commits/599f1b96b19c2a67b1e854a64e0cd43af3de164d", "html_url": "https://github.com/rust-lang/rust/commit/599f1b96b19c2a67b1e854a64e0cd43af3de164d"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "a4406204f11402eab2b544a60db3368c236edd87", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892bf3d41d8f1b5c26f19fd0f20edd1584c958a1/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=892bf3d41d8f1b5c26f19fd0f20edd1584c958a1", "patch": "@@ -358,29 +358,31 @@ fn eu_iterator_specializations() {\n \n #[test]\n fn test_decode_utf8() {\n-    use core::char::*;\n-    use core::iter::FromIterator;\n-\n-    for &(str, bs) in [(\"\", &[] as &[u8]),\n-                       (\"A\", &[0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0xC1u8, 0x81u8] as &[u8]),\n-                       (\"\u2665\", &[0xE2u8, 0x99u8, 0xA5u8]),\n-                       (\"\u2665A\", &[0xE2u8, 0x99u8, 0xA5u8, 0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0xE2u8, 0x99u8] as &[u8]),\n-                       (\"\ufffdA\", &[0xE2u8, 0x99u8, 0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0xC0u8] as &[u8]),\n-                       (\"\ufffdA\", &[0xC0u8, 0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0x80u8] as &[u8]),\n-                       (\"\ufffdA\", &[0x80u8, 0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0xFEu8] as &[u8]),\n-                       (\"\ufffdA\", &[0xFEu8, 0x41u8] as &[u8]),\n-                       (\"\ufffd\", &[0xFFu8] as &[u8]),\n-                       (\"\ufffdA\", &[0xFFu8, 0x41u8] as &[u8])].into_iter() {\n-        assert!(Iterator::eq(str.chars(),\n-                             decode_utf8(bs.into_iter().map(|&b|b))\n-                                 .map(|r_b| r_b.unwrap_or('\\u{FFFD}'))),\n-                \"chars = {}, bytes = {:?}, decoded = {:?}\", str, bs,\n-                Vec::from_iter(decode_utf8(bs.into_iter().map(|&b|b))\n-                                   .map(|r_b| r_b.unwrap_or('\\u{FFFD}'))));\n+    macro_rules! assert_decode_utf8 {\n+        ($input_bytes: expr, $expected_str: expr) => {\n+            let input_bytes: &[u8] = &$input_bytes;\n+            let s = char::decode_utf8(input_bytes.iter().cloned())\n+                .map(|r_b| r_b.unwrap_or('\\u{FFFD}'))\n+                .collect::<String>();\n+            assert_eq!(s, $expected_str,\n+                       \"input bytes: {:?}, expected str: {:?}, result: {:?}\",\n+                       input_bytes, $expected_str, s);\n+        }\n     }\n+\n+    assert_decode_utf8!([], \"\");\n+    assert_decode_utf8!([0x41], \"A\");\n+    assert_decode_utf8!([0xC1, 0x81], \"\ufffd\");\n+    assert_decode_utf8!([0xE2, 0x99, 0xA5], \"\u2665\");\n+    assert_decode_utf8!([0xE2, 0x99, 0xA5, 0x41], \"\u2665A\");\n+    assert_decode_utf8!([0xE2, 0x99], \"\ufffd\");\n+    assert_decode_utf8!([0xE2, 0x99, 0x41], \"\ufffdA\");\n+    assert_decode_utf8!([0xC0], \"\ufffd\");\n+    assert_decode_utf8!([0xC0, 0x41], \"\ufffdA\");\n+    assert_decode_utf8!([0x80], \"\ufffd\");\n+    assert_decode_utf8!([0x80, 0x41], \"\ufffdA\");\n+    assert_decode_utf8!([0xFE], \"\ufffd\");\n+    assert_decode_utf8!([0xFE, 0x41], \"\ufffdA\");\n+    assert_decode_utf8!([0xFF], \"\ufffd\");\n+    assert_decode_utf8!([0xFF, 0x41], \"\ufffdA\");\n }"}]}