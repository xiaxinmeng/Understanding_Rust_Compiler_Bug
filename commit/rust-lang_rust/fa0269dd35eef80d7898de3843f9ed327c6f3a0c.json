{"sha": "fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDI2OWRkMzVlZWY4MGQ3ODk4ZGUzODQzZjllZDMyN2M2ZjNhMGM=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-02T22:49:18Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-02T23:07:59Z"}, "message": "Generate unique IDs for each rustdoc HTML page", "tree": {"sha": "a00581b8b230d8d660db49a1dbe9d453bfc4ce10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00581b8b230d8d660db49a1dbe9d453bfc4ce10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "html_url": "https://github.com/rust-lang/rust/commit/fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0269dd35eef80d7898de3843f9ed327c6f3a0c/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "html_url": "https://github.com/rust-lang/rust/commit/538689ddc7fe9a7176d6722b6c37e2e082e5fd08"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "eccdd08db8a7594956a9ab5c27cc074e96f4f050", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa0269dd35eef80d7898de3843f9ed327c6f3a0c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0269dd35eef80d7898de3843f9ed327c6f3a0c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "patch": "@@ -35,7 +35,7 @@ use std::fmt;\n use std::slice;\n use std::str;\n \n-use html::render::{with_unique_id, reset_ids};\n+use html::render::with_unique_id;\n use html::toc::TocBuilder;\n use html::highlight;\n use html::escape::Escape;\n@@ -322,8 +322,6 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         unsafe { hoedown_buffer_puts(ob, text.as_ptr()) }\n     }\n \n-    reset_ids();\n-\n     extern fn codespan(\n         ob: *mut hoedown_buffer,\n         text: *const hoedown_buffer,\n@@ -554,6 +552,7 @@ pub fn plain_summary_line(md: &str) -> String {\n mod tests {\n     use super::{LangString, Markdown};\n     use super::plain_summary_line;\n+    use html::render::reset_ids;\n \n     #[test]\n     fn test_lang_string_parse() {\n@@ -593,6 +592,7 @@ mod tests {\n         fn t(input: &str, expect: &str) {\n             let output = format!(\"{}\", Markdown(input));\n             assert_eq!(output, expect);\n+            reset_ids();\n         }\n \n         t(\"# Foo bar\", \"\\n<h1 id='foo-bar' class='section-header'>\\"}, {"sha": "e7fe4de8d04a3de689e567567e75579385dbebc8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fa0269dd35eef80d7898de3843f9ed327c6f3a0c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0269dd35eef80d7898de3843f9ed327c6f3a0c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fa0269dd35eef80d7898de3843f9ed327c6f3a0c", "patch": "@@ -1725,10 +1725,10 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n                 ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n             };\n-            try!(write!(w,\n-                        \"<h2 id='{id}' class='section-header'>\\\n-                        <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n-                        id = short, name = name));\n+            try!(with_unique_id(short.to_owned(), |id|\n+                write!(w, \"<h2 id='{id}' class='section-header'>\\\n+                          <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n+                          id = id, name = name)));\n         }\n \n         match myitem.inner {\n@@ -1949,10 +1949,11 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item)\n                   -> fmt::Result {\n-        try!(write!(w, \"<h3 id='{ty}.{name}' class='method stab {stab}'><code>\",\n-                    ty = shortty(m),\n-                    name = *m.name.as_ref().unwrap(),\n-                    stab = m.stability_class()));\n+        let name = m.name.as_ref().unwrap();\n+        try!(with_unique_id(format!(\"{}.{}\", shortty(m), name), |id|\n+                write!(w, \"<h3 id='{id}' class='method stab {stab}'><code>\",\n+                       id = id,\n+                       stab = m.stability_class())));\n         try!(render_assoc_item(w, m, AssocItemLink::Anchor));\n         try!(write!(w, \"</code></h3>\"));\n         try!(document(w, cx, m));\n@@ -2141,11 +2142,12 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         if fields.peek().is_some() {\n             try!(write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\"));\n             for field in fields {\n-                try!(write!(w, \"<tr class='stab {stab}'>\n-                                  <td id='structfield.{name}'>\\\n-                                    <code>{name}</code></td><td>\",\n-                            stab = field.stability_class(),\n-                            name = field.name.as_ref().unwrap()));\n+                let name = field.name.as_ref().unwrap();\n+                try!(with_unique_id(format!(\"structfield.{}\", name), |id|\n+                    write!(w, \"<tr class='stab {}'><td id='{}'><code>{}</code></td><td>\",\n+                              field.stability_class(),\n+                              id,\n+                              name)));\n                 try!(document(w, cx, field));\n                 try!(write!(w, \"</td></tr>\"));\n             }\n@@ -2212,8 +2214,9 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if !e.variants.is_empty() {\n         try!(write!(w, \"<h2 class='variants'>Variants</h2>\\n<table>\"));\n         for variant in &e.variants {\n-            try!(write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n-                          name = variant.name.as_ref().unwrap()));\n+            let name = variant.name.as_ref().unwrap();\n+            try!(with_unique_id(format!(\"variant.{}\", name), |id|\n+                    write!(w, \"<tr><td id='{}'><code>{}</code></td><td>\", id, name)));\n             try!(document(w, cx, variant));\n             match variant.inner {\n                 clean::VariantItem(ref var) => {\n@@ -2231,11 +2234,10 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                             try!(write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                                               <table>\"));\n                             for field in fields {\n-                                try!(write!(w, \"<tr><td \\\n-                                                  id='variant.{v}.field.{f}'>\\\n-                                                  <code>{f}</code></td><td>\",\n-                                              v = variant.name.as_ref().unwrap(),\n-                                              f = field.name.as_ref().unwrap()));\n+                                let v = variant.name.as_ref().unwrap();\n+                                let f = field.name.as_ref().unwrap();\n+                                try!(with_unique_id(format!(\"variant.{}.field.{}\", v, f), |id|\n+                                    write!(w, \"<tr><td id='{}'><code>{}</code></td><td>\", id, f)));\n                                 try!(document(w, cx, field));\n                                 try!(write!(w, \"</td></tr>\"));\n                             }\n@@ -2447,44 +2449,38 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n \n     fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n                     link: AssocItemLink, render_static: bool) -> fmt::Result {\n+        let name = item.name.as_ref().unwrap();\n         match item.inner {\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n                 // Only render when the method is not static or we allow static methods\n                 if !is_static_method(item) || render_static {\n-                    try!(write!(w, \"<h4 id='method.{}' class='{}'><code>\",\n-                                *item.name.as_ref().unwrap(),\n-                                shortty(item)));\n+                    try!(with_unique_id(format!(\"method.{}\", name), |id|\n+                        write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n                 try!(render_assoc_item(w, item, link));\n                     try!(write!(w, \"</code></h4>\\n\"));\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                let name = item.name.as_ref().unwrap();\n-                try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'><code>\",\n-                            *name,\n-                            shortty(item)));\n+                try!(with_unique_id(format!(\"assoc_type.{}\", name), |id|\n+                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n                 try!(write!(w, \"type {} = {}\", name, tydef.type_));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n-                let name = item.name.as_ref().unwrap();\n-                try!(write!(w, \"<h4 id='assoc_const.{}' class='{}'><code>\",\n-                            *name, shortty(item)));\n+                try!(with_unique_id(format!(\"assoc_const.{}\", name), |id|\n+                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n                 try!(assoc_const(w, item, ty, default.as_ref()));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::ConstantItem(ref c) => {\n-                let name = item.name.as_ref().unwrap();\n-                try!(write!(w, \"<h4 id='assoc_const.{}' class='{}'><code>\",\n-                            *name, shortty(item)));\n+                try!(with_unique_id(format!(\"assoc_const.{}\", name), |id|\n+                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n                 try!(assoc_const(w, item, &c.type_, Some(&c.expr)));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n-                let name = item.name.as_ref().unwrap();\n-                try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'><code>\",\n-                            *name,\n-                            shortty(item)));\n+                try!(with_unique_id(format!(\"assoc_type.{}\", name), |id|\n+                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n                 try!(assoc_type(w, item, bounds, default));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }"}]}