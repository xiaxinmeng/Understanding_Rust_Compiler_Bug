{"sha": "70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "node_id": "C_kwDOAAsO6NoAKDcwYWRiNGU1YjRjOGY4YmRlNGFkZTBlZGNiMDQzNWZmN2JmMzEyODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-03T22:45:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-03T22:45:58Z"}, "message": "Auto merge of #108709 - matthiaskrgr:rollup-j2tjbyx, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104549 (add -Zexport-executable-symbols to unstable book)\n - #108292 (Label opaque type for 'captures lifetime' error message)\n - #108540 (Add `Atomic*::from_ptr`)\n - #108634 (Add link to component dashboard)\n - #108647 (Remove dead pgo.sh file)\n - #108678 (Use `Option::as_slice` where applicable)\n - #108681 (Improve comments in `needs_process_obligation`.)\n - #108688 (Match unmatched backticks in library/)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b80e2d5c0f5cd3c5e90d193fde662e1b400fbcdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80e2d5c0f5cd3c5e90d193fde662e1b400fbcdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "html_url": "https://github.com/rust-lang/rust/commit/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44cfafe2fafe816395d3acc434663a45d5178c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/44cfafe2fafe816395d3acc434663a45d5178c41", "html_url": "https://github.com/rust-lang/rust/commit/44cfafe2fafe816395d3acc434663a45d5178c41"}, {"sha": "7a228ce9a64e20804b60c89b561ef97507425d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a228ce9a64e20804b60c89b561ef97507425d95", "html_url": "https://github.com/rust-lang/rust/commit/7a228ce9a64e20804b60c89b561ef97507425d95"}], "stats": {"total": 665, "additions": 341, "deletions": 324}, "files": [{"sha": "91abdaadabdbd4453fc38881ab96ebc0d0805394", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -426,6 +426,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // nodes. Therefore we use a `while` loop.\n             let mut index = 0;\n             while let Some(node) = self.nodes.get_mut(index) {\n+                // This test is extremely hot.\n                 if node.state.get() != NodeState::Pending\n                     || !processor.needs_process_obligation(&node.obligation)\n                 {\n@@ -439,6 +440,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 // out of sync with `nodes`. It's not very common, but it does\n                 // happen, and code in `compress` has to allow for it.\n \n+                // This code is much less hot.\n                 match processor.process_obligation(&mut node.obligation) {\n                     ProcessResult::Unchanged => {\n                         // No change in state."}, {"sha": "a46bdeb417da3e3564886d4b4edf0211c8f8b562", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -36,7 +36,6 @@ use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext}\n \n use std::iter;\n use std::mem;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&mut self) {\n@@ -1507,11 +1506,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let coerce = if blk.targeted_by_break {\n             CoerceMany::new(coerce_to_ty)\n         } else {\n-            let tail_expr: &[&hir::Expr<'_>] = match tail_expr {\n-                Some(e) => slice::from_ref(e),\n-                None => &[],\n-            };\n-            CoerceMany::with_coercion_sites(coerce_to_ty, tail_expr)\n+            CoerceMany::with_coercion_sites(coerce_to_ty, blk.expr.as_slice())\n         };\n \n         let prev_diverges = self.diverges.get();"}, {"sha": "e397dfd45706bcc20291b770054c661434f04017", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -5,6 +5,7 @@\n #![feature(min_specialization)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(option_as_slice)]\n #![allow(rustc::potential_query_instability)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "80279ed969a9458424a6f179b3ab6e357876c5f2", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -749,14 +749,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let opname = Ident::with_dummy_span(opname);\n-        let input_types =\n-            opt_rhs.as_ref().map(|(_, ty)| std::slice::from_ref(ty)).unwrap_or_default();\n+        let (opt_rhs_expr, opt_rhs_ty) = opt_rhs.unzip();\n+        let input_types = opt_rhs_ty.as_slice();\n         let cause = self.cause(\n             span,\n             traits::BinOp {\n-                rhs_span: opt_rhs.map(|(expr, _)| expr.span),\n-                is_lit: opt_rhs\n-                    .map_or(false, |(expr, _)| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                rhs_span: opt_rhs_expr.map(|expr| expr.span),\n+                is_lit: opt_rhs_expr\n+                    .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n                 output_ty: expected.only_has_type(self),\n             },\n         );"}, {"sha": "2cca45de5e9714e8c802b6865dcb566ad157b5f9", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutabili\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -393,11 +392,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n             }\n         };\n-        let arg_tys = match arg_ty {\n-            None => &[],\n-            Some(ref ty) => slice::from_ref(ty),\n-        };\n-\n+        let arg_tys = arg_ty.as_slice();\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}, {"sha": "15780898dc6ab42110da1b11fd2db6f0d6768482", "filename": "compiler/rustc_infer/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -345,3 +345,6 @@ infer_prlf_defined_without_sub = the lifetime defined here...\n infer_prlf_must_oultive_with_sup = ...must outlive the lifetime `{$sup_symbol}` defined here\n infer_prlf_must_oultive_without_sup = ...must outlive the lifetime defined here\n infer_prlf_known_limitation = this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n+\n+infer_opaque_captures_lifetime = hidden type for `{$opaque_ty}` captures lifetime that does not appear in bounds\n+    .label = opaque type defined here"}, {"sha": "6bbd3fd3e6e75cb818050d9401217173cd83e2c3", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -1147,3 +1147,13 @@ pub enum PlaceholderRelationLfNotSatisfied {\n         note: (),\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(infer_opaque_captures_lifetime, code = \"E0700\")]\n+pub struct OpaqueCapturesLifetime<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub opaque_ty_span: Span,\n+    pub opaque_ty: Ty<'tcx>,\n+}"}, {"sha": "8a2b800af0e81c174fed4524fd0acdeaed4d01ea", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -49,6 +49,7 @@ use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n+use crate::errors;\n use crate::infer;\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::ExpectedFound;\n@@ -281,15 +282,13 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n-    opaque_ty: ty::OpaqueTypeKey<'tcx>,\n+    opaque_ty_key: ty::OpaqueTypeKey<'tcx>,\n ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-    let opaque_ty = tcx.mk_opaque(opaque_ty.def_id.to_def_id(), opaque_ty.substs);\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n+    let mut err = tcx.sess.create_err(errors::OpaqueCapturesLifetime {\n         span,\n-        E0700,\n-        \"hidden type for `{opaque_ty}` captures lifetime that does not appear in bounds\",\n-    );\n+        opaque_ty: tcx.mk_opaque(opaque_ty_key.def_id.to_def_id(), opaque_ty_key.substs),\n+        opaque_ty_span: tcx.def_span(opaque_ty_key.def_id),\n+    });\n \n     // Explain the region we are capturing.\n     match *hidden_region {"}, {"sha": "944436ab82f91cc79522d1dc5c9acc02e0280f4b", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -212,36 +212,44 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n \n     /// Identifies whether a predicate obligation needs processing.\n     ///\n-    /// This is always inlined, despite its size, because it has a single\n-    /// callsite and it is called *very* frequently.\n+    /// This is always inlined because it has a single callsite and it is\n+    /// called *very* frequently. Be careful modifying this code! Several\n+    /// compile-time benchmarks are very sensitive to even small changes.\n     #[inline(always)]\n     fn needs_process_obligation(&self, pending_obligation: &Self::Obligation) -> bool {\n         // If we were stalled on some unresolved variables, first check whether\n         // any of them have been resolved; if not, don't bother doing more work\n         // yet.\n-        match pending_obligation.stalled_on.len() {\n-            // Match arms are in order of frequency, which matters because this\n-            // code is so hot. 1 and 0 dominate; 2+ is fairly rare.\n-            1 => {\n-                let infer_var = pending_obligation.stalled_on[0];\n-                self.selcx.infcx.ty_or_const_infer_var_changed(infer_var)\n-            }\n-            0 => {\n-                // In this case we haven't changed, but wish to make a change.\n-                true\n-            }\n-            _ => {\n-                // This `for` loop was once a call to `all()`, but this lower-level\n-                // form was a perf win. See #64545 for details.\n-                (|| {\n-                    for &infer_var in &pending_obligation.stalled_on {\n-                        if self.selcx.infcx.ty_or_const_infer_var_changed(infer_var) {\n-                            return true;\n-                        }\n+        let stalled_on = &pending_obligation.stalled_on;\n+        match stalled_on.len() {\n+            // This case is the hottest most of the time, being hit up to 99%\n+            // of the time. `keccak` and `cranelift-codegen-0.82.1` are\n+            // benchmarks that particularly stress this path.\n+            1 => self.selcx.infcx.ty_or_const_infer_var_changed(stalled_on[0]),\n+\n+            // In this case we haven't changed, but wish to make a change. Note\n+            // that this is a special case, and is not equivalent to the `_`\n+            // case below, which would return `false` for an empty `stalled_on`\n+            // vector.\n+            //\n+            // This case is usually hit only 1% of the time or less, though it\n+            // reaches 20% in `wasmparser-0.101.0`.\n+            0 => true,\n+\n+            // This case is usually hit only 1% of the time or less, though it\n+            // reaches 95% in `mime-0.3.16`, 64% in `wast-54.0.0`, and 12% in\n+            // `inflate-0.4.5`.\n+            //\n+            // The obvious way of writing this, with a call to `any()` and no\n+            // closure, is currently slower than this version.\n+            _ => (|| {\n+                for &infer_var in stalled_on {\n+                    if self.selcx.infcx.ty_or_const_infer_var_changed(infer_var) {\n+                        return true;\n                     }\n-                    false\n-                })()\n-            }\n+                }\n+                false\n+            })(),\n         }\n     }\n "}, {"sha": "932a537c598f2d4b6787e56126061e2b801368d5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2145,7 +2145,7 @@ impl<T, I: iter::TrustedLen<Item = T>> ToRcSlice<T> for I {\n                 Rc::from_iter_exact(self, low)\n             }\n         } else {\n-            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // TrustedLen contract guarantees that `upper_bound == None` implies an iterator\n             // length exceeding `usize::MAX`.\n             // The default implementation would collect into a vec which would panic.\n             // Thus we panic here immediately without invoking `Vec` code."}, {"sha": "fdd341a06ef46ab22c325357a35eea59e24cdefc", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2895,7 +2895,7 @@ impl<T, I: iter::TrustedLen<Item = T>> ToArcSlice<T> for I {\n                 Arc::from_iter_exact(self, low)\n             }\n         } else {\n-            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // TrustedLen contract guarantees that `upper_bound == None` implies an iterator\n             // length exceeding `usize::MAX`.\n             // The default implementation would collect into a vec which would panic.\n             // Thus we panic here immediately without invoking `Vec` code."}, {"sha": "c27646b8f33dfb2eeeeb8b615cc8e080719fe867", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -56,7 +56,7 @@\n //!     let value_any = value as &dyn Any;\n //!\n //!     // Try to convert our value to a `String`. If successful, we want to\n-//!     // output the String`'s length as well as its value. If not, it's a\n+//!     // output the `String`'s length as well as its value. If not, it's a\n //!     // different type: just print it out unadorned.\n //!     match value_any.downcast_ref::<String>() {\n //!         Some(as_string) => {"}, {"sha": "897d03595d748dcaf5bac03607956dd044899d20", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -632,7 +632,7 @@ pub struct RefCell<T: ?Sized> {\n     // Stores the location of the earliest currently active borrow.\n     // This gets updated whenever we go from having zero borrows\n     // to having a single borrow. When a borrow occurs, this gets included\n-    // in the generated `BorrowError/`BorrowMutError`\n+    // in the generated `BorrowError`/`BorrowMutError`\n     #[cfg(feature = \"debug_refcell\")]\n     borrowed_at: Cell<Option<&'static crate::panic::Location<'static>>>,\n     value: UnsafeCell<T>,"}, {"sha": "72db1d87ca3c0cf4e046f294ead1387678d4d533", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -42,7 +42,7 @@\n //! another function. The `dialect` and `phase` parameters indicate which [version of MIR][dialect\n //! docs] you are inserting here. Generally you'll want to use `#![custom_mir(dialect = \"built\")]`\n //! if you want your MIR to be modified by the full MIR pipeline, or `#![custom_mir(dialect =\n-//! \"runtime\", phase = \"optimized\")] if you don't.\n+//! \"runtime\", phase = \"optimized\")]` if you don't.\n //!\n //! [dialect docs]:\n //!     https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html"}, {"sha": "efe6d4183e3ea808857cb83d1fe4f00a9db2fac5", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -41,7 +41,7 @@ impl Alignment {\n     /// Returns the alignment for a type.\n     ///\n     /// This provides the same numerical value as [`mem::align_of`],\n-    /// but in an `Alignment` instead of a `usize.\n+    /// but in an `Alignment` instead of a `usize`.\n     #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n     pub const fn of<T>() -> Self {"}, {"sha": "1cd86b445b0a478552cb4bbefe9b1561f95a7e81", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2955,7 +2955,7 @@ impl<T> [T] {\n         // This operation is still `O(n)`.\n         //\n         // Example: We start in this state, where `r` represents \"next\n-        // read\" and `w` represents \"next_write`.\n+        // read\" and `w` represents \"next_write\".\n         //\n         //           r\n         //     +---+---+---+---+---+---+"}, {"sha": "2333f60a8889b8051f47c12aebfbf32b94277201", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -317,7 +317,7 @@ where\n     // 1. `block` - Number of elements in the block.\n     // 2. `start` - Start pointer into the `offsets` array.\n     // 3. `end` - End pointer into the `offsets` array.\n-    // 4. `offsets - Indices of out-of-order elements within the block.\n+    // 4. `offsets` - Indices of out-of-order elements within the block.\n \n     // The current block on the left side (from `l` to `l.add(block_l)`).\n     let mut l = v.as_mut_ptr();\n@@ -327,7 +327,7 @@ where\n     let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n-    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe`\n+    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();"}, {"sha": "040a59184a64639d675d63dfada5d6a20a42781e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -305,6 +305,50 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n+    /// Creates a new `AtomicBool` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicBool};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut bool = Box::into_raw(Box::new(false));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicBool>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicBool::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(true, atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert_eq!(unsafe { *ptr }, true);\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut bool) -> &'a AtomicBool {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying [`bool`].\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1017,6 +1061,50 @@ impl<T> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n \n+    /// Creates a new `AtomicPtr` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicPtr};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut *mut u8 = Box::into_raw(Box::new(std::ptr::null_mut()));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicPtr<u8>>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicPtr::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(std::ptr::NonNull::dangling().as_ptr(), atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert!(!unsafe { *ptr }.is_null());\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicPtr<T>>()` (note that on some platforms this can be bigger than `align_of::<*mut T>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut *mut T) -> &'a AtomicPtr<T> {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying pointer.\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1958,6 +2046,53 @@ macro_rules! atomic_int {\n                 Self {v: UnsafeCell::new(v)}\n             }\n \n+            /// Creates a new reference to an atomic integer from a pointer.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{self, \", stringify!($atomic_type), \"};\")]\n+            /// use std::mem::align_of;\n+            ///\n+            /// // Get a pointer to an allocated value\n+            #[doc = concat!(\"let ptr: *mut \", stringify!($int_type), \" = Box::into_raw(Box::new(0));\")]\n+            ///\n+            #[doc = concat!(\"assert!(ptr.is_aligned_to(align_of::<\", stringify!($atomic_type), \">()));\")]\n+            ///\n+            /// {\n+            ///     // Create an atomic view of the allocated value\n+            // SAFETY: this is a doc comment, tidy, it can't hurt you (also guaranteed by the construction of `ptr` and the assert above)\n+            #[doc = concat!(\"    let atomic = unsafe {\", stringify!($atomic_type), \"::from_ptr(ptr) };\")]\n+            ///\n+            ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+            ///     atomic.store(1, atomic::Ordering::Relaxed);\n+            /// }\n+            ///\n+            /// // It's ok to non-atomically access the value behind `ptr`,\n+            /// // since the reference to the atomic ended its lifetime in the block above\n+            /// assert_eq!(unsafe { *ptr }, 1);\n+            ///\n+            /// // Deallocate the value\n+            /// unsafe { drop(Box::from_raw(ptr)) }\n+            /// ```\n+            ///\n+            /// # Safety\n+            ///\n+            /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+            #[doc = concat!(\" * `ptr` must be aligned to `align_of::<\", stringify!($atomic_type), \">()` (note that on some platforms this can be bigger than `align_of::<\", stringify!($int_type), \">()`).\")]\n+            /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+            /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+            ///\n+            /// [valid]: crate::ptr#safety\n+            #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+            #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+            pub const unsafe fn from_ptr<'a>(ptr: *mut $int_type) -> &'a $atomic_type {\n+                // SAFETY: guaranteed by the caller\n+                unsafe { &*ptr.cast() }\n+            }\n+\n+\n             /// Returns a mutable reference to the underlying integer.\n             ///\n             /// This is safe because the mutable reference guarantees that no other threads are"}, {"sha": "ca3463aa7f782bcfa3b34b142885cc28fa4df6a2", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -24,7 +24,7 @@ mod zip;\n \n use core::cell::Cell;\n \n-/// An iterator that panics whenever `next` or next_back` is called\n+/// An iterator that panics whenever `next` or `next_back` is called\n /// after `None` has already been returned. This does not violate\n /// `Iterator`'s contract. Used to test that iterator adapters don't\n /// poll their inner iterators after exhausting them."}, {"sha": "d52d1ac4d3a0efe78db6ef1f976549a2baffd5f1", "filename": "library/portable-simd/crates/core_simd/src/vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -28,7 +28,7 @@ use crate::simd::{\n /// let zm_add = a0.zip(a1).map(|(lhs, rhs)| lhs + rhs);\n /// let zm_mul = a0.zip(a1).map(|(lhs, rhs)| lhs * rhs);\n ///\n-/// // `Simd<T, N>` implements `From<[T; N]>\n+/// // `Simd<T, N>` implements `From<[T; N]>`\n /// let (v0, v1) = (Simd::from(a0), Simd::from(a1));\n /// // Which means arrays implement `Into<Simd<T, N>>`.\n /// assert_eq!(v0 + v1, zm_add.into());"}, {"sha": "1952e19e60720f3fbc42f61374fa6a0ef45910c9", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -1416,7 +1416,7 @@ impl From<fs::File> for Stdio {\n     /// use std::fs::File;\n     /// use std::process::Command;\n     ///\n-    /// // With the `foo.txt` file containing `Hello, world!\"\n+    /// // With the `foo.txt` file containing \"Hello, world!\"\n     /// let file = File::open(\"foo.txt\").unwrap();\n     ///\n     /// let reverse = Command::new(\"rev\")"}, {"sha": "ae0f718535b2694e83a2c03ebf911da00bf65478", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -247,7 +247,7 @@ impl Thread {\n                 // [FINISHED \u2192 JOINED]\n                 // To synchronize with the child task's memory accesses to\n                 // `inner` up to the point of the assignment of `FINISHED`,\n-                // `Ordering::Acquire` must be used for the above `swap` call`.\n+                // `Ordering::Acquire` must be used for the above `swap` call.\n             }\n             _ => unsafe { hint::unreachable_unchecked() },\n         }"}, {"sha": "68c9520cc9eb4fd40a989063c12a550a1fa38140", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -329,7 +329,7 @@ pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n // do so.  In 1003.1-2004 this was fixed.\n //\n // glibc's implementation did the flush, unsafely, before glibc commit\n-// 91e7cf982d01 `abort: Do not flush stdio streams [BZ #15436]' by Florian\n+// 91e7cf982d01 `abort: Do not flush stdio streams [BZ #15436]` by Florian\n // Weimer.  According to glibc's NEWS:\n //\n //    The abort function terminates the process immediately, without flushing"}, {"sha": "fc236b8027b67c54a58ee70cf514ef89f0b69246", "filename": "library/std/src/sys_common/net/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -6,7 +6,7 @@ fn no_lookup_host_duplicates() {\n     let mut addrs = HashMap::new();\n     let lh = match LookupHost::try_from((\"localhost\", 0)) {\n         Ok(lh) => lh,\n-        Err(e) => panic!(\"couldn't resolve `localhost': {e}\"),\n+        Err(e) => panic!(\"couldn't resolve `localhost`: {e}\"),\n     };\n     for sa in lh {\n         *addrs.entry(sa).or_insert(0) += 1;"}, {"sha": "bc588bdbb3ce623e47dfa409ba505d53c1c412fa", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -594,7 +594,7 @@ impl Wtf8 {\n     }\n \n     /// Returns the code point at `position` if it is in the ASCII range,\n-    /// or `b'\\xFF' otherwise.\n+    /// or `b'\\xFF'` otherwise.\n     ///\n     /// # Panics\n     ///"}, {"sha": "88d8e5fe97ad7168f92480340a21f189289f152f", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -204,7 +204,7 @@ fn make_owned_test(test: &&TestDescAndFn) -> TestDescAndFn {\n }\n \n /// Invoked when unit tests terminate. Returns `Result::Err` if the test is\n-/// considered a failure. By default, invokes `report() and checks for a `0`\n+/// considered a failure. By default, invokes `report()` and checks for a `0`\n /// result.\n pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     let code = result.report().to_i32();"}, {"sha": "eeeed3afcd30ca21eb5c84db001ef0103ab80dfd", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -89,7 +89,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n // FIXME: The `#[link]` attributes on `extern \"C\"` block marks those symbols declared in\n // the block are reexported in dylib build of std. This is needed when build rustc with\n-// feature `llvm-libunwind', as no other cdylib will provided those _Unwind_* symbols.\n+// feature `llvm-libunwind`, as no other cdylib will provided those _Unwind_* symbols.\n // However the `link` attribute is duplicated multiple times and does not just export symbol,\n // a better way to manually export symbol would be another attribute like `#[export]`.\n // See the logic in function rustc_codegen_ssa::src::back::exported_symbols, module"}, {"sha": "cbe32920a7458cab76659a2d1de8b92048757fa5", "filename": "src/ci/pgo.sh", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/44cfafe2fafe816395d3acc434663a45d5178c41/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/44cfafe2fafe816395d3acc434663a45d5178c41/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=44cfafe2fafe816395d3acc434663a45d5178c41", "patch": "@@ -1,230 +0,0 @@\n-#!/bin/bash\n-# ignore-tidy-linelength\n-\n-set -euxo pipefail\n-\n-ci_dir=`cd $(dirname $0) && pwd`\n-source \"$ci_dir/shared.sh\"\n-\n-# The root checkout, where the source is located\n-CHECKOUT=/checkout\n-\n-DOWNLOADED_LLVM=/rustroot\n-\n-# The main directory where the build occurs, which can be different between linux and windows\n-BUILD_ROOT=$CHECKOUT/obj\n-\n-if isWindows; then\n-    CHECKOUT=$(pwd)\n-    DOWNLOADED_LLVM=$CHECKOUT/citools/clang-rust\n-    BUILD_ROOT=$CHECKOUT\n-fi\n-\n-# The various build artifacts used in other commands: to launch rustc builds, build the perf\n-# collector, and run benchmarks to gather profiling data\n-BUILD_ARTIFACTS=$BUILD_ROOT/build/$PGO_HOST\n-RUSTC_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/rustc\n-CARGO_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/cargo\n-RUSTC_STAGE_2=$BUILD_ARTIFACTS/stage2/bin/rustc\n-\n-# Windows needs these to have the .exe extension\n-if isWindows; then\n-    RUSTC_STAGE_0=\"${RUSTC_STAGE_0}.exe\"\n-    CARGO_STAGE_0=\"${CARGO_STAGE_0}.exe\"\n-    RUSTC_STAGE_2=\"${RUSTC_STAGE_2}.exe\"\n-fi\n-\n-# Make sure we have a temporary PGO work folder\n-PGO_TMP=/tmp/tmp-pgo\n-mkdir -p $PGO_TMP\n-rm -rf $PGO_TMP/*\n-\n-RUSTC_PERF=$PGO_TMP/rustc-perf\n-\n-# Compile several crates to gather execution PGO profiles.\n-# Arg0 => profiles (Debug, Opt)\n-# Arg1 => scenarios (Full, IncrFull, All)\n-# Arg2 => crates (syn, cargo, ...)\n-gather_profiles () {\n-  cd $BUILD_ROOT\n-\n-  # Compile libcore, both in opt-level=0 and opt-level=3\n-  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n-      --edition=2021 --crate-type=lib $CHECKOUT/library/core/src/lib.rs \\\n-      --out-dir $PGO_TMP\n-  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n-      --edition=2021 --crate-type=lib -Copt-level=3 $CHECKOUT/library/core/src/lib.rs \\\n-      --out-dir $PGO_TMP\n-\n-  cd $RUSTC_PERF\n-\n-  # Run rustc-perf benchmarks\n-  # Benchmark using profile_local with eprintln, which essentially just means\n-  # don't actually benchmark -- just make sure we run rustc a bunch of times.\n-  RUST_LOG=collector=debug \\\n-  RUSTC=$RUSTC_STAGE_0 \\\n-  RUSTC_BOOTSTRAP=1 \\\n-  $CARGO_STAGE_0 run -p collector --bin collector -- \\\n-      profile_local \\\n-      eprintln \\\n-      $RUSTC_STAGE_2 \\\n-      --id Test \\\n-      --profiles $1 \\\n-      --cargo $CARGO_STAGE_0 \\\n-      --scenarios $2 \\\n-      --include $3\n-\n-  cd $BUILD_ROOT\n-}\n-\n-# This path has to be absolute\n-LLVM_PROFILE_DIRECTORY_ROOT=$PGO_TMP/llvm-pgo\n-\n-# We collect LLVM profiling information and rustc profiling information in\n-# separate phases. This increases build time -- though not by a huge amount --\n-# but prevents any problems from arising due to different profiling runtimes\n-# being simultaneously linked in.\n-# LLVM IR PGO does not respect LLVM_PROFILE_FILE, so we have to set the profiling file\n-# path through our custom environment variable. We include the PID in the directory path\n-# to avoid updates to profile files being lost because of race conditions.\n-LLVM_PROFILE_DIR=${LLVM_PROFILE_DIRECTORY_ROOT}/prof-%p python3 $CHECKOUT/x.py build \\\n-    --target=$PGO_HOST \\\n-    --host=$PGO_HOST \\\n-    --stage 2 library/std \\\n-    --llvm-profile-generate\n-\n-# Compile rustc-perf:\n-# - get the expected commit source code: on linux, the Dockerfile downloads a source archive before\n-# running this script. On Windows, we do that here.\n-if isLinux; then\n-    cp -r /tmp/rustc-perf $RUSTC_PERF\n-    chown -R $(whoami): $RUSTC_PERF\n-else\n-    # rustc-perf version from 2022-07-22\n-    PERF_COMMIT=3c253134664fdcba862c539d37f0de18557a9a4c\n-    retry curl -LS -o $PGO_TMP/perf.zip \\\n-        https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n-        cd $PGO_TMP && unzip -q perf.zip && \\\n-        mv rustc-perf-$PERF_COMMIT $RUSTC_PERF && \\\n-        rm perf.zip\n-fi\n-\n-# - build rustc-perf's collector ahead of time, which is needed to make sure the rustc-fake binary\n-# used by the collector is present.\n-cd $RUSTC_PERF\n-\n-RUSTC=$RUSTC_STAGE_0 \\\n-RUSTC_BOOTSTRAP=1 \\\n-$CARGO_STAGE_0 build -p collector\n-\n-# Here we're profiling LLVM, so we only care about `Debug` and `Opt`, because we want to stress\n-# codegen. We also profile some of the most prolific crates.\n-gather_profiles \"Debug,Opt\" \"Full\" \\\n-    \"syn-1.0.89,cargo-0.60.0,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n-\n-LLVM_PROFILE_MERGED_FILE=$PGO_TMP/llvm-pgo.profdata\n-\n-# Merge the profile data we gathered for LLVM\n-# Note that this uses the profdata from the clang we used to build LLVM,\n-# which likely has a different version than our in-tree clang.\n-$DOWNLOADED_LLVM/bin/llvm-profdata merge -o ${LLVM_PROFILE_MERGED_FILE} ${LLVM_PROFILE_DIRECTORY_ROOT}\n-\n-echo \"LLVM PGO statistics\"\n-du -sh ${LLVM_PROFILE_MERGED_FILE}\n-du -sh ${LLVM_PROFILE_DIRECTORY_ROOT}\n-echo \"Profile file count\"\n-find ${LLVM_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n-\n-# We don't need the individual .profraw files now that they have been merged into a final .profdata\n-rm -r $LLVM_PROFILE_DIRECTORY_ROOT\n-\n-# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n-# change (or any other llvm-related options); so just clear out the relevant\n-# directories ourselves.\n-rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-# Okay, LLVM profiling is done, switch to rustc PGO.\n-\n-# The path has to be absolute\n-RUSTC_PROFILE_DIRECTORY_ROOT=$PGO_TMP/rustc-pgo\n-\n-python3 $CHECKOUT/x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n-    --stage 2 library/std \\\n-    --rust-profile-generate=${RUSTC_PROFILE_DIRECTORY_ROOT}\n-\n-# Here we're profiling the `rustc` frontend, so we also include `Check`.\n-# The benchmark set includes various stress tests that put the frontend under pressure.\n-if isLinux; then\n-    # The profile data is written into a single filepath that is being repeatedly merged when each\n-    # rustc invocation ends. Empirically, this can result in some profiling data being lost. That's\n-    # why we override the profile path to include the PID. This will produce many more profiling\n-    # files, but the resulting profile will produce a slightly faster rustc binary.\n-    LLVM_PROFILE_FILE=${RUSTC_PROFILE_DIRECTORY_ROOT}/default_%m_%p.profraw gather_profiles \\\n-        \"Check,Debug,Opt\" \"All\" \\\n-        \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n-else\n-    # On windows, we don't do that yet (because it generates a lot of data, hitting disk space\n-    # limits on the builder), and use the default profraw merging behavior.\n-    gather_profiles \\\n-        \"Check,Debug,Opt\" \"All\" \\\n-        \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n-fi\n-\n-RUSTC_PROFILE_MERGED_FILE=$PGO_TMP/rustc-pgo.profdata\n-\n-# Merge the profile data we gathered\n-$BUILD_ARTIFACTS/llvm/bin/llvm-profdata \\\n-    merge -o ${RUSTC_PROFILE_MERGED_FILE} ${RUSTC_PROFILE_DIRECTORY_ROOT}\n-\n-echo \"Rustc PGO statistics\"\n-du -sh ${RUSTC_PROFILE_MERGED_FILE}\n-du -sh ${RUSTC_PROFILE_DIRECTORY_ROOT}\n-echo \"Profile file count\"\n-find ${RUSTC_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n-\n-# We don't need the individual .profraw files now that they have been merged into a final .profdata\n-rm -r $RUSTC_PROFILE_DIRECTORY_ROOT\n-\n-# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n-# change (or any other llvm-related options); so just clear out the relevant\n-# directories ourselves.\n-rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-if isLinux; then\n-  # Gather BOLT profile (BOLT is currently only available on Linux)\n-  python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n-      --stage 2 library/std \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n-      --llvm-bolt-profile-generate\n-\n-  BOLT_PROFILE_MERGED_FILE=/tmp/bolt.profdata\n-\n-  # Here we're profiling Bolt.\n-  gather_profiles \"Check,Debug,Opt\" \"Full\" \\\n-  \"syn-1.0.89,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n-\n-  merge-fdata /tmp/prof.fdata* > ${BOLT_PROFILE_MERGED_FILE}\n-\n-  echo \"BOLT statistics\"\n-  du -sh /tmp/prof.fdata*\n-  du -sh ${BOLT_PROFILE_MERGED_FILE}\n-  echo \"Profile file count\"\n-  find /tmp/prof.fdata* -type f | wc -l\n-\n-  rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-  # This produces the actual final set of artifacts, using both the LLVM and rustc\n-  # collected profiling data.\n-  $@ \\\n-      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n-      --llvm-bolt-profile-use=${BOLT_PROFILE_MERGED_FILE}\n-else\n-  $@ \\\n-      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE}\n-fi\n-\n-echo \"Rustc binary size\"\n-ls -la ./build/$PGO_HOST/stage2/bin\n-ls -la ./build/$PGO_HOST/stage2/lib"}, {"sha": "9eafa27e2b7c8b27ec69a82bd4185086a469c070", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -13,6 +13,8 @@ for targets at each tier, see the [Target Tier Policy](target-tier-policy.md).\n Targets are identified by their \"target triple\" which is the string to inform\n the compiler what kind of output should be produced.\n \n+Component availability is tracked [here](https://rust-lang.github.io/rustup-components-history/).\n+\n ## Tier 1 with Host Tools\n \n Tier 1 targets can be thought of as \"guaranteed to work\". The Rust project"}, {"sha": "c7f10afaccccd09af32d124e6a665365c956ea61", "filename": "src/doc/unstable-book/src/compiler-flags/export-executable-symbols.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fexport-executable-symbols.md", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fexport-executable-symbols.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fexport-executable-symbols.md?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -0,0 +1,43 @@\n+# `export-executable-symbols`\n+\n+The tracking issue for this feature is: [#84161](https://github.com/rust-lang/rust/issues/84161).\n+\n+------------------------\n+\n+The `-Zexport-executable-symbols` compiler flag makes `rustc` export symbols from executables. The resulting binary is runnable, but can also be used as a dynamic library. This is useful for interoperating with programs written in other languages, in particular languages with a runtime like Java or Lua.\n+\n+For example on windows:\n+```rust\n+#[no_mangle]\n+fn my_function() -> usize {\n+    return 42;\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+A standard `cargo build` will produce a `.exe` without an export directory. When the `export-executable-symbols` flag is added\n+\n+```Bash\n+export RUSTFLAGS=\"-Zexport-executable-symbols\"\n+cargo build\n+```\n+\n+the binary has an export directory with the functions:\n+\n+```plain\n+The Export Tables (interpreted .edata section contents)\n+\n+...\n+\n+[Ordinal/Name Pointer] Table\n+    [   0] my_function\n+    [   1] main\n+```\n+(the output of `objdump -x` on the binary)\n+\n+Please note that the `#[no_mangle]` attribute is required. Without it, the symbol is not exported.\n+\n+The equivalent of this flag in C and C++ compilers is the `__declspec(dllexport)` annotation or the `-rdynamic` linker flag."}, {"sha": "5ae1d78a92b785509032aaace5b39dd2431d43db", "filename": "tests/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -17,8 +17,9 @@ error[E0700]: hidden type for `impl Trait<'a>` captures lifetime that does not a\n   --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |  ____________________________________--__________________________________________^\n-   | |                                    |\n+   |  ____________________________________--___________________________--------------_^\n+   | |                                    |                            |\n+   | |                                    |                            opaque type defined here\n    | |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n LL | |\n LL | |     (a, b)"}, {"sha": "bc8f559fdee9e5a255e99e332b2251b939e31702", "filename": "tests/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not a\n   --> $DIR/hidden-lifetimes.rs:29:5\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n-   |                 -- hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n+   |                 --                                   -------------- opaque type defined here\n+   |                 |\n+   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n LL |     x\n    |     ^\n    |\n@@ -15,7 +17,9 @@ error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not a\n   --> $DIR/hidden-lifetimes.rs:46:5\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n-   |                        -- hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n+   |                        --                                            -------------- opaque type defined here\n+   |                        |\n+   |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n LL |     x\n    |     ^\n    |"}, {"sha": "d56e1273f241007954e27da3e3a408f9f767f296", "filename": "tests/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -1,6 +1,8 @@\n error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n   --> $DIR/impl-fn-hrtb-bounds-2.rs:5:9\n    |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug {\n+   |                           ---------- opaque type defined here\n LL |     |x| x\n    |     --- ^\n    |     |"}, {"sha": "5b0b1cc5e426f605a8ae8cb8030f5d0598a8e5fe", "filename": "tests/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -1,6 +1,9 @@\n error[E0700]: hidden type for `E<'b, 'c>` captures lifetime that does not appear in bounds\n   --> $DIR/error-handling-2.rs:22:5\n    |\n+LL | type E<'a, 'b> = impl Sized;\n+   |                  ---------- opaque type defined here\n+LL |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- hidden type `*mut &'a i32` captures the lifetime `'a` as defined here\n ..."}, {"sha": "68ac22a05f4dd8368be1670380f0390c4cb316cb", "filename": "tests/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'d, 'e>` captures lifetime that does n\n   --> $DIR/ordinary-bounds-unrelated.rs:28:33\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n+   |                     --                                                   ------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n    |                                 ^"}, {"sha": "493a9e66eaf868dccc0da6cc9b76cc6fe505aeda", "filename": "tests/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'a, 'b>` captures lifetime that does n\n   --> $DIR/ordinary-bounds-unsuited.rs:31:33\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n+   |                     --                                       ------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n    |                                 ^"}, {"sha": "55e3cd95064baa26a4e054b15047180b6ac66126", "filename": "tests/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----                 ^\n-   |              |\n+   |              ----     ---------   ^\n+   |              |        |\n+   |              |        opaque type defined here\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Copy` captures `'_`, you can add an explicit `'_` lifetime bound\n@@ -15,8 +16,9 @@ error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             --                             ^\n-   |             |\n+   |             --                 ---------   ^\n+   |             |                  |\n+   |             |                  opaque type defined here\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n help: to declare that `impl Copy` captures `'a`, you can add an explicit `'a` lifetime bound\n@@ -100,7 +102,9 @@ error[E0700]: hidden type for `impl Fn(&'a u32)` captures lifetime that does not\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:13]` captures the lifetime `'b` as defined here\n+   |                              --                             ---------------- opaque type defined here\n+   |                              |\n+   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:13]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "907822ebbc3ab67ddbc798fb640d943ccf55019a", "filename": "tests/ui/impl-trait/nested-return-type4.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Future<Output = impl Sized>` captures lifeti\n   --> $DIR/nested-return-type4.rs:4:5\n    |\n LL | fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {\n-   |         -- hidden type `[async block@$DIR/nested-return-type4.rs:4:5: 4:31]` captures the lifetime `'s` as defined here\n+   |         --                     --------------------------------------------- opaque type defined here\n+   |         |\n+   |         hidden type `[async block@$DIR/nested-return-type4.rs:4:5: 4:31]` captures the lifetime `'s` as defined here\n LL |     async move { let _s = s; }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "e4556bc21a7f9af07a0b843df217094b852b1b5a", "filename": "tests/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'y>` captures lifetime that does not a\n   --> $DIR/region-escape-via-bound.rs:17:5\n    |\n LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n-   |        -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n+   |        --                           -------------- opaque type defined here\n+   |        |\n+   |        hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n ...\n LL |     x\n    |     ^"}, {"sha": "488cb821c10512f6bd1384cc1a4e9ed387d0cee2", "filename": "tests/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n+   |                         -----     ----------------------- opaque type defined here\n+   |                         |\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -15,7 +17,9 @@ error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that\n   --> $DIR/static-return-lifetime-infered.rs:11:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:30]>` captures the lifetime `'a` as defined here\n+   |                    --               ----------------------- opaque type defined here\n+   |                    |\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:30]>` captures the lifetime `'a` as defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "b514db461b478c75da107c95c6e939aeb5707bda", "filename": "tests/ui/lifetimes/issue-105227.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Flifetimes%2Fissue-105227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Flifetimes%2Fissue-105227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105227.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n   --> $DIR/issue-105227.rs:7:5\n    |\n LL | fn chars0(v :(& str, &str)) -> impl Iterator<Item = char> {\n-   |               ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+   |               -----            -------------------------- opaque type defined here\n+   |               |\n+   |               hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n LL |\n LL |     v.0.chars().chain(v.1.chars())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,7 +18,9 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n   --> $DIR/issue-105227.rs:13:5\n    |\n LL | fn chars1(v0 : & str, v1 : &str) -> impl Iterator<Item = char> {\n-   |                ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+   |                -----                -------------------------- opaque type defined here\n+   |                |\n+   |                hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n LL |\n LL |     v0.chars().chain(v1.chars())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +35,10 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n    |\n LL | fn chars2<'b>(v0 : &str, v1 : &'_ str, v2 : &'b str) ->\n    |                    ---- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n-...\n+LL |\n+LL |     (impl Iterator<Item = char>, &'b str)\n+   |      -------------------------- opaque type defined here\n+LL | {\n LL |     (v0.chars().chain(v1.chars()), v2)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "4d3a901531614078f60b5c04901d0162cd8a1a1c", "filename": "tests/ui/nll/issue-73159-rpit-static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -4,6 +4,7 @@ error[E0700]: hidden type for `impl Iterator<Item = u8>` captures lifetime that\n LL | impl<'a> Foo<'a> {\n    |      -- hidden type `Copied<std::slice::Iter<'a, u8>>` captures the lifetime `'a` as defined here\n LL |     fn make_it(&self) -> impl Iterator<Item = u8> {\n+   |                          ------------------------ opaque type defined here\n LL |         self.0.iter().copied()\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "e0d476a33b23bb61b922ae5b33d1be2f16cb7723", "filename": "tests/ui/nll/member-constraints/min-choice-reject-ambiguous.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -24,7 +24,9 @@ error[E0700]: hidden type for `impl Cap<'b> + Cap<'c>` captures lifetime that do\n   --> $DIR/min-choice-reject-ambiguous.rs:39:5\n    |\n LL | fn test_ambiguous<'a, 'b, 'c>(s: &'a u8) -> impl Cap<'b> + Cap<'c>\n-   |                   -- hidden type `&'a u8` captures the lifetime `'a` as defined here\n+   |                   --                        ---------------------- opaque type defined here\n+   |                   |\n+   |                   hidden type `&'a u8` captures the lifetime `'a` as defined here\n ...\n LL |     s\n    |     ^"}, {"sha": "483b5822b9d35af3e72cadb5fcb329e70e61037b", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-fail.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>`\n   --> $DIR/nested-impl-trait-fail.rs:17:5\n    |\n LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n-   |                     -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n+   |                     --                        ------------------------------------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n ...\n LL |     [a]\n    |     ^^^\n@@ -20,7 +22,9 @@ error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that do\n   --> $DIR/nested-impl-trait-fail.rs:17:5\n    |\n LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n-   |                     -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n+   |                     --                                                 ---------------------- opaque type defined here\n+   |                     |\n+   |                     hidden type `&'s u8` captures the lifetime `'s` as defined here\n ...\n LL |     [a]\n    |     ^^^\n@@ -40,6 +44,8 @@ error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>`\n LL | fn fail_late_bound<'s, 'a, 'b>(\n    |                    -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n ...\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> {\n+   |      ------------------------------------------------ opaque type defined here\n LL |     [a]\n    |     ^^^\n    |\n@@ -58,6 +64,8 @@ error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that do\n LL | fn fail_late_bound<'s, 'a, 'b>(\n    |                    -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n ...\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> {\n+   |                               ---------------------- opaque type defined here\n LL |     [a]\n    |     ^^^\n    |"}, {"sha": "7fcb68252cfdb3f4d47db40e35f23921903fa826", "filename": "tests/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::fo\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n+   |                  --     ------------ opaque type defined here\n+   |                  |\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |"}, {"sha": "944cdc5f55de69b680531b9ffddc63faf9ba2930", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Clone` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -----                 ^^^^^^^^\n-   |                          |\n+   |                          -----      ---------- ^^^^^^^^\n+   |                          |          |\n+   |                          |          opaque type defined here\n    |                          hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound"}, {"sha": "8a9b397ca7005fab44b21cde65e0a7e5a8067b59", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Clone` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                    -----                   ^^^^\n-   |                    |\n+   |                    -----      ----------   ^^^^\n+   |                    |          |\n+   |                    |          opaque type defined here\n    |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound"}, {"sha": "93cfa60b5ab89d9fc31c676e68cf8e9c128b10f7", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -10,7 +10,9 @@ error[E0700]: hidden type for `impl FnOnce()` captures lifetime that does not ap\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 19:12]` captures the anonymous lifetime defined here\n+   |                            ------     ------------- opaque type defined here\n+   |                            |\n+   |                            hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 19:12]` captures the anonymous lifetime defined here\n ...\n LL | /     move || {\n LL | |"}, {"sha": "e52d5f9de69ed0e10bc841e30797b57388d00c4b", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not app\n   --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n    |\n LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n-   |         -- hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n+   |         --                     ------------ opaque type defined here\n+   |         |\n+   |         hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n LL |     <&'a mut i32 as Callable>::call(y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "d666e668d365570b09ca450be84f030da4446fb0", "filename": "tests/ui/type-alias-impl-trait/missing_lifetime_bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr?ref=70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "patch": "@@ -1,6 +1,8 @@\n error[E0700]: hidden type for `Opaque<'a, T>` captures lifetime that does not appear in bounds\n   --> $DIR/missing_lifetime_bound.rs:4:47\n    |\n+LL | type Opaque<'a, T> = impl Sized;\n+   |                      ---------- opaque type defined here\n LL | fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n    |             --                                ^\n    |             |"}]}