{"sha": "e5abe669831a59c48faa85e88ed8859b6dc63f49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YWJlNjY5ODMxYTU5YzQ4ZmFhODVlODhlZDg4NTliNmRjNjNmNDk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-27T07:03:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-27T07:03:37Z"}, "message": "std: reduce the generic code instantiated by fail!().\n\nThis splits the vast majority of the code path taken by\n`fail!()` (`begin_unwind`) into a separate non-generic inline(never)\nfunction, so that uses of `fail!()` only monomorphise a small amount of\ncode, reducing code bloat and making very small crates compile faster.", "tree": {"sha": "45752742dab78d5dc890d267d171ae4f1f7ba891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45752742dab78d5dc890d267d171ae4f1f7ba891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5abe669831a59c48faa85e88ed8859b6dc63f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5abe669831a59c48faa85e88ed8859b6dc63f49", "html_url": "https://github.com/rust-lang/rust/commit/e5abe669831a59c48faa85e88ed8859b6dc63f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5abe669831a59c48faa85e88ed8859b6dc63f49/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0119e46204d1bc8937b8c3fb10e3f41a7ebb7733", "url": "https://api.github.com/repos/rust-lang/rust/commits/0119e46204d1bc8937b8c3fb10e3f41a7ebb7733", "html_url": "https://github.com/rust-lang/rust/commit/0119e46204d1bc8937b8c3fb10e3f41a7ebb7733"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "b8b004b1c3b7047df6526cc6d48b1b9a204fca50", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5abe669831a59c48faa85e88ed8859b6dc63f49/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5abe669831a59c48faa85e88ed8859b6dc63f49/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=e5abe669831a59c48faa85e88ed8859b6dc63f49", "patch": "@@ -383,16 +383,31 @@ pub fn begin_unwind_raw(msg: *u8, file: *u8, line: uint) -> ! {\n }\n \n /// This is the entry point of unwinding for fail!() and assert!().\n-#[inline(never)] #[cold] // this is the slow path, please never inline this\n+#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n-    // Note that this should be the only allocation performed in this block.\n+    // Note that this should be the only allocation performed in this code path.\n     // Currently this means that fail!() on OOM will invoke this code path,\n     // but then again we're not really ready for failing on OOM anyway. If\n     // we do start doing this, then we should propagate this allocation to\n     // be performed in the parent of this task instead of the task that's\n     // failing.\n-    let msg = ~msg as ~Any;\n \n+    // see below for why we do the `Any` coercion here.\n+    begin_unwind_inner(~msg, file, line)\n+}\n+\n+\n+/// The core of the unwinding.\n+///\n+/// This is non-generic to avoid instantiation bloat in other crates\n+/// (which makes compilation of small crates noticably slower). (Note:\n+/// we need the `Any` object anyway, we're not just creating it to\n+/// avoid being generic.)\n+///\n+/// Do this split took the LLVM IR line counts of `fn main() { fail!()\n+/// }` from ~1900/3700 (-O/no opts) to 180/590.\n+#[inline(never)] #[cold] // this is the slow path, please never inline this\n+fn begin_unwind_inner(msg: ~Any, file: &'static str, line: uint) -> ! {\n     let mut task;\n     {\n         let msg_s = match msg.as_ref::<&'static str>() {"}]}