{"sha": "0192fa4786db80d2c9888af98e7ceec47d327887", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTJmYTQ3ODZkYjgwZDJjOTg4OGFmOThlN2NlZWM0N2QzMjc4ODc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-02T12:08:09Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-28T03:11:17Z"}, "message": "Make the default stage dependent on the subcommand\n\n ### x.py build/test: stage 1\n\nI've seen very few people who actually use full stage 2 builds on purpose. These compile rustc and libstd twice and don't give you much more information than a stage 1 build (except in rare cases like https://github.com/rust-lang/rust/pull/68692#discussion_r376392145). For new contributors, this makes the build process even more daunting than it already is. As long as CI is changed to use `--stage 2` I see no downside here.\n\n ### x.py bench/dist/install: stage 2\n\nThese commands have to do with a finished, optimized version of rustc. It seems very rare to want to use these with a stage 1 build.\n\n ### x.py doc: stage 0\n\nNormally when you document things you're just fixing a typo. In this case there is no need to build the whole rust compiler, since the documentation will usually be the same when generated with the beta compiler or with stage 1.\n\nNote that for this release cycle only there will be a significant different between stage0 and stage1 docs: https://github.com/rust-lang/rust/pull/73101. However most of the time this will not be the case.", "tree": {"sha": "b0cf61e0f0cd1ea9913cf1e58573905489b47d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0cf61e0f0cd1ea9913cf1e58573905489b47d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0192fa4786db80d2c9888af98e7ceec47d327887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0192fa4786db80d2c9888af98e7ceec47d327887", "html_url": "https://github.com/rust-lang/rust/commit/0192fa4786db80d2c9888af98e7ceec47d327887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0192fa4786db80d2c9888af98e7ceec47d327887/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34a1b0c1b4b22cc61b5956c07d89517bf278af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34a1b0c1b4b22cc61b5956c07d89517bf278af8", "html_url": "https://github.com/rust-lang/rust/commit/d34a1b0c1b4b22cc61b5956c07d89517bf278af8"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "5c25cfea9f268c6d74076bef647fce2847cc1637", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0192fa4786db80d2c9888af98e7ceec47d327887/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0192fa4786db80d2c9888af98e7ceec47d327887/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0192fa4786db80d2c9888af98e7ceec47d327887", "patch": "@@ -527,9 +527,22 @@ impl<'a> Builder<'a> {\n     }\n \n     fn new_internal(build: &Build, kind: Kind, paths: Vec<PathBuf>) -> Builder<'_> {\n+        let top_stage = if let Some(explicit_stage) = build.config.stage {\n+            explicit_stage\n+        } else {\n+            // See https://github.com/rust-lang/compiler-team/issues/326\n+            match kind {\n+                Kind::Doc => 0,\n+                Kind::Build | Kind::Test => 1,\n+                Kind::Bench | Kind::Dist | Kind::Install => 2,\n+                // These are all bootstrap tools, which don't depend on the compiler.\n+                // The stage we pass shouldn't matter, but use 0 just in case.\n+                Kind::Check | Kind::Clippy | Kind::Fix | Kind::Run | Kind::Format => 0,\n+            }\n+        };\n         Builder {\n             build,\n-            top_stage: build.config.stage.unwrap_or(2),\n+            top_stage,\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),"}]}