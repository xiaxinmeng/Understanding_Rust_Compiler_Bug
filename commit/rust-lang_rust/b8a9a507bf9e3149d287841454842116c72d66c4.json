{"sha": "b8a9a507bf9e3149d287841454842116c72d66c4", "node_id": "C_kwDOAAsO6NoAKGI4YTlhNTA3YmY5ZTMxNDlkMjg3ODQxNDU0ODQyMTE2YzcyZDY2YzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T11:48:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T11:48:30Z"}, "message": "Auto merge of #9617 - llogiq:cast-nan-to-int, r=Alexendoo\n\nadd `cast-nan-to-int` lint\n\nThis fixes #371.\n\nr? `@Alexendoo`\n\n---\n\nchangelog: add [`cast-nan-to-int`] lint", "tree": {"sha": "a87ef0fa078583b976d3d3b8b77fb436749f59de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87ef0fa078583b976d3d3b8b77fb436749f59de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a9a507bf9e3149d287841454842116c72d66c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a9a507bf9e3149d287841454842116c72d66c4", "html_url": "https://github.com/rust-lang/rust/commit/b8a9a507bf9e3149d287841454842116c72d66c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a9a507bf9e3149d287841454842116c72d66c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6354d1275d374f9cf77fdbb2f02795a594dc5837", "url": "https://api.github.com/repos/rust-lang/rust/commits/6354d1275d374f9cf77fdbb2f02795a594dc5837", "html_url": "https://github.com/rust-lang/rust/commit/6354d1275d374f9cf77fdbb2f02795a594dc5837"}, {"sha": "e4c80f2bba2e365968c529af2c622c09ee01e26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c80f2bba2e365968c529af2c622c09ee01e26a", "html_url": "https://github.com/rust-lang/rust/commit/e4c80f2bba2e365968c529af2c622c09ee01e26a"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "f593966c0459449ef7fb83cae4404b2bf49c6874", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -3773,6 +3773,7 @@ Released 2018-09-13\n [`cast_enum_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_constructor\n [`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n+[`cast_nan_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_nan_to_int\n [`cast_possible_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n [`cast_precision_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss"}, {"sha": "322dc41b3a197dd4301a45c355f193f466d9be61", "filename": "clippy_lints/src/casts/cast_nan_to_int.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -0,0 +1,28 @@\n+use super::CAST_NAN_TO_INT;\n+\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, from_ty: Ty<'_>, to_ty: Ty<'_>) {\n+    if from_ty.is_floating_point() && to_ty.is_integral() && is_known_nan(cx, cast_expr) {\n+        span_lint_and_note(\n+            cx,\n+            CAST_NAN_TO_INT,\n+            expr.span,\n+            &format!(\"casting a known NaN to {to_ty}\"),\n+            None,\n+            \"this always evaluates to 0\",\n+        );\n+    }\n+}\n+\n+fn is_known_nan(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    match constant(cx, cx.typeck_results(), e) {\n+        Some((Constant::F64(n), _)) => n.is_nan(),\n+        Some((Constant::F32(n), _)) => n.is_nan(),\n+        _ => false,\n+    }\n+}"}, {"sha": "b72c4c772f1ce24d655a3d55ddf8d188d28e24f8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -4,6 +4,7 @@ mod borrow_as_ptr;\n mod cast_abs_to_unsigned;\n mod cast_enum_constructor;\n mod cast_lossless;\n+mod cast_nan_to_int;\n mod cast_possible_truncation;\n mod cast_possible_wrap;\n mod cast_precision_loss;\n@@ -570,6 +571,7 @@ declare_clippy_lint! {\n     pedantic,\n     \"borrowing just to cast to a raw pointer\"\n }\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for a raw slice being cast to a slice pointer\n@@ -623,6 +625,28 @@ declare_clippy_lint! {\n     \"casting the result of the `&self`-taking `as_ptr` to a mutabe pointer\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for a known NaN float being cast to an integer\n+    ///\n+    /// ### Why is this bad?\n+    /// NaNs are cast into zero, so one could simply use this and make the\n+    /// code more readable. The lint could also hint at a programmer error.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let _: (0.0_f32 / 0.0) as u64;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let _: = 0_u64;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub CAST_NAN_TO_INT,\n+    suspicious,\n+    \"casting a known floating-point NaN into an integer\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -656,6 +680,7 @@ impl_lint_pass!(Casts => [\n     BORROW_AS_PTR,\n     CAST_SLICE_FROM_RAW_PARTS,\n     AS_PTR_CAST_MUT,\n+    CAST_NAN_TO_INT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -693,6 +718,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n                     cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n+                    cast_nan_to_int::check(cx, expr, cast_expr, cast_from, cast_to);\n                 }\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);"}, {"sha": "a2f54c74d72ed76ee39db73bc58bfd983ceee3ec", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -25,6 +25,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n+    LintId::of(casts::CAST_NAN_TO_INT),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n     LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),"}, {"sha": "de1253c8510a8ee83dd139676b0fdbcfc3974477", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -73,6 +73,7 @@ store.register_lints(&[\n     casts::CAST_ENUM_CONSTRUCTOR,\n     casts::CAST_ENUM_TRUNCATION,\n     casts::CAST_LOSSLESS,\n+    casts::CAST_NAN_TO_INT,\n     casts::CAST_POSSIBLE_TRUNCATION,\n     casts::CAST_POSSIBLE_WRAP,\n     casts::CAST_PRECISION_LOSS,"}, {"sha": "ef5cc9ad7f983ef47dd75827a7dedbcfadd9bab4", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -11,6 +11,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n+    LintId::of(casts::CAST_NAN_TO_INT),\n     LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(drop_forget_ref::DROP_NON_DROP),"}, {"sha": "41c31f91bca553565c67da8d6513ca33e3d991c0", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -61,6 +61,7 @@ docs! {\n     \"cast_enum_constructor\",\n     \"cast_enum_truncation\",\n     \"cast_lossless\",\n+    \"cast_nan_to_int\",\n     \"cast_possible_truncation\",\n     \"cast_possible_wrap\",\n     \"cast_precision_loss\","}, {"sha": "122f5da0c921883aed797ca3880a4c71daf5f867", "filename": "src/docs/cast_nan_to_int.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/src%2Fdocs%2Fcast_nan_to_int.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/src%2Fdocs%2Fcast_nan_to_int.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fcast_nan_to_int.txt?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -0,0 +1,15 @@\n+### What it does\n+Checks for a known NaN float being cast to an integer\n+\n+### Why is this bad?\n+NaNs are cast into zero, so one could simply use this and make the\n+code more readable. The lint could also hint at a programmer error.\n+\n+### Example\n+```\n+let _: (0.0_f32 / 0.0) as u64;\n+```\n+Use instead:\n+```\n+let _: = 0_u64;\n+```\n\\ No newline at end of file"}, {"sha": "287c5aa216bd3341245baa0f54606bce2a2df3ed", "filename": "tests/ui/cast_nan_to_int.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/tests%2Fui%2Fcast_nan_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/tests%2Fui%2Fcast_nan_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_nan_to_int.rs?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -0,0 +1,18 @@\n+#![warn(clippy::cast_nan_to_int)]\n+#![allow(clippy::eq_op)]\n+\n+fn main() {\n+    let _ = (0.0_f32 / -0.0) as usize;\n+    let _ = (f64::INFINITY * -0.0) as usize;\n+    let _ = (0.0 * f32::INFINITY) as usize;\n+\n+    let _ = (f64::INFINITY + f64::NEG_INFINITY) as usize;\n+    let _ = (f32::INFINITY - f32::INFINITY) as usize;\n+    let _ = (f32::INFINITY / f32::NEG_INFINITY) as usize;\n+\n+    // those won't be linted:\n+    let _ = (1.0_f32 / 0.0) as usize;\n+    let _ = (f32::INFINITY * f32::NEG_INFINITY) as usize;\n+    let _ = (f32::INFINITY - f32::NEG_INFINITY) as usize;\n+    let _ = (f64::INFINITY - 0.0) as usize;\n+}"}, {"sha": "3539be75a19db09d19bba2f96a637fe11c5c0b1c", "filename": "tests/ui/cast_nan_to_int.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b8a9a507bf9e3149d287841454842116c72d66c4/tests%2Fui%2Fcast_nan_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8a9a507bf9e3149d287841454842116c72d66c4/tests%2Fui%2Fcast_nan_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_nan_to_int.stderr?ref=b8a9a507bf9e3149d287841454842116c72d66c4", "patch": "@@ -0,0 +1,51 @@\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:5:13\n+   |\n+LL |     let _ = (0.0_f32 / -0.0) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+   = note: `-D clippy::cast-nan-to-int` implied by `-D warnings`\n+\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:6:13\n+   |\n+LL |     let _ = (f64::INFINITY * -0.0) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:7:13\n+   |\n+LL |     let _ = (0.0 * f32::INFINITY) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:9:13\n+   |\n+LL |     let _ = (f64::INFINITY + f64::NEG_INFINITY) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:10:13\n+   |\n+LL |     let _ = (f32::INFINITY - f32::INFINITY) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+\n+error: casting a known NaN to usize\n+  --> $DIR/cast_nan_to_int.rs:11:13\n+   |\n+LL |     let _ = (f32::INFINITY / f32::NEG_INFINITY) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this always evaluates to 0\n+\n+error: aborting due to 6 previous errors\n+"}]}