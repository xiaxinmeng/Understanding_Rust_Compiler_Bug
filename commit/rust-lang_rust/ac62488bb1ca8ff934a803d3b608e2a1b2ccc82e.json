{"sha": "ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjI0ODhiYjFjYThmZjkzNGE4MDNkM2I2MDhlMmExYjJjY2M4MmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T17:51:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T17:51:41Z"}, "message": "rustc: Introduce preferred type constructors, which will eventually precompute hashes and intern", "tree": {"sha": "47cda86aaf85f98081df56603b3ca456fd53c78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cda86aaf85f98081df56603b3ca456fd53c78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e", "html_url": "https://github.com/rust-lang/rust/commit/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "html_url": "https://github.com/rust-lang/rust/commit/c49735d7c48770f21d2fd5e1e92a41e78d1506d2"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "b0c28ba90274538cbc062dfacc79ff00ab96193c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=ac62488bb1ca8ff934a803d3b608e2a1b2ccc82e", "patch": "@@ -35,9 +35,15 @@ fn method_ty_to_fn_ty(method m) -> @ty.t {\n     ret plain_ty(ty_fn(m.proto, m.inputs, m.output));\n }\n \n+// Do not construct these manually. Soon we want to intern these, at which\n+// point this will break.\n+//\n+// TODO: It'd be really nice to be able to hide this definition from the\n+// outside world, to enforce the above invariant.\n+type t = rec(sty struct, option.t[str] cname);\n+\n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in front/ast.rs as well.\n-type t = rec(sty struct, option.t[str] cname);\n tag sty {\n     ty_nil;\n     ty_bool;\n@@ -99,6 +105,46 @@ type ty_param_count_and_ty = tup(uint, @t);\n type type_cache = hashmap[ast.def_id,ty_param_count_and_ty];\n \n \n+// Type constructors\n+\n+fn mk_nil() -> @t                        { ret plain_ty(ty_nil); }\n+fn mk_bool() -> @t                       { ret plain_ty(ty_bool); }\n+fn mk_int() -> @t                        { ret plain_ty(ty_int); }\n+fn mk_float() -> @t                      { ret plain_ty(ty_float); }\n+fn mk_uint() -> @t                       { ret plain_ty(ty_uint); }\n+fn mk_mach(util.common.ty_mach tm) -> @t { ret plain_ty(ty_machine(tm)); }\n+fn mk_char() -> @t                       { ret plain_ty(ty_char); }\n+fn mk_str() -> @t                        { ret plain_ty(ty_str); }\n+\n+fn mk_tag(ast.def_id did, vec[@t] tys) -> @t {\n+    ret plain_ty(ty_tag(did, tys));\n+}\n+\n+fn mk_box(mt tm) -> @t                   { ret plain_ty(ty_box(tm)); }\n+fn mk_vec(mt tm) -> @t                   { ret plain_ty(ty_vec(tm)); }\n+fn mk_port(@t ty) -> @t                  { ret plain_ty(ty_port(ty)); }\n+fn mk_chan(@t ty) -> @t                  { ret plain_ty(ty_chan(ty)); }\n+fn mk_task() -> @t                       { ret plain_ty(ty_task); }\n+fn mk_tup(vec[mt] tms) -> @t             { ret plain_ty(ty_tup(tms)); }\n+fn mk_rec(vec[field] fs) -> @t           { ret plain_ty(ty_rec(fs)); }\n+\n+fn mk_fn(ast.proto proto, vec[arg] args, @t ty) -> @t {\n+    ret plain_ty(ty_fn(proto, args, ty));\n+}\n+\n+fn mk_native_fn(ast.native_abi abi, vec[arg] args, @t ty) -> @t {\n+    ret plain_ty(ty_native_fn(abi, args, ty));\n+}\n+\n+fn mk_obj(vec[method] meths) -> @t       { ret plain_ty(ty_obj(meths)); }\n+fn mk_var(int v) -> @t                   { ret plain_ty(ty_var(v)); }\n+fn mk_local(ast.def_id did) -> @t        { ret plain_ty(ty_local(did)); }\n+fn mk_param(uint n) -> @t                { ret plain_ty(ty_param(n)); }\n+fn mk_bound_param(uint n) -> @t          { ret plain_ty(ty_bound_param(n)); }\n+fn mk_type() -> @t                       { ret plain_ty(ty_type); }\n+fn mk_native() -> @t                     { ret plain_ty(ty_native); }\n+\n+\n // Stringification\n \n fn path_to_str(&ast.path pth) -> str {"}]}