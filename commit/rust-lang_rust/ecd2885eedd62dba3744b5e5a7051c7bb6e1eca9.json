{"sha": "ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "node_id": "C_kwDOAAsO6NoAKGVjZDI4ODVlZWRkNjJkYmEzNzQ0YjVlNWE3MDUxYzdiYjZlMWVjYTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-19T06:56:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-19T06:56:47Z"}, "message": "Rollup merge of #100731 - notriddle:notriddle/deref-methods-1, r=jsha\n\nrustdoc: count deref and non-deref as same set of used methods\n\nFixes #100679", "tree": {"sha": "9eae3d73e1c14205d92ccc335008413b58fe7863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eae3d73e1c14205d92ccc335008413b58fe7863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/zQvCRBK7hj4Ov3rIwAAkE8IAEXgC8syh/+X9V7S+AgbJgi/\no+BZoMV5eVw+YHid78B0SGV7eZPGHDY3LPhTPvTxh7rtfdXcD3l4B2tV6ShncwJi\nnFVCHdEmFKtGD6BjhIonkMPgEXnHHBGGYMCGBzdfewFWerrwScsOH4TRK/rMTIgr\n1NRsooxvgSu27ae7NIwAv9adslE9Lk25pN0O1Emvojo9/FNl4dpODW+6kL8P00Ho\nGy8SKeg+1PILYUH+sUJK7S4TQhixDWmNDXiCs8Flk9fS7ehub96ZUh/G735xLOUo\nGUds6qMAsVVOHnIXF46E+QSBfWXLhH2bdCuKHZyc3nzR1YF6BktQ+elfF2ri2D0=\n=Pi/j\n-----END PGP SIGNATURE-----\n", "payload": "tree 9eae3d73e1c14205d92ccc335008413b58fe7863\nparent 30e65cea07deacff8ab23388cf8ddf5e8b3caaaf\nparent 748c6066551b2916726e0ec25b69120bb1c63b11\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660892207 +0530\ncommitter GitHub <noreply@github.com> 1660892207 +0530\n\nRollup merge of #100731 - notriddle:notriddle/deref-methods-1, r=jsha\n\nrustdoc: count deref and non-deref as same set of used methods\n\nFixes #100679\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "html_url": "https://github.com/rust-lang/rust/commit/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e65cea07deacff8ab23388cf8ddf5e8b3caaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e65cea07deacff8ab23388cf8ddf5e8b3caaaf", "html_url": "https://github.com/rust-lang/rust/commit/30e65cea07deacff8ab23388cf8ddf5e8b3caaaf"}, {"sha": "748c6066551b2916726e0ec25b69120bb1c63b11", "url": "https://api.github.com/repos/rust-lang/rust/commits/748c6066551b2916726e0ec25b69120bb1c63b11", "html_url": "https://github.com/rust-lang/rust/commit/748c6066551b2916726e0ec25b69120bb1c63b11"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "a8e32e84cbcbd9402469b8da380ff06dae8fa1d2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "patch": "@@ -1985,7 +1985,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             {\n                 let mut derefs = FxHashSet::default();\n                 derefs.insert(did);\n-                sidebar_deref_methods(cx, out, impl_, v, &mut derefs);\n+                sidebar_deref_methods(cx, out, impl_, v, &mut derefs, &mut used_links);\n             }\n \n             let format_impls = |impls: Vec<&Impl>, id_map: &mut IdMap| {\n@@ -2057,6 +2057,7 @@ fn sidebar_deref_methods(\n     impl_: &Impl,\n     v: &[Impl],\n     derefs: &mut FxHashSet<DefId>,\n+    used_links: &mut FxHashSet<String>,\n ) {\n     let c = cx.cache();\n \n@@ -2089,13 +2090,10 @@ fn sidebar_deref_methods(\n             .and_then(|did| c.impls.get(&did));\n         if let Some(impls) = inner_impl {\n             debug!(\"found inner_impl: {:?}\", impls);\n-            let mut used_links = FxHashSet::default();\n             let mut ret = impls\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n-                .flat_map(|i| {\n-                    get_methods(i.inner_impl(), true, &mut used_links, deref_mut, cx.tcx())\n-                })\n+                .flat_map(|i| get_methods(i.inner_impl(), true, used_links, deref_mut, cx.tcx()))\n                 .collect::<Vec<_>>();\n             if !ret.is_empty() {\n                 let id = if let Some(target_def_id) = real_target.def_id(c) {\n@@ -2124,7 +2122,14 @@ fn sidebar_deref_methods(\n                         .map(|t| Some(t.def_id()) == cx.tcx().lang_items().deref_trait())\n                         .unwrap_or(false)\n                 }) {\n-                    sidebar_deref_methods(cx, out, target_deref_impl, target_impls, derefs);\n+                    sidebar_deref_methods(\n+                        cx,\n+                        out,\n+                        target_deref_impl,\n+                        target_impls,\n+                        derefs,\n+                        used_links,\n+                    );\n                 }\n             }\n         }"}, {"sha": "f09d23206093d7a36d43f6789ed479c8c74206e9", "filename": "src/test/rustdoc/issue-100679-sidebar-links-deref.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs?ref=ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "patch": "@@ -0,0 +1,30 @@\n+#![crate_name=\"foo\"]\n+\n+pub struct Vec;\n+\n+pub struct Slice;\n+\n+impl std::ops::Deref for Vec {\n+    type Target = Slice;\n+    fn deref(&self) -> &Slice {\n+        &Slice\n+    }\n+}\n+\n+// @has foo/struct.Vec.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty\"]' \\\n+//          \"is_empty\"\n+impl Vec {\n+    pub fn is_empty(&self) -> bool {\n+        true\n+    }\n+}\n+\n+// @has foo/struct.Vec.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty-1\"]' \\\n+//          \"is_empty\"\n+// @has foo/struct.Slice.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty\"]' \\\n+//          \"is_empty\"\n+impl Slice {\n+    pub fn is_empty(&self) -> bool {\n+        true\n+    }\n+}"}]}