{"sha": "8c8960164723e0a67c3cfdf4e921e7e42311207d", "node_id": "C_kwDOAAsO6NoAKDhjODk2MDE2NDcyM2UwYTY3YzNjZmRmNGU5MjFlN2U0MjMxMTIwN2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-13T05:35:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-13T05:35:34Z"}, "message": "Rollup merge of #111494 - compiler-errors:variant-order, r=petrochenkov\n\nEncode `VariantIdx` so we can decode ADT variants in the right order\n\nAs far as I can tell, we don't guarantee anything about the ordering of `DefId`s and module children...\n\nThe code that motivated this PR (#111483) looks something like:\n\n```rust\n#[derive(Protocol)]\npub enum Data {\n    #[protocol(discriminator(0x00))]\n    Disconnect(Disconnect),\n    EncryptionRequest,\n    /* more variants... */\n}\n```\n\nThe specific macro ([`protocol`](https://github.com/dylanmckay/protocol)) doesn't really matter, but as far as I can tell (from calls to `build_reduced_graph`), the presence of that `#[protocol(..)]` helper attribute causes the def-id of the `Disconnect` enum variant to be collected *after* its siblings, and it shows up after the other variants in `module_children`.\n\nWhen we decode the variants for `Data` in a child crate (an example test, in this case), this means that the `Disconnect` variant is moved to the end of the variants list, and all of the other variants now have incorrect relative discriminant data, causing the ICE.\n\nThis PR fixes this by sorting manually by variant index after they are decoded. I guess there are alternative ways of fixing this, such as not reusing `module_children_non_reexports` to encode the order-sensitive ADT variants, or to do some sorting in `rustc_resolve`... but none of those seemed particularly satisfying either.\n\n~I really struggled to create a reproduction here -- it required at least 3 crates, one of which is a proc macro, and then some code to actually compute discriminants in the child crate... Needless to say, I failed to repro this in a test, but I can confirm that it fixes the regression in #111483.~ Test exists now.\n\nr? `@petrochenkov` but feel free to reassign. ~Again, sorry for no test, but I hope the explanation at least suggests why a fix like this is likely necessary.~ Feedback is welcome.", "tree": {"sha": "f560b9e8edc3a56435ca80b87577055047b2dd65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f560b9e8edc3a56435ca80b87577055047b2dd65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8960164723e0a67c3cfdf4e921e7e42311207d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkXyGmCRBK7hj4Ov3rIwAAXicIAIbbyJmV9svw1Q4shOXDr4ID\nRmv2AEHHYqVpmXUb+Tm46DwRDPNLFwU5kJz1MolJtLMCjNylpB27IT4ZwrtAaIcq\n4we5ZJdjtOVp4H5ueNzqZSHu3jxTY/J3wOoYYD12v39RF/hhfZYzSw4lknwi3f7i\nWvtnSczOgmMw/KvGLmk3LJPX+Sw48/L4auqjMgwGOK42Gw31e2qvNCZOry1/CMUx\n56r1F6Mobmyh1965EZvzQCvsRWfgDg2xbsex7gnxc88NnKua1g7pRHKpHE9QXICy\nb3T/mytkVczShrXp3XILPV+17Vq4rRzHIc/z8ExAYSn8rI9XqnKeBr8yhh8bnXg=\n=xTUa\n-----END PGP SIGNATURE-----\n", "payload": "tree f560b9e8edc3a56435ca80b87577055047b2dd65\nparent 770fd738c7939701b5ecd996073a97d9ff60cf80\nparent ff54c801f0c1552941bda472df992e9f9be25f33\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683956134 +0530\ncommitter GitHub <noreply@github.com> 1683956134 +0530\n\nRollup merge of #111494 - compiler-errors:variant-order, r=petrochenkov\n\nEncode `VariantIdx` so we can decode ADT variants in the right order\n\nAs far as I can tell, we don't guarantee anything about the ordering of `DefId`s and module children...\n\nThe code that motivated this PR (#111483) looks something like:\n\n```rust\n#[derive(Protocol)]\npub enum Data {\n    #[protocol(discriminator(0x00))]\n    Disconnect(Disconnect),\n    EncryptionRequest,\n    /* more variants... */\n}\n```\n\nThe specific macro ([`protocol`](https://github.com/dylanmckay/protocol)) doesn't really matter, but as far as I can tell (from calls to `build_reduced_graph`), the presence of that `#[protocol(..)]` helper attribute causes the def-id of the `Disconnect` enum variant to be collected *after* its siblings, and it shows up after the other variants in `module_children`.\n\nWhen we decode the variants for `Data` in a child crate (an example test, in this case), this means that the `Disconnect` variant is moved to the end of the variants list, and all of the other variants now have incorrect relative discriminant data, causing the ICE.\n\nThis PR fixes this by sorting manually by variant index after they are decoded. I guess there are alternative ways of fixing this, such as not reusing `module_children_non_reexports` to encode the order-sensitive ADT variants, or to do some sorting in `rustc_resolve`... but none of those seemed particularly satisfying either.\n\n~I really struggled to create a reproduction here -- it required at least 3 crates, one of which is a proc macro, and then some code to actually compute discriminants in the child crate... Needless to say, I failed to repro this in a test, but I can confirm that it fixes the regression in #111483.~ Test exists now.\n\nr? `@petrochenkov` but feel free to reassign. ~Again, sorry for no test, but I hope the explanation at least suggests why a fix like this is likely necessary.~ Feedback is welcome.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8960164723e0a67c3cfdf4e921e7e42311207d", "html_url": "https://github.com/rust-lang/rust/commit/8c8960164723e0a67c3cfdf4e921e7e42311207d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8960164723e0a67c3cfdf4e921e7e42311207d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770fd738c7939701b5ecd996073a97d9ff60cf80", "url": "https://api.github.com/repos/rust-lang/rust/commits/770fd738c7939701b5ecd996073a97d9ff60cf80", "html_url": "https://github.com/rust-lang/rust/commit/770fd738c7939701b5ecd996073a97d9ff60cf80"}, {"sha": "ff54c801f0c1552941bda472df992e9f9be25f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff54c801f0c1552941bda472df992e9f9be25f33", "html_url": "https://github.com/rust-lang/rust/commit/ff54c801f0c1552941bda472df992e9f9be25f33"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "eab32ad8e3f806ae8d53e8b53467043e8f8a2026", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8c8960164723e0a67c3cfdf4e921e7e42311207d", "patch": "@@ -856,7 +856,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         ty::EarlyBinder(&*output)\n     }\n \n-    fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n+    fn get_variant(\n+        self,\n+        kind: DefKind,\n+        index: DefIndex,\n+        parent_did: DefId,\n+    ) -> (VariantIdx, ty::VariantDef) {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,\n             DefKind::Struct => ty::AdtKind::Struct,\n@@ -870,22 +875,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n         let ctor = data.ctor.map(|(kind, index)| (kind, self.local_def_id(index)));\n \n-        ty::VariantDef::new(\n-            self.item_name(index),\n-            variant_did,\n-            ctor,\n-            data.discr,\n-            self.get_associated_item_or_field_def_ids(index)\n-                .map(|did| ty::FieldDef {\n-                    did,\n-                    name: self.item_name(did.index),\n-                    vis: self.get_visibility(did.index),\n-                })\n-                .collect(),\n-            adt_kind,\n-            parent_did,\n-            false,\n-            data.is_non_exhaustive,\n+        (\n+            data.idx,\n+            ty::VariantDef::new(\n+                self.item_name(index),\n+                variant_did,\n+                ctor,\n+                data.discr,\n+                self.get_associated_item_or_field_def_ids(index)\n+                    .map(|did| ty::FieldDef {\n+                        did,\n+                        name: self.item_name(did.index),\n+                        vis: self.get_visibility(did.index),\n+                    })\n+                    .collect(),\n+                adt_kind,\n+                parent_did,\n+                false,\n+                data.is_non_exhaustive,\n+            ),\n         )\n     }\n \n@@ -901,7 +909,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n         let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n \n-        let variants = if let ty::AdtKind::Enum = adt_kind {\n+        let mut variants: Vec<_> = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n                 .tables\n                 .module_children_non_reexports\n@@ -912,15 +920,22 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let kind = self.def_kind(index);\n                     match kind {\n                         DefKind::Ctor(..) => None,\n-                        _ => Some(self.get_variant(&kind, index, did)),\n+                        _ => Some(self.get_variant(kind, index, did)),\n                     }\n                 })\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n+            std::iter::once(self.get_variant(kind, item_id, did)).collect()\n         };\n \n-        tcx.mk_adt_def(did, adt_kind, variants, repr)\n+        variants.sort_by_key(|(idx, _)| *idx);\n+\n+        tcx.mk_adt_def(\n+            did,\n+            adt_kind,\n+            variants.into_iter().map(|(_, variant)| variant).collect(),\n+            repr,\n+        )\n     }\n \n     fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {"}, {"sha": "36be07f6205a39e89c0bc2295167b943c20836f9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8c8960164723e0a67c3cfdf4e921e7e42311207d", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Therefore, the loop over variants will encode its fields as the adt's children.\n         }\n \n-        for variant in adt_def.variants().iter() {\n+        for (idx, variant) in adt_def.variants().iter_enumerated() {\n             let data = VariantData {\n                 discr: variant.discr,\n+                idx,\n                 ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                 is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n             };"}, {"sha": "1328d70021047a463fa6f69561b2da7caa3b3a50", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8960164723e0a67c3cfdf4e921e7e42311207d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=8c8960164723e0a67c3cfdf4e921e7e42311207d", "patch": "@@ -31,6 +31,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, ExpnData, ExpnHash, ExpnId, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use std::marker::PhantomData;\n@@ -430,6 +431,7 @@ define_tables! {\n \n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n+    idx: VariantIdx,\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n     ctor: Option<(CtorKind, DefIndex)>,"}, {"sha": "a2cc10a4b22c073936f2fb12169d57801397a06f", "filename": "tests/ui/enum-discriminant/auxiliary/discr-foreign-dep.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c8960164723e0a67c3cfdf4e921e7e42311207d/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8960164723e0a67c3cfdf4e921e7e42311207d/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs?ref=8c8960164723e0a67c3cfdf4e921e7e42311207d", "patch": "@@ -0,0 +1,7 @@\n+#[derive(Default)]\n+pub enum Foo {\n+    A(u32),\n+    #[default]\n+    B,\n+    C(u32),\n+}"}, {"sha": "e7123b3445230273b03c3253f9c31c7735d048a1", "filename": "tests/ui/enum-discriminant/discr-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c8960164723e0a67c3cfdf4e921e7e42311207d/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8960164723e0a67c3cfdf4e921e7e42311207d/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs?ref=8c8960164723e0a67c3cfdf4e921e7e42311207d", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:discr-foreign-dep.rs\n+// build-pass\n+\n+extern crate discr_foreign_dep;\n+\n+fn main() {\n+    match Default::default() {\n+        discr_foreign_dep::Foo::A(_) => {}\n+        _ => {}\n+    }\n+}"}]}