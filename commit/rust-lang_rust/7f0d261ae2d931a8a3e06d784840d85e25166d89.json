{"sha": "7f0d261ae2d931a8a3e06d784840d85e25166d89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGQyNjFhZTJkOTMxYThhM2UwNmQ3ODQ4NDBkODVlMjUxNjZkODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T21:56:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T21:56:00Z"}, "message": "auto merge of #9064 : SiegeLord/rust/external_struct_variants, r=luqmana\n\nFixes issues #5557 and #8746.\r\n\r\nThis patch adds an additional family for struct-like variants, and encodes some struct-like aspects of such variants that can then be properly decoded by resolve.\r\n\r\nNote that I am not 100% sure how this fix works, but it fixes the issue without breaking any of the tests on my machine.", "tree": {"sha": "b8bc39c2b74473ac60485d55539381fee9a29ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8bc39c2b74473ac60485d55539381fee9a29ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0d261ae2d931a8a3e06d784840d85e25166d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0d261ae2d931a8a3e06d784840d85e25166d89", "html_url": "https://github.com/rust-lang/rust/commit/7f0d261ae2d931a8a3e06d784840d85e25166d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0d261ae2d931a8a3e06d784840d85e25166d89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f69dd2a4cf80f98e1a1ad37febb4cc9948f5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f69dd2a4cf80f98e1a1ad37febb4cc9948f5ee", "html_url": "https://github.com/rust-lang/rust/commit/c8f69dd2a4cf80f98e1a1ad37febb4cc9948f5ee"}, {"sha": "0766c89b423d91e36d3f3ce0abcb3971a42d258e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0766c89b423d91e36d3f3ce0abcb3971a42d258e", "html_url": "https://github.com/rust-lang/rust/commit/0766c89b423d91e36d3f3ce0abcb3971a42d258e"}], "stats": {"total": 192, "additions": 128, "deletions": 64}, "files": [{"sha": "debbc7591d4a4ca9ecec41494f5755f98c610de0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -115,7 +115,8 @@ enum Family {\n     Mod,                   // m\n     ForeignMod,            // n\n     Enum,                  // t\n-    Variant,               // v\n+    TupleVariant,          // v\n+    StructVariant,         // V\n     Impl,                  // i\n     Trait,                 // I\n     Struct,                // S\n@@ -139,7 +140,8 @@ fn item_family(item: ebml::Doc) -> Family {\n       'm' => Mod,\n       'n' => ForeignMod,\n       't' => Enum,\n-      'v' => Variant,\n+      'v' => TupleVariant,\n+      'V' => StructVariant,\n       'i' => Impl,\n       'I' => Trait,\n       'S' => Struct,\n@@ -361,9 +363,13 @@ fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         Type | ForeignType => DlDef(ast::DefTy(did)),\n         Mod => DlDef(ast::DefMod(did)),\n         ForeignMod => DlDef(ast::DefForeignMod(did)),\n-        Variant => {\n+        StructVariant => {\n             let enum_did = item_reqd_and_translated_parent_item(cnum, item);\n-            DlDef(ast::DefVariant(enum_did, did))\n+            DlDef(ast::DefVariant(enum_did, did, true))\n+        }\n+        TupleVariant => {\n+            let enum_did = item_reqd_and_translated_parent_item(cnum, item);\n+            DlDef(ast::DefVariant(enum_did, did, false))\n         }\n         Trait => DlDef(ast::DefTrait(did)),\n         Enum => DlDef(ast::DefTy(did)),\n@@ -575,8 +581,8 @@ impl<'self> EachItemContext<'self> {\n                 }\n                 ImmStatic | MutStatic | Struct | UnsafeFn | Fn | ForeignFn |\n                 UnsafeStaticMethod | StaticMethod | Type | ForeignType |\n-                Variant | Enum | PublicField | PrivateField |\n-                InheritedField => {}\n+                TupleVariant | StructVariant | Enum | PublicField |\n+                PrivateField | InheritedField => {}\n             }\n         }\n \n@@ -1268,7 +1274,8 @@ fn item_family_to_str(fam: Family) -> ~str {\n       Mod => ~\"mod\",\n       ForeignMod => ~\"foreign mod\",\n       Enum => ~\"enum\",\n-      Variant => ~\"variant\",\n+      StructVariant => ~\"struct variant\",\n+      TupleVariant => ~\"tuple variant\",\n       Impl => ~\"impl\",\n       Trait => ~\"trait\",\n       Struct => ~\"struct\","}, {"sha": "98c7a7a126eb0fd223c9093188484611e6c6f0c6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -307,6 +307,27 @@ fn encode_parent_item(ebml_w: &mut writer::Encoder, id: DefId) {\n     ebml_w.end_tag();\n }\n \n+fn encode_struct_fields(ecx: &EncodeContext,\n+                             ebml_w: &mut writer::Encoder,\n+                             def: @struct_def) {\n+    for f in def.fields.iter() {\n+        match f.node.kind {\n+            named_field(ident, vis) => {\n+               ebml_w.start_tag(tag_item_field);\n+               encode_struct_field_family(ebml_w, vis);\n+               encode_name(ecx, ebml_w, ident);\n+               encode_def_id(ebml_w, local_def(f.node.id));\n+               ebml_w.end_tag();\n+            }\n+            unnamed_field => {\n+                ebml_w.start_tag(tag_item_unnamed_field);\n+                encode_def_id(ebml_w, local_def(f.node.id));\n+                ebml_w.end_tag();\n+            }\n+        }\n+    }\n+}\n+\n fn encode_enum_variant_info(ecx: &EncodeContext,\n                             ebml_w: &mut writer::Encoder,\n                             id: NodeId,\n@@ -326,7 +347,10 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n                           pos: ebml_w.writer.tell()});\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n-        encode_family(ebml_w, 'v');\n+        match variant.node.kind {\n+            ast::tuple_variant_kind(_) => encode_family(ebml_w, 'v'),\n+            ast::struct_variant_kind(_) => encode_family(ebml_w, 'V')\n+        }\n         encode_name(ecx, ebml_w, variant.node.name);\n         encode_parent_item(ebml_w, local_def(id));\n         encode_visibility(ebml_w, variant.node.vis);\n@@ -336,7 +360,14 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n                     if args.len() > 0 && generics.ty_params.len() == 0 => {\n                 encode_symbol(ecx, ebml_w, variant.node.id);\n             }\n-            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {}\n+            ast::tuple_variant_kind(_) => {},\n+            ast::struct_variant_kind(def) => {\n+                let idx = encode_info_for_struct(ecx, ebml_w, path,\n+                                         def.fields, index);\n+                encode_struct_fields(ecx, ebml_w, def);\n+                let bkts = create_index(idx);\n+                encode_index(ebml_w, bkts, write_i64);\n+            }\n         }\n         if vi[i].disr_val != disr_val {\n             encode_disr_val(ecx, ebml_w, vi[i].disr_val);\n@@ -986,22 +1017,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_trait_method\n         needs to know*/\n-        for f in struct_def.fields.iter() {\n-            match f.node.kind {\n-                named_field(ident, vis) => {\n-                   ebml_w.start_tag(tag_item_field);\n-                   encode_struct_field_family(ebml_w, vis);\n-                   encode_name(ecx, ebml_w, ident);\n-                   encode_def_id(ebml_w, local_def(f.node.id));\n-                   ebml_w.end_tag();\n-                }\n-                unnamed_field => {\n-                    ebml_w.start_tag(tag_item_unnamed_field);\n-                    encode_def_id(ebml_w, local_def(f.node.id));\n-                    ebml_w.end_tag();\n-                }\n-            }\n-        }\n+        encode_struct_fields(ecx, ebml_w, struct_def);\n \n         // Encode inherent implementations for this structure.\n         encode_inherent_implementations(ecx, ebml_w, def_id);"}, {"sha": "bcc333afeec2056d45f868a26e581aaca03b7120", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -396,8 +396,8 @@ impl tr for ast::Def {\n           ast::DefStatic(did, m) => { ast::DefStatic(did.tr(xcx), m) }\n           ast::DefArg(nid, b) => { ast::DefArg(xcx.tr_id(nid), b) }\n           ast::DefLocal(nid, b) => { ast::DefLocal(xcx.tr_id(nid), b) }\n-          ast::DefVariant(e_did, v_did) => {\n-            ast::DefVariant(e_did.tr(xcx), v_did.tr(xcx))\n+          ast::DefVariant(e_did, v_did, is_s) => {\n+            ast::DefVariant(e_did.tr(xcx), v_did.tr(xcx), is_s)\n           },\n           ast::DefTrait(did) => ast::DefTrait(did.tr(xcx)),\n           ast::DefTy(did) => ast::DefTy(did.tr(xcx)),"}, {"sha": "fe5925f26f0ac206507734f27f46353339bd3818", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -149,7 +149,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n             match def_map.find(&e.id) {\n               Some(&DefStatic(*)) |\n               Some(&DefFn(_, _)) |\n-              Some(&DefVariant(_, _)) |\n+              Some(&DefVariant(_, _, _)) |\n               Some(&DefStruct(_)) => { }\n \n               Some(&def) => {"}, {"sha": "16338b25bf49aa73a8c36c63fc3f2b8956349cd6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -335,7 +335,7 @@ pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n       PatWild => { None }\n       PatIdent(_, _, _) | PatEnum(_, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n-          Some(&DefVariant(_, id)) => Some(variant(id)),\n+          Some(&DefVariant(_, id, _)) => Some(variant(id)),\n           Some(&DefStatic(did, false)) => {\n             let const_expr = lookup_const_by_id(cx.tcx, did).unwrap();\n             Some(val(eval_const_expr(cx.tcx, const_expr)))\n@@ -349,7 +349,7 @@ pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n       }\n       PatStruct(*) => {\n         match cx.tcx.def_map.find(&pat.id) {\n-          Some(&DefVariant(_, id)) => Some(variant(id)),\n+          Some(&DefVariant(_, id, _)) => Some(variant(id)),\n           _ => Some(single)\n         }\n       }\n@@ -371,7 +371,7 @@ pub fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n       PatWild => { true }\n       PatIdent(_, _, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n-          Some(&DefVariant(_, _)) | Some(&DefStatic(*)) => { false }\n+          Some(&DefVariant(_, _, _)) | Some(&DefStatic(*)) => { false }\n           _ => { true }\n         }\n       }\n@@ -547,7 +547,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n             }\n             PatIdent(_, _, _) => {\n                 match cx.tcx.def_map.find(&pat_id) {\n-                    Some(&DefVariant(_, id)) => {\n+                    Some(&DefVariant(_, id, _)) => {\n                         if variant(id) == *ctor_id {\n                             Some(r.tail().to_owned())\n                         } else {\n@@ -639,14 +639,14 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                             None\n                         }\n                     }\n-                    DefVariant(_, id) if variant(id) == *ctor_id => {\n+                    DefVariant(_, id, _) if variant(id) == *ctor_id => {\n                         let args = match args {\n                             Some(args) => args,\n                             None => vec::from_elem(arity, wild())\n                         };\n                         Some(vec::append(args, r.tail()))\n                     }\n-                    DefVariant(_, _) => None,\n+                    DefVariant(_, _, _) => None,\n \n                     DefFn(*) |\n                     DefStruct(*) => {\n@@ -664,7 +664,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n             PatStruct(_, ref flds, _) => {\n                 // Is this a struct or an enum variant?\n                 match cx.tcx.def_map.get_copy(&pat_id) {\n-                    DefVariant(_, variant_id) => {\n+                    DefVariant(_, variant_id, _) => {\n                         if variant(variant_id) == *ctor_id {\n                             // FIXME #4731: Is this right? --pcw\n                             let args = flds.map(|ty_field| {\n@@ -835,7 +835,7 @@ pub fn check_fn(v: &mut CheckMatchVisitor,\n \n pub fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n     match cx.tcx.def_map.find(&pat.id) {\n-      Some(&DefVariant(enum_id, _)) => {\n+      Some(&DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n             return true;\n         }"}, {"sha": "2e5e87f225a2acd700a2d95aa9dafa94bbf19d45", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -168,7 +168,7 @@ pub fn classify(e: &Expr,\n pub fn lookup_const(tcx: ty::ctxt, e: &Expr) -> Option<@Expr> {\n     match tcx.def_map.find(&e.id) {\n         Some(&ast::DefStatic(def_id, false)) => lookup_const_by_id(tcx, def_id),\n-        Some(&ast::DefVariant(enum_def, variant_def)) => lookup_variant_by_id(tcx,\n+        Some(&ast::DefVariant(enum_def, variant_def, _)) => lookup_variant_by_id(tcx,\n                                                                                enum_def,\n                                                                                variant_def),\n         _ => None"}, {"sha": "6ca8086efc253095bd1d9e94eee63db9b5cef869", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -416,7 +416,7 @@ fn is_nullary_variant(cx: Context, ex: @Expr) -> bool {\n     match ex.node {\n       ExprPath(_) => {\n         match cx.tcx.def_map.get_copy(&ex.id) {\n-          DefVariant(edid, vdid) => {\n+          DefVariant(edid, vdid, _) => {\n               ty::enum_variant_with_id(cx.tcx, edid, vdid).args.is_empty()\n           }\n           _ => false"}, {"sha": "63b63d8d69142403bb8be776c55cdd74a3d5e8ff", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -889,7 +889,7 @@ impl mem_categorization_ctxt {\n           }\n           ast::PatEnum(_, Some(ref subpats)) => {\n             match self.tcx.def_map.find(&pat.id) {\n-                Some(&ast::DefVariant(enum_did, _)) => {\n+                Some(&ast::DefVariant(enum_did, _, _)) => {\n                     // variant(x, y, z)\n \n                     let downcast_cmt = {\n@@ -1074,7 +1074,7 @@ pub fn field_mutbl(tcx: ty::ctxt,\n       }\n       ty::ty_enum(*) => {\n         match tcx.def_map.get_copy(&node_id) {\n-          ast::DefVariant(_, variant_id) => {\n+          ast::DefVariant(_, variant_id, _) => {\n             let r = ty::lookup_struct_fields(tcx, variant_id);\n             for fld in r.iter() {\n                 if fld.ident == f_name {"}, {"sha": "085925f97a46be8ffb4a526e98a3bb6a377d597f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -455,7 +455,7 @@ impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n                             if id.crate != LOCAL_CRATE ||\n                                     !self.privileged_items.iter().any(|x| x == &(id.node)) {\n                                 match self.tcx.def_map.get_copy(&expr.id) {\n-                                    DefVariant(_, variant_id) => {\n+                                    DefVariant(_, variant_id, _) => {\n                                         for field in (*fields).iter() {\n                                                 debug!(\"(privacy checking) \\\n                                                         checking field in \\\n@@ -522,7 +522,7 @@ impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n                             if enum_id.crate != LOCAL_CRATE ||\n                                     !self.privileged_items.iter().any(|x| x == &enum_id.node) {\n                                 match self.tcx.def_map.find(&pattern.id) {\n-                                    Some(&DefVariant(_, variant_id)) => {\n+                                    Some(&DefVariant(_, variant_id, _)) => {\n                                         for field in fields.iter() {\n                                             debug!(\"(privacy checking) \\\n                                                     checking field in \\"}, {"sha": "3a9ef3cf06f037140ab434d516ab61a9f482b9d1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -1474,15 +1474,15 @@ impl Resolver {\n                                                 variant.span);\n                 child.define_value(privacy,\n                                    DefVariant(item_id,\n-                                               local_def(variant.node.id)),\n+                                               local_def(variant.node.id), false),\n                                    variant.span);\n             }\n             struct_variant_kind(_) => {\n                 let (child, _) = self.add_child(ident, parent, ForbidDuplicateTypesAndValues,\n                                                 variant.span);\n                 child.define_type(privacy,\n                                   DefVariant(item_id,\n-                                              local_def(variant.node.id)),\n+                                              local_def(variant.node.id), true),\n                                   variant.span);\n                 self.structs.insert(local_def(variant.node.id));\n             }\n@@ -1690,14 +1690,20 @@ impl Resolver {\n \n         match def {\n           DefMod(_) | DefForeignMod(_) => {}\n-          DefVariant(*) => {\n+          DefVariant(_, variant_id, is_struct) => {\n             debug!(\"(building reduced graph for external crate) building \\\n                     variant %s\",\n                    final_ident);\n             // We assume the parent is visible, or else we wouldn't have seen\n             // it.\n             let privacy = variant_visibility_to_privacy(visibility, true);\n-            child_name_bindings.define_value(privacy, def, dummy_sp());\n+            if is_struct {\n+                child_name_bindings.define_type(privacy, def, dummy_sp());\n+                self.structs.insert(variant_id);\n+            }\n+            else {\n+                child_name_bindings.define_value(privacy, def, dummy_sp());\n+            }\n           }\n           DefFn(*) | DefStaticMethod(*) | DefStatic(*) => {\n             debug!(\"(building reduced graph for external \\\n@@ -4507,7 +4513,7 @@ impl Resolver {\n                             assert!(self.structs.contains(&class_id));\n                             self.record_def(pattern.id, definition);\n                         }\n-                        Some(definition @ DefVariant(_, variant_id))\n+                        Some(definition @ DefVariant(_, variant_id, _))\n                                 if self.structs.contains(&variant_id) => {\n                             self.record_def(pattern.id, definition);\n                         }\n@@ -5123,7 +5129,7 @@ impl Resolver {\n                         let class_def = DefStruct(class_id);\n                         self.record_def(expr.id, class_def);\n                     }\n-                    Some(definition @ DefVariant(_, class_id))\n+                    Some(definition @ DefVariant(_, class_id, _))\n                             if self.structs.contains(&class_id) => {\n                         self.record_def(expr.id, definition);\n                     }"}, {"sha": "244e0e6e85d48c9c3f85f96aef7e69b54fe28d14", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -347,7 +347,7 @@ fn variant_opt(bcx: @mut Block, pat_id: ast::NodeId)\n     -> Opt {\n     let ccx = bcx.ccx();\n     match ccx.tcx.def_map.get_copy(&pat_id) {\n-        ast::DefVariant(enum_id, var_id) => {\n+        ast::DefVariant(enum_id, var_id, _) => {\n             let variants = ty::enum_variants(ccx.tcx, enum_id);\n             for v in (*variants).iter() {\n                 if var_id == v.id {\n@@ -657,7 +657,7 @@ fn enter_opt<'r>(bcx: @mut Block,\n                     // Look up the struct variant ID.\n                     let struct_id;\n                     match tcx.def_map.get_copy(&p.id) {\n-                        ast::DefVariant(_, found_struct_id) => {\n+                        ast::DefVariant(_, found_struct_id, _) => {\n                             struct_id = found_struct_id;\n                         }\n                         _ => {\n@@ -2113,7 +2113,7 @@ fn bind_irrefutable_pat(bcx: @mut Block,\n         }\n         ast::PatEnum(_, ref sub_pats) => {\n             match bcx.tcx().def_map.find(&pat.id) {\n-                Some(&ast::DefVariant(enum_id, var_id)) => {\n+                Some(&ast::DefVariant(enum_id, var_id, _)) => {\n                     let repr = adt::represent_node(bcx, pat.id);\n                     let vinfo = ty::enum_variant_with_id(ccx.tcx,\n                                                          enum_id,"}, {"sha": "aa6e10a4a0db77103880a7e02e361d8f78ea54da", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -128,7 +128,7 @@ pub fn trans(bcx: @mut Block, expr: @ast::Expr) -> Callee {\n                                                                 trait_did,\n                                                                 ref_expr.id))\n             }\n-            ast::DefVariant(tid, vid) => {\n+            ast::DefVariant(tid, vid, _) => {\n                 // nullary variants are not callable\n                 assert!(ty::enum_variant_with_id(bcx.tcx(),\n                                                       tid,"}, {"sha": "78d2228ff041c4d8550140c1335957d808df4a88", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -577,7 +577,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::Expr) -> ValueRef {\n                 Some(&ast::DefStatic(def_id, false)) => {\n                     get_const_val(cx, def_id)\n                 }\n-                Some(&ast::DefVariant(enum_did, variant_did)) => {\n+                Some(&ast::DefVariant(enum_did, variant_did, _)) => {\n                     let ety = ty::expr_ty(cx.tcx, e);\n                     let repr = adt::represent_type(cx, ety);\n                     let vinfo = ty::enum_variant_with_id(cx.tcx,\n@@ -604,7 +604,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::Expr) -> ValueRef {\n                       let arg_vals = args.map(|a| const_expr(cx, *a));\n                       adt::trans_const(cx, repr, 0, arg_vals)\n                   }\n-                  Some(&ast::DefVariant(enum_did, variant_did)) => {\n+                  Some(&ast::DefVariant(enum_did, variant_did, _)) => {\n                       let ety = ty::expr_ty(cx.tcx, e);\n                       let repr = adt::represent_type(cx, ety);\n                       let vinfo = ty::enum_variant_with_id(cx.tcx,"}, {"sha": "b351fe91e6f1c859c644272ce71d66437b9e80d1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -782,7 +782,7 @@ fn trans_def_dps_unadjusted(bcx: @mut Block, ref_expr: &ast::Expr,\n     };\n \n     match def {\n-        ast::DefVariant(tid, vid) => {\n+        ast::DefVariant(tid, vid, _) => {\n             let variant_info = ty::enum_variant_with_id(ccx.tcx, tid, vid);\n             if variant_info.args.len() > 0u {\n                 // N-ary variant.\n@@ -1140,7 +1140,7 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n                 }\n                 Some(node_id) => {\n                     match tcx.def_map.get_copy(&node_id) {\n-                        ast::DefVariant(enum_id, variant_id) => {\n+                        ast::DefVariant(enum_id, variant_id, _) => {\n                             let variant_info = ty::enum_variant_with_id(\n                                 tcx, enum_id, variant_id);\n                             op(variant_info.disr_val,"}, {"sha": "0e57bdc53215b56dbb5c01ff26a888e0bd993164", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -3630,7 +3630,7 @@ pub fn note_and_explain_type_err(cx: ctxt, err: &type_err) {\n \n pub fn def_has_ty_params(def: ast::Def) -> bool {\n     match def {\n-      ast::DefFn(_, _) | ast::DefVariant(_, _) | ast::DefStruct(_)\n+      ast::DefFn(_, _) | ast::DefVariant(_, _, _) | ast::DefStruct(_)\n         => true,\n       _ => false\n     }\n@@ -3840,7 +3840,6 @@ impl VariantInfo {\n     pub fn from_ast_variant(cx: ctxt,\n                             ast_variant: &ast::variant,\n                             discriminant: Disr) -> VariantInfo {\n-\n         let ctor_ty = node_id_to_type(cx, ast_variant.node.id);\n \n         match ast_variant.node.kind {"}, {"sha": "4c5ee1ca2174143c5cb6339caf4a0de381c49a0a", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -384,7 +384,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n \n     // Find the variant that was specified.\n     match tcx.def_map.find(&pat_id) {\n-        Some(&ast::DefVariant(found_enum_id, variant_id))\n+        Some(&ast::DefVariant(found_enum_id, variant_id, _))\n                 if found_enum_id == enum_id => {\n             // Get the struct fields from this struct-like enum variant.\n             let class_fields = ty::lookup_struct_fields(tcx, variant_id);"}, {"sha": "265e19fdaa730214a03bc87554628619056e3082", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -2825,7 +2825,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                 check_struct_constructor(fcx, id, expr.span, type_def_id,\n                                          *fields, base_expr);\n             }\n-            Some(&ast::DefVariant(enum_id, variant_id)) => {\n+            Some(&ast::DefVariant(enum_id, variant_id, _)) => {\n                 check_struct_enum_variant(fcx, id, expr.span, enum_id,\n                                           variant_id, *fields);\n             }\n@@ -3256,7 +3256,7 @@ pub fn ty_param_bounds_and_ty_for_def(fcx: @mut FnCtxt,\n           return no_params(typ);\n       }\n       ast::DefFn(id, _) | ast::DefStaticMethod(id, _, _) |\n-      ast::DefStatic(id, _) | ast::DefVariant(_, id) |\n+      ast::DefStatic(id, _) | ast::DefVariant(_, id, _) |\n       ast::DefStruct(id) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n       }"}, {"sha": "f5de683cb977949980d55d7b79038d7eac93b317", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -233,7 +233,7 @@ pub enum Def {\n     DefStatic(DefId, bool /* is_mutbl */),\n     DefArg(NodeId, bool /* is_mutbl */),\n     DefLocal(NodeId, bool /* is_mutbl */),\n-    DefVariant(DefId /* enum */, DefId /* variant */),\n+    DefVariant(DefId /* enum */, DefId /* variant */, bool /* is_structure */),\n     DefTy(DefId),\n     DefTrait(DefId),\n     DefPrimTy(prim_ty),"}, {"sha": "965f4a49aec587a316e36b6413f4fccb126cc606", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -52,7 +52,7 @@ pub fn stmt_id(s: &Stmt) -> NodeId {\n \n pub fn variant_def_ids(d: Def) -> Option<(DefId, DefId)> {\n     match d {\n-      DefVariant(enum_id, var_id) => {\n+      DefVariant(enum_id, var_id, _) => {\n           Some((enum_id, var_id))\n       }\n       _ => None\n@@ -63,7 +63,7 @@ pub fn def_id_of_def(d: Def) -> DefId {\n     match d {\n       DefFn(id, _) | DefStaticMethod(id, _, _) | DefMod(id) |\n       DefForeignMod(id) | DefStatic(id, _) |\n-      DefVariant(_, id) | DefTy(id) | DefTyParam(id, _) |\n+      DefVariant(_, id, _) | DefTy(id) | DefTyParam(id, _) |\n       DefUse(id) | DefStruct(id) | DefTrait(id) | DefMethod(id, _) => {\n         id\n       }"}, {"sha": "6d2c77ffb0e108c2632a8a73e3047d6d088ee963", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(name = \"struct_variant_xc_aux\",\n+       vers = \"0.1\")];\n+#[crate_type = \"lib\"];\n+\n+pub enum Enum {\n+    Variant { arg: u8 }\n+}"}, {"sha": "2dd7887cfcde0320394d211e648deef7c3862489", "filename": "src/test/run-pass/struct_variant_xc.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Ftest%2Frun-pass%2Fstruct_variant_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d261ae2d931a8a3e06d784840d85e25166d89/src%2Ftest%2Frun-pass%2Fstruct_variant_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct_variant_xc.rs?ref=7f0d261ae2d931a8a3e06d784840d85e25166d89", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast - check-fast doesn't understand aux-build\n+// aux-build:struct_variant_xc_aux.rs\n+extern mod struct_variant_xc_aux;\n+\n+use struct_variant_xc_aux::Variant;\n+\n+fn main() {\n+    let _ = Variant { arg: 1 };\n+}"}]}