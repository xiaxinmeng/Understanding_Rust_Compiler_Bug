{"sha": "04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MTQ1OTQzYTI1YzNiOGM3ZTdkN2ZlOGMyZWZiMDRmMjU5YzI1ZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-19T13:01:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-19T13:01:27Z"}, "message": "Auto merge of #39409 - pnkfelix:mir-borrowck2, r=nikomatsakis\n\nMIR EndRegion Statements (was MIR dataflow for Borrows)\n\nThis PR adds an `EndRegion` statement to MIR (where the `EndRegion` statement is what terminates a borrow).\n\nAn earlier version of the PR implemented a dataflow analysis on borrow expressions, but I am now factoring that into a follow-up PR so that reviewing this one is easier. (And also because there are some revisions I want to make to that dataflow code, but I want this PR to get out of WIP status...)\n\nThis is a baby step towards MIR borrowck. I just want to get the review process going while I independently work on the remaining steps.", "tree": {"sha": "1c3a1dcc8f0cb6181c6bbaa8e7e6d2903be99e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3a1dcc8f0cb6181c6bbaa8e7e6d2903be99e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "html_url": "https://github.com/rust-lang/rust/commit/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce5126199d0edf278ef0d9bb60534770d96f3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5126199d0edf278ef0d9bb60534770d96f3f6", "html_url": "https://github.com/rust-lang/rust/commit/5ce5126199d0edf278ef0d9bb60534770d96f3f6"}, {"sha": "11f4968bd7372ed3986ff7d83fb14218ef0f2f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f4968bd7372ed3986ff7d83fb14218ef0f2f20", "html_url": "https://github.com/rust-lang/rust/commit/11f4968bd7372ed3986ff7d83fb14218ef0f2f20"}], "stats": {"total": 1120, "additions": 1047, "deletions": 73}, "files": [{"sha": "cb017b7f8864da797d3c7e1e31a529d83a82f251", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -226,6 +226,9 @@ for mir::StatementKind<'tcx> {\n             mir::StatementKind::StorageDead(ref lvalue) => {\n                 lvalue.hash_stable(hcx, hasher);\n             }\n+            mir::StatementKind::EndRegion(ref extents) => {\n+                extents.hash_stable(hcx, hasher);\n+            }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 asm.hash_stable(hcx, hasher);"}, {"sha": "c8d03e7b305889061b9ce2c01b571f4da4e0df3d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -12,6 +12,7 @@\n \n use graphviz::IntoCow;\n use middle::const_val::ConstVal;\n+use middle::region::CodeExtent;\n use rustc_const_math::{ConstUsize, ConstInt, ConstMathErr};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::control_flow_graph::dominators::{Dominators, dominators};\n@@ -804,6 +805,10 @@ pub enum StatementKind<'tcx> {\n         inputs: Vec<Operand<'tcx>>\n     },\n \n+    /// Mark one terminating point of an extent (i.e. static region).\n+    /// (The starting point(s) arise implicitly from borrows.)\n+    EndRegion(CodeExtent),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -813,6 +818,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv),\n+            // (reuse lifetime rendering policy from ppaux.)\n+            EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             StorageLive(ref lv) => write!(fmt, \"StorageLive({:?})\", lv),\n             StorageDead(ref lv) => write!(fmt, \"StorageDead({:?})\", lv),\n             SetDiscriminant{lvalue: ref lv, variant_index: index} => {\n@@ -1176,12 +1183,22 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref lval) => write!(fmt, \"discriminant({:?})\", lval),\n             NullaryOp(ref op, ref t) => write!(fmt, \"{:?}({:?})\", op, t),\n-            Ref(_, borrow_kind, ref lv) => {\n+            Ref(region, borrow_kind, ref lv) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n                     BorrowKind::Mut | BorrowKind::Unique => \"mut \",\n                 };\n-                write!(fmt, \"&{}{:?}\", kind_str, lv)\n+\n+                // When identifying regions, add trailing space if\n+                // necessary.\n+                let region = if ppaux::identify_regions() {\n+                    let mut region = format!(\"{}\", region);\n+                    if region.len() > 0 { region.push(' '); }\n+                    region\n+                } else {\n+                    \"\".to_owned()\n+                };\n+                write!(fmt, \"&{}{}{:?}\", region, kind_str, lv)\n             }\n \n             Aggregate(ref kind, ref lvs) => {\n@@ -1224,7 +1241,11 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                     AggregateKind::Closure(def_id, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n-                            let name = format!(\"[closure@{:?}]\", tcx.hir.span(node_id));\n+                            let name = if tcx.sess.opts.debugging_opts.span_free_formats {\n+                                format!(\"[closure@{:?}]\", node_id)\n+                            } else {\n+                                format!(\"[closure@{:?}]\", tcx.hir.span(node_id))\n+                            };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             tcx.with_freevars(node_id, |freevars| {\n@@ -1458,6 +1479,13 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n                 outputs: outputs.fold_with(folder),\n                 inputs: inputs.fold_with(folder)\n             },\n+\n+            // Note for future: If we want to expose the extents\n+            // during the fold, we need to either generalize EndRegion\n+            // to carry `[ty::Region]`, or extend the `TypeFolder`\n+            // trait with a `fn fold_extent`.\n+            EndRegion(ref extent) => EndRegion(extent.clone()),\n+\n             Nop => Nop,\n         };\n         Statement {\n@@ -1476,6 +1504,13 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n             StorageDead(ref lvalue) => lvalue.visit_with(visitor),\n             InlineAsm { ref outputs, ref inputs, .. } =>\n                 outputs.visit_with(visitor) || inputs.visit_with(visitor),\n+\n+            // Note for future: If we want to expose the extents\n+            // during the visit, we need to either generalize EndRegion\n+            // to carry `[ty::Region]`, or extend the `TypeVisitor`\n+            // trait with a `fn visit_extent`.\n+            EndRegion(ref _extent) => false,\n+\n             Nop => false,\n         }\n     }"}, {"sha": "ac1c0306f701c7adc0114c74e8b4c2e49b1bb1ac", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -325,6 +325,7 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, lvalue, rvalue, location);\n                     }\n+                    StatementKind::EndRegion(_) => {}\n                     StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n                         self.visit_lvalue(lvalue, LvalueContext::Store, location);\n                     }"}, {"sha": "7b4394f2ac9fd1f8f7502a05941ce1bdbc3262fe", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -893,6 +893,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          DB_OPTIONS, db_type_desc, dbsetters,\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n         \"in general, enable more debug printouts\"),\n+    span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n+        \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n+    identify_regions: bool = (false, parse_bool, [UNTRACKED],\n+        \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n     count_llvm_insns: bool = (false, parse_bool,"}, {"sha": "1fa63577196664437c73e45b208bdfdc6a5ec56a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::BodyId;\n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n+use middle::region::{CodeExtent, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyAdt};\n@@ -32,6 +34,10 @@ pub fn verbose() -> bool {\n     ty::tls::with(|tcx| tcx.sess.verbose())\n }\n \n+pub fn identify_regions() -> bool {\n+    ty::tls::with(|tcx| tcx.sess.opts.debugging_opts.identify_regions)\n+}\n+\n fn fn_sig(f: &mut fmt::Formatter,\n           inputs: &[Ty],\n           variadic: bool,\n@@ -519,6 +525,23 @@ impl fmt::Display for ty::RegionKind {\n             ty::ReSkolemized(_, br) => {\n                 write!(f, \"{}\", br)\n             }\n+            ty::ReScope(code_extent) if identify_regions() => {\n+                match code_extent {\n+                    CodeExtent::Misc(node_id) =>\n+                        write!(f, \"'{}mce\", node_id.as_u32()),\n+                    CodeExtent::CallSiteScope(BodyId { node_id }) =>\n+                        write!(f, \"'{}cce\", node_id.as_u32()),\n+                    CodeExtent::ParameterScope(BodyId { node_id }) =>\n+                        write!(f, \"'{}pce\", node_id.as_u32()),\n+                    CodeExtent::DestructionScope(node_id) =>\n+                        write!(f, \"'{}dce\", node_id.as_u32()),\n+                    CodeExtent::Remainder(BlockRemainder { block, first_statement_index }) =>\n+                        write!(f, \"'{}_{}rce\", block, first_statement_index),\n+                }\n+            }\n+            ty::ReVar(region_vid) if identify_regions() => {\n+                write!(f, \"'{}rv\", region_vid.index)\n+            }\n             ty::ReScope(_) |\n             ty::ReVar(_) |\n             ty::ReErased => Ok(()),\n@@ -789,7 +812,11 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 write!(f, \"[closure\")?;\n \n                 if let Some(node_id) = tcx.hir.as_local_node_id(did) {\n-                    write!(f, \"@{:?}\", tcx.hir.span(node_id))?;\n+                    if tcx.sess.opts.debugging_opts.span_free_formats {\n+                        write!(f, \"@{:?}\", node_id)?;\n+                    } else {\n+                        write!(f, \"@{:?}\", tcx.hir.span(node_id))?;\n+                    }\n                     let mut sep = \" \";\n                     tcx.with_freevars(node_id, |freevars| {\n                         for (freevar, upvar_ty) in freevars.iter().zip(upvar_tys) {"}, {"sha": "1a1ac7f9c74d3eab0f47b37342ece825f34449e9", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -474,6 +474,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "2c55460fb301b3ed55fab6c16e2eea04560e2ae1", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -105,6 +105,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "833697726089ea5d4fd3e54e12b33948bd16a12a", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -594,6 +594,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             assert!(self.patch.is_patched(bb));\n                             allow_initializations = false;\n                         }\n+                        TerminatorKind::Resume => {\n+                            // It is possible for `Resume` to be patched\n+                            // (in particular it can be patched to be replaced with\n+                            // a Goto; see `MirPatch::new`).\n+                        }\n                         _ => {\n                             assert!(!self.patch.is_patched(bb));\n                         }"}, {"sha": "a0ecdcc8e2ff728d0b5ff2abe6f5e1f526d7433c", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -413,6 +413,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                           \"SetDiscriminant should not exist during borrowck\");\n             }\n             StatementKind::InlineAsm { .. } |\n+            StatementKind::EndRegion(_) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "e3b99b9d4bd43f92ac16ad3e7559d3c998c9c0ba", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -394,6 +394,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => {}\n         },\n         None => {"}, {"sha": "159fee6aa4c92167aeeac32440874a2f61410333", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -914,6 +914,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let mut passes = Passes::new();\n     passes.push_hook(mir::transform::dump_mir::DumpMir);\n \n+    // Remove all `EndRegion` statements that are not involved in borrows.\n+    passes.push_pass(MIR_CONST, mir::transform::clean_end_regions::CleanEndRegions);\n+\n     // What we need to do constant evaluation.\n     passes.push_pass(MIR_CONST, mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n     passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);"}, {"sha": "865174aa272ec10d03cd3bb54861e3ab136c88be", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -21,21 +21,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      ast_block: &'tcx hir::Block,\n                      source_info: SourceInfo)\n                      -> BlockAnd<()> {\n-        let Block { extent, span, stmts, expr, targeted_by_break } = self.hir.mirror(ast_block);\n-        self.in_scope(extent, block, move |this| {\n-            if targeted_by_break {\n-                // This is a `break`-able block (currently only `catch { ... }`)\n-                let exit_block = this.cfg.start_new_block();\n-                let block_exit = this.in_breakable_scope(None, exit_block,\n-                                                         destination.clone(), |this| {\n+        let Block { extent, opt_destruction_extent, span, stmts, expr, targeted_by_break } =\n+            self.hir.mirror(ast_block);\n+        self.in_opt_scope(opt_destruction_extent.map(|de|(de, source_info)), block, move |this| {\n+            this.in_scope((extent, source_info), block, move |this| {\n+                if targeted_by_break {\n+                    // This is a `break`-able block (currently only `catch { ... }`)\n+                    let exit_block = this.cfg.start_new_block();\n+                    let block_exit = this.in_breakable_scope(\n+                        None, exit_block, destination.clone(), |this| {\n+                            this.ast_block_stmts(destination, block, span, stmts, expr)\n+                        });\n+                    this.cfg.terminate(unpack!(block_exit), source_info,\n+                                       TerminatorKind::Goto { target: exit_block });\n+                    exit_block.unit()\n+                } else {\n                     this.ast_block_stmts(destination, block, span, stmts, expr)\n-                });\n-                this.cfg.terminate(unpack!(block_exit), source_info,\n-                                   TerminatorKind::Goto { target: exit_block });\n-                exit_block.unit()\n-            } else {\n-                this.ast_block_stmts(destination, block, span, stmts, expr)\n-            }\n+                }\n+            })\n         })\n     }\n \n@@ -66,14 +69,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // First we build all the statements in the block.\n         let mut let_extent_stack = Vec::with_capacity(8);\n         let outer_visibility_scope = this.visibility_scope;\n+        let source_info = this.source_info(span);\n         for stmt in stmts {\n-            let Stmt { span: _, kind } = this.hir.mirror(stmt);\n+            let Stmt { span, kind, opt_destruction_extent } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n-                    unpack!(block = this.in_scope(scope, block, |this| {\n-                        let expr = this.hir.mirror(expr);\n-                        this.stmt_expr(block, expr)\n-                    }));\n+                    unpack!(block = this.in_opt_scope(\n+                        opt_destruction_extent.map(|de|(de, source_info)), block, |this| {\n+                            this.in_scope((scope, source_info), block, |this| {\n+                                let expr = this.hir.mirror(expr);\n+                                this.stmt_expr(block, expr)\n+                            })\n+                        }));\n                 }\n                 StmtKind::Let { remainder_scope, init_scope, pattern, initializer } => {\n                     let tcx = this.hir.tcx();\n@@ -89,10 +96,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                     // Evaluate the initializer, if present.\n                     if let Some(init) = initializer {\n-                        unpack!(block = this.in_scope(init_scope, block, move |this| {\n-                            // FIXME #30046                              ^~~~\n-                            this.expr_into_pattern(block, pattern, init)\n-                        }));\n+                        unpack!(block = this.in_opt_scope(\n+                            opt_destruction_extent.map(|de|(de, source_info)), block, move |this| {\n+                                this.in_scope((init_scope, source_info), block, move |this| {\n+                                    // FIXME #30046                             ^~~~\n+                                    this.expr_into_pattern(block, pattern, init)\n+                                })\n+                            }));\n                     } else {\n                         this.visit_bindings(&pattern, &mut |this, _, _, node, span, _| {\n                             this.storage_live_binding(block, node, span);\n@@ -112,13 +122,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         if let Some(expr) = expr {\n             unpack!(block = this.into(destination, block, expr));\n         } else {\n-            let source_info = this.source_info(span);\n             this.cfg.push_assign_unit(block, source_info, destination);\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block\n         // itself.\n         for extent in let_extent_stack.into_iter().rev() {\n-            unpack!(block = this.pop_scope(extent, block));\n+            unpack!(block = this.pop_scope((extent, source_info), block));\n         }\n         // Restore the original visibility scope.\n         this.visibility_scope = outer_visibility_scope;"}, {"sha": "c20f8bde783868baf7ddda11ee62477b6fb28b8a", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -14,6 +14,7 @@\n //! Routines for manipulating the control-flow graph.\n \n use build::CFG;\n+use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n \n impl<'tcx> CFG<'tcx> {\n@@ -43,6 +44,16 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n+    pub fn push_end_region(&mut self,\n+                           block: BasicBlock,\n+                           source_info: SourceInfo,\n+                           extent: CodeExtent) {\n+        self.push(block, Statement {\n+            source_info: source_info,\n+            kind: StatementKind::EndRegion(extent),\n+        });\n+    }\n+\n     pub fn push_assign(&mut self,\n                        block: BasicBlock,\n                        source_info: SourceInfo,"}, {"sha": "04c23215463dd9360cc0574c43d30f39a7c4e0f3", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr_span);\n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n-                this.in_scope(extent, block, |this| this.as_lvalue(block, value))\n+                this.in_scope((extent, source_info), block, |this| this.as_lvalue(block, value))\n             }\n             ExprKind::Field { lhs, name } => {\n                 let lvalue = unpack!(block = this.as_lvalue(block, lhs));"}, {"sha": "4679e0bb0a5c31fde0e632057a444e9a4e5ccf4f", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -56,6 +56,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let this = self;\n \n         if let ExprKind::Scope { extent, value } = expr.kind {\n+            let source_info = this.source_info(expr.span);\n+            let extent = (extent, source_info);\n             return this.in_scope(extent, block, |this| {\n                 this.as_operand(block, scope, value)\n             });"}, {"sha": "2512291f1a44f373a7c470d79004908baf7481ad", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -59,6 +59,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n+                let extent = (extent, source_info);\n                 this.in_scope(extent, block, |this| this.as_rvalue(block, scope, value))\n             }\n             ExprKind::Repeat { value, count } => {\n@@ -99,7 +100,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // to start, malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n                 this.cfg.push_assign(block, source_info, &result, box_);\n-                this.in_scope(value_extents, block, |this| {\n+                this.in_scope((value_extents, source_info), block, |this| {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.schedule_box_free(expr_span, value_extents, &result, value.ty);\n                     // initialize the box contents:"}, {"sha": "9be306d2848b3f4c37f86f47895a9a54ee42e418", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -39,16 +39,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                block, temp_lifetime, expr);\n         let this = self;\n \n+        let expr_span = expr.span;\n+        let source_info = this.source_info(expr_span);\n         if let ExprKind::Scope { extent, value } = expr.kind {\n-            return this.in_scope(extent, block, |this| {\n+            return this.in_scope((extent, source_info), block, |this| {\n                 this.as_temp(block, temp_lifetime, value)\n             });\n         }\n \n         let expr_ty = expr.ty.clone();\n-        let expr_span = expr.span;\n         let temp = this.temp(expr_ty.clone(), expr_span);\n-        let source_info = this.source_info(expr_span);\n \n         if !expr_ty.is_never() && temp_lifetime.is_some() {\n             this.cfg.push(block, Statement {"}, {"sha": "b7abc707a380dd8ec2c6058aa2b33cbc4517b372", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -39,6 +39,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n+                let extent = (extent, source_info);\n                 this.in_scope(extent, block, |this| this.into(destination, block, value))\n             }\n             ExprKind::Block { body: ast_block } => {\n@@ -233,7 +234,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             .collect();\n \n                     let success = this.cfg.start_new_block();\n-                    let cleanup = this.diverge_cleanup();\n+                    let cleanup = this.diverge_cleanup(expr_span);\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n                         args: args,"}, {"sha": "3120ac21908246e1a7cd78b99f0e47f59565dbff", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -24,7 +24,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n                 let value = this.hir.mirror(value);\n-                this.in_scope(extent, block, |this| this.stmt_expr(block, value))\n+                this.in_scope((extent, source_info), block, |this| this.stmt_expr(block, value))\n             }\n             ExprKind::Assign { lhs, rhs } => {\n                 let lhs = this.hir.mirror(lhs);\n@@ -81,7 +81,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     *this.find_breakable_scope(expr_span, label);\n                 let continue_block = continue_block.expect(\n                     \"Attempted to continue in non-continuable breakable block\");\n-                this.exit_scope(expr_span, extent, block, continue_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, continue_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Break { label, value } => {\n@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 } else {\n                     this.cfg.push_assign_unit(block, source_info, &destination)\n                 }\n-                this.exit_scope(expr_span, extent, block, break_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, break_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Return { value } => {\n@@ -116,7 +116,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n                 let extent = this.extent_of_return_scope();\n                 let return_block = this.return_block();\n-                this.exit_scope(expr_span, extent, block, return_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::InlineAsm { asm, outputs, inputs } => {"}, {"sha": "f4d43e041ae87babe9ae8bdc20fba65b0de2edbd", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let bool_ty = self.hir.bool_ty();\n                     let eq_result = self.temp(bool_ty, test.span);\n                     let eq_block = self.cfg.start_new_block();\n-                    let cleanup = self.diverge_cleanup();\n+                    let cleanup = self.diverge_cleanup(test.span);\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,"}, {"sha": "eb1414d42e179668aef98940a483ff9e637f33ec", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -339,8 +339,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let call_site_extent = CodeExtent::CallSiteScope(body.id());\n     let arg_extent = CodeExtent::ParameterScope(body.id());\n     let mut block = START_BLOCK;\n-    unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n-        unpack!(block = builder.in_scope(arg_extent, block, |builder| {\n+    let source_info = builder.source_info(span);\n+    unpack!(block = builder.in_scope((call_site_extent, source_info), block, |builder| {\n+        unpack!(block = builder.in_scope((arg_extent, source_info), block, |builder| {\n             builder.args_and_body(block, &arguments, arg_extent, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace"}, {"sha": "469fd5750a2f934751a4cfb231fdd00f17c72584", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -94,10 +94,11 @@ use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use syntax_pos::Span;\n+use syntax_pos::{Span};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n \n+#[derive(Debug)]\n pub struct Scope<'tcx> {\n     /// The visibility scope this scope was created in.\n     visibility_scope: VisibilityScope,\n@@ -114,7 +115,7 @@ pub struct Scope<'tcx> {\n     ///  * pollutting the cleanup MIR with StorageDead creates\n     ///    landing pads even though there's no actual destructors\n     ///  * freeing up stack space has no effect during unwinding\n-    needs_cleanup: bool,\n+    pub(super) needs_cleanup: bool,\n \n     /// set of lvalues to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n@@ -141,6 +142,7 @@ pub struct Scope<'tcx> {\n     cached_exits: FxHashMap<(BasicBlock, CodeExtent), BasicBlock>,\n }\n \n+#[derive(Debug)]\n struct DropData<'tcx> {\n     /// span where drop obligation was incurred (typically where lvalue was declared)\n     span: Span,\n@@ -152,6 +154,7 @@ struct DropData<'tcx> {\n     kind: DropKind\n }\n \n+#[derive(Debug)]\n enum DropKind {\n     Value {\n         /// The cached block for the cleanups-on-diverge path. This block\n@@ -163,6 +166,7 @@ enum DropKind {\n     Storage\n }\n \n+#[derive(Debug)]\n struct FreeData<'tcx> {\n     /// span where free obligation was incurred\n     span: Span,\n@@ -269,17 +273,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         res\n     }\n \n+    pub fn in_opt_scope<F, R>(&mut self,\n+                              opt_extent: Option<(CodeExtent, SourceInfo)>,\n+                              mut block: BasicBlock,\n+                              f: F)\n+                              -> BlockAnd<R>\n+        where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n+    {\n+        debug!(\"in_opt_scope(opt_extent={:?}, block={:?})\", opt_extent, block);\n+        if let Some(extent) = opt_extent { self.push_scope(extent.0); }\n+        let rv = unpack!(block = f(self));\n+        if let Some(extent) = opt_extent {\n+            unpack!(block = self.pop_scope(extent, block));\n+        }\n+        debug!(\"in_scope: exiting opt_extent={:?} block={:?}\", opt_extent, block);\n+        block.and(rv)\n+    }\n+\n     /// Convenience wrapper that pushes a scope and then executes `f`\n     /// to build its contents, popping the scope afterwards.\n     pub fn in_scope<F, R>(&mut self,\n-                          extent: CodeExtent,\n+                          extent: (CodeExtent, SourceInfo),\n                           mut block: BasicBlock,\n                           f: F)\n                           -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n-        self.push_scope(extent);\n+        self.push_scope(extent.0);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(extent, block));\n         debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n@@ -307,20 +328,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// drops onto the end of `block` that are needed.  This must\n     /// match 1-to-1 with `push_scope`.\n     pub fn pop_scope(&mut self,\n-                     extent: CodeExtent,\n+                     extent: (CodeExtent, SourceInfo),\n                      mut block: BasicBlock)\n                      -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n         // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n         // to make sure all the `cached_block`s are filled in.\n-        self.diverge_cleanup();\n+        self.diverge_cleanup(extent.1.span);\n         let scope = self.scopes.pop().unwrap();\n-        assert_eq!(scope.extent, extent);\n+        assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n                                           &scope,\n                                           &self.scopes,\n                                           block,\n                                           self.arg_count));\n+\n+        self.cfg.push_end_region(block, extent.1, scope.extent);\n         block.unit()\n     }\n \n@@ -331,11 +354,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// module comment for details.\n     pub fn exit_scope(&mut self,\n                       span: Span,\n-                      extent: CodeExtent,\n+                      extent: (CodeExtent, SourceInfo),\n                       mut block: BasicBlock,\n                       target: BasicBlock) {\n         debug!(\"exit_scope(extent={:?}, block={:?}, target={:?})\", extent, block, target);\n-        let scope_count = 1 + self.scopes.iter().rev().position(|scope| scope.extent == extent)\n+        let scope_count = 1 + self.scopes.iter().rev().position(|scope| scope.extent == extent.0)\n                                                       .unwrap_or_else(||{\n             span_bug!(span, \"extent {:?} does not enclose\", extent)\n         });\n@@ -346,22 +369,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let mut rest = &mut self.scopes[(len - scope_count)..];\n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n             rest = rest_;\n-            block = if let Some(&e) = scope.cached_exits.get(&(target, extent)) {\n+            block = if let Some(&e) = scope.cached_exits.get(&(target, extent.0)) {\n                 self.cfg.terminate(block, scope.source_info(span),\n                                    TerminatorKind::Goto { target: e });\n                 return;\n             } else {\n                 let b = self.cfg.start_new_block();\n                 self.cfg.terminate(block, scope.source_info(span),\n                                    TerminatorKind::Goto { target: b });\n-                scope.cached_exits.insert((target, extent), b);\n+                scope.cached_exits.insert((target, extent.0), b);\n                 b\n             };\n             unpack!(block = build_scope_drops(&mut self.cfg,\n                                               scope,\n                                               rest,\n                                               block,\n                                               self.arg_count));\n+\n+            // End all regions for scopes out of which we are breaking.\n+            self.cfg.push_end_region(block, extent.1, scope.extent);\n+\n             if let Some(ref free_data) = scope.free {\n                 let next = self.cfg.start_new_block();\n                 let free = build_free(self.hir.tcx(), &tmp, free_data, next);\n@@ -590,7 +617,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// This path terminates in Resume. Returns the start of the path.\n     /// See module comment for more details. None indicates there\u2019s no\n     /// cleanup to do at this point.\n-    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> {\n+    pub fn diverge_cleanup(&mut self, span: Span) -> Option<BasicBlock> {\n         if !self.scopes.iter().any(|scope| scope.needs_cleanup) {\n             return None;\n         }\n@@ -623,8 +650,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             resumeblk\n         };\n \n-        for scope in scopes.iter_mut().filter(|s| s.needs_cleanup) {\n-            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, scope, target);\n+        for scope in scopes.iter_mut() {\n+            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target);\n         }\n         Some(target)\n     }\n@@ -640,7 +667,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n+        let diverge_target = self.diverge_cleanup(span);\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Drop {\n                                location: location,\n@@ -658,7 +685,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                   value: Operand<'tcx>) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n+        let diverge_target = self.diverge_cleanup(span);\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::DropAndReplace {\n                                location: location,\n@@ -681,7 +708,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n \n         let success_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup();\n+        let cleanup = self.diverge_cleanup(span);\n \n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Assert {\n@@ -750,16 +777,17 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                        cfg: &mut CFG<'tcx>,\n                                        unit_temp: &Lvalue<'tcx>,\n+                                       span: Span,\n                                        scope: &mut Scope<'tcx>,\n                                        mut target: BasicBlock)\n                                        -> BasicBlock\n {\n     // Build up the drops in **reverse** order. The end result will\n     // look like:\n     //\n-    //    [drops[n]] -...-> [drops[0]] -> [Free] -> [target]\n-    //    |                                    |\n-    //    +------------------------------------+\n+    //    [EndRegion Block] -> [drops[n]] -...-> [drops[0]] -> [Free] -> [target]\n+    //    |                                                         |\n+    //    +---------------------------------------------------------+\n     //     code for scope\n     //\n     // The code in this function reads from right to left. At each\n@@ -789,9 +817,16 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // Next, build up the drops. Here we iterate the vector in\n     // *forward* order, so that we generate drops[0] first (right to\n     // left in diagram above).\n-    for drop_data in &mut scope.drops {\n+    for (j, drop_data) in scope.drops.iter_mut().enumerate() {\n+        debug!(\"build_diverge_scope drop_data[{}]: {:?}\", j, drop_data);\n         // Only full value drops are emitted in the diverging path,\n         // not StorageDead.\n+        //\n+        // Note: This may not actually be what we desire (are we\n+        // \"freeing\" stack storage as we unwind, or merely observing a\n+        // frozen stack)? In particular, the intent may have been to\n+        // match the behavior of clang, but on inspection eddyb says\n+        // this is not what clang does.\n         let cached_block = match drop_data.kind {\n             DropKind::Value { ref mut cached_block } => cached_block,\n             DropKind::Storage => continue\n@@ -811,6 +846,15 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         };\n     }\n \n+    // Finally, push the EndRegion block, used by mir-borrowck. (Block\n+    // becomes trivial goto after pass that removes all EndRegions.)\n+    {\n+        let block = cfg.start_new_cleanup_block();\n+        cfg.push_end_region(block, source_info(span), scope.extent);\n+        cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n+        target = block\n+    }\n+\n     target\n }\n "}, {"sha": "fad070ca8d8f9c5acd0fc69a351a1ef7b896bde0", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -22,9 +22,14 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n         // We have to eagerly translate the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = mirror_stmts(cx, self.id, &*self.stmts);\n+        let opt_def_id = cx.tcx.hir.opt_local_def_id(self.id);\n+        let opt_destruction_extent = opt_def_id.and_then(|def_id| {\n+            cx.tcx.region_maps(def_id).opt_destruction_extent(self.id)\n+        });\n         Block {\n             targeted_by_break: self.targeted_by_break,\n             extent: CodeExtent::Misc(self.id),\n+            opt_destruction_extent: opt_destruction_extent,\n             span: self.span,\n             stmts: stmts,\n             expr: self.expr.to_ref(),\n@@ -37,7 +42,11 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 stmts: &'tcx [hir::Stmt])\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n+    let opt_def_id = cx.tcx.hir.opt_local_def_id(block_id);\n     for (index, stmt) in stmts.iter().enumerate() {\n+        let opt_dxn_ext = opt_def_id.and_then(|def_id| {\n+            cx.tcx.region_maps(def_id).opt_destruction_extent(stmt.node.id())\n+        });\n         match stmt.node {\n             hir::StmtExpr(ref expr, id) |\n             hir::StmtSemi(ref expr, id) => {\n@@ -47,6 +56,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         scope: CodeExtent::Misc(id),\n                         expr: expr.to_ref(),\n                     },\n+                    opt_destruction_extent: opt_dxn_ext,\n                 })))\n             }\n             hir::StmtDecl(ref decl, id) => {\n@@ -69,6 +79,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 pattern: pattern,\n                                 initializer: local.init.to_ref(),\n                             },\n+                            opt_destruction_extent: opt_dxn_ext,\n                         })));\n                     }\n                 }"}, {"sha": "bb11cce748751deba568ab440df4e50dcd316ca6", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -33,6 +33,7 @@ pub use rustc_const_eval::pattern::{BindingMode, Pattern, PatternKind, FieldPatt\n pub struct Block<'tcx> {\n     pub targeted_by_break: bool,\n     pub extent: CodeExtent,\n+    pub opt_destruction_extent: Option<CodeExtent>,\n     pub span: Span,\n     pub stmts: Vec<StmtRef<'tcx>>,\n     pub expr: Option<ExprRef<'tcx>>,\n@@ -47,6 +48,7 @@ pub enum StmtRef<'tcx> {\n pub struct Stmt<'tcx> {\n     pub span: Span,\n     pub kind: StmtKind<'tcx>,\n+    pub opt_destruction_extent: Option<CodeExtent>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "36125f9454365eb09b739f0f7bcd44a09906192c", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module provides one pass, `CleanEndRegions`, that reduces the\n+//! set of `EndRegion` statements in the MIR.\n+//!\n+//! The \"pass\" is actually implemented as two traversals (aka visits)\n+//! of the input MIR. The first traversal, `GatherBorrowedRegions`,\n+//! finds all of the regions in the MIR that are involved in a borrow.\n+//!\n+//! The second traversal, `DeleteTrivialEndRegions`, walks over the\n+//! MIR and removes any `EndRegion` that is applied to a region that\n+//! was not seen in the previous pass.\n+\n+use rustc_data_structures::fx::FxHashSet;\n+\n+use rustc::middle::region::CodeExtent;\n+use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n+use rustc::mir::visit::{MutVisitor, Visitor};\n+use rustc::ty::{RegionKind, TyCtxt};\n+\n+pub struct CleanEndRegions;\n+\n+struct GatherBorrowedRegions {\n+    seen_regions: FxHashSet<CodeExtent>,\n+}\n+\n+struct DeleteTrivialEndRegions<'a> {\n+    seen_regions: &'a FxHashSet<CodeExtent>,\n+}\n+\n+impl MirPass for CleanEndRegions {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        let mut gather = GatherBorrowedRegions { seen_regions: FxHashSet() };\n+        gather.visit_mir(mir);\n+\n+        let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n+        delete.visit_mir(mir);\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions {\n+    fn visit_rvalue(&mut self,\n+                    rvalue: &Rvalue<'tcx>,\n+                    location: Location) {\n+        if let Rvalue::Ref(r, _, _) = *rvalue {\n+            if let RegionKind::ReScope(ce) = *r {\n+                self.seen_regions.insert(ce);\n+            }\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+}\n+\n+impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        let mut delete_it = false;\n+\n+        if let StatementKind::EndRegion(ref extent) = statement.kind {\n+            if !self.seen_regions.contains(extent) {\n+                delete_it = true;\n+            }\n+        }\n+\n+        if delete_it {\n+            statement.kind = StatementKind::Nop;\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n+}"}, {"sha": "e809695c18043e971fb06d55c8f6b6692ab15b9a", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -65,6 +65,15 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n                             substs: &mut ClosureSubsts<'tcx>) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n+\n+    fn visit_statement(&mut self,\n+                       _block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       _location: Location) {\n+        if let StatementKind::EndRegion(_) = statement.kind {\n+            statement.kind = StatementKind::Nop;\n+        }\n+    }\n }\n \n pub struct EraseRegions;"}, {"sha": "4594c611d596f6cf06de8ee054fdeca25969d5e9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -24,6 +24,7 @@ use syntax::ast;\n use syntax_pos::{DUMMY_SP, Span};\n use transform;\n \n+pub mod clean_end_regions;\n pub mod simplify_branches;\n pub mod simplify;\n pub mod erase_regions;"}, {"sha": "05a6cdd57ffceed98be29fe1f1ce1fbcfb22dd43", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -894,6 +894,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::InlineAsm {..} |\n+                StatementKind::EndRegion(_) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "efde39ad6a4c11323dd44b88c964910f2bc39efc", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -413,6 +413,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             StatementKind::InlineAsm { .. } |\n+            StatementKind::EndRegion(_) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "ac121131eb999544419365ae272069e03642dd68", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -46,6 +46,7 @@ impl<'tcx> MirPatch<'tcx> {\n         for (bb, block) in mir.basic_blocks().iter_enumerated() {\n             if let TerminatorKind::Resume = block.terminator().kind {\n                 if block.statements.len() > 0 {\n+                    assert!(resume_stmt_block.is_none());\n                     resume_stmt_block = Some(bb);\n                 } else {\n                     resume_block = Some(bb);"}, {"sha": "4dd38cc515c77a83d69ca962cb63c7784c048c2f", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -125,6 +125,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"Statement\", statement);\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n+            StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\",\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\","}, {"sha": "16ef32ccf5777b7a6c121c3564dd898ecca3de3e", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -284,6 +284,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     }\n                     mir::StatementKind::StorageLive(_) |\n                     mir::StatementKind::StorageDead(_) |\n+                    mir::StatementKind::EndRegion(_) |\n                     mir::StatementKind::Nop => {}\n                     mir::StatementKind::InlineAsm { .. } |\n                     mir::StatementKind::SetDiscriminant{ .. } => {"}, {"sha": "170a76a49497bf738aead0e3b8de3092b95f8383", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -86,6 +86,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 asm::trans_inline_asm(&bcx, asm, outputs, input_vals);\n                 bcx\n             }\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => bcx,\n         }\n     }"}, {"sha": "1961060c2c2664077c284daf9e351e935f563343", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -32,9 +32,9 @@ pub fn droppy() {\n // CHECK-NOT: invoke{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK-NOT: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK-NOT: {{(call|invoke).*}}drop{{.*}}SomeUniqueName"}, {"sha": "28a124e3c61c8c588a28bfe61c6cb4ebe87fc26d", "filename": "src/test/mir-opt/README.md", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -22,7 +22,32 @@ All the test information is in comments so the test is runnable.\n \n For each $file_name, compiletest expects [$expected_line_0, ...,\n $expected_line_N] to appear in the dumped MIR in order.  Currently it allows\n-other non-matched lines before, after and in-between.  \n+other non-matched lines before, after and in-between. Note that this includes\n+lines that end basic blocks or begin new ones; it is good practice\n+in your tests to include the terminator for each of your basic blocks as an\n+internal sanity check guarding against a test like:\n+\n+```\n+bb0: {\n+    StorageLive(_1);\n+    _1 = const true;\n+    StorageDead(_1);\n+}\n+```\n+\n+that will inadvertantly pattern-matching against:\n+\n+```\n+bb0: {\n+    StorageLive(_1);\n+    _1 = const true;\n+    goto -> bb1\n+}\n+bb1: {\n+    StorageDead(_1);\n+    return;\n+}\n+```\n \n Lines match ignoring whitespace, and the prefix \"//\" is removed.\n "}, {"sha": "ef5158a403a93f235568d2965b6560a521527fbe", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -50,7 +50,7 @@ fn main() {\n //         StorageLive(_6);\n //         StorageLive(_7);\n //         _7 = _4;\n-//         replace(_6 <- _7) -> [return: bb5, unwind: bb4];\n+//         replace(_6 <- _7) -> [return: bb6, unwind: bb7];\n //     }\n //     bb1: {\n //         resume;\n@@ -59,24 +59,30 @@ fn main() {\n //         drop(_4) -> bb1;\n //     }\n //     bb3: {\n-//         drop(_6) -> bb2;\n+//         goto -> bb2;\n //     }\n //     bb4: {\n-//         drop(_7) -> bb3;\n+//         drop(_6) -> bb3;\n //     }\n //     bb5: {\n-//         drop(_7) -> [return: bb6, unwind: bb3];\n+//         goto -> bb4;\n //     }\n //     bb6: {\n+//         drop(_7) -> [return: bb8, unwind: bb4];\n+//     }\n+//     bb7: {\n+//         drop(_7) -> bb5;\n+//     }\n+//     bb8: {\n //         StorageDead(_7);\n //         _0 = ();\n-//         drop(_6) -> [return: bb7, unwind: bb2];\n+//         drop(_6) -> [return: bb9, unwind: bb2];\n //     }\n-//     bb7: {\n+//     bb9: {\n //         StorageDead(_6);\n-//         drop(_4) -> bb8;\n+//         drop(_4) -> bb10;\n //     }\n-//     bb8: {\n+//     bb10: {\n //         StorageDead(_4);\n //         StorageDead(_2);\n //         StorageDead(_1);"}, {"sha": "55dac4440275fbe0a277d6772d55d546a54efbc9", "filename": "src/test/mir-opt/end_region_1.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// This is just about the simplest program that exhibits an EndRegion.\n+\n+fn main() {\n+    let a = 3;\n+    let b = &a;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: i32;\n+//     let _2: &'6_1rce i32;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = const 3i32;\n+//         StorageLive(_2);\n+//         _2 = &'6_1rce _1;\n+//         _0 = ();\n+//         StorageDead(_2);\n+//         EndRegion('6_1rce);\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "a1386ec47a13bd91231ef0601c944a40ef9c4c69", "filename": "src/test/mir-opt/end_region_2.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// We will EndRegion for borrows in a loop that occur before break but\n+// not those after break.\n+\n+fn main() {\n+    loop {\n+        let a = true;\n+        let b = &a;\n+        if a { break; }\n+        let c = &a;\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _2: bool;\n+//     let _3: &'7_1rce bool;\n+//     let _7: &'7_3rce bool;\n+//     let mut _4: ();\n+//     let mut _5: bool;\n+//     bb0: {\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         StorageLive(_2);\n+//         _2 = const true;\n+//         StorageLive(_3);\n+//         _3 = &'7_1rce _2;\n+//         StorageLive(_5);\n+//         _5 = _2;\n+//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//     }\n+//     bb2: {\n+//         _0 = ();\n+//         StorageDead(_5);\n+//         StorageDead(_3);\n+//         EndRegion('7_1rce);\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+//     bb3: {\n+//         StorageDead(_5);\n+//         StorageLive(_7);\n+//         _7 = &'7_3rce _2;\n+//         _1 = ();\n+//         StorageDead(_7);\n+//         EndRegion('7_3rce);\n+//         StorageDead(_3);\n+//         EndRegion('7_1rce);\n+//         StorageDead(_2);\n+//         goto -> bb1;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "b3d2809e76cebfc6ca97e9effaa222e8bcd293ba", "filename": "src/test/mir-opt/end_region_3.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// Binding the borrow's subject outside the loop does not increase the\n+// scope of the borrow.\n+\n+fn main() {\n+    let mut a;\n+    loop {\n+        a = true;\n+        let b = &a;\n+        if a { break; }\n+        let c = &a;\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let mut _1: bool;\n+//     let _3: &'9_1rce bool;\n+//     let _7: &'9_3rce bool;\n+//     let mut _2: ();\n+//     let mut _4: ();\n+//     let mut _5: bool;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         _1 = const true;\n+//         StorageLive(_3);\n+//         _3 = &'9_1rce _1;\n+//         StorageLive(_5);\n+//         _5 = _1;\n+//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//     }\n+//     bb2: {\n+//         _0 = ();\n+//         StorageDead(_5);\n+//         StorageDead(_3);\n+//         EndRegion('9_1rce);\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+//     bb3: {\n+//         _4 = ();\n+//         StorageDead(_5);\n+//         StorageLive(_7);\n+//         _7 = &'9_3rce _1;\n+//         _2 = ();\n+//         StorageDead(_7);\n+//         EndRegion('9_3rce);\n+//         StorageDead(_3);\n+//         EndRegion('9_1rce);\n+//         goto -> bb1;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "16ade9f96fd1e5c52de81e3fbaa61381f54503f7", "filename": "src/test/mir-opt/end_region_4.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Direct borrows.\n+\n+fn main() {\n+    let d = D(0);\n+    let a = 0;\n+    let b = &a;\n+    foo(*b);\n+    let c = &a;\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo(i: i32) {\n+    if i > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let _3: i32;\n+//     let _4: &'6_2rce i32;\n+//     let _7: &'6_4rce i32;\n+//     let mut _5: ();\n+//     let mut _6: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n+//         _3 = const 0i32;\n+//         StorageLive(_4);\n+//         _4 = &'6_2rce _3;\n+//         StorageLive(_6);\n+//         _6 = (*_4);\n+//         _5 = const foo(_6) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_6);\n+//         StorageLive(_7);\n+//         _7 = &'6_4rce _3;\n+//         _0 = ();\n+//         StorageDead(_7);\n+//         EndRegion('6_4rce);\n+//         StorageDead(_4);\n+//         EndRegion('6_2rce);\n+//         StorageDead(_3);\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('6_2rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "513632a4cdf38e89416f62cbc8ace0fc614c88cf", "filename": "src/test/mir-opt/end_region_5.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Borrowing via by-ref closure.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(|| -> i32 { d.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(18) d: &'19mce D];\n+//     let mut _5: &'19mce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = &'19mce _1;\n+//         _4 = [closure@NodeId(18)] { d: _5 };\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('19mce);\n+//         _0 = ();\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('19mce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node18.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(18) d:&'19mce D]) -> i32 {\n+//    let mut _0: i32;\n+//    let mut _2: i32;\n+//\n+//    bb0: {\n+//        StorageLive(_2);\n+//        _2 = ((*(_1.0: &'19mce D)).0: i32);\n+//        _0 = _2;\n+//        StorageDead(_2);\n+//        return;\n+//    }\n+// END rustc.node18.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "e82556f3ce4bbce13e894e05606f28decac57353", "filename": "src/test/mir-opt/end_region_6.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: 2nd borrow within by-ref closure.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(|| -> i32 { let r = &d; r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(22) d:&'23mce D];\n+//     let mut _5: &'23mce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = &'23mce _1;\n+//         _4 = [closure@NodeId(22)] { d: _5 };\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('23mce);\n+//         _0 = ();\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('23mce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) d:&'23mce D]) -> i32 {\n+//     let mut _0: i32;\n+//     let _2: &'14_0rce D;\n+//     let mut _3: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = &'14_0rce (*(_1.0: &'23mce D));\n+//         StorageLive(_3);\n+//         _3 = ((*_2).0: i32);\n+//         _0 = _3;\n+//         StorageDead(_3);\n+//         StorageDead(_2);\n+//         EndRegion('14_0rce);\n+//         return;\n+//     }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "3fbd3f368659dd1dc58ef2e863d2e4c6af578f85", "filename": "src/test/mir-opt/end_region_7.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Borrow of moved data.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(move || -> i32 { let r = &d; r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(22) d:D];\n+//     let mut _5: D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = _1;\n+//         _4 = [closure@NodeId(22)] { d: _5 };\n+//         drop(_5) -> [return: bb4, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb3: {\n+//         drop(_4) -> bb2;\n+//     }\n+//     bb4: {\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb5, unwind: bb3];\n+//     }\n+//     bb5: {\n+//         drop(_4) -> [return: bb6, unwind: bb2];\n+//     }\n+//     bb6: {\n+//         StorageDead(_4);\n+//         _0 = ();\n+//         drop(_1) -> bb7;\n+//     }\n+//     bb7: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n+//     let mut _0: i32;\n+//     let _2: &'14_0rce D;\n+//     let mut _3: ();\n+//     let mut _4: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = &'14_0rce (_1.0: D);\n+//         StorageLive(_4);\n+//         _4 = ((*_2).0: i32);\n+//         _0 = _4;\n+//         StorageDead(_4);\n+//         StorageDead(_2);\n+//         EndRegion('14_0rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb1: {\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "7fb3f0b91181a082655e63f9706d4b0c77ee2803", "filename": "src/test/mir-opt/end_region_8.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Move of borrow into closure.\n+\n+fn main() {\n+    let d = D(0);\n+    let r = &d;\n+    foo(move || -> i32 { r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let _3: &'6_1rce D;\n+//     let mut _2: ();\n+//     let mut _4: ();\n+//     let mut _5: [closure@NodeId(22) r:&'6_1rce D];\n+//     let mut _6: &'6_1rce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n+//         _3 = &'6_1rce _1;\n+//         StorageLive(_5);\n+//         StorageLive(_6);\n+//         _6 = _3;\n+//         _5 = [closure@NodeId(22)] { r: _6 };\n+//         StorageDead(_6);\n+//         _4 = const foo(_5) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_5);\n+//         _0 = ();\n+//         StorageDead(_3);\n+//         EndRegion('6_1rce);\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('6_1rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) r:&'6_1rce D]) -> i32 {\n+//     let mut _0: i32;\n+//     let mut _2: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = ((*(_1.0: &'6_1rce D)).0: i32);\n+//         _0 = _2;\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "deff984e4d0de63376cbb24461f83115694a58f1", "filename": "src/test/mir-opt/end_region_9.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// This test models a scenario that arielb1 found during review.\n+// Namely, any filtering of EndRegions must ensure to continue to emit\n+// any necessary EndRegions that occur earlier in the source than the\n+// first borrow involving that region.\n+//\n+// It is tricky to actually construct examples of this, which is the\n+// main reason that I am keeping this test even though I have now\n+// removed the pre-filter that motivated the test in the first place.\n+\n+fn main() {\n+    let mut second_iter = false;\n+    let x = 3;\n+    'a: loop {\n+        let mut y;\n+        loop {\n+            if second_iter {\n+                break 'a; // want to generate `EndRegion('a)` here\n+            } else {\n+                y = &/*'a*/ x;\n+            }\n+            second_iter = true;\n+        }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: bool;\n+//     let _2: i32;\n+//     let mut _4: &'13_0rce i32;\n+//     let mut _3: ();\n+//     let mut _5: !;\n+//     let mut _6: ();\n+//     let mut _7: bool;\n+//     let mut _8: !;\n+//\n+//     bb0: {\n+//        StorageLive(_1);\n+//        _1 = const false;\n+//        StorageLive(_2);\n+//        _2 = const 3i32;\n+//        StorageLive(_4);\n+//        goto -> bb1;\n+//    }\n+//\n+//    bb1: {\n+//        StorageLive(_7);\n+//        _7 = _1;\n+//        switchInt(_7) -> [0u8: bb3, otherwise: bb2];\n+//    }\n+//\n+//    bb2: {\n+//        _0 = ();\n+//        StorageDead(_7);\n+//        StorageDead(_4);\n+//        EndRegion('13_0rce);\n+//        StorageDead(_2);\n+//        StorageDead(_1);\n+//        return;\n+//    }\n+//\n+//    bb3: {\n+//        _4 = &'13_0rce _2;\n+//        _6 = ();\n+//        StorageDead(_7);\n+//        _1 = const true;\n+//        _3 = ();\n+//        goto -> bb1;\n+//    }\n+// }"}]}