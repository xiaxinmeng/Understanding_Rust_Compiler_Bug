{"sha": "20081880ad2a98bbc8c8293f96c5b284d1584d86", "node_id": "C_kwDOAAsO6NoAKDIwMDgxODgwYWQyYTk4YmJjOGM4MjkzZjk2YzViMjg0ZDE1ODRkODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T07:07:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T07:07:33Z"}, "message": "Auto merge of #107980 - Dylan-DPC:rollup-u4b19bl, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #107654 (reword descriptions of the deprecated int modules)\n - #107915 (Add `array::map` benchmarks)\n - #107961 (Avoid copy-pasting the `ilog` panic string in a bunch of places)\n - #107962 (Add a doc note about why `Chain` is not `ExactSizeIterator`)\n - #107966 (Update browser-ui-test version to 0.14.3)\n - #107970 (Hermit: Remove floor symbol)\n - #107973 (Fix unintentional UB in SIMD tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5d86cc6f3cba4cc08372e73b8024b9102f30268a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d86cc6f3cba4cc08372e73b8024b9102f30268a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20081880ad2a98bbc8c8293f96c5b284d1584d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20081880ad2a98bbc8c8293f96c5b284d1584d86", "html_url": "https://github.com/rust-lang/rust/commit/20081880ad2a98bbc8c8293f96c5b284d1584d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20081880ad2a98bbc8c8293f96c5b284d1584d86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96834f0231277e8feb8dcf185b2af082ad2e39f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/96834f0231277e8feb8dcf185b2af082ad2e39f6", "html_url": "https://github.com/rust-lang/rust/commit/96834f0231277e8feb8dcf185b2af082ad2e39f6"}, {"sha": "4bf58083ac2c8d00ec43c073b2e7b00496984c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf58083ac2c8d00ec43c073b2e7b00496984c89", "html_url": "https://github.com/rust-lang/rust/commit/4bf58083ac2c8d00ec43c073b2e7b00496984c89"}], "stats": {"total": 327, "additions": 152, "deletions": 175}, "files": [{"sha": "845c60762949b00e2b70d63bdcde1ee9da131775", "filename": "library/core/benches/array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fbenches%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fbenches%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Farray.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -0,0 +1,19 @@\n+use test::black_box;\n+use test::Bencher;\n+\n+macro_rules! map_array {\n+    ($func_name:ident, $start_item: expr, $map_item: expr, $arr_size: expr) => {\n+        #[bench]\n+        fn $func_name(b: &mut Bencher) {\n+            let arr = [$start_item; $arr_size];\n+            b.iter(|| black_box(arr).map(|_| black_box($map_item)));\n+        }\n+    };\n+}\n+\n+map_array!(map_8byte_8byte_8, 0u64, 1u64, 800);\n+map_array!(map_8byte_8byte_64, 0u64, 1u64, 6400);\n+map_array!(map_8byte_8byte_256, 0u64, 1u64, 25600);\n+\n+map_array!(map_8byte_256byte_256, 0u64, [0u64; 4], 25600);\n+map_array!(map_256byte_8byte_256, [0u64; 4], 0u64, 25600);"}, {"sha": "e4100120d825253ff01a8a3d18eee189293856ee", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -9,6 +9,7 @@\n extern crate test;\n \n mod any;\n+mod array;\n mod ascii;\n mod char;\n mod fmt;"}, {"sha": "908830d8a95141763e1db55464e48faa9e8ee5c4", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -21,6 +21,16 @@\n ///\n /// [`len`]: ExactSizeIterator::len\n ///\n+/// # When *shouldn't* an adapter be `ExactSizeIterator`?\n+///\n+/// If an adapter makes an iterator *longer*, then it's usually incorrect for\n+/// that adapter to implement `ExactSizeIterator`.  The inner exact-sized\n+/// iterator might already be `usize::MAX`-long, and thus the length of the\n+/// longer adapted iterator would no longer be exactly representable in `usize`.\n+///\n+/// This is why [`Chain<A, B>`](crate::iter::Chain) isn't `ExactSizeIterator`,\n+/// even when `A` and `B` are both `ExactSizeIterator`.\n+///\n /// # Examples\n ///\n /// Basic usage:"}, {"sha": "af02848233d997cab74c88d8052865e707ce3894", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -31,6 +31,17 @@ impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n /// The iterator must produce exactly the number of elements it reported\n /// or diverge before reaching the end.\n ///\n+/// # When *shouldn't* an adapter be `TrustedLen`?\n+///\n+/// If an adapter makes an iterator *shorter* by a given amount, then it's\n+/// usually incorrect for that adapter to implement `TrustedLen`.  The inner\n+/// iterator might return more than `usize::MAX` items, but there's no way to\n+/// know what `k` elements less than that will be, since the `size_hint` from\n+/// the inner iterator has already saturated and lost that information.\n+///\n+/// This is why [`Skip<I>`](crate::iter::Skip) isn't `TrustedLen`, even when\n+/// `I` implements `TrustedLen`.\n+///\n /// # Safety\n ///\n /// This trait must only be implemented when the contract is upheld. Consumers"}, {"sha": "0ce31b40a3845b877311ae66ab0a73bf88dc2df1", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -138,3 +138,11 @@ pub const fn i64(val: i64) -> u32 {\n pub const fn i128(val: i128) -> u32 {\n     u128(val as u128)\n }\n+\n+/// Instantiate this panic logic once, rather than for all the ilog methods\n+/// on every single primitive type.\n+#[cold]\n+#[track_caller]\n+pub const fn panic_for_nonpositive_argument() -> ! {\n+    panic!(\"argument of integer logarithm must be positive\")\n+}"}, {"sha": "479f8ffb78d01383177c6b77f6e23d4cc665a9dd", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -2331,14 +2331,17 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -2354,13 +2357,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -2376,13 +2382,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "b3b3d3b4875abedefc6e055f91072c3cbf669263", "filename": "library/core/src/num/shells/i128.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 128-bit signed integer type.\n-//!\n-//! *[See also the `i128` primitive type][i128].*\n+//! Redundant constants module for the [`i128` primitive type][i128].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "70a452e1939838a60cb27ecddc2949fe33028a0d", "filename": "library/core/src/num/shells/i16.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 16-bit signed integer type.\n-//!\n-//! *[See also the `i16` primitive type][i16].*\n+//! Redundant constants module for the [`i16` primitive type][i16].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "c30849e2591c38ac23de6bb603cbd27ca5ead2fc", "filename": "library/core/src/num/shells/i32.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 32-bit signed integer type.\n-//!\n-//! *[See also the `i32` primitive type][i32].*\n+//! Redundant constants module for the [`i32` primitive type][i32].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "77d95d712506b108b137013db68e8fdefdfd6c17", "filename": "library/core/src/num/shells/i64.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 64-bit signed integer type.\n-//!\n-//! *[See also the `i64` primitive type][i64].*\n+//! Redundant constants module for the [`i64` primitive type][i64].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "516ba8cdef3bf0520ac16907234ad4b92db57b71", "filename": "library/core/src/num/shells/i8.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 8-bit signed integer type.\n-//!\n-//! *[See also the `i8` primitive type][i8].*\n+//! Redundant constants module for the [`i8` primitive type][i8].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "828f7345bafbe8ad32d006c20b716e3f62225bd6", "filename": "library/core/src/num/shells/isize.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the pointer-sized signed integer type.\n-//!\n-//! *[See also the `isize` primitive type][isize].*\n+//! Redundant constants module for the [`isize` primitive type][isize].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b1e30e384352551e88feb44343dd0c69604db706", "filename": "library/core/src/num/shells/u128.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 128-bit unsigned integer type.\n-//!\n-//! *[See also the `u128` primitive type][u128].*\n+//! Redundant constants module for the [`u128` primitive type][u128].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b203806f46005bfb4359179c8647a250e26cfdf1", "filename": "library/core/src/num/shells/u16.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 16-bit unsigned integer type.\n-//!\n-//! *[See also the `u16` primitive type][u16].*\n+//! Redundant constants module for the [`i16` primitive type][i16].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "4c84274e752eca4f9872dd11867aac2cbf2d14d6", "filename": "library/core/src/num/shells/u32.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 32-bit unsigned integer type.\n-//!\n-//! *[See also the `u32` primitive type][u32].*\n+//! Redundant constants module for the [`u32` primitive type][u32].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "47a95c6820f2fb64dba10f794cca261c1828c442", "filename": "library/core/src/num/shells/u64.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 64-bit unsigned integer type.\n-//!\n-//! *[See also the `u64` primitive type][u64].*\n+//! Redundant constants module for the [`u64` primitive type][u64].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "360baef722869a15b6252fd64a8667e560628575", "filename": "library/core/src/num/shells/u8.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the 8-bit unsigned integer type.\n-//!\n-//! *[See also the `u8` primitive type][u8].*\n+//! Redundant constants module for the [`u8` primitive type][u8].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "44c24dfc2cf584deb0c0fffe9d6ca6bcdecf2c5a", "filename": "library/core/src/num/shells/usize.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,6 +1,4 @@\n-//! Constants for the pointer-sized unsigned integer type.\n-//!\n-//! *[See also the `usize` primitive type][usize].*\n+//! Redundant constants module for the [`usize` primitive type][usize].\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "495c44bd8594a88b8a0fd58e68f1a56634ce856b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -705,14 +705,17 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -728,13 +731,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -750,13 +756,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "20fd3dd8f090d629164a24aade18c4fbfac854e7", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -72,11 +72,6 @@ pub fn unsupported_err() -> crate::io::Error {\n     )\n }\n \n-#[no_mangle]\n-pub extern \"C\" fn floor(x: f64) -> f64 {\n-    unsafe { intrinsics::floorf64(x) }\n-}\n-\n pub fn abort_internal() -> ! {\n     unsafe {\n         abi::abort();"}, {"sha": "94ec240129270062ff0de38ed8d94933b750c117", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1 +1 @@\n-0.14.1\n\\ No newline at end of file\n+0.14.3\n\\ No newline at end of file"}, {"sha": "89436c83e25ea256e710442959448b8ada07463e", "filename": "tests/ui/simd/intrinsic/generic-cast-pass.rs", "status": "modified", "additions": 42, "deletions": 104, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -1,121 +1,59 @@\n // run-pass\n-#![allow(unused_must_use)]\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n-#![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n-#![allow(non_camel_case_types)]\n-\n-extern crate test;\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct i32x4(i32, i32, i32, i32);\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct i8x4(i8, i8, i8, i8);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct u32x4(u32, u32, u32, u32);\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct u8x4(u8, u8, u8, u8);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct f32x4(f32, f32, f32, f32);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct f64x4(f64, f64, f64, f64);\n-\n+#![feature(repr_simd, platform_intrinsics)]\n \n extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;\n }\n \n-const A: i32 = -1234567;\n-const B: i32 = 12345678;\n-const C: i32 = -123456789;\n-const D: i32 = 1234567890;\n+use std::cmp::{max, min};\n \n-trait Foo {\n-    fn is_float() -> bool { false }\n-    fn in_range(x: i32) -> bool;\n-}\n-impl Foo for i32 {\n-    fn in_range(_: i32) -> bool { true }\n-}\n-impl Foo for i8 {\n-    fn in_range(x: i32) -> bool { -128 <= x && x < 128 }\n-}\n-impl Foo for u32 {\n-    fn in_range(x: i32) -> bool { 0 <= x }\n-}\n-impl Foo for u8 {\n-    fn in_range(x: i32) -> bool { 0 <= x && x < 128 }\n-}\n-impl Foo for f32 {\n-    fn is_float() -> bool { true }\n-    fn in_range(_: i32) -> bool { true }\n-}\n-impl Foo for f64 {\n-    fn is_float() -> bool { true }\n-    fn in_range(_: i32) -> bool { true }\n-}\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 2]);\n \n fn main() {\n-    macro_rules! test {\n-        ($from: ident, $to: ident) => {{\n-            // force the casts to actually happen, or else LLVM/rustc\n-            // may fold them and get slightly different results.\n-            let (a, b, c, d) = test::black_box((A as $from, B as $from, C as $from, D as $from));\n-            // the SIMD vectors are all FOOx4, so we can concat_idents\n-            // so we don't have to pass in the extra args to the macro\n-            let mut from = simd_cast(concat_idents!($from, x4)(a, b, c, d));\n-            let mut to = concat_idents!($to, x4)(a as $to,\n-                                                 b as $to,\n-                                                 c as $to,\n-                                                 d as $to);\n-            // assist type inference, it needs to know what `from` is\n-            // for the `if` statements.\n-            to == from;\n+    unsafe {\n+        let u = V::<u32>([i16::MIN as u32, i16::MAX as u32]);\n+        let i: V<i16> = simd_cast(u);\n+        assert_eq!(i.0[0], u.0[0] as i16);\n+        assert_eq!(i.0[1], u.0[1] as i16);\n+    }\n \n-            // there are platform differences for some out of range\n-            // casts, so we just normalize such things: it's OK for\n-            // \"invalid\" calculations to result in nonsense answers.\n-            // (e.g., negative float to unsigned integer goes through a\n-            // library routine on the default i686 platforms, and the\n-            // implementation of that routine differs on e.g., Linux\n-            // vs. macOS, resulting in different answers.)\n-            if $from::is_float() {\n-                if !$to::in_range(A) { from.0 = 0 as $to; to.0 = 0 as $to; }\n-                if !$to::in_range(B) { from.1 = 0 as $to; to.1 = 0 as $to; }\n-                if !$to::in_range(C) { from.2 = 0 as $to; to.2 = 0 as $to; }\n-                if !$to::in_range(D) { from.3 = 0 as $to; to.3 = 0 as $to; }\n-            }\n+    unsafe {\n+        let f = V::<f32>([i16::MIN as f32, i16::MAX as f32]);\n+        let i: V<i16> = simd_cast(f);\n+        assert_eq!(i.0[0], f.0[0] as i16);\n+        assert_eq!(i.0[1], f.0[1] as i16);\n+    }\n \n-            assert!(to == from,\n-                    \"{} -> {} ({:?} != {:?})\", stringify!($from), stringify!($to),\n-                    from, to);\n-        }}\n+    unsafe {\n+        let f = V::<f32>([u8::MIN as f32, u8::MAX as f32]);\n+        let u: V<u8> = simd_cast(f);\n+        assert_eq!(u.0[0], f.0[0] as u8);\n+        assert_eq!(u.0[1], f.0[1] as u8);\n     }\n-    macro_rules! tests {\n-        (: $($to: ident),*) => { () };\n-        // repeating the list twice is easier than writing a cartesian\n-        // product macro\n-        ($from: ident $(, $from_: ident)*: $($to: ident),*) => {\n-            fn $from() { unsafe { $( test!($from, $to); )* } }\n-            tests!($($from_),*: $($to),*)\n-        };\n-        ($($types: ident),*) => {{\n-            tests!($($types),* : $($types),*);\n-            $($types();)*\n-        }}\n+\n+    unsafe {\n+        // We would like to do isize::MIN..=isize::MAX, but those values are not representable in\n+        // an f64, so we clamp to the range of an i32 to prevent running into UB.\n+        let f = V::<f64>([\n+            max(isize::MIN, i32::MIN as isize) as f64,\n+            min(isize::MAX, i32::MAX as isize) as f64,\n+        ]);\n+        let i: V<isize> = simd_cast(f);\n+        assert_eq!(i.0[0], f.0[0] as isize);\n+        assert_eq!(i.0[1], f.0[1] as isize);\n     }\n \n-    // test various combinations, including truncation,\n-    // signed/unsigned extension, and floating point casts.\n-    tests!(i32, i8, u32, u8, f32);\n-    tests!(i32, u32, f32, f64)\n+    unsafe {\n+        let f = V::<f64>([\n+            max(usize::MIN, u32::MIN as usize) as f64,\n+            min(usize::MAX, u32::MAX as usize) as f64,\n+        ]);\n+        let u: V<usize> = simd_cast(f);\n+        assert_eq!(u.0[0], f.0[0] as usize);\n+        assert_eq!(u.0[1], f.0[1] as usize);\n+    }\n }"}, {"sha": "7d4b3dbd7b411cd39ba23711febfb5f580dd7328", "filename": "tests/ui/simd/intrinsic/generic-gather-pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -24,9 +24,9 @@ fn main() {\n \n     // reading from *const\n     unsafe {\n-        let pointer = &x[0] as *const f32;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -39,9 +39,9 @@ fn main() {\n \n     // reading from *mut\n     unsafe {\n-        let pointer = &mut x[0] as *mut f32;\n+        let pointer = x.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -54,9 +54,9 @@ fn main() {\n \n     // writing to *mut\n     unsafe {\n-        let pointer = &mut x[0] as *mut f32;\n+        let pointer = x.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -85,9 +85,9 @@ fn main() {\n \n     // reading from *const\n     unsafe {\n-        let pointer = &y[0] as *const *const f32;\n+        let pointer = y.as_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *const *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -100,9 +100,9 @@ fn main() {\n \n     // reading from *mut\n     unsafe {\n-        let pointer = &mut y[0] as *mut *const f32;\n+        let pointer = y.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -115,9 +115,9 @@ fn main() {\n \n     // writing to *mut\n     unsafe {\n-        let pointer = &mut y[0] as *mut *const f32;\n+        let pointer = y.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)"}, {"sha": "cd24d6675b2f8f3f543e6148e08f907959970c78", "filename": "tests/ui/simd/issue-89193.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fissue-89193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20081880ad2a98bbc8c8293f96c5b284d1584d86/tests%2Fui%2Fsimd%2Fissue-89193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fissue-89193.rs?ref=20081880ad2a98bbc8c8293f96c5b284d1584d86", "patch": "@@ -17,13 +17,14 @@ extern \"platform-intrinsic\" {\n fn main() {\n     let x: [usize; 4] = [10, 11, 12, 13];\n     let default = x4(0_usize, 1, 2, 3);\n-    let mask = x4(1_i32, 1, 1, 1);\n+    let all_set = u8::MAX as i8; // aka -1\n+    let mask = x4(all_set, all_set, all_set, all_set);\n     let expected = x4(10_usize, 11, 12, 13);\n \n     unsafe {\n-        let pointer = &x[0] as *const usize;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const usize,\n+            pointer.offset(0),\n             pointer.offset(1),\n             pointer.offset(2),\n             pointer.offset(3)\n@@ -38,9 +39,9 @@ fn main() {\n     let expected = x4(10_isize, 11, 12, 13);\n \n     unsafe {\n-        let pointer = &x[0] as *const isize;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const isize,\n+            pointer.offset(0),\n             pointer.offset(1),\n             pointer.offset(2),\n             pointer.offset(3)"}]}