{"sha": "6523a09562fea0f02e0877b5b651b36d3dea6bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjNhMDk1NjJmZWEwZjAyZTA4NzdiNWI2NTFiMzZkM2RlYTZiY2I=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T16:29:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T16:29:16Z"}, "message": "style", "tree": {"sha": "02d28f9188ce2cb9ab5a2a4af47fd01b84b1d2ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d28f9188ce2cb9ab5a2a4af47fd01b84b1d2ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6523a09562fea0f02e0877b5b651b36d3dea6bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6523a09562fea0f02e0877b5b651b36d3dea6bcb", "html_url": "https://github.com/rust-lang/rust/commit/6523a09562fea0f02e0877b5b651b36d3dea6bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6523a09562fea0f02e0877b5b651b36d3dea6bcb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0336e9b25fec9e2dd9d951137c72ebfa24f774fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0336e9b25fec9e2dd9d951137c72ebfa24f774fd", "html_url": "https://github.com/rust-lang/rust/commit/0336e9b25fec9e2dd9d951137c72ebfa24f774fd"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "1a2b47cd030c1f506cf2ec8843483d02f8b3848f", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6523a09562fea0f02e0877b5b651b36d3dea6bcb/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6523a09562fea0f02e0877b5b651b36d3dea6bcb/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=6523a09562fea0f02e0877b5b651b36d3dea6bcb", "patch": "@@ -20,17 +20,17 @@ use crate::{\n pub trait ChildBySource {\n     fn child_by_source(&self, db: &dyn DefDatabase, file_id: HirFileId) -> DynMap {\n         let mut res = DynMap::default();\n-        self.child_by_source_to(db, file_id, &mut res);\n+        self.child_by_source_to(db, &mut res, file_id);\n         res\n     }\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, map: &mut DynMap);\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, map: &mut DynMap, file_id: HirFileId);\n }\n \n impl ChildBySource for TraitId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let data = db.trait_data(*self);\n-        for &(_, item) in data.items.iter() {\n-            match item {\n+        for (_name, item) in data.items.iter() {\n+            match *item {\n                 AssocItemId::FunctionId(func) => {\n                     let loc = func.lookup(db);\n                     if loc.id.file_id() == file_id {\n@@ -58,7 +58,7 @@ impl ChildBySource for TraitId {\n }\n \n impl ChildBySource for ImplId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let data = db.impl_data(*self);\n         for &item in data.items.iter() {\n             match item {\n@@ -89,15 +89,15 @@ impl ChildBySource for ImplId {\n }\n \n impl ChildBySource for ModuleId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let def_map = self.def_map(db);\n         let module_data = &def_map[self.local_id];\n-        module_data.scope.child_by_source_to(db, file_id, res);\n+        module_data.scope.child_by_source_to(db, res, file_id);\n     }\n }\n \n impl ChildBySource for ItemScope {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         self.declarations().for_each(|item| add_module_def(db, file_id, res, item));\n         self.unnamed_consts().for_each(|konst| {\n             let src = konst.lookup(db).source(db);\n@@ -188,7 +188,7 @@ impl ChildBySource for ItemScope {\n }\n \n impl ChildBySource for VariantId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, _: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, _: HirFileId) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         let parent = *self;\n@@ -207,7 +207,7 @@ impl ChildBySource for VariantId {\n }\n \n impl ChildBySource for EnumId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, _: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, _: HirFileId) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n@@ -218,12 +218,12 @@ impl ChildBySource for EnumId {\n }\n \n impl ChildBySource for DefWithBodyId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, file_id: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         let body = db.body(*self);\n         for (_, def_map) in body.blocks(db) {\n             // All block expressions are merged into the same map, because they logically all add\n             // inner items to the containing `DefWithBodyId`.\n-            def_map[def_map.root()].scope.child_by_source_to(db, file_id, res);\n+            def_map[def_map.root()].scope.child_by_source_to(db, res, file_id);\n         }\n     }\n }"}, {"sha": "5425ea8beaf5bba0c992c6b19b891244eea2f7f5", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6523a09562fea0f02e0877b5b651b36d3dea6bcb/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6523a09562fea0f02e0877b5b651b36d3dea6bcb/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=6523a09562fea0f02e0877b5b651b36d3dea6bcb", "patch": "@@ -438,7 +438,7 @@ impl HasChildSource<LocalConstParamId> for GenericDefId {\n }\n \n impl ChildBySource for GenericDefId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, _: HirFileId, res: &mut DynMap) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, _: HirFileId) {\n         let (_, sm) = GenericParams::new(db, *self);\n \n         let sm = sm.as_ref();"}]}