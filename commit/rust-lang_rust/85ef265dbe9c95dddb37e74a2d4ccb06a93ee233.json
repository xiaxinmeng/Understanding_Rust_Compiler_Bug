{"sha": "85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWYyNjVkYmU5Yzk1ZGRkYjM3ZTc0YTJkNGNjYjA2YTkzZWUyMzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-27T16:47:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-28T20:10:44Z"}, "message": "expand: Stop un-interpolating `NtIdent`s before passing them to built-in macros\n\nThis was a big hack, and built-in macros should be able to deal with `NtIdents` in the input by themselves like any other parser code.", "tree": {"sha": "e940a7efd21748aca0d438bb5d0cc24e7a769a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e940a7efd21748aca0d438bb5d0cc24e7a769a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "html_url": "https://github.com/rust-lang/rust/commit/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62d3f7fa9a91d933213cc10e20e740608983f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62d3f7fa9a91d933213cc10e20e740608983f64", "html_url": "https://github.com/rust-lang/rust/commit/d62d3f7fa9a91d933213cc10e20e740608983f64"}], "stats": {"total": 43, "additions": 10, "deletions": 33}, "files": [{"sha": "09985959b67b80c10b4ca000104e6ed5a6ee063a", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "patch": "@@ -368,7 +368,7 @@ fn parse_reg<'a>(\n     explicit_reg: &mut bool,\n ) -> Result<ast::InlineAsmRegOrRegClass, DiagnosticBuilder<'a>> {\n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n-    let result = match p.token.kind {\n+    let result = match p.token.uninterpolate().kind {\n         token::Ident(name, false) => ast::InlineAsmRegOrRegClass::RegClass(name),\n         token::Literal(token::Lit { kind: token::LitKind::Str, symbol, suffix: _ }) => {\n             *explicit_reg = true;"}, {"sha": "209158ce39206f4765495afcf4e758e0d3328346", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "patch": "@@ -27,15 +27,15 @@ pub fn expand_concat_idents<'cx>(\n                 }\n             }\n         } else {\n-            match e {\n-                TokenTree::Token(Token { kind: token::Ident(name, _), .. }) => {\n-                    res_str.push_str(&name.as_str())\n-                }\n-                _ => {\n-                    cx.span_err(sp, \"concat_idents! requires ident args.\");\n-                    return DummyResult::any(sp);\n+            if let TokenTree::Token(token) = e {\n+                if let Some((ident, _)) = token.ident() {\n+                    res_str.push_str(&ident.name.as_str());\n+                    continue;\n                 }\n             }\n+\n+            cx.span_err(sp, \"concat_idents! requires ident args.\");\n+            return DummyResult::any(sp);\n         }\n     }\n "}, {"sha": "1ae2be47b140a022645fed128ebeea30a62b01ba", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ef265dbe9c95dddb37e74a2d4ccb06a93ee233/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=85ef265dbe9c95dddb37e74a2d4ccb06a93ee233", "patch": "@@ -1,10 +1,9 @@\n use crate::expand::{self, AstFragment, Invocation};\n use crate::module::DirectoryOwnership;\n \n-use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n-use rustc_ast::tokenstream::{self, TokenStream};\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_ast::{self as ast, Attribute, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n@@ -364,30 +363,8 @@ where\n         &self,\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n-        mut input: TokenStream,\n+        input: TokenStream,\n     ) -> Box<dyn MacResult + 'cx> {\n-        struct AvoidInterpolatedIdents;\n-\n-        impl MutVisitor for AvoidInterpolatedIdents {\n-            fn visit_tt(&mut self, tt: &mut tokenstream::TokenTree) {\n-                if let tokenstream::TokenTree::Token(token) = tt {\n-                    if let token::Interpolated(nt) = &token.kind {\n-                        if let token::NtIdent(ident, is_raw) = **nt {\n-                            *tt = tokenstream::TokenTree::token(\n-                                token::Ident(ident.name, is_raw),\n-                                ident.span,\n-                            );\n-                        }\n-                    }\n-                }\n-                mut_visit::noop_visit_tt(tt, self)\n-            }\n-\n-            fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n-                mut_visit::noop_visit_mac(mac, self)\n-            }\n-        }\n-        AvoidInterpolatedIdents.visit_tts(&mut input);\n         (*self)(ecx, span, input)\n     }\n }"}]}