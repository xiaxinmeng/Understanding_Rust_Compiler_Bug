{"sha": "4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTRmZjk1ZjZjNDU5ZDk4YzI0NDljOTk5M2UwZjdlMGI4YzQ3ZDM=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-15T23:16:10Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-15T23:16:10Z"}, "message": "Use better error message for hard errors in CTFE\n\nCurrently the same message is used for hard errors and soft errors. This\nmakes hard errors use a message that indicates the reality of the\nsituation correctly, since usage of the constant is never allowed when\nthere was a hard error evaluating it.", "tree": {"sha": "50d71e1f2f95ac40297f3a0c4d0563cc0cfdb4e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d71e1f2f95ac40297f3a0c4d0563cc0cfdb4e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "html_url": "https://github.com/rust-lang/rust/commit/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60f1a2fc4b535ead9c85ce085fdce49b1b097531", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f1a2fc4b535ead9c85ce085fdce49b1b097531", "html_url": "https://github.com/rust-lang/rust/commit/60f1a2fc4b535ead9c85ce085fdce49b1b097531"}], "stats": {"total": 155, "additions": 58, "deletions": 97}, "files": [{"sha": "17e8ab2a4da63ede2a11d7e048f74d1181dc5d72", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-        mut lint_root: Option<hir::HirId>,\n+        lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n         let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n             trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -194,12 +194,6 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             _ => {}\n         };\n \n-        // If we have a 'hard error', then set `lint_root` to `None` so that we don't\n-        // emit a lint.\n-        if matches!(&self.error, InterpError::MachineStop(err) if err.is_hard_err()) {\n-            lint_root = None;\n-        }\n-\n         let err_msg = self.error.to_string();\n \n         // Regular case - emit a lint."}, {"sha": "6adb6e34958837d98f2e27d82074393bbea7bf93", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -2,8 +2,8 @@ use super::{CompileTimeEvalContext, CompileTimeInterpreter, ConstEvalErr, Memory\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n     intern_const_alloc_recursive, Allocation, ConstAlloc, ConstValue, CtfeValidationMode, GlobalId,\n-    Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n-    ScalarMaybeUninit, StackPopCleanup,\n+    Immediate, InternKind, InterpCx, InterpError, InterpResult, MPlaceTy, MemoryKind, OpTy,\n+    RefTracking, Scalar, ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::util::pretty::display_allocation;\n \n@@ -315,6 +315,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             let emit_as_lint = if let Some(def) = def.as_local() {\n                 // (Associated) consts only emit a lint, since they might be unused.\n                 matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                    && !matches!(&err.error, InterpError::MachineStop(err) if err.is_hard_err())\n             } else {\n                 // use of broken constant from other crate: always an error\n                 false"}, {"sha": "5807c5659b6155fd12c7f6e9f17b9c62dcc1ece9", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -5,31 +5,31 @@\n const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2: () = std::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = std::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = std::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n //\n const W: () = std::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z_CORE: () = core::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2_CORE: () = core::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y_CORE: () = core::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X_CORE: () = core::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const W_CORE: () = core::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "c0c749ede56126084186ec71a2b79d34283794b8", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,100 +1,80 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n-   | ---------------^^^^^^^^^^^^^-\n-   |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:13:15\n    |\n LL | const Y: () = std::unreachable!();\n-   | --------------^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:16:15\n    |\n LL | const X: () = std::unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:19:15\n    |\n LL | const W: () = std::panic!(MSG);\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:22:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:25:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   | --------------------^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:28:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:31:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:34:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   | -------------------^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1ea0845c968c6fcaa50a88e7341628e3667efdfa", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -7,13 +7,13 @@\n use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "9abf8a20b8a35e769e56ae8f413cd512d7b34bb9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,30 +1,24 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "78cf25308fff9e637dd3f8cd8d8470e36876a057", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -9,7 +9,7 @@ struct PrintName;\n \n impl PrintName {\n     const VOID: ! = panic!();\n-    //~^ ERROR any use of this value will cause an error\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {"}, {"sha": "085609483098b73e8b3182828352331b76bc43ee", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-assoc-never-type.rs:11:21\n    |\n LL |     const VOID: ! = panic!();\n-   |     ----------------^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "dd875768b168faa9ec9bad7c595a250670e32a87", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -4,7 +4,7 @@\n #![feature(never_type)]\n \n const VOID: ! = panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = VOID;"}, {"sha": "9b7f2181c166258d6b00584cf497585a96e6a047", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-never-type.rs:6:17\n    |\n LL | const VOID: ! = panic!();\n-   | ----------------^^^^^^^^-\n-   |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "766a0c49be68afcf9fc85d3f2481faabf17bd2ce", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -2,7 +2,7 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ ERROR any use of this value will cause an error\n+    panic!() //~ ERROR evaluation of constant value failed\n }\n \n const _: () = foo();"}, {"sha": "e3b871ee529bef3a7f3d58cf68581a464e43c6be", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,15 +1,14 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/unwind-abort.rs:5:5\n    |\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:8:15\n ...\n LL | const _: () = foo();\n-   | --------------------\n+   |               ----- inside `_` at $DIR/unwind-abort.rs:8:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9a820ff72171921063c9a2fca4d9273d7476a78c", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,17 +1,16 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n    |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n-   |                     inside `BAR` at $DIR/const-unwrap.rs:9:18\n    | \n-  ::: $DIR/const-unwrap.rs:9:1\n+  ::: $DIR/const-unwrap.rs:9:18\n    |\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n-   | ----------------------------------------------\n+   |                  ---------------------------- inside `BAR` at $DIR/const-unwrap.rs:9:18\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1deaa937edb37db94501895bc46db9da4c7cedbb", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b311cb140ccf69d03b45863c0fcd651b74ed3ccd", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "patch": "@@ -9,6 +9,6 @@ const _: () = assert!(true);\n \n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n-//[const_panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~^^ ERROR evaluation of constant value failed\n \n fn main() {}"}]}