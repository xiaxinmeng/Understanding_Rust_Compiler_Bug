{"sha": "fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "node_id": "C_kwDOAAsO6NoAKGZhZTkwNDljY2Q4ZGMwMzUwM2Q3MGI5NTZmZDdlNmE0MWExNzE2ZjI", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-23T10:10:10Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-23T12:21:21Z"}, "message": "Fall back to parameter definitions on error types in signature help", "tree": {"sha": "df1c9e2d9779809af725763a2901a66d04af9c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1c9e2d9779809af725763a2901a66d04af9c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "html_url": "https://github.com/rust-lang/rust/commit/fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae9049ccd8dc03503d70b956fd7e6a41a1716f2/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55824021e10d296a10948549e49a5bdc8dc1c661", "url": "https://api.github.com/repos/rust-lang/rust/commits/55824021e10d296a10948549e49a5bdc8dc1c661", "html_url": "https://github.com/rust-lang/rust/commit/55824021e10d296a10948549e49a5bdc8dc1c661"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "2ca933ec3eeff50091c9a53283a7742ff810dfd0", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fae9049ccd8dc03503d70b956fd7e6a41a1716f2/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae9049ccd8dc03503d70b956fd7e6a41a1716f2/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "patch": "@@ -110,10 +110,12 @@ fn signature_help_for_call(\n         SignatureHelp { doc: None, signature: String::new(), parameters: vec![], active_parameter };\n \n     let db = sema.db;\n+    let mut fn_params = None;\n     match callable.kind() {\n         hir::CallableKind::Function(func) => {\n             res.doc = func.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"fn {}\", func.name(db));\n+            fn_params = Some(func.assoc_fn_params(db));\n         }\n         hir::CallableKind::TupleStruct(strukt) => {\n             res.doc = strukt.docs(db).map(|it| it.into());\n@@ -137,15 +139,23 @@ fn signature_help_for_call(\n             format_to!(res.signature, \"{}\", self_param)\n         }\n         let mut buf = String::new();\n-        for (pat, ty) in callable.params(db) {\n+        for (idx, (pat, ty)) in callable.params(db).into_iter().enumerate() {\n             buf.clear();\n             if let Some(pat) = pat {\n                 match pat {\n                     Either::Left(_self) => format_to!(buf, \"self: \"),\n                     Either::Right(pat) => format_to!(buf, \"{}: \", pat),\n                 }\n             }\n-            format_to!(buf, \"{}\", ty.display(db));\n+            // APITs (argument position `impl Trait`s) are inferred as {unknown} as the user is\n+            // in the middle of entering call arguments.\n+            // In that case, fall back to render definition of the argument.\n+            // This is overly conservative: we do not substitute known type vars\n+            // (see FIXME in tests::impl_trait).\n+            match (ty.contains_unknown(), fn_params.as_deref()) {\n+                (true, Some(fn_params)) => format_to!(buf, \"{}\", fn_params[idx].ty().display(db)),\n+                _ => format_to!(buf, \"{}\", ty.display(db)),\n+            }\n             res.push_call_param(&buf);\n         }\n     }\n@@ -420,8 +430,8 @@ fn foo<T, U: Copy + Display>(x: T, y: U) -> u32\n fn bar() { foo($03, ); }\n \"#,\n             expect![[r#\"\n-                fn foo(x: i32, y: {unknown}) -> u32\n-                       ^^^^^^  ------------\n+                fn foo(x: i32, y: U) -> u32\n+                       ^^^^^^  ----\n             \"#]],\n         );\n     }\n@@ -633,26 +643,21 @@ pub fn do_it() {\n     fn test_fn_signature_with_docs_from_actix() {\n         check(\n             r#\"\n-struct WriteHandler<E>;\n-\n-impl<E> WriteHandler<E> {\n-    /// Method is called when writer emits error.\n-    ///\n-    /// If this method returns `ErrorAction::Continue` writer processing\n-    /// continues otherwise stream processing stops.\n-    fn error(&mut self, err: E, ctx: &mut Self::Context) -> Running {\n-        Running::Stop\n-    }\n-\n+trait Actor {\n+    /// Actor execution context type\n+    type Context;\n+}\n+trait WriteHandler<E>\n+where\n+    Self: Actor\n+{\n     /// Method is called when writer finishes.\n     ///\n     /// By default this method stops actor's `Context`.\n-    fn finished(&mut self, ctx: &mut Self::Context) {\n-        ctx.stop()\n-    }\n+    fn finished(&mut self, ctx: &mut Self::Context) {}\n }\n \n-pub fn foo(mut r: WriteHandler<()>) {\n+fn foo(mut r: impl WriteHandler<()>) {\n     r.finished($0);\n }\n \"#,\n@@ -661,8 +666,8 @@ pub fn foo(mut r: WriteHandler<()>) {\n \n                 By default this method stops actor's `Context`.\n                 ------\n-                fn finished(&mut self, ctx: &mut {unknown})\n-                                       ^^^^^^^^^^^^^^^^^^^\n+                fn finished(&mut self, ctx: &mut <impl WriteHandler<()> as Actor>::Context)\n+                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n             \"#]],\n         );\n     }\n@@ -1055,4 +1060,23 @@ fn f() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn impl_trait() {\n+        // FIXME: Substitute type vars in impl trait (`U` -> `i8`)\n+        check(\n+            r#\"\n+trait Trait<T> {}\n+struct Wrap<T>(T);\n+fn foo<U>(x: Wrap<impl Trait<U>>) {}\n+fn f() {\n+    foo::<i8>($0)\n+}\n+\"#,\n+            expect![[r#\"\n+                fn foo(x: Wrap<impl Trait<U>>)\n+                       ^^^^^^^^^^^^^^^^^^^^^^\n+            \"#]],\n+        );\n+    }\n }"}]}