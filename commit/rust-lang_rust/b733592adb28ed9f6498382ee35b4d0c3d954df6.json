{"sha": "b733592adb28ed9f6498382ee35b4d0c3d954df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzM1OTJhZGIyOGVkOWY2NDk4MzgyZWUzNWI0ZDBjM2Q5NTRkZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T23:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T23:36:23Z"}, "message": "auto merge of #15227 : alexcrichton/rust/windows-unlink, r=brson\n\nCurrently when a read-only file has unlink() invoked on it on windows, the call\r\nwill fail. On unix, however, the call will succeed. In order to have a more\r\nconsistent behavior across platforms, this error is recognized on windows and\r\nthe file is changed to read-write before removal is attempted.", "tree": {"sha": "d73ed8d4df07250492fa7d8e9d9ac111bf9c24e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73ed8d4df07250492fa7d8e9d9ac111bf9c24e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b733592adb28ed9f6498382ee35b4d0c3d954df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b733592adb28ed9f6498382ee35b4d0c3d954df6", "html_url": "https://github.com/rust-lang/rust/commit/b733592adb28ed9f6498382ee35b4d0c3d954df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b733592adb28ed9f6498382ee35b4d0c3d954df6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62479133b9b81ae5c32720fa18bd589a9f425e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62479133b9b81ae5c32720fa18bd589a9f425e8", "html_url": "https://github.com/rust-lang/rust/commit/e62479133b9b81ae5c32720fa18bd589a9f425e8"}, {"sha": "fe67d269a5f0df45d138051a3f105e05490ccf9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe67d269a5f0df45d138051a3f105e05490ccf9e", "html_url": "https://github.com/rust-lang/rust/commit/fe67d269a5f0df45d138051a3f105e05490ccf9e"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "2c2e134d882cb9af73fb9c9605ddb85572f8a0fc", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=b733592adb28ed9f6498382ee35b4d0c3d954df6", "patch": "@@ -420,6 +420,7 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n             uvll::EADDRNOTAVAIL => libc::WSAEADDRNOTAVAIL,\n             uvll::ECANCELED => libc::ERROR_OPERATION_ABORTED,\n             uvll::EADDRINUSE => libc::WSAEADDRINUSE,\n+            uvll::EPERM => libc::ERROR_ACCESS_DENIED,\n             err => {\n                 uvdebug!(\"uverr.code {}\", err as int);\n                 // FIXME: Need to map remaining uv error types"}, {"sha": "a59bc21d792a9ba175ed28e5999ccc4c0640ed6f", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=b733592adb28ed9f6498382ee35b4d0c3d954df6", "patch": "@@ -39,7 +39,7 @@ use libc::uintptr_t;\n \n pub use self::errors::{EACCES, ECONNREFUSED, ECONNRESET, EPIPE, ECONNABORTED,\n                        ECANCELED, EBADF, ENOTCONN, ENOENT, EADDRNOTAVAIL,\n-                       EADDRINUSE};\n+                       EADDRINUSE, EPERM};\n \n pub static OK: c_int = 0;\n pub static EOF: c_int = -4095;\n@@ -63,6 +63,7 @@ pub mod errors {\n     pub static EBADF: c_int = -4083;\n     pub static EADDRNOTAVAIL: c_int = -4090;\n     pub static EADDRINUSE: c_int = -4091;\n+    pub static EPERM: c_int = -4048;\n }\n #[cfg(not(windows))]\n pub mod errors {\n@@ -80,6 +81,7 @@ pub mod errors {\n     pub static EBADF : c_int = -libc::EBADF;\n     pub static EADDRNOTAVAIL : c_int = -libc::EADDRNOTAVAIL;\n     pub static EADDRINUSE : c_int = -libc::EADDRINUSE;\n+    pub static EPERM: c_int = -libc::EPERM;\n }\n \n pub static PROCESS_SETUID: c_int = 1 << 0;"}, {"sha": "caff7d5e4c5930a6be9896e226466c5326a23e3e", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b733592adb28ed9f6498382ee35b4d0c3d954df6/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b733592adb28ed9f6498382ee35b4d0c3d954df6", "patch": "@@ -275,11 +275,41 @@ impl File {\n /// user lacks permissions to remove the file, or if some other filesystem-level\n /// error occurs.\n pub fn unlink(path: &Path) -> IoResult<()> {\n-    let err = LocalIo::maybe_raise(|io| {\n-        io.fs_unlink(&path.to_c_str())\n-    }).map_err(IoError::from_rtio_error);\n-    err.update_err(\"couldn't unlink path\",\n-                   |e| format!(\"{}; path={}\", e, path.display()))\n+    return match do_unlink(path) {\n+        Ok(()) => Ok(()),\n+        Err(e) => {\n+            // On unix, a readonly file can be successfully removed. On windows,\n+            // however, it cannot. To keep the two platforms in line with\n+            // respect to their behavior, catch this case on windows, attempt to\n+            // change it to read-write, and then remove the file.\n+            if cfg!(windows) && e.kind == io::PermissionDenied {\n+                let stat = match stat(path) {\n+                    Ok(stat) => stat,\n+                    Err(..) => return Err(e),\n+                };\n+                if stat.perm.intersects(io::UserWrite) { return Err(e) }\n+\n+                match chmod(path, stat.perm | io::UserWrite) {\n+                    Ok(()) => do_unlink(path),\n+                    Err(..) => {\n+                        // Try to put it back as we found it\n+                        let _ = chmod(path, stat.perm);\n+                        Err(e)\n+                    }\n+                }\n+            } else {\n+                Err(e)\n+            }\n+        }\n+    };\n+\n+    fn do_unlink(path: &Path) -> IoResult<()> {\n+        let err = LocalIo::maybe_raise(|io| {\n+            io.fs_unlink(&path.to_c_str())\n+        }).map_err(IoError::from_rtio_error);\n+        err.update_err(\"couldn't unlink path\",\n+                       |e| format!(\"{}; path={}\", e, path.display()))\n+    }\n }\n \n /// Given a path, query the file system to get information about a file,\n@@ -1591,4 +1621,12 @@ mod test {\n         let actual = check!(File::open(&tmpdir.join(\"test\")).read_to_end());\n         assert!(actual.as_slice() == bytes);\n     })\n+\n+    iotest!(fn unlink_readonly() {\n+        let tmpdir = tmpdir();\n+        let path = tmpdir.join(\"file\");\n+        check!(File::create(&path));\n+        check!(chmod(&path, io::UserRead));\n+        check!(unlink(&path));\n+    })\n }"}]}