{"sha": "982cf90dc6002425de036d81e156861b1b0c0a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmNmOTBkYzYwMDI0MjVkZTAzNmQ4MWUxNTY4NjFiMWIwYzBhM2M=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T23:08:47Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-24T02:57:57Z"}, "message": "Add a T_SIGNED type to uint template and eliminate step_down variant\n\nHandle negative steps properly in range_step, fix order of arguments\nin tests, and such.", "tree": {"sha": "16c772824667dfb4874e662a3d70c6190b13a41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c772824667dfb4874e662a3d70c6190b13a41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982cf90dc6002425de036d81e156861b1b0c0a3c", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982cf90dc6002425de036d81e156861b1b0c0a3c", "html_url": "https://github.com/rust-lang/rust/commit/982cf90dc6002425de036d81e156861b1b0c0a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982cf90dc6002425de036d81e156861b1b0c0a3c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6e1e28019efcc936d34695653a1292a3425a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6e1e28019efcc936d34695653a1292a3425a5b", "html_url": "https://github.com/rust-lang/rust/commit/1a6e1e28019efcc936d34695653a1292a3425a5b"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "841b88763332174d82e780332238787fd56d0e82", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -13,6 +13,7 @@\n #[forbid(deprecated_pattern)];\n \n use T = self::inst::T;\n+use T_SIGNED = self::inst::T_SIGNED;\n \n use char;\n use cmp::{Eq, Ord};\n@@ -72,50 +73,36 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n /**\n  * Iterate over the range [`start`,`start`+`step`..`stop`)\n  *\n- * Note that `uint` requires separate `range_step` functions for each\n- * direction.\n- *\n  */\n-pub pure fn range_step_up(start: T, stop: T, step: T, it: fn(T) -> bool) {\n+pub pure fn range_step(start: T, stop: T, step: T_SIGNED, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        fail ~\"range_step_up called with step == 0\";\n-    }\n-    while i < stop {\n-        if !it(i) { break }\n-        i += step;\n+        fail ~\"range_step called with step == 0\";\n     }\n-}\n-\n-#[inline(always)]\n-/**\n- * Iterate over the range [`start`,`start`-`step`..`stop`)\n- *\n- * Note that `uint` requires separate `range_step` functions for each\n- * direction.\n- *\n- */\n-pub pure fn range_step_down(start: T, stop: T, step: T, it: fn(T) -> bool) {\n-    let mut i = start;\n-    if step == 0 {\n-        fail ~\"range_step_down called with step == 0\";\n+    if step >= 0 {\n+        while i < stop {\n+            if !it(i) { break }\n+            i += step as T;\n+        }\n     }\n-    while i > stop {\n-        if !it(i) { break }\n-        i -= step;\n+    else {\n+        while i > stop {\n+            if !it(i) { break }\n+            i -= -step as T;\n+        }\n     }\n }\n \n #[inline(always)]\n /// Iterate over the range [`lo`..`hi`)\n pub pure fn range(lo: T, hi: T, it: fn(T) -> bool) {\n-    range_step_up(lo, hi, 1 as T, it);\n+    range_step(lo, hi, 1 as T_SIGNED, it);\n }\n \n #[inline(always)]\n /// Iterate over the range [`hi`..`lo`)\n pub pure fn range_rev(hi: T, lo: T, it: fn(T) -> bool) {\n-    range_step_down(hi, lo, 1 as T, it);\n+    range_step(hi, lo, -1 as T_SIGNED, it);\n }\n \n /// Computes the bitwise complement\n@@ -381,10 +368,10 @@ pub fn test_ranges() {\n     for range_rev(13,10) |i| {\n         l.push(i);\n     }\n-    for range_step_up(20,26,2) |i| {\n+    for range_step(20,26,2) |i| {\n         l.push(i);\n     }\n-    for range_step_down(36,30,2) |i| {\n+    for range_step(36,30,-2) |i| {\n         l.push(i);\n     }\n \n@@ -400,21 +387,21 @@ pub fn test_ranges() {\n     for range_rev(0,0) |_i| {\n         fail ~\"unreachable\";\n     }\n-    for range_step_up(10,0,1) |_i| {\n+    for range_step(10,0,1) |_i| {\n         fail ~\"unreachable\";\n     }\n-    for range_step_down(0,10,1) |_i| {\n+    for range_step(0,1,-10) |_i| {\n         fail ~\"unreachable\";\n     }\n }\n \n #[test]\n #[should_fail]\n-fn test_range_step_up_zero_step() {\n-    for range_step_up(0,10,0) |_i| {}\n+fn test_range_step_zero_step_up() {\n+    for range_step(0,10,0) |_i| {}\n }\n #[test]\n #[should_fail]\n-fn test_range_step_down_zero_step() {\n-    for range_step_down(0,10,0) |_i| {}\n+fn test_range_step_zero_step_down() {\n+    for range_step(0,-10,0) |_i| {}\n }"}, {"sha": "b9a007af2f67adad0d88f85e65f62f5bf932f42d", "filename": "src/libcore/uint-template/u16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -12,5 +12,7 @@\n \n mod inst {\n     pub type T = u16;\n+    #[allow(non_camel_case_types)]\n+    pub type T_SIGNED = i16;\n     pub const bits: uint = 16;\n }"}, {"sha": "141509c49e555adc4fb00f8fa4fbbe12d06d6186", "filename": "src/libcore/uint-template/u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -12,5 +12,7 @@\n \n mod inst {\n     pub type T = u32;\n+    #[allow(non_camel_case_types)]\n+    pub type T_SIGNED = i32;\n     pub const bits: uint = 32;\n }\n\\ No newline at end of file"}, {"sha": "35210eae9a75c8b31ff804caf142fa6c615735df", "filename": "src/libcore/uint-template/u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -12,5 +12,7 @@\n \n mod inst {\n     pub type T = u64;\n+    #[allow(non_camel_case_types)]\n+    pub type T_SIGNED = i64;\n     pub const bits: uint = 64;\n }\n\\ No newline at end of file"}, {"sha": "e273a2032132649706a4e1bf463e30210a86d7af", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -14,6 +14,8 @@ pub use self::inst::is_ascii;\n \n mod inst {\n     pub type T = u8;\n+    #[allow(non_camel_case_types)]\n+    pub type T_SIGNED = i8;\n     pub const bits: uint = 8;\n \n     // Type-specific functions here. These must be reexported by the"}, {"sha": "f54290f8394ab63e0af134c1dd47ac9971ab2bdc", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cf90dc6002425de036d81e156861b1b0c0a3c/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=982cf90dc6002425de036d81e156861b1b0c0a3c", "patch": "@@ -20,6 +20,8 @@ mod inst {\n     use uint;\n \n     pub type T = uint;\n+    #[allow(non_camel_case_types)]\n+    pub type T_SIGNED = int;\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]"}]}