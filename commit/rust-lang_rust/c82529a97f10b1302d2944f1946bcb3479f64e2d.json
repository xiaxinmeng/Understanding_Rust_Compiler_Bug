{"sha": "c82529a97f10b1302d2944f1946bcb3479f64e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MjUyOWE5N2YxMGIxMzAyZDI5NDRmMTk0NmJjYjM0NzlmNjRlMmQ=", "commit": {"author": {"name": "succcubbus", "email": "16743652+succcubbus@users.noreply.github.com", "date": "2019-12-13T21:00:05Z"}, "committer": {"name": "succcubbus", "email": "16743652+succcubbus@users.noreply.github.com", "date": "2019-12-13T21:00:05Z"}, "message": "for goto and hover pick the token based on a priority", "tree": {"sha": "89cf9cec7e8314da5aaa122a7c4f39844f166d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89cf9cec7e8314da5aaa122a7c4f39844f166d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82529a97f10b1302d2944f1946bcb3479f64e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82529a97f10b1302d2944f1946bcb3479f64e2d", "html_url": "https://github.com/rust-lang/rust/commit/c82529a97f10b1302d2944f1946bcb3479f64e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82529a97f10b1302d2944f1946bcb3479f64e2d/comments", "author": {"login": "iyzana", "id": 16743652, "node_id": "MDQ6VXNlcjE2NzQzNjUy", "avatar_url": "https://avatars.githubusercontent.com/u/16743652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iyzana", "html_url": "https://github.com/iyzana", "followers_url": "https://api.github.com/users/iyzana/followers", "following_url": "https://api.github.com/users/iyzana/following{/other_user}", "gists_url": "https://api.github.com/users/iyzana/gists{/gist_id}", "starred_url": "https://api.github.com/users/iyzana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iyzana/subscriptions", "organizations_url": "https://api.github.com/users/iyzana/orgs", "repos_url": "https://api.github.com/users/iyzana/repos", "events_url": "https://api.github.com/users/iyzana/events{/privacy}", "received_events_url": "https://api.github.com/users/iyzana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iyzana", "id": 16743652, "node_id": "MDQ6VXNlcjE2NzQzNjUy", "avatar_url": "https://avatars.githubusercontent.com/u/16743652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iyzana", "html_url": "https://github.com/iyzana", "followers_url": "https://api.github.com/users/iyzana/followers", "following_url": "https://api.github.com/users/iyzana/following{/other_user}", "gists_url": "https://api.github.com/users/iyzana/gists{/gist_id}", "starred_url": "https://api.github.com/users/iyzana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iyzana/subscriptions", "organizations_url": "https://api.github.com/users/iyzana/orgs", "repos_url": "https://api.github.com/users/iyzana/repos", "events_url": "https://api.github.com/users/iyzana/events{/privacy}", "received_events_url": "https://api.github.com/users/iyzana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7da04c6735e1d00fceb6fc6f83542626ce03c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7da04c6735e1d00fceb6fc6f83542626ce03c9", "html_url": "https://github.com/rust-lang/rust/commit/4f7da04c6735e1d00fceb6fc6f83542626ce03c9"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "27052d72b62a65fcdb1f1d75e378ba68f6d35388", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=c82529a97f10b1302d2944f1946bcb3479f64e2d", "patch": "@@ -3,7 +3,9 @@\n use hir::{db::AstDatabase, InFile};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxKind, SyntaxNode,\n+    match_ast, AstNode,\n+    SyntaxKind::*,\n+    SyntaxNode, SyntaxToken, TokenAtOffset,\n };\n \n use crate::{\n@@ -19,8 +21,7 @@ pub(crate) fn goto_definition(\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let original_token =\n-        file.token_at_offset(position.offset).find(|it| it.kind() == SyntaxKind::IDENT)?;\n+    let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = descend_into_macros(db, position.file_id, original_token.clone());\n \n     let nav_targets = match_ast! {\n@@ -38,6 +39,17 @@ pub(crate) fn goto_definition(\n     Some(RangeInfo::new(original_token.text_range(), nav_targets))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n #[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),"}, {"sha": "ce8b6c72a1ae5f5ab6c92b1b98dc90001bd7c1a4", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=c82529a97f10b1302d2944f1946bcb3479f64e2d", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::db::AstDatabase;\n-use ra_syntax::{ast, AstNode, SyntaxKind};\n+use ra_syntax::{ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n     db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n@@ -13,7 +13,7 @@ pub(crate) fn goto_type_definition(\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let token = file.token_at_offset(position.offset).find(|it| it.kind() == SyntaxKind::IDENT)?;\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n     let token = descend_into_macros(db, position.file_id, token);\n \n     let node = token.value.ancestors().find_map(|token| {\n@@ -41,6 +41,17 @@ pub(crate) fn goto_type_definition(\n     Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::mock_analysis::analysis_and_position;"}, {"sha": "51e32012821f500efde1f922d2506de1494c7ace", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82529a97f10b1302d2944f1946bcb3479f64e2d/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c82529a97f10b1302d2944f1946bcb3479f64e2d", "patch": "@@ -1,11 +1,13 @@\n //! FIXME: write short doc here\n \n-use hir::{db::AstDatabase, Adt, HasSource, HirDisplay, InFile};\n+use hir::{db::AstDatabase, Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxToken,\n+    match_ast, AstNode,\n+    SyntaxKind::*,\n+    SyntaxToken, TokenAtOffset,\n };\n \n use crate::{\n@@ -156,17 +158,9 @@ fn hover_text_from_name_kind(\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    file.token_at_offset(position.offset)\n-        .filter(|token| !token.kind().is_trivia())\n-        .map(|token| descend_into_macros(db, position.file_id, token))\n-        .find_map(|token| hover_token(db, position, token))\n-}\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n-fn hover_token(\n-    db: &RootDatabase,\n-    position: FilePosition,\n-    token: InFile<SyntaxToken>,\n-) -> Option<RangeInfo<HoverResult>> {\n     let mut res = HoverResult::new();\n \n     let mut range = match_ast! {\n@@ -226,6 +220,18 @@ fn hover_token(\n     Some(RangeInfo::new(range, res))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 3,\n+            L_PAREN | R_PAREN => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     let parse = db.parse(frange.file_id);\n     let leaf_node = find_covering_element(parse.tree().syntax(), frange.range);"}]}