{"sha": "b62b352f4779072c07c110a63fd83afa9508b9e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmIzNTJmNDc3OTA3MmMwN2MxMTBhNjNmZDgzYWZhOTUwOGI5ZTk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-19T17:02:51Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-19T17:02:51Z"}, "message": "Check for exhaustion in RangeInclusive::contains\n\nWhen a range has finished iteration, `is_empty` returns true, so it\nshould also be the case that `contains` returns false.", "tree": {"sha": "4a9c4181acb3ce6ee324bb9d4aa1aa0b21ee9c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9c4181acb3ce6ee324bb9d4aa1aa0b21ee9c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62b352f4779072c07c110a63fd83afa9508b9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62b352f4779072c07c110a63fd83afa9508b9e9", "html_url": "https://github.com/rust-lang/rust/commit/b62b352f4779072c07c110a63fd83afa9508b9e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62b352f4779072c07c110a63fd83afa9508b9e9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2462c53f2cc3f140c0f1ea0976261cab968a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2462c53f2cc3f140c0f1ea0976261cab968a34", "html_url": "https://github.com/rust-lang/rust/commit/cb2462c53f2cc3f140c0f1ea0976261cab968a34"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "1da186d9fbb24dbce253e0327ef1ef3e1aa65bd1", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b62b352f4779072c07c110a63fd83afa9508b9e9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b352f4779072c07c110a63fd83afa9508b9e9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=b62b352f4779072c07c110a63fd83afa9508b9e9", "patch": "@@ -479,13 +479,23 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(!(0.0..=f32::NAN).contains(&0.0));\n     /// assert!(!(f32::NAN..=1.0).contains(&1.0));\n     /// ```\n+    ///\n+    /// This method always returns `false` after iteration has finished:\n+    ///\n+    /// ```\n+    /// let mut r = 3..=5;\n+    /// assert!(r.contains(&3) && r.contains(&5));\n+    /// for _ in r.by_ref() {}\n+    /// // Precise field values are unspecified here\n+    /// assert!(!r.contains(&3) && !r.contains(&5));\n+    /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n         U: ?Sized + PartialOrd<Idx>,\n     {\n-        <Self as RangeBounds<Idx>>::contains(self, item)\n+        !self.exhausted && <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n \n     /// Returns `true` if the range contains no items."}]}