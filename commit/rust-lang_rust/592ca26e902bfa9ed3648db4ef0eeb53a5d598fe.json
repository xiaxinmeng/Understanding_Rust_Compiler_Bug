{"sha": "592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmNhMjZlOTAyYmZhOWVkMzY0OGRiNGVmMGVlYjUzYTVkNTk4ZmU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T21:37:52Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T21:37:52Z"}, "message": "Fix #518", "tree": {"sha": "1cee6aaad7602e7e64476b12d33152bd7f93a936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cee6aaad7602e7e64476b12d33152bd7f93a936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "html_url": "https://github.com/rust-lang/rust/commit/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4958878ad219d570388a1866d13761e35122cc0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4958878ad219d570388a1866d13761e35122cc0a", "html_url": "https://github.com/rust-lang/rust/commit/4958878ad219d570388a1866d13761e35122cc0a"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "2c8b20f83a93841f1d9ff82a329ffb368511a922", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 85 lints included in this crate:\n+There are 86 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -59,6 +59,7 @@ name\n [option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)   | warn    | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`)\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                 | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n [out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)         | deny    | out of bound constant indexing\n+[panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                             | warn    | missing parameters in `panic!`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                 | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                       | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                 | warn    | using Range::step_by(0), which produces an infinite iterator"}, {"sha": "0882f3af41f2efe504f70cd127303f8ac8be2c2e", "filename": "src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -6,7 +6,7 @@ use reexport::*;\n use syntax::codemap::Span;\n use syntax::attr::*;\n use syntax::ast::{Attribute, MetaList, MetaWord};\n-use utils::{in_macro, match_path, span_lint};\n+use utils::{in_macro, match_path, span_lint, BEGIN_UNWIND};\n \n /// **What it does:** This lint warns on items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n ///\n@@ -94,7 +94,7 @@ fn is_relevant_expr(expr: &Expr) -> bool {\n         ExprRet(None) | ExprBreak(_) => false,\n         ExprCall(ref path_expr, _) => {\n             if let ExprPath(_, ref path) = path_expr.node {\n-                !match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n+                !match_path(path, &BEGIN_UNWIND)\n             } else { true }\n         }\n         _ => true"}, {"sha": "adc1d402e92f9299d3ed948d295aa01274f971f4", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -67,6 +67,7 @@ pub mod cyclomatic_complexity;\n pub mod escape;\n pub mod misc_early;\n pub mod array_indexing;\n+pub mod panic;\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -123,6 +124,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box misc::UsedUnderscoreBinding);\n     reg.register_late_lint_pass(box array_indexing::ArrayIndexing);\n+    reg.register_late_lint_pass(box panic::PanicPass);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -198,6 +200,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_update::NEEDLESS_UPDATE,\n         no_effect::NO_EFFECT,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n+        panic::PANIC_PARAMS,\n         precedence::PRECEDENCE,\n         ptr_arg::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,"}, {"sha": "6f713804e8c865f356d6f7e094bc2d7380eb0ae1", "filename": "src/panic.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpanic.rs?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -0,0 +1,42 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use syntax::ast::Lit_::LitStr;\n+\n+use utils::{span_lint, in_external_macro, match_path, BEGIN_UNWIND};\n+\n+/// **What it does:** Warn about missing parameters in `panic!`.\n+///\n+/// **Known problems:** Should you want to use curly brackets in `panic!` without any parameter,\n+/// this lint will warn.\n+///\n+/// **Example:**\n+/// ```\n+/// panic!(\"This panic! is probably missing a parameter there: {}\");\n+/// ```\n+declare_lint!(pub PANIC_PARAMS, Warn, \"missing parameters in `panic!`\");\n+\n+#[allow(missing_copy_implementations)]\n+pub struct PanicPass;\n+\n+impl LintPass for PanicPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PANIC_PARAMS)\n+    }\n+}\n+\n+impl LateLintPass for PanicPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {[\n+            in_external_macro(cx, expr.span),\n+            let ExprCall(ref fun, ref params) = expr.node,\n+            params.len() == 2,\n+            let ExprPath(None, ref path) = fun.node,\n+            match_path(path, &BEGIN_UNWIND),\n+            let ExprLit(ref lit) = params[0].node,\n+            let LitStr(ref string, _) = lit.node,\n+            string.contains('{')\n+        ], {\n+            span_lint(cx, PANIC_PARAMS, expr.span, \"You probably are missing some parameter in your `panic!` call\");\n+        }}\n+    }\n+}"}, {"sha": "1ce97ccea4e64b278c5e873b9c500427fb46d0eb", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -21,6 +21,7 @@ pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"Linke\n pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const MUTEX_PATH:  [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const CLONE_PATH:  [&'static str; 2] = [\"Clone\", \"clone\"];\n+pub const BEGIN_UNWIND:[&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///"}, {"sha": "36427f4330b8b1c1f7979e8ae08676f817fedce0", "filename": "tests/compile-fail/panic.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592ca26e902bfa9ed3648db4ef0eeb53a5d598fe/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=592ca26e902bfa9ed3648db4ef0eeb53a5d598fe", "patch": "@@ -0,0 +1,22 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(panic_params)]\n+\n+fn missing() {\n+    panic!(\"{}\"); //~ERROR: You probably are missing some parameter\n+}\n+\n+fn ok_sigle() {\n+    panic!(\"foo bar\");\n+}\n+\n+fn ok_multiple() {\n+    panic!(\"{}\", \"This is {ok}\");\n+}\n+\n+fn main() {\n+    missing();\n+    ok_sigle();\n+    ok_multiple();\n+}"}]}