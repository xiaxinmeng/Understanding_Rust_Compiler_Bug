{"sha": "abab99e02b3826355645889d6b53b33414e5f4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWI5OWUwMmIzODI2MzU1NjQ1ODg5ZDZiNTNiMzM0MTRlNWY0ZDU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-22T14:50:59Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-22T14:50:59Z"}, "message": "Stop tracking namespce in used_imports.\n\nThe information was tracked, but unused.", "tree": {"sha": "5f5f7aef3596273d8674f3b0acac1b63195b202d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5f7aef3596273d8674f3b0acac1b63195b202d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abab99e02b3826355645889d6b53b33414e5f4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abab99e02b3826355645889d6b53b33414e5f4d5", "html_url": "https://github.com/rust-lang/rust/commit/abab99e02b3826355645889d6b53b33414e5f4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abab99e02b3826355645889d6b53b33414e5f4d5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "html_url": "https://github.com/rust-lang/rust/commit/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "760b74699619619e8bd4969163ba8d93ebefbfba", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=abab99e02b3826355645889d6b53b33414e5f4d5", "patch": "@@ -63,8 +63,7 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     // We have information about whether `use` (import) items are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, id: ast::NodeId) {\n-        let mut used = false;\n-        self.r.per_ns(|this, ns| used |= this.used_imports.contains(&(id, ns)));\n+        let used = self.r.used_imports.contains(&id);\n         let def_id = self.r.local_def_id(id);\n         if !used {\n             if self.r.maybe_unused_trait_imports.contains(&def_id) {"}, {"sha": "dfb6d89a0d12601772f5ad183f2fc10b06fe727b", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=abab99e02b3826355645889d6b53b33414e5f4d5", "patch": "@@ -303,7 +303,7 @@ impl<'a> Resolver<'a> {\n                     if self.last_import_segment && check_usable(self, binding).is_err() {\n                         Err((Determined, Weak::No))\n                     } else {\n-                        self.record_use(ident, ns, binding, restricted_shadowing);\n+                        self.record_use(ident, binding, restricted_shadowing);\n \n                         if let Some(shadowed_glob) = resolution.shadowed_glob {\n                             // Forbid expanded shadowing to avoid time travel.\n@@ -609,9 +609,9 @@ impl<'a> Resolver<'a> {\n             self.per_ns(|this, ns| {\n                 let key = this.new_key(target, ns);\n                 let _ = this.try_define(import.parent_scope.module, key, dummy_binding);\n-                // Consider erroneous imports used to avoid duplicate diagnostics.\n-                this.record_use(target, ns, dummy_binding, false);\n             });\n+            // Consider erroneous imports used to avoid duplicate diagnostics.\n+            self.record_use(target, dummy_binding, false);\n         }\n     }\n }\n@@ -709,7 +709,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n             } else if is_indeterminate {\n                 // Consider erroneous imports used to avoid duplicate diagnostics.\n-                self.r.used_imports.insert((import.id, TypeNS));\n+                self.r.used_imports.insert(import.id);\n                 let path = import_path_to_string(\n                     &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n                     &import.kind,\n@@ -902,7 +902,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics.\n-            self.r.used_imports.insert((import.id, TypeNS));\n+            self.r.used_imports.insert(import.id);\n         }\n         let module = match path_res {\n             PathResult::Module(module) => {\n@@ -1043,7 +1043,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 {\n                                     this.record_use(\n                                         ident,\n-                                        ns,\n                                         target_binding,\n                                         import.module_path.is_empty(),\n                                     );"}, {"sha": "0b552aa07f5179062631d70ea8347ffda0a206dd", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=abab99e02b3826355645889d6b53b33414e5f4d5", "patch": "@@ -1738,7 +1738,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // whether they can be shadowed by fresh bindings or not, so force an error.\n                 // issues/33118#issuecomment-233962221 (see below) still applies here,\n                 // but we have to ignore it for backward compatibility.\n-                self.r.record_use(ident, ValueNS, binding, false);\n+                self.r.record_use(ident, binding, false);\n                 return None;\n             }\n             LexicalScopeBinding::Item(binding) => (binding.res(), Some(binding)),\n@@ -1753,7 +1753,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ) if is_syntactic_ambiguity => {\n                 // Disambiguate in favor of a unit struct/variant or constant pattern.\n                 if let Some(binding) = binding {\n-                    self.r.record_use(ident, ValueNS, binding, false);\n+                    self.r.record_use(ident, binding, false);\n                 }\n                 Some(res)\n             }"}, {"sha": "465007507dafeb682e958c69a61b59b0f9bf75bb", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=abab99e02b3826355645889d6b53b33414e5f4d5", "patch": "@@ -942,7 +942,7 @@ pub struct Resolver<'a> {\n     glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Visibilities in \"lowered\" form, for all entities that have them.\n     visibilities: FxHashMap<LocalDefId, ty::Visibility>,\n-    used_imports: FxHashSet<(NodeId, Namespace)>,\n+    used_imports: FxHashSet<NodeId>,\n     maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n@@ -1656,7 +1656,6 @@ impl<'a> Resolver<'a> {\n     fn record_use(\n         &mut self,\n         ident: Ident,\n-        ns: Namespace,\n         used_binding: &'a NameBinding<'a>,\n         is_lexical_scope: bool,\n     ) {\n@@ -1684,9 +1683,9 @@ impl<'a> Resolver<'a> {\n             }\n             used.set(true);\n             import.used.set(true);\n-            self.used_imports.insert((import.id, ns));\n+            self.used_imports.insert(import.id);\n             self.add_to_glob_map(&import, ident);\n-            self.record_use(ident, ns, binding, false);\n+            self.record_use(ident, binding, false);\n         }\n     }\n \n@@ -3241,7 +3240,7 @@ impl<'a> Resolver<'a> {\n         self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {\n             if let Some(binding) = entry.extern_crate_item {\n                 if !speculative && entry.introduced_by_item {\n-                    self.record_use(ident, TypeNS, binding, false);\n+                    self.record_use(ident, binding, false);\n                 }\n                 Some(binding)\n             } else {\n@@ -3428,7 +3427,7 @@ impl<'a> Resolver<'a> {\n         let is_import = name_binding.is_import();\n         let span = name_binding.span;\n         if let Res::Def(DefKind::Fn, _) = res {\n-            self.record_use(ident, ValueNS, name_binding, false);\n+            self.record_use(ident, name_binding, false);\n         }\n         self.main_def = Some(MainDefinition { res, is_import, span });\n     }"}, {"sha": "7f86f891c4450039b11c5bb9974672a24fe6342e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab99e02b3826355645889d6b53b33414e5f4d5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=abab99e02b3826355645889d6b53b33414e5f4d5", "patch": "@@ -1090,7 +1090,7 @@ impl<'a> Resolver<'a> {\n             ) {\n                 Ok(binding) => {\n                     let initial_res = initial_binding.map(|initial_binding| {\n-                        self.record_use(ident, MacroNS, initial_binding, false);\n+                        self.record_use(ident, initial_binding, false);\n                         initial_binding.res()\n                     });\n                     let res = binding.res();"}]}