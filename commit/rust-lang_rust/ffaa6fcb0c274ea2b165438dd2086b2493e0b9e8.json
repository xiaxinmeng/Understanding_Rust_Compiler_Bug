{"sha": "ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWE2ZmNiMGMyNzRlYTJiMTY1NDM4ZGQyMDg2YjI0OTNlMGI5ZTg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-29T23:10:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-29T23:10:48Z"}, "message": "Merge pull request #2661 from topecongiro/issue-2645\n\nPreserve comments between attribute and use item", "tree": {"sha": "b9746eb051d590d65208f39efbfae941ffa8b7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9746eb051d590d65208f39efbfae941ffa8b7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa5lD4CRBK7hj4Ov3rIwAAdHIIAKnaWyebKQ9I+mSkdaOSHJ6j\nLIImSmmIqoRVQU1O1Vb4+zsZu1nCgHmODHtFsNiYf9spoMNS/JZ/CLWG3b9mqS5M\n/B2tvnEHzdlAsAS8t85rGZfLp4cMVzssu4hmYtmYfO8o+SKEfQWGEcCGLg0rMopm\nxycFbxxtFaqN9tcEfcDQDeia83ACKDT4Y6458JIJgQUKbn+8JSm7pHX3OIYnmaye\nM/BVYdgOp+fG9vcX8oURs0IGl82qmByRj7MExXBhZVgtqPidBcZb2twcq/cN6Chz\nEfGLHMTsPNk7GFoOOqbNvx1G4/Eeov1rR37vTKlrAWDnfR2dRD4eL9XuiCB3Qao=\n=zE04\n-----END PGP SIGNATURE-----\n", "payload": "tree b9746eb051d590d65208f39efbfae941ffa8b7bc\nparent af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c\nparent 0c5631e4c1032bf8bc1a5b9e6c1517e9f261a58f\nauthor Nick Cameron <nrc@ncameron.org> 1525043448 +1200\ncommitter GitHub <noreply@github.com> 1525043448 +1200\n\nMerge pull request #2661 from topecongiro/issue-2645\n\nPreserve comments between attribute and use item "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "html_url": "https://github.com/rust-lang/rust/commit/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "html_url": "https://github.com/rust-lang/rust/commit/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c"}, {"sha": "0c5631e4c1032bf8bc1a5b9e6c1517e9f261a58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5631e4c1032bf8bc1a5b9e6c1517e9f261a58f", "html_url": "https://github.com/rust-lang/rust/commit/0c5631e4c1032bf8bc1a5b9e6c1517e9f261a58f"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "8963f62748b99c011c5a0828163b8ab16e557c51", "filename": "src/imports.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "patch": "@@ -15,6 +15,7 @@ use syntax::ast::{self, UseTreeKind};\n use syntax::codemap::{self, BytePos, Span, DUMMY_SP};\n \n use codemap::SpanUtils;\n+use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n@@ -118,6 +119,17 @@ impl PartialEq for UseTree {\n }\n impl Eq for UseTree {}\n \n+impl Spanned for UseTree {\n+    fn span(&self) -> Span {\n+        let lo = if let Some(ref attrs) = self.attrs {\n+            attrs.iter().next().map_or(self.span.lo(), |a| a.span.lo())\n+        } else {\n+            self.span.lo()\n+        };\n+        mk_sp(lo, self.span.hi())\n+    }\n+}\n+\n impl UseSegment {\n     // Clone a version of self with any top-level alias removed.\n     fn remove_alias(&self) -> UseSegment {\n@@ -219,26 +231,26 @@ impl fmt::Display for UseTree {\n impl UseTree {\n     // Rewrite use tree with `use ` and a trailing `;`.\n     pub fn rewrite_top_level(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let mut result = String::with_capacity(256);\n-        if let Some(ref attrs) = self.attrs {\n-            result.push_str(&attrs.rewrite(context, shape)?);\n-            if !result.is_empty() {\n-                result.push_str(&shape.indent.to_string_with_newline(context.config));\n-            }\n-        }\n-\n         let vis = self.visibility\n             .as_ref()\n             .map_or(Cow::from(\"\"), |vis| ::utils::format_visibility(&vis));\n-        result.push_str(&self.rewrite(context, shape.offset_left(vis.len())?)\n+        let use_str = self.rewrite(context, shape.offset_left(vis.len())?)\n             .map(|s| {\n                 if s.is_empty() {\n                     s.to_owned()\n                 } else {\n                     format!(\"{}use {};\", vis, s)\n                 }\n-            })?);\n-        Some(result)\n+            })?;\n+        if let Some(ref attrs) = self.attrs {\n+            let attr_str = attrs.rewrite(context, shape)?;\n+            let lo = attrs.last().as_ref()?.span().hi();\n+            let hi = self.span.lo();\n+            let span = mk_sp(lo, hi);\n+            combine_strs_with_missing_comments(context, &attr_str, &use_str, span, shape, false)\n+        } else {\n+            Some(use_str)\n+        }\n     }\n \n     // FIXME: Use correct span?\n@@ -267,7 +279,7 @@ impl UseTree {\n                     use_tree,\n                     None,\n                     Some(item.vis.clone()),\n-                    Some(item.span().lo()),\n+                    Some(item.span.lo()),\n                     if item.attrs.is_empty() {\n                         None\n                     } else {"}, {"sha": "027b64e8317a2b72f2ee2b3f1546bd0bd82bb25a", "filename": "src/reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "patch": "@@ -128,8 +128,8 @@ fn rewrite_reorderable_items(\n                 cloned.iter(),\n                 \"\",\n                 \";\",\n-                |item| item.span.lo(),\n-                |item| item.span.hi(),\n+                |item| item.span().lo(),\n+                |item| item.span().hi(),\n                 |_item| Some(\"\".to_owned()),\n                 span.lo(),\n                 span.hi(),"}, {"sha": "09ba23c82021cd33fc8cd94c8864b2f1c330b9d1", "filename": "tests/source/imports.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "patch": "@@ -88,3 +88,8 @@ use a::{b::{c::*}};\n use a::{b::{c::{}}};\n use a::{b::{c::d}};\n use a::{b::{c::{xxx, yyy, zzz}}};\n+\n+// #2645\n+/// This line is not affected.\n+// This line is deleted.\n+use c;"}, {"sha": "01b22fd39ec5586eb224665eac7f5b9dead2dd01", "filename": "tests/target/imports.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=ffaa6fcb0c274ea2b165438dd2086b2493e0b9e8", "patch": "@@ -95,3 +95,8 @@ use fooo::{baar::foobar::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyy\n use a::b::c::d;\n use a::b::c::*;\n use a::b::c::{xxx, yyy, zzz};\n+\n+// #2645\n+/// This line is not affected.\n+// This line is deleted.\n+use c;"}]}