{"sha": "a53bdc6212b9abf8538a877ebfde214120bf061f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1M2JkYzYyMTJiOWFiZjg1MzhhODc3ZWJmZGUyMTQxMjBiZjA2MWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-19T07:34:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-29T06:11:02Z"}, "message": "Add -Zapproximate-suggestions", "tree": {"sha": "7621118b3e82bafa43a27dbe21e6ebbed5536f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7621118b3e82bafa43a27dbe21e6ebbed5536f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a53bdc6212b9abf8538a877ebfde214120bf061f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a53bdc6212b9abf8538a877ebfde214120bf061f", "html_url": "https://github.com/rust-lang/rust/commit/a53bdc6212b9abf8538a877ebfde214120bf061f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a53bdc6212b9abf8538a877ebfde214120bf061f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "937bc2e04aaad37f97d367f7c5073c352e357bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/937bc2e04aaad37f97d367f7c5073c352e357bb5", "html_url": "https://github.com/rust-lang/rust/commit/937bc2e04aaad37f97d367f7c5073c352e357bb5"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "9543d01597d04b0d6a8769c8de54f9a339711fd8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a53bdc6212b9abf8538a877ebfde214120bf061f", "patch": "@@ -1288,6 +1288,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n+    approximate_suggestions: bool = (false, parse_bool, [UNTRACKED],\n+        \"include machine-applicability of suggestions in JSON output\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"Present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:"}, {"sha": "d311076c39e8d1aa4ae1e467dfa472a87776c0d0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a53bdc6212b9abf8538a877ebfde214120bf061f", "patch": "@@ -910,10 +910,12 @@ pub fn build_session_with_codemap(sopts: config::Options,\n             Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false))\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n-            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(), pretty))\n+            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(),\n+                     pretty, sopts.debugging_opts.approximate_suggestions))\n         }\n         (config::ErrorOutputType::Json(pretty), Some(dst)) => {\n-            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(), pretty))\n+            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(),\n+                     pretty, sopts.debugging_opts.approximate_suggestions))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true))"}, {"sha": "7a8717ada4c3f64148f63755191b64de7dfb0117", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53bdc6212b9abf8538a877ebfde214120bf061f/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=a53bdc6212b9abf8538a877ebfde214120bf061f", "patch": "@@ -38,34 +38,41 @@ pub struct JsonEmitter {\n     registry: Option<Registry>,\n     cm: Rc<CodeMapper + 'static>,\n     pretty: bool,\n+    /// Whether \"approximate suggestions\" are enabled in the config\n+    approximate_suggestions: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Rc<CodeMap>,\n-                  pretty: bool) -> JsonEmitter {\n+                  pretty: bool,\n+                  approximate_suggestions: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n             pretty,\n+            approximate_suggestions,\n         }\n     }\n \n     pub fn basic(pretty: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n-        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)), pretty)\n+        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)),\n+                            pretty, false)\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<Registry>,\n                code_map: Rc<CodeMap>,\n-               pretty: bool) -> JsonEmitter {\n+               pretty: bool,\n+               approximate_suggestions: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n             pretty,\n+            approximate_suggestions,\n         }\n     }\n }\n@@ -283,6 +290,13 @@ impl DiagnosticSpan {\n                 def_site_span,\n             })\n         });\n+\n+        let suggestion_approximate = if je.approximate_suggestions {\n+             suggestion.map(|x| x.1)\n+        } else {\n+            None\n+        };\n+\n         DiagnosticSpan {\n             file_name: start.file.name.to_string(),\n             byte_start: span.lo().0 - start.file.start_pos.0,\n@@ -294,7 +308,7 @@ impl DiagnosticSpan {\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n             suggested_replacement: suggestion.map(|x| x.0.clone()),\n-            suggestion_approximate: suggestion.map(|x| x.1),\n+            suggestion_approximate,\n             expansion: backtrace_step,\n             label,\n         }"}]}