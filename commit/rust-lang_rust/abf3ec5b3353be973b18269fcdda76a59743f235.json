{"sha": "abf3ec5b3353be973b18269fcdda76a59743f235", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjNlYzViMzM1M2JlOTczYjE4MjY5ZmNkZGE3NmE1OTc0M2YyMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-08T00:37:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-08T00:37:38Z"}, "message": "Auto merge of #85057 - Dylan-DPC:rollup-efaseq2, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #76808 (Improve diagnostics for functions in `struct` definitions)\n - #84887 (Remove SpanInterner::get)\n - #85034 (fix null pointer error messages)\n - #85038 (Don't stop running rustdoc-gui tests at first failure)\n - #85044 (Use `path.exists()` instead of `fs::metadata(path).is_ok()`)\n - #85052 (rustdoc: Link to the docs on namespaces when an unknown disambiguator is found)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6109eee77b56b95c58cf55d7fb353aab1674189d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6109eee77b56b95c58cf55d7fb353aab1674189d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf3ec5b3353be973b18269fcdda76a59743f235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf3ec5b3353be973b18269fcdda76a59743f235", "html_url": "https://github.com/rust-lang/rust/commit/abf3ec5b3353be973b18269fcdda76a59743f235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf3ec5b3353be973b18269fcdda76a59743f235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467253ff6a2aecd008d273286315ac14ff8ad937", "url": "https://api.github.com/repos/rust-lang/rust/commits/467253ff6a2aecd008d273286315ac14ff8ad937", "html_url": "https://github.com/rust-lang/rust/commit/467253ff6a2aecd008d273286315ac14ff8ad937"}, {"sha": "885231768b0315a618e037396a17a13d4b1f25f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/885231768b0315a618e037396a17a13d4b1f25f9", "html_url": "https://github.com/rust-lang/rust/commit/885231768b0315a618e037396a17a13d4b1f25f9"}], "stats": {"total": 287, "additions": 191, "deletions": 96}, "files": [{"sha": "cb3c98354c8750242c5c91f4a631118651ca59f1", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -772,7 +772,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // check to see if the file is there and just omit linking to it if it's\n         // not present.\n         let name = format!(\"{}.dll.lib\", lib);\n-        if fs::metadata(&path.join(&name)).is_ok() {\n+        if path.join(&name).exists() {\n             self.cmd.arg(name);\n         }\n     }"}, {"sha": "9c3bed6ec0ad8b8c618000eda597692e6526b5f6", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -170,22 +170,25 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n /// Details of why a pointer had to be in-bounds.\n #[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n+    /// We are access memory.\n     MemoryAccessTest,\n+    /// We are doing pointer arithmetic.\n     PointerArithmeticTest,\n+    /// None of the above -- generic/unspecific inbounds test.\n     InboundsTest,\n }\n \n impl fmt::Display for CheckInAllocMsg {\n     /// When this is printed as an error the context looks like this\n-    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n+    /// \"{msg}pointer must be in-bounds at offset...\"\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"{}\",\n             match *self {\n-                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n-                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n-                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n+                CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n+                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n+                CheckInAllocMsg::InboundsTest => \"\",\n             }\n         )\n     }\n@@ -299,18 +302,18 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             }\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n-                \"{} failed: pointer must be in-bounds at offset {}, \\\n+                \"{}pointer must be in-bounds at offset {}, \\\n                            but is outside bounds of {} which has size {}\",\n                 msg,\n                 ptr.offset.bytes(),\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            DanglingIntPointer(_, CheckInAllocMsg::InboundsTest) => {\n-                write!(f, \"null pointer is not allowed for this operation\")\n+            DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n+                write!(f, \"null pointer is not a valid pointer for this operation\")\n             }\n             DanglingIntPointer(i, msg) => {\n-                write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n+                write!(f, \"{}0x{:x} is not a valid pointer\", msg, i)\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,"}, {"sha": "20e8b0f6425cee73b752550b58a1a40da46d69e0", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -1124,11 +1124,11 @@ impl<'a> Parser<'a> {\n                 if !this.recover_nested_adt_item(kw::Enum)? {\n                     return Ok((None, TrailingToken::None));\n                 }\n-                let ident = this.parse_ident()?;\n+                let ident = this.parse_field_ident(\"enum\", vlo)?;\n \n                 let struct_def = if this.check(&token::OpenDelim(token::Brace)) {\n                     // Parse a struct variant.\n-                    let (fields, recovered) = this.parse_record_struct_body()?;\n+                    let (fields, recovered) = this.parse_record_struct_body(\"struct\")?;\n                     VariantData::Struct(fields, recovered)\n                 } else if this.check(&token::OpenDelim(token::Paren)) {\n                     VariantData::Tuple(this.parse_tuple_struct_body()?, DUMMY_NODE_ID)\n@@ -1182,15 +1182,15 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                let (fields, recovered) = self.parse_record_struct_body()?;\n+                let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n                 VariantData::Struct(fields, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n             VariantData::Struct(fields, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n@@ -1220,10 +1220,10 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(kw::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n             VariantData::Struct(fields, recovered)\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n             VariantData::Struct(fields, recovered)\n         } else {\n             let token_str = super::token_descr(&self.token);\n@@ -1236,12 +1236,15 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    fn parse_record_struct_body(&mut self) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n+    fn parse_record_struct_body(\n+        &mut self,\n+        adt_ty: &str,\n+    ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n         let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                let field = self.parse_field_def().map_err(|e| {\n+                let field = self.parse_field_def(adt_ty).map_err(|e| {\n                     self.consume_block(token::Brace, ConsumeClosingDelim::No);\n                     recovered = true;\n                     e\n@@ -1294,24 +1297,25 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an element of a struct declaration.\n-    fn parse_field_def(&mut self) -> PResult<'a, FieldDef> {\n+    fn parse_field_def(&mut self, adt_ty: &str) -> PResult<'a, FieldDef> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n             let vis = this.parse_visibility(FollowedByType::No)?;\n-            Ok((this.parse_single_struct_field(lo, vis, attrs)?, TrailingToken::None))\n+            Ok((this.parse_single_struct_field(adt_ty, lo, vis, attrs)?, TrailingToken::None))\n         })\n     }\n \n     /// Parses a structure field declaration.\n     fn parse_single_struct_field(\n         &mut self,\n+        adt_ty: &str,\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n         let mut seen_comma: bool = false;\n-        let a_var = self.parse_name_and_ty(lo, vis, attrs)?;\n+        let a_var = self.parse_name_and_ty(adt_ty, lo, vis, attrs)?;\n         if self.token == token::Comma {\n             seen_comma = true;\n         }\n@@ -1398,11 +1402,12 @@ impl<'a> Parser<'a> {\n     /// Parses a structure field.\n     fn parse_name_and_ty(\n         &mut self,\n+        adt_ty: &str,\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n-        let name = self.parse_ident_common(false)?;\n+        let name = self.parse_field_ident(adt_ty, lo)?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         Ok(FieldDef {\n@@ -1416,6 +1421,29 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Parses a field identifier. Specialized version of `parse_ident_common`\n+    /// for better diagnostics and suggestions.\n+    fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n+        let (ident, is_raw) = self.ident_or_err()?;\n+        if !is_raw && ident.is_reserved() {\n+            let err = if self.check_fn_front_matter(false) {\n+                let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n+                let mut err = self.struct_span_err(\n+                    lo.to(self.prev_token.span),\n+                    &format!(\"functions are not allowed in {} definitions\", adt_ty),\n+                );\n+                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n+                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                err\n+            } else {\n+                self.expected_ident_found()\n+            };\n+            return Err(err);\n+        }\n+        self.bump();\n+        Ok(ident)\n+    }\n+\n     /// Parses a declarative macro 2.0 definition.\n     /// The `macro` keyword has already been parsed.\n     /// ```"}, {"sha": "74481e236f31c7c3846addced8f2a4869e4dac91", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -522,27 +522,27 @@ impl<'a> Parser<'a> {\n         self.parse_ident_common(true)\n     }\n \n+    fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        self.token.ident().ok_or_else(|| match self.prev_token.kind {\n+            TokenKind::DocComment(..) => {\n+                self.span_fatal_err(self.prev_token.span, Error::UselessDocComment)\n+            }\n+            _ => self.expected_ident_found(),\n+        })\n+    }\n+\n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n-        match self.token.ident() {\n-            Some((ident, is_raw)) => {\n-                if !is_raw && ident.is_reserved() {\n-                    let mut err = self.expected_ident_found();\n-                    if recover {\n-                        err.emit();\n-                    } else {\n-                        return Err(err);\n-                    }\n-                }\n-                self.bump();\n-                Ok(ident)\n+        let (ident, is_raw) = self.ident_or_err()?;\n+        if !is_raw && ident.is_reserved() {\n+            let mut err = self.expected_ident_found();\n+            if recover {\n+                err.emit();\n+            } else {\n+                return Err(err);\n             }\n-            _ => Err(match self.prev_token.kind {\n-                TokenKind::DocComment(..) => {\n-                    self.span_fatal_err(self.prev_token.span, Error::UselessDocComment)\n-                }\n-                _ => self.expected_ident_found(),\n-            }),\n         }\n+        self.bump();\n+        Ok(ident)\n     }\n \n     /// Checks if the next token is `tok`, and returns `true` if so."}, {"sha": "e365844980b4b2f7eaf0d2cf6631bdad035f1520", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -109,7 +109,7 @@ pub struct RealFileLoader;\n \n impl FileLoader for RealFileLoader {\n     fn file_exists(&self, path: &Path) -> bool {\n-        fs::metadata(path).is_ok()\n+        path.exists()\n     }\n \n     fn read_file(&self, path: &Path) -> io::Result<String> {"}, {"sha": "5ea39b343b5c18910b39a23be1a3f04a34e6c076", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -102,7 +102,7 @@ impl Span {\n             // Interned format.\n             debug_assert!(self.ctxt_or_zero == 0);\n             let index = self.base_or_index;\n-            with_span_interner(|interner| *interner.get(index))\n+            with_span_interner(|interner| interner.spans[index as usize])\n         }\n     }\n }\n@@ -117,11 +117,6 @@ impl SpanInterner {\n         let (index, _) = self.spans.insert_full(*span_data);\n         index as u32\n     }\n-\n-    #[inline]\n-    fn get(&self, index: u32) -> &SpanData {\n-        &self.spans[index as usize]\n-    }\n }\n \n // If an interner exists, return it. Otherwise, prepare a fresh one."}, {"sha": "df467bebe7481b11a8fd5e6e4e8b9aa9767cb738", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -831,28 +831,14 @@ impl Step for RustdocGUI {\n             command.arg(\"src/test/rustdoc-gui/lib.rs\").arg(\"-o\").arg(&out_dir);\n             builder.run(&mut command);\n \n-            let mut tests = Vec::new();\n-            for file in fs::read_dir(\"src/test/rustdoc-gui\").unwrap() {\n-                let file = file.unwrap();\n-                let file_path = file.path();\n-                let file_name = file.file_name();\n-\n-                if !file_name.to_str().unwrap().ends_with(\".goml\") {\n-                    continue;\n-                }\n-                tests.push(file_path);\n-            }\n-            tests.sort_unstable();\n-            for test in tests {\n-                let mut command = Command::new(&nodejs);\n-                command\n-                    .arg(\"src/tools/rustdoc-gui/tester.js\")\n-                    .arg(\"--doc-folder\")\n-                    .arg(out_dir.join(\"test_docs\"))\n-                    .arg(\"--test-file\")\n-                    .arg(test);\n-                builder.run(&mut command);\n-            }\n+            let mut command = Command::new(&nodejs);\n+            command\n+                .arg(\"src/tools/rustdoc-gui/tester.js\")\n+                .arg(\"--doc-folder\")\n+                .arg(out_dir.join(\"test_docs\"))\n+                .arg(\"--tests-folder\")\n+                .arg(\"src/test/rustdoc-gui\");\n+            builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-gui\\\" tests\");\n         }"}, {"sha": "4317b9747353d87bc4d8ddb22490691ee4d2f425", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -2017,7 +2017,10 @@ fn disambiguator_error(\n     msg: &str,\n ) {\n     diag_info.link_range = disambiguator_range;\n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |_diag, _sp| {});\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |diag, _sp| {\n+        let msg = \"see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\";\n+        diag.note(msg);\n+    });\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions."}, {"sha": "f287f87408c48f79787c705e4733fa403275392d", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -10,6 +10,7 @@ note: the lint level is defined here\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to previous error\n "}, {"sha": "94d6d4616518ea7599ef5f7151a2025975a3e0fd", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -10,36 +10,47 @@ note: the lint level is defined here\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `bar`\n   --> $DIR/unknown-disambiguator.rs:3:35\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                                   ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:9:34\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                  ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:9:48\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                                ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:6:31\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                               ^\n+   |\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:6:57\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                                                         ^\n+   |\n+   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c69674a6721bc0fd61f04913849a30e1e70fc4ff", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not allowed for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "bb95343a786a40056bcf471a8358432bd19cb2b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not allowed for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "4254cda2a0084c4f81f8f53b943e2584e9483cfe", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -74,7 +74,7 @@ error: any use of this value will cause an error\n LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                    |\n-   |                    null pointer is not allowed for this operation\n+   |                    null pointer is not a valid pointer for this operation\n    |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |                    inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:36:14\n    | "}, {"sha": "5ae1b727dc772f44054ae2a90b00433479216d24", "filename": "src/test/ui/structs/struct-fn-in-definition.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -0,0 +1,33 @@\n+// It might be intuitive for a user coming from languages like Java\n+// to declare a method directly in a struct's definition. Make sure\n+// rustc can give a helpful suggestion.\n+// Suggested in issue #76421\n+\n+struct S {\n+    field: usize,\n+\n+    fn foo() {}\n+    //~^ ERROR functions are not allowed in struct definitions\n+    //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+    //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+}\n+\n+union U {\n+    variant: usize,\n+\n+    fn foo() {}\n+    //~^ ERROR functions are not allowed in union definitions\n+    //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+    //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+}\n+\n+enum E {\n+    Variant,\n+\n+    fn foo() {}\n+    //~^ ERROR functions are not allowed in enum definitions\n+    //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+    //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+}\n+\n+fn main() {}"}, {"sha": "1d7cd5272958659f729c2889b6898367c7db5dcd", "filename": "src/test/ui/structs/struct-fn-in-definition.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -0,0 +1,29 @@\n+error: functions are not allowed in struct definitions\n+  --> $DIR/struct-fn-in-definition.rs:9:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error: functions are not allowed in union definitions\n+  --> $DIR/struct-fn-in-definition.rs:18:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error: functions are not allowed in enum definitions\n+  --> $DIR/struct-fn-in-definition.rs:27:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "298fc7519facc0e775e8ffbc19fb47231840faeb", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/abf3ec5b3353be973b18269fcdda76a59743f235/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=abf3ec5b3353be973b18269fcdda76a59743f235", "patch": "@@ -3,29 +3,30 @@\n // ```\n // npm install browser-ui-test\n // ```\n-const path = require('path');\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n const {Options, runTest} = require('browser-ui-test');\n \n function showHelp() {\n     console.log(\"rustdoc-js options:\");\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n     console.log(\"  --help                     : show this message then quit\");\n-    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+    console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n }\n \n function parseOptions(args) {\n     var opts = {\n         \"doc_folder\": \"\",\n-        \"test_file\": \"\",\n+        \"tests_folder\": \"\",\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n-        \"--test-file\": \"test_file\",\n+        \"--tests-folder\": \"tests_folder\",\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n         if (args[i] === \"--doc-folder\"\n-            || args[i] === \"--test-file\") {\n+            || args[i] === \"--tests-folder\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n@@ -41,8 +42,8 @@ function parseOptions(args) {\n             return null;\n         }\n     }\n-    if (opts[\"test_file\"].length < 1) {\n-        console.log(\"Missing `--test-file` option.\");\n+    if (opts[\"tests_folder\"].length < 1) {\n+        console.log(\"Missing `--tests-folder` option.\");\n     } else if (opts[\"doc_folder\"].length < 1) {\n         console.log(\"Missing `--doc-folder` option.\");\n     } else {\n@@ -51,15 +52,8 @@ function parseOptions(args) {\n     return null;\n }\n \n-function checkFile(test_file, opts, loaded, index) {\n-    const test_name = path.basename(test_file, \".js\");\n-\n-    process.stdout.write('Checking \"' + test_name + '\" ... ');\n-    return runChecks(test_file, loaded, index);\n-}\n-\n-function main(argv) {\n-    var opts = parseOptions(argv.slice(2));\n+async function main(argv) {\n+    let opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         process.exit(1);\n     }\n@@ -68,22 +62,34 @@ function main(argv) {\n     try {\n         // This is more convenient that setting fields one by one.\n         options.parseArguments([\n-            '--no-screenshot',\n+            \"--no-screenshot\",\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n         ]);\n     } catch (error) {\n         console.error(`invalid argument: ${error}`);\n         process.exit(1);\n     }\n \n-    runTest(opts[\"test_file\"], options).then(out => {\n-        const [output, nb_failures] = out;\n-        console.log(output);\n-        process.exit(nb_failures);\n-    }).catch(err => {\n-        console.error(err);\n+    let failed = false;\n+    let files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+\n+    files.sort();\n+    for (var i = 0; i < files.length; ++i) {\n+        const testPath = path.join(opts[\"tests_folder\"], files[i]);\n+        await runTest(testPath, options).then(out => {\n+            const [output, nb_failures] = out;\n+            console.log(output);\n+            if (nb_failures > 0) {\n+                failed = true;\n+            }\n+        }).catch(err => {\n+            console.error(err);\n+            failed = true;\n+        });\n+    }\n+    if (failed) {\n         process.exit(1);\n-    });\n+    }\n }\n \n main(process.argv);"}]}