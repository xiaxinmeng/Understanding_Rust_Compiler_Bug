{"sha": "3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWQ1OTM4Y2M0MDMwZGUyZThjOGUxNDA2MzNjYzRkN2Q1ODczM2M=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T06:36:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T09:00:10Z"}, "message": "Remove uses of default_type_params feature gate from tests.", "tree": {"sha": "90793f5bd8f1373c5c67d7ffbcecf8451c72c2e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90793f5bd8f1373c5c67d7ffbcecf8451c72c2e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "html_url": "https://github.com/rust-lang/rust/commit/3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98a589e23a5471caa6698d953c6eec66304863d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98a589e23a5471caa6698d953c6eec66304863d", "html_url": "https://github.com/rust-lang/rust/commit/b98a589e23a5471caa6698d953c6eec66304863d"}], "stats": {"total": 55, "additions": 7, "deletions": 48}, "files": [{"sha": "d12f716decf9925dfe4e53cb1e58f034dab283f8", "filename": "src/test/auxiliary/default_type_params_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n pub struct Heap;\n \n pub struct FakeHeap;"}, {"sha": "f67f65ec2ef93a4bd05ba744aa014a5f8e455d3c", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -12,7 +12,7 @@\n // just propagate the error.\n \n #![crate_type = \"lib\"]\n-#![feature(default_type_params, lang_items)]\n+#![feature(lang_items)]\n #![no_std]\n \n #[lang=\"sized\"]"}, {"sha": "c525a67c7e9f887a3bc1f8aca2e06c8050a614e1", "filename": "src/test/compile-fail/binop-consume-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that binary operators consume their arguments\n \n-#![feature(default_type_params)]\n-\n use std::ops::{Add, Sub, Mul, Div, Rem, BitAnd, BitXor, BitOr, Shl, Shr};\n \n fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {"}, {"sha": "ffc38cc0a6005557eb0f2c17214fb03005848aae", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that move restrictions are enforced on overloaded binary operations\n \n-#![feature(default_type_params)]\n-\n use std::ops::Add;\n \n fn double_move<T: Add<Output=()>>(x: T) {"}, {"sha": "5aa2deb44f192b23f8dbf6851ad7f7f42982d1c7", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n use std::ops::Add;\n \n #[derive(Copy)]"}, {"sha": "a8b1911426c42dbeb498adb12120e6cdcfacceff", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Foo<A, B, C = (A, B)>;\n \n impl<A, B, C = (A, B)> Foo<A, B, C> {"}, {"sha": "696235333a123004cbf946184d1ece2bda559a9c", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "0cfb05b9332a4ae5d5481d9baa7ae2183fc736cb", "filename": "src/test/compile-fail/generic-non-trailing-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<A = Heap, T>; //~ ERROR type parameters with a default must be trailing"}, {"sha": "f25d8f99b8d5449d45dcfa1c5734662a212ed92c", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "ee3e1818779f355dae149578bc16f234c39bbd79", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "eda1b014fa7a4a54dc01eec1cdfea22c687f7174", "filename": "src/test/compile-fail/generic-type-params-forward-mention.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>;\n //~^ ERROR type parameters with a default cannot use forward declared identifiers"}, {"sha": "5bdee543d738de77c87f5226a46b09855f41e62d", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct A;\n struct B;\n struct C;"}, {"sha": "a7861c4b90d673fbdb9ac09d2e1504ab5be7c480", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -11,7 +11,7 @@\n // Test interaction between unboxed closure sugar and default type\n // parameters (should be exactly as if angle brackets were used).\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n trait Foo<T,U,V=T> {"}, {"sha": "df53ecdac7c2630653769cfe22ed9d9f417051a3", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -12,7 +12,7 @@\n // parameters (should be exactly as if angle brackets were used\n // and regions omitted).\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n use std::kinds::marker;"}, {"sha": "e6fbcf2d38f2b2b317d5e6ce35e860a124c02984", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -13,8 +13,6 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n-#![feature(default_type_params)]\n-\n use std::ops::Mul;\n \n struct Vec1 {"}, {"sha": "46cf9110476d039ed7ed799331c44a313659dff5", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -14,8 +14,6 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n-#![feature(default_type_params)]\n-\n use std::ops::Deref;\n \n pub trait MyEq<Sized? U=Self> for Sized? {"}, {"sha": "2dcf6bf6d090757d0bd84950c8ea7358d08928ba", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n #[derive(PartialEq)]\n struct Bar;\n struct Baz;"}, {"sha": "ed8c6e73255bb49dba6d56d7076a1798b1d5aceb", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:default_type_params_xc.rs\n \n-#![feature(default_type_params)]\n-\n extern crate default_type_params_xc;\n \n struct Vec<T, A = default_type_params_xc::Heap>;"}, {"sha": "5ec478d39e34fd90140171c6aa72f4e564f7e577", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Foo<A = (int, char)> {\n     a: A\n }"}, {"sha": "4a07b5fc432c2bd99770e7cc59877eb09a695e6d", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -15,8 +15,6 @@\n // when this bug was opened. The cases where the compiler\n // panics before the fix have a comment.\n \n-#![feature(default_type_params)]\n-\n use std::thunk::Thunk;\n \n struct S {x:()}"}, {"sha": "549ed08aaf37a54130f49bcf1c6e3dbd4ba74416", "filename": "src/test/run-pass/issue-14933.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-14933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-14933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14933.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n pub type BigRat<T = int> = T;\n \n fn main() {}"}, {"sha": "da6c83142eab62c3a20244c07b8b4354adc93bbe", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::thunk::Thunk;\n "}, {"sha": "a2152db6884ac9fd269c26296cf286d438e85f22", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::thunk::Thunk;\n "}, {"sha": "c3cfaf22dee05607b61e269bf86760f62768d7a2", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n use std::thread::Thread;\n use std::sync::mpsc::Sender;\n use std::thunk::Invoke;"}, {"sha": "43852fb33240090ddadb1314559108aa80ad0d64", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -10,7 +10,7 @@\n \n // If `Mul` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(default_type_params, old_orphan_check)]\n+#![feature(old_orphan_check)]\n \n use std::ops::Mul;\n "}, {"sha": "8e5750005e2e9e60f88597d555daf90a488bb206", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -11,8 +11,6 @@\n // Test that we can overload the `+` operator for points so that two\n // points can be added, and a point can be added to an integer.\n \n-#![feature(default_type_params)]\n-\n use std::ops;\n \n #[derive(Show,PartialEq,Eq)]"}, {"sha": "56887636d5dfbc9baa8ffa62d889482be7c2b1f8", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d5938cc4030de2e8c8e140633cc4d7d58733c/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that nested vtables work with overloaded calls.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::ops::Fn;\n use std::ops::Add;\n@@ -27,4 +27,3 @@ fn main() {\n     // ICE trigger\n     G(1i);\n }\n-"}]}