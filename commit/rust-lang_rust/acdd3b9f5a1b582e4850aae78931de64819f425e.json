{"sha": "acdd3b9f5a1b582e4850aae78931de64819f425e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZGQzYjlmNWExYjU4MmU0ODUwYWFlNzg5MzFkZTY0ODE5ZjQyNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-27T08:59:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-27T08:59:57Z"}, "message": "Auto merge of #31932 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31909, #31918, #31922, #31926, #31928, #31929, #31930\n- Failed merges:", "tree": {"sha": "f618d77bde465265f2d65b576960ea2fe35a52a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f618d77bde465265f2d65b576960ea2fe35a52a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acdd3b9f5a1b582e4850aae78931de64819f425e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acdd3b9f5a1b582e4850aae78931de64819f425e", "html_url": "https://github.com/rust-lang/rust/commit/acdd3b9f5a1b582e4850aae78931de64819f425e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acdd3b9f5a1b582e4850aae78931de64819f425e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80dee36438bd17bd3acf5a1d0324f9d1ef9c3ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80dee36438bd17bd3acf5a1d0324f9d1ef9c3ba6", "html_url": "https://github.com/rust-lang/rust/commit/80dee36438bd17bd3acf5a1d0324f9d1ef9c3ba6"}, {"sha": "7f59c21dff7bf56b466a23c54746be0773b37d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f59c21dff7bf56b466a23c54746be0773b37d0b", "html_url": "https://github.com/rust-lang/rust/commit/7f59c21dff7bf56b466a23c54746be0773b37d0b"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "d279378a2dd45292e88a61d4d56b07f806260197", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acdd3b9f5a1b582e4850aae78931de64819f425e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/acdd3b9f5a1b582e4850aae78931de64819f425e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=acdd3b9f5a1b582e4850aae78931de64819f425e", "patch": "@@ -75,8 +75,8 @@ Libraries\n   improved by using `memchr` to search for newlines][1.7m].\n * [`f32::to_degrees` and `f32::to_radians` are stable][1.7f]. The\n   `f64` variants were stabilized previously.\n-* [`BTreeMap` was rewritten to use less memory improve performance of\n-  insertion and iteration, the latter by as much as 5x`][1.7bm].\n+* [`BTreeMap` was rewritten to use less memory and improve the performance\n+  of insertion and iteration, the latter by as much as 5x`][1.7bm].\n * [`BTreeSet` and its iterators, `Iter`, `IntoIter`, and `Range` are\n   covariant over their contained type][1.7bt].\n * [`LinkedList` and its iterators, `Iter` and `IntoIter` are covariant"}, {"sha": "913cfcff104af0f87439962c0d5220ccaffe9449", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=acdd3b9f5a1b582e4850aae78931de64819f425e", "patch": "@@ -3040,7 +3040,7 @@ the case of a `while` loop, the head is the conditional expression controlling\n the loop. In the case of a `for` loop, the head is the call-expression\n controlling the loop. If the label is present, then `continue 'foo` returns\n control to the head of the loop with label `'foo`, which need not be the\n-innermost label enclosing the `break` expression, but must enclose it.\n+innermost label enclosing the `continue` expression, but must enclose it.\n \n A `continue` expression is only permitted in the body of a loop.\n "}, {"sha": "5f3df398f16ba4802a32a32ae6b53ec9469fc7ac", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=acdd3b9f5a1b582e4850aae78931de64819f425e", "patch": "@@ -267,9 +267,11 @@ impl str {\n     /// Converts a string slice to a raw pointer.\n     ///\n     /// As string slices are a slice of bytes, the raw pointer points to a\n-    /// `u8`. This pointer will be pointing to the first byte of the string\n+    /// [`u8`]. This pointer will be pointing to the first byte of the string\n     /// slice.\n     ///\n+    /// [`u8`]: primitive.u8.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -661,7 +663,7 @@ impl str {\n     /// assert_eq!(None, chars.next());\n     /// ```\n     ///\n-    /// Remember, `char`s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your human intuition about characters:\n     ///\n     /// ```\n     /// let y = \"y\u0306\";\n@@ -678,16 +680,18 @@ impl str {\n     pub fn chars(&self) -> Chars {\n         core_str::StrExt::chars(self)\n     }\n-    /// Returns an iterator over the `char`s of a string slice, and their\n+    /// Returns an iterator over the [`char`]s of a string slice, and their\n     /// positions.\n     ///\n     /// As a string slice consists of valid UTF-8, we can iterate through a\n-    /// string slice by `char`. This method returns an iterator of both\n-    /// these `char`s, as well as their byte positions.\n+    /// string slice by [`char`]. This method returns an iterator of both\n+    /// these [`char`]s, as well as their byte positions.\n     ///\n-    /// The iterator yields tuples. The position is first, the `char` is\n+    /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n+    /// [`char`]: primitive.char.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -711,7 +715,7 @@ impl str {\n     /// assert_eq!(None, char_indices.next());\n     /// ```\n     ///\n-    /// Remember, `char`s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your human intuition about characters:\n     ///\n     /// ```\n     /// let y = \"y\u0306\";\n@@ -918,12 +922,13 @@ impl str {\n     /// Returns the byte index of the first character of this string slice that\n     /// matches the pattern.\n     ///\n-    /// Returns `None` if the pattern doesn't match.\n+    /// Returns [`None`] if the pattern doesn't match.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -962,12 +967,13 @@ impl str {\n     /// Returns the byte index of the last character of this string slice that\n     /// matches the pattern.\n     ///\n-    /// Returns `None` if the pattern doesn't match.\n+    /// Returns [`None`] if the pattern doesn't match.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1187,14 +1193,18 @@ impl str {\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a simple `&str`, `char`, or a closure that\n+    /// The pattern can be a simple `&str`, [`char`], or a closure that\n     /// determines the split.\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// Equivalent to `split`, except that the trailing substring is\n+    /// [`char`]: primitive.char.html\n+    ///\n+    /// Equivalent to [`split()`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n+    /// [`split()`]: #method.split\n+    ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n     ///\n@@ -1457,7 +1467,7 @@ impl str {\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n-    /// search, and it will be a `[DoubleEndedIterator]` if a forward/reverse\n+    /// search, and it will be a [`DoubleEndedIterator`] if a forward/reverse\n     /// search yields the same elements.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n@@ -1694,9 +1704,11 @@ impl str {\n     ///\n     /// # Errors\n     ///\n-    /// Will return `Err` if it's not possible to parse this string slice into\n+    /// Will return [`Err`] if it's not possible to parse this string slice into\n     /// the desired type.\n     ///\n+    /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n+    ///\n     /// # Example\n     ///\n     /// Basic usage\n@@ -1707,7 +1719,7 @@ impl str {\n     /// assert_eq!(4, four);\n     /// ```\n     ///\n-    /// Using the 'turbofish' instead of annotationg `four`:\n+    /// Using the 'turbofish' instead of annotating `four`:\n     ///\n     /// ```\n     /// let four = \"4\".parse::<u32>();\n@@ -1765,11 +1777,13 @@ impl str {\n         result\n     }\n \n-    /// Returns the lowercase equivalent of this string slice, as a new `String`.\n+    /// Returns the lowercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n     /// `Lowercase`.\n     ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1839,11 +1853,13 @@ impl str {\n         }\n     }\n \n-    /// Returns the uppercase equivalent of this string slice, as a new `String`.\n+    /// Returns the uppercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n     /// `Uppercase`.\n     ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1884,7 +1900,9 @@ impl str {\n         self.chars().flat_map(|c| c.escape_unicode()).collect()\n     }\n \n-    /// Converts a `Box<str>` into a `String` without copying or allocating.\n+    /// Converts a `Box<str>` into a [`String`] without copying or allocating.\n+    ///\n+    /// [`String`]: string/struct.String.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "f8c6d3d934123bb0b38f2ac9e18a1fc6fc56be14", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=acdd3b9f5a1b582e4850aae78931de64819f425e", "patch": "@@ -555,6 +555,11 @@ impl<'a,T> Iterator for EnumeratedItems<'a,T> {\n             None\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let size = self.vec.as_slice().len();\n+        (size, Some(size))\n+    }\n }\n \n impl<T> IntoIterator for VecPerParamSpace<T> {"}, {"sha": "839287d13217bed2e7a98da483dc56ceba551d59", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdd3b9f5a1b582e4850aae78931de64819f425e/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=acdd3b9f5a1b582e4850aae78931de64819f425e", "patch": "@@ -488,6 +488,9 @@ mod prim_tuple { }\n ///\n /// *[See also the `std::f32` module](f32/index.html).*\n ///\n+/// However, please note that examples are shared between the `f64` and `f32`\n+/// primitive types. So it's normal if you see usage of `f64` in there.\n+///\n mod prim_f32 { }\n \n #[doc(primitive = \"f64\")]\n@@ -496,6 +499,9 @@ mod prim_f32 { }\n ///\n /// *[See also the `std::f64` module](f64/index.html).*\n ///\n+/// However, please note that examples are shared between the `f64` and `f32`\n+/// primitive types. So it's normal if you see usage of `f32` in there.\n+///\n mod prim_f64 { }\n \n #[doc(primitive = \"i8\")]"}]}