{"sha": "ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzJmNjQxMmUxOTM3YzA4NDRhYTQ4ZTViNGU4NzZiOTZkY2Q2NmQ=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2015-01-24T11:00:35Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-06-08T02:47:00Z"}, "message": "rustc_trans: don't hardcode llvm version for conditional intrinsics\n\nThis commit introduce a third parameter for compatible_ifn!, as new\nintrinsics are being added in recent LLVM releases and there is no\nneed to hardcode a specific case.\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "b960990a3ca6b969d0abb87af279e207751e4636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b960990a3ca6b969d0abb87af279e207751e4636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "html_url": "https://github.com/rust-lang/rust/commit/ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be9e6f055fbcd6bfcf0a1f9e9ef0e86abe54f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be9e6f055fbcd6bfcf0a1f9e9ef0e86abe54f02", "html_url": "https://github.com/rust-lang/rust/commit/1be9e6f055fbcd6bfcf0a1f9e9ef0e86abe54f02"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "379a7da459fdb222b766b9d4700751257b3880d5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "patch": "@@ -1772,6 +1772,8 @@ extern {\n                          -> ValueRef;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n+    pub fn LLVMVersionMajor() -> u32;\n+    pub fn LLVMVersionMinor() -> u32;\n \n     pub fn LLVMRustAddModuleFlag(M: ModuleRef,\n                                  name: *const c_char,"}, {"sha": "f2de949ccd53eeda7fd9249c4180020fdc99b1b9", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "patch": "@@ -870,6 +870,11 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.trunc.f32\", fn(t_f32) -> t_f32);\n     ifn!(\"llvm.trunc.f64\", fn(t_f64) -> t_f64);\n \n+    ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n+    ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n+    ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n+    ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n+\n     ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n     ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n     ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);\n@@ -931,20 +936,22 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.assume\", fn(i1) -> void);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have\n-    // fallbacks in libc or libm and such. Currently, all of these intrinsics\n-    // were introduced in LLVM 3.4, so we case on that.\n+    // fallbacks in libc or libm and such.\n     macro_rules! compatible_ifn {\n-        ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr) => (\n-            ifn!($name, fn($($arg),*) -> $ret);\n+        ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr, $llvm_version:expr) => (\n+            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n+                // The `if key == $name` is already in ifn!\n+                ifn!($name, fn($($arg),*) -> $ret);\n+            } else if *key == $name {\n+                let f = declare::declare_cfn(ccx, stringify!($cname),\n+                                             Type::func(&[$($arg),*], &$ret),\n+                                             ty::mk_nil(ccx.tcx()));\n+                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n+                return Some(f);\n+            }\n         )\n     }\n \n-    compatible_ifn!(\"llvm.copysign.f32\", copysignf(t_f32, t_f32) -> t_f32);\n-    compatible_ifn!(\"llvm.copysign.f64\", copysign(t_f64, t_f64) -> t_f64);\n-    compatible_ifn!(\"llvm.round.f32\", roundf(t_f32) -> t_f32);\n-    compatible_ifn!(\"llvm.round.f64\", round(t_f64) -> t_f64);\n-\n-\n     if ccx.sess().opts.debuginfo != NoDebugInfo {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(ccx), Type::metadata(ccx)) -> void);\n         ifn!(\"llvm.dbg.value\", fn(Type::metadata(ccx), t_i64, Type::metadata(ccx)) -> void);"}, {"sha": "ad6533e5480b1f349794a1c77859ca135db60e7a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ce32f6412e1937c0844aa48e5b4e876b96dcd66d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "patch": "@@ -237,6 +237,14 @@ extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n     return DEBUG_METADATA_VERSION;\n }\n \n+extern \"C\" uint32_t LLVMVersionMinor() {\n+  return LLVM_VERSION_MINOR;\n+}\n+\n+extern \"C\" uint32_t LLVMVersionMajor() {\n+  return LLVM_VERSION_MAJOR;\n+}\n+\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n                                       uint32_t value) {"}]}