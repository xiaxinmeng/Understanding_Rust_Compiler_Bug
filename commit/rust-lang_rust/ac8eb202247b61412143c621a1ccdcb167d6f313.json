{"sha": "ac8eb202247b61412143c621a1ccdcb167d6f313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGViMjAyMjQ3YjYxNDEyMTQzYzYyMWExY2NkY2IxNjdkNmYzMTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-04T01:03:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-04T01:03:59Z"}, "message": "rustc: Stub support for Rust intrinsics", "tree": {"sha": "fb3acfd59670ebb27c6e35ce3d6ab857be8f9a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3acfd59670ebb27c6e35ce3d6ab857be8f9a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8eb202247b61412143c621a1ccdcb167d6f313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8eb202247b61412143c621a1ccdcb167d6f313", "html_url": "https://github.com/rust-lang/rust/commit/ac8eb202247b61412143c621a1ccdcb167d6f313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8eb202247b61412143c621a1ccdcb167d6f313/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc17adc299ef0fcfbf7c41fc1ad12950ffd7e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc17adc299ef0fcfbf7c41fc1ad12950ffd7e56", "html_url": "https://github.com/rust-lang/rust/commit/2bc17adc299ef0fcfbf7c41fc1ad12950ffd7e56"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "1f123f748647c9b6a611d8f9ad317de77f0a0596", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=ac8eb202247b61412143c621a1ccdcb167d6f313", "patch": "@@ -380,6 +380,7 @@ tag native_abi {\n     native_abi_rust;\n     native_abi_cdecl;\n     native_abi_llvm;\n+    native_abi_rust_intrinsic;\n }\n \n type native_mod = rec(str native_name,"}, {"sha": "e7a86d6efed1d845ced00312de8fe0075a886f81", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ac8eb202247b61412143c621a1ccdcb167d6f313", "patch": "@@ -2015,6 +2015,8 @@ fn parse_item_native_mod(parser p) -> @ast.item {\n             abi = ast.native_abi_rust;\n         } else if (_str.eq(t, \"llvm\")) {\n             abi = ast.native_abi_llvm;\n+        } else if (_str.eq(t, \"rust-intrinsic\")) {\n+            abi = ast.native_abi_rust_intrinsic;\n         } else {\n             p.err(\"unsupported abi: \" + t);\n             fail;"}, {"sha": "6f216a97f8a074647f650a66725254e711f90b96", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 55, "deletions": 28, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ac8eb202247b61412143c621a1ccdcb167d6f313", "patch": "@@ -6737,6 +6737,10 @@ fn decl_native_fn_and_pair(@crate_ctxt ccx,\n                 arg_n += 1u;\n             }\n         }\n+        case (ast.native_abi_rust_intrinsic) {\n+            pass_task = true;\n+            call_args += vec(lltaskptr);\n+        }\n         case (ast.native_abi_cdecl) {\n             pass_task = false;\n         }\n@@ -6772,46 +6776,69 @@ fn decl_native_fn_and_pair(@crate_ctxt ccx,\n         args += vec(vp2i(cx, v));\n     }\n \n-    auto r;\n-    auto rptr;\n-    auto args = ty.ty_fn_args(ccx.tcx, fn_type);\n-    if (abi == ast.native_abi_llvm) {\n-        let vec[ValueRef] call_args = vec();\n+    fn trans_simple_native_abi(@block_ctxt bcx,\n+                               str name,\n+                               vec[ty.arg] args,\n+                               &mutable vec[ValueRef] call_args,\n+                               ty.t fn_type) -> tup(ValueRef, ValueRef) {\n         let vec[TypeRef] call_arg_tys = vec();\n         auto i = 0u;\n         while (i < _vec.len[ty.arg](args)) {\n-            auto call_arg = llvm.LLVMGetParam(fcx.llfn, i + 3u);\n+            auto call_arg = llvm.LLVMGetParam(bcx.fcx.llfn, i + 3u);\n             call_args += vec(call_arg);\n             call_arg_tys += vec(val_ty(call_arg));\n             i += 1u;\n         }\n-        auto llnativefnty = T_fn(call_arg_tys,\n-                                 type_of(ccx,\n-                                         ty.ty_fn_ret(ccx.tcx, fn_type)));\n-        auto llnativefn = get_extern_fn(ccx.externs, ccx.llmod, name,\n-                                        lib.llvm.LLVMCCallConv, llnativefnty);\n-        r = bcx.build.Call(llnativefn, call_args);\n-        rptr = fcx.llretptr;\n-    } else {\n+        auto llnativefnty =\n+            T_fn(call_arg_tys,\n+                 type_of(bcx.fcx.lcx.ccx,\n+                         ty.ty_fn_ret(bcx.fcx.lcx.ccx.tcx, fn_type)));\n+        auto llnativefn = get_extern_fn(bcx.fcx.lcx.ccx.externs,\n+                                        bcx.fcx.lcx.ccx.llmod,\n+                                        name,\n+                                        lib.llvm.LLVMCCallConv,\n+                                        llnativefnty);\n \n-        let vec[tup(ValueRef, ty.t)] drop_args = vec();\n+        auto r = bcx.build.Call(llnativefn, call_args);\n+        auto rptr = bcx.fcx.llretptr;\n+        ret tup(r, rptr);\n+    }\n \n-        for (ty.arg arg in args) {\n-            auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n-            assert (llarg as int != 0);\n-            push_arg(bcx, call_args, llarg, arg.ty, arg.mode);\n-            if (arg.mode == ast.val) {\n-                drop_args += vec(tup(llarg, arg.ty));\n-            }\n-            arg_n += 1u;\n+    auto r;\n+    auto rptr;\n+    auto args = ty.ty_fn_args(ccx.tcx, fn_type);\n+    alt (abi) {\n+        case (ast.native_abi_llvm) {\n+            auto result = trans_simple_native_abi(bcx, name, args, call_args,\n+                                                  fn_type);\n+            r = result._0; rptr = result._1;\n+        }\n+        case (ast.native_abi_rust_intrinsic) {\n+            auto result = trans_simple_native_abi(bcx, name, args, call_args,\n+                                                  fn_type);\n+            r = result._0; rptr = result._1;\n         }\n+        case (_) {\n+            let vec[tup(ValueRef, ty.t)] drop_args = vec();\n \n-        r = trans_native_call(bcx.build, ccx.glues, lltaskptr, ccx.externs,\n-                              ccx.tn, ccx.llmod, name, pass_task, call_args);\n-        rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n+            for (ty.arg arg in args) {\n+                auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n+                assert (llarg as int != 0);\n+                push_arg(bcx, call_args, llarg, arg.ty, arg.mode);\n+                if (arg.mode == ast.val) {\n+                    drop_args += vec(tup(llarg, arg.ty));\n+                }\n+                arg_n += 1u;\n+            }\n \n-        for (tup(ValueRef, ty.t) d in drop_args) {\n-            bcx = drop_ty(bcx, d._0, d._1).bcx;\n+            r = trans_native_call(bcx.build, ccx.glues, lltaskptr,\n+                                  ccx.externs, ccx.tn, ccx.llmod, name,\n+                                  pass_task, call_args);\n+            rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n+\n+            for (tup(ValueRef, ty.t) d in drop_args) {\n+                bcx = drop_ty(bcx, d._0, d._1).bcx;\n+            }\n         }\n     }\n "}, {"sha": "62e6594b62748e35dfae89296fb077ce8459aa24", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8eb202247b61412143c621a1ccdcb167d6f313/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=ac8eb202247b61412143c621a1ccdcb167d6f313", "patch": "@@ -230,6 +230,9 @@ fn print_item(ps s, @ast.item item) {\n             alt (nmod.abi) {\n                 case (ast.native_abi_rust) {wrd1(s, \"\\\"rust\\\"\");}\n                 case (ast.native_abi_cdecl) {wrd1(s, \"\\\"cdecl\\\"\");}\n+                case (ast.native_abi_rust_intrinsic) {\n+                    wrd1(s, \"\\\"rust-intrinstic\\\"\");\n+                }\n             }\n             wrd1(s, \"mod\");\n             wrd1(s, id);"}]}