{"sha": "5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTE2ZjllMTE4ZDY1Mjc5NDdjYTVkZWIzZDc2YmJjNGZhMGY4YTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T15:36:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T15:36:55Z"}, "message": "Use Vec instead of HashSet for ccx.todo\n\nThis reduces runtime of ConstantCx::finalize for the coercions rustc\nbench by ~65%\n\ncc #878", "tree": {"sha": "1fd71c1d94c65c7049326684897b83c49e9807ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd71c1d94c65c7049326684897b83c49e9807ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1", "html_url": "https://github.com/rust-lang/rust/commit/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe3d84ce417e99d3f663f40cda328bde876a8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe3d84ce417e99d3f663f40cda328bde876a8eb", "html_url": "https://github.com/rust-lang/rust/commit/efe3d84ce417e99d3f663f40cda328bde876a8eb"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "5771c64fb7604e44b954451840a5d529a0c4f770", "filename": "src/constant.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5d516f9e118d6527947ca5deb3d76bbc4fa0f8a1", "patch": "@@ -7,6 +7,7 @@ use rustc::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, InterpResult, Scalar,\n };\n use rustc::ty::{layout::Align, Const, ConstKind};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n     StackPopCleanup, StackPopInfo,\n@@ -19,11 +20,11 @@ use crate::prelude::*;\n \n #[derive(Default)]\n pub struct ConstantCx {\n-    todo: HashSet<TodoItem>,\n-    done: HashSet<DataId>,\n+    todo: Vec<TodoItem>,\n+    done: FxHashSet<DataId>,\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+#[derive(Copy, Clone, Debug)]\n enum TodoItem {\n     Alloc(AllocId),\n     Static(DefId),\n@@ -39,7 +40,7 @@ impl ConstantCx {\n }\n \n pub fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n-    constants_cx.todo.insert(TodoItem::Static(def_id));\n+    constants_cx.todo.push(TodoItem::Static(def_id));\n }\n \n fn codegen_static_ref<'tcx>(\n@@ -109,7 +110,7 @@ pub fn trans_const_value<'tcx>(\n                     let alloc_kind = fx.tcx.alloc_map.lock().get(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.constants_cx.todo.insert(TodoItem::Alloc(ptr.alloc_id));\n+                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n                             let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n@@ -139,7 +140,7 @@ pub fn trans_const_value<'tcx>(\n         }\n         ConstValue::ByRef { alloc, offset } => {\n             let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n-            fx.constants_cx.todo.insert(TodoItem::Alloc(alloc_id));\n+            fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n             let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n             let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n@@ -195,7 +196,7 @@ fn trans_const_place<'tcx>(\n \n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n-    fx.constants_cx.todo.insert(TodoItem::Alloc(alloc_id));\n+    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n     let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n@@ -287,7 +288,7 @@ fn cplace_for_dataid<'tcx>(\n fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mut ConstantCx) {\n     let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP), ());\n \n-    while let Some(todo_item) = pop_set(&mut cx.todo) {\n+    while let Some(todo_item) = cx.todo.pop() {\n         let (data_id, alloc) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n                 //println!(\"alloc_id {}\", alloc_id);\n@@ -356,7 +357,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     continue;\n                 }\n                 GlobalAlloc::Memory(_) => {\n-                    cx.todo.insert(TodoItem::Alloc(reloc));\n+                    cx.todo.push(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(module, reloc, alloc.align)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n@@ -387,15 +388,6 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n     assert!(cx.todo.is_empty(), \"{:?}\", cx.todo);\n }\n \n-fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T> {\n-    if let Some(elem) = set.iter().next().map(|elem| *elem) {\n-        set.remove(&elem);\n-        Some(elem)\n-    } else {\n-        None\n-    }\n-}\n-\n struct TransPlaceInterpreter;\n \n impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {"}]}