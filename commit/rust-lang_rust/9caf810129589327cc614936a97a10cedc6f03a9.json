{"sha": "9caf810129589327cc614936a97a10cedc6f03a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYWY4MTAxMjk1ODkzMjdjYzYxNDkzNmE5N2ExMGNlZGM2ZjAzYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-23T18:39:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T18:39:58Z"}, "message": "Merge #5011\n\n5011: Simplify fixtures r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a3fc00ca2a19fa1294cf93030ff0d4a8d80f647f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fc00ca2a19fa1294cf93030ff0d4a8d80f647f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9caf810129589327cc614936a97a10cedc6f03a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8kx+CRBK7hj4Ov3rIwAAdHIIAHkGIRYGMO/VmmXtoSfxRJUC\n1N/Sb1SVS3XZfkoIBtCHsXFxHr9PXRGWqXsOBUTLwzkuXhC2/NKKj0WbGmk2roG9\nhOcNSD2u36p+5d+bdHI2Pi3nWVQQ13Kxsaq2XzgpU94TPCud9gOfKbxvq68UW7vQ\nuD1I1y5CS6gOmpSWYtJJGIq2MIGB2k51XFqL4jw8fFcPiZLbPA0oSADNS6isnZzc\nELfDFeiX9/HSY72HWYa1ZNbdO0vaGNl01BOSt0OzIxhFwHZHgnLTTYUHfPUEG2Ke\ncq1wCRQb4JAdxlbbHYSun5OFnynO/ugqlchF6W7pR8Patph3+MAYfrkEzBAS4do=\n=zWef\n-----END PGP SIGNATURE-----\n", "payload": "tree a3fc00ca2a19fa1294cf93030ff0d4a8d80f647f\nparent 0c12c4f9609ee72487af9b55a558b01af73ffe3e\nparent 295c8d4f7f9ce9d3dc67e8a988914d90424c1b7e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592937598 +0000\ncommitter GitHub <noreply@github.com> 1592937598 +0000\n\nMerge #5011\n\n5011: Simplify fixtures r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9caf810129589327cc614936a97a10cedc6f03a9", "html_url": "https://github.com/rust-lang/rust/commit/9caf810129589327cc614936a97a10cedc6f03a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9caf810129589327cc614936a97a10cedc6f03a9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c12c4f9609ee72487af9b55a558b01af73ffe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c12c4f9609ee72487af9b55a558b01af73ffe3e", "html_url": "https://github.com/rust-lang/rust/commit/0c12c4f9609ee72487af9b55a558b01af73ffe3e"}, {"sha": "295c8d4f7f9ce9d3dc67e8a988914d90424c1b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/295c8d4f7f9ce9d3dc67e8a988914d90424c1b7e", "html_url": "https://github.com/rust-lang/rust/commit/295c8d4f7f9ce9d3dc67e8a988914d90424c1b7e"}], "stats": {"total": 648, "additions": 273, "deletions": 375}, "files": [{"sha": "9ea1765cb5805b6742d63f16ad71a6a241fb4d6f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -1664,7 +1664,6 @@ name = \"test_utils\"\n version = \"0.1.0\"\n dependencies = [\n  \"difference\",\n- \"ra_cfg\",\n  \"rustc-hash\",\n  \"serde_json\",\n  \"stdx\","}, {"sha": "20f29156830d08298b1c629d7f73db7387acc79c", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -61,7 +61,7 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, parse_fixture, parse_single_fixture, FixtureMeta, CURSOR_MARKER};\n+use test_utils::{extract_offset, Fixture, CURSOR_MARKER};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -80,14 +80,14 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n     fn with_files(ra_fixture: &str) -> Self {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, ra_fixture);\n+        let (pos, _) = with_files(&mut db, ra_fixture);\n         assert!(pos.is_none());\n         db\n     }\n \n     fn with_position(ra_fixture: &str) -> (Self, FilePosition) {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, ra_fixture);\n+        let (pos, _) = with_files(&mut db, ra_fixture);\n         (db, pos.unwrap())\n     }\n \n@@ -109,12 +109,10 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n \n     let source_root = SourceRoot::new_local(file_set);\n \n-    let fixture = parse_single_fixture(ra_fixture);\n-\n-    let crate_graph = if let Some(entry) = fixture {\n-        let meta = match ParsedMeta::from(&entry.meta) {\n+    let crate_graph = if let Some(meta) = ra_fixture.lines().find(|it| it.contains(\"//-\")) {\n+        let entry = Fixture::parse_single(meta.trim());\n+        let meta = match ParsedMeta::from(&entry) {\n             ParsedMeta::File(it) => it,\n-            _ => panic!(\"with_single_file only support file meta\"),\n         };\n \n         let mut crate_graph = CrateGraph::default();\n@@ -150,30 +148,27 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n     file_id\n }\n \n-fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosition> {\n-    let fixture = parse_fixture(fixture);\n+fn with_files(\n+    db: &mut dyn SourceDatabaseExt,\n+    fixture: &str,\n+) -> (Option<FilePosition>, Vec<FileId>) {\n+    let fixture = Fixture::parse(fixture);\n \n+    let mut files = Vec::new();\n     let mut crate_graph = CrateGraph::default();\n     let mut crates = FxHashMap::default();\n     let mut crate_deps = Vec::new();\n     let mut default_crate_root: Option<FileId> = None;\n \n     let mut file_set = FileSet::default();\n-    let mut source_root_id = WORKSPACE;\n-    let mut source_root_prefix = \"/\".to_string();\n+    let source_root_id = WORKSPACE;\n+    let source_root_prefix = \"/\".to_string();\n     let mut file_id = FileId(0);\n \n     let mut file_position = None;\n \n     for entry in fixture.iter() {\n-        let meta = match ParsedMeta::from(&entry.meta) {\n-            ParsedMeta::Root { path } => {\n-                let file_set = std::mem::replace(&mut file_set, FileSet::default());\n-                db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n-                source_root_id.0 += 1;\n-                source_root_prefix = path;\n-                continue;\n-            }\n+        let meta = match ParsedMeta::from(entry) {\n             ParsedMeta::File(it) => it,\n         };\n         assert!(meta.path.starts_with(&source_root_prefix));\n@@ -210,7 +205,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         db.set_file_source_root(file_id, source_root_id);\n         let path = VfsPath::new_virtual_path(meta.path);\n         file_set.insert(file_id, path.into());\n-\n+        files.push(file_id);\n         file_id.0 += 1;\n     }\n \n@@ -235,11 +230,10 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n     db.set_crate_graph(Arc::new(crate_graph));\n \n-    file_position\n+    (file_position, files)\n }\n \n enum ParsedMeta {\n-    Root { path: String },\n     File(FileMeta),\n }\n \n@@ -252,25 +246,22 @@ struct FileMeta {\n     env: Env,\n }\n \n-impl From<&FixtureMeta> for ParsedMeta {\n-    fn from(meta: &FixtureMeta) -> Self {\n-        match meta {\n-            FixtureMeta::Root { path } => {\n-                // `Self::Root` causes a false warning: 'variant is never constructed: `Root` '\n-                // see https://github.com/rust-lang/rust/issues/69018\n-                ParsedMeta::Root { path: path.to_owned() }\n-            }\n-            FixtureMeta::File(f) => Self::File(FileMeta {\n-                path: f.path.to_owned(),\n-                krate: f.crate_name.to_owned(),\n-                deps: f.deps.to_owned(),\n-                cfg: f.cfg.to_owned(),\n-                edition: f\n-                    .edition\n-                    .as_ref()\n-                    .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n-                env: Env::from(f.env.iter()),\n-            }),\n-        }\n+impl From<&Fixture> for ParsedMeta {\n+    fn from(f: &Fixture) -> Self {\n+        let mut cfg = CfgOptions::default();\n+        f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n+        f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n+\n+        Self::File(FileMeta {\n+            path: f.path.to_owned(),\n+            krate: f.crate_name.to_owned(),\n+            deps: f.deps.to_owned(),\n+            cfg,\n+            edition: f\n+                .edition\n+                .as_ref()\n+                .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n+            env: Env::from(f.env.iter()),\n+        })\n     }\n }"}, {"sha": "503099fb74fc4c5b7aeb90f436e6a5a259ee8bbe", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -423,31 +423,6 @@ fn extern_crate_rename_2015_edition() {\n     );\n }\n \n-#[test]\n-fn import_across_source_roots() {\n-    let map = def_map(\n-        \"\n-        //- /main.rs crate:main deps:test_crate\n-        use test_crate::a::b::C;\n-\n-        //- root /test_crate/\n-\n-        //- /test_crate/lib.rs crate:test_crate\n-        pub mod a {\n-            pub mod b {\n-                pub struct C;\n-            }\n-        }\n-\n-        \",\n-    );\n-\n-    assert_snapshot!(map, @r###\"\n-        \u22eecrate\n-        \u22eeC: t v\n-    \"###);\n-}\n-\n #[test]\n fn reexport_across_crates() {\n     let map = def_map("}, {"sha": "981bdf924d60d3b83b25b81763dc0e930c661fe6", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -3,7 +3,7 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, FileSet, SourceRoot, VfsPath};\n-use test_utils::{extract_offset, extract_range, parse_fixture, FixtureEntry, CURSOR_MARKER};\n+use test_utils::{extract_offset, extract_range, Fixture, CURSOR_MARKER};\n \n use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n@@ -12,7 +12,7 @@ use crate::{\n #[derive(Debug)]\n enum MockFileData {\n     Plain { path: String, content: String },\n-    Fixture(FixtureEntry),\n+    Fixture(Fixture),\n }\n \n impl MockFileData {\n@@ -25,7 +25,7 @@ impl MockFileData {\n     fn path(&self) -> &str {\n         match self {\n             MockFileData::Plain { path, .. } => path.as_str(),\n-            MockFileData::Fixture(f) => f.meta.path(),\n+            MockFileData::Fixture(f) => f.path.as_str(),\n         }\n     }\n \n@@ -39,7 +39,10 @@ impl MockFileData {\n     fn cfg_options(&self) -> CfgOptions {\n         match self {\n             MockFileData::Fixture(f) => {\n-                f.meta.cfg_options().map_or_else(Default::default, |o| o.clone())\n+                let mut cfg = CfgOptions::default();\n+                f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n+                f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n+                cfg\n             }\n             _ => CfgOptions::default(),\n         }\n@@ -48,22 +51,22 @@ impl MockFileData {\n     fn edition(&self) -> Edition {\n         match self {\n             MockFileData::Fixture(f) => {\n-                f.meta.edition().map_or(Edition::Edition2018, |v| Edition::from_str(v).unwrap())\n+                f.edition.as_ref().map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap())\n             }\n             _ => Edition::Edition2018,\n         }\n     }\n \n     fn env(&self) -> Env {\n         match self {\n-            MockFileData::Fixture(f) => Env::from(f.meta.env()),\n+            MockFileData::Fixture(f) => Env::from(f.env.iter()),\n             _ => Env::default(),\n         }\n     }\n }\n \n-impl From<FixtureEntry> for MockFileData {\n-    fn from(fixture: FixtureEntry) -> Self {\n+impl From<Fixture> for MockFileData {\n+    fn from(fixture: Fixture) -> Self {\n         Self::Fixture(fixture)\n     }\n }\n@@ -91,7 +94,7 @@ impl MockAnalysis {\n     /// ```\n     pub fn with_files(fixture: &str) -> MockAnalysis {\n         let mut res = MockAnalysis::new();\n-        for entry in parse_fixture(fixture) {\n+        for entry in Fixture::parse(fixture) {\n             res.add_file_fixture(entry);\n         }\n         res\n@@ -102,7 +105,7 @@ impl MockAnalysis {\n     pub fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n         let mut position = None;\n         let mut res = MockAnalysis::new();\n-        for entry in parse_fixture(fixture) {\n+        for entry in Fixture::parse(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n                 position = Some(res.add_file_fixture_with_position(entry));\n@@ -114,13 +117,13 @@ impl MockAnalysis {\n         (res, position)\n     }\n \n-    pub fn add_file_fixture(&mut self, fixture: FixtureEntry) -> FileId {\n+    pub fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n         let file_id = self.next_id();\n         self.files.push(MockFileData::from(fixture));\n         file_id\n     }\n \n-    pub fn add_file_fixture_with_position(&mut self, mut fixture: FixtureEntry) -> FilePosition {\n+    pub fn add_file_fixture_with_position(&mut self, mut fixture: Fixture) -> FilePosition {\n         let (offset, text) = extract_offset(&fixture.text);\n         fixture.text = text;\n         let file_id = self.next_id();"}, {"sha": "e80ffe5d146cae5b8778ce7f5286a9e2179493de", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -17,7 +17,7 @@ use lsp_types::{ProgressParams, ProgressParamsValue};\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n-use test_utils::{find_mismatch, parse_fixture};\n+use test_utils::{find_mismatch, Fixture};\n \n use ra_project_model::ProjectManifest;\n use rust_analyzer::{\n@@ -68,8 +68,8 @@ impl<'a> Project<'a> {\n \n         let mut paths = vec![];\n \n-        for entry in parse_fixture(self.fixture) {\n-            let path = tmp_dir.path().join(&entry.meta.path()['/'.len_utf8()..]);\n+        for entry in Fixture::parse(self.fixture) {\n+            let path = tmp_dir.path().join(&entry.path['/'.len_utf8()..]);\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n             paths.push((path, entry.text));"}, {"sha": "6821db1e8117f8a9cdcbe21a2922b389f136f5b2", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -8,10 +8,9 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n+# Avoid adding deps here, this crate is widely used in tests it should compile fast!\n difference = \"2.0.0\"\n text-size = \"1.0.0\"\n serde_json = \"1.0.48\"\n rustc-hash = \"1.1.0\"\n-\n-ra_cfg = { path = \"../ra_cfg\" }\n stdx = { path = \"../stdx\" }"}, {"sha": "9108e49d9661bdb373ee04cc86abe8131976bbe8", "filename": "crates/test_utils/src/fixture.rs", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -0,0 +1,216 @@\n+//! Defines `Fixture` -- a convenient way to describe the initial state of\n+//! rust-analyzer database from a single string.\n+\n+use rustc_hash::FxHashMap;\n+use stdx::split1;\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub struct Fixture {\n+    pub path: String,\n+    pub text: String,\n+    pub crate_name: Option<String>,\n+    pub deps: Vec<String>,\n+    pub cfg_atoms: Vec<String>,\n+    pub cfg_key_values: Vec<(String, String)>,\n+    pub edition: Option<String>,\n+    pub env: FxHashMap<String, String>,\n+}\n+\n+impl Fixture {\n+    /// Parses text which looks like this:\n+    ///\n+    ///  ```not_rust\n+    ///  //- some meta\n+    ///  line 1\n+    ///  line 2\n+    ///  // - other meta\n+    ///  ```\n+    pub fn parse(ra_fixture: &str) -> Vec<Fixture> {\n+        let fixture = indent_first_line(ra_fixture);\n+        let margin = fixture_margin(&fixture);\n+\n+        let mut lines = fixture\n+        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n+        .enumerate()\n+        .filter_map(|(ix, line)| {\n+            if line.len() >= margin {\n+                assert!(line[..margin].trim().is_empty());\n+                let line_content = &line[margin..];\n+                if !line_content.starts_with(\"//-\") {\n+                    assert!(\n+                        !line_content.contains(\"//-\"),\n+                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n+The offending line: {:?}\"#,\n+                        ix,\n+                        line\n+                    );\n+                }\n+                Some(line_content)\n+            } else {\n+                assert!(line.trim().is_empty());\n+                None\n+            }\n+        });\n+\n+        let mut res: Vec<Fixture> = Vec::new();\n+        for line in lines.by_ref() {\n+            if line.starts_with(\"//-\") {\n+                let meta = Fixture::parse_single(line);\n+                res.push(meta)\n+            } else if let Some(entry) = res.last_mut() {\n+                entry.text.push_str(line);\n+                entry.text.push('\\n');\n+            }\n+        }\n+        res\n+    }\n+\n+    //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n+    pub fn parse_single(meta: &str) -> Fixture {\n+        assert!(meta.starts_with(\"//-\"));\n+        let meta = meta[\"//-\".len()..].trim();\n+        let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n+\n+        let path = components[0].to_string();\n+        assert!(path.starts_with(\"/\"));\n+\n+        let mut krate = None;\n+        let mut deps = Vec::new();\n+        let mut edition = None;\n+        let mut cfg_atoms = Vec::new();\n+        let mut cfg_key_values = Vec::new();\n+        let mut env = FxHashMap::default();\n+        for component in components[1..].iter() {\n+            let (key, value) = split1(component, ':').unwrap();\n+            match key {\n+                \"crate\" => krate = Some(value.to_string()),\n+                \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n+                \"edition\" => edition = Some(value.to_string()),\n+                \"cfg\" => {\n+                    for entry in value.split(',') {\n+                        match split1(entry, '=') {\n+                            Some((k, v)) => cfg_key_values.push((k.to_string(), v.to_string())),\n+                            None => cfg_atoms.push(entry.to_string()),\n+                        }\n+                    }\n+                }\n+                \"env\" => {\n+                    for key in value.split(',') {\n+                        if let Some((k, v)) = split1(key, '=') {\n+                            env.insert(k.into(), v.into());\n+                        }\n+                    }\n+                }\n+                _ => panic!(\"bad component: {:?}\", component),\n+            }\n+        }\n+\n+        Fixture {\n+            path,\n+            text: String::new(),\n+            crate_name: krate,\n+            deps,\n+            cfg_atoms,\n+            cfg_key_values,\n+            edition,\n+            env,\n+        }\n+    }\n+}\n+\n+/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n+/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n+/// the other lines visually:\n+/// ```\n+/// let fixture = \"//- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \";\n+/// assert_eq!(fixture_margin(fixture),\n+/// \"               //- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \")\n+/// ```\n+fn indent_first_line(fixture: &str) -> String {\n+    if fixture.is_empty() {\n+        return String::new();\n+    }\n+    let mut lines = fixture.lines();\n+    let first_line = lines.next().unwrap();\n+    if first_line.contains(\"//-\") {\n+        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n+        let fixed_margin = fixture_margin(&rest);\n+        let fixed_indent = fixed_margin - indent_len(first_line);\n+        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n+    } else {\n+        fixture.to_owned()\n+    }\n+}\n+\n+fn fixture_margin(fixture: &str) -> usize {\n+    fixture\n+        .lines()\n+        .filter(|it| it.trim_start().starts_with(\"//-\"))\n+        .map(indent_len)\n+        .next()\n+        .expect(\"empty fixture\")\n+}\n+\n+fn indent_len(s: &str) -> usize {\n+    s.len() - s.trim_start().len()\n+}\n+\n+#[test]\n+#[should_panic]\n+fn parse_fixture_checks_further_indented_metadata() {\n+    Fixture::parse(\n+        r\"\n+        //- /lib.rs\n+          mod bar;\n+\n+          fn foo() {}\n+          //- /bar.rs\n+          pub fn baz() {}\n+          \",\n+    );\n+}\n+\n+#[test]\n+fn parse_fixture_can_handle_dedented_first_line() {\n+    let fixture = \"//- /lib.rs\n+                   mod foo;\n+                   //- /foo.rs\n+                   struct Bar;\n+\";\n+    assert_eq!(\n+        Fixture::parse(fixture),\n+        Fixture::parse(\n+            \"//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+struct Bar;\n+\"\n+        )\n+    )\n+}\n+\n+#[test]\n+fn parse_fixture_gets_full_meta() {\n+    let parsed = Fixture::parse(\n+        r\"\n+    //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n+    mod m;\n+    \",\n+    );\n+    assert_eq!(1, parsed.len());\n+\n+    let meta = &parsed[0];\n+    assert_eq!(\"mod m;\\n\\n\", meta.text);\n+\n+    assert_eq!(\"foo\", meta.crate_name.as_ref().unwrap());\n+    assert_eq!(\"/lib.rs\", meta.path);\n+    assert_eq!(2, meta.env.len());\n+}"}, {"sha": "3fd8505ed22e50cdb92ffcce9b7fcc1209064a40", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 289, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9caf810129589327cc614936a97a10cedc6f03a9/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=9caf810129589327cc614936a97a10cedc6f03a9", "patch": "@@ -8,20 +8,20 @@\n \n #[macro_use]\n pub mod mark;\n+mod fixture;\n \n use std::{\n     env, fs,\n     path::{Path, PathBuf},\n };\n \n use serde_json::Value;\n-use stdx::split1;\n use text_size::{TextRange, TextSize};\n \n-pub use ra_cfg::CfgOptions;\n+pub use difference::Changeset as __Changeset;\n pub use rustc_hash::FxHashMap;\n \n-pub use difference::Changeset as __Changeset;\n+pub use crate::fixture::Fixture;\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n \n@@ -97,7 +97,7 @@ impl From<RangeOrOffset> for TextRange {\n     fn from(selection: RangeOrOffset) -> Self {\n         match selection {\n             RangeOrOffset::Range(it) => it,\n-            RangeOrOffset::Offset(it) => TextRange::new(it, it),\n+            RangeOrOffset::Offset(it) => TextRange::empty(it),\n         }\n     }\n }\n@@ -159,291 +159,6 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     res\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n-pub struct FixtureEntry {\n-    pub meta: FixtureMeta,\n-    pub text: String,\n-}\n-\n-#[derive(Debug, Eq, PartialEq)]\n-pub enum FixtureMeta {\n-    Root { path: String },\n-    File(FileMeta),\n-}\n-\n-#[derive(Debug, Eq, PartialEq)]\n-pub struct FileMeta {\n-    pub path: String,\n-    pub crate_name: Option<String>,\n-    pub deps: Vec<String>,\n-    pub cfg: CfgOptions,\n-    pub edition: Option<String>,\n-    pub env: FxHashMap<String, String>,\n-}\n-\n-impl FixtureMeta {\n-    pub fn path(&self) -> &str {\n-        match self {\n-            FixtureMeta::Root { path } => &path,\n-            FixtureMeta::File(f) => &f.path,\n-        }\n-    }\n-\n-    pub fn crate_name(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.crate_name.as_ref(),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn cfg_options(&self) -> Option<&CfgOptions> {\n-        match self {\n-            FixtureMeta::File(f) => Some(&f.cfg),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn edition(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.edition.as_ref(),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn env(&self) -> impl Iterator<Item = (&String, &String)> {\n-        struct EnvIter<'a> {\n-            iter: Option<std::collections::hash_map::Iter<'a, String, String>>,\n-        }\n-\n-        impl<'a> EnvIter<'a> {\n-            fn new(meta: &'a FixtureMeta) -> Self {\n-                Self {\n-                    iter: match meta {\n-                        FixtureMeta::File(f) => Some(f.env.iter()),\n-                        _ => None,\n-                    },\n-                }\n-            }\n-        }\n-\n-        impl<'a> Iterator for EnvIter<'a> {\n-            type Item = (&'a String, &'a String);\n-            fn next(&mut self) -> Option<Self::Item> {\n-                self.iter.as_mut().and_then(|i| i.next())\n-            }\n-        }\n-\n-        EnvIter::new(self)\n-    }\n-}\n-\n-/// Parses text which looks like this:\n-///\n-///  ```not_rust\n-///  //- some meta\n-///  line 1\n-///  line 2\n-///  // - other meta\n-///  ```\n-pub fn parse_fixture(ra_fixture: &str) -> Vec<FixtureEntry> {\n-    let fixture = indent_first_line(ra_fixture);\n-    let margin = fixture_margin(&fixture);\n-\n-    let mut lines = fixture\n-        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n-        .enumerate()\n-        .filter_map(|(ix, line)| {\n-            if line.len() >= margin {\n-                assert!(line[..margin].trim().is_empty());\n-                let line_content = &line[margin..];\n-                if !line_content.starts_with(\"//-\") {\n-                    assert!(\n-                        !line_content.contains(\"//-\"),\n-                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n-The offending line: {:?}\"#,\n-                        ix,\n-                        line\n-                    );\n-                }\n-                Some(line_content)\n-            } else {\n-                assert!(line.trim().is_empty());\n-                None\n-            }\n-        });\n-\n-    let mut res: Vec<FixtureEntry> = Vec::new();\n-    for line in lines.by_ref() {\n-        if line.starts_with(\"//-\") {\n-            let meta = line[\"//-\".len()..].trim().to_string();\n-            let meta = parse_meta(&meta);\n-            res.push(FixtureEntry { meta, text: String::new() })\n-        } else if let Some(entry) = res.last_mut() {\n-            entry.text.push_str(line);\n-            entry.text.push('\\n');\n-        }\n-    }\n-    res\n-}\n-\n-//- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-fn parse_meta(meta: &str) -> FixtureMeta {\n-    let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n-\n-    if components[0] == \"root\" {\n-        let path = components[1].to_string();\n-        assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n-        return FixtureMeta::Root { path };\n-    }\n-\n-    let path = components[0].to_string();\n-    assert!(path.starts_with(\"/\"));\n-\n-    let mut krate = None;\n-    let mut deps = Vec::new();\n-    let mut edition = None;\n-    let mut cfg = CfgOptions::default();\n-    let mut env = FxHashMap::default();\n-    for component in components[1..].iter() {\n-        let (key, value) = split1(component, ':').unwrap();\n-        match key {\n-            \"crate\" => krate = Some(value.to_string()),\n-            \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n-            \"edition\" => edition = Some(value.to_string()),\n-            \"cfg\" => {\n-                for key in value.split(',') {\n-                    match split1(key, '=') {\n-                        None => cfg.insert_atom(key.into()),\n-                        Some((k, v)) => cfg.insert_key_value(k.into(), v.into()),\n-                    }\n-                }\n-            }\n-            \"env\" => {\n-                for key in value.split(',') {\n-                    if let Some((k, v)) = split1(key, '=') {\n-                        env.insert(k.into(), v.into());\n-                    }\n-                }\n-            }\n-            _ => panic!(\"bad component: {:?}\", component),\n-        }\n-    }\n-\n-    FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n-}\n-\n-/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n-/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n-/// the other lines visually:\n-/// ```\n-/// let fixture = \"//- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \";\n-/// assert_eq!(fixture_margin(fixture),\n-/// \"               //- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \")\n-/// ```\n-fn indent_first_line(fixture: &str) -> String {\n-    if fixture.is_empty() {\n-        return String::new();\n-    }\n-    let mut lines = fixture.lines();\n-    let first_line = lines.next().unwrap();\n-    if first_line.contains(\"//-\") {\n-        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n-        let fixed_margin = fixture_margin(&rest);\n-        let fixed_indent = fixed_margin - indent_len(first_line);\n-        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n-    } else {\n-        fixture.to_owned()\n-    }\n-}\n-\n-fn fixture_margin(fixture: &str) -> usize {\n-    fixture\n-        .lines()\n-        .filter(|it| it.trim_start().starts_with(\"//-\"))\n-        .map(indent_len)\n-        .next()\n-        .expect(\"empty fixture\")\n-}\n-\n-fn indent_len(s: &str) -> usize {\n-    s.len() - s.trim_start().len()\n-}\n-\n-#[test]\n-#[should_panic]\n-fn parse_fixture_checks_further_indented_metadata() {\n-    parse_fixture(\n-        r\"\n-        //- /lib.rs\n-          mod bar;\n-\n-          fn foo() {}\n-          //- /bar.rs\n-          pub fn baz() {}\n-          \",\n-    );\n-}\n-\n-#[test]\n-fn parse_fixture_can_handle_dedented_first_line() {\n-    let fixture = \"//- /lib.rs\n-                   mod foo;\n-                   //- /foo.rs\n-                   struct Bar;\n-\";\n-    assert_eq!(\n-        parse_fixture(fixture),\n-        parse_fixture(\n-            \"//- /lib.rs\n-mod foo;\n-//- /foo.rs\n-struct Bar;\n-\"\n-        )\n-    )\n-}\n-\n-#[test]\n-fn parse_fixture_gets_full_meta() {\n-    let parsed = parse_fixture(\n-        r\"\n-    //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n-    mod m;\n-    \",\n-    );\n-    assert_eq!(1, parsed.len());\n-\n-    let parsed = &parsed[0];\n-    assert_eq!(\"mod m;\\n\\n\", parsed.text);\n-\n-    let meta = &parsed.meta;\n-    assert_eq!(\"foo\", meta.crate_name().unwrap());\n-    assert_eq!(\"/lib.rs\", meta.path());\n-    assert!(meta.cfg_options().is_some());\n-    assert_eq!(2, meta.env().count());\n-}\n-\n-/// Same as `parse_fixture`, except it allow empty fixture\n-pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n-    if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n-        return None;\n-    }\n-\n-    let fixtures = parse_fixture(ra_fixture);\n-    if fixtures.len() > 1 {\n-        panic!(\"too many fixtures\");\n-    }\n-    fixtures.into_iter().nth(0)\n-}\n-\n // Comparison functionality borrowed from cargo:\n \n /// Compare a line with an expected pattern."}]}