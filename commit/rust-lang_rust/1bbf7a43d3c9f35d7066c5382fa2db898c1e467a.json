{"sha": "1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmY3YTQzZDNjOWYzNWQ3MDY2YzUzODJmYTJkYjg5OGMxZTQ2N2E=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-07T22:23:26Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:07:46Z"}, "message": "Add field `expansion: Mark` to `NameBinding`.", "tree": {"sha": "703614c78f672bdf311dc5a084f5383dd30ed345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703614c78f672bdf311dc5a084f5383dd30ed345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "html_url": "https://github.com/rust-lang/rust/commit/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf", "html_url": "https://github.com/rust-lang/rust/commit/83aac43f520463ea7fe86fe73bb1cc8f7e22abaf"}], "stats": {"total": 111, "additions": 68, "deletions": 43}, "files": [{"sha": "bfbc5b3163ac100a88939d280355aa46de9cc418", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 58, "deletions": 42, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "patch": "@@ -45,15 +45,25 @@ use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n \n-impl<'a> ToNameBinding<'a> for (Module<'a>, Span, ty::Visibility) {\n+impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding { kind: NameBindingKind::Module(self.0), span: self.1, vis: self.2 }\n+        NameBinding {\n+            kind: NameBindingKind::Module(self.0),\n+            vis: self.1,\n+            span: self.2,\n+            expansion: self.3,\n+        }\n     }\n }\n \n-impl<'a> ToNameBinding<'a> for (Def, Span, ty::Visibility) {\n+impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding { kind: NameBindingKind::Def(self.0), span: self.1, vis: self.2 }\n+        NameBinding {\n+            kind: NameBindingKind::Def(self.0),\n+            vis: self.1,\n+            span: self.2,\n+            expansion: self.3,\n+        }\n     }\n }\n \n@@ -148,8 +158,9 @@ impl<'b> Resolver<'b> {\n                         }\n \n                         let subclass = ImportDirectiveSubclass::single(binding.name, source.name);\n-                        let span = view_path.span;\n-                        self.add_import_directive(module_path, subclass, span, item.id, vis);\n+                        self.add_import_directive(\n+                            module_path, subclass, view_path.span, item.id, vis, expansion,\n+                        );\n                     }\n                     ViewPathList(_, ref source_items) => {\n                         // Make sure there's at most one `mod` import in the list.\n@@ -196,17 +207,20 @@ impl<'b> Resolver<'b> {\n                                 }\n                             };\n                             let subclass = ImportDirectiveSubclass::single(rename, name);\n-                            let (span, id) = (source_item.span, source_item.node.id);\n-                            self.add_import_directive(module_path, subclass, span, id, vis);\n+                            let id = source_item.node.id;\n+                            self.add_import_directive(\n+                                module_path, subclass, source_item.span, id, vis, expansion,\n+                            );\n                         }\n                     }\n                     ViewPathGlob(_) => {\n                         let subclass = GlobImport {\n                             is_prelude: is_prelude,\n                             max_vis: Cell::new(ty::Visibility::PrivateExternal),\n                         };\n-                        let span = view_path.span;\n-                        self.add_import_directive(module_path, subclass, span, item.id, vis);\n+                        self.add_import_directive(\n+                            module_path, subclass, view_path.span, item.id, vis, expansion,\n+                        );\n                     }\n                 }\n             }\n@@ -217,7 +231,7 @@ impl<'b> Resolver<'b> {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id).unwrap();\n                 let module = self.get_extern_crate_root(crate_id);\n-                let binding = (module, sp, ty::Visibility::Public).to_name_binding();\n+                let binding = (module, ty::Visibility::Public, sp, expansion).to_name_binding();\n                 let binding = self.arenas.alloc_name_binding(binding);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n                     id: item.id,\n@@ -227,6 +241,7 @@ impl<'b> Resolver<'b> {\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n+                    expansion: expansion,\n                 });\n                 let imported_binding = self.import(binding, directive);\n                 self.define(parent, name, TypeNS, imported_binding);\n@@ -245,7 +260,7 @@ impl<'b> Resolver<'b> {\n                     normal_ancestor_id: Some(item.id),\n                     ..ModuleS::new(Some(parent), ModuleKind::Def(def, name))\n                 });\n-                self.define(parent, name, TypeNS, (module, sp, vis));\n+                self.define(parent, name, TypeNS, (module, vis, sp, expansion));\n                 self.module_map.insert(item.id, module);\n \n                 // Descend into the module.\n@@ -258,45 +273,45 @@ impl<'b> Resolver<'b> {\n             ItemKind::Static(_, m, _) => {\n                 let mutbl = m == Mutability::Mutable;\n                 let def = Def::Static(self.definitions.local_def_id(item.id), mutbl);\n-                self.define(parent, name, ValueNS, (def, sp, vis));\n+                self.define(parent, name, ValueNS, (def, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {\n                 let def = Def::Const(self.definitions.local_def_id(item.id));\n-                self.define(parent, name, ValueNS, (def, sp, vis));\n+                self.define(parent, name, ValueNS, (def, vis, sp, expansion));\n             }\n             ItemKind::Fn(..) => {\n                 let def = Def::Fn(self.definitions.local_def_id(item.id));\n-                self.define(parent, name, ValueNS, (def, sp, vis));\n+                self.define(parent, name, ValueNS, (def, vis, sp, expansion));\n             }\n \n             // These items live in the type namespace.\n             ItemKind::Ty(..) => {\n                 let def = Def::TyAlias(self.definitions.local_def_id(item.id));\n-                self.define(parent, name, TypeNS, (def, sp, vis));\n+                self.define(parent, name, TypeNS, (def, vis, sp, expansion));\n             }\n \n             ItemKind::Enum(ref enum_definition, _) => {\n                 let def = Def::Enum(self.definitions.local_def_id(item.id));\n                 let module = self.new_module(parent, ModuleKind::Def(def, name), true);\n-                self.define(parent, name, TypeNS, (module, sp, vis));\n+                self.define(parent, name, TypeNS, (module, vis, sp, expansion));\n \n                 for variant in &(*enum_definition).variants {\n-                    self.build_reduced_graph_for_variant(variant, module, vis);\n+                    self.build_reduced_graph_for_variant(variant, module, vis, expansion);\n                 }\n             }\n \n             // These items live in both the type and value namespaces.\n             ItemKind::Struct(ref struct_def, _) => {\n                 // Define a name in the type namespace.\n                 let def = Def::Struct(self.definitions.local_def_id(item.id));\n-                self.define(parent, name, TypeNS, (def, sp, vis));\n+                self.define(parent, name, TypeNS, (def, vis, sp, expansion));\n \n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n                 if !struct_def.is_struct() {\n                     let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n                                                    CtorKind::from_ast(struct_def));\n-                    self.define(parent, name, ValueNS, (ctor_def, sp, vis));\n+                    self.define(parent, name, ValueNS, (ctor_def, vis, sp, expansion));\n                 }\n \n                 // Record field names for error reporting.\n@@ -310,7 +325,7 @@ impl<'b> Resolver<'b> {\n \n             ItemKind::Union(ref vdata, _) => {\n                 let def = Def::Union(self.definitions.local_def_id(item.id));\n-                self.define(parent, name, TypeNS, (def, sp, vis));\n+                self.define(parent, name, TypeNS, (def, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n                 let field_names = vdata.fields().iter().filter_map(|field| {\n@@ -329,7 +344,7 @@ impl<'b> Resolver<'b> {\n                 // Add all the items within to a new module.\n                 let module =\n                     self.new_module(parent, ModuleKind::Def(Def::Trait(def_id), name), true);\n-                self.define(parent, name, TypeNS, (module, sp, vis));\n+                self.define(parent, name, TypeNS, (module, vis, sp, expansion));\n                 self.current_module = module;\n             }\n             ItemKind::Mac(_) => panic!(\"unexpanded macro in resolve!\"),\n@@ -338,27 +353,28 @@ impl<'b> Resolver<'b> {\n \n     // Constructs the reduced graph for one variant. Variants exist in the\n     // type and value namespaces.\n-    fn build_reduced_graph_for_variant(&mut self,\n-                                       variant: &Variant,\n-                                       parent: Module<'b>,\n-                                       vis: ty::Visibility) {\n+    fn build_reduced_graph_for_variant(\n+        &mut self, variant: &Variant, parent: Module<'b>, vis: ty::Visibility, expansion: Mark,\n+    ) {\n         let name = variant.node.name.name;\n         let def_id = self.definitions.local_def_id(variant.node.data.id());\n \n         // Define a name in the type namespace.\n         let def = Def::Variant(def_id);\n-        self.define(parent, name, TypeNS, (def, variant.span, vis));\n+        self.define(parent, name, TypeNS, (def, vis, variant.span, expansion));\n \n         // Define a constructor name in the value namespace.\n         // Braced variants, unlike structs, generate unusable names in\n         // value namespace, they are reserved for possible future use.\n         let ctor_kind = CtorKind::from_ast(&variant.node.data);\n         let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n-        self.define(parent, name, ValueNS, (ctor_def, variant.span, vis));\n+        self.define(parent, name, ValueNS, (ctor_def, vis, variant.span, expansion));\n     }\n \n     /// Constructs the reduced graph for one foreign item.\n-    fn build_reduced_graph_for_foreign_item(&mut self, foreign_item: &ForeignItem) {\n+    fn build_reduced_graph_for_foreign_item(\n+        &mut self, foreign_item: &ForeignItem, expansion: Mark,\n+    ) {\n         let parent = self.current_module;\n         let name = foreign_item.ident.name;\n \n@@ -371,7 +387,7 @@ impl<'b> Resolver<'b> {\n             }\n         };\n         let vis = self.resolve_visibility(&foreign_item.vis);\n-        self.define(parent, name, ValueNS, (def, foreign_item.span, vis));\n+        self.define(parent, name, ValueNS, (def, vis, foreign_item.span, expansion));\n     }\n \n     fn build_reduced_graph_for_block(&mut self, block: &Block) {\n@@ -404,24 +420,24 @@ impl<'b> Resolver<'b> {\n         match def {\n             Def::Mod(..) | Def::Enum(..) => {\n                 let module = self.new_module(parent, ModuleKind::Def(def, name), false);\n-                self.define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (module, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Variant(..) => {\n-                self.define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::VariantCtor(..) => {\n-                self.define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Fn(..) |\n             Def::Static(..) |\n             Def::Const(..) |\n             Def::AssociatedConst(..) |\n             Def::Method(..) => {\n-                self.define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Trait(..) => {\n                 let module = self.new_module(parent, ModuleKind::Def(def, name), false);\n-                self.define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (module, vis, DUMMY_SP, Mark::root()));\n \n                 // If this is a trait, add all the trait item names to the trait info.\n                 let trait_item_def_ids = self.session.cstore.associated_item_def_ids(def_id);\n@@ -433,27 +449,27 @@ impl<'b> Resolver<'b> {\n                 }\n             }\n             Def::TyAlias(..) | Def::AssociatedTy(..) => {\n-                self.define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Struct(..) => {\n-                self.define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n \n                 // Record field names for error reporting.\n                 let field_names = self.session.cstore.struct_field_names(def_id);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Def::StructCtor(..) => {\n-                self.define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Union(..) => {\n-                self.define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n \n                 // Record field names for error reporting.\n                 let field_names = self.session.cstore.struct_field_names(def_id);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Def::Macro(..) => {\n-                self.define(parent, name, MacroNS, (def, DUMMY_SP, vis));\n+                self.define(parent, name, MacroNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n             Def::Local(..) |\n             Def::PrimTy(..) |\n@@ -695,7 +711,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.resolver.build_reduced_graph_for_foreign_item(foreign_item);\n+        self.resolver.build_reduced_graph_for_foreign_item(foreign_item, self.expansion);\n         visit::walk_foreign_item(self, foreign_item);\n     }\n \n@@ -732,7 +748,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n         self.resolver.trait_item_map.insert((item.ident.name, def_id), is_static_method);\n \n         let vis = ty::Visibility::Public;\n-        self.resolver.define(parent, item.ident.name, ns, (def, item.span, vis));\n+        self.resolver.define(parent, item.ident.name, ns, (def, vis, item.span, self.expansion));\n \n         self.resolver.current_module = parent.parent.unwrap(); // nearest normal ancestor\n         visit::walk_trait_item(self, item);"}, {"sha": "4164f3a897d6439a855c865b8665f485cd5382d6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "patch": "@@ -881,6 +881,7 @@ impl<'a> fmt::Debug for ModuleS<'a> {\n #[derive(Clone, Debug)]\n pub struct NameBinding<'a> {\n     kind: NameBindingKind<'a>,\n+    expansion: Mark,\n     span: Span,\n     vis: ty::Visibility,\n }\n@@ -1304,6 +1305,7 @@ impl<'a> Resolver<'a> {\n             arenas: arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n+                expansion: Mark::root(),\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             }),"}, {"sha": "2d434d660ea5a94f650e5068fb523c66386abdb2", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "patch": "@@ -184,6 +184,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             kind: NameBindingKind::Def(Def::Macro(def_id)),\n             span: DUMMY_SP,\n             vis: ty::Visibility::PrivateExternal,\n+            expansion: Mark::root(),\n         });\n         self.builtin_macros.insert(ident.name, binding);\n     }"}, {"sha": "01d09a3b7c4bb7226fe35cf09648fd6e3026704a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7a43d3c9f35d7066c5382fa2db898c1e467a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1bbf7a43d3c9f35d7066c5382fa2db898c1e467a", "patch": "@@ -26,6 +26,7 @@ use rustc::hir::def::*;\n \n use syntax::ast::{Ident, NodeId, Name};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n+use syntax::ext::hygiene::Mark;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n \n@@ -70,6 +71,7 @@ pub struct ImportDirective<'a> {\n     pub subclass: ImportDirectiveSubclass<'a>,\n     pub span: Span,\n     pub vis: Cell<ty::Visibility>,\n+    pub expansion: Mark,\n }\n \n impl<'a> ImportDirective<'a> {\n@@ -257,7 +259,8 @@ impl<'a> Resolver<'a> {\n                                 subclass: ImportDirectiveSubclass<'a>,\n                                 span: Span,\n                                 id: NodeId,\n-                                vis: ty::Visibility) {\n+                                vis: ty::Visibility,\n+                                expansion: Mark) {\n         let current_module = self.current_module;\n         let directive = self.arenas.alloc_import_directive(ImportDirective {\n             parent: current_module,\n@@ -267,6 +270,7 @@ impl<'a> Resolver<'a> {\n             span: span,\n             id: id,\n             vis: Cell::new(vis),\n+            expansion: expansion,\n         });\n \n         self.indeterminate_imports.push(directive);\n@@ -310,6 +314,7 @@ impl<'a> Resolver<'a> {\n             },\n             span: directive.span,\n             vis: vis,\n+            expansion: directive.expansion,\n         }\n     }\n \n@@ -336,6 +341,7 @@ impl<'a> Resolver<'a> {\n                                 binding.vis\n                             },\n                             span: old_binding.span,\n+                            expansion: Mark::root(),\n                         }));\n                     } else if !old_binding.vis.is_at_least(binding.vis, this) {\n                         // We are glob-importing the same item but with greater visibility."}]}