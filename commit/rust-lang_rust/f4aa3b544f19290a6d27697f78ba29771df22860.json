{"sha": "f4aa3b544f19290a6d27697f78ba29771df22860", "node_id": "C_kwDOAAsO6NoAKGY0YWEzYjU0NGYxOTI5MGE2ZDI3Njk3Zjc4YmEyOTc3MWRmMjI4NjA", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-09-26T16:28:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-09-26T16:28:36Z"}, "message": "Preserve the whole LangSyntax when parsing doctests\n\nPreviously, only the raw string and the `is_ignore` field were\npreserved, which made it hard to recover anything else.", "tree": {"sha": "5bbee152e52e7f15296b2ec6b02e20c1ea806145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bbee152e52e7f15296b2ec6b02e20c1ea806145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4aa3b544f19290a6d27697f78ba29771df22860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aa3b544f19290a6d27697f78ba29771df22860", "html_url": "https://github.com/rust-lang/rust/commit/f4aa3b544f19290a6d27697f78ba29771df22860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4aa3b544f19290a6d27697f78ba29771df22860/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda2a0eca4a70acbdd2b65f5fc5e4cd38c39351b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda2a0eca4a70acbdd2b65f5fc5e4cd38c39351b", "html_url": "https://github.com/rust-lang/rust/commit/dda2a0eca4a70acbdd2b65f5fc5e4cd38c39351b"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "fda2512a05036aff92bfe51fe65140a6cf901a59", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4aa3b544f19290a6d27697f78ba29771df22860/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aa3b544f19290a6d27697f78ba29771df22860/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f4aa3b544f19290a6d27697f78ba29771df22860", "patch": "@@ -1316,8 +1316,7 @@ crate struct RustCodeBlock {\n     /// The range in the markdown that the code within the code block occupies.\n     crate code: Range<usize>,\n     crate is_fenced: bool,\n-    crate syntax: Option<String>,\n-    crate is_ignore: bool,\n+    crate lang_string: LangString,\n }\n \n /// Returns a range of bytes for each code block in the markdown that is tagged as `rust` or\n@@ -1333,7 +1332,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {\n-            let (syntax, code_start, code_end, range, is_fenced, is_ignore) = match syntax {\n+            let (lang_string, code_start, code_end, range, is_fenced) = match syntax {\n                 CodeBlockKind::Fenced(syntax) => {\n                     let syntax = syntax.as_ref();\n                     let lang_string = if syntax.is_empty() {\n@@ -1344,8 +1343,6 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                     if !lang_string.rust {\n                         continue;\n                     }\n-                    let is_ignore = lang_string.ignore != Ignore::None;\n-                    let syntax = if syntax.is_empty() { None } else { Some(syntax.to_owned()) };\n                     let (code_start, mut code_end) = match p.next() {\n                         Some((Event::Text(_), offset)) => (offset.start, offset.end),\n                         Some((_, sub_offset)) => {\n@@ -1354,8 +1351,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                                 is_fenced: true,\n                                 range: offset,\n                                 code,\n-                                syntax,\n-                                is_ignore,\n+                                lang_string,\n                             });\n                             continue;\n                         }\n@@ -1365,31 +1361,29 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                                 is_fenced: true,\n                                 range: offset,\n                                 code,\n-                                syntax,\n-                                is_ignore,\n+                                lang_string,\n                             });\n                             continue;\n                         }\n                     };\n                     while let Some((Event::Text(_), offset)) = p.next() {\n                         code_end = offset.end;\n                     }\n-                    (syntax, code_start, code_end, offset, true, is_ignore)\n+                    (lang_string, code_start, code_end, offset, true)\n                 }\n                 CodeBlockKind::Indented => {\n                     // The ending of the offset goes too far sometime so we reduce it by one in\n                     // these cases.\n                     if offset.end > offset.start && md.get(offset.end..=offset.end) == Some(&\"\\n\") {\n                         (\n-                            None,\n+                            LangString::default(),\n                             offset.start,\n                             offset.end,\n                             Range { start: offset.start, end: offset.end - 1 },\n                             false,\n-                            false,\n                         )\n                     } else {\n-                        (None, offset.start, offset.end, offset, false, false)\n+                        (LangString::default(), offset.start, offset.end, offset, false)\n                     }\n                 }\n             };\n@@ -1398,8 +1392,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                 is_fenced,\n                 range,\n                 code: Range { start: code_start, end: code_end },\n-                syntax,\n-                is_ignore,\n+                lang_string,\n             });\n         }\n     }"}, {"sha": "3deede8eeac79444332221175c4d551d0178e590", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4aa3b544f19290a6d27697f78ba29771df22860/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aa3b544f19290a6d27697f78ba29771df22860/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=f4aa3b544f19290a6d27697f78ba29771df22860", "patch": "@@ -61,8 +61,8 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         };\n \n         let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_id);\n-        let empty_block = code_block.syntax.is_none() && code_block.is_fenced;\n-        let is_ignore = code_block.is_ignore;\n+        let empty_block = code_block.lang_string == Default::default() && code_block.is_fenced;\n+        let is_ignore = code_block.lang_string.ignore != markdown::Ignore::None;\n \n         // The span and whether it is precise or not.\n         let (sp, precise_span) = match super::source_span_for_markdown_range("}]}