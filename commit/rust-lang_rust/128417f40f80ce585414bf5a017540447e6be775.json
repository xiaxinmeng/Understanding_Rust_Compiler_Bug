{"sha": "128417f40f80ce585414bf5a017540447e6be775", "node_id": "C_kwDOAAsO6NoAKDEyODQxN2Y0MGY4MGNlNTg1NDE0YmY1YTAxNzU0MDQ0N2U2YmU3NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T05:46:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T05:46:53Z"}, "message": "Auto merge of #92996 - matthiaskrgr:rollup-50wpzva, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #92795 (Link sidebar \"location\" heading to top of page)\n - #92799 (Remove some unnecessary uses of `FieldDef::ident`)\n - #92808 (Fix `try wrapping expression in variant` suggestion with struct field shorthand)\n - #92819 (rustdoc: remove hand-rolled isatty)\n - #92876 (Fix suggesting turbofish with lifetime arguments)\n - #92921 (Rename Printer constructor from mk_printer() to Printer::new())\n - #92937 (rustdoc: Add missing dot separator)\n - #92953 (Copy an example to PartialOrd as well)\n - #92977 (Docs: recommend VecDeque instead of Vec::remove(0))\n - #92981 (fix const_ptr_offset_from tracking issue)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "03c41fab9a5bb1dd4745dbd6fb06719803ffcab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c41fab9a5bb1dd4745dbd6fb06719803ffcab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128417f40f80ce585414bf5a017540447e6be775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128417f40f80ce585414bf5a017540447e6be775", "html_url": "https://github.com/rust-lang/rust/commit/128417f40f80ce585414bf5a017540447e6be775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128417f40f80ce585414bf5a017540447e6be775/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd20513f52b1e6a7799fd291c1a5979dd65678ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd20513f52b1e6a7799fd291c1a5979dd65678ac", "html_url": "https://github.com/rust-lang/rust/commit/fd20513f52b1e6a7799fd291c1a5979dd65678ac"}, {"sha": "9612038a7e8898aa99f09d30a34a721b8d7ebf46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9612038a7e8898aa99f09d30a34a721b8d7ebf46", "html_url": "https://github.com/rust-lang/rust/commit/9612038a7e8898aa99f09d30a34a721b8d7ebf46"}], "stats": {"total": 669, "additions": 416, "deletions": 253}, "files": [{"sha": "18b85103202e32744279d3c48c3173a523a70219", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -4443,6 +4443,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"askama\",\n+ \"atty\",\n  \"expect-test\",\n  \"itertools 0.9.0\",\n  \"minifier\","}, {"sha": "20954a322a57811db0667599c09f3a3f644ddaec", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -222,29 +222,6 @@ struct PrintStackElem {\n \n const SIZE_INFINITY: isize = 0xffff;\n \n-pub fn mk_printer() -> Printer {\n-    let linewidth = 78;\n-    // Yes 55, it makes the ring buffers big enough to never fall behind.\n-    let n: usize = 55 * linewidth;\n-    debug!(\"mk_printer {}\", linewidth);\n-    Printer {\n-        out: String::new(),\n-        buf_max_len: n,\n-        margin: linewidth as isize,\n-        space: linewidth as isize,\n-        left: 0,\n-        right: 0,\n-        // Initialize a single entry; advance_right() will extend it on demand\n-        // up to `buf_max_len` elements.\n-        buf: vec![BufEntry::default()],\n-        left_total: 0,\n-        right_total: 0,\n-        scan_stack: VecDeque::new(),\n-        print_stack: Vec::new(),\n-        pending_indentation: 0,\n-    }\n-}\n-\n pub struct Printer {\n     out: String,\n     buf_max_len: usize,\n@@ -288,6 +265,29 @@ impl Default for BufEntry {\n }\n \n impl Printer {\n+    pub fn new() -> Self {\n+        let linewidth = 78;\n+        // Yes 55, it makes the ring buffers big enough to never fall behind.\n+        let n: usize = 55 * linewidth;\n+        debug!(\"Printer::new {}\", linewidth);\n+        Printer {\n+            out: String::new(),\n+            buf_max_len: n,\n+            margin: linewidth as isize,\n+            space: linewidth as isize,\n+            left: 0,\n+            right: 0,\n+            // Initialize a single entry; advance_right() will extend it on demand\n+            // up to `buf_max_len` elements.\n+            buf: vec![BufEntry::default()],\n+            left_total: 0,\n+            right_total: 0,\n+            scan_stack: VecDeque::new(),\n+            print_stack: Vec::new(),\n+            pending_indentation: 0,\n+        }\n+    }\n+\n     pub fn last_token(&self) -> Token {\n         self.buf[self.right].token.clone()\n     }"}, {"sha": "015cd431deb6b1b4c3819a6ec35fcccf9ee90d10", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -103,7 +103,7 @@ pub fn print_crate<'a>(\n     edition: Edition,\n ) -> String {\n     let mut s =\n-        State { s: pp::mk_printer(), comments: Some(Comments::new(sm, filename, input)), ann };\n+        State { s: pp::Printer::new(), comments: Some(Comments::new(sm, filename, input)), ann };\n \n     if is_expanded && !krate.attrs.iter().any(|attr| attr.has_name(sym::no_core)) {\n         // We need to print `#![no_std]` (and its feature gate) so that\n@@ -910,7 +910,7 @@ impl<'a> PrintState<'a> for State<'a> {\n \n impl<'a> State<'a> {\n     pub fn new() -> State<'a> {\n-        State { s: pp::mk_printer(), comments: None, ann: &NoAnn }\n+        State { s: pp::Printer::new(), comments: None, ann: &NoAnn }\n     }\n \n     crate fn commasep_cmnt<T, F, G>(&mut self, b: Breaks, elts: &[T], mut op: F, mut get_span: G)"}, {"sha": "dabab073551c3a2e23f21b4ea0590a784185bee2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -170,7 +170,7 @@ impl<'a> State<'a> {\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n         State {\n-            s: pp::mk_printer(),\n+            s: pp::Printer::new(),\n             comments: Some(Comments::new(sm, filename, input)),\n             attrs,\n             ann,\n@@ -186,7 +186,7 @@ pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n where\n     F: FnOnce(&mut State<'_>),\n {\n-    let mut printer = State { s: pp::mk_printer(), comments: None, attrs: &|_| &[], ann };\n+    let mut printer = State { s: pp::Printer::new(), comments: None, attrs: &|_| &[], ann };\n     f(&mut printer);\n     printer.s.eof()\n }"}, {"sha": "c41f2d3299bf7dbcecf10c6219810edc47d6cc4a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -27,7 +27,7 @@ use std::mem::take;\n use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n-    \"use `::<...>` instead of `<...>` to specify type or const arguments\";\n+    \"use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -731,21 +731,28 @@ impl<'a> Parser<'a> {\n                     match x {\n                         Ok((_, _, false)) => {\n                             if self.eat(&token::Gt) {\n-                                match self.parse_expr() {\n-                                    Ok(_) => {\n-                                        e.span_suggestion_verbose(\n-                                            binop.span.shrink_to_lo(),\n-                                            TURBOFISH_SUGGESTION_STR,\n-                                            \"::\".to_string(),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                        e.emit();\n-                                        *expr =\n-                                            self.mk_expr_err(expr.span.to(self.prev_token.span));\n-                                        return Ok(());\n-                                    }\n-                                    Err(mut err) => {\n-                                        err.cancel();\n+                                let turbo_err = e.span_suggestion_verbose(\n+                                    binop.span.shrink_to_lo(),\n+                                    TURBOFISH_SUGGESTION_STR,\n+                                    \"::\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                if self.check(&TokenKind::Semi) {\n+                                    turbo_err.emit();\n+                                    *expr = self.mk_expr_err(expr.span);\n+                                    return Ok(());\n+                                } else {\n+                                    match self.parse_expr() {\n+                                        Ok(_) => {\n+                                            turbo_err.emit();\n+                                            *expr = self\n+                                                .mk_expr_err(expr.span.to(self.prev_token.span));\n+                                            return Ok(());\n+                                        }\n+                                        Err(mut err) => {\n+                                            turbo_err.cancel();\n+                                            err.cancel();\n+                                        }\n                                     }\n                                 }\n                             }"}, {"sha": "192e87b4c01f7aea84b48ef09c3f454f8c44992f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1443,7 +1443,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         label: Label,\n         attrs: AttrVec,\n-        consume_colon: bool,\n+        mut consume_colon: bool,\n     ) -> PResult<'a, P<Expr>> {\n         let lo = label.ident.span;\n         let label = Some(label);\n@@ -1456,6 +1456,12 @@ impl<'a> Parser<'a> {\n             self.parse_loop_expr(label, lo, attrs)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n+        } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {\n+            // We're probably inside of a `Path<'a>` that needs a turbofish, so suppress the\n+            // \"must be followed by a colon\" error.\n+            self.diagnostic().delay_span_bug(lo, \"this label wasn't parsed correctly\");\n+            consume_colon = false;\n+            Ok(self.mk_expr_err(lo))\n         } else {\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n             self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();"}, {"sha": "241dcbc64a676bb35fe307dec5c4ceee2f73784c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 102, "deletions": 82, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n \n use super::method::probe;\n@@ -24,7 +24,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn emit_coerce_suggestions(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         expr_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn demand_coerce(\n         &self,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n@@ -129,7 +129,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// will be permitted if the diverges flag is currently \"always\".\n     pub fn demand_coerce_diag(\n         &self,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n@@ -338,31 +338,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            if let [variant] = &compatible_variants[..] {\n-                // Just a single matching variant.\n-                err.multipart_suggestion(\n-                    &format!(\"try wrapping the expression in `{}`\", variant),\n-                    vec![\n-                        (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n-                        (expr.span.shrink_to_hi(), \")\".to_string()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else if compatible_variants.len() > 1 {\n-                // More than one matching variant.\n-                err.multipart_suggestions(\n-                    &format!(\n-                        \"try wrapping the expression in a variant of `{}`\",\n-                        self.tcx.def_path_str(expected_adt.did)\n-                    ),\n-                    compatible_variants.into_iter().map(|variant| {\n+            let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                Some(ident) => format!(\"{}: \", ident),\n+                None => format!(\"\"),\n+            };\n+\n+            match &compatible_variants[..] {\n+                [] => { /* No variants to format */ }\n+                [variant] => {\n+                    // Just a single matching variant.\n+                    err.multipart_suggestion_verbose(\n+                        &format!(\"try wrapping the expression in `{}`\", variant),\n                         vec![\n-                            (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                            (expr.span.shrink_to_lo(), format!(\"{}{}(\", prefix, variant)),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n-                        ]\n-                    }),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                        ],\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {\n+                    // More than one matching variant.\n+                    err.multipart_suggestions(\n+                        &format!(\n+                            \"try wrapping the expression in a variant of `{}`\",\n+                            self.tcx.def_path_str(expected_adt.did)\n+                        ),\n+                        compatible_variants.into_iter().map(|variant| {\n+                            vec![\n+                                (expr.span.shrink_to_lo(), format!(\"{}{}(\", prefix, variant)),\n+                                (expr.span.shrink_to_hi(), \")\".to_string()),\n+                            ]\n+                        }),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n     }\n@@ -483,33 +492,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    crate fn is_hir_id_from_struct_pattern_shorthand_field(\n+    crate fn maybe_get_struct_pattern_shorthand_field(\n         &self,\n-        hir_id: hir::HirId,\n-        sp: Span,\n-    ) -> bool {\n-        let sm = self.sess().source_map();\n-        let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-        if let Some(parent) = self.tcx.hir().find(parent_id) {\n-            // Account for fields\n-            if let Node::Expr(hir::Expr { kind: hir::ExprKind::Struct(_, fields, ..), .. }) = parent\n-            {\n-                if let Ok(src) = sm.span_to_snippet(sp) {\n-                    for field in *fields {\n-                        if field.ident.as_str() == src && field.is_shorthand {\n-                            return true;\n-                        }\n+        expr: &hir::Expr<'_>,\n+    ) -> Option<Symbol> {\n+        let hir = self.tcx.hir();\n+        let local = match expr {\n+            hir::Expr {\n+                kind:\n+                    hir::ExprKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path {\n+                            res: hir::def::Res::Local(_),\n+                            segments: [hir::PathSegment { ident, .. }],\n+                            ..\n+                        },\n+                    )),\n+                ..\n+            } => Some(ident),\n+            _ => None,\n+        }?;\n+\n+        match hir.find(hir.get_parent_node(expr.hir_id))? {\n+            Node::Expr(hir::Expr { kind: hir::ExprKind::Struct(_, fields, ..), .. }) => {\n+                for field in *fields {\n+                    if field.ident.name == local.name && field.is_shorthand {\n+                        return Some(local.name);\n                     }\n                 }\n             }\n+            _ => {}\n         }\n-        false\n+\n+        None\n     }\n \n     /// If the given `HirId` corresponds to a block with a trailing expression, return that expression\n-    crate fn maybe_get_block_expr(&self, hir_id: hir::HirId) -> Option<&'tcx hir::Expr<'tcx>> {\n-        match self.tcx.hir().find(hir_id)? {\n-            Node::Expr(hir::Expr { kind: hir::ExprKind::Block(block, ..), .. }) => block.expr,\n+    crate fn maybe_get_block_expr(&self, expr: &hir::Expr<'tcx>) -> Option<&'tcx hir::Expr<'tcx>> {\n+        match expr {\n+            hir::Expr { kind: hir::ExprKind::Block(block, ..), .. } => block.expr,\n             _ => None,\n         }\n     }\n@@ -547,7 +568,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// `&mut`!\".\n     pub fn check_ref(\n         &self,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(Span, &'static str, String, Applicability, bool /* verbose */)> {\n@@ -565,9 +586,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n         };\n \n-        let is_struct_pat_shorthand_field =\n-            self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n-\n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();\n \n@@ -661,11 +679,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 false,\n                             ));\n                         }\n-                        let field_name = if is_struct_pat_shorthand_field {\n-                            format!(\"{}: \", sugg_expr)\n-                        } else {\n-                            String::new()\n+\n+                        let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                            Some(ident) => format!(\"{}: \", ident),\n+                            None => format!(\"\"),\n                         };\n+\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             kind: hir::ExprKind::Assign(left_expr, ..),\n                             ..\n@@ -695,14 +714,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             hir::Mutability::Mut => (\n                                 sp,\n                                 \"consider mutably borrowing here\",\n-                                format!(\"{}&mut {}\", field_name, sugg_expr),\n+                                format!(\"{}&mut {}\", prefix, sugg_expr),\n                                 Applicability::MachineApplicable,\n                                 false,\n                             ),\n                             hir::Mutability::Not => (\n                                 sp,\n                                 \"consider borrowing here\",\n-                                format!(\"{}&{}\", field_name, sugg_expr),\n+                                format!(\"{}&{}\", prefix, sugg_expr),\n                                 Applicability::MachineApplicable,\n                                 false,\n                             ),\n@@ -846,32 +865,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp)\n                             || checked_ty.is_box()\n                         {\n-                            if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                                let message = if checked_ty.is_box() {\n-                                    \"consider unboxing the value\"\n-                                } else if checked_ty.is_region_ptr() {\n-                                    \"consider dereferencing the borrow\"\n-                                } else {\n-                                    \"consider dereferencing the type\"\n-                                };\n-                                let (span, suggestion) = if is_struct_pat_shorthand_field {\n-                                    (expr.span, format!(\"{}: *{}\", code, code))\n-                                } else if self.is_else_if_block(expr) {\n-                                    // Don't suggest nonsense like `else *if`\n-                                    return None;\n-                                } else if let Some(expr) = self.maybe_get_block_expr(expr.hir_id) {\n-                                    (expr.span.shrink_to_lo(), \"*\".to_string())\n-                                } else {\n-                                    (expr.span.shrink_to_lo(), \"*\".to_string())\n-                                };\n-                                return Some((\n-                                    span,\n-                                    message,\n-                                    suggestion,\n-                                    Applicability::MachineApplicable,\n-                                    true,\n-                                ));\n-                            }\n+                            let message = if checked_ty.is_box() {\n+                                \"consider unboxing the value\"\n+                            } else if checked_ty.is_region_ptr() {\n+                                \"consider dereferencing the borrow\"\n+                            } else {\n+                                \"consider dereferencing the type\"\n+                            };\n+                            let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                                Some(ident) => format!(\"{}: \", ident),\n+                                None => format!(\"\"),\n+                            };\n+                            let (span, suggestion) = if self.is_else_if_block(expr) {\n+                                // Don't suggest nonsense like `else *if`\n+                                return None;\n+                            } else if let Some(expr) = self.maybe_get_block_expr(expr) {\n+                                // prefix should be empty here..\n+                                (expr.span.shrink_to_lo(), \"*\".to_string())\n+                            } else {\n+                                (expr.span.shrink_to_lo(), format!(\"{}*\", prefix))\n+                            };\n+                            return Some((\n+                                span,\n+                                message,\n+                                suggestion,\n+                                Applicability::MachineApplicable,\n+                                true,\n+                            ));\n                         }\n                     }\n                 }"}, {"sha": "473c848ad8f13eef6272278cd00d12bc9a362c36", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn suggest_deref_ref_or_into(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        expr: &hir::Expr<'_>,\n+        expr: &hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else if !self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n             let is_struct_pat_shorthand_field =\n-                self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, expr.span);\n+                self.maybe_get_struct_pattern_shorthand_field(expr).is_some();\n             let methods = self.get_conversion_methods(expr.span, expected, found, expr.hir_id);\n             if !methods.is_empty() {\n                 if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {"}, {"sha": "16ba5c008cd274c20ae436588314b5f0dfd71dce", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1372,9 +1372,12 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// Note: Because this shifts over the remaining elements, it has a\n     /// worst-case performance of *O*(*n*). If you don't need the order of elements\n-    /// to be preserved, use [`swap_remove`] instead.\n+    /// to be preserved, use [`swap_remove`] instead. If you'd like to remove\n+    /// elements from the beginning of the `Vec`, consider using\n+    /// [`VecDeque::pop_front`] instead.\n     ///\n     /// [`swap_remove`]: Vec::swap_remove\n+    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n     ///\n     /// # Panics\n     ///\n@@ -1735,6 +1738,11 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///\n+    /// If you'd like to pop the first element, consider using\n+    /// [`VecDeque::pop_front`] instead.\n+    ///\n+    /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "f89cf812e970a0aa38a1da1d9af7a191ad560d17", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -661,20 +661,37 @@ impl<T: Clone> Clone for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n-/// This means variants at the top are less than variants at the bottom.\n-/// Here's an example:\n+/// This trait can be used with `#[derive]`.\n+///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n ///\n /// ```\n-/// #[derive(PartialEq, PartialOrd)]\n-/// enum Size {\n-///     Small,\n-///     Large,\n+/// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n /// }\n ///\n-/// assert!(Size::Small < Size::Large);\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n+///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+///\n+/// ```\n+/// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n+/// }\n+///\n+/// assert!(E::Bottom < E::Top);\n /// ```\n ///\n /// ## Lexicographical comparison\n@@ -895,9 +912,38 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n+/// This trait can be used with `#[derive]`.\n+///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n+/// }\n+///\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n+///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n+/// }\n+///\n+/// assert!(E::Bottom < E::Top);\n+/// ```\n ///\n /// ## How can I implement `PartialOrd`?\n ///\n@@ -970,8 +1016,8 @@ impl PartialOrd for Ordering {\n /// # Examples\n ///\n /// ```\n-/// let x : u32 = 0;\n-/// let y : u32 = 1;\n+/// let x: u32 = 0;\n+/// let y: u32 = 1;\n ///\n /// assert_eq!(x < y, true);\n /// assert_eq!(x.lt(&y), true);"}, {"sha": "9781dc320edde90ab9911d40709d5ec1bb8f0f53", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1893,7 +1893,7 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// See documentation of `<*const T>::guaranteed_eq` for details."}, {"sha": "485a5965f4cf740c4b17084c83141645dbef53a3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -439,7 +439,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where"}, {"sha": "1412e836ebfc28b94759befa73195ea0c0c52965", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -617,7 +617,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline(always)]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where"}, {"sha": "ccb844cd10b258d57973b88a270220bfa38bd8f1", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -9,6 +9,7 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false }\n+atty = \"0.2\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n minifier = \"0.0.41\"\n rayon = \"1.5.1\""}, {"sha": "7f3e5d15de1921728d66e04d497cd4fa331a7c0e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1736,7 +1736,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     {\n         write!(\n             buffer,\n-            \"<h2 class=\\\"location\\\">{}{}</h2>\",\n+            \"<h2 class=\\\"location\\\"><a href=\\\"#\\\">{}{}</a></h2>\",\n             match *it.kind {\n                 clean::StructItem(..) => \"Struct \",\n                 clean::TraitItem(..) => \"Trait \","}, {"sha": "f2c111495edfbaf5362c51eee66a6614fb458137", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -670,7 +670,11 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         }\n         write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n         write!(w, \"<div class=\\\"rightside\\\">\");\n-        render_stability_since(w, m, t, cx.tcx());\n+\n+        let has_stability = render_stability_since(w, m, t, cx.tcx());\n+        if has_stability {\n+            w.write_str(\" \u00b7 \");\n+        }\n         write_srclink(cx, m, w);\n         write!(w, \"</div>\");\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n@@ -1457,14 +1461,14 @@ fn render_stability_since(\n     item: &clean::Item,\n     containing_item: &clean::Item,\n     tcx: TyCtxt<'_>,\n-) {\n+) -> bool {\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx),\n         item.const_stability(tcx),\n         containing_item.stable_since(tcx),\n         containing_item.const_stable_since(tcx),\n-    );\n+    )\n }\n \n fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl, cx: &Context<'_>) -> Ordering {"}, {"sha": "d854aa86b3afd0434a18270ad89e9b126fa034c6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -71,7 +71,8 @@ extern crate tikv_jemalloc_sys;\n use tikv_jemalloc_sys as jemalloc_sys;\n \n use std::default::Default;\n-use std::env;\n+use std::env::{self, VarError};\n+use std::io;\n use std::process;\n \n use rustc_driver::{abort_on_err, describe_lints};\n@@ -179,47 +180,20 @@ pub fn main() {\n }\n \n fn init_logging() {\n-    use std::io;\n-\n-    // FIXME remove these and use winapi 0.3 instead\n-    // Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs, rustc_driver/lib.rs\n-    #[cfg(unix)]\n-    fn stdout_isatty() -> bool {\n-        extern crate libc;\n-        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-    }\n-\n-    #[cfg(windows)]\n-    fn stdout_isatty() -> bool {\n-        extern crate winapi;\n-        use winapi::um::consoleapi::GetConsoleMode;\n-        use winapi::um::processenv::GetStdHandle;\n-        use winapi::um::winbase::STD_OUTPUT_HANDLE;\n-\n-        unsafe {\n-            let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-            let mut out = 0;\n-            GetConsoleMode(handle, &mut out) != 0\n-        }\n-    }\n-\n-    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\") {\n-        Ok(value) => match value.as_ref() {\n-            \"always\" => true,\n-            \"never\" => false,\n-            \"auto\" => stdout_isatty(),\n-            _ => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"invalid log color value '{}': expected one of always, never, or auto\",\n-                    value\n-                ),\n-            ),\n-        },\n-        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n+    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\").as_deref() {\n+        Ok(\"always\") => true,\n+        Ok(\"never\") => false,\n+        Ok(\"auto\") | Err(VarError::NotPresent) => atty::is(atty::Stream::Stdout),\n+        Ok(value) => early_error(\n+            ErrorOutputType::default(),\n+            &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),\n+        ),\n+        Err(VarError::NotUnicode(value)) => early_error(\n             ErrorOutputType::default(),\n-            \"non-Unicode log color value: expected one of always, never, or auto\",\n+            &format!(\n+                \"invalid log color value '{}': expected one of always, never, or auto\",\n+                value.to_string_lossy()\n+            ),\n         ),\n     };\n     let filter = tracing_subscriber::EnvFilter::from_env(\"RUSTDOC_LOG\");"}, {"sha": "1a9794e75bc066d0f3139b87d3ba63044ca50dcb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -436,8 +436,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n                 match tcx.type_of(did).kind() {\n                     ty::Adt(def, _) if def.is_enum() => {\n-                        if let Some(field) =\n-                            def.all_fields().find(|f| f.ident(tcx).name == variant_field_name)\n+                        if let Some(field) = def.all_fields().find(|f| f.name == variant_field_name)\n                         {\n                             Ok((ty_res, Some(ItemFragment(FragmentKind::VariantField, field.did))))\n                         } else {\n@@ -806,11 +805,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,\n                 };\n-                let field = def\n-                    .non_enum_variant()\n-                    .fields\n-                    .iter()\n-                    .find(|item| item.ident(tcx).name == item_name)?;\n+                let field =\n+                    def.non_enum_variant().fields.iter().find(|item| item.name == item_name)?;\n                 Some((root_res, ItemFragment(FragmentKind::StructField, field.did)))\n             }\n             Res::Def(DefKind::Trait, did) => tcx"}, {"sha": "9289244f6f8bbf53a30ed6e2aeaeeb58e3dcf251", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -22,6 +22,13 @@ click: \"#structs + .item-table .item-left > a\"\n assert-count: (\".sidebar .location\", 2)\n // We check that there is no crate listed outside of the top level.\n assert-false: \".sidebar-elems > .crate\"\n+\n+click: \".sidebar-links a\"\n+assert-property: (\"html\", {\"scrollTop\": \"389\"})\n+\n+click: \".sidebar h2.location\"\n+assert-property: (\"html\", {\"scrollTop\": \"0\"})\n+\n // We now go back to the crate page to click on the \"lib2\" crate link.\n goto: file://|DOC_PATH|/test_docs/index.html\n click: \".sidebar-elems .crate > ul > li:first-child > a\""}, {"sha": "45a555eaa1563f8f221eb126dbe5675175a2ca3e", "filename": "src/test/rustdoc/source-version-separator.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -0,0 +1,31 @@\n+#![stable(feature = \"bar\", since = \"1.0\")]\n+#![crate_name = \"foo\"]\n+\n+#![feature(staged_api)]\n+\n+// @has foo/trait.Bar.html\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0\u00b7 source \u00b7 '\n+#[stable(feature = \"bar\", since = \"1.0\")]\n+pub trait Bar {\n+    // @has - '//div[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    #[stable(feature = \"foobar\", since = \"3.0\")]\n+    fn foo();\n+}\n+\n+// @has - '//div[@id=\"implementors-list\"]//*[@class=\"rightside\"]' '4.0 \u00b7 source'\n+\n+// @has foo/struct.Foo.html\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0\u00b7 source \u00b7 '\n+#[stable(feature = \"baz\", since = \"1.0\")]\n+pub struct Foo;\n+\n+impl Foo {\n+    // @has - '//div[@id=\"method.foofoo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    #[stable(feature = \"foobar\", since = \"3.0\")]\n+    pub fn foofoo() {}\n+}\n+\n+#[stable(feature = \"yolo\", since = \"4.0\")]\n+impl Bar for Foo {\n+    fn foo() {}\n+}"}, {"sha": "a6825b84589438743dae5df33014ae25dab58d16", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces-without-turbofish.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR + 3>();\n    |        ++\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR + BAR>();\n    |        ++\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     foo<3 + 3>();\n    |        ^     ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<3 + 3>();\n    |        ++\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - 3>();\n    |        ++\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - BAR>();\n    |        ++\n@@ -59,7 +59,7 @@ error: comparison operators cannot be chained\n LL |     foo<100 - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<100 - BAR>();\n    |        ++\n@@ -70,7 +70,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar<i32>()>();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar<i32>()>();\n    |        ++\n@@ -87,7 +87,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>()>();\n    |        ^            ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>()>();\n    |        ++\n@@ -98,7 +98,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() + BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |        ++\n@@ -109,7 +109,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() - BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |        ++\n@@ -120,7 +120,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ++\n@@ -131,7 +131,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ++"}, {"sha": "a70dda8386f087ef1ab460614255b8780035228a", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -3,6 +3,10 @@ enum Hey<A, B> {\n     B(B),\n }\n \n+struct Foo {\n+    bar: Option<i32>,\n+}\n+\n fn f() {}\n \n fn a() -> Option<()> {\n@@ -40,4 +44,8 @@ fn main() {\n     let _: Hey<i32, bool> = false;\n     //~^ ERROR mismatched types\n     //~| HELP try wrapping\n+    let bar = 1i32;\n+    let _ = Foo { bar };\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n }"}, {"sha": "0dfd8f5c128f6a0f614b4eb1c9f9da0944a80ed0", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:9:5\n+  --> $DIR/compatible-variants.rs:13:5\n    |\n LL |   fn a() -> Option<()> {\n    |             ---------- expected `Option<()>` because of return type\n@@ -21,7 +21,7 @@ LL +     Some(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:17:5\n+  --> $DIR/compatible-variants.rs:21:5\n    |\n LL | fn b() -> Result<(), ()> {\n    |           -------------- expected `Result<(), ()>` because of return type\n@@ -37,7 +37,7 @@ LL +     Ok(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:23:25\n+  --> $DIR/compatible-variants.rs:27:25\n    |\n LL |     let _: Option<()> = while false {};\n    |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -52,7 +52,7 @@ LL |     let _: Option<()> = Some(while false {});\n    |                         +++++              +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:27:9\n+  --> $DIR/compatible-variants.rs:31:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -69,7 +69,7 @@ LL +         Some(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:31:31\n+  --> $DIR/compatible-variants.rs:35:31\n    |\n LL |     let _: Result<i32, i32> = 1;\n    |            ----------------   ^ expected enum `Result`, found integer\n@@ -86,7 +86,7 @@ LL |     let _: Result<i32, i32> = Err(1);\n    |                               ++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:34:26\n+  --> $DIR/compatible-variants.rs:38:26\n    |\n LL |     let _: Option<i32> = 1;\n    |            -----------   ^ expected enum `Option`, found integer\n@@ -101,7 +101,7 @@ LL |     let _: Option<i32> = Some(1);\n    |                          +++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:37:28\n+  --> $DIR/compatible-variants.rs:41:28\n    |\n LL |     let _: Hey<i32, i32> = 1;\n    |            -------------   ^ expected enum `Hey`, found integer\n@@ -118,7 +118,7 @@ LL |     let _: Hey<i32, i32> = Hey::B(1);\n    |                            +++++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:40:29\n+  --> $DIR/compatible-variants.rs:44:29\n    |\n LL |     let _: Hey<i32, bool> = false;\n    |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n@@ -132,6 +132,19 @@ help: try wrapping the expression in `Hey::B`\n LL |     let _: Hey<i32, bool> = Hey::B(false);\n    |                             +++++++     +\n \n-error: aborting due to 8 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:48:19\n+   |\n+LL |     let _ = Foo { bar };\n+   |                   ^^^ expected enum `Option`, found `i32`\n+   |\n+   = note: expected enum `Option<i32>`\n+              found type `i32`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _ = Foo { bar: Some(bar) };\n+   |                   ++++++++++   +\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "d0249efd094ffd5790382203e31222f1ee2bd88c", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n    |                    ++\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     Vec<i32>::new();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     Vec::<i32>::new();\n    |        ++\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ++\n@@ -37,7 +37,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, fo\n LL |     let x = std::collections::HashMap<i128, i128>::new();\n    |                                           ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     let x = std::collections::HashMap::<i128, i128>::new();\n    |                                      ++\n@@ -48,7 +48,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new()\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new()\n    |                                  ++\n@@ -59,7 +59,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new();\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new();\n    |                                  ++\n@@ -70,7 +70,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n    |                                  ++"}, {"sha": "28c9afaa52c2299dbe987b84268e7e12628e5719", "filename": "src/test/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -87,7 +87,7 @@ LL |     let r = R { i };\n help: consider dereferencing the borrow\n    |\n LL |     let r = R { i: *i };\n-   |                 ~~~~~\n+   |                 ++++\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20"}, {"sha": "68636f6b907ef7448d2dc922408ff2f544a424d8", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,6 +1,3 @@\n-fn f<T>() {}\n-struct X;\n-\n fn main() {\n     false == false == false;\n     //~^ ERROR comparison operators cannot be chained\n@@ -12,15 +9,26 @@ fn main() {\n \n     f<X>();\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n \n     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    let _ = f<u8, i8>();\n+    //~^ ERROR expected one of\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    let _ = f<'_, i8>();\n+    //~^ ERROR expected one of\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    f<'_>();\n+    //~^ comparison operators cannot be chained\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n \n-    use std::convert::identity;\n-    let _ = identity<u8>;\n+    let _ = f<u8>;\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n     //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "cde6f8c674f4b5c53c61a5e43c70f046456a7f83", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,5 +1,5 @@\n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:5:11\n+  --> $DIR/require-parens-for-chained-comparison.rs:2:11\n    |\n LL |     false == false == false;\n    |           ^^       ^^\n@@ -10,7 +10,7 @@ LL |     false == false && false == false;\n    |                    ++++++++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:9:11\n+  --> $DIR/require-parens-for-chained-comparison.rs:6:11\n    |\n LL |     false == 0 < 2;\n    |           ^^   ^\n@@ -21,35 +21,68 @@ LL |     false == (0 < 2);\n    |              +     +\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:13:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:10:6\n    |\n LL |     f<X>();\n    |      ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     f::<X>();\n    |      ++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:17:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:14:6\n    |\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^      ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ++\n \n+error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n+  --> $DIR/require-parens-for-chained-comparison.rs:18:17\n+   |\n+LL |     let _ = f<u8, i8>();\n+   |                 ^ expected one of 8 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     let _ = f::<u8, i8>();\n+   |              ++\n+\n+error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, `{`, or an operator, found `,`\n+  --> $DIR/require-parens-for-chained-comparison.rs:22:17\n+   |\n+LL |     let _ = f<'_, i8>();\n+   |                 ^ expected one of 10 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     let _ = f::<'_, i8>();\n+   |              ++\n+\n+error: comparison operators cannot be chained\n+  --> $DIR/require-parens-for-chained-comparison.rs:26:6\n+   |\n+LL |     f<'_>();\n+   |      ^  ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     f::<'_>();\n+   |      ++\n+\n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:22:21\n+  --> $DIR/require-parens-for-chained-comparison.rs:30:14\n    |\n-LL |     let _ = identity<u8>;\n-   |                     ^  ^\n+LL |     let _ = f<u8>;\n+   |              ^  ^\n    |\n-   = help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "72f0f45fb83802ffb20250c0c63ee291e0c6b6a2", "filename": "src/test/ui/suggestions/issue-82566-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     T1<1>::C;\n    |       ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T1::<1>::C;\n    |       ++\n@@ -15,7 +15,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n LL |     T2<1, 2>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T2::<1, 2>::C;\n    |       ++\n@@ -26,7 +26,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n LL |     T3<1, 2, 3>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T3::<1, 2, 3>::C;\n    |       ++"}, {"sha": "ef9a414307cc9128c4342dd641478cc0ec3a8291", "filename": "src/test/ui/suggestions/issue-82566-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL | fn foo1() -> [(); Foo1<10>::SUM] {\n    |                       ^  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo1() -> [(); Foo1::<10>::SUM] {\n    |                       ++\n@@ -15,7 +15,7 @@ error: expected one of `.`, `?`, `]`, or an operator, found `,`\n LL | fn foo2() -> [(); Foo2<10, 20>::SUM] {\n    |                          ^ expected one of `.`, `?`, `]`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo2() -> [(); Foo2::<10, 20>::SUM] {\n    |                       ++\n@@ -26,7 +26,7 @@ error: expected one of `.`, `?`, `]`, or an operator, found `,`\n LL | fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n    |                          ^ expected one of `.`, `?`, `]`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo3() -> [(); Foo3::<10, 20, 30>::SUM] {\n    |                       ++"}]}