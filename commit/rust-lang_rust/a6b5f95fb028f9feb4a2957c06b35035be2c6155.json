{"sha": "a6b5f95fb028f9feb4a2957c06b35035be2c6155", "node_id": "C_kwDOAAsO6NoAKGE2YjVmOTVmYjAyOGY5ZmViNGEyOTU3YzA2YjM1MDM1YmUyYzYxNTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T01:20:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T17:10:59Z"}, "message": "Make ClosureOutlivesRequirement not rely on an unresolved type", "tree": {"sha": "159ce992866baae21955751068e5dfafc872e1de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/159ce992866baae21955751068e5dfafc872e1de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b5f95fb028f9feb4a2957c06b35035be2c6155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b5f95fb028f9feb4a2957c06b35035be2c6155", "html_url": "https://github.com/rust-lang/rust/commit/a6b5f95fb028f9feb4a2957c06b35035be2c6155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b5f95fb028f9feb4a2957c06b35035be2c6155/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91af4f5d0b9ae9a2f8adafc02d61d18c60ddb200", "url": "https://api.github.com/repos/rust-lang/rust/commits/91af4f5d0b9ae9a2f8adafc02d61d18c60ddb200", "html_url": "https://github.com/rust-lang/rust/commit/91af4f5d0b9ae9a2f8adafc02d61d18c60ddb200"}], "stats": {"total": 187, "additions": 94, "deletions": 93}, "files": [{"sha": "58aeb43ef976f0c74132b7ed48ec8b21e8886b29", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -92,7 +92,7 @@ pub struct OutlivesConstraint<'tcx> {\n     pub span: Span,\n \n     /// What caused this constraint?\n-    pub category: ConstraintCategory<'tcx>,\n+    pub category: ConstraintCategory,\n \n     /// Variance diagnostic information\n     pub variance_info: VarianceDiagInfo<'tcx>,"}, {"sha": "314119b6e814224beacbe4a3943621b1f0b40986", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -976,7 +976,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err: &mut Diagnostic,\n         location: Location,\n         issued_borrow: &BorrowData<'tcx>,\n-        explanation: BorrowExplanation<'tcx>,\n+        explanation: BorrowExplanation,\n     ) {\n         let used_in_call = matches!(\n             explanation,\n@@ -1326,7 +1326,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n-        explanation: BorrowExplanation<'tcx>,\n+        explanation: BorrowExplanation,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n@@ -1532,7 +1532,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n-        explanation: BorrowExplanation<'tcx>,\n+        explanation: BorrowExplanation,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         if let BorrowExplanation::MustBeValidFor { category, span, from_closure: false, .. } =\n             explanation\n@@ -1646,7 +1646,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n     ) -> Option<DiagnosticBuilder<'cx, ErrorGuaranteed>> {\n         let return_kind = match category {\n@@ -1741,7 +1741,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         use_span: UseSpans<'tcx>,\n         var_span: Span,\n         fr_name: &RegionName,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {"}, {"sha": "545237bb3920595401093d54860ffca06b46164c", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -21,7 +21,7 @@ use crate::{\n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(crate) enum BorrowExplanation<'tcx> {\n+pub(crate) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -30,7 +30,7 @@ pub(crate) enum BorrowExplanation<'tcx> {\n         should_note_order: bool,\n     },\n     MustBeValidFor {\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         from_closure: bool,\n         span: Span,\n         region_name: RegionName,\n@@ -49,7 +49,7 @@ pub(crate) enum LaterUseKind {\n     Other,\n }\n \n-impl<'tcx> BorrowExplanation<'tcx> {\n+impl<'tcx> BorrowExplanation {\n     pub(crate) fn is_explained(&self) -> bool {\n         !matches!(self, BorrowExplanation::Unexplained)\n     }\n@@ -284,7 +284,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n     fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut Diagnostic,\n-        category: &ConstraintCategory<'tcx>,\n+        category: &ConstraintCategory,\n         span: Span,\n         region_name: &RegionName,\n     ) {\n@@ -316,7 +316,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n+    ) -> (ConstraintCategory, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n         let (blame_constraint, extra_info) = self.regioncx.best_blame_constraint(\n             borrow_region,\n             NllRegionVariableOrigin::FreeRegion,\n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, Place<'tcx>)>,\n-    ) -> BorrowExplanation<'tcx> {\n+    ) -> BorrowExplanation {\n         let regioncx = &self.regioncx;\n         let body: &Body<'_> = &self.body;\n         let tcx = self.infcx.tcx;"}, {"sha": "245ea07d120bc6c710dc7103fbfceedbeeaf3fb4", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -161,7 +161,7 @@ impl OutlivesSuggestionBuilder {\n     pub(crate) fn intermediate_suggestion(\n         &mut self,\n         mbcx: &MirBorrowckCtxt<'_, '_>,\n-        errci: &ErrorConstraintInfo<'_>,\n+        errci: &ErrorConstraintInfo,\n         diag: &mut Diagnostic,\n     ) {\n         // Emit an intermediate note."}, {"sha": "b619537f31769b578fa98f8a35e13c20ad974fe9", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -2,6 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n //! Error reporting machinery for lifetime errors.\n \n+use either::Either;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n@@ -16,7 +17,7 @@ use rustc_infer::infer::{\n     NllRegionVariableOrigin, RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n-use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n+use rustc_middle::mir::{ConstraintCategory, ReturnConstraint, TerminatorKind};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n@@ -39,7 +40,7 @@ use crate::{\n     MirBorrowckCtxt,\n };\n \n-impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n+impl ConstraintDescription for ConstraintCategory {\n     fn description(&self) -> &'static str {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n@@ -115,15 +116,15 @@ pub(crate) enum RegionErrorKind<'tcx> {\n \n /// Information about the various region constraints involved in a borrow checker error.\n #[derive(Clone, Debug)]\n-pub struct ErrorConstraintInfo<'tcx> {\n+pub struct ErrorConstraintInfo {\n     // fr: outlived_fr\n     pub(super) fr: RegionVid,\n     pub(super) fr_is_local: bool,\n     pub(super) outlived_fr: RegionVid,\n     pub(super) outlived_fr_is_local: bool,\n \n     // Category and span for best blame constraint\n-    pub(super) category: ConstraintCategory<'tcx>,\n+    pub(super) category: ConstraintCategory,\n     pub(super) span: Span,\n }\n \n@@ -498,7 +499,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_fnmut_error(\n         &self,\n-        errci: &ErrorConstraintInfo<'tcx>,\n+        errci: &ErrorConstraintInfo,\n         kind: ReturnConstraint,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n@@ -571,7 +572,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn report_escaping_data_error(\n         &self,\n-        errci: &ErrorConstraintInfo<'tcx>,\n+        errci: &ErrorConstraintInfo,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { span, category, .. } = errci;\n \n@@ -675,7 +676,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_general_error(\n         &self,\n-        errci: &ErrorConstraintInfo<'tcx>,\n+        errci: &ErrorConstraintInfo,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo {\n             fr,\n@@ -788,15 +789,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         diag: &mut Diagnostic,\n         f: Region<'tcx>,\n         o: Region<'tcx>,\n-        category: &ConstraintCategory<'tcx>,\n+        category: &ConstraintCategory,\n     ) {\n         if !o.is_static() {\n             return;\n         }\n \n         let tcx = self.infcx.tcx;\n \n-        let instance = if let ConstraintCategory::CallArgument(Some(func_ty)) = category {\n+        let instance =\n+            if let ConstraintCategory::CallArgument(location) = category\n+                && let Either::Right(term) = self.body.stmt_at(*location)\n+                && let TerminatorKind::Call { func, .. } = &term.kind\n+        {\n+            let func_ty = func.ty(self.body, tcx);\n             let (fn_did, substs) = match func_ty.kind() {\n                 ty::FnDef(fn_did, substs) => (fn_did, substs),\n                 _ => return,"}, {"sha": "85b9bde2c81926a1ada3689149077a9b7d8c8d53", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -91,7 +91,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Map closure bounds to a `Span` that should be used for error reporting.\n     closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n \n     /// Map universe indexes to information on why we created it.\n     universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n@@ -267,7 +267,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n-            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>,\n+            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n         >,\n         universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n@@ -1807,7 +1807,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn retrieve_closure_constraint_info(\n         &self,\n         constraint: OutlivesConstraint<'tcx>,\n-    ) -> Option<(ConstraintCategory<'tcx>, Span)> {\n+    ) -> Option<(ConstraintCategory, Span)> {\n         match constraint.locations {\n             Locations::All(_) => None,\n             Locations::Single(loc) => {\n@@ -1822,7 +1822,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1: RegionVid,\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n-    ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n+    ) -> (ConstraintCategory, ObligationCause<'tcx>) {\n         let BlameConstraint { category, cause, .. } = self\n             .best_blame_constraint(fr1, fr1_origin, |r| self.provides_universal_region(r, fr1, fr2))\n             .0;\n@@ -2362,7 +2362,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n \n #[derive(Clone, Debug)]\n pub struct BlameConstraint<'tcx> {\n-    pub category: ConstraintCategory<'tcx>,\n+    pub category: ConstraintCategory,\n     pub from_closure: bool,\n     pub cause: ObligationCause<'tcx>,\n     pub variance_info: ty::VarianceDiagInfo<'tcx>,"}, {"sha": "459ecfe17e3e7b43893a939499db0bdfc3461852", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     pub(super) fn fully_perform_op<R: fmt::Debug, Op>(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         op: Op,\n     ) -> Fallible<R>\n     where\n@@ -85,7 +85,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         trait_ref: ty::TraitRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         self.prove_predicate(\n             ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         for predicate in predicates {\n             let predicate = predicate.to_predicate(self.tcx());\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicate: ty::Predicate<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         value: T,\n         location: impl NormalizeLocation,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> T\n     where\n         T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,"}, {"sha": "d7e5a118a2e0bb3902735d2fb6b7cc14e82137e9", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -37,7 +37,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n-    category: ConstraintCategory<'tcx>,\n+    category: ConstraintCategory,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n \n@@ -50,7 +50,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     ) -> Self {\n         Self {\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         &mut self,\n         sup: ty::RegionVid,\n         sub: ty::RegionVid,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         let category = match self.category {\n             ConstraintCategory::Boring | ConstraintCategory::BoringNoLocation => category,\n@@ -203,7 +203,7 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         _origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory<'tcx>,\n+        constraint_category: ConstraintCategory,\n     ) {\n         let b = self.to_region_vid(b);\n         let a = self.to_region_vid(a);"}, {"sha": "00cacd515a1e2c469f1b4378497500aa1823a0fd", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -942,7 +942,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n     pub(crate) member_constraints: MemberConstraintSet<'tcx, RegionVid>,\n \n     pub(crate) closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n \n     pub(crate) universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n@@ -1133,7 +1133,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn push_region_constraints(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         data: &QueryRegionConstraints<'tcx>,\n     ) {\n         debug!(\"constraints generated: {:#?}\", data);\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> Fallible<()> {\n         // Use this order of parameters because the sup type is usually the\n         // \"expected\" type in diagnostics.\n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> Fallible<()> {\n         self.relate_types(expected, ty::Variance::Invariant, found, locations, category)\n     }\n@@ -1183,7 +1183,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         user_ty: &UserTypeProjection,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n@@ -1618,19 +1618,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n \n-        let func_ty = if let TerminatorKind::Call { func, .. } = &term.kind {\n-            Some(func.ty(body, self.infcx.tcx))\n-        } else {\n-            None\n-        };\n-        debug!(?func_ty);\n-\n         for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n \n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument(func_ty)\n+                ConstraintCategory::CallArgument(term_location)\n             } else {\n                 ConstraintCategory::Boring\n             };"}, {"sha": "b53360ea61bbfc0f7a39153758c6cce1a69edf22", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         b: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         a: ty::SubstsRef<'tcx>,\n         b: ty::SubstsRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -64,7 +64,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     locations: Locations,\n \n     /// What category do we assign the resulting `'a: 'b` relationships?\n-    category: ConstraintCategory<'tcx>,\n+    category: ConstraintCategory,\n \n     /// Information so that error reporting knows what types we are relating\n     /// when reporting a bound region error.\n@@ -75,7 +75,7 @@ impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n         Self { type_checker, locations, category, universe_info }"}, {"sha": "608b5cc8756a6686309b78a3953b203011056e34", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -632,7 +632,7 @@ impl<'tcx> InferCtxt<'tcx> {\n /// creates query region constraints.\n pub fn make_query_region_constraints<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory<'tcx>)>,\n+    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n ) -> QueryRegionConstraints<'tcx> {\n     let RegionConstraintData { constraints, verifys, givens, member_constraints } ="}, {"sha": "2732c92ecd38beca9f8433c33e4703ff69c6baff", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -425,7 +425,7 @@ pub enum SubregionOrigin<'tcx> {\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n impl<'tcx> SubregionOrigin<'tcx> {\n-    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory {\n         match self {\n             Self::Subtype(type_trace) => type_trace.cause.to_constraint_category(),\n             Self::AscribeUserTypeProvePredicate(span) => ConstraintCategory::Predicate(*span),"}, {"sha": "5ebf80b7b7481a5763bcd965acf5b8643fbebe34", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -210,7 +210,7 @@ pub trait TypeOutlivesDelegate<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory<'tcx>,\n+        constraint_category: ConstraintCategory,\n     );\n \n     fn push_verify(\n@@ -259,7 +259,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         assert!(!ty.has_escaping_bound_vars());\n \n@@ -273,7 +273,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         components: &[Component<'tcx>],\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory<'tcx>,\n+        category: ConstraintCategory,\n     ) {\n         for component in components.iter() {\n             let origin = origin.clone();\n@@ -529,7 +529,7 @@ impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        _constraint_category: ConstraintCategory<'tcx>,\n+        _constraint_category: ConstraintCategory,\n     ) {\n         self.sub_regions(origin, a, b)\n     }"}, {"sha": "f4f1d82c3b8d3316b7d6606e9ee1afc832008597", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -302,10 +302,8 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> = (\n-    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>,\n-    ConstraintCategory<'tcx>,\n-);\n+pub type QueryOutlivesConstraint<'tcx> =\n+    (ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>, ConstraintCategory);\n \n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {"}, {"sha": "e0e823e2090efbd1441a056e3d1a4f4898b34b57", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -2875,7 +2875,7 @@ fn pretty_print_const_value<'tcx>(\n /// `Location` represents the position of the start of the statement; or, if\n /// `statement_index` equals the number of statements, then the start of the\n /// terminator.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable, TyEncodable, TyDecodable)]\n pub struct Location {\n     /// The block that the location is within.\n     pub block: BasicBlock,"}, {"sha": "1d847d8f3d31dd1ef7536e06637a23790b1e2e01", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -15,7 +15,7 @@ use smallvec::SmallVec;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n-use super::{Field, SourceInfo};\n+use super::{Field, Location, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n@@ -314,21 +314,21 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub blame_span: Span,\n \n     // ... due to this reason.\n-    pub category: ConstraintCategory<'tcx>,\n+    pub category: ConstraintCategory,\n }\n \n // Make sure this enum doesn't unintentionally grow\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ConstraintCategory<'_>, 16);\n+rustc_data_structures::static_assert_size!(ConstraintCategory, 16);\n \n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n /// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable, Lift, TypeVisitable, TypeFoldable)]\n-pub enum ConstraintCategory<'tcx> {\n+#[derive(TyEncodable, TyDecodable, HashStable)]\n+pub enum ConstraintCategory {\n     Return(ReturnConstraint),\n     Yield,\n     UseAsConst,\n@@ -342,7 +342,7 @@ pub enum ConstraintCategory<'tcx> {\n     ClosureBounds,\n \n     /// Contains the function type if available.\n-    CallArgument(Option<Ty<'tcx>>),\n+    CallArgument(Location),\n     CopyBound,\n     SizedBound,\n     Assignment,\n@@ -368,6 +368,10 @@ pub enum ConstraintCategory<'tcx> {\n     Internal,\n }\n \n+TrivialTypeTraversalAndLiftImpls! {\n+    ConstraintCategory,\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {"}, {"sha": "3adc2e1b73e4847a28961e03baf4e66de63cd81d", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         self\n     }\n \n-    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory {\n         match self.code() {\n             MatchImpl(cause, _) => cause.to_constraint_category(),\n             AscribeUserTypeProvePredicate(predicate_span) => {"}, {"sha": "5e5a980adb9f2807495f160953f5af45df1f77a3", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -1,22 +1,23 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:12:9\n+  --> $DIR/issue-72312.rs:12:24\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n    |                          |\n    |                          `self` is a reference that is only valid in the associated function body\n    |                          let's call the lifetime of this reference `'1`\n ...\n-LL | /         require_static(async move {\n+LL |           require_static(async move {\n+   |  ________________________^\n LL | |\n LL | |\n LL | |\n LL | |             &self;\n LL | |         });\n-   | |          ^\n-   | |          |\n-   | |__________`self` escapes the associated function body here\n-   |            argument requires that `'1` must outlive `'static`\n+   | |         ^\n+   | |         |\n+   | |_________`self` escapes the associated function body here\n+   |           argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "da4bc499c7e517c33a77d709d9c1b88927ce7c46", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -53,15 +53,14 @@ LL | fn case2() {\n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26\n    |\n-LL |       let cell = Cell::new(&a);\n-   |                            ^^ borrowed value does not live long enough\n+LL |     let cell = Cell::new(&a);\n+   |                ----------^^-\n+   |                |         |\n+   |                |         borrowed value does not live long enough\n+   |                argument requires that `a` is borrowed for `'static`\n ...\n-LL | /     foo(cell, |cell_a, cell_x| {\n-LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n-LL | |     })\n-   | |______- argument requires that `a` is borrowed for `'static`\n-LL |   }\n-   |   - `a` dropped here while still borrowed\n+LL | }\n+   | - `a` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb703412228800d6be0d47cf2bac4026f47728d0", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6b5f95fb028f9feb4a2957c06b35035be2c6155/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=a6b5f95fb028f9feb4a2957c06b35035be2c6155", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:33:41\n    |\n-LL | /     combine(\n-LL | |         SomeEnum::SomeVariant(Cell::new(&c)),\n-   | |                                         ^^ borrowed value does not live long enough\n-LL | |         SomeEnum::SomeOtherVariant::<Cell<&'static u32>>,\n-LL | |     );\n-   | |_____- argument requires that `c` is borrowed for `'static`\n-LL |   }\n-   |   - `c` dropped here while still borrowed\n+LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n+   |                               ----------^^-\n+   |                               |         |\n+   |                               |         borrowed value does not live long enough\n+   |                               argument requires that `c` is borrowed for `'static`\n+...\n+LL | }\n+   | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:41:41"}]}