{"sha": "88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZGZiODg1ZWE0NzhmYTZmZmVlYmE1ZWNiNmI2OTMxYmFmY2MyYTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-16T06:10:34Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-16T06:10:34Z"}, "message": "Improve proc macro def ids.", "tree": {"sha": "d4e47c94c3f827c992e1155e31c75d1376e556af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4e47c94c3f827c992e1155e31c75d1376e556af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "html_url": "https://github.com/rust-lang/rust/commit/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd983d02e15909567303f92532671fb2b8374285", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd983d02e15909567303f92532671fb2b8374285", "html_url": "https://github.com/rust-lang/rust/commit/fd983d02e15909567303f92532671fb2b8374285"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "fba56da2bfb2f19f2230a7f437c7f138e60c1bf9", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn load_macro(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n-            return LoadedMacro::ProcMacro(proc_macros[id.index.as_usize()].1.clone());\n+            return LoadedMacro::ProcMacro(proc_macros[id.index.as_usize() - 1].1.clone());\n         }\n \n         let (name, def) = data.get_macro(id.index);"}, {"sha": "edd9dd052bb6c91cf5654753e0a2100cf4daed46", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=88dfb885ea478fa6ffeeba5ecb6b6931bafcc2a1", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::intravisit::IdRange;\n \n use rustc::middle::cstore::{DepKind, InlinedItem, LinkagePreference};\n use rustc::hir::def::{self, Def, CtorKind};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n@@ -513,7 +513,14 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n-        self.entry(index).kind.to_def(self.local_def_id(index))\n+        if self.proc_macros.is_some() {\n+            Some(match index {\n+                CRATE_DEF_INDEX => Def::Mod(self.local_def_id(index)),\n+                _ => Def::Macro(self.local_def_id(index)),\n+            })\n+        } else {\n+            self.entry(index).kind.to_def(self.local_def_id(index))\n+        }\n     }\n \n     pub fn get_trait_def(&self,\n@@ -643,15 +650,24 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n-        self.entry(id).stability.map(|stab| stab.decode(self))\n+        match self.proc_macros {\n+            Some(_) if id != CRATE_DEF_INDEX => None,\n+            _ => self.entry(id).stability.map(|stab| stab.decode(self)),\n+        }\n     }\n \n     pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n-        self.entry(id).deprecation.map(|depr| depr.decode(self))\n+        match self.proc_macros {\n+            Some(_) if id != CRATE_DEF_INDEX => None,\n+            _ => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n+        }\n     }\n \n     pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n-        self.entry(id).visibility\n+        match self.proc_macros {\n+            Some(_) => ty::Visibility::Public,\n+            _ => self.entry(id).visibility,\n+        }\n     }\n \n     fn get_impl_data(&self, id: DefIndex) -> ImplData<'tcx> {\n@@ -692,11 +708,11 @@ impl<'a, 'tcx> CrateMetadata {\n         where F: FnMut(def::Export)\n     {\n         if let Some(ref proc_macros) = self.proc_macros {\n-            for (id, &(name, _)) in proc_macros.iter().enumerate() {\n-                callback(def::Export {\n-                    name: name,\n-                    def: Def::Macro(DefId { krate: self.cnum, index: DefIndex::new(id), }),\n-                })\n+            if id == CRATE_DEF_INDEX {\n+                for (id, &(name, _)) in proc_macros.iter().enumerate() {\n+                    let def = Def::Macro(DefId { krate: self.cnum, index: DefIndex::new(id + 1) });\n+                    callback(def::Export { name: name, def: def });\n+                }\n             }\n             return\n         }\n@@ -894,6 +910,9 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_item_attrs(&self, node_id: DefIndex) -> Vec<ast::Attribute> {\n+        if self.proc_macros.is_some() && node_id != CRATE_DEF_INDEX {\n+            return Vec::new();\n+        }\n         // The attributes for a tuple struct are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition"}]}