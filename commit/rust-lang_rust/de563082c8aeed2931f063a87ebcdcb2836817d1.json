{"sha": "de563082c8aeed2931f063a87ebcdcb2836817d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNTYzMDgyYzhhZWVkMjkzMWYwNjNhODdlYmNkY2IyODM2ODE3ZDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-12T13:39:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:11Z"}, "message": "use `Option<ErrorReported>` instead of `bool`\n\nAlso allows us to replace `or_false` with `?`.\n\nNo functional change", "tree": {"sha": "078bfcb15f973b953ca5e72c17cdfb8421fa5b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078bfcb15f973b953ca5e72c17cdfb8421fa5b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de563082c8aeed2931f063a87ebcdcb2836817d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de563082c8aeed2931f063a87ebcdcb2836817d1", "html_url": "https://github.com/rust-lang/rust/commit/de563082c8aeed2931f063a87ebcdcb2836817d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de563082c8aeed2931f063a87ebcdcb2836817d1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba4732b6555676ded9e945d1895580e2e328ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba4732b6555676ded9e945d1895580e2e328ee9", "html_url": "https://github.com/rust-lang/rust/commit/cba4732b6555676ded9e945d1895580e2e328ee9"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "d4ea899dc747f1cbf08d27f5054296fa6dee6bb5", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=de563082c8aeed2931f063a87ebcdcb2836817d1", "patch": "@@ -10,8 +10,10 @@\n \n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n+\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use infer::error_reporting::nice_region_error::util::AnonymousArgInfo;\n+use util::common::ErrorReported;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n@@ -50,21 +52,21 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// ````\n     ///\n     /// It will later be extended to trait objects.\n-    pub(super) fn try_report_anon_anon_conflict(&self) -> bool {\n+    pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n         let NiceRegionError { span, sub, sup, .. } = *self;\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n-        let anon_reg_sup = or_false!(self.is_suitable_region(sup));\n+        let anon_reg_sup = self.is_suitable_region(sup)?;\n \n-        let anon_reg_sub = or_false!(self.is_suitable_region(sub));\n+        let anon_reg_sub = self.is_suitable_region(sub)?;\n         let scope_def_id_sup = anon_reg_sup.def_id;\n         let bregion_sup = anon_reg_sup.boundregion;\n         let scope_def_id_sub = anon_reg_sub.def_id;\n         let bregion_sub = anon_reg_sub.boundregion;\n \n-        let ty_sup = or_false!(self.find_anon_type(sup, &bregion_sup));\n+        let ty_sup = self.find_anon_type(sup, &bregion_sup)?;\n \n-        let ty_sub = or_false!(self.find_anon_type(sub, &bregion_sub));\n+        let ty_sub = self.find_anon_type(sub, &bregion_sub)?;\n \n         debug!(\n             \"try_report_anon_anon_conflict: found_arg1={:?} sup={:?} br1={:?}\",\n@@ -84,10 +86,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n \n         let AnonymousArgInfo {\n             arg: anon_arg_sup, ..\n-        } = or_false!(self.find_arg_with_region(sup, sup));\n+        } = self.find_arg_with_region(sup, sup)?;\n         let AnonymousArgInfo {\n             arg: anon_arg_sub, ..\n-        } = or_false!(self.find_arg_with_region(sub, sub));\n+        } = self.find_arg_with_region(sub, sub)?;\n \n         let sup_is_ret_type =\n             self.is_return_type_anon(scope_def_id_sup, bregion_sup, ty_fndecl_sup);\n@@ -157,6 +159,6 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             .span_label(span_2, format!(\"\"))\n             .span_label(span, span_label)\n             .emit();\n-        return true;\n+        return Some(ErrorReported);\n     }\n }"}, {"sha": "71e6090ab9e384aa6041f75e462c38774fc6fee3", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=de563082c8aeed2931f063a87ebcdcb2836817d1", "patch": "@@ -13,13 +13,12 @@ use infer::lexical_region_resolve::RegionResolutionError;\n use infer::lexical_region_resolve::RegionResolutionError::*;\n use syntax::codemap::Span;\n use ty::{self, TyCtxt};\n+use util::common::ErrorReported;\n \n-#[macro_use]\n-mod util;\n-\n-mod find_anon_type;\n mod different_lifetimes;\n+mod find_anon_type;\n mod named_anon_conflict;\n+mod util;\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn try_report_nice_region_error(&self, error: &RegionResolutionError<'tcx>) -> bool {\n@@ -31,9 +30,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         if let Some(tables) = self.in_progress_tables {\n             let tables = tables.borrow();\n-            NiceRegionError::new(self.tcx, span, sub, sup, Some(&tables)).try_report()\n+            NiceRegionError::new(self.tcx, span, sub, sup, Some(&tables)).try_report().is_some()\n         } else {\n-            NiceRegionError::new(self.tcx, span, sub, sup, None).try_report()\n+            NiceRegionError::new(self.tcx, span, sub, sup, None).try_report().is_some()\n         }\n     }\n }\n@@ -57,7 +56,8 @@ impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n         Self { tcx, span, sub, sup, tables }\n     }\n \n-    pub fn try_report(&self) -> bool {\n-        self.try_report_anon_anon_conflict() || self.try_report_named_anon_conflict()\n+    pub fn try_report(&self) -> Option<ErrorReported> {\n+        self.try_report_anon_anon_conflict()\n+            .or_else(|| self.try_report_named_anon_conflict())\n     }\n }"}, {"sha": "9d0ddfd4be04b27733ce2c949a19d4a40c3f1605", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=de563082c8aeed2931f063a87ebcdcb2836817d1", "patch": "@@ -12,11 +12,12 @@\n //! where one region is named and the other is anonymous.\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use ty;\n+use util::common::ErrorReported;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n-    pub(super) fn try_report_named_anon_conflict(&self) -> bool {\n+    pub(super) fn try_report_named_anon_conflict(&self) -> Option<ErrorReported> {\n         let NiceRegionError { span, sub, sup, .. } = *self;\n \n         debug!(\n@@ -51,7 +52,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 self.is_suitable_region(sub).unwrap(),\n             )\n         } else {\n-            return false; // inapplicable\n+            return None; // inapplicable\n         };\n \n         debug!(\"try_report_named_anon_conflict: named = {:?}\", named);\n@@ -77,20 +78,20 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             _ => {\n                 /* not an anonymous region */\n                 debug!(\"try_report_named_anon_conflict: not an anonymous region\");\n-                return false;\n+                return None;\n             }\n         }\n \n         if is_impl_item {\n             debug!(\"try_report_named_anon_conflict: impl item, bail out\");\n-            return false;\n+            return None;\n         }\n \n         if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n             if self.is_return_type_anon(scope_def_id, br, fndecl).is_some()\n                 || self.is_self_anon(is_first, scope_def_id)\n             {\n-                return false;\n+                return None;\n             }\n         }\n \n@@ -115,6 +116,6 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         )\n             .span_label(span, format!(\"lifetime `{}` required\", named))\n             .emit();\n-        return true;\n+        return Some(ErrorReported);\n     }\n }"}, {"sha": "f8b6f7d0afa93c5bcf68aa272d26ce1f58192b8b", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de563082c8aeed2931f063a87ebcdcb2836817d1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=de563082c8aeed2931f063a87ebcdcb2836817d1", "patch": "@@ -17,18 +17,6 @@ use hir::def_id::DefId;\n use hir::map as hir_map;\n use syntax_pos::Span;\n \n-macro_rules! or_false {\n-     ($v:expr) => {\n-         match $v {\n-             Some(v) => v,\n-             None => {\n-                 debug!(\"or_false failed: {}\", stringify!($v));\n-                 return false;\n-             }\n-         }\n-     }\n-}\n-\n // The struct contains the information about the anonymous region\n // we are searching for.\n #[derive(Debug)]"}]}