{"sha": "2c33b070ad51c5a80e963beebc5c35ce976f05b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMzNiMDcwYWQ1MWM1YTgwZTk2M2JlZWJjNWMzNWNlOTc2ZjA1YjU=", "commit": {"author": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-02-09T12:41:34Z"}, "committer": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-02-09T12:42:35Z"}, "message": "use ufcs in derive(Ord) and derive(PartialOrd)", "tree": {"sha": "5be5a6bdb7c7a2d0d1bb100ade9d07a1ea960e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be5a6bdb7c7a2d0d1bb100ade9d07a1ea960e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c33b070ad51c5a80e963beebc5c35ce976f05b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEExK/X7hjj1qyNARZpO+Gho8vDz5kFAmAigzsACgkQO+Gho8vD\nz5lABwf/bawEU+ZwJ64KGgJk5dn54RJXMBVP7FMPENjXrmprghr2ifuP7fbAXcMI\nqvk6KuVnAjMVkeAl07krsak/JaGJkpjAK5XAVFb/KT1neybZAu6gNpbuoQrI8GAU\nMQ1N3x1i+yJKLTsWIwokSY3bJZVykt7piCWvPOUjvUng+U6pBrHGPzetjN1OydpB\nxhBiXhZZtINSAX8gP3Sx92WVIzpO3Ql/HrRfm82MchqZ9OflWwOipJGcQeZlGs43\nKL0VX0I1ov6IcUdEhVlUCuzHBvXhXMVzlR3iB7M0H5+0iOtKJutJo82UQMzBiaiU\nX3840OBWY7PCRLH2xckTEUpNzoOZJQ==\n=v6kX\n-----END PGP SIGNATURE-----", "payload": "tree 5be5a6bdb7c7a2d0d1bb100ade9d07a1ea960e71\nparent c648bd55580a918d6f26f39bc167913a9da5ae3d\nauthor Skgland <bb-github@t-online.de> 1612874494 +0100\ncommitter Skgland <bb-github@t-online.de> 1612874555 +0100\n\nuse ufcs in derive(Ord) and derive(PartialOrd)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c33b070ad51c5a80e963beebc5c35ce976f05b5", "html_url": "https://github.com/rust-lang/rust/commit/2c33b070ad51c5a80e963beebc5c35ce976f05b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c33b070ad51c5a80e963beebc5c35ce976f05b5/comments", "author": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c648bd55580a918d6f26f39bc167913a9da5ae3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c648bd55580a918d6f26f39bc167913a9da5ae3d", "html_url": "https://github.com/rust-lang/rust/commit/c648bd55580a918d6f26f39bc167913a9da5ae3d"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "f84e6e076201220b3fe3848823e81238f1c4ef02", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c33b070ad51c5a80e963beebc5c35ce976f05b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c33b070ad51c5a80e963beebc5c35ce976f05b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=2c33b070ad51c5a80e963beebc5c35ce976f05b5", "patch": "@@ -47,9 +47,10 @@ pub fn ordering_collapsed(\n     span: Span,\n     self_arg_tags: &[Ident],\n ) -> P<ast::Expr> {\n-    let lft = cx.expr_ident(span, self_arg_tags[0]);\n+    let lft = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[0]));\n     let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n-    cx.expr_method_call(span, lft, Ident::new(sym::cmp, span), vec![rgt])\n+    let fn_cmp_path = cx.std_path(&[sym::cmp, sym::Ord, sym::cmp]);\n+    cx.expr_call_global(span, fn_cmp_path, vec![lft, rgt])\n }\n \n pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {"}, {"sha": "151a919e0293b3e178f1a11345375f30f6da23a5", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c33b070ad51c5a80e963beebc5c35ce976f05b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c33b070ad51c5a80e963beebc5c35ce976f05b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=2c33b070ad51c5a80e963beebc5c35ce976f05b5", "patch": "@@ -107,9 +107,11 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n-                let lft = cx.expr_ident(span, tag_tuple[0]);\n+                let lft = cx.expr_addr_of(span, cx.expr_ident(span, tag_tuple[0]));\n                 let rgt = cx.expr_addr_of(span, cx.expr_ident(span, tag_tuple[1]));\n-                cx.expr_method_call(span, lft, Ident::new(sym::partial_cmp, span), vec![rgt])\n+                let fn_partial_cmp_path =\n+                    cx.std_path(&[sym::cmp, sym::PartialOrd, sym::partial_cmp]);\n+                cx.expr_call_global(span, fn_partial_cmp_path, vec![lft, rgt])\n             }\n         }),\n         cx,"}]}