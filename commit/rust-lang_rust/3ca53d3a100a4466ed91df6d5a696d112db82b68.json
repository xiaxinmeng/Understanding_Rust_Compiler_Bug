{"sha": "3ca53d3a100a4466ed91df6d5a696d112db82b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYTUzZDNhMTAwYTQ0NjZlZDkxZGY2ZDVhNjk2ZDExMmRiODJiNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-08T16:50:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-08T17:50:34Z"}, "message": "librustc: Make sure lifetimes in `for` loop heads outlive the `for` loop\nitself.\n\nThis breaks code like:\n\n    for &x in my_vector.iter() {\n        my_vector[2] = \"wibble\";\n        ...\n    }\n\nChange this code to not invalidate iterators. For example:\n\n    for i in range(0, my_vector.len()) {\n        my_vector[2] = \"wibble\";\n        ...\n    }\n\nThe `for-loop-does-not-borrow-iterators` test for #8372 was incorrect\nand has been removed.\n\nCloses #16820.\n\n[breaking-change]", "tree": {"sha": "7d94650fab70c594c30e457cf76e976a63a7da83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d94650fab70c594c30e457cf76e976a63a7da83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca53d3a100a4466ed91df6d5a696d112db82b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca53d3a100a4466ed91df6d5a696d112db82b68", "html_url": "https://github.com/rust-lang/rust/commit/3ca53d3a100a4466ed91df6d5a696d112db82b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca53d3a100a4466ed91df6d5a696d112db82b68/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a26184dc103025e7ad457ffd8deb391019dbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a26184dc103025e7ad457ffd8deb391019dbfe", "html_url": "https://github.com/rust-lang/rust/commit/d8a26184dc103025e7ad457ffd8deb391019dbfe"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "951b42e5b80eb545910844505adfe6d652aa9359", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ca53d3a100a4466ed91df6d5a696d112db82b68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca53d3a100a4466ed91df6d5a696d112db82b68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=3ca53d3a100a4466ed91df6d5a696d112db82b68", "patch": "@@ -769,6 +769,10 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             }\n \n             rcx.visit_expr(&**head, ());\n+            type_of_node_must_outlive(rcx,\n+                                      infer::AddrOf(expr.span),\n+                                      head.id,\n+                                      ty::ReScope(expr.id));\n \n             let repeating_scope = rcx.set_repeating_scope(body.id);\n             rcx.visit_block(&**body, ());"}, {"sha": "600c0ac801b7e0700001fa3185f6b828880afd34", "filename": "src/test/compile-fail/borrowck-for-loop-head-linkage.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ca53d3a100a4466ed91df6d5a696d112db82b68/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca53d3a100a4466ed91df6d5a696d112db82b68/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs?ref=3ca53d3a100a4466ed91df6d5a696d112db82b68", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut vector = vec![1u, 2];\n+    for &x in vector.iter() {\n+        let cap = vector.capacity();\n+        vector.grow(cap, &0u);      //~ ERROR cannot borrow\n+        *vector.get_mut(1u) = 5u;   //~ ERROR cannot borrow\n+    }\n+}\n+"}, {"sha": "206ab0dfeb2d06074568c2fde5c1150e2e7e08c3", "filename": "src/test/run-pass/for-loop-does-not-borrow-iterators.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8a26184dc103025e7ad457ffd8deb391019dbfe/src%2Ftest%2Frun-pass%2Ffor-loop-does-not-borrow-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a26184dc103025e7ad457ffd8deb391019dbfe/src%2Ftest%2Frun-pass%2Ffor-loop-does-not-borrow-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-does-not-borrow-iterators.rs?ref=d8a26184dc103025e7ad457ffd8deb391019dbfe", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// The `for` loop use to keep a mutable borrow when executing its body,\n-// making it impossible to re-use the iterator as follows.\n-// https://github.com/rust-lang/rust/issues/8372\n-//\n-// This was fixed in https://github.com/rust-lang/rust/pull/15809\n-\n-pub fn main() {\n-    let mut for_loop_values = Vec::new();\n-    let mut explicit_next_call_values = Vec::new();\n-\n-    let mut iter = range(1i, 10);\n-    for i in iter {\n-        for_loop_values.push(i);\n-        explicit_next_call_values.push(iter.next());\n-    }\n-\n-    assert_eq!(for_loop_values, vec![1, 3, 5, 7, 9]);\n-    assert_eq!(explicit_next_call_values, vec![Some(2), Some(4), Some(6), Some(8), None]);\n-}"}]}