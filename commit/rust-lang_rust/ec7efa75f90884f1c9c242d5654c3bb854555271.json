{"sha": "ec7efa75f90884f1c9c242d5654c3bb854555271", "node_id": "C_kwDOAAsO6NoAKGVjN2VmYTc1ZjkwODg0ZjFjOWMyNDJkNTY1NGMzYmI4NTQ1NTUyNzE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T15:17:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T16:24:27Z"}, "message": "Avoid negative impls in the bridge", "tree": {"sha": "71df9d3818bb5b7c7cbae4c532831d4d1caf1319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71df9d3818bb5b7c7cbae4c532831d4d1caf1319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7efa75f90884f1c9c242d5654c3bb854555271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7efa75f90884f1c9c242d5654c3bb854555271", "html_url": "https://github.com/rust-lang/rust/commit/ec7efa75f90884f1c9c242d5654c3bb854555271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7efa75f90884f1c9c242d5654c3bb854555271/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b67506baa758d6937c765a9d99ca803dce2c5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b67506baa758d6937c765a9d99ca803dce2c5bd", "html_url": "https://github.com/rust-lang/rust/commit/4b67506baa758d6937c765a9d99ca803dce2c5bd"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "cf51d8da16db5afd3136797712fcb56230b751d9", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=ec7efa75f90884f1c9c242d5654c3bb854555271", "patch": "@@ -2,6 +2,8 @@\n \n use super::*;\n \n+use std::marker::PhantomData;\n+\n macro_rules! define_handles {\n     (\n         'owned: $($oty:ident,)*\n@@ -45,20 +47,25 @@ macro_rules! define_handles {\n \n         $(\n             #[repr(C)]\n-            pub(crate) struct $oty(handle::Handle);\n-            impl !Send for $oty {}\n-            impl !Sync for $oty {}\n+            pub(crate) struct $oty {\n+                handle: handle::Handle,\n+                // Prevent Send and Sync impls\n+                _marker: PhantomData<*mut ()>,\n+            }\n \n             // Forward `Drop::drop` to the inherent `drop` method.\n             impl Drop for $oty {\n                 fn drop(&mut self) {\n-                    $oty(self.0).drop();\n+                    $oty {\n+                        handle: self.handle,\n+                        _marker: PhantomData,\n+                    }.drop();\n                 }\n             }\n \n             impl<S> Encode<S> for $oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    let handle = self.0;\n+                    let handle = self.handle;\n                     mem::forget(self);\n                     handle.encode(w, s);\n                 }\n@@ -74,7 +81,7 @@ macro_rules! define_handles {\n \n             impl<S> Encode<S> for &$oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -88,7 +95,7 @@ macro_rules! define_handles {\n \n             impl<S> Encode<S> for &mut $oty {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -113,21 +120,26 @@ macro_rules! define_handles {\n \n             impl<S> DecodeMut<'_, '_, S> for $oty {\n                 fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n-                    $oty(handle::Handle::decode(r, s))\n+                    $oty {\n+                        handle: handle::Handle::decode(r, s),\n+                        _marker: PhantomData,\n+                    }\n                 }\n             }\n         )*\n \n         $(\n             #[repr(C)]\n             #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-            pub(crate) struct $ity(handle::Handle);\n-            impl !Send for $ity {}\n-            impl !Sync for $ity {}\n+            pub(crate) struct $ity {\n+                handle: handle::Handle,\n+                // Prevent Send and Sync impls\n+                _marker: PhantomData<*mut ()>,\n+            }\n \n             impl<S> Encode<S> for $ity {\n                 fn encode(self, w: &mut Writer, s: &mut S) {\n-                    self.0.encode(w, s);\n+                    self.handle.encode(w, s);\n                 }\n             }\n \n@@ -149,7 +161,10 @@ macro_rules! define_handles {\n \n             impl<S> DecodeMut<'_, '_, S> for $ity {\n                 fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n-                    $ity(handle::Handle::decode(r, s))\n+                    $ity {\n+                        handle: handle::Handle::decode(r, s),\n+                        _marker: PhantomData,\n+                    }\n                 }\n             }\n         )*"}, {"sha": "06f76d2fc9140aa903bc91f36c7d12cfc63e16ec", "filename": "library/proc_macro/src/bridge/closure.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclosure.rs?ref=ec7efa75f90884f1c9c242d5654c3bb854555271", "patch": "@@ -6,14 +6,12 @@ use std::marker::PhantomData;\n pub struct Closure<'a, A, R> {\n     call: unsafe extern \"C\" fn(*mut Env, A) -> R,\n     env: *mut Env,\n-    _marker: PhantomData<&'a mut ()>,\n+    // Ensure Closure is !Send and !Sync\n+    _marker: PhantomData<*mut &'a mut ()>,\n }\n \n struct Env;\n \n-impl<'a, A, R> !Sync for Closure<'a, A, R> {}\n-impl<'a, A, R> !Send for Closure<'a, A, R> {}\n-\n impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {\n     fn from(f: &'a mut F) -> Self {\n         unsafe extern \"C\" fn call<A, R, F: FnMut(A) -> R>(env: *mut Env, arg: A) -> R {"}, {"sha": "d1f7d84991d660c88425fc6b18a9648f593d9c46", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7efa75f90884f1c9c242d5654c3bb854555271/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=ec7efa75f90884f1c9c242d5654c3bb854555271", "patch": "@@ -220,6 +220,8 @@ use rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n /// then passes it to the client through the function pointer in the `run`\n /// field of `client::Client`. The client holds its copy of the `Bridge`\n /// in TLS during its execution (`Bridge::{enter, with}` in `client.rs`).\n+// Note: Bridge is !Send and !Sync due to containg a `Closure`. If this\n+// ever changes, make sure to preserve the !Send and !Sync property.\n #[repr(C)]\n pub struct Bridge<'a> {\n     /// Reusable buffer (only `clear`-ed, never shrunk), primarily\n@@ -233,9 +235,6 @@ pub struct Bridge<'a> {\n     force_show_panics: bool,\n }\n \n-impl<'a> !Sync for Bridge<'a> {}\n-impl<'a> !Send for Bridge<'a> {}\n-\n #[forbid(unsafe_code)]\n #[allow(non_camel_case_types)]\n mod api_tags {"}]}