{"sha": "1e87c9f8baef4b132d9956497569839b20a309e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODdjOWY4YmFlZjRiMTMyZDk5NTY0OTc1Njk4MzliMjBhMzA5ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T11:23:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T11:23:47Z"}, "message": "Auto merge of #1390 - RalfJung:conc, r=RalfJung\n\nMake spin_loop yield, and a panicking thread test\n\n@vakaras agreed it would make sense to make `spin_loop` yield, so this implements that.\n\nAlso add a test for a panic being raised in one thread, caught by the panic machinery, and then expose through the join handle. Miraculously, that just works. :)", "tree": {"sha": "49fb0fd997be5b5a9bb880721d74e1c16361b233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49fb0fd997be5b5a9bb880721d74e1c16361b233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e87c9f8baef4b132d9956497569839b20a309e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e87c9f8baef4b132d9956497569839b20a309e7", "html_url": "https://github.com/rust-lang/rust/commit/1e87c9f8baef4b132d9956497569839b20a309e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e87c9f8baef4b132d9956497569839b20a309e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec526478ff7bb012844f11fe6c7be621823a301", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec526478ff7bb012844f11fe6c7be621823a301", "html_url": "https://github.com/rust-lang/rust/commit/9ec526478ff7bb012844f11fe6c7be621823a301"}, {"sha": "6b18f6e10602b5ea08fbd94c5e10396f984d8174", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b18f6e10602b5ea08fbd94c5e10396f984d8174", "html_url": "https://github.com/rust-lang/rust/commit/6b18f6e10602b5ea08fbd94c5e10396f984d8174"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "25aece5989b922d212f1349c9315ac7b91d3ed30", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -434,7 +434,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Architecture-specific shims\n-            \"llvm.x86.sse2.pause\" if this.tcx.sess.target.target.arch == \"x86\" || this.tcx.sess.target.target.arch == \"x86_64\" => {}\n+            \"llvm.x86.sse2.pause\" if this.tcx.sess.target.target.arch == \"x86\" || this.tcx.sess.target.target.arch == \"x86_64\" => {\n+                this.sched_yield()?;\n+            }\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.target.target_os.as_str() {"}, {"sha": "3677960fd8777771a2a4516853b977cdb6af7b94", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -98,6 +98,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(stack_size, dest)?;\n             }\n \n+            // Threading\n+            \"pthread_setname_np\" => {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                this.pthread_setname_np(ptr)?;\n+            }\n+\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"mmap\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {"}, {"sha": "ac1bb39a69828ba1de76a8ed568840d11d9b351e", "filename": "src/shims/thread.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -95,6 +95,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         _arg5: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        this.assert_target_os(\"linux\", \"prctl\");\n \n         let option = this.read_scalar(option)?.to_i32()?;\n         if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n@@ -118,6 +119,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n+    fn pthread_setname_np(\n+        &mut self,\n+        ptr: Scalar<Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"macos\", \"pthread_setname_np\");\n+\n+        let name = this.memory.read_c_str(ptr)?.to_owned();\n+        this.set_active_thread_name(name)?;\n+\n+        Ok(())\n+    }\n+\n     fn sched_yield(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}, {"sha": "2119175e12cc9164c9d67999548352588a83d459", "filename": "src/thread.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -134,16 +134,20 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n         }\n         false\n     }\n+\n+    /// Get the name of the current thread, or `<unnamed>` if it was not set.\n+    fn thread_name(&self) -> &[u8] {\n+        if let Some(ref thread_name) = self.thread_name {\n+            thread_name\n+        } else {\n+            b\"<unnamed>\"\n+        }\n+    }\n }\n \n impl<'mir, 'tcx> std::fmt::Debug for Thread<'mir, 'tcx> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        if let Some(ref name) = self.thread_name {\n-            write!(f, \"{}\", String::from_utf8_lossy(name))?;\n-        } else {\n-            write!(f, \"<unnamed>\")?;\n-        }\n-        write!(f, \"({:?}, {:?})\", self.state, self.join_status)\n+        write!(f, \"{}({:?}, {:?})\", String::from_utf8_lossy(self.thread_name()), self.state, self.join_status)\n     }\n }\n \n@@ -314,11 +318,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n \n     /// Get the name of the active thread.\n     fn get_thread_name(&self) -> &[u8] {\n-        if let Some(ref thread_name) = self.active_thread_ref().thread_name {\n-            thread_name\n-        } else {\n-            b\"<unnamed>\"\n-        }\n+        self.active_thread_ref().thread_name()\n     }\n \n     /// Allocate a new blockset id."}, {"sha": "c22506821f5481f50d3b3a8a2c0fe13cea11c328", "filename": "tests/run-pass/concurrency/simple.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -49,6 +49,25 @@ fn create_move_out() {\n     assert_eq!(result.len(), 6);\n }\n \n+fn panic() {\n+    let result = thread::spawn(|| {\n+        panic!(\"Hello!\")\n+    })\n+    .join()\n+    .unwrap_err();\n+    let msg = result.downcast_ref::<&'static str>().unwrap();\n+    assert_eq!(*msg, \"Hello!\");\n+}\n+\n+fn panic_named() {\n+    thread::Builder::new().name(\"childthread\".to_string()).spawn(move || {\n+        panic!(\"Hello, world!\");\n+    })\n+    .unwrap()\n+    .join()\n+    .unwrap_err();\n+}\n+\n fn main() {\n     create_and_detach();\n     create_and_join();\n@@ -58,4 +77,6 @@ fn main() {\n     create_nested_and_join();\n     create_move_in();\n     create_move_out();\n+    panic();\n+    panic_named();\n }"}, {"sha": "e52d07cdc73f7434d8d6ca490dae799a1a2f72db", "filename": "tests/run-pass/concurrency/simple.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -1,2 +1,4 @@\n warning: thread support is experimental. For example, Miri does not detect data races yet.\n \n+thread '<unnamed>' panicked at 'Hello!', $DIR/simple.rs:54:9\n+thread 'childthread' panicked at 'Hello, world!', $DIR/simple.rs:64:9"}, {"sha": "8b8594d4df69dc32a124f609e31c83dc5ba926bb", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -1,7 +1,8 @@\n-#![feature(rustc_private)]\n+#![feature(rustc_private, renamed_spin_loop)]\n \n use std::sync::{Mutex, TryLockError};\n use std::sync::atomic;\n+use std::hint;\n \n fn main() {\n     test_mutex_stdlib();\n@@ -56,6 +57,7 @@ impl<T> TryLockErrorExt<T> for TryLockError<T> {\n \n fn test_spin_loop_hint() {\n     atomic::spin_loop_hint();\n+    hint::spin_loop();\n }\n \n fn test_thread_yield_now() {"}, {"sha": "c667aab6bb5fdbd1f478b6f9a3dc8ebd401e1cc8", "filename": "tests/run-pass/transmute_fat2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat2.rs?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -8,5 +8,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n+    // This created a slice with length 0, so the following will fail the bounds check.\n     bad[0];\n }"}, {"sha": "2539e58814d6b833010b59851b04516f1757cd33", "filename": "tests/run-pass/transmute_fat2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Ftransmute_fat2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e87c9f8baef4b132d9956497569839b20a309e7/tests%2Frun-pass%2Ftransmute_fat2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat2.stderr?ref=1e87c9f8baef4b132d9956497569839b20a309e7", "patch": "@@ -1 +1 @@\n-thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', $DIR/transmute_fat2.rs:11:5\n+thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', $DIR/transmute_fat2.rs:12:5"}]}