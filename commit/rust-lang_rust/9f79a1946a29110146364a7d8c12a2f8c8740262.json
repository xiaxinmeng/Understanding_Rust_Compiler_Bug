{"sha": "9f79a1946a29110146364a7d8c12a2f8c8740262", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzlhMTk0NmEyOTExMDE0NjM2NGE3ZDhjMTJhMmY4Yzg3NDAyNjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-20T22:58:25Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-20T22:58:25Z"}, "message": "Allow `Size` to be any valid `u64`", "tree": {"sha": "719050696533300c5a2422c3298af0ffe73e2ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719050696533300c5a2422c3298af0ffe73e2ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f79a1946a29110146364a7d8c12a2f8c8740262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f79a1946a29110146364a7d8c12a2f8c8740262", "html_url": "https://github.com/rust-lang/rust/commit/9f79a1946a29110146364a7d8c12a2f8c8740262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f79a1946a29110146364a7d8c12a2f8c8740262/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "html_url": "https://github.com/rust-lang/rust/commit/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "7f593aff21d2b75ebb0e7a2b04277ebcab35fb5c", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9f79a1946a29110146364a7d8c12a2f8c8740262/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f79a1946a29110146364a7d8c12a2f8c8740262/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=9f79a1946a29110146364a7d8c12a2f8c8740262", "patch": "@@ -232,10 +232,7 @@ impl Size {\n         Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n     }\n \n-    pub fn from_bytes(bytes: u64) -> Size {\n-        if bytes >= (1 << 61) {\n-            panic!(\"Size::from_bytes: {} bytes in bits doesn't fit in u64\", bytes)\n-        }\n+    pub const fn from_bytes(bytes: u64) -> Size {\n         Size {\n             raw: bytes\n         }\n@@ -246,7 +243,9 @@ impl Size {\n     }\n \n     pub fn bits(self) -> u64 {\n-        self.bytes() * 8\n+        self.bytes().checked_mul(8).unwrap_or_else(|| {\n+            panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", self.bytes())\n+        })\n     }\n \n     pub fn abi_align(self, align: Align) -> Size {\n@@ -262,9 +261,7 @@ impl Size {\n     pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: C) -> Option<Size> {\n         let dl = cx.data_layout();\n \n-        // Each Size is less than dl.obj_size_bound(), so the sum is\n-        // also less than 1 << 62 (and therefore can't overflow).\n-        let bytes = self.bytes() + offset.bytes();\n+        let bytes = self.bytes().checked_add(offset.bytes())?;\n \n         if bytes < dl.obj_size_bound() {\n             Some(Size::from_bytes(bytes))\n@@ -276,11 +273,11 @@ impl Size {\n     pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: C) -> Option<Size> {\n         let dl = cx.data_layout();\n \n-        match self.bytes().checked_mul(count) {\n-            Some(bytes) if bytes < dl.obj_size_bound() => {\n-                Some(Size::from_bytes(bytes))\n-            }\n-            _ => None\n+        let bytes = self.bytes().checked_mul(count)?;\n+        if bytes < dl.obj_size_bound() {\n+            Some(Size::from_bytes(bytes))\n+        } else {\n+            None\n         }\n     }\n }\n@@ -291,19 +288,25 @@ impl Size {\n impl Add for Size {\n     type Output = Size;\n     fn add(self, other: Size) -> Size {\n-        // Each Size is less than 1 << 61, so the sum is\n-        // less than 1 << 62 (and therefore can't overflow).\n-        Size::from_bytes(self.bytes() + other.bytes())\n+        Size::from_bytes(self.bytes().checked_add(other.bytes()).unwrap_or_else(|| {\n+            panic!(\"Size::add: {} + {} doesn't fit in u64\", self.bytes(), other.bytes())\n+        }))\n     }\n }\n \n impl Sub for Size {\n     type Output = Size;\n     fn sub(self, other: Size) -> Size {\n-        // Each Size is less than 1 << 61, so an underflow\n-        // would result in a value larger than 1 << 61,\n-        // which Size::from_bytes will catch for us.\n-        Size::from_bytes(self.bytes() - other.bytes())\n+        Size::from_bytes(self.bytes().checked_sub(other.bytes()).unwrap_or_else(|| {\n+            panic!(\"Size::sub: {} - {} would result in negative size\", self.bytes(), other.bytes())\n+        }))\n+    }\n+}\n+\n+impl Mul<Size> for u64 {\n+    type Output = Size;\n+    fn mul(self, size: Size) -> Size {\n+        size * self\n     }\n }\n "}]}