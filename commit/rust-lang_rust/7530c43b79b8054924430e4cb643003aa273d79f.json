{"sha": "7530c43b79b8054924430e4cb643003aa273d79f", "node_id": "C_kwDOAAsO6NoAKDc1MzBjNDNiNzliODA1NDkyNDQzMGU0Y2I2NDMwMDNhYTI3M2Q3OWY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-10-18T15:36:45Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-05T17:40:26Z"}, "message": "postpone evaluation of constants whose substs depend on inference vars or regions", "tree": {"sha": "8bbfb302f0f64f5b11c74575c0430c91820d20a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bbfb302f0f64f5b11c74575c0430c91820d20a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7530c43b79b8054924430e4cb643003aa273d79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7530c43b79b8054924430e4cb643003aa273d79f", "html_url": "https://github.com/rust-lang/rust/commit/7530c43b79b8054924430e4cb643003aa273d79f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7530c43b79b8054924430e4cb643003aa273d79f/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ec5680c982e665e028cbec9219d7849a9535da", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ec5680c982e665e028cbec9219d7849a9535da", "html_url": "https://github.com/rust-lang/rust/commit/87ec5680c982e665e028cbec9219d7849a9535da"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "4873d3a6421f59312ecd0f13be463c078b8cdbf6", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7530c43b79b8054924430e4cb643003aa273d79f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7530c43b79b8054924430e4cb643003aa273d79f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7530c43b79b8054924430e4cb643003aa273d79f", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -1584,10 +1585,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        let mut original_values = OriginalQueryValues::default();\n-        let canonical = self.canonicalize_query((param_env, unevaluated), &mut original_values);\n+        let param_env = self.tcx.erase_regions(param_env);\n+        let mut substs = unevaluated.substs(self.tcx);\n+        substs = self.tcx.erase_regions(substs);\n+        substs = self.resolve_vars_if_possible(substs);\n+\n+        // Postpone the evaluation of constants whose substs depend on inference\n+        // variables\n+        if substs.has_infer_types_or_consts() {\n+            return Err(ErrorHandled::TooGeneric);\n+        }\n+\n+        let unevaluated = ty::Unevaluated {\n+            def: unevaluated.def,\n+            substs_: Some(substs),\n+            promoted: unevaluated.promoted,\n+        };\n \n-        let (param_env, unevaluated) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n         self.tcx.const_eval_resolve(param_env, unevaluated, span)"}]}