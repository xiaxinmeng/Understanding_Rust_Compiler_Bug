{"sha": "113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExM2Q3ZTQ0YjdkNGRlZTFiZTZhM2Q5ZmQ4YzcyNGEzZmZmMzdiMjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-11T08:41:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-11T08:41:54Z"}, "message": "Merge #2203\n\n2203: Hover for builtins r=matklad a=kjeremy\n\nFixes #2192 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "6b8663b1c506812457a3df72e08e214fb757d6e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b8663b1c506812457a3df72e08e214fb757d6e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdyR7SCRBK7hj4Ov3rIwAAdHIIAIaXPBIS68RhWKp+PFz435L2\nSWKiUUIlXfBPvrV+kcABQXyeK9W7G4woainyQl1oHI7iA6yUJ3lH4WxWIXNq60KT\nKlaXG3eYN39jE6iobpz+tPBf93qy5iEPWPo8qVu1K3/9Oe+UiIprbGm6BTDUOW/x\n0Qk+8QoQDnL7YzhxKwK6rMCU0PrvgzK0aSNkiRMCbPDKjoVkJUp3sxQOezJFAI9c\nCzDN4UDHp1dgs57Gbv2cunzjmPzQnww2/Kz9C9SakkE87pJU0+QWFGlzn7vTr+dg\nbX+C/4HHCsmh55hjN9NrJdnBBsS91GZ1psBzMqJNAFIFnTV7rU9CW2OtCDewCuE=\n=KPOR\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b8663b1c506812457a3df72e08e214fb757d6e7\nparent 8f98f0730394cd30031f8c56132247829166bf18\nparent 3188c1451a6f1237859dcb813debef9fa537195c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573461714 +0000\ncommitter GitHub <noreply@github.com> 1573461714 +0000\n\nMerge #2203\n\n2203: Hover for builtins r=matklad a=kjeremy\n\nFixes #2192 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "html_url": "https://github.com/rust-lang/rust/commit/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f98f0730394cd30031f8c56132247829166bf18", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f98f0730394cd30031f8c56132247829166bf18", "html_url": "https://github.com/rust-lang/rust/commit/8f98f0730394cd30031f8c56132247829166bf18"}, {"sha": "3188c1451a6f1237859dcb813debef9fa537195c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3188c1451a6f1237859dcb813debef9fa537195c", "html_url": "https://github.com/rust-lang/rust/commit/3188c1451a6f1237859dcb813debef9fa537195c"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "244c6581454b784b9d0c98715a8690c404008c9f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay};\n+use hir::{Adt, BuiltinType, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n@@ -117,27 +117,27 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 hir::AssocItem::Const(it) => from_def_source(db, it),\n                 hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n             }),\n-            Some(Def(it)) => {\n-                match it {\n-                    hir::ModuleDef::Module(it) => {\n-                        if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n-                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                        }\n+            Some(Def(it)) => match it {\n+                hir::ModuleDef::Module(it) => {\n+                    if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                     }\n-                    hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::BuiltinType(_) => {\n-                        // FIXME: hover for builtin Type ?\n+                }\n+                hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::BuiltinType(it) => {\n+                    if let Some(b) = BuiltinType::ALL.iter().find(|(_, ty)| *ty == it) {\n+                        res.extend(Some(b.0.to_string()))\n                     }\n                 }\n-            }\n+            },\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {\n                     res.extend(match adt_def {\n@@ -722,4 +722,16 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_tuple_field() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct TS(String, i32<|>);\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}