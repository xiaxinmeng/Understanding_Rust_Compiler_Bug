{"sha": "2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzdhOGFhN2E0NGQ3NmIzMzQ1Yjk4ZjM5NGY2ZDI3NDRmM2E5Y2M=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-01T14:17:50Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-02T08:51:27Z"}, "message": "syntax: improve parameter without type suggestions\n\nThis commit improves the suggestions provided when function parameters\ndo not have types:\n\n- A new suggestion is added for arbitrary self types, which suggests\nadding `self: ` before the type.\n\n- Existing suggestions are now provided when a `<` is found where a `:`\nwas expected (previously only `,` and `)` or trait items), this gives\nsuggestions in the case where the unnamed parameter type is generic\nin a free function.\n\n- The suggestion that a type name be provided (e.g. `fn foo(HashMap<u32>)`\n-> `fn foo(HashMap: TypeName<u32>)`) will no longer occur when a `<` was\nfound instead of `:`.\n\n- The ident will not be used for recovery when a `<` was found instead\nof `:`.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "ee4189157d797893692099a1220c87a74b7973cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee4189157d797893692099a1220c87a74b7973cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl2UZRAACgkQJZLnbIc4\nH9kOBQ//RXq4Q8KXTHE8edDwy6ZbwxfK9rO6RO/9p6Q07Pd9DeUPTX5VwwB6oakJ\nD1qZnMqKsn5slP9+pmYl6z0hwlXr5QRdEJoaTe4pbfouLY0wRObJ6lJ7Y7zAgqoj\nGmxmLbCJMDiarYbBu5xU3Juiz90pZX1ZhRgmg7MrVctpSXeNJYJOaBSIthiN2UBW\nqtj5S6gWHqluvurGCuJ285pOMaGFtTLf3jQqKGxGjyeEdbnYcDPRpyZXm34+P+kZ\nKQytIjQn3aQNQs5L22EBVT/VIz+i8xmI+MXcW0V67+cGEGxlHzkg35RlNzeEB97q\nWY+xck/XcSlBOmhulNW1PDEqY4ASESf7qv27RsxqSRL//PdpejQt7CoBqB27n76l\nT6FyQLNmrcJXxQWgpCS4uCUs90Oh+qmnfITBOWtSumlejJj0tIcsQvMNzzvjGcRe\nvwhH0JamFJmwPF0EchfIfawGGgly4Fqk3dvbFCpFzsWLtXHQMgS+A7PiFK3AAlRi\nRceTQStFVJkp146vzlQtBArhgkm8jTPWfZz9LXG59P8GH7gAYTrNT4FWtbsP1dfe\n7W+agSQNo3DH00n++InxI2zLGXKDNm50KgTzUawe7jsLWV07G8pxLc7lKDFcLytP\n3R5TVQ7ILaS7rbJpbVWWyco2lNqklw+yIC3gBEanvDE4Rj1Amu4=\n=MP6p\n-----END PGP SIGNATURE-----", "payload": "tree ee4189157d797893692099a1220c87a74b7973cc\nparent ff191b54cc8a95e3bfc7ae5f8f9984f934758165\nauthor David Wood <david@davidtw.co> 1569939470 +0100\ncommitter David Wood <david@davidtw.co> 1570006287 +0100\n\nsyntax: improve parameter without type suggestions\n\nThis commit improves the suggestions provided when function parameters\ndo not have types:\n\n- A new suggestion is added for arbitrary self types, which suggests\nadding `self: ` before the type.\n\n- Existing suggestions are now provided when a `<` is found where a `:`\nwas expected (previously only `,` and `)` or trait items), this gives\nsuggestions in the case where the unnamed parameter type is generic\nin a free function.\n\n- The suggestion that a type name be provided (e.g. `fn foo(HashMap<u32>)`\n-> `fn foo(HashMap: TypeName<u32>)`) will no longer occur when a `<` was\nfound instead of `:`.\n\n- The ident will not be used for recovery when a `<` was found instead\nof `:`.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "html_url": "https://github.com/rust-lang/rust/commit/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff191b54cc8a95e3bfc7ae5f8f9984f934758165", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff191b54cc8a95e3bfc7ae5f8f9984f934758165", "html_url": "https://github.com/rust-lang/rust/commit/ff191b54cc8a95e3bfc7ae5f8f9984f934758165"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "4ad0bd06d99aeb68129a470a8b7e13a7c03806a1", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -1220,6 +1220,7 @@ impl<'a> Parser<'a> {\n         err: &mut DiagnosticBuilder<'_>,\n         pat: P<ast::Pat>,\n         require_name: bool,\n+        is_self_allowed: bool,\n         is_trait_item: bool,\n     ) -> Option<Ident> {\n         // If we find a pattern followed by an identifier, it could be an (incorrect)\n@@ -1241,22 +1242,37 @@ impl<'a> Parser<'a> {\n             if require_name && (\n                 is_trait_item ||\n                 self.token == token::Comma ||\n+                self.token == token::Lt ||\n                 self.token == token::CloseDelim(token::Paren)\n-            ) { // `fn foo(a, b) {}` or `fn foo(usize, usize) {}`\n-                err.span_suggestion(\n-                    pat.span,\n-                    \"if this was a parameter name, give it a type\",\n-                    format!(\"{}: TypeName\", ident),\n-                    Applicability::HasPlaceholders,\n-                );\n+            ) { // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n+                if is_self_allowed {\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"if this is a `self` type, give it a parameter name\",\n+                        format!(\"self: {}\", ident),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n+                // `fn foo(HashMap: TypeName<u32>)`.\n+                if self.token != token::Lt {\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"if this was a parameter name, give it a type\",\n+                        format!(\"{}: TypeName\", ident),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                }\n                 err.span_suggestion(\n                     pat.span,\n                     \"if this is a type, explicitly ignore the parameter name\",\n                     format!(\"_: {}\", ident),\n                     Applicability::MachineApplicable,\n                 );\n                 err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-                return Some(ident);\n+\n+                // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n+                return if self.token == token::Lt { None } else { Some(ident) };\n             }\n         }\n         None"}, {"sha": "d4a6e9f6c6bc8f4fa1d9ccd10a024a4151c5d9df", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -1212,6 +1212,7 @@ impl<'a> Parser<'a> {\n                     &mut err,\n                     pat,\n                     is_name_required,\n+                    is_self_allowed,\n                     is_trait_item,\n                 ) {\n                     err.emit();"}, {"sha": "3fcf41a9a60a2f2037b8f6339db1fd95fc214442", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -5,6 +5,10 @@ LL |     fn foo(i32);\n    |               ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn foo(self: i32);\n+   |            ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL |     fn foo(i32: TypeName);\n@@ -21,6 +25,10 @@ LL |     fn bar_with_default_impl(String, String) {}\n    |                                    ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn bar_with_default_impl(self: String, String) {}\n+   |                              ^^^^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String: TypeName, String) {}"}, {"sha": "2191e31ad1ff28d2b20860127aaf3b4c50c3faa5", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -3,6 +3,12 @@ error: expected one of `:`, `@`, or `|`, found `<`\n    |\n LL | fn a(B<) {}\n    |       ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn a(_: B<) {}\n+   |      ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e4248f3b974b97df583223410e27842689e378e6", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -5,6 +5,10 @@ LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n    |                                         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | trait Trait2015 { fn foo(#[allow(C)] self: i32); }\n+   |                                      ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32: TypeName); }"}, {"sha": "8d4a66f142d2cf925c9416528ca4fb419d4ab284", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -3,6 +3,12 @@ error: expected one of `:`, `@`, or `|`, found `<`\n    |\n LL | fn foo(Option<i32>, String) {}\n    |              ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn foo(_: Option<i32>, String) {}\n+   |        ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27"}, {"sha": "128d5e85c22c87329d4dfcaf18fb806c82282ca3", "filename": "src/test/ui/suggestions/issue-64252-self-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -0,0 +1,14 @@\n+// This test checks that a suggestion to add a `self: ` parameter name is provided\n+// to functions where this is applicable.\n+\n+pub fn foo(Box<Self>) { }\n+//~^ ERROR expected one of `:`, `@`, or `|`, found `<`\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn bar(Box<Self>) { }\n+    //~^ ERROR expected one of `:`, `@`, or `|`, found `<`\n+}\n+\n+fn main() { }"}, {"sha": "fa28a0d684e5eebdb31f5b0bfc156cb2f18d63d8", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2537a8aa7a44d76b3345b98f394f6d2744f3a9cc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=2537a8aa7a44d76b3345b98f394f6d2744f3a9cc", "patch": "@@ -0,0 +1,30 @@\n+error: expected one of `:`, `@`, or `|`, found `<`\n+  --> $DIR/issue-64252-self-type.rs:4:15\n+   |\n+LL | pub fn foo(Box<Self>) { }\n+   |               ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | pub fn foo(_: Box<Self>) { }\n+   |            ^^^^^^\n+\n+error: expected one of `:`, `@`, or `|`, found `<`\n+  --> $DIR/issue-64252-self-type.rs:10:15\n+   |\n+LL |     fn bar(Box<Self>) { }\n+   |               ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn bar(self: Box<Self>) { }\n+   |            ^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn bar(_: Box<Self>) { }\n+   |            ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}