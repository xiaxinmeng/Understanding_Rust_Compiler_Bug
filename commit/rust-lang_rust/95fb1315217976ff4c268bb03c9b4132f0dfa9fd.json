{"sha": "95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZmIxMzE1MjE3OTc2ZmY0YzI2OGJiMDNjOWI0MTMyZjBkZmE5ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T06:35:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T06:35:42Z"}, "message": "Auto merge of #86904 - m-ou-se:prelude-collision-check-trait, r=nikomatsakis\n\nCheck FromIterator trait impl in prelude collision check.\n\nFixes #86902.", "tree": {"sha": "3365b878b561fcc0d6a53b7cff1b28198115bd02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3365b878b561fcc0d6a53b7cff1b28198115bd02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "html_url": "https://github.com/rust-lang/rust/commit/95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b090cd1ea6a20d16e467c723fd0dd9f1d0adf812", "url": "https://api.github.com/repos/rust-lang/rust/commits/b090cd1ea6a20d16e467c723fd0dd9f1d0adf812", "html_url": "https://github.com/rust-lang/rust/commit/b090cd1ea6a20d16e467c723fd0dd9f1d0adf812"}, {"sha": "2083207536e710071475dc489f155c574951e3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2083207536e710071475dc489f155c574951e3fd", "html_url": "https://github.com/rust-lang/rust/commit/2083207536e710071475dc489f155c574951e3fd"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "5e9a2904b7c8f9171133c34723b97698f550832a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "patch": "@@ -155,6 +155,7 @@ symbols! {\n         FormatSpec,\n         Formatter,\n         From,\n+        FromIterator,\n         Future,\n         FxHashMap,\n         FxHashSet,"}, {"sha": "f13e23914f7ab54b35a31737c680405943c000a4", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "patch": "@@ -4,11 +4,13 @@ use hir::ItemKind;\n use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::check::{\n     method::probe::{self, Pick},\n@@ -206,6 +208,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        // For from_iter, check if the type actually implements FromIterator.\n+        // If we know it does not, we don't need to warn.\n+        if method_name.name == sym::from_iter {\n+            if let Some(trait_def_id) = self.tcx.get_diagnostic_item(sym::FromIterator) {\n+                if !self\n+                    .infcx\n+                    .type_implements_trait(\n+                        trait_def_id,\n+                        self_ty,\n+                        InternalSubsts::empty(),\n+                        self.param_env,\n+                    )\n+                    .may_apply()\n+                {\n+                    return;\n+                }\n+            }\n+        }\n+\n         // No need to lint if this is an inherent method called on a specific type, like `Vec::foo(...)`,\n         // since such methods take precedence over trait methods.\n         if matches!(pick.kind, probe::PickKind::InherentImplPick) {"}, {"sha": "7f87ead6feed6c132faec40398c48dc1912591e6", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "patch": "@@ -89,6 +89,7 @@\n                over elements of type `{A}`\",\n     label = \"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\"\n )]\n+#[rustc_diagnostic_item = \"FromIterator\"]\n pub trait FromIterator<A>: Sized {\n     /// Creates a value from an iterator.\n     ///"}, {"sha": "247d5884b868af877e91fc91d1d46621263c3521", "filename": "src/test/ui/rust-2021/future-prelude-collision-unneeded.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb1315217976ff4c268bb03c9b4132f0dfa9fd/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs?ref=95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "patch": "@@ -11,8 +11,50 @@ impl S {\n     }\n }\n \n-// See https://github.com/rust-lang/rust/issues/86633\n+struct X;\n+\n+trait Hey {\n+    fn from_iter(_: i32) -> Self;\n+}\n+\n+impl Hey for X {\n+    fn from_iter(_: i32) -> Self {\n+        X\n+    }\n+}\n+\n+struct Y<T>(T);\n+\n+impl Hey for Y<i32> {\n+    fn from_iter(_: i32) -> Self {\n+        Y(0)\n+    }\n+}\n+\n+struct Z<T>(T);\n+\n+impl Hey for Z<i32> {\n+    fn from_iter(_: i32) -> Self {\n+        Z(0)\n+    }\n+}\n+\n+impl std::iter::FromIterator<u32> for Z<u32> {\n+    fn from_iter<T: IntoIterator<Item = u32>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n fn main() {\n+    // See https://github.com/rust-lang/rust/issues/86633\n     let s = S;\n     let s2 = s.try_into();\n+\n+    // Check that we do not issue suggestions for types that do not implement `FromIter`.\n+    //\n+    // See https://github.com/rust-lang/rust/issues/86902\n+    X::from_iter(1);\n+    Y::from_iter(1);\n+    Y::<i32>::from_iter(1);\n+    Z::<i32>::from_iter(1);\n }"}]}