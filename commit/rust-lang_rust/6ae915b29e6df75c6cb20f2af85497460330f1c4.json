{"sha": "6ae915b29e6df75c6cb20f2af85497460330f1c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZTkxNWIyOWU2ZGY3NWM2Y2IyMGYyYWY4NTQ5NzQ2MDMzMGYxYzQ=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-17T19:28:05Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-17T19:28:05Z"}, "message": "clarify use of Unpin and pinning types", "tree": {"sha": "f4822b23514a777b7fe134b028963aa2516b3528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4822b23514a777b7fe134b028963aa2516b3528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae915b29e6df75c6cb20f2af85497460330f1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae915b29e6df75c6cb20f2af85497460330f1c4", "html_url": "https://github.com/rust-lang/rust/commit/6ae915b29e6df75c6cb20f2af85497460330f1c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae915b29e6df75c6cb20f2af85497460330f1c4/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03530fa5e6a0b039e1a5f96dc164968a36017b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/03530fa5e6a0b039e1a5f96dc164968a36017b6b", "html_url": "https://github.com/rust-lang/rust/commit/03530fa5e6a0b039e1a5f96dc164968a36017b6b"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "83a50e6695e83dfbc01b7238e1eb06e23bfb9951", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae915b29e6df75c6cb20f2af85497460330f1c4/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae915b29e6df75c6cb20f2af85497460330f1c4/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6ae915b29e6df75c6cb20f2af85497460330f1c4", "patch": "@@ -610,10 +610,10 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n ///\n /// Instead it can be used to prevent moves through the type system,\n /// by controlling the behavior of special pointer types like [`PinMut`],\n-/// which \"pin\" the type in place by not allowing it to be moved out via mutable references.\n+/// which \"pin\" the type in place by not allowing it to be moved out of them.\n ///\n /// Implementing this trait lifts the restrictions of pinning off a type,\n-/// which then allows it to move out of said pointers, with functions such as [`replace`].\n+/// which then allows it to move out with functions such as [`replace`].\n ///\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n@@ -623,6 +623,8 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n ///\n /// let mut string = \"this\".to_string();\n /// let mut pinned_string = PinMut::new(&mut string);\n+///\n+/// // dereferencing the pointer mutably is only possible because String implements Unpin\n /// replace(&mut *pinned_string, \"other\".to_string());\n /// ```\n ///"}]}