{"sha": "871ad80bb02af6d8fbf3f5c7291916b817c75168", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWFkODBiYjAyYWY2ZDhmYmYzZjVjNzI5MTkxNmI4MTdjNzUxNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-19T17:37:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-19T17:37:04Z"}, "message": "Auto merge of #7690 - Jarcho:while_loop_by_ref, r=xFrednet\n\nChange `while_let_on_iterator` suggestion to use `by_ref()`\n\nIt came up in the discussion #7659 that suggesting `iter.by_ref()` is a clearer suggestion than `&mut iter`. I personally think they're equivalent, but if `by_ref()` is clearer to people then that should be the suggestion.\n\nchangelog: Change `while_let_on_iterator` suggestion when using `&mut` to use `by_ref()`", "tree": {"sha": "09304fe155b48f9bf90266bf6f8b5c35ad1a93bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09304fe155b48f9bf90266bf6f8b5c35ad1a93bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871ad80bb02af6d8fbf3f5c7291916b817c75168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871ad80bb02af6d8fbf3f5c7291916b817c75168", "html_url": "https://github.com/rust-lang/rust/commit/871ad80bb02af6d8fbf3f5c7291916b817c75168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871ad80bb02af6d8fbf3f5c7291916b817c75168/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59cd77710d73ba65d56f0c5c167ef503174a4826", "url": "https://api.github.com/repos/rust-lang/rust/commits/59cd77710d73ba65d56f0c5c167ef503174a4826", "html_url": "https://github.com/rust-lang/rust/commit/59cd77710d73ba65d56f0c5c167ef503174a4826"}, {"sha": "ee6a6b55c4281d2bdd78bc48eb507db7aa525cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6a6b55c4281d2bdd78bc48eb507db7aa525cf7", "html_url": "https://github.com/rust-lang/rust/commit/ee6a6b55c4281d2bdd78bc48eb507db7aa525cf7"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "9a3475c977ede46babf83863c91829a7e8e375ba", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/871ad80bb02af6d8fbf3f5c7291916b817c75168/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871ad80bb02af6d8fbf3f5c7291916b817c75168/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=871ad80bb02af6d8fbf3f5c7291916b817c75168", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::{symbol::sym, Span, Symbol};\n \n@@ -47,13 +47,8 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     // If the iterator is a field or the iterator is accessed after the loop is complete it needs to be\n     // borrowed mutably. TODO: If the struct can be partially moved from and the struct isn't used\n     // afterwards a mutable borrow of a field isn't necessary.\n-    let ref_mut = if !iter_expr.fields.is_empty() || needs_mutable_borrow(cx, &iter_expr, loop_expr) {\n-        if cx.typeck_results().node_type(iter_expr.hir_id).ref_mutability() == Some(Mutability::Mut) {\n-            // Reborrow for mutable references. It may not be possible to get a mutable reference here.\n-            \"&mut *\"\n-        } else {\n-            \"&mut \"\n-        }\n+    let by_ref = if !iter_expr.fields.is_empty() || needs_mutable_borrow(cx, &iter_expr, loop_expr) {\n+        \".by_ref()\"\n     } else {\n         \"\"\n     };\n@@ -65,7 +60,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         expr.span.with_hi(scrutinee_expr.span.hi()),\n         \"this loop could be written as a `for` loop\",\n         \"try\",\n-        format!(\"for {} in {}{}\", loop_var, ref_mut, iterator),\n+        format!(\"for {} in {}{}\", loop_var, iterator, by_ref),\n         applicability,\n     );\n }"}, {"sha": "f5a341909023ee3429e902862b3344c4e1cdc050", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/871ad80bb02af6d8fbf3f5c7291916b817c75168/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/871ad80bb02af6d8fbf3f5c7291916b817c75168/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=871ad80bb02af6d8fbf3f5c7291916b817c75168", "patch": "@@ -188,7 +188,7 @@ fn issue6491() {\n     // Used in outer loop, needs &mut\n     let mut it = 1..40;\n     while let Some(n) = it.next() {\n-        for m in &mut it {\n+        for m in it.by_ref() {\n             if m % 10 == 0 {\n                 break;\n             }\n@@ -219,7 +219,7 @@ fn issue6491() {\n \n         // Used after the loop, needs &mut.\n         let mut it = 1..40;\n-        for m in &mut it {\n+        for m in it.by_ref() {\n             if m % 10 == 0 {\n                 break;\n             }\n@@ -236,7 +236,7 @@ fn issue6231() {\n     let mut it = 1..40;\n     let mut opt = Some(0);\n     while let Some(n) = opt.take().or_else(|| it.next()) {\n-        for m in &mut it {\n+        for m in it.by_ref() {\n             if n % 10 == 0 {\n                 break;\n             }\n@@ -251,7 +251,7 @@ fn issue1924() {\n     impl<T: Iterator<Item = u32>> S<T> {\n         fn f(&mut self) -> Option<u32> {\n             // Used as a field.\n-            for i in &mut self.0 {\n+            for i in self.0.by_ref() {\n                 if !(3..=7).contains(&i) {\n                     return Some(i);\n                 }\n@@ -283,7 +283,7 @@ fn issue1924() {\n                 }\n             }\n             // This one is fine, a different field is borrowed\n-            for i in &mut self.0.0.0 {\n+            for i in self.0.0.0.by_ref() {\n                 if i == 1 {\n                     return self.0.1.take();\n                 } else {\n@@ -312,7 +312,7 @@ fn issue1924() {\n \n     // Needs &mut, field of the iterator is accessed after the loop\n     let mut it = S2(1..40, 0);\n-    for n in &mut it {\n+    for n in it.by_ref() {\n         if n == 0 {\n             break;\n         }\n@@ -324,7 +324,7 @@ fn issue7249() {\n     let mut it = 0..10;\n     let mut x = || {\n         // Needs &mut, the closure can be called multiple times\n-        for x in &mut it {\n+        for x in it.by_ref() {\n             if x % 2 == 0 {\n                 break;\n             }\n@@ -338,7 +338,7 @@ fn issue7510() {\n     let mut it = 0..10;\n     let it = &mut it;\n     // Needs to reborrow `it` as the binding isn't mutable\n-    for x in &mut *it {\n+    for x in it.by_ref() {\n         if x % 2 == 0 {\n             break;\n         }\n@@ -349,7 +349,7 @@ fn issue7510() {\n     let mut it = 0..10;\n     let it = S(&mut it);\n     // Needs to reborrow `it.0` as the binding isn't mutable\n-    for x in &mut *it.0 {\n+    for x in it.0.by_ref() {\n         if x % 2 == 0 {\n             break;\n         }"}, {"sha": "5e2fce4491af0956ff4ba97e6b96f9a85c230c35", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/871ad80bb02af6d8fbf3f5c7291916b817c75168/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/871ad80bb02af6d8fbf3f5c7291916b817c75168/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=871ad80bb02af6d8fbf3f5c7291916b817c75168", "patch": "@@ -46,7 +46,7 @@ error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:191:9\n    |\n LL |         while let Some(m) = it.next() {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in &mut it`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:202:5\n@@ -70,19 +70,19 @@ error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:222:9\n    |\n LL |         while let Some(m) = it.next() {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in &mut it`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:239:9\n    |\n LL |         while let Some(m) = it.next() {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in &mut it`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:254:13\n    |\n LL |             while let Some(i) = self.0.next() {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in &mut self.0`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.by_ref()`\n \n error: manual `!RangeInclusive::contains` implementation\n   --> $DIR/while_let_on_iterator.rs:255:20\n@@ -96,31 +96,31 @@ error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:286:13\n    |\n LL |             while let Some(i) = self.0.0.0.next() {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in &mut self.0.0.0`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.0.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:315:5\n    |\n LL |     while let Some(n) = it.next() {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in &mut it`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:327:9\n    |\n LL |         while let Some(x) = it.next() {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut it`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:341:5\n    |\n LL |     while let Some(x) = it.next() {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:352:5\n    |\n LL |     while let Some(x) = it.0.next() {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it.0`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n   --> $DIR/while_let_on_iterator.rs:371:5"}]}