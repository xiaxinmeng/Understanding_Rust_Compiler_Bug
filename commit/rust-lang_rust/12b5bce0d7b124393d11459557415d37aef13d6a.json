{"sha": "12b5bce0d7b124393d11459557415d37aef13d6a", "node_id": "C_kwDOAAsO6NoAKDEyYjViY2UwZDdiMTI0MzkzZDExNDU5NTU3NDE1ZDM3YWVmMTNkNmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T06:27:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-17T06:27:08Z"}, "message": "Auto merge of #89968 - JohnTitor:rollup-z51n967, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89507 (Add `#[repr(i8)]` to `Ordering`)\n - #89849 (CI: Selecting the Xcode version no longer needed with the macos-11 runners.)\n - #89886 (Update the wasi-libc built with the wasm32-wasi target)\n - #89907 (Remove FIXME since there is nothing to be fixed)\n - #89943 (clippy::complexity fixes)\n - #89953 (Make Option::as_mut const)\n - #89958 (Correct small typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dfb87b6fd94362db0807a2a64991a7d714312f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb87b6fd94362db0807a2a64991a7d714312f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b5bce0d7b124393d11459557415d37aef13d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b5bce0d7b124393d11459557415d37aef13d6a", "html_url": "https://github.com/rust-lang/rust/commit/12b5bce0d7b124393d11459557415d37aef13d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b5bce0d7b124393d11459557415d37aef13d6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e89811b46323f432544f9c4006e40d5e5d7663f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e89811b46323f432544f9c4006e40d5e5d7663f", "html_url": "https://github.com/rust-lang/rust/commit/4e89811b46323f432544f9c4006e40d5e5d7663f"}, {"sha": "dc2e301eb9b263bbf68c37ac5ce00caa20601458", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2e301eb9b263bbf68c37ac5ce00caa20601458", "html_url": "https://github.com/rust-lang/rust/commit/dc2e301eb9b263bbf68c37ac5ce00caa20601458"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "d921286ba3489be2e54814cfc434b3762991e15b", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -92,9 +92,6 @@ jobs:\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n         if: success() && !env.SKIP_JOB\n-      - name: select Xcode\n-        run: src/ci/scripts/select-xcode.sh\n-        if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n         if: success() && !env.SKIP_JOB\n@@ -322,7 +319,6 @@ jobs:\n               SCRIPT: \"./x.py dist --stage 2\"\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-              SELECT_XCODE: /Applications/Xcode_12.2.app\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0\n               MACOSX_STD_DEPLOYMENT_TARGET: 11.0\n@@ -467,9 +463,6 @@ jobs:\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n         if: success() && !env.SKIP_JOB\n-      - name: select Xcode\n-        run: src/ci/scripts/select-xcode.sh\n-        if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n         if: success() && !env.SKIP_JOB\n@@ -580,9 +573,6 @@ jobs:\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n         if: success() && !env.SKIP_JOB\n-      - name: select Xcode\n-        run: src/ci/scripts/select-xcode.sh\n-        if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n         if: success() && !env.SKIP_JOB"}, {"sha": "719caaabbbf0a343c30138abf75e2153c0690de6", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -802,7 +802,7 @@ impl IntType {\n /// Valid repr contents: any of the primitive integral type names (see\n /// `int_type_of_word`, below) to specify enum discriminant type; `C`, to use\n /// the same discriminant size that the corresponding C enum would or C\n-/// structure layout, `packed` to remove padding, and `transparent` to elegate representation\n+/// structure layout, `packed` to remove padding, and `transparent` to delegate representation\n /// concerns to the only non-ZST field.\n pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n     use ReprAttr::*;"}, {"sha": "1b123520961a6601106571a5d53e43dde4a31f33", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n             }\n \n             if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n-                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n+                if allowed.iter().all(|f| name.as_str() != *f) {\n                     struct_span_err!(\n                         span_handler,\n                         mi.span(),"}, {"sha": "a36c9b6ed7304ba6fae8b627e84aa04c1561422b", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -1004,13 +1004,13 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, range: AllocRange) -> AllocResult {\n-        self.is_init(range).or_else(|idx_range| {\n-            Err(AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n+        self.is_init(range).map_err(|idx_range| {\n+            AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n                 access_offset: range.start,\n                 access_size: range.size,\n                 uninit_offset: idx_range.start,\n                 uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n-            })))\n+            }))\n         })\n     }\n "}, {"sha": "05675e086d777ea638c45d918ab48f9efa663929", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -1837,7 +1837,7 @@ crate fn show_candidates(\n                 .skip(1)\n                 .all(|(_, descr, _)| descr == descr_first)\n             {\n-                format!(\"{}\", descr_first)\n+                descr_first.to_string()\n             } else {\n                 \"item\".to_string()\n             };"}, {"sha": "7456f886ea5d8c41555b83d52afdf5fa141bfff1", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -323,6 +323,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// ```\n #[derive(Clone, Copy, PartialEq, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(i8)]\n pub enum Ordering {\n     /// An ordering where a compared value is less than another.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "885058321589ccb6953146c252701a405a487986", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -646,7 +646,8 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_mut(&mut self) -> Option<&mut T> {\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    pub const fn as_mut(&mut self) -> Option<&mut T> {\n         match *self {\n             Some(ref mut x) => Some(x),\n             None => None,"}, {"sha": "cf669163d3ef23b339ec9235c1b80fb204304edc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -10,6 +10,7 @@\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]"}, {"sha": "c9508c145258c9e6340758579431e499b96210e8", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -380,6 +380,14 @@ const fn option_const_mut() {\n \n     let _take = option.take();\n     let _replace = option.replace(42);\n+\n+    {\n+        let as_mut = option.as_mut();\n+        match as_mut {\n+            Some(v) => *v = 32,\n+            None => unreachable!(),\n+        }\n+    }\n }\n \n #[test]"}, {"sha": "9bd56394eafc6add71473ce3f2f914811d22a051", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -10,7 +10,7 @@ export PATH=`pwd`/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04/bin:$PATH\n git clone https://github.com/WebAssembly/wasi-libc\n \n cd wasi-libc\n-git reset --hard 58795582905e08fa7748846c1971b4ab911d1e16\n+git reset --hard ad5133410f66b93a2381db5b542aad5e0964db96\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd .."}, {"sha": "eb16cf3c7620a57617bc7b30987f8e30a3fd4085", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -153,10 +153,6 @@ x--expand-yaml-anchors--remove:\n         run: src/ci/scripts/install-sccache.sh\n         <<: *step\n \n-      - name: select Xcode\n-        run: src/ci/scripts/select-xcode.sh\n-        <<: *step\n-\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n         <<: *step\n@@ -498,7 +494,6 @@ jobs:\n                 --set rust.jemalloc\n                 --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-              SELECT_XCODE: /Applications/Xcode_12.2.app\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0\n               MACOSX_STD_DEPLOYMENT_TARGET: 11.0"}, {"sha": "3b9c77d42ba5f74995e2ed1117de32881318ec12", "filename": "src/ci/scripts/select-xcode.sh", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e89811b46323f432544f9c4006e40d5e5d7663f/src%2Fci%2Fscripts%2Fselect-xcode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4e89811b46323f432544f9c4006e40d5e5d7663f/src%2Fci%2Fscripts%2Fselect-xcode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fselect-xcode.sh?ref=4e89811b46323f432544f9c4006e40d5e5d7663f", "patch": "@@ -1,13 +0,0 @@\n-#!/bin/bash\n-# This script selects the Xcode instance to use.\n-\n-set -euo pipefail\n-IFS=$'\\n\\t'\n-\n-source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n-\n-if isMacOS; then\n-    if [[ -s \"${SELECT_XCODE-}\" ]]; then\n-        sudo xcode-select -s \"${SELECT_XCODE}\"\n-    fi\n-fi"}, {"sha": "c46439b85105070215e051af0ae0d64ec0e5da8b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -765,7 +765,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n                 // If there are characters between the preceding line ending and\n                 // this code block, `str::lines` will return an additional line,\n                 // which we subtract here.\n-                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with(\"\\n\") {\n+                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with('\\n') {\n                     nb_lines -= 1;\n                 }\n                 let line = tests.get_line() + nb_lines + 1;"}, {"sha": "b13ab64011dc164a943451a89487b8a80dfd2061", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -113,11 +113,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     .unwrap_or(&[])\n                     .iter()\n                     .filter_map(|attr| {\n-                        Some(\n-                            Cfg::parse(attr.meta_item()?)\n-                                .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n-                                .ok()?,\n-                        )\n+                        Cfg::parse(attr.meta_item()?)\n+                            .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n+                            .ok()\n                     })\n                     .collect::<Vec<_>>()\n             })"}, {"sha": "e58bba640585388f4329ce4dba355cc067bead13", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b5bce0d7b124393d11459557415d37aef13d6a/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs?ref=12b5bce0d7b124393d11459557415d37aef13d6a", "patch": "@@ -11,7 +11,6 @@ impl Struct {\n     pub const AssocConst: Self::AssocTy = 42;\n     //~^ ERROR ambiguous associated type\n     //~| HELP use fully-qualified syntax\n-    // FIXME: for some reason, the error is shown twice with rustdoc but only once with rustc\n     //~| ERROR ambiguous associated type\n     //~| HELP use fully-qualified syntax\n }"}]}