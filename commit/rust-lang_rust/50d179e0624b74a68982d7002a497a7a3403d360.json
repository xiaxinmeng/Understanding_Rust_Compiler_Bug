{"sha": "50d179e0624b74a68982d7002a497a7a3403d360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDE3OWUwNjI0Yjc0YTY4OTgyZDcwMDJhNDk3YTdhMzQwM2QzNjA=", "commit": {"author": {"name": "Sandeep Datta", "email": "datta.sandeep@gmail.com", "date": "2016-02-11T14:10:19Z"}, "committer": {"name": "Sandeep Datta", "email": "datta.sandeep@gmail.com", "date": "2016-02-11T14:10:19Z"}, "message": "Explained the data race with an example.", "tree": {"sha": "92541edc9a6c5921a78d81718230217bc4347c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92541edc9a6c5921a78d81718230217bc4347c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d179e0624b74a68982d7002a497a7a3403d360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d179e0624b74a68982d7002a497a7a3403d360", "html_url": "https://github.com/rust-lang/rust/commit/50d179e0624b74a68982d7002a497a7a3403d360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d179e0624b74a68982d7002a497a7a3403d360/comments", "author": {"login": "sandeep-datta", "id": 328639, "node_id": "MDQ6VXNlcjMyODYzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandeep-datta", "html_url": "https://github.com/sandeep-datta", "followers_url": "https://api.github.com/users/sandeep-datta/followers", "following_url": "https://api.github.com/users/sandeep-datta/following{/other_user}", "gists_url": "https://api.github.com/users/sandeep-datta/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandeep-datta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandeep-datta/subscriptions", "organizations_url": "https://api.github.com/users/sandeep-datta/orgs", "repos_url": "https://api.github.com/users/sandeep-datta/repos", "events_url": "https://api.github.com/users/sandeep-datta/events{/privacy}", "received_events_url": "https://api.github.com/users/sandeep-datta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sandeep-datta", "id": 328639, "node_id": "MDQ6VXNlcjMyODYzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandeep-datta", "html_url": "https://github.com/sandeep-datta", "followers_url": "https://api.github.com/users/sandeep-datta/followers", "following_url": "https://api.github.com/users/sandeep-datta/following{/other_user}", "gists_url": "https://api.github.com/users/sandeep-datta/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandeep-datta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandeep-datta/subscriptions", "organizations_url": "https://api.github.com/users/sandeep-datta/orgs", "repos_url": "https://api.github.com/users/sandeep-datta/repos", "events_url": "https://api.github.com/users/sandeep-datta/events{/privacy}", "received_events_url": "https://api.github.com/users/sandeep-datta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62b3b40ade206830c502c394a9f547a300057ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b3b40ade206830c502c394a9f547a300057ac0", "html_url": "https://github.com/rust-lang/rust/commit/62b3b40ade206830c502c394a9f547a300057ac0"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "5c603582bfc67521583a4ef22058e05a4a28c459", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/50d179e0624b74a68982d7002a497a7a3403d360/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/50d179e0624b74a68982d7002a497a7a3403d360/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=50d179e0624b74a68982d7002a497a7a3403d360", "patch": "@@ -122,7 +122,9 @@ special annotation here, it\u2019s the default thing that Rust does.\n ## The details\n \n The reason that we cannot use a binding after we\u2019ve moved it is subtle, but\n-important. When we write code like this:\n+important. \n+\n+When we write code like this:\n \n ```rust\n let x = 10;\n@@ -140,23 +142,41 @@ let v = vec![1, 2, 3];\n let v2 = v;\n ```\n \n-The first line allocates memory for the vector object, `v`, on the stack like\n+The first line allocates memory for the vector object `v` on the stack like\n it does for `x` above. But in addition to that it also allocates some memory\n-on on the [heap][sh] for the actual data `[1, 2, 3]`. Rust copies the address\n-of this heap allocation to an internal pointer part of the vector object\n-placed on the stack (let's call it the data pointer). It is worth pointing out\n-even at the risk of being redundant that the vector object and its data live\n-in separate memory regions instead of being a single contiguous memory\n-allocation (due to reasons we will not go into at this point of time).\n+on the [heap][sh] for the actual data (`[1, 2, 3]`). Rust copies the address\n+of this heap allocation to an internal pointer, which is part of the vector\n+object placed on the stack (let's call it the data pointer). \n+\n+It is worth pointing out (even at the risk of repeating things) that the vector\n+object and its data live in separate memory regions instead of being a single\n+contiguous memory allocation (due to reasons we will not go into at this point\n+of time). These two parts of the vector (the one on the stack and one on the\n+heap) must agree with each other at all times with regards to things like the\n+length, capacity etc.\n \n When we move `v` to `v2`, rust actually does a bitwise copy of the vector\n object `v` into the stack allocation represented by `v2`. This shallow copy\n does not create a copy of the heap allocation containing the actual data.\n Which means that there would be two pointers to the contents of the vector\n both pointing to the same memory allocation on the heap. It would violate\n Rust\u2019s safety guarantees by introducing a data race if one could access both\n-`v` and `v2` at the same time. Therefore, Rust forbids using `v` after we\u2019ve\n-done the move (shallow copy).\n+`v` and `v2` at the same time. \n+\n+For example if we truncated the vector to just two elements through `v2`:\n+\n+```rust\n+v2.truncate(2);\n+```\n+\n+and `v1` were still accessible we'd end up with an invalid vector since it\n+would not know that the heap data has been truncated. Now, the part of the\n+vector `v1` on the stack does not agree with its corresponding part on the\n+heap. `v1` still thinks there are three elements in the vector and will\n+happily let us access the non existent element `v1[2]` but as you might\n+already know this is a recipe for disaster.\n+\n+This is why Rust forbids using `v` after we\u2019ve done the move.\n \n [sh]: the-stack-and-the-heap.html\n "}]}