{"sha": "9482492ab65820773ba0b5bd1ad81da5f5858c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODI0OTJhYjY1ODIwNzczYmEwYjViZDFhZDgxZGE1ZjU4NThjNmM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-12-11T14:25:26Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-03T07:48:29Z"}, "message": "Add drain method to AccumulateVec/ArrayVec\n\nYou can now call .drain(..) on SmallVec, AccumulateVec and ArrayVec", "tree": {"sha": "435219443bf7fc53585c55469d071ab5338cea33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/435219443bf7fc53585c55469d071ab5338cea33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9482492ab65820773ba0b5bd1ad81da5f5858c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9482492ab65820773ba0b5bd1ad81da5f5858c6c", "html_url": "https://github.com/rust-lang/rust/commit/9482492ab65820773ba0b5bd1ad81da5f5858c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9482492ab65820773ba0b5bd1ad81da5f5858c6c/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c4d10e955e36e886e8674affa58b133d1c9a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c4d10e955e36e886e8674affa58b133d1c9a51", "html_url": "https://github.com/rust-lang/rust/commit/f8c4d10e955e36e886e8674affa58b133d1c9a51"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "78af655852d1b0656ade7f7ce031ad0e38d71434", "filename": "src/librustc_data_structures/accumulate_vec.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Faccumulate_vec.rs?ref=9482492ab65820773ba0b5bd1ad81da5f5858c6c", "patch": "@@ -19,6 +19,7 @@ use std::ops::{Deref, DerefMut};\n use std::iter::{self, IntoIterator, FromIterator};\n use std::slice;\n use std::vec;\n+use std::collections::range::RangeArgument;\n \n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n \n@@ -71,6 +72,19 @@ impl<A: Array> AccumulateVec<A> {\n             AccumulateVec::Heap(ref mut vec) => vec.pop(),\n         }\n     }\n+\n+    pub fn drain<R>(&mut self, range: R) -> Drain<A>\n+        where R: RangeArgument<usize>\n+    {\n+        match *self {\n+            AccumulateVec::Array(ref mut v) => {\n+                Drain::Array(v.drain(range))\n+            },\n+            AccumulateVec::Heap(ref mut v) => {\n+                Drain::Heap(v.drain(range))\n+            },\n+        }\n+    }\n }\n \n impl<A: Array> Deref for AccumulateVec<A> {\n@@ -132,6 +146,31 @@ impl<A: Array> Iterator for IntoIter<A> {\n     }\n }\n \n+pub enum Drain<'a, A: Array>\n+        where A::Element: 'a\n+{\n+    Array(array_vec::Drain<'a, A>),\n+    Heap(vec::Drain<'a, A::Element>),\n+}\n+\n+impl<'a, A: Array> Iterator for Drain<'a, A> {\n+    type Item = A::Element;\n+\n+    fn next(&mut self) -> Option<A::Element> {\n+        match *self {\n+            Drain::Array(ref mut drain) => drain.next(),\n+            Drain::Heap(ref mut drain) => drain.next(),\n+        }\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        match *self {\n+            Drain::Array(ref drain) => drain.size_hint(),\n+            Drain::Heap(ref drain) => drain.size_hint(),\n+        }\n+    }\n+}\n+\n impl<A: Array> IntoIterator for AccumulateVec<A> {\n     type Item = A::Element;\n     type IntoIter = IntoIter<A>;"}, {"sha": "844e9041d202984a8d312149510a10871b491775", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=9482492ab65820773ba0b5bd1ad81da5f5858c6c", "patch": "@@ -12,12 +12,13 @@\n \n use std::marker::Unsize;\n use std::iter::Extend;\n-use std::ptr::{self, drop_in_place};\n+use std::ptr::{self, drop_in_place, Shared};\n use std::ops::{Deref, DerefMut, Range};\n use std::hash::{Hash, Hasher};\n use std::slice;\n use std::fmt;\n use std::mem;\n+use std::collections::range::RangeArgument;\n \n pub unsafe trait Array {\n     type Element;\n@@ -103,6 +104,44 @@ impl<A: Array> ArrayVec<A> {\n             None\n         }\n     }\n+\n+    pub fn drain<R>(&mut self, range: R) -> Drain<A>\n+        where R: RangeArgument<usize>\n+    {\n+        // Memory safety\n+        //\n+        // When the Drain is first created, it shortens the length of\n+        // the source vector to make sure no uninitalized or moved-from elements\n+        // are accessible at all if the Drain's destructor never gets to run.\n+        //\n+        // Drain will ptr::read out the values to remove.\n+        // When finished, remaining tail of the vec is copied back to cover\n+        // the hole, and the vector length is restored to the new length.\n+        //\n+        let len = self.len();\n+        let start = *range.start().unwrap_or(&0);\n+        let end = *range.end().unwrap_or(&len);\n+        assert!(start <= end);\n+        assert!(end <= len);\n+\n+        unsafe {\n+            // set self.vec length's to start, to be safe in case Drain is leaked\n+            self.set_len(start);\n+            // Use the borrow in the IterMut to indicate borrowing behavior of the\n+            // whole Drain iterator (like &mut T).\n+            let range_slice = {\n+                let arr = &mut self.values as &mut [ManuallyDrop<_>];\n+                slice::from_raw_parts_mut(arr.as_mut_ptr().offset(start as isize),\n+                                          end - start)\n+            };\n+            Drain {\n+                tail_start: end,\n+                tail_len: len - end,\n+                iter: range_slice.iter(),\n+                array_vec: Shared::new(self as *mut _),\n+            }\n+        }\n+    }\n }\n \n impl<A> Default for ArrayVec<A>\n@@ -179,6 +218,51 @@ impl<A: Array> Iterator for Iter<A> {\n     }\n }\n \n+pub struct Drain<'a, A: Array>\n+        where A::Element: 'a\n+{\n+    tail_start: usize,\n+    tail_len: usize,\n+    iter: slice::Iter<'a, ManuallyDrop<A::Element>>,\n+    array_vec: Shared<ArrayVec<A>>,\n+}\n+\n+impl<'a, A: Array> Iterator for Drain<'a, A> {\n+    type Item = A::Element;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A::Element> {\n+        self.iter.next().map(|elt| unsafe { ptr::read(elt as *const ManuallyDrop<_>).value })\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<'a, A: Array> Drop for Drain<'a, A> {\n+    fn drop(&mut self) {\n+        // exhaust self first\n+        while let Some(_) = self.next() {}\n+\n+        if self.tail_len > 0 {\n+            unsafe {\n+                let source_array_vec = &mut **self.array_vec;\n+                // memmove back untouched tail, update to new length\n+                let start = source_array_vec.len();\n+                let tail = self.tail_start;\n+                {\n+                    let mut arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n+                    let src = arr.as_ptr().offset(tail as isize);\n+                    let dst = arr.as_mut_ptr().offset(start as isize);\n+                    ptr::copy(src, dst, self.tail_len);\n+                };\n+                source_array_vec.set_len(start + self.tail_len);\n+            }\n+        }\n+    }\n+}\n+\n impl<A: Array> IntoIterator for ArrayVec<A> {\n     type Item = A::Element;\n     type IntoIter = Iter<A>;"}, {"sha": "ee75a3596e18ab89e8b0d4ff61f35831d9e472d9", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9482492ab65820773ba0b5bd1ad81da5f5858c6c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=9482492ab65820773ba0b5bd1ad81da5f5858c6c", "patch": "@@ -25,6 +25,8 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(shared)]\n+#![feature(collections_range)]\n #![feature(nonzero)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}]}