{"sha": "191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MWIxZDIzOGZkMTU5NGFiNzRiMWFiNmExN2RiZTA0MzBmYzZiMWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T18:03:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T18:17:37Z"}, "message": "Remove impl_block module", "tree": {"sha": "047d256c33567aa3dfb59e7986f7059bf99ffb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047d256c33567aa3dfb59e7986f7059bf99ffb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "html_url": "https://github.com/rust-lang/rust/commit/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87c16bea60f4972b0adf4dd69bbb9abcfca12d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d87c16bea60f4972b0adf4dd69bbb9abcfca12d6", "html_url": "https://github.com/rust-lang/rust/commit/d87c16bea60f4972b0adf4dd69bbb9abcfca12d6"}], "stats": {"total": 98, "additions": 43, "deletions": 55}, "files": [{"sha": "96a5cc8573344203a6b361ba4b639cba9257b780", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "patch": "@@ -973,6 +973,41 @@ pub struct ImplBlock {\n     pub(crate) id: ImplId,\n }\n \n+impl ImplBlock {\n+    pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n+        db.impl_data(self.id).target_trait.clone()\n+    }\n+\n+    pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n+        db.impl_data(self.id).target_type.clone()\n+    }\n+\n+    pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n+        Ty::from_hir(db, &self.id.resolver(db), &self.target_type(db))\n+    }\n+\n+    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n+        let target_ty = self.target_ty(db);\n+        TraitRef::from_hir(db, &self.id.resolver(db), &self.target_trait(db)?, Some(target_ty))\n+    }\n+\n+    pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n+        db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n+    }\n+\n+    pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n+        db.impl_data(self.id).is_negative\n+    }\n+\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n+        self.id.module(db).into()\n+    }\n+\n+    pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n+        Crate { crate_id: self.module(db).id.krate }\n+    }\n+}\n+\n /// For IDE only\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),"}, {"sha": "a4e317c203c69cc3cfacbf85abb00be49ea97a8b", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "patch": "@@ -5,8 +5,8 @@ use hir_expand::either::Either;\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, Import, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n+    Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n@@ -108,6 +108,12 @@ impl HasSource for MacroDef {\n         Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n+impl HasSource for ImplBlock {\n+    type Ast = ast::ImplBlock;\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::ImplBlock> {\n+        self.id.source(db)\n+    }\n+}\n impl HasSource for Import {\n     type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n "}, {"sha": "334eeebacd9a9f2428bbb4e670e2d8ae1f3473de", "filename": "crates/ra_hir/src/impl_block.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d87c16bea60f4972b0adf4dd69bbb9abcfca12d6/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c16bea60f4972b0adf4dd69bbb9abcfca12d6/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=d87c16bea60f4972b0adf4dd69bbb9abcfca12d6", "patch": "@@ -1,52 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use hir_def::{resolver::HasResolver, type_ref::TypeRef, AstItemDef};\n-use ra_syntax::ast;\n-\n-use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    ty::Ty,\n-    AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n-};\n-\n-impl HasSource for ImplBlock {\n-    type Ast = ast::ImplBlock;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ImplBlock> {\n-        self.id.source(db)\n-    }\n-}\n-\n-impl ImplBlock {\n-    pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n-        db.impl_data(self.id).target_trait.clone()\n-    }\n-\n-    pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n-        db.impl_data(self.id).target_type.clone()\n-    }\n-\n-    pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n-        Ty::from_hir(db, &self.id.resolver(db), &self.target_type(db))\n-    }\n-\n-    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n-        let target_ty = self.target_ty(db);\n-        TraitRef::from_hir(db, &self.id.resolver(db), &self.target_trait(db)?, Some(target_ty))\n-    }\n-\n-    pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n-        db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n-    }\n-\n-    pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n-        db.impl_data(self.id).is_negative\n-    }\n-\n-    pub fn module(&self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db).into()\n-    }\n-\n-    pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n-        Crate { crate_id: self.module(db).id.krate }\n-    }\n-}"}, {"sha": "843ce6a88a20fd00d5d95e6b803ab28db41f982f", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "patch": "@@ -32,7 +32,6 @@ pub mod db;\n pub mod source_binder;\n \n mod ty;\n-mod impl_block;\n mod expr;\n pub mod diagnostics;\n mod util;"}]}