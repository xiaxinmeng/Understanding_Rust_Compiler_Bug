{"sha": "ac12011315e0447cf7294102a342793c1d8c7cb8", "node_id": "C_kwDOAAsO6NoAKGFjMTIwMTEzMTVlMDQ0N2NmNzI5NDEwMmEzNDI3OTNjMWQ4YzdjYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T14:18:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T14:18:41Z"}, "message": "Auto merge of #9577 - kraktus:unnecessary_cast, r=llogiq\n\n[`unnecessary_cast`] add parenthesis when negative number uses a method\n\nfix #9563\n\nThe issue was probably introduced by 90fe3bea52dd6ebd0cb02785ba523f182ff761e6\n\nchangelog: [`unnecessary_cast`] add parenthesis when negative number uses a method\n\nr? llogiq", "tree": {"sha": "fd91180b5e3647cc448d3b1c5fab2e797649ec26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd91180b5e3647cc448d3b1c5fab2e797649ec26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac12011315e0447cf7294102a342793c1d8c7cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac12011315e0447cf7294102a342793c1d8c7cb8", "html_url": "https://github.com/rust-lang/rust/commit/ac12011315e0447cf7294102a342793c1d8c7cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac12011315e0447cf7294102a342793c1d8c7cb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "html_url": "https://github.com/rust-lang/rust/commit/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7"}, {"sha": "90b446fd387a3c405b4dc3c5c2bd0bfce4a6fb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b446fd387a3c405b4dc3c5c2bd0bfce4a6fb21", "html_url": "https://github.com/rust-lang/rust/commit/90b446fd387a3c405b4dc3c5c2bd0bfce4a6fb21"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "031cedb9072035eaf41ce7e7ac7866e5567532c9", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ac12011315e0447cf7294102a342793c1d8c7cb8/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac12011315e0447cf7294102a342793c1d8c7cb8/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=ac12011315e0447cf7294102a342793c1d8c7cb8", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n use clippy_utils::numeric_literal::NumericLiteral;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n@@ -85,22 +86,38 @@ pub(super) fn check<'tcx>(\n     false\n }\n \n-fn lint_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &str, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+fn lint_unnecessary_cast(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    raw_literal_str: &str,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+) {\n     let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n-    let replaced_literal;\n-    let matchless = if literal_str.contains(['(', ')']) {\n-        replaced_literal = literal_str.replace(['(', ')'], \"\");\n-        &replaced_literal\n-    } else {\n-        literal_str\n+    // first we remove all matches so `-(1)` become `-1`, and remove trailing dots, so `1.` become `1`\n+    let literal_str = raw_literal_str\n+        .replace(['(', ')'], \"\")\n+        .trim_end_matches('.')\n+        .to_string();\n+    // we know need to check if the parent is a method call, to add parenthesis accordingly (eg:\n+    // (-1).foo() instead of -1.foo())\n+    let sugg = if let Some(parent_expr) = get_parent_expr(cx, expr)\n+        && let ExprKind::MethodCall(..) = parent_expr.kind\n+        && literal_str.starts_with('-')\n+        {\n+            format!(\"({literal_str}_{cast_to})\")\n+\n+        } else {\n+            format!(\"{literal_str}_{cast_to}\")\n     };\n+\n     span_lint_and_sugg(\n         cx,\n         UNNECESSARY_CAST,\n         expr.span,\n         &format!(\"casting {literal_kind_name} literal to `{cast_to}` is unnecessary\"),\n         \"try\",\n-        format!(\"{}_{cast_to}\", matchless.trim_end_matches('.')),\n+        sugg,\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "70ec3e943807d5af5b6fc64c6984a270f8076130", "filename": "tests/ui/unnecessary_cast.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.fixed?ref=ac12011315e0447cf7294102a342793c1d8c7cb8", "patch": "@@ -97,4 +97,10 @@ mod fixable {\n \n         let _ = -(1 + 1) as i64;\n     }\n+\n+    fn issue_9563() {\n+        let _: f64 = (-8.0_f64).exp();\n+        #[allow(clippy::precedence)]\n+        let _: f64 = -8.0_f64.exp(); // should suggest `-8.0_f64.exp()` here not to change code behavior\n+    }\n }"}, {"sha": "36c1a87fab6e8e4252fdaafe8554c94dfdb2c440", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=ac12011315e0447cf7294102a342793c1d8c7cb8", "patch": "@@ -97,4 +97,10 @@ mod fixable {\n \n         let _ = -(1 + 1) as i64;\n     }\n+\n+    fn issue_9563() {\n+        let _: f64 = (-8.0 as f64).exp();\n+        #[allow(clippy::precedence)]\n+        let _: f64 = -(8.0 as f64).exp(); // should suggest `-8.0_f64.exp()` here not to change code behavior\n+    }\n }"}, {"sha": "a52b92c339c8663ec7ffebc65fe3b9439106ea4e", "filename": "tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac12011315e0447cf7294102a342793c1d8c7cb8/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=ac12011315e0447cf7294102a342793c1d8c7cb8", "patch": "@@ -162,5 +162,17 @@ error: casting integer literal to `i64` is unnecessary\n LL |         let _: i64 = -(1) as i64;\n    |                      ^^^^^^^^^^^ help: try: `-1_i64`\n \n-error: aborting due to 27 previous errors\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:102:22\n+   |\n+LL |         let _: f64 = (-8.0 as f64).exp();\n+   |                      ^^^^^^^^^^^^^ help: try: `(-8.0_f64)`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:104:23\n+   |\n+LL |         let _: f64 = -(8.0 as f64).exp(); // should suggest `-8.0_f64.exp()` here not to change code behavior\n+   |                       ^^^^^^^^^^^^ help: try: `8.0_f64`\n+\n+error: aborting due to 29 previous errors\n "}]}