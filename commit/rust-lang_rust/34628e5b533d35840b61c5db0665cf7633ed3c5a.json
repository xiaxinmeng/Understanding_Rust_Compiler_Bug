{"sha": "34628e5b533d35840b61c5db0665cf7633ed3c5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjI4ZTViNTMzZDM1ODQwYjYxYzVkYjA2NjVjZjc2MzNlZDNjNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-10T08:01:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-10T08:01:12Z"}, "message": "Auto merge of #80867 - JohnTitor:rollup-tvqw555, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #79502 (Implement From<char> for u64 and u128.)\n - #79968 (Improve core::ptr::drop_in_place debuginfo)\n - #80774 (Fix safety comment)\n - #80801 (Use correct span for structured suggestion)\n - #80803 (Remove useless `fill_in` function)\n - #80820 (Support `download-ci-llvm` on NixOS)\n - #80825 (Remove under-used ImplPolarity enum)\n - #80850 (Allow #[rustc_builtin_macro = \"name\"])\n - #80857 (Add comment to `Vec::truncate` explaining `>` vs `>=`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bbdf4e4be0d4a44f172cf0528b45025d73300281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbdf4e4be0d4a44f172cf0528b45025d73300281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34628e5b533d35840b61c5db0665cf7633ed3c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34628e5b533d35840b61c5db0665cf7633ed3c5a", "html_url": "https://github.com/rust-lang/rust/commit/34628e5b533d35840b61c5db0665cf7633ed3c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34628e5b533d35840b61c5db0665cf7633ed3c5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a193921a024e910262ff90bfb028074fddf20d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a193921a024e910262ff90bfb028074fddf20d0", "html_url": "https://github.com/rust-lang/rust/commit/7a193921a024e910262ff90bfb028074fddf20d0"}, {"sha": "19b8c65e4e0af841a9ecaa99b5e1ae3c73ff9c7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19b8c65e4e0af841a9ecaa99b5e1ae3c73ff9c7f", "html_url": "https://github.com/rust-lang/rust/commit/19b8c65e4e0af841a9ecaa99b5e1ae3c73ff9c7f"}], "stats": {"total": 470, "additions": 299, "deletions": 171}, "files": [{"sha": "ed76d51231d0b1c9f0bf6f2380e12ada288068d3", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -48,7 +48,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Editi\n     let mut register = |name, kind| {\n         resolver.register_builtin_macro(\n             Ident::with_dummy_span(name),\n-            SyntaxExtension { is_builtin: true, ..SyntaxExtension::default(kind, edition) },\n+            SyntaxExtension::default(kind, edition),\n         )\n     };\n     macro register_bang($($name:ident: $f:expr,)*) {"}, {"sha": "c1953c4d37300ffd57bb0e39768419b20fcf6e1a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -728,9 +728,7 @@ pub struct SyntaxExtension {\n     pub edition: Edition,\n     /// Built-in macros have a couple of special properties like availability\n     /// in `#[no_implicit_prelude]` modules, so we have to keep this flag.\n-    pub is_builtin: bool,\n-    /// We have to identify macros providing a `Copy` impl early for compatibility reasons.\n-    pub is_derive_copy: bool,\n+    pub builtin_name: Option<Symbol>,\n }\n \n impl SyntaxExtension {\n@@ -758,8 +756,7 @@ impl SyntaxExtension {\n             deprecation: None,\n             helper_attrs: Vec::new(),\n             edition,\n-            is_builtin: false,\n-            is_derive_copy: false,\n+            builtin_name: None,\n             kind,\n         }\n     }\n@@ -785,7 +782,9 @@ impl SyntaxExtension {\n             }\n         }\n \n-        let is_builtin = sess.contains_name(attrs, sym::rustc_builtin_macro);\n+        let builtin_name = sess\n+            .find_by_name(attrs, sym::rustc_builtin_macro)\n+            .map(|a| a.value_str().unwrap_or(name));\n         let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n         if const_stability.is_some() {\n             sess.parse_sess\n@@ -803,8 +802,7 @@ impl SyntaxExtension {\n             deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,\n-            is_builtin,\n-            is_derive_copy: is_builtin && name == sym::Copy,\n+            builtin_name,\n         }\n     }\n "}, {"sha": "3ed5320da73b372adcec4b87977a1a4521675cf9", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -442,7 +442,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word, NameValueStr: \"name\"), IMPL_DETAIL),\n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, AssumedUsed,"}, {"sha": "03b66a3f7b30690471c15828aa1ebd79e39333bf", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -398,20 +398,30 @@ impl<'a> Resolver<'a> {\n                 err.help(\"use the `|| { ... }` closure form instead\");\n                 err\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg) => {\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg, current) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0435,\n                     \"attempt to use a non-constant value in a constant\"\n                 );\n-                err.span_suggestion(\n-                    ident.span,\n-                    &sugg,\n-                    \"\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err.span_label(span, \"non-constant value\");\n+                // let foo =...\n+                //     ^^^ given this Span\n+                // ------- get this Span to have an applicable suggestion\n+                let sp =\n+                    self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n+                if sp.lo().0 == 0 {\n+                    err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n+                } else {\n+                    let sp = sp.with_lo(BytePos(sp.lo().0 - current.len() as u32));\n+                    err.span_suggestion(\n+                        sp,\n+                        &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n+                        format!(\"{} {}\", sugg, ident),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.span_label(span, \"non-constant value\");\n+                }\n                 err\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, name, binding) => {"}, {"sha": "bc6c70c26ae0e5ec2d8189872ae810efa4434dfb", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -210,7 +210,11 @@ enum ResolutionError<'a> {\n     /// Error E0434: can't capture dynamic environment in a fn item.\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// Error E0435: attempt to use a non-constant value in a constant.\n-    AttemptToUseNonConstantValueInConstant(Ident, String),\n+    AttemptToUseNonConstantValueInConstant(\n+        Ident,\n+        /* suggestion */ &'static str,\n+        /* current */ &'static str,\n+    ),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n@@ -1443,7 +1447,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_builtin_macro(&mut self, res: Res) -> bool {\n-        self.get_macro(res).map_or(false, |ext| ext.is_builtin)\n+        self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n@@ -2010,7 +2014,7 @@ impl<'a> Resolver<'a> {\n                 // The macro is a proc macro derive\n                 if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n                     let ext = self.get_macro_by_def_id(def_id);\n-                    if !ext.is_builtin\n+                    if ext.builtin_name.is_none()\n                         && ext.macro_kind() == MacroKind::Derive\n                         && parent.expansion.outer_expn_is_descendant_of(span.ctxt())\n                     {\n@@ -2614,18 +2618,19 @@ impl<'a> Resolver<'a> {\n                                             ConstantItemKind::Const => \"const\",\n                                             ConstantItemKind::Static => \"static\",\n                                         };\n-                                        let sugg = format!(\n-                                            \"consider using `let` instead of `{}`\",\n-                                            kind_str\n-                                        );\n-                                        (span, AttemptToUseNonConstantValueInConstant(ident, sugg))\n+                                        (\n+                                            span,\n+                                            AttemptToUseNonConstantValueInConstant(\n+                                                ident, \"let\", kind_str,\n+                                            ),\n+                                        )\n                                     } else {\n-                                        let sugg = \"consider using `const` instead of `let`\";\n                                         (\n                                             rib_ident.span,\n                                             AttemptToUseNonConstantValueInConstant(\n                                                 original_rib_ident_def,\n-                                                sugg.to_string(),\n+                                                \"const\",\n+                                                \"let\",\n                                             ),\n                                         )\n                                     };"}, {"sha": "60a1fc8863132c97d5285e8473de22d00d238d6e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -285,7 +285,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                                 helper_attrs.extend(\n                                     ext.helper_attrs.iter().map(|name| Ident::new(*name, span)),\n                                 );\n-                                if ext.is_derive_copy {\n+                                if ext.builtin_name == Some(sym::Copy) {\n                                     self.containers_deriving_copy.insert(invoc_id);\n                                 }\n                                 ext\n@@ -1089,9 +1089,9 @@ impl<'a> Resolver<'a> {\n             edition,\n         );\n \n-        if result.is_builtin {\n+        if let Some(builtin_name) = result.builtin_name {\n             // The macro was marked with `#[rustc_builtin_macro]`.\n-            if let Some(builtin_macro) = self.builtin_macros.get_mut(&item.ident.name) {\n+            if let Some(builtin_macro) = self.builtin_macros.get_mut(&builtin_name) {\n                 // The macro is a built-in, replace its expander function\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'."}, {"sha": "6635d44496c0302177eed3dae96412c12164353f", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -671,7 +671,9 @@ impl SourceMap {\n             let pat = pat.to_owned() + ws;\n             if let Ok(prev_source) = self.span_to_prev_source(sp) {\n                 let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n-                if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+                if prev_source.is_empty() && sp.lo().0 != 0 {\n+                    return sp.with_lo(BytePos(sp.lo().0 - 1));\n+                } else if !prev_source.contains('\\n') || accept_newlines {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n             }"}, {"sha": "b0d5f340902411f33ee7e7fe1f5bedde3168d2a7", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -56,7 +56,15 @@ pub(super) fn mangle(\n     let hash = get_symbol_hash(tcx, instance, instance_ty, instantiating_crate);\n \n     let mut printer = SymbolPrinter { tcx, path: SymbolPath::new(), keep_within_component: false }\n-        .print_def_path(def_id, &[])\n+        .print_def_path(\n+            def_id,\n+            if let ty::InstanceDef::DropGlue(_, _) = instance.def {\n+                // Add the name of the dropped type to the symbol name\n+                &*instance.substs\n+            } else {\n+                &[]\n+            },\n+        )\n         .unwrap();\n \n     if let ty::InstanceDef::VtableShim(..) = instance.def {"}, {"sha": "1ca194c336112e0084ee4b66afe4db7bfb65701d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -990,6 +990,9 @@ impl<T, A: Allocator> Vec<T, A> {\n         //   such that no value will be dropped twice in case `drop_in_place`\n         //   were to panic once (if it panics twice, the program aborts).\n         unsafe {\n+            // Note: It's intentional that this is `>` and not `>=`.\n+            //       Changing it to `>=` has negative performance\n+            //       implications in some cases. See #78884 for more.\n             if len > self.len {\n                 return;\n             }"}, {"sha": "7a0ec32cc61a9b18b7913ccd05ab14cd7fc5403a", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -113,6 +113,48 @@ impl From<char> for u32 {\n     }\n }\n \n+#[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n+impl From<char> for u64 {\n+    /// Converts a [`char`] into a [`u64`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\ud83d\udc64';\n+    /// let u = u64::from(c);\n+    /// assert!(8 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 64 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u64\n+    }\n+}\n+\n+#[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n+impl From<char> for u128 {\n+    /// Converts a [`char`] into a [`u128`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\u2699';\n+    /// let u = u128::from(c);\n+    /// assert!(16 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 128 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u128\n+    }\n+}\n+\n /// Maps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n ///\n /// Unicode is designed such that this effectively decodes bytes"}, {"sha": "843ef09a5842f5d9d9fdce6db0eb5675da21259d", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -166,8 +166,9 @@ impl System {\n         match old_layout.size() {\n             0 => self.alloc_impl(new_layout, zeroed),\n \n-            // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`\n-            // as required by safety conditions. Other conditions must be upheld by the caller\n+            // SAFETY: `new_size` is non-zero as `new_size` is greater than or equal to `old_size`\n+            // as required by safety conditions and the `old_size == 0` case was handled in the\n+            // previous match arm. Other conditions must be upheld by the caller\n             old_size if old_layout.align() == new_layout.align() => unsafe {\n                 let new_size = new_layout.size();\n "}, {"sha": "6d2d7bbbef92c55993167d4d9588e7f05556e92e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -413,7 +413,7 @@ def download_stage0(self):\n             lib_dir = \"{}/lib\".format(self.bin_root())\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n-                    self.fix_bin_or_dylib(\"{}/{}\".format(lib_dir, lib))\n+                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(self.date)\n \n@@ -451,10 +451,15 @@ def download_stage0(self):\n                 \"{}/src/bootstrap/download-ci-llvm-stamp\".format(top_level),\n             ]).decode(sys.getdefaultencoding()).strip()\n             llvm_assertions = self.get_toml('assertions', 'llvm') == 'true'\n+            llvm_root = self.llvm_root()\n+            llvm_lib = os.path.join(llvm_root, \"lib\")\n             if self.program_out_of_date(self.llvm_stamp(), llvm_sha + str(llvm_assertions)):\n                 self._download_ci_llvm(llvm_sha, llvm_assertions)\n                 for binary in [\"llvm-config\", \"FileCheck\"]:\n-                    self.fix_bin_or_dylib(\"{}/bin/{}\".format(self.llvm_root(), binary))\n+                    self.fix_bin_or_dylib(os.path.join(llvm_root, \"bin\", binary), rpath_libz=True)\n+                for lib in os.listdir(llvm_lib):\n+                    if lib.endswith(\".so\"):\n+                        self.fix_bin_or_dylib(os.path.join(llvm_lib, lib), rpath_libz=True)\n                 with output(self.llvm_stamp()) as llvm_stamp:\n                     llvm_stamp.write(llvm_sha + str(llvm_assertions))\n \n@@ -501,7 +506,7 @@ def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n                 match=\"rust-dev\",\n                 verbose=self.verbose)\n \n-    def fix_bin_or_dylib(self, fname):\n+    def fix_bin_or_dylib(self, fname, rpath_libz=False):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n         or the RPATH section, to fix the dynamic library search path\n \n@@ -571,20 +576,22 @@ def fix_bin_or_dylib(self, fname):\n             self.nix_deps_dir = nix_deps_dir\n \n         patchelf = \"{}/patchelf/bin/patchelf\".format(nix_deps_dir)\n+        patchelf_args = []\n \n-        if fname.endswith(\".so\"):\n-            # Dynamic library, patch RPATH to point to system dependencies.\n+        if rpath_libz:\n+            # Patch RPATH to add `zlib` dependency that stems from LLVM\n             dylib_deps = [\"zlib\"]\n             rpath_entries = [\n                 # Relative default, all binary and dynamic libraries we ship\n                 # appear to have this (even when `../lib` is redundant).\n                 \"$ORIGIN/../lib\",\n             ] + [\"{}/{}/lib\".format(nix_deps_dir, dep) for dep in dylib_deps]\n-            patchelf_args = [\"--set-rpath\", \":\".join(rpath_entries)]\n-        else:\n+            patchelf_args += [\"--set-rpath\", \":\".join(rpath_entries)]\n+        if not fname.endswith(\".so\"):\n+            # Finally, set the corret .interp for binaries\n             bintools_dir = \"{}/stdenv.cc.bintools\".format(nix_deps_dir)\n             with open(\"{}/nix-support/dynamic-linker\".format(bintools_dir)) as dynamic_linker:\n-                patchelf_args = [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n+                patchelf_args += [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n \n         try:\n             subprocess.check_output([patchelf] + patchelf_args + [fname])"}, {"sha": "43fb53ba18fdae738b8a515d00d583153b631dc2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -84,14 +84,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         new_generics\n                     });\n \n-                let polarity;\n+                let negative_polarity;\n                 let new_generics = match result {\n                     AutoTraitResult::PositiveImpl(new_generics) => {\n-                        polarity = None;\n+                        negative_polarity = false;\n                         new_generics\n                     }\n                     AutoTraitResult::NegativeImpl => {\n-                        polarity = Some(ImplPolarity::Negative);\n+                        negative_polarity = true;\n \n                         // For negative impls, we use the generic params, but *not* the predicates,\n                         // from the original type. Otherwise, the displayed impl appears to be a\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n                         for_: ty.clean(self.cx),\n                         items: Vec::new(),\n-                        polarity,\n+                        negative_polarity,\n                         synthetic: true,\n                         blanket_impl: None,\n                     }),"}, {"sha": "f1c26feea46ec4376675ea9036e9dc4733fcdafe", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .in_definition_order()\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n-                        polarity: None,\n+                        negative_polarity: false,\n                         synthetic: false,\n                         blanket_impl: Some(trait_ref.self_ty().clean(self.cx)),\n                     }),"}, {"sha": "4c46771fd717068a0fea4ab323bec2b46fe30247", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 41, "deletions": 50, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -438,7 +438,7 @@ crate fn build_impl(\n             trait_,\n             for_,\n             items: trait_items,\n-            polarity: Some(polarity.clean(cx)),\n+            negative_polarity: polarity.clean(cx),\n             synthetic: false,\n             blanket_impl: None,\n         }),\n@@ -451,60 +451,51 @@ crate fn build_impl(\n \n fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>) -> clean::Module {\n     let mut items = Vec::new();\n-    fill_in(cx, did, &mut items, visited);\n-    return clean::Module { items, is_crate: false };\n-\n-    fn fill_in(\n-        cx: &DocContext<'_>,\n-        did: DefId,\n-        items: &mut Vec<clean::Item>,\n-        visited: &mut FxHashSet<DefId>,\n-    ) {\n-        // If we're re-exporting a re-export it may actually re-export something in\n-        // two namespaces, so the target may be listed twice. Make sure we only\n-        // visit each node at most once.\n-        for &item in cx.tcx.item_children(did).iter() {\n-            if item.vis == ty::Visibility::Public {\n-                if let Some(def_id) = item.res.mod_def_id() {\n-                    if did == def_id || !visited.insert(def_id) {\n-                        continue;\n-                    }\n+\n+    // If we're re-exporting a re-export it may actually re-export something in\n+    // two namespaces, so the target may be listed twice. Make sure we only\n+    // visit each node at most once.\n+    for &item in cx.tcx.item_children(did).iter() {\n+        if item.vis == ty::Visibility::Public {\n+            if let Some(def_id) = item.res.mod_def_id() {\n+                if did == def_id || !visited.insert(def_id) {\n+                    continue;\n                 }\n-                if let Res::PrimTy(p) = item.res {\n-                    // Primitive types can't be inlined so generate an import instead.\n-                    items.push(clean::Item {\n-                        name: None,\n-                        attrs: clean::Attributes::default(),\n-                        source: clean::Span::dummy(),\n-                        def_id: DefId::local(CRATE_DEF_INDEX),\n-                        visibility: clean::Public,\n-                        kind: box clean::ImportItem(clean::Import::new_simple(\n-                            item.ident.name,\n-                            clean::ImportSource {\n-                                path: clean::Path {\n-                                    global: false,\n-                                    res: item.res,\n-                                    segments: vec![clean::PathSegment {\n-                                        name: clean::PrimitiveType::from(p).as_sym(),\n-                                        args: clean::GenericArgs::AngleBracketed {\n-                                            args: Vec::new(),\n-                                            bindings: Vec::new(),\n-                                        },\n-                                    }],\n-                                },\n-                                did: None,\n+            }\n+            if let Res::PrimTy(p) = item.res {\n+                // Primitive types can't be inlined so generate an import instead.\n+                items.push(clean::Item {\n+                    name: None,\n+                    attrs: clean::Attributes::default(),\n+                    source: clean::Span::dummy(),\n+                    def_id: DefId::local(CRATE_DEF_INDEX),\n+                    visibility: clean::Public,\n+                    kind: box clean::ImportItem(clean::Import::new_simple(\n+                        item.ident.name,\n+                        clean::ImportSource {\n+                            path: clean::Path {\n+                                global: false,\n+                                res: item.res,\n+                                segments: vec![clean::PathSegment {\n+                                    name: clean::PrimitiveType::from(p).as_sym(),\n+                                    args: clean::GenericArgs::AngleBracketed {\n+                                        args: Vec::new(),\n+                                        bindings: Vec::new(),\n+                                    },\n+                                }],\n                             },\n-                            true,\n-                        )),\n-                    });\n-                } else if let Some(i) =\n-                    try_inline(cx, did, item.res, item.ident.name, None, visited)\n-                {\n-                    items.extend(i)\n-                }\n+                            did: None,\n+                        },\n+                        true,\n+                    )),\n+                });\n+            } else if let Some(i) = try_inline(cx, did, item.res, item.ident.name, None, visited) {\n+                items.extend(i)\n             }\n         }\n     }\n+\n+    clean::Module { items, is_crate: false }\n }\n \n crate fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {"}, {"sha": "14564e7f64aa5acc71311609a7014cbf8b8d890b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2069,13 +2069,14 @@ impl Clean<Item> for hir::Variant<'_> {\n     }\n }\n \n-impl Clean<ImplPolarity> for ty::ImplPolarity {\n-    fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n+impl Clean<bool> for ty::ImplPolarity {\n+    /// Returns whether the impl has negative polarity.\n+    fn clean(&self, _: &DocContext<'_>) -> bool {\n         match self {\n             &ty::ImplPolarity::Positive |\n             // FIXME: do we want to do something else here?\n-            &ty::ImplPolarity::Reservation => ImplPolarity::Positive,\n-            &ty::ImplPolarity::Negative => ImplPolarity::Negative,\n+            &ty::ImplPolarity::Reservation => false,\n+            &ty::ImplPolarity::Negative => true,\n         }\n     }\n }\n@@ -2116,7 +2117,7 @@ fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n             trait_,\n             for_,\n             items,\n-            polarity: Some(cx.tcx.impl_polarity(def_id).clean(cx)),\n+            negative_polarity: cx.tcx.impl_polarity(def_id).clean(cx),\n             synthetic: false,\n             blanket_impl: None,\n         });"}, {"sha": "7e567bedc7875a8ce52665569d80e95dfa7cf494", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -175,9 +175,11 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        matches!(*self.kind,\n+        matches!(\n+            *self.kind,\n             StrippedItem(box ModuleItem(Module { is_crate: true, .. }))\n-            | ModuleItem(Module { is_crate: true, .. }))\n+                | ModuleItem(Module { is_crate: true, .. })\n+        )\n     }\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module\n@@ -1226,6 +1228,7 @@ crate enum Type {\n     BareFunction(Box<BareFunctionDecl>),\n     Tuple(Vec<Type>),\n     Slice(Box<Type>),\n+    /// The `String` field is about the size or the constant representing the array's length.\n     Array(Box<Type>, String),\n     Never,\n     RawPointer(Mutability, Box<Type>),\n@@ -1857,12 +1860,6 @@ crate struct Constant {\n     crate is_literal: bool,\n }\n \n-#[derive(Clone, PartialEq, Debug)]\n-crate enum ImplPolarity {\n-    Positive,\n-    Negative,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Impl {\n     crate unsafety: hir::Unsafety,\n@@ -1871,7 +1868,7 @@ crate struct Impl {\n     crate trait_: Option<Type>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n-    crate polarity: Option<ImplPolarity>,\n+    crate negative_polarity: bool,\n     crate synthetic: bool,\n     crate blanket_impl: Option<Type>,\n }"}, {"sha": "5c2adca3126f71da5bb188dcc7df18d476b577b3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -870,7 +870,7 @@ impl clean::Impl {\n             }\n \n             if let Some(ref ty) = self.trait_ {\n-                if self.polarity == Some(clean::ImplPolarity::Negative) {\n+                if self.negative_polarity {\n                     write!(f, \"!\")?;\n                 }\n "}, {"sha": "6a32be609911adb590160926c9dbc5d06c042977", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -4327,16 +4327,15 @@ fn sidebar_assoc_items(cx: &Context<'_>, it: &clean::Item) -> String {\n \n                 let mut ret = impls\n                     .iter()\n-                    .filter_map(|i| {\n-                        let is_negative_impl = is_negative_impl(i.inner_impl());\n-                        if let Some(ref i) = i.inner_impl().trait_ {\n+                    .filter_map(|it| {\n+                        if let Some(ref i) = it.inner_impl().trait_ {\n                             let i_display = format!(\"{:#}\", i.print());\n                             let out = Escape(&i_display);\n                             let encoded = small_url_encode(&format!(\"{:#}\", i.print()));\n                             let generated = format!(\n                                 \"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n                                 encoded,\n-                                if is_negative_impl { \"!\" } else { \"\" },\n+                                if it.inner_impl().negative_polarity { \"!\" } else { \"\" },\n                                 out\n                             );\n                             if links.insert(generated.clone()) { Some(generated) } else { None }\n@@ -4503,10 +4502,6 @@ fn extract_for_impl_name(item: &clean::Item) -> Option<(String, String)> {\n     }\n }\n \n-fn is_negative_impl(i: &clean::Impl) -> bool {\n-    i.polarity == Some(clean::ImplPolarity::Negative)\n-}\n-\n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n "}, {"sha": "5dea64ef145871a72b7ab42eb03f59fd7682433e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -422,7 +422,7 @@ impl From<clean::Impl> for Impl {\n             trait_,\n             for_,\n             items,\n-            polarity,\n+            negative_polarity,\n             synthetic,\n             blanket_impl,\n         } = impl_;\n@@ -436,7 +436,7 @@ impl From<clean::Impl> for Impl {\n             trait_: trait_.map(Into::into),\n             for_: for_.into(),\n             items: ids(items),\n-            negative: polarity == Some(clean::ImplPolarity::Negative),\n+            negative: negative_polarity,\n             synthetic,\n             blanket_impl: blanket_impl.map(Into::into),\n         }"}, {"sha": "24d5770541273da00532a6e290c8e71d41b6dec8", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -70,7 +70,10 @@ impl Events {\n     }\n \n     fn is_comment(&self) -> bool {\n-        matches!(self, Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_))\n+        matches!(\n+            self,\n+            Events::StartLineComment(_) | Events::StartComment(_) | Events::EndComment(_)\n+        )\n     }\n }\n "}, {"sha": "fdf896d2dbbbd3f0a3aaedf4fbce94d097cb7084", "filename": "src/test/ui/error-codes/E0435.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+fn main () {\n+    #[allow(non_upper_case_globals)]\n+    const foo: usize = 42;\n+    let _: [u8; foo]; //~ ERROR E0435\n+}"}, {"sha": "d9354efb8fdc4594e4b57509f024178bbbe6ead1", "filename": "src/test/ui/error-codes/E0435.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n fn main () {\n-    let foo = 42u32;\n+    #[allow(non_upper_case_globals)]\n+    let foo: usize = 42;\n     let _: [u8; foo]; //~ ERROR E0435\n }"}, {"sha": "fc08fade91cee5c9f0ce7a5ce08ad9e0721531f4", "filename": "src/test/ui/error-codes/E0435.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/E0435.rs:3:17\n+  --> $DIR/E0435.rs:5:17\n    |\n-LL |     let foo = 42u32;\n-   |         --- help: consider using `const` instead of `let`\n+LL |     let foo: usize = 42;\n+   |     ------- help: consider using `const` instead of `let`: `const foo`\n LL |     let _: [u8; foo];\n    |                 ^^^ non-constant value\n "}, {"sha": "4da49f4dc7db167fbee93f1f5fa6f7faa6f30709", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,33 +2,33 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:5:29\n    |\n LL |     const foo: impl Clone = x;\n-   |           ---               ^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     ---------               ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:11:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:18:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:25:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings.rs:1:12"}, {"sha": "ce31f6bea4bdd7ea331b80ec591e448f52c61abe", "filename": "src/test/ui/issues/issue-27433.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+fn main() {\n+    let foo = 42u32;\n+    #[allow(unused_variables, non_snake_case)]\n+    let FOO : u32 = foo;\n+                   //~^ ERROR attempt to use a non-constant value in a constant\n+}"}, {"sha": "01411a51c1372c5d5b4d374ce54450bce6b46f17", "filename": "src/test/ui/issues/issue-27433.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n fn main() {\n     let foo = 42u32;\n+    #[allow(unused_variables, non_snake_case)]\n     const FOO : u32 = foo;\n                    //~^ ERROR attempt to use a non-constant value in a constant\n }"}, {"sha": "da751a64957363be2bf1b69a7b16060008273dfd", "filename": "src/test/ui/issues/issue-27433.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-27433.rs:3:23\n+  --> $DIR/issue-27433.rs:5:23\n    |\n LL |     const FOO : u32 = foo;\n-   |           ---         ^^^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     ---------         ^^^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let FOO`\n \n error: aborting due to previous error\n "}, {"sha": "140c24b9395caa642c665a1033b44d16113478b8", "filename": "src/test/ui/issues/issue-3521-2.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn main() {\n+    let foo = 100;\n+\n+    let y: isize = foo + 1;\n+    //~^ ERROR attempt to use a non-constant value in a constant\n+\n+    println!(\"{}\", y);\n+}"}, {"sha": "f66efec45e549ab2d81279f106793d8f8917db9e", "filename": "src/test/ui/issues/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n     let foo = 100;\n "}, {"sha": "84c7a9efa35bbf61546b7f75d9c26db61f255646", "filename": "src/test/ui/issues/issue-3521-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3521-2.rs:4:23\n+  --> $DIR/issue-3521-2.rs:5:23\n    |\n LL |     static y: isize = foo + 1;\n-   |            -          ^^^ non-constant value\n-   |            |\n-   |            help: consider using `let` instead of `static`\n+   |     --------          ^^^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `static`: `let y`\n \n error: aborting due to previous error\n "}, {"sha": "f76106dfff1871a6b784208db9e5561297fd6956", "filename": "src/test/ui/issues/issue-3521.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+fn main() {\n+    #[allow(non_upper_case_globals)]\n+    const foo: isize = 100;\n+\n+    #[derive(Debug)]\n+    enum Stuff {\n+        Bar = foo\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+    }\n+\n+    println!(\"{:?}\", Stuff::Bar);\n+}"}, {"sha": "c425a22df91737afb327b28247611b3093c96def", "filename": "src/test/ui/issues/issue-3521.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n fn main() {\n-    let foo = 100;\n+    #[allow(non_upper_case_globals)]\n+    let foo: isize = 100;\n \n     #[derive(Debug)]\n     enum Stuff {"}, {"sha": "aa42772f12d8a4c0f5b528ff5c1bb112294afaa6", "filename": "src/test/ui/issues/issue-3521.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3521.rs:6:15\n+  --> $DIR/issue-3521.rs:8:15\n    |\n-LL |     let foo = 100;\n-   |         --- help: consider using `const` instead of `let`\n+LL |     let foo: isize = 100;\n+   |     ------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         Bar = foo\n    |               ^^^ non-constant value"}, {"sha": "a95781c6edc82c8e2fb98b97d53e3bda867cb40b", "filename": "src/test/ui/issues/issue-3668-2.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+fn f(x:isize) {\n+    let child: isize = x + 1;\n+    //~^ ERROR attempt to use a non-constant value in a constant\n+}\n+\n+fn main() {}"}, {"sha": "8aa0897ecb4dc791cf9990716c99b8f63035143a", "filename": "src/test/ui/issues/issue-3668-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n fn f(x:isize) {\n     static child: isize = x + 1;\n     //~^ ERROR attempt to use a non-constant value in a constant"}, {"sha": "ba96510415435125df33dc53af8a02329baa4a9d", "filename": "src/test/ui/issues/issue-3668-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3668-2.rs:2:27\n+  --> $DIR/issue-3668-2.rs:4:27\n    |\n LL |     static child: isize = x + 1;\n-   |            -----          ^ non-constant value\n-   |            |\n-   |            help: consider using `let` instead of `static`\n+   |     ------------          ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `static`: `let child`\n \n error: aborting due to previous error\n "}, {"sha": "edc49979c10a08abc75429468f23ef8d754213de", "filename": "src/test/ui/issues/issue-3668.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668.rs:8:34\n    |\n LL |        static childVal: Box<P> = self.child.get();\n-   |               --------           ^^^^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `static`\n+   |        ---------------           ^^^^ non-constant value\n+   |        |\n+   |        help: consider using `let` instead of `static`: `let childVal`\n \n error: aborting due to previous error\n "}, {"sha": "effcbe4d7f3e868121aaf41d2f2f0a262e267727", "filename": "src/test/ui/issues/issue-42060.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,15 +2,15 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:3:23\n    |\n LL |     let thing = ();\n-   |         ----- help: consider using `const` instead of `let`\n+   |     --------- help: consider using `const` instead of `let`: `const thing`\n LL |     let other: typeof(thing) = thing;\n    |                       ^^^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:9:13\n    |\n LL |     let q = 1;\n-   |         - help: consider using `const` instead of `let`\n+   |     ----- help: consider using `const` instead of `let`: `const q`\n LL |     <typeof(q)>::N\n    |             ^ non-constant value\n "}, {"sha": "e6c29cee97d2fa5a7c9303bd84d2502783d92a1b", "filename": "src/test/ui/issues/issue-44239.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code, non_upper_case_globals)]\n+fn main() {\n+    const n: usize = 0;\n+\n+    struct Foo;\n+    impl Foo {\n+        const N: usize = n;\n+        //~^ ERROR attempt to use a non-constant value\n+    }\n+}"}, {"sha": "482ed194c7a1c117a19ad39219fbdc5691a24eb1", "filename": "src/test/ui/issues/issue-44239.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n+#![allow(dead_code, non_upper_case_globals)]\n fn main() {\n-    let n = 0;\n+    let n: usize = 0;\n \n     struct Foo;\n     impl Foo {"}, {"sha": "2a245c92c4868ff0be861be7b1b5758eecc5d017", "filename": "src/test/ui/issues/issue-44239.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-44239.rs:6:26\n+  --> $DIR/issue-44239.rs:8:26\n    |\n-LL |     let n = 0;\n-   |         - help: consider using `const` instead of `let`\n+LL |     let n: usize = 0;\n+   |     ----- help: consider using `const` instead of `let`: `const n`\n ...\n LL |         const N: usize = n;\n    |                          ^ non-constant value"}, {"sha": "d684b8eaabdfe91652a2824fbdd3c3ede6c2f3ce", "filename": "src/test/ui/non-constant-expr-for-arr-len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/non-constant-expr-for-arr-len.rs:5:22\n    |\n LL |     fn bar(n: usize) {\n-   |            - help: consider using `const` instead of `let`\n+   |            - this would need to be a `const`\n LL |         let _x = [0; n];\n-   |                      ^ non-constant value\n+   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "e90754e9118d25e9e5728441630e087e22c1e066", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,7 +2,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/repeat_count.rs:5:17\n    |\n LL |     let n = 1;\n-   |         - help: consider using `const` instead of `let`\n+   |     ----- help: consider using `const` instead of `let`: `const n`\n LL |     let a = [0; n];\n    |                 ^ non-constant value\n "}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34628e5b533d35840b61c5db0665cf7633ed3c5a/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=34628e5b533d35840b61c5db0665cf7633ed3c5a", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/type-dependent-def-issue-49241.rs:3:22\n    |\n LL |     const l: usize = v.count();\n-   |           -          ^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     -------          ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let l`\n \n error: aborting due to previous error\n "}]}