{"sha": "00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjQwMTlmMjhmM2U3ZjlhZTM5OTBlZDg3MWNiNDkxN2ZkOWU2NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-23T15:59:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-23T15:59:07Z"}, "message": "Auto merge of #38529 - nrc:save-sig, r=nikomatsakis\n\nsave-analysis: add signature info\n\nThese 'signatures' for definitions contain enough info for the RLS to create Rustdoc-style info on the fly.", "tree": {"sha": "10588f7afa6278048c2181342dcf906b780f98e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10588f7afa6278048c2181342dcf906b780f98e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "html_url": "https://github.com/rust-lang/rust/commit/00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4461f4cfa09045e5c03f45e343b01bc5dd22e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4461f4cfa09045e5c03f45e343b01bc5dd22e4", "html_url": "https://github.com/rust-lang/rust/commit/ce4461f4cfa09045e5c03f45e343b01bc5dd22e4"}, {"sha": "c24b1928ca97f98b72b4413b177a7eb3fe73456f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24b1928ca97f98b72b4413b177a7eb3fe73456f", "html_url": "https://github.com/rust-lang/rust/commit/c24b1928ca97f98b72b4413b177a7eb3fe73456f"}], "stats": {"total": 336, "additions": 320, "deletions": 16}, "files": [{"sha": "0a6281bf8c54ccaf4357f956fc97844fe136a41d", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -135,6 +135,7 @@ pub struct EnumData {\n     pub variants: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for extern crates.\n@@ -169,6 +170,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data about a function call.\n@@ -253,6 +255,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for modules.\n@@ -267,6 +270,7 @@ pub struct ModData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for a reference to a module.\n@@ -290,6 +294,7 @@ pub struct StructData {\n     pub fields: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -303,6 +308,7 @@ pub struct StructVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -316,6 +322,7 @@ pub struct TraitData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -329,6 +336,7 @@ pub struct TupleVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for a typedef.\n@@ -342,6 +350,7 @@ pub struct TypeDefData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -386,6 +395,7 @@ pub struct VariableData {\n     pub type_value: String,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -405,3 +415,28 @@ pub struct VariableRefData {\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n+\n+\n+/// Encodes information about the signature of a definition. This should have\n+/// enough information to create a nice display about a definition without\n+/// access to the source code.\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct Signature {\n+    pub span: Span,\n+    pub text: String,\n+    // These identify the main identifier for the defintion as byte offsets into\n+    // `text`. E.g., of `foo` in `pub fn foo(...)`\n+    pub ident_start: usize,\n+    pub ident_end: usize,\n+    pub defs: Vec<SigElement>,\n+    pub refs: Vec<SigElement>,\n+}\n+\n+/// An element of a signature. `start` and `end` are byte offsets into the `text`\n+/// of the parent `Signature`.\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct SigElement {\n+    pub id: DefId,\n+    pub start: usize,\n+    pub end: usize,\n+}"}, {"sha": "093a739c69ffadbc6550653cdff9f222ae474c1b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -357,6 +357,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         parent: None,\n                         visibility: Visibility::Inherited,\n                         docs: String::new(),\n+                        sig: None,\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -429,6 +430,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: trait_id,\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n+                    sig: method_data.sig,\n                 }.lower(self.tcx));\n             }\n \n@@ -500,6 +502,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: Visibility::Inherited,\n                     parent: None,\n                     docs: String::new(),\n+                    sig: None,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -572,6 +575,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: Some(parent_id),\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n+                sig: None,\n             }.lower(self.tcx));\n         }\n \n@@ -615,11 +619,10 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 fields: fields,\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n+                sig: self.save_ctxt.sig_base(item),\n             }.lower(self.tcx));\n         }\n \n-\n-        // fields\n         for field in def.fields() {\n             self.process_struct_field_def(field, item.id);\n             self.visit_ty(&field.ty);\n@@ -648,6 +651,18 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             qualname.push_str(\"::\");\n             qualname.push_str(&name);\n \n+            let text = self.span.signature_string_for_span(variant.span);\n+            let ident_start = text.find(&name).unwrap();\n+            let ident_end = ident_start + name.len();\n+            let sig = Signature {\n+                span: variant.span,\n+                text: text,\n+                ident_start: ident_start,\n+                ident_end: ident_end,\n+                defs: vec![],\n+                refs: vec![],\n+            };\n+\n             match variant.node.data {\n                 ast::VariantData::Struct(ref fields, _) => {\n                     let sub_span = self.span.span_for_first_ident(variant.span);\n@@ -669,6 +684,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n+                            sig: sig,\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -694,6 +710,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n+                            sig: sig,\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -778,6 +795,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 items: methods.iter().map(|i| i.id).collect(),\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n+                sig: self.save_ctxt.sig_base(item),\n             }.lower(self.tcx));\n         }\n \n@@ -1043,6 +1061,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: None,\n                     visibility: Visibility::Inherited,\n                     docs: String::new(),\n+                    sig: None,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1257,10 +1276,10 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             Struct(ref def, ref ty_params) => self.process_struct(item, def, ty_params),\n             Enum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n             Impl(..,\n-                          ref ty_params,\n-                          ref trait_ref,\n-                          ref typ,\n-                          ref impl_items) => {\n+                 ref ty_params,\n+                 ref trait_ref,\n+                 ref typ,\n+                 ref impl_items) => {\n                 self.process_impl(item, ty_params, trait_ref, &typ, impl_items)\n             }\n             Trait(_, ref generics, ref trait_refs, ref methods) =>\n@@ -1283,6 +1302,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         visibility: From::from(&item.vis),\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n+                        sig: Some(self.save_ctxt.sig_base(item)),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1492,6 +1512,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             parent: None,\n                             visibility: Visibility::Inherited,\n                             docs: String::new(),\n+                            sig: None,\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "18ae3a7fa9ea8b1c83ded974401100d642048b28", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::NodeId;\n use syntax::codemap::CodeMap;\n use syntax_pos::Span;\n \n-use data::{self, Visibility};\n+use data::{self, Visibility, SigElement};\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n@@ -97,6 +97,7 @@ pub struct EnumData {\n     pub variants: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::EnumData {\n@@ -113,6 +114,7 @@ impl Lower for data::EnumData {\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -176,6 +178,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::FunctionData {\n@@ -193,6 +196,7 @@ impl Lower for data::FunctionData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -341,6 +345,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::MethodData {\n@@ -358,6 +363,7 @@ impl Lower for data::MethodData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -374,6 +380,7 @@ pub struct ModData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::ModData {\n@@ -390,6 +397,7 @@ impl Lower for data::ModData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -428,6 +436,7 @@ pub struct StructData {\n     pub fields: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::StructData {\n@@ -445,6 +454,7 @@ impl Lower for data::StructData {\n             fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -460,6 +470,7 @@ pub struct StructVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::StructVariantData {\n@@ -476,6 +487,7 @@ impl Lower for data::StructVariantData {\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -491,6 +503,7 @@ pub struct TraitData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::TraitData {\n@@ -507,6 +520,7 @@ impl Lower for data::TraitData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -522,6 +536,7 @@ pub struct TupleVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -538,6 +553,7 @@ impl Lower for data::TupleVariantData {\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -553,6 +569,7 @@ pub struct TypeDefData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -568,6 +585,7 @@ impl Lower for data::TypeDefData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.map(|s| s.lower(tcx)),\n         }\n     }\n }\n@@ -656,6 +674,7 @@ pub struct VariableData {\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n impl Lower for data::VariableData {\n@@ -674,6 +693,7 @@ impl Lower for data::VariableData {\n             parent: self.parent,\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.map(|s| s.lower(tcx)),\n         }\n     }\n }\n@@ -700,3 +720,30 @@ impl Lower for data::VariableRefData {\n         }\n     }\n }\n+\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct Signature {\n+    pub span: SpanData,\n+    pub text: String,\n+    // These identify the main identifier for the defintion as byte offsets into\n+    // `text`. E.g., of `foo` in `pub fn foo(...)`\n+    pub ident_start: usize,\n+    pub ident_end: usize,\n+    pub defs: Vec<SigElement>,\n+    pub refs: Vec<SigElement>,\n+}\n+\n+impl Lower for data::Signature {\n+    type Target = Signature;\n+\n+    fn lower(self, tcx: TyCtxt) -> Signature {\n+        Signature {\n+            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            text: self.text,\n+            ident_start: self.ident_start,\n+            ident_end: self.ident_end,\n+            defs: self.defs,\n+            refs: self.refs,\n+        }\n+    }\n+}"}, {"sha": "342c33af2f8963854b65a15e5a60e6c0e76c78a9", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use external_data::*;\n-use data::{VariableKind, Visibility};\n+use data::{VariableKind, Visibility, SigElement};\n use dump::Dump;\n use super::Format;\n \n@@ -179,6 +179,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n+    sig: Option<JsonSignature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -221,6 +222,7 @@ impl From<EnumData> for Option<Def> {\n                 children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: Some(From::from(data.sig)),\n             }),\n             _ => None,\n         }\n@@ -240,6 +242,7 @@ impl From<TupleVariantData> for Option<Def> {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         })\n     }\n }\n@@ -256,6 +259,7 @@ impl From<StructVariantData> for Option<Def> {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         })\n     }\n }\n@@ -273,6 +277,7 @@ impl From<StructData> for Option<Def> {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }),\n             _ => None,\n         }\n@@ -292,6 +297,7 @@ impl From<TraitData> for Option<Def> {\n                 parent: None,\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: Some(From::from(data.sig)),\n             }),\n             _ => None,\n         }\n@@ -311,6 +317,7 @@ impl From<FunctionData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: Some(From::from(data.sig)),\n             }),\n             _ => None,\n         }\n@@ -330,6 +337,7 @@ impl From<MethodData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: data.decl_id.map(|id| From::from(id)),\n                 docs: data.docs,\n+                sig: Some(From::from(data.sig)),\n             }),\n             _ => None,\n         }\n@@ -348,6 +356,7 @@ impl From<MacroData> for Option<Def> {\n             parent: None,\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         })\n     }\n }\n@@ -365,6 +374,7 @@ impl From<ModData> for Option<Def> {\n                 parent: None,\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: Some(From::from(data.sig)),\n             }),\n             _ => None,\n         }\n@@ -384,11 +394,13 @@ impl From<TypeDefData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: String::new(),\n+                sig: data.sig.map(|s| From::from(s)),\n             }),\n             _ => None,\n         }\n     }\n }\n+\n impl From<VariableData> for Option<Def> {\n     fn from(data: VariableData) -> Option<Def> {\n         match data.visibility {\n@@ -408,8 +420,49 @@ impl From<VariableData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n+                sig: data.sig.map(|s| From::from(s)),\n             }),\n             _ => None,\n         }\n     }\n }\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSignature {\n+    span: SpanData,\n+    text: String,\n+    ident_start: usize,\n+    ident_end: usize,\n+    defs: Vec<JsonSigElement>,\n+    refs: Vec<JsonSigElement>,\n+}\n+\n+impl From<Signature> for JsonSignature {\n+    fn from(data: Signature) -> JsonSignature {\n+        JsonSignature {\n+            span: data.span,\n+            text: data.text,\n+            ident_start: data.ident_start,\n+            ident_end: data.ident_end,\n+            defs: data.defs.into_iter().map(|s| From::from(s)).collect(),\n+            refs: data.refs.into_iter().map(|s| From::from(s)).collect(),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSigElement {\n+    id: Id,\n+    start: usize,\n+    end: usize,\n+}\n+\n+impl From<SigElement> for JsonSigElement {\n+    fn from(data: SigElement) -> JsonSigElement {\n+        JsonSigElement {\n+            id: From::from(data.id),\n+            start: data.start,\n+            end: data.end,\n+        }\n+    }\n+}"}, {"sha": "16c06a556df0e74932559e5e2dddbe1140a78bb9", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use external_data::*;\n-use data::VariableKind;\n+use data::{VariableKind, SigElement};\n use dump::Dump;\n use super::Format;\n \n@@ -86,6 +86,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -223,6 +224,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n+    sig: Option<JsonSignature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -264,6 +266,7 @@ impl From<EnumData> for Def {\n             children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -280,6 +283,7 @@ impl From<TupleVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -295,6 +299,7 @@ impl From<StructVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -310,6 +315,7 @@ impl From<StructData> for Def {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -325,6 +331,7 @@ impl From<TraitData> for Def {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -340,6 +347,7 @@ impl From<FunctionData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -355,6 +363,7 @@ impl From<MethodData> for Def {\n             children: vec![],\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -370,10 +379,10 @@ impl From<MacroData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n-\n impl From<TypeDefData> for Def {\n     fn from(data: TypeDefData) -> Def {\n         Def {\n@@ -386,6 +395,7 @@ impl From<TypeDefData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: String::new(),\n+            sig: data.sig.map(|s| From::from(s)),\n         }\n     }\n }\n@@ -406,6 +416,7 @@ impl From<VariableData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n+            sig: None,\n         }\n     }\n }\n@@ -496,3 +507,43 @@ impl From<MacroUseData> for MacroRef {\n         }\n     }\n }\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSignature {\n+    span: SpanData,\n+    text: String,\n+    ident_start: usize,\n+    ident_end: usize,\n+    defs: Vec<JsonSigElement>,\n+    refs: Vec<JsonSigElement>,\n+}\n+\n+impl From<Signature> for JsonSignature {\n+    fn from(data: Signature) -> JsonSignature {\n+        JsonSignature {\n+            span: data.span,\n+            text: data.text,\n+            ident_start: data.ident_start,\n+            ident_end: data.ident_end,\n+            defs: data.defs.into_iter().map(|s| From::from(s)).collect(),\n+            refs: data.refs.into_iter().map(|s| From::from(s)).collect(),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSigElement {\n+    id: Id,\n+    start: usize,\n+    end: usize,\n+}\n+\n+impl From<SigElement> for JsonSigElement {\n+    fn from(data: SigElement) -> JsonSigElement {\n+        JsonSigElement {\n+            id: From::from(data.id),\n+            start: data.start,\n+            end: data.end,\n+        }\n+    }\n+}"}, {"sha": "491521a3239495454e9bb5680bf1535b26b1dff0", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -152,6 +152,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -179,6 +180,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: Some(self.sig_base(item)),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -197,6 +199,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: Some(self.sig_base(item)),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -207,6 +210,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Mod);\n                 filter!(self.span_utils, sub_span, item.span, None);\n+\n                 Some(Data::ModData(ModData {\n                     id: item.id,\n                     name: item.ident.to_string(),\n@@ -217,6 +221,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -239,6 +244,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -287,18 +293,34 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_field_data(&self, field: &ast::StructField,\n-                          scope: NodeId) -> Option<VariableData> {\n+    pub fn get_field_data(&self,\n+                          field: &ast::StructField,\n+                          scope: NodeId)\n+                          -> Option<VariableData> {\n         if let Some(ident) = field.ident {\n+            let name = ident.to_string();\n             let qualname = format!(\"::{}::{}\", self.tcx.node_path_str(scope), ident);\n-            let def_id = self.tcx.map.local_def_id(field.id);\n-            let typ = self.tcx.item_type(def_id).to_string();\n             let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n             filter!(self.span_utils, sub_span, field.span, None);\n+            let def_id = self.tcx.map.local_def_id(field.id);\n+            let typ = self.tcx.item_type(def_id).to_string();\n+\n+            let span = field.span;\n+            let text = self.span_utils.snippet(field.span);\n+            let ident_start = text.find(&name).unwrap();\n+            let ident_end = ident_start + name.len();\n+            let sig = Signature {\n+                span: span,\n+                text: text,\n+                ident_start: ident_start,\n+                ident_end: ident_end,\n+                defs: vec![],\n+                refs: vec![],\n+            };\n             Some(VariableData {\n                 id: field.id,\n                 kind: VariableKind::Field,\n-                name: ident.to_string(),\n+                name: name,\n                 qualname: qualname,\n                 span: sub_span.unwrap(),\n                 scope: scope,\n@@ -307,6 +329,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n+                sig: Some(sig),\n             })\n         } else {\n             None\n@@ -388,9 +411,23 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         let sub_span = self.span_utils.sub_span_after_keyword(span, keywords::Fn);\n         filter!(self.span_utils, sub_span, span, None);\n+\n+        let name = name.to_string();\n+        let text = self.span_utils.signature_string_for_span(span);\n+        let ident_start = text.find(&name).unwrap();\n+        let ident_end = ident_start + name.len();\n+        let sig = Signature {\n+            span: span,\n+            text: text,\n+            ident_start: ident_start,\n+            ident_end: ident_end,\n+            defs: vec![],\n+            refs: vec![],\n+        };\n+\n         Some(FunctionData {\n             id: id,\n-            name: name.to_string(),\n+            name: name,\n             qualname: qualname,\n             declaration: decl_id,\n             span: sub_span.unwrap(),\n@@ -400,6 +437,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             visibility: vis,\n             parent: parent_scope,\n             docs: docs,\n+            sig: sig,\n         })\n     }\n \n@@ -695,6 +733,21 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    fn sig_base(&self, item: &ast::Item) -> Signature {\n+        let text = self.span_utils.signature_string_for_span(item.span);\n+        let name = item.ident.to_string();\n+        let ident_start = text.find(&name).expect(\"Name not in signature?\");\n+        let ident_end = ident_start + name.len();\n+        Signature {\n+            span: mk_sp(item.span.lo, item.span.lo + BytePos(text.len() as u32)),\n+            text: text,\n+            ident_start: ident_start,\n+            ident_end: ident_end,\n+            defs: vec![],\n+            refs: vec![],\n+        }\n+    }\n+\n     #[inline]\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.map.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)"}, {"sha": "448bb2e761749c380ba4620ee669ef262b502c37", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b4019f28f3e7f9ae3990ed871cb4917fd9e659/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "patch": "@@ -19,7 +19,9 @@ use std::path::Path;\n use syntax::ast;\n use syntax::parse::lexer::{self, Reader, StringReader};\n use syntax::parse::token::{self, Token};\n+use syntax::parse::parser::Parser;\n use syntax::symbol::keywords;\n+use syntax::tokenstream::TokenTree;\n use syntax_pos::*;\n \n #[derive(Clone)]\n@@ -87,6 +89,12 @@ impl<'a> SpanUtils<'a> {\n         lexer::StringReader::new(s.diagnostic(), filemap)\n     }\n \n+    fn span_to_tts(&self, span: Span) -> Vec<TokenTree> {\n+        let srdr = self.retokenise_span(span);\n+        let mut p = Parser::new(&self.sess.parse_sess, Box::new(srdr), None, false);\n+        p.parse_all_token_trees().expect(\"Couldn't re-parse span\")\n+    }\n+\n     // Re-parses a path and returns the span for the last identifier in the path\n     pub fn span_for_last_ident(&self, span: Span) -> Option<Span> {\n         let mut result = None;\n@@ -308,6 +316,42 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n+    /// `span` must be the span for an item such as a function or struct. This\n+    /// function returns the program text from the start of the span until the\n+    /// end of the 'signature' part, that is up to, but not including an opening\n+    /// brace or semicolon.\n+    pub fn signature_string_for_span(&self, span: Span) -> String {\n+        let mut toks = self.span_to_tts(span).into_iter();\n+        let mut prev = toks.next().unwrap();\n+        let first_span = prev.get_span();\n+        let mut angle_count = 0;\n+        for tok in toks {\n+            if let TokenTree::Token(_, ref tok) = prev {\n+                angle_count += match *tok {\n+                    token::Eof => { break; }\n+                    token::Lt => 1,\n+                    token::Gt => -1,\n+                    token::BinOp(token::Shl) => 2,\n+                    token::BinOp(token::Shr) => -2,\n+                    _ => 0,\n+                };\n+            }\n+            if angle_count > 0 {\n+                prev = tok;\n+                continue;\n+            }\n+            if let TokenTree::Token(_, token::Semi) = tok {\n+                return self.snippet(mk_sp(first_span.lo, prev.get_span().hi));\n+            } else if let TokenTree::Delimited(_, ref d) = tok {\n+                if d.delim == token::Brace {\n+                    return self.snippet(mk_sp(first_span.lo, prev.get_span().hi));\n+                }\n+            }\n+            prev = tok;\n+        }\n+        self.snippet(span)\n+    }\n+\n     pub fn sub_span_before_token(&self, span: Span, tok: Token) -> Option<Span> {\n         let mut toks = self.retokenise_span(span);\n         let mut prev = toks.real_token();"}]}