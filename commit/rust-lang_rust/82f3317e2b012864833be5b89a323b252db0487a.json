{"sha": "82f3317e2b012864833be5b89a323b252db0487a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjMzMTdlMmIwMTI4NjQ4MzNiZTViODlhMzIzYjI1MmRiMDQ4N2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-05T10:39:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T10:39:35Z"}, "message": "Merge #1761\n\n1761: \"move type bounds to where clause\" assist r=matklad a=viorina\n\n\n\nCo-authored-by: Ekaterina Babshukova <ekaterina.babshukova@yandex.ru>", "tree": {"sha": "965936cdcd0ecd9b7256539b6e7245eaa6f9bf66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/965936cdcd0ecd9b7256539b6e7245eaa6f9bf66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f3317e2b012864833be5b89a323b252db0487a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcOXnCRBK7hj4Ov3rIwAAdHIIAJ80I6V1OzQVSaGlvcNf9kNt\neJNtD7LPH8deW74axoTZ6w0l4P/QxLyfWPr2L5wmWDKPNWGI+v8bsk+dxxNLEPJ1\nXgSZyyaH+xJd823DZUcMFK8anQpCQyhzFpeG2mFhqq1I19qLDaepPeUxmBwDAubr\nh4XqqWmwVSI0eqyCr+D/80bedniVbtfS8RyyO4nDHB2hD+eNJfK8FtxstxOHtmqt\nLZ1yI6rhJtA6Q2YxL/9aCouJXloy2cp5nXtelwOX7zDf02l1Y2F62S4OTim5Ayuv\nxQahL0rhCX2OwK0xKxj9RBMFOiFDhwjjyfnWEHfRrAdLbG3FMf14pFiZzG00/u8=\n=1RkT\n-----END PGP SIGNATURE-----\n", "payload": "tree 965936cdcd0ecd9b7256539b6e7245eaa6f9bf66\nparent 6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a\nparent acb89d2be12f6a1556d9a366231604371a62fdcd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567679975 +0000\ncommitter GitHub <noreply@github.com> 1567679975 +0000\n\nMerge #1761\n\n1761: \"move type bounds to where clause\" assist r=matklad a=viorina\n\n\n\nCo-authored-by: Ekaterina Babshukova <ekaterina.babshukova@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f3317e2b012864833be5b89a323b252db0487a", "html_url": "https://github.com/rust-lang/rust/commit/82f3317e2b012864833be5b89a323b252db0487a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f3317e2b012864833be5b89a323b252db0487a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "html_url": "https://github.com/rust-lang/rust/commit/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a"}, {"sha": "acb89d2be12f6a1556d9a366231604371a62fdcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb89d2be12f6a1556d9a366231604371a62fdcd", "html_url": "https://github.com/rust-lang/rust/commit/acb89d2be12f6a1556d9a366231604371a62fdcd"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "a710edce8e27ed48f82da7e700ea37ce5226e53f", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=82f3317e2b012864833be5b89a323b252db0487a", "patch": "@@ -297,6 +297,11 @@ impl AstBuilder<ast::Path> {\n         ast_node_from_file_text(text)\n     }\n \n+    pub fn from_name(name: ast::Name) -> ast::Path {\n+        let name = name.syntax().to_string();\n+        Self::from_text(name.as_str())\n+    }\n+\n     pub fn from_pieces(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n         Self::from_text(&format!(\"{}::{}\", enum_name.syntax(), var_name.syntax()))\n     }\n@@ -380,6 +385,31 @@ impl AstBuilder<ast::MatchArmList> {\n     }\n }\n \n+impl AstBuilder<ast::WherePred> {\n+    fn from_text(text: &str) -> ast::WherePred {\n+        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    }\n+\n+    pub fn from_pieces(\n+        path: ast::Path,\n+        bounds: impl Iterator<Item = ast::TypeBound>,\n+    ) -> ast::WherePred {\n+        let bounds = bounds.map(|b| b.syntax().to_string()).collect::<Vec<_>>().join(\" + \");\n+        Self::from_text(&format!(\"{}: {}\", path.syntax(), bounds))\n+    }\n+}\n+\n+impl AstBuilder<ast::WhereClause> {\n+    fn from_text(text: &str) -> ast::WhereClause {\n+        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    }\n+\n+    pub fn from_predicates(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n+        let preds = preds.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n+        Self::from_text(preds.as_str())\n+    }\n+}\n+\n fn ast_node_from_file_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();"}, {"sha": "10ccc345c9d8437a560235c67d39580da7e76e11", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=82f3317e2b012864833be5b89a323b252db0487a", "patch": "@@ -102,6 +102,7 @@ mod remove_dbg;\n pub mod auto_import;\n mod add_missing_impl_members;\n mod move_guard;\n+mod move_bounds;\n \n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n@@ -123,6 +124,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         inline_local_variable::inline_local_varialbe,\n         move_guard::move_guard_to_arm_body,\n         move_guard::move_arm_cond_to_match_guard,\n+        move_bounds::move_bounds_to_where_clause,\n     ]\n }\n "}, {"sha": "526de1d98368bc98d1715b4b419accfc2ea153eb", "filename": "crates/ra_assists/src/move_bounds.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f3317e2b012864833be5b89a323b252db0487a/crates%2Fra_assists%2Fsrc%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_bounds.rs?ref=82f3317e2b012864833be5b89a323b252db0487a", "patch": "@@ -0,0 +1,135 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    ast::{self, AstNode, NameOwner, TypeBoundsOwner},\n+    SyntaxElement,\n+    SyntaxKind::*,\n+    TextRange,\n+};\n+\n+use crate::{ast_editor::AstBuilder, Assist, AssistCtx, AssistId};\n+\n+pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;\n+\n+    let mut type_params = type_param_list.type_params();\n+    if type_params.all(|p| p.type_bound_list().is_none()) {\n+        return None;\n+    }\n+\n+    let parent = type_param_list.syntax().parent()?;\n+    if parent.children_with_tokens().find(|it| it.kind() == WHERE_CLAUSE).is_some() {\n+        return None;\n+    }\n+\n+    let anchor: SyntaxElement = match parent.kind() {\n+        FN_DEF => ast::FnDef::cast(parent)?.body()?.syntax().clone().into(),\n+        TRAIT_DEF => ast::TraitDef::cast(parent)?.item_list()?.syntax().clone().into(),\n+        IMPL_BLOCK => ast::ImplBlock::cast(parent)?.item_list()?.syntax().clone().into(),\n+        ENUM_DEF => ast::EnumDef::cast(parent)?.variant_list()?.syntax().clone().into(),\n+        STRUCT_DEF => parent\n+            .children_with_tokens()\n+            .find(|it| it.kind() == RECORD_FIELD_DEF_LIST || it.kind() == SEMI)?,\n+        _ => return None,\n+    };\n+\n+    ctx.add_action(\n+        AssistId(\"move_bounds_to_where_clause\"),\n+        \"move_bounds_to_where_clause\",\n+        |edit| {\n+            let type_params = type_param_list.type_params().collect::<Vec<_>>();\n+\n+            for param in &type_params {\n+                if let Some(bounds) = param.type_bound_list() {\n+                    let colon = param\n+                        .syntax()\n+                        .children_with_tokens()\n+                        .find(|it| it.kind() == COLON)\n+                        .unwrap();\n+                    let start = colon.text_range().start();\n+                    let end = bounds.syntax().text_range().end();\n+                    edit.delete(TextRange::from_to(start, end));\n+                }\n+            }\n+\n+            let predicates = type_params.iter().filter_map(build_predicate);\n+            let where_clause = AstBuilder::<ast::WhereClause>::from_predicates(predicates);\n+\n+            let to_insert = match anchor.prev_sibling_or_token() {\n+                Some(ref elem) if elem.kind() == WHITESPACE => {\n+                    format!(\"{} \", where_clause.syntax())\n+                }\n+                _ => format!(\" {}\", where_clause.syntax()),\n+            };\n+            edit.insert(anchor.text_range().start(), to_insert);\n+            edit.target(type_param_list.syntax().text_range());\n+        },\n+    );\n+\n+    ctx.build()\n+}\n+\n+fn build_predicate(param: &ast::TypeParam) -> Option<ast::WherePred> {\n+    let path = AstBuilder::<ast::Path>::from_name(param.name()?);\n+    let predicate =\n+        AstBuilder::<ast::WherePred>::from_pieces(path, param.type_bound_list()?.bounds());\n+    Some(predicate)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::check_assist;\n+\n+    #[test]\n+    fn move_bounds_to_where_clause_fn() {\n+        check_assist(\n+            move_bounds_to_where_clause,\n+            r#\"\n+            fn foo<T: u32, <|>F: FnOnce(T) -> T>() {}\n+            \"#,\n+            r#\"\n+            fn foo<T, <|>F>() where T: u32, F: FnOnce(T) -> T {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_bounds_to_where_clause_impl() {\n+        check_assist(\n+            move_bounds_to_where_clause,\n+            r#\"\n+            impl<U: u32, <|>T> A<U, T> {}\n+            \"#,\n+            r#\"\n+            impl<U, <|>T> A<U, T> where U: u32 {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_bounds_to_where_clause_struct() {\n+        check_assist(\n+            move_bounds_to_where_clause,\n+            r#\"\n+            struct A<<|>T: Iterator<Item = u32>> {}\n+            \"#,\n+            r#\"\n+            struct A<<|>T> where T: Iterator<Item = u32> {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_bounds_to_where_clause_tuple_struct() {\n+        check_assist(\n+            move_bounds_to_where_clause,\n+            r#\"\n+            struct Pair<<|>T: u32>(T, T);\n+            \"#,\n+            r#\"\n+            struct Pair<<|>T>(T, T) where T: u32;\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "1034a511729be5ad62173724aff4e5eaac1edba5", "filename": "docs/user/features.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82f3317e2b012864833be5b89a323b252db0487a/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/82f3317e2b012864833be5b89a323b252db0487a/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=82f3317e2b012864833be5b89a323b252db0487a", "patch": "@@ -435,6 +435,16 @@ fn f() {\n }\n ```\n \n+- Move type bounds to where clause\n+\n+```rust\n+// before:\n+fn foo<T: u32, F: FnOnce(T) -> T>() {}\n+\n+// after:\n+fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}