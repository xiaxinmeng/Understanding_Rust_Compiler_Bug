{"sha": "7977cb43b01af009434b54e4136c7e460e1f733f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzdjYjQzYjAxYWYwMDk0MzRiNTRlNDEzNmM3ZTQ2MGUxZjczM2Y=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-22T13:02:35Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-23T14:43:54Z"}, "message": "Look for macro names in all namespaces for diagnostics.", "tree": {"sha": "366de8b2f48e6de1acc232eadab9b607c014ed88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366de8b2f48e6de1acc232eadab9b607c014ed88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7977cb43b01af009434b54e4136c7e460e1f733f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7977cb43b01af009434b54e4136c7e460e1f733f", "html_url": "https://github.com/rust-lang/rust/commit/7977cb43b01af009434b54e4136c7e460e1f733f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7977cb43b01af009434b54e4136c7e460e1f733f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9051c056edd91b5e66ea31cb275bc8877a989da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9051c056edd91b5e66ea31cb275bc8877a989da8", "html_url": "https://github.com/rust-lang/rust/commit/9051c056edd91b5e66ea31cb275bc8877a989da8"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "40a98d74f33c4ef4755bd19d6ea2a70a8aed7b2a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7977cb43b01af009434b54e4136c7e460e1f733f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7977cb43b01af009434b54e4136c7e460e1f733f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=7977cb43b01af009434b54e4136c7e460e1f733f", "patch": "@@ -956,9 +956,42 @@ impl<'a> Resolver<'a> {\n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n             let msg = format!(\"unsafe traits like `{}` should be implemented explicitly\", ident);\n             err.span_note(ident.span, &msg);\n+            return;\n         }\n         if self.macro_names.contains(&ident.normalize_to_macros_2_0()) {\n             err.help(\"have you added the `#[macro_use]` on the module/import?\");\n+            return;\n+        }\n+        for ns in [Namespace::MacroNS, Namespace::TypeNS, Namespace::ValueNS] {\n+            if let Ok(binding) = self.early_resolve_ident_in_lexical_scope(\n+                ident,\n+                ScopeSet::All(ns, false),\n+                &parent_scope,\n+                false,\n+                false,\n+                ident.span,\n+            ) {\n+                let it_is = match binding.macro_kind() {\n+                    Some(MacroKind::Bang) => \"it is a function-like macro\".to_string(),\n+                    Some(kind) => format!(\"it is {} {}\", kind.article(), kind.descr_expected()),\n+                    None => format!(\n+                        \"it is not {} {}\",\n+                        macro_kind.article(),\n+                        macro_kind.descr_expected()\n+                    ),\n+                };\n+                if let crate::NameBindingKind::Import { import, .. } = binding.kind {\n+                    if !import.span.is_dummy() {\n+                        err.span_note(\n+                            import.span,\n+                            &format!(\"`{}` is imported here, but {}\", ident, it_is),\n+                        );\n+                        return;\n+                    }\n+                }\n+                err.note(&format!(\"`{}` is in scope, but {}\", ident, it_is));\n+                return;\n+            }\n         }\n     }\n "}, {"sha": "7f86f891c4450039b11c5bb9974672a24fe6342e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7977cb43b01af009434b54e4136c7e460e1f733f/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7977cb43b01af009434b54e4136c7e460e1f733f/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=7977cb43b01af009434b54e4136c7e460e1f733f", "patch": "@@ -19,7 +19,7 @@ use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind, SupportsMacroExpansion};\n use rustc_feature::is_builtin_attr_name;\n-use rustc_hir::def::{self, DefKind, Namespace, NonMacroAttrKind};\n+use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_hir::PrimTy;\n use rustc_middle::middle::stability;\n@@ -1115,24 +1115,6 @@ impl<'a> Resolver<'a> {\n                     let msg = format!(\"cannot find {} `{}` in this scope\", expected, ident);\n                     let mut err = self.session.struct_span_err(ident.span, &msg);\n                     self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident);\n-                    if let Ok(binding) = self.early_resolve_ident_in_lexical_scope(\n-                        ident,\n-                        ScopeSet::All(Namespace::TypeNS, false),\n-                        &parent_scope,\n-                        false,\n-                        false,\n-                        ident.span,\n-                    ) {\n-                        if let crate::NameBindingKind::Import { import, .. } = binding.kind {\n-                            err.span_note(\n-                                import.span,\n-                                &format!(\n-                                    \"`{}` is imported here, but it is not a {}\",\n-                                    ident, expected\n-                                ),\n-                            );\n-                        }\n-                    }\n                     err.emit();\n                 }\n             }"}]}