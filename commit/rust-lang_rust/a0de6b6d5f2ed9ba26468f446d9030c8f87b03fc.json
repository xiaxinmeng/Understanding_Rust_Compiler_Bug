{"sha": "a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZGU2YjZkNWYyZWQ5YmEyNjQ2OGY0NDZkOTAzMGM4Zjg3YjAzZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:14:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:14:18Z"}, "message": "Merge remote-tracking branch 'erickt/incoming'", "tree": {"sha": "89e2a84e824e9e19dbd009977296d6811499949f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e2a84e824e9e19dbd009977296d6811499949f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "html_url": "https://github.com/rust-lang/rust/commit/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8d258f35321ed257d76d5e3c6458eed00ba574", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8d258f35321ed257d76d5e3c6458eed00ba574", "html_url": "https://github.com/rust-lang/rust/commit/6d8d258f35321ed257d76d5e3c6458eed00ba574"}, {"sha": "5c6be13b29c44920a39b9b9e95931f734b60d92b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6be13b29c44920a39b9b9e95931f734b60d92b", "html_url": "https://github.com/rust-lang/rust/commit/5c6be13b29c44920a39b9b9e95931f734b60d92b"}], "stats": {"total": 133, "additions": 46, "deletions": 87}, "files": [{"sha": "9ba942cb0b76e36c24014fa529252846aef1ec9e", "filename": "src/libcore/io.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -663,24 +663,21 @@ type MemBuffer = @{buf: DVec<u8>, mut pos: uint};\n \n impl MemBuffer: Writer {\n     fn write(v: &[const u8]) {\n-        // Fast path.\n-        let vlen = vec::len(v);\n-        let buf_len = self.buf.len();\n-        if self.pos == buf_len {\n-            self.buf.push_all(v);\n-            self.pos += vlen;\n-            return;\n-        }\n+        do self.buf.swap |buf| {\n+            let mut buf <- buf;\n+            let v_len = v.len();\n+            let buf_len = buf.len();\n+\n+            let count = uint::max(&buf_len, &(self.pos + v_len));\n+            vec::reserve(buf, count);\n+            unsafe { vec::unsafe::set_len(buf, count); }\n+\n+            vec::u8::memcpy(vec::mut_view(buf, self.pos, count), v, v_len);\n+\n+            self.pos += v_len;\n \n-        // FIXME #2004--use memcpy here?\n-        let mut pos = self.pos, vpos = 0u;\n-        while vpos < vlen && pos < buf_len {\n-            self.buf.set_elt(pos, copy v[vpos]);\n-            pos += 1u;\n-            vpos += 1u;\n+            buf\n         }\n-        self.buf.push_slice(v, vpos, vlen);\n-        self.pos += vlen;\n     }\n     fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;"}, {"sha": "ba8e796313328def13be69e9ae24daa209aaa73b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -53,7 +53,7 @@ pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n pure fn get_err<T, U: copy>(res: Result<T, U>) -> U {\n     match res {\n       Err(u) => u,\n-      Ok(_) => fail ~\"get_error called on ok result\"\n+      Ok(_) => fail ~\"get_err called on ok result\"\n     }\n }\n \n@@ -341,15 +341,18 @@ fn iter_vec2<S,T,U:copy>(ss: &[S], ts: &[T],\n }\n \n /// Unwraps a result, assuming it is an `ok(T)`\n-fn unwrap<T, U>(-res: Result<T, U>) -> T {\n-    unsafe {\n-        let addr = match res {\n-          Ok(x) => ptr::addr_of(x),\n-          Err(_) => fail ~\"error result\"\n-        };\n-        let liberated_value = unsafe::reinterpret_cast(*addr);\n-        unsafe::forget(res);\n-        return liberated_value;\n+fn unwrap<T, U>(+res: Result<T, U>) -> T {\n+    match move res {\n+      Ok(move t) => t,\n+      Err(_) => fail ~\"unwrap called on an err result\"\n+    }\n+}\n+\n+/// Unwraps a result, assuming it is an `err(U)`\n+fn unwrap_err<T, U>(+res: Result<T, U>) -> U {\n+    match move res {\n+      Err(move u) => u,\n+      Ok(_) => fail ~\"unwrap called on an ok result\"\n     }\n }\n "}, {"sha": "888d992321cdd4ff3ae86d2377a3a05be68dde96", "filename": "src/libcore/str.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -115,12 +115,6 @@ export\n    StrSlice,\n    UniqueStr;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    fn rust_str_push(&s: ~str, ch: u8);\n-    fn str_reserve_shared(&ss: ~str, nn: libc::size_t);\n-}\n-\n /*\n Section: Creating a string\n */\n@@ -220,14 +214,9 @@ fn push_char(&s: ~str, ch: char) {\n                 *ptr::mut_offset(buf, off + 5u) =\n                     (code & 63u | tag_cont) as u8;\n             }\n-            *ptr::mut_offset(buf, off + nb) = 0u8;\n         }\n \n-        do as_bytes(s) |bytes| {\n-            let mut mut_bytes: ~[u8] = ::unsafe::reinterpret_cast(bytes);\n-            vec::unsafe::set_len(mut_bytes, new_len + 1u);\n-            ::unsafe::forget(mut_bytes);\n-        }\n+        unsafe::set_len(s, new_len);\n     }\n }\n \n@@ -1824,8 +1813,9 @@ pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n  * * n - The number of bytes to reserve space for\n  */\n fn reserve(&s: ~str, n: uint) {\n-    if capacity(s) < n {\n-        rustrt::str_reserve_shared(s, n as size_t);\n+    unsafe {\n+        let v: *mut ~[u8] = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+        vec::reserve(*v, n + 1);\n     }\n }\n \n@@ -2003,12 +1993,18 @@ mod unsafe {\n \n     /// Appends a byte to a string. (Not UTF-8 safe).\n     unsafe fn push_byte(&s: ~str, b: u8) {\n-        rustrt::rust_str_push(s, b);\n+        reserve_at_least(s, s.len() + 1);\n+        do as_buf(s) |buf, len| {\n+            let buf: *mut u8 = ::unsafe::reinterpret_cast(buf);\n+            *ptr::mut_offset(buf, len) = b;\n+        }\n+        set_len(s, s.len() + 1);\n     }\n \n     /// Appends a vector of bytes to a string. (Not UTF-8 safe).\n     unsafe fn push_bytes(&s: ~str, bytes: ~[u8]) {\n-        for vec::each(bytes) |byte| { rustrt::rust_str_push(s, byte); }\n+        reserve_at_least(s, s.len() + bytes.len());\n+        for vec::each(bytes) |byte| { push_byte(s, byte); }\n     }\n \n     /// Removes the last byte from a string and returns it. (Not UTF-8 safe)."}, {"sha": "984092e9a584db68d39645c2442ff71da9344847", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -102,9 +102,6 @@ extern mod rustrt {\n     fn vec_reserve_shared(++t: *sys::TypeDesc,\n                           ++v: **unsafe::VecRepr,\n                           ++n: libc::size_t);\n-    fn vec_from_buf_shared(++t: *sys::TypeDesc,\n-                           ++ptr: *(),\n-                           ++count: libc::size_t) -> *unsafe::VecRepr;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -1727,10 +1724,11 @@ mod unsafe {\n      */\n     #[inline(always)]\n     unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n-        return ::unsafe::reinterpret_cast(\n-            rustrt::vec_from_buf_shared(sys::get_type_desc::<T>(),\n-                                        ptr as *(),\n-                                        elts as size_t));\n+        let mut dst = ~[];\n+        reserve(dst, elts);\n+        set_len(dst, elts);\n+        as_buf(dst, |p_dst, _len_dst| ptr::memcpy(p_dst, ptr, elts));\n+        dst\n     }\n \n     /**\n@@ -1879,7 +1877,7 @@ mod u8 {\n     pure fn gt(a: &~[u8], b: &~[u8]) -> bool { cmp(a, b) > 0 }\n \n     /// Byte-vec hash function\n-    fn hash(s: &~[u8]) -> uint {\n+    pure fn hash(s: &~[u8]) -> uint {\n         hash::hash_bytes(*s) as uint\n     }\n "}, {"sha": "e1fbabda50fc815d21652389f9a987cca405c36a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -142,39 +142,6 @@ vec_reserve_shared(type_desc* ty, rust_vec_box** vp,\n     reserve_vec_exact(task, vp, n_elts * ty->size);\n }\n \n-extern \"C\" CDECL void\n-str_reserve_shared(rust_vec_box** sp,\n-                   size_t n_elts) {\n-    rust_task *task = rust_get_current_task();\n-    reserve_vec_exact(task, sp, n_elts + 1);\n-}\n-\n-/**\n- * Copies elements in an unsafe buffer to the given interior vector. The\n- * vector must have size zero.\n- */\n-extern \"C\" CDECL rust_vec_box*\n-vec_from_buf_shared(type_desc *ty, void *ptr, size_t count) {\n-    rust_task *task = rust_get_current_task();\n-    size_t fill = ty->size * count;\n-    rust_vec_box* v = (rust_vec_box*)\n-        task->kernel->malloc(fill + sizeof(rust_vec_box),\n-                             \"vec_from_buf\");\n-    v->body.fill = v->body.alloc = fill;\n-    memmove(&v->body.data[0], ptr, fill);\n-    return v;\n-}\n-\n-extern \"C\" CDECL void\n-rust_str_push(rust_vec_box** sp, uint8_t byte) {\n-    rust_task *task = rust_get_current_task();\n-    size_t fill = (*sp)->body.fill;\n-    reserve_vec(task, sp, fill + 1);\n-    (*sp)->body.data[fill-1] = byte;\n-    (*sp)->body.data[fill] = 0;\n-    (*sp)->body.fill = fill + 1;\n-}\n-\n extern \"C\" CDECL rust_vec*\n rand_seed() {\n     size_t size = sizeof(ub4) * RANDSIZ;\n@@ -516,8 +483,9 @@ void tm_to_rust_tm(tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n     out_tm->tm_nsec = nsec;\n \n     if (zone != NULL) {\n+        rust_task *task = rust_get_current_task();\n         size_t size = strlen(zone);\n-        str_reserve_shared(&out_tm->tm_zone, size);\n+        reserve_vec_exact(task, &out_tm->tm_zone, size + 1);\n         memcpy(out_tm->tm_zone->body.data, zone, size);\n         out_tm->tm_zone->body.fill = size + 1;\n         out_tm->tm_zone->body.data[size] = '\\0';"}, {"sha": "8c550833d1c38c125a055ac99d0264f0685a4edc", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a0de6b6d5f2ed9ba26468f446d9030c8f87b03fc", "patch": "@@ -38,7 +38,6 @@ rust_getcwd\n rust_get_stdin\n rust_get_stdout\n rust_get_stderr\n-rust_str_push\n rust_list_files\n rust_log_console_on\n rust_log_console_off\n@@ -62,8 +61,6 @@ shape_log_str\n start_task\n vec_reserve_shared_actual\n vec_reserve_shared\n-str_reserve_shared\n-vec_from_buf_shared\n task_clear_event_reject\n task_wait_event\n task_signal_event"}]}