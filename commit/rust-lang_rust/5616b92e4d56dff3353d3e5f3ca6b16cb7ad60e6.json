{"sha": "5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTZiOTJlNGQ1NmRmZjMzNTNkM2U1ZjNjYTZiMTZjYjdhZDYwZTY=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2015-01-12T04:18:52Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2015-01-12T06:34:12Z"}, "message": "Implement multi-line errors", "tree": {"sha": "a698399cbfcf1535a1523a1cf5422a8e5b692a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a698399cbfcf1535a1523a1cf5422a8e5b692a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "html_url": "https://github.com/rust-lang/rust/commit/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ace1665a38f575d8bf478fbfadef29ed9f17a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ace1665a38f575d8bf478fbfadef29ed9f17a9", "html_url": "https://github.com/rust-lang/rust/commit/24ace1665a38f575d8bf478fbfadef29ed9f17a9"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "5579479c5e5aca5df77ebf0b2edf4fa9e3f1249d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "patch": "@@ -966,6 +966,16 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         line.starts_with( prefix )\n     }\n \n+    // A multi-line error will have followup lines which will always\n+    // start with one of these strings.\n+    fn continuation( line: &str) -> bool {\n+        line.starts_with(\" expected\") ||\n+        line.starts_with(\"    found\") ||\n+        //                1234\n+        // Should have 4 spaces: see issue 18946\n+        line.starts_with(\"(\")\n+    }\n+\n     // Scan and extract our error/warning messages,\n     // which look like:\n     //    filename:line1:col1: line2:col2: *error:* msg\n@@ -981,7 +991,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                        ee.kind,\n                        ee.msg,\n                        line);\n-                if prefix_matches(line, prefixes[i].as_slice()) &&\n+                if (prefix_matches(line, prefixes[i].as_slice()) || continuation(line)) &&\n                     line.contains(ee.kind.as_slice()) &&\n                     line.contains(ee.msg.as_slice()) {\n                     found_flags[i] = true;"}, {"sha": "eb6c49f6ad001c987a7123337bb488d82bde71fe", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "patch": "@@ -35,6 +35,7 @@ extern crate flate;\n extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n+extern crate regex;\n extern crate rustc_llvm;\n extern crate rustc_back;\n extern crate serialize;"}, {"sha": "27acc39c77863304291884edd0c70a4709556795", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=5616b92e4d56dff3353d3e5f3ca6b16cb7ad60e6", "patch": "@@ -15,6 +15,8 @@ use metadata::filesearch;\n use session::search_paths::PathKind;\n use util::nodemap::NodeMap;\n \n+use regex::Regex;\n+\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use syntax::diagnostic::{self, Emitter};\n@@ -71,7 +73,58 @@ impl Session {\n         self.diagnostic().handler().fatal(msg)\n     }\n     pub fn span_err(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_err(sp, msg)\n+        // Conditions for enabling multi-line errors:\n+        if !msg.contains(\"mismatched types\") &&\n+           !msg.contains(\"type mismatch resolving\") &&\n+           !msg.contains(\"if and else have incompatible types\") &&\n+           !msg.contains(\"if may be missing an else clause\") &&\n+           !msg.contains(\"match arms have incompatible types\") &&\n+           !msg.contains(\"structure constructor specifies a structure of type\") {\n+            return self.diagnostic().span_err(sp, msg);\n+        }\n+\n+        let first  = Regex::new(r\"[( ]expected\").unwrap();\n+        let second = Regex::new(r\" found\").unwrap();\n+        let third  = Regex::new(\n+                     r\"\\((values differ|lifetime|cyclic type of infinite size)\").unwrap();\n+\n+        let mut new_msg = String::new();\n+        let mut head = 0u;\n+\n+        // Insert `\\n` before expected and found.\n+        for (pos1, pos2) in first.find_iter(msg).zip(\n+                            second.find_iter(msg)) {\n+            new_msg = new_msg +\n+            // A `(` may be preceded by a space and it should be trimmed\n+                      msg[head..pos1.0].trim_right() + // prefix\n+                      \"\\n\" +                           // insert before first\n+                      &msg[pos1.0..pos1.1] +           // insert what first matched\n+                      &msg[pos1.1..pos2.0] +           // between matches\n+                      \"\\n   \" +                        // insert before second\n+            //           123\n+            // `expected` is 3 char longer than `found`. To align the types, `found` gets\n+            // 3 spaces prepended.\n+                      &msg[pos2.0..pos2.1];            // insert what second matched\n+\n+            head = pos2.1;\n+        }\n+\n+        let mut tail = &msg[head..];\n+        // Insert `\\n` before any remaining messages which match.\n+        for pos in third.find_iter(tail).take(1) {\n+            // The end of the message may just be wrapped in `()` without `expected`/`found`.\n+            // Push this also to a new line and add the final tail after.\n+            new_msg = new_msg +\n+            // `(` is usually preceded by a space and should be trimmed.\n+                      tail[..pos.0].trim_right() + // prefix\n+                      \"\\n\" +                       // insert before paren\n+                      &tail[pos.0..];              // append the tail\n+\n+            tail = \"\";\n+        }\n+\n+        new_msg.push_str(tail);\n+        self.diagnostic().span_err(sp, &new_msg[])\n     }\n     pub fn span_err_with_code(&self, sp: Span, msg: &str, code: &str) {\n         self.diagnostic().span_err_with_code(sp, msg, code)"}]}