{"sha": "1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "node_id": "C_kwDOAAsO6NoAKDFhNTFlYzY4NjQzOWI1MmJkNjUyYjMyZjhmN2FhZjc4MTdmYWY1YTc", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-02-16T00:49:00Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-04-27T20:29:04Z"}, "message": "bless tests", "tree": {"sha": "f22564f1be3a7c6f394075519663d24419f1f675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22564f1be3a7c6f394075519663d24419f1f675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "html_url": "https://github.com/rust-lang/rust/commit/1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351e208f4c24069c141b630f35c09ebe9107fd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/351e208f4c24069c141b630f35c09ebe9107fd5a", "html_url": "https://github.com/rust-lang/rust/commit/351e208f4c24069c141b630f35c09ebe9107fd5a"}], "stats": {"total": 158, "additions": 71, "deletions": 87}, "files": [{"sha": "af621d79391c51ca0d47c3e9e3944614c34016f9", "filename": "tests/codegen/issues/issue-86106.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-86106.rs?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -9,25 +9,19 @@\n // CHECK-LABEL: define void @string_new\n #[no_mangle]\n pub fn string_new() -> String {\n-    // CHECK-NOT: load i8\n-    // CHECK: store i{{32|64}}\n+    // CHECK: store ptr inttoptr\n     // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store ptr\n-    // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store i{{32|64}}\n+    // CHECK-NEXT: call void @llvm.memset\n     // CHECK-NEXT: ret void\n     String::new()\n }\n \n // CHECK-LABEL: define void @empty_to_string\n #[no_mangle]\n pub fn empty_to_string() -> String {\n-    // CHECK-NOT: load i8\n-    // CHECK: store i{{32|64}}\n-    // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store ptr\n-    // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store i{{32|64}}\n+    // CHECK: getelementptr\n+    // CHECK-NEXT: call void @llvm.memset\n+    // CHECK-NEXT: store ptr inttoptr\n     // CHECK-NEXT: ret void\n     \"\".to_string()\n }\n@@ -38,25 +32,19 @@ pub fn empty_to_string() -> String {\n // CHECK-LABEL: @empty_vec\n #[no_mangle]\n pub fn empty_vec() -> Vec<u8> {\n-    // CHECK: store i{{32|64}}\n-    // CHECK-NOT: load i8\n+    // CHECK: store ptr inttoptr\n     // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store ptr\n-    // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store i{{32|64}}\n+    // CHECK-NEXT: call void @llvm.memset\n     // CHECK-NEXT: ret void\n     vec![]\n }\n \n // CHECK-LABEL: @empty_vec_clone\n #[no_mangle]\n pub fn empty_vec_clone() -> Vec<u8> {\n-    // CHECK: store i{{32|64}}\n-    // CHECK-NOT: load i8\n-    // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store ptr\n+    // CHECK: store ptr inttoptr\n     // CHECK-NEXT: getelementptr\n-    // CHECK-NEXT: store i{{32|64}}\n+    // CHECK-NEXT: call void @llvm.memset\n     // CHECK-NEXT: ret void\n     vec![].clone()\n }"}, {"sha": "c0fbb0204b307c1d0a42fbc92e04ae9a1918f3c9", "filename": "tests/ui/async-await/future-sizes/async-awaiting-fut.stdout", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -2,38 +2,34 @@ print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:21:21: 24:2]`:\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Suspend0`: 3077 bytes\n-print-type-size         local `.__awaitee`: 3077 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 3077 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]`: 3077 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n-print-type-size     variant `Unresumed`: 2051 bytes\n-print-type-size         padding: 1026 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `Unresumed`: 1025 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Suspend0`: 2052 bytes\n-print-type-size         local `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n-print-type-size         local `..generator_field4`: 1 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size         padding: 1 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `..generator_field4`: 1 bytes\n print-type-size         local `.__awaitee`: 1 bytes\n print-type-size     variant `Suspend1`: 3076 bytes\n-print-type-size         padding: 1024 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         padding: 1026 bytes\n print-type-size         local `..generator_field4`: 1 bytes, alignment: 1 bytes\n-print-type-size         padding: 1 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n print-type-size         local `.__awaitee`: 1025 bytes\n print-type-size     variant `Suspend2`: 2052 bytes\n-print-type-size         local `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n-print-type-size         local `..generator_field4`: 1 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size         padding: 1 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `..generator_field4`: 1 bytes\n print-type-size         local `.__awaitee`: 1 bytes\n-print-type-size     variant `Returned`: 2051 bytes\n-print-type-size         padding: 1026 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n-print-type-size     variant `Panicked`: 2051 bytes\n-print-type-size         padding: 1026 bytes\n-print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 1025 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 1025 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]>`: 3077 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 3077 bytes\n print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]>`: 3077 bytes, alignment: 1 bytes\n@@ -43,11 +39,11 @@ print-type-size         field `.value`: 3077 bytes\n print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]`: 1025 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 1024 bytes\n-print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 1024 bytes\n print-type-size     variant `Returned`: 1024 bytes\n-print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 1024 bytes\n print-type-size     variant `Panicked`: 1024 bytes\n-print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 1024 bytes\n print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]>`: 1025 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1025 bytes\n print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]>`: 1025 bytes, alignment: 1 bytes"}, {"sha": "b5e95ddd7100dc039689da10457ab7906f533119", "filename": "tests/ui/async-await/future-sizes/large-arg.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -2,20 +2,20 @@ print-type-size type: `[async fn body@$DIR/large-arg.rs:6:21: 8:2]`: 3076 bytes,\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Suspend0`: 3075 bytes\n-print-type-size         local `.__awaitee`: 3075 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 3075 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n print-type-size type: `[async fn body@$DIR/large-arg.rs:10:30: 12:2]`: 3075 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Suspend0`: 3074 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size         local `.__awaitee`: 2050 bytes\n print-type-size     variant `Returned`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Panicked`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:10:30: 12:2]>`: 3075 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 3075 bytes\n print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:10:30: 12:2]>`: 3075 bytes, alignment: 1 bytes\n@@ -25,14 +25,14 @@ print-type-size         field `.value`: 3075 bytes\n print-type-size type: `[async fn body@$DIR/large-arg.rs:13:26: 15:2]`: 2050 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Suspend0`: 2049 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size         local `.__awaitee`: 1025 bytes\n print-type-size     variant `Returned`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Panicked`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:13:26: 15:2]>`: 2050 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 2050 bytes\n print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:13:26: 15:2]>`: 2050 bytes, alignment: 1 bytes\n@@ -42,11 +42,11 @@ print-type-size         field `.value`: 2050 bytes\n print-type-size type: `[async fn body@$DIR/large-arg.rs:16:26: 18:2]`: 1025 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Returned`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size     variant `Panicked`: 1024 bytes\n-print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.t`: 1024 bytes\n print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:16:26: 18:2]>`: 1025 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1025 bytes\n print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:16:26: 18:2]>`: 1025 bytes, alignment: 1 bytes"}, {"sha": "a93b561e5be27611e793b7a0e9b3895eea74c152", "filename": "tests/ui/consts/const-eval/raw-bytes.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.32bit.stderr?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -465,7 +465,7 @@ LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchec\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n-               00 10 00 00 00 00 00 00                         \u2502 ........\n+               00 00 00 00 00 10 00 00                         \u2502 ........\n            }\n \n error[E0080]: it is undefined behavior to use this value\n@@ -476,7 +476,7 @@ LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unche\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n-               09 00 00 00 03 00 00 00                         \u2502 ........\n+               03 00 00 00 09 00 00 00                         \u2502 ........\n            }\n \n error[E0080]: it is undefined behavior to use this value"}, {"sha": "a32d4863a38f009a2948e3f57369d77911218d66", "filename": "tests/ui/consts/const-eval/raw-bytes.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fraw-bytes.64bit.stderr?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -465,7 +465,7 @@ LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchec\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n-               00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n+               00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 \u2502 ................\n            }\n \n error[E0080]: it is undefined behavior to use this value\n@@ -476,7 +476,7 @@ LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unche\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n-               09 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 \u2502 ................\n+               03 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 \u2502 ................\n            }\n \n error[E0080]: it is undefined behavior to use this value"}, {"sha": "8c7c915350f19d38111192c1288034105d10788c", "filename": "tests/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -370,31 +370,31 @@ error: layout_of(NicheFirst) = Layout {\n                pref: $PREF_ALIGN,\n            },\n            abi: ScalarPair(\n-               Union {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n+                   valid_range: 0..=4,\n                },\n-               Initialized {\n+               Union {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=4,\n                },\n            ),\n            fields: Arbitrary {\n                offsets: [\n-                   Size(1 bytes),\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n                ],\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size(1 bytes),\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -429,29 +429,29 @@ error: layout_of(NicheFirst) = Layout {\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=255,\n+                               valid_range: 0..=2,\n                            },\n                            Initialized {\n                                value: Int(\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=2,\n+                               valid_range: 0..=255,\n                            },\n                        ),\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size(1 bytes),\n                                Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n-                               1,\n                                0,\n+                               1,\n                            ],\n                        },\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size(1 bytes),\n+                               offset: Size(0 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -514,31 +514,31 @@ error: layout_of(NicheSecond) = Layout {\n                pref: $PREF_ALIGN,\n            },\n            abi: ScalarPair(\n-               Union {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n+                   valid_range: 0..=4,\n                },\n-               Initialized {\n+               Union {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=4,\n                },\n            ),\n            fields: Arbitrary {\n                offsets: [\n-                   Size(1 bytes),\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n                ],\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size(1 bytes),\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -573,29 +573,29 @@ error: layout_of(NicheSecond) = Layout {\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=255,\n+                               valid_range: 0..=2,\n                            },\n                            Initialized {\n                                value: Int(\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=2,\n+                               valid_range: 0..=255,\n                            },\n                        ),\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size(0 bytes),\n                                Size(1 bytes),\n+                               Size(0 bytes),\n                            ],\n                            memory_index: [\n-                               0,\n                                1,\n+                               0,\n                            ],\n                        },\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size(1 bytes),\n+                               offset: Size(0 bytes),\n                                value: Int(\n                                    I8,\n                                    false,"}, {"sha": "1c6887412be16a8290506fe6a0dc78cf967c9954", "filename": "tests/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -1,15 +1,15 @@\n print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n-print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes\n print-type-size     variant `Suspend0`: 16385 bytes\n-print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes\n print-type-size         local `.arg`: 8192 bytes\n print-type-size         local `.__awaitee`: 1 bytes\n print-type-size     variant `Returned`: 8192 bytes\n-print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes\n print-type-size     variant `Panicked`: 8192 bytes\n-print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes\n print-type-size type: `std::mem::ManuallyDrop<[u8; 8192]>`: 8192 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 8192 bytes\n print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment: 1 bytes"}, {"sha": "2dcadde9ec28b7bf8b2e5c65fd6ad8dc42e43b15", "filename": "tests/ui/print_type_sizes/generator.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1a51ec686439b52bd652b32f8f7aaf7817faf5a7/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout?ref=1a51ec686439b52bd652b32f8f7aaf7817faf5a7", "patch": "@@ -1,10 +1,10 @@\n print-type-size type: `[generator@$DIR/generator.rs:10:5: 10:14]`: 8193 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n-print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes\n print-type-size     variant `Suspend0`: 8192 bytes\n-print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes\n print-type-size     variant `Returned`: 8192 bytes\n-print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes\n print-type-size     variant `Panicked`: 8192 bytes\n-print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes"}]}