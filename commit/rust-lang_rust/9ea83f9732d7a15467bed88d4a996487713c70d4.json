{"sha": "9ea83f9732d7a15467bed88d4a996487713c70d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTgzZjk3MzJkN2ExNTQ2N2JlZDg4ZDRhOTk2NDg3NzEzYzcwZDQ=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-05-31T11:50:30Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-08-01T15:01:33Z"}, "message": "Update libc and use the Mach kernel APIs via the mach crate instead.", "tree": {"sha": "fdaab0409c46af0fce7d76aa81b6fe62281f03ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdaab0409c46af0fce7d76aa81b6fe62281f03ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea83f9732d7a15467bed88d4a996487713c70d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea83f9732d7a15467bed88d4a996487713c70d4", "html_url": "https://github.com/rust-lang/rust/commit/9ea83f9732d7a15467bed88d4a996487713c70d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea83f9732d7a15467bed88d4a996487713c70d4/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17951c4f80eb5208030f91fdb4ae93919fa6b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17951c4f80eb5208030f91fdb4ae93919fa6b12", "html_url": "https://github.com/rust-lang/rust/commit/a17951c4f80eb5208030f91fdb4ae93919fa6b12"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "c953a53e0f9dbd245ee5883333cc3ea86e978414", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9ea83f9732d7a15467bed88d4a996487713c70d4", "patch": "@@ -53,6 +53,9 @@ rustc_tsan = { path = \"../librustc_tsan\" }\n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n \n+[target.'cfg(any(target_os = \"macos\", target_os = \"ios\"))'.dependencies]\n+mach = { version = \"0.3.2\", default-features = false, features = ['rustc-dep-of-std'] }\n+\n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n "}, {"sha": "460d92d05196689c57c3d460e461411e0d10e375", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9ea83f9732d7a15467bed88d4a996487713c70d4", "patch": "@@ -338,6 +338,10 @@ extern crate alloc as alloc_crate;\n #[allow(unused_extern_crates)]\n extern crate libc;\n \n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[allow(unused_extern_crates)]\n+extern crate mach;\n+\n // We always need an unwinder currently for backtraces\n #[doc(masked)]\n #[allow(unused_extern_crates)]"}, {"sha": "b7d2c4562f765d9109723c0420b1c19c26d01243", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea83f9732d7a15467bed88d4a996487713c70d4/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=9ea83f9732d7a15467bed88d4a996487713c70d4", "patch": "@@ -139,7 +139,7 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: unsafe { libc::mach_absolute_time() } }\n+            Instant { t: unsafe { mach::mach_time::mach_absolute_time() } }\n         }\n \n         pub const fn zero() -> Instant {\n@@ -230,8 +230,9 @@ mod inner {\n         Some(mul_div_u64(nanos, info.denom as u64, info.numer as u64))\n     }\n \n-    fn info() -> libc::mach_timebase_info {\n-        static mut INFO: libc::mach_timebase_info = libc::mach_timebase_info {\n+    fn info() -> mach::mach_time::mach_timebase_info {\n+        static mut INFO: mach::mach_time::mach_timebase_info\n+            = mach::mach_time::mach_timebase_info {\n             numer: 0,\n             denom: 0,\n         };\n@@ -245,7 +246,7 @@ mod inner {\n \n             // ... otherwise learn for ourselves ...\n             let mut info = mem::zeroed();\n-            libc::mach_timebase_info(&mut info);\n+            mach::mach_time::mach_timebase_info(&mut info);\n \n             // ... and attempt to be the one thread that stores it globally for\n             // all other threads"}]}