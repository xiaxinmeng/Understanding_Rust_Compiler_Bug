{"sha": "38fd7ea50adf894ae6235abba883ea9981996af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZmQ3ZWE1MGFkZjg5NGFlNjIzNWFiYmE4ODNlYTk5ODE5OTZhZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T01:53:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T01:53:55Z"}, "message": "Auto merge of #50486 - Manishearth:approx-stab, r=nrc\n\nStabilize suggestion applicability field in json output\n\ncc @killercup\n\nr? @nrc", "tree": {"sha": "0289ad820cc693331f3f6dd4904b94928a97f3b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0289ad820cc693331f3f6dd4904b94928a97f3b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38fd7ea50adf894ae6235abba883ea9981996af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38fd7ea50adf894ae6235abba883ea9981996af9", "html_url": "https://github.com/rust-lang/rust/commit/38fd7ea50adf894ae6235abba883ea9981996af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38fd7ea50adf894ae6235abba883ea9981996af9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a16c000720f286c91747b91e6d9caa7b1bb63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a16c000720f286c91747b91e6d9caa7b1bb63c", "html_url": "https://github.com/rust-lang/rust/commit/65a16c000720f286c91747b91e6d9caa7b1bb63c"}, {"sha": "b0e66386f761ef7dff9edba1f81a693c94e1adfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e66386f761ef7dff9edba1f81a693c94e1adfa", "html_url": "https://github.com/rust-lang/rust/commit/b0e66386f761ef7dff9edba1f81a693c94e1adfa"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "960bbfdd1ef713076bbc0172541132ddf0fc53f1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -1316,8 +1316,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n-    suggestion_applicability: bool = (false, parse_bool, [UNTRACKED],\n-        \"include machine-applicability of suggestions in JSON output\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"Present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:"}, {"sha": "8df66d8d68855b63d30b1d633bd102012739b6a5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -1018,7 +1018,6 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n@@ -1027,7 +1026,6 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Short(color_config), None) => Box::new("}, {"sha": "458ed105d2650b04c54cc56658c94988f06cf2b8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -144,7 +144,6 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n                     None,\n                     codemap,\n                     pretty,\n-                    sessopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sessopts.debugging_opts.ui_testing)\n             )\n         },"}, {"sha": "709c3653b02676fbf810f7e987c3039f559e52c9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -846,11 +846,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_serialize_exclude_null\", Normal, Gated(Stability::Unstable,\n-                                             \"rustc_attrs\",\n-                                             \"the `#[rustc_serialize_exclude_null]` attribute \\\n-                                              is an internal-only feature\",\n-                                             cfg_fn!(rustc_attrs))),\n     (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\"}, {"sha": "f129aea32b8fea36b39c43297def6c93b78513a3", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -38,43 +38,37 @@ pub struct JsonEmitter {\n     registry: Option<Registry>,\n     cm: Lrc<CodeMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n-    /// Whether \"approximate suggestions\" are enabled in the config\n-    suggestion_applicability: bool,\n     ui_testing: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Lrc<CodeMap>,\n-                  pretty: bool,\n-                  suggestion_applicability: bool) -> JsonEmitter {\n+                  pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n             pretty,\n-            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n \n     pub fn basic(pretty: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(CodeMap::new(file_path_mapping)),\n-                            pretty, false)\n+                            pretty)\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<Registry>,\n                code_map: Lrc<CodeMap>,\n-               pretty: bool,\n-               suggestion_applicability: bool) -> JsonEmitter {\n+               pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n             pretty,\n-            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n@@ -137,7 +131,6 @@ struct DiagnosticSpan {\n     /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n     /// If the suggestion is approximate\n-    #[rustc_serialize_exclude_null]\n     suggestion_applicability: Option<Applicability>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n@@ -301,12 +294,6 @@ impl DiagnosticSpan {\n             })\n         });\n \n-        let suggestion_applicability = if je.suggestion_applicability {\n-             suggestion.map(|x| x.1)\n-        } else {\n-            None\n-        };\n-\n         DiagnosticSpan {\n             file_name: start.file.name.to_string(),\n             byte_start: span.lo().0 - start.file.start_pos.0,\n@@ -318,7 +305,7 @@ impl DiagnosticSpan {\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n             suggested_replacement: suggestion.map(|x| x.0.clone()),\n-            suggestion_applicability,\n+            suggestion_applicability: suggestion.map(|x| x.1),\n             expansion: backtrace_step,\n             label,\n         }"}, {"sha": "8b409df1f09964616c0c941db37cf1b04d1110ea", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -190,7 +190,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n         Struct(_, ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\");\n             let mut stmts = Vec::new();\n-            for (i, &FieldInfo { name, ref self_, span, attrs, .. }) in fields.iter().enumerate() {\n+            for (i, &FieldInfo { name, ref self_, span, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n                     Some(id) => id.name,\n                     None => Symbol::intern(&format!(\"_field{}\", i)),\n@@ -213,17 +213,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                     cx.expr(span, ExprKind::Ret(Some(call)))\n                 };\n \n-                // This exists for https://github.com/rust-lang/rust/pull/47540\n-                //\n-                // If we decide to stabilize that flag this can be removed\n-                let expr = if attrs.iter().any(|a| a.check_name(\"rustc_serialize_exclude_null\")) {\n-                    let is_some = cx.ident_of(\"is_some\");\n-                    let condition = cx.expr_method_call(span, self_.clone(), is_some, vec![]);\n-                    cx.expr_if(span, condition, call, None)\n-                } else {\n-                    call\n-                };\n-                let stmt = cx.stmt_expr(expr);\n+                let stmt = cx.stmt_expr(call);\n                 stmts.push(stmt);\n             }\n "}, {"sha": "2ec0111ff4b66e4ee423c3b8eb697ca69c920f2b", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -24,6 +24,7 @@\n       ],\n       \"label\": null,\n       \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n       \"expansion\": null\n     }\n   ],\n@@ -51,6 +52,7 @@\n           ],\n           \"label\": null,\n           \"suggested_replacement\": null,\n+          \"suggestion_applicability\": null,\n           \"expansion\": null\n         }\n       ],\n@@ -80,6 +82,7 @@\n           ],\n           \"label\": null,\n           \"suggested_replacement\": \"1 / (2 + 3)\",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         }\n       ],"}, {"sha": "ce2657a44953bb4de9aea46d733b9e70e13f4d8a", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38fd7ea50adf894ae6235abba883ea9981996af9/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=38fd7ea50adf894ae6235abba883ea9981996af9", "patch": "@@ -89,6 +89,7 @@ mod foo {\n       ],\n       \"label\": \"not found in this scope\",\n       \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n       \"expansion\": null\n     }\n   ],\n@@ -118,6 +119,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::binary_heap::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -140,6 +142,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::btree_map::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -162,6 +165,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::btree_set::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -184,6 +188,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::hash_map::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -206,6 +211,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::hash_set::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -228,6 +234,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::linked_list::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -250,6 +257,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::collections::vec_deque::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -272,6 +280,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::option::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -294,6 +303,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::path::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -316,6 +326,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::result::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -338,6 +349,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::slice::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         },\n         {\n@@ -360,6 +372,7 @@ mod foo {\n           \"suggested_replacement\": \"use std::sync::mpsc::Iter;\n \n \",\n+          \"suggestion_applicability\": \"Unspecified\",\n           \"expansion\": null\n         }\n       ],"}]}