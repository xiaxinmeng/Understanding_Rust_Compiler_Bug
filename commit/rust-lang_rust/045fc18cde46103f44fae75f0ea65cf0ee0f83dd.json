{"sha": "045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "node_id": "C_kwDOAAsO6NoAKDA0NWZjMThjZGU0NjEwM2Y0NGZhZTc1ZjBlYTY1Y2YwZWUwZjgzZGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-06T14:29:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-06T14:29:44Z"}, "message": "Rollup merge of #102718 - compiler-errors:opaque-bound-lint-ice, r=fee1-dead\n\nFix `opaque_hidden_inferred_bound` lint ICE\n\nFixes #102705", "tree": {"sha": "7720beac9ea6411c217340f91bfa4c51469aeb38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7720beac9ea6411c217340f91bfa4c51469aeb38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPuZYCRBK7hj4Ov3rIwAAaAoIAF/vOkA8ZLvHub6Re5eyLPff\nh7g9gKETZHaFLieNa5rWA0vGWNKqd7yh7E1xeiiqsRemttLsAE/Yim2CaPcIj4sF\n1999ygwcnyHHAx7rLAG/1kHAQ8Kcck1QbHY5xdY7rIjlkFyoVlB9GJUgHnJgrFfC\nd+55ClNbHhWmacnvtKiI6k9j8a6NSxLkMAljR3+yiOzK6oobvIGs2IN6c8mVHcqf\nE4fZj85uB9QiqOuLnns80EoAp6EMfrBpm+7nlSAoc6td2OebcWptZDnfnszpyiY/\ndwQj0LUxyBgKv9GBkvU+DCBdnNtuYj7vJny3Hm4R5orvwUM9osHqz1W2vNlqyjc=\n=jMm7\n-----END PGP SIGNATURE-----\n", "payload": "tree 7720beac9ea6411c217340f91bfa4c51469aeb38\nparent e77e0200ae5589323b799f77d5b597d4bf5928d6\nparent fe0533638c058c0c159804ce91887304ca16a640\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665066584 +0200\ncommitter GitHub <noreply@github.com> 1665066584 +0200\n\nRollup merge of #102718 - compiler-errors:opaque-bound-lint-ice, r=fee1-dead\n\nFix `opaque_hidden_inferred_bound` lint ICE\n\nFixes #102705\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "html_url": "https://github.com/rust-lang/rust/commit/045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77e0200ae5589323b799f77d5b597d4bf5928d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77e0200ae5589323b799f77d5b597d4bf5928d6", "html_url": "https://github.com/rust-lang/rust/commit/e77e0200ae5589323b799f77d5b597d4bf5928d6"}, {"sha": "fe0533638c058c0c159804ce91887304ca16a640", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0533638c058c0c159804ce91887304ca16a640", "html_url": "https://github.com/rust-lang/rust/commit/fe0533638c058c0c159804ce91887304ca16a640"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "7e28f22c0ba8b532d0a7e468c56a31446b9d7d0f", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "patch": "@@ -436,4 +436,5 @@ lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not\n \n lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its associated type bounds\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n-    .suggestion = add this bound\n+\n+lint_opaque_hidden_inferred_bound_sugg = add this bound"}, {"sha": "31705624a7fef9110f192c6df88ba502f2d8b564", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "patch": "@@ -1,7 +1,9 @@\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_macros::LintDiagnostic;\n-use rustc_middle::ty::{self, fold::BottomUpFolder, Ty, TypeFoldable};\n+use rustc_macros::{LintDiagnostic, Subdiagnostic};\n+use rustc_middle::ty::{\n+    self, fold::BottomUpFolder, print::TraitPredPrintModifiersAndPath, Ty, TypeFoldable,\n+};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -117,13 +119,13 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     )) {\n                         // If it's a trait bound and an opaque that doesn't satisfy it,\n                         // then we can emit a suggestion to add the bound.\n-                        let (suggestion, suggest_span) =\n+                        let add_bound =\n                             match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n-                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => (\n-                                    format!(\" + {}\", trait_pred.print_modifiers_and_trait_path()),\n-                                    Some(cx.tcx.def_span(def_id).shrink_to_hi()),\n-                                ),\n-                                _ => (String::new(), None),\n+                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => Some(AddBound {\n+                                    suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),\n+                                    trait_ref: trait_pred.print_modifiers_and_trait_path(),\n+                                }),\n+                                _ => None,\n                             };\n                         cx.emit_spanned_lint(\n                             OPAQUE_HIDDEN_INFERRED_BOUND,\n@@ -132,8 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                                 ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n                                 proj_ty: proj_term,\n                                 assoc_pred_span,\n-                                suggestion,\n-                                suggest_span,\n+                                add_bound,\n                             },\n                         );\n                     }\n@@ -150,7 +151,19 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n     proj_ty: Ty<'tcx>,\n     #[label(lint::specifically)]\n     assoc_pred_span: Span,\n-    #[suggestion_verbose(applicability = \"machine-applicable\", code = \"{suggestion}\")]\n-    suggest_span: Option<Span>,\n-    suggestion: String,\n+    #[subdiagnostic]\n+    add_bound: Option<AddBound<'tcx>>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_verbose(\n+    lint::opaque_hidden_inferred_bound_sugg,\n+    applicability = \"machine-applicable\",\n+    code = \" + {trait_ref}\"\n+)]\n+struct AddBound<'tcx> {\n+    #[primary_span]\n+    suggest_span: Span,\n+    #[skip_arg]\n+    trait_ref: TraitPredPrintModifiersAndPath<'tcx>,\n }"}, {"sha": "5bcc8950adafbf5d38c668421bee899bddea2015", "filename": "src/test/ui/lint/issue-102705.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/045fc18cde46103f44fae75f0ea65cf0ee0f83dd/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs?ref=045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![allow(opaque_hidden_inferred_bound)]\n+#![allow(dead_code)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+fn foo() -> impl Trait<Assoc = impl Send> {\n+    || 42\n+}\n+\n+fn main() {}"}]}