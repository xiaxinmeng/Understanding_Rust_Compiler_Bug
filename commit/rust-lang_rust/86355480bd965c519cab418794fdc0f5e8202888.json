{"sha": "86355480bd965c519cab418794fdc0f5e8202888", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MzU1NDgwYmQ5NjVjNTE5Y2FiNDE4Nzk0ZmRjMGY1ZTgyMDI4ODg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-28T17:54:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:27Z"}, "message": "Restructure a bit check_aggregate_rvalue code", "tree": {"sha": "e302d2418075e348c385675d02416587b9ba3dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e302d2418075e348c385675d02416587b9ba3dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86355480bd965c519cab418794fdc0f5e8202888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86355480bd965c519cab418794fdc0f5e8202888", "html_url": "https://github.com/rust-lang/rust/commit/86355480bd965c519cab418794fdc0f5e8202888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86355480bd965c519cab418794fdc0f5e8202888/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4449240d1ec360e8712c1e17e0b01c6ab5d02845", "url": "https://api.github.com/repos/rust-lang/rust/commits/4449240d1ec360e8712c1e17e0b01c6ab5d02845", "html_url": "https://github.com/rust-lang/rust/commit/4449240d1ec360e8712c1e17e0b01c6ab5d02845"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "07b14abc4c39987b746ff049dc401886518a193f", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/86355480bd965c519cab418794fdc0f5e8202888/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86355480bd965c519cab418794fdc0f5e8202888/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=86355480bd965c519cab418794fdc0f5e8202888", "patch": "@@ -1210,41 +1210,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         self.prove_aggregate_predicates(aggregate_kind, location);\n \n-        match aggregate_kind {\n+        if *aggregate_kind == AggregateKind::Tuple {\n             // tuple rvalue field type is always the type of the op. Nothing to check here.\n-            AggregateKind::Tuple => return,\n-\n-            // For closures, we have some **extra requirements** we\n-            // have to check. In particular, in their upvars and\n-            // signatures, closures often reference various regions\n-            // from the surrounding function -- we call those the\n-            // closure's free regions. When we borrow-check (and hence\n-            // region-check) closures, we may find that the closure\n-            // requires certain relationships between those free\n-            // regions. However, because those free regions refer to\n-            // portions of the CFG of their caller, the closure is not\n-            // in a position to verify those relationships. In that\n-            // case, the requirements get \"propagated\" to us, and so\n-            // we have to solve them here where we instantiate the\n-            // closure.\n-            //\n-            // Despite the opacity of the previous parapgrah, this is\n-            // actually relatively easy to understand in terms of the\n-            // desugaring. A closure gets desugared to a struct, and\n-            // these extra requirements are basically like where\n-            // clauses on the struct.\n-            AggregateKind::Closure(def_id, substs) => {\n-                if let Some(closure_region_requirements) = tcx.mir_borrowck(*def_id) {\n-                    closure_region_requirements.apply_requirements(\n-                        self.infcx,\n-                        location,\n-                        *def_id,\n-                        *substs,\n-                    );\n-                }\n-            }\n-\n-            _ => {}\n+            return;\n         }\n \n         for (i, operand) in operands.iter().enumerate() {\n@@ -1295,7 +1263,39 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 tcx.predicates_of(def.did).instantiate(tcx, substs)\n             }\n \n-            AggregateKind::Closure(def_id, substs) |\n+            // For closures, we have some **extra requirements** we\n+            //\n+            // have to check. In particular, in their upvars and\n+            // signatures, closures often reference various regions\n+            // from the surrounding function -- we call those the\n+            // closure's free regions. When we borrow-check (and hence\n+            // region-check) closures, we may find that the closure\n+            // requires certain relationships between those free\n+            // regions. However, because those free regions refer to\n+            // portions of the CFG of their caller, the closure is not\n+            // in a position to verify those relationships. In that\n+            // case, the requirements get \"propagated\" to us, and so\n+            // we have to solve them here where we instantiate the\n+            // closure.\n+            //\n+            // Despite the opacity of the previous parapgrah, this is\n+            // actually relatively easy to understand in terms of the\n+            // desugaring. A closure gets desugared to a struct, and\n+            // these extra requirements are basically like where\n+            // clauses on the struct.\n+            AggregateKind::Closure(def_id, substs) => {\n+                if let Some(closure_region_requirements) = tcx.mir_borrowck(*def_id) {\n+                    closure_region_requirements.apply_requirements(\n+                        self.infcx,\n+                        location,\n+                        *def_id,\n+                        *substs,\n+                    );\n+                }\n+\n+                tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n+            }\n+\n             AggregateKind::Generator(def_id, substs, _) => {\n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n             }"}]}