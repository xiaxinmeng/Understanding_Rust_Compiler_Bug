{"sha": "c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTAyNjkxZDg3NTU5Y2MxZjhmZjU3N2Y2YmRiMTQwYTYxOWVlN2Y=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-21T06:54:05Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-29T07:19:05Z"}, "message": "cargo fmt", "tree": {"sha": "e335fc1b4b0c1a5d57d094d257efb85a7eb85666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e335fc1b4b0c1a5d57d094d257efb85a7eb85666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxP/mkACgkQtvoGpuDi\nZls+dxAAgBcLitLFSGOox50gxu+WD41yUp+KNObO9McLrHNeAFG1wSeIT+4WZyNG\nNEuUS/akESeT+kR0WG5vXK8yy73QpExY6dxF7AfUS/48tK7ocRNnB46H67QCqyar\n8xgWNXKwkT2wzoSHEcEE3a6eG8CY070Sbl6gX0FLZAgfyBh8hjNHwl40SihEMj0l\ntvJIYNYyNA/gx3AUlLcUmAwFLremDphvy1WWw4Y7cocUDu0aElythE5e55DHi9BG\ns3b26iG+GhHQ9d3L8YUdbZ/pNDKP1uKJC445iJ6jBfxgFa4iKNnFW1Ki3srYSZXl\nSRMj4CHF4YJp0rhTtCoP3QIq3BQnM7QkMlusalzmZ+9GanHwXu7QLNr7zp0dJnyw\nYAFXPRpA/L7aHyxt9Abe99EeLVgBvaEcv0xrTK2oaktQEEzaxx8bm4GxMA1hrPDn\n54SLoSuYJorw2FXEAa/B71PxI0emYbwFS8rL86JTNB+lHIcjIObXI1zT0z/y4f72\nQc9QwIfbreRE8xPVKFb76Zrp7reyLH5zf8o6GFeu0Om5QrwBZKLvdk48/lP+PtLq\nItdMBIWs2eeToXhBFzvJnlFFugqc1S4C+eKIhrD5dqeneXaSEG3JBOMAo6N6a4V0\nsZPVpIbzd3tYLY2xxMAQFNWzSYrAayBmHqFXK1LC7yuixN7skDw=\n=pD98\n-----END PGP SIGNATURE-----", "payload": "tree e335fc1b4b0c1a5d57d094d257efb85a7eb85666\nparent f9d65b6356abfc0503046232776cf6fdc43fb578\nauthor Philipp Hansch <dev@phansch.net> 1548053645 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1548746345 +0100\n\ncargo fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "html_url": "https://github.com/rust-lang/rust/commit/c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d65b6356abfc0503046232776cf6fdc43fb578", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d65b6356abfc0503046232776cf6fdc43fb578", "html_url": "https://github.com/rust-lang/rust/commit/f9d65b6356abfc0503046232776cf6fdc43fb578"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "4e85d13332c16275818f8ee1367f751b6ffd3fe7", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "patch": "@@ -1,13 +1,13 @@\n use rustc::hir;\n-use rustc::hir::{Body, FnDecl, Constness};\n use rustc::hir::intravisit::FnKind;\n+use rustc::hir::{Body, Constness, FnDecl};\n // use rustc::mir::*;\n-use syntax::ast::{NodeId, Attribute};\n-use syntax_pos::Span;\n+use crate::utils::{is_entrypoint_fn, span_lint};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n-use crate::utils::{span_lint, is_entrypoint_fn};\n+use syntax::ast::{Attribute, NodeId};\n+use syntax_pos::Span;\n \n /// **What it does:**\n ///\n@@ -26,8 +26,12 @@ use crate::utils::{span_lint, is_entrypoint_fn};\n /// Also, the lint only runs one pass over the code. Consider these two non-const functions:\n ///\n /// ```rust\n-/// fn a() -> i32 { 0 }\n-/// fn b() -> i32 { a() }\n+/// fn a() -> i32 {\n+///     0\n+/// }\n+/// fn b() -> i32 {\n+///     a()\n+/// }\n /// ```\n ///\n /// When running Clippy, the lint will only suggest to make `a` const, because `b` at this time\n@@ -38,19 +42,15 @@ use crate::utils::{span_lint, is_entrypoint_fn};\n ///\n /// ```rust\n /// fn new() -> Self {\n-///     Self {\n-///         random_number: 42\n-///     }\n+///     Self { random_number: 42 }\n /// }\n /// ```\n ///\n /// Could be a const fn:\n ///\n /// ```rust\n /// const fn new() -> Self {\n-///     Self {\n-///         random_number: 42\n-///     }\n+///     Self { random_number: 42 }\n /// }\n /// ```\n declare_clippy_lint! {\n@@ -80,7 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         _: &FnDecl,\n         _: &Body,\n         span: Span,\n-        node_id: NodeId\n+        node_id: NodeId,\n     ) {\n         // Perform some preliminary checks that rule out constness on the Clippy side. This way we\n         // can skip the actual const check and return early.\n@@ -97,7 +97,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            _ => return\n+            _ => return,\n         }\n \n         let def_id = cx.tcx.hir().local_def_id(node_id);\n@@ -115,9 +115,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n \n fn can_be_const_fn(name: &str, header: hir::FnHeader, attrs: &[Attribute]) -> bool {\n     // Main and custom entrypoints can't be `const`\n-    if is_entrypoint_fn(name, attrs) { return false }\n+    if is_entrypoint_fn(name, attrs) {\n+        return false;\n+    }\n \n     // We don't have to lint on something that's already `const`\n-    if header.constness == Constness::Const { return false }\n+    if header.constness == Constness::Const {\n+        return false;\n+    }\n     true\n }"}, {"sha": "32fe5e22dd54531ad06f6d65df7d84f40a7af90f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "patch": "@@ -354,11 +354,9 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n ///\n /// This is either the usual `main` function or a custom function with the `#[start]` attribute.\n pub fn is_entrypoint_fn(fn_name: &str, attrs: &[ast::Attribute]) -> bool {\n-\n-    let is_custom_entrypoint = attrs.iter().any(|attr| {\n-        attr.path.segments.len() == 1\n-            && attr.path.segments[0].ident.to_string() == \"start\"\n-    });\n+    let is_custom_entrypoint = attrs\n+        .iter()\n+        .any(|attr| attr.path.segments.len() == 1 && attr.path.segments[0].ident.to_string() == \"start\");\n \n     is_custom_entrypoint || fn_name == \"main\"\n }"}, {"sha": "ede3724cc6b0dcaf471e1d1fb6ec4749b7ef7724", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "patch": "@@ -8,16 +8,22 @@\n struct Game;\n \n // This should not be linted because it's already const\n-const fn already_const() -> i32 { 32 }\n+const fn already_const() -> i32 {\n+    32\n+}\n \n impl Game {\n     // This should not be linted because it's already const\n-    pub const fn already_const() -> i32 { 32 }\n+    pub const fn already_const() -> i32 {\n+        32\n+    }\n }\n \n // Allowing on this function, because it would lint, which we don't want in this case.\n #[allow(clippy::missing_const_for_fn)]\n-fn random() -> u32 { 42 }\n+fn random() -> u32 {\n+    42\n+}\n \n // We should not suggest to make this function `const` because `random()` is non-const\n fn random_caller() -> u32 {\n@@ -30,7 +36,7 @@ static Y: u32 = 0;\n // refer to a static variable\n fn get_y() -> u32 {\n     Y\n-        //~^ ERROR E0013\n+    //~^ ERROR E0013\n }\n \n // Also main should not be suggested to be made const\n@@ -52,4 +58,6 @@ trait Foo {\n \n // Don't lint custom entrypoints either\n #[start]\n-fn init(num: isize, something: *const *const u8) -> isize { 1 }\n+fn init(num: isize, something: *const *const u8) -> isize {\n+    1\n+}"}, {"sha": "2c0a8e7a3c11fc95e46bacfc729231bd2eb4c956", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "patch": "@@ -10,14 +10,14 @@ struct Game {\n impl Game {\n     // Could be const\n     pub fn new() -> Self {\n-        Self {\n-            guess: 42,\n-        }\n+        Self { guess: 42 }\n     }\n }\n \n // Could be const\n-fn one() -> i32 { 1 }\n+fn one() -> i32 {\n+    1\n+}\n \n // Could also be const\n fn two() -> i32 {\n@@ -32,7 +32,9 @@ fn string() -> String {\n }\n \n // Could be const\n-unsafe fn four() -> i32 { 4 }\n+unsafe fn four() -> i32 {\n+    4\n+}\n \n // Could also be const\n fn generic<T>(t: T) -> T {"}, {"sha": "22ea852905dacf1e4e1599d6a8ba0c673b96bfff", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0a02691d87559cc1f8ff577f6bdb140a619ee7f/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "patch": "@@ -2,19 +2,19 @@ error: this could be a const_fn\n   --> $DIR/could_be_const.rs:12:5\n    |\n LL | /     pub fn new() -> Self {\n-LL | |         Self {\n-LL | |             guess: 42,\n-LL | |         }\n+LL | |         Self { guess: 42 }\n LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n \n error: this could be a const_fn\n-  --> $DIR/could_be_const.rs:20:1\n+  --> $DIR/could_be_const.rs:18:1\n    |\n-LL | fn one() -> i32 { 1 }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn one() -> i32 {\n+LL | |     1\n+LL | | }\n+   | |_^\n \n error: this could be a const_fn\n   --> $DIR/could_be_const.rs:23:1\n@@ -36,11 +36,13 @@ LL | | }\n error: this could be a const_fn\n   --> $DIR/could_be_const.rs:35:1\n    |\n-LL | unsafe fn four() -> i32 { 4 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / unsafe fn four() -> i32 {\n+LL | |     4\n+LL | | }\n+   | |_^\n \n error: this could be a const_fn\n-  --> $DIR/could_be_const.rs:38:1\n+  --> $DIR/could_be_const.rs:40:1\n    |\n LL | / fn generic<T>(t: T) -> T {\n LL | |     t"}]}