{"sha": "95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjJjNGJjYzM5MGI1ZDJiY2Q2ZTQ4ZDEzN2FmNzM5MmQwODljYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-29T21:26:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-29T21:26:49Z"}, "message": "auto merge of #13772 : brson/rust/cratedocs, r=alexcrichton\n\nAlso move prelude explanation to the prelude module.\r\n\r\nThis tries to provide a guide to what's in the standard library, organized bottom up from primitives to I/O.", "tree": {"sha": "e984d3bff05b6b0b283d395a6ad924b1adeda494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e984d3bff05b6b0b283d395a6ad924b1adeda494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "html_url": "https://github.com/rust-lang/rust/commit/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6fa048df80ff043da1ed36855b841287c9089d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6fa048df80ff043da1ed36855b841287c9089d", "html_url": "https://github.com/rust-lang/rust/commit/7f6fa048df80ff043da1ed36855b841287c9089d"}, {"sha": "3525bd895931314ccba30c61fe732eb2500a5560", "url": "https://api.github.com/repos/rust-lang/rust/commits/3525bd895931314ccba30c61fe732eb2500a5560", "html_url": "https://github.com/rust-lang/rust/commit/3525bd895931314ccba30c61fe732eb2500a5560"}], "stats": {"total": 142, "additions": 106, "deletions": 36}, "files": [{"sha": "841a73fa01fcb494bacd0ab988a1627952a3cf0a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 78, "deletions": 26, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "patch": "@@ -8,40 +8,92 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! # The Rust standard library\n+//! # The Rust Standard Library\n //!\n-//! The Rust standard library is a group of interrelated modules defining\n-//! the core language traits, operations on built-in data types,\n-//! platform abstractions, the task scheduler, runtime support for language\n-//! features and other common functionality.\n+//! The Rust Standard Library provides the essential runtime\n+//! functionality for building portable Rust software.\n+//! It is linked to all Rust crates by default.\n //!\n-//! `std` includes modules corresponding to each of the integer types,\n-//! each of the floating point types, the `bool` type, tuples, characters,\n-//! strings (`str`), vectors (`vec`), managed boxes (`managed`), owned\n-//! boxes (`owned`), and unsafe pointers and references (`ptr`, `borrowed`).\n-//! Additionally, `std` provides pervasive types (`option` and `result`),\n-//! task creation and communication primitives (`task`, `comm`), platform\n-//! abstractions (`os` and `path`), basic I/O abstractions (`io`), common\n-//! traits (`kinds`, `ops`, `cmp`, `num`, `to_str`), and complete bindings\n-//! to the C standard library (`libc`).\n+//! ## Intrinsic types and operations\n //!\n-//! # Standard library injection and the Rust prelude\n+//! The [`ptr`](ptr/index.html), [`mem`](mem/index.html),\n+//! and [`cast`](cast/index.html) modules deal with unsafe pointers,\n+//! memory manipulation, and coercion.\n+//! [`kinds`](kinds/index.html) defines the special built-in traits,\n+//! and [`raw`](raw/index.html) the runtime representation of Rust types.\n+//! These are some of the lowest-level building blocks of Rust\n+//! abstractions.\n //!\n-//! `std` is imported at the topmost level of every crate by default, as\n-//! if the first line of each crate was\n+//! ## Math on primitive types and math traits\n //!\n-//!     extern crate std;\n+//! Although basic operations on primitive types are implemented\n+//! directly by the compiler, the standard library additionally\n+//! defines many common operations through traits defined in\n+//! mod [`num`](num/index.html).\n //!\n-//! This means that the contents of std can be accessed from any context\n-//! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n-//! etc.\n+//! ## Pervasive types\n //!\n-//! Additionally, `std` contains a `prelude` module that reexports many of the\n-//! most common types, traits and functions. The contents of the prelude are\n-//! imported into every *module* by default.  Implicitly, all modules behave as if\n-//! they contained the following prologue:\n+//! The [`option`](option/index.html) and [`result`](result/index.html)\n+//! modules define optional and error-handling types, `Option` and `Result`.\n+//! [`iter`](iter/index.html) defines Rust's iterator protocol\n+//! along with a wide variety of iterators.\n+//! [`Cell` and `RefCell`](cell/index.html) are for creating types that\n+//! manage their own mutability.\n //!\n-//!     use std::prelude::*;\n+//! ## Vectors, slices and strings\n+//!\n+//! The common container type, `Vec`, a growable vector backed by an\n+//! array, lives in the [`vec`](vec/index.html) module. References to\n+//! arrays, `&[T]`, more commonly called \"slices\", are built-in types\n+//! for which the [`slice`](slice/index.html) module defines many\n+//! methods.\n+//!\n+//! UTF-8 strings, `~str` and `&str`, are built-in types, and the\n+//! standard library defines methods for them on a variety of traits\n+//! in the [`str`](str/index.html) module. Rust strings are immutable;\n+//! use the `StrBuf` type defined in [`strbuf`](strbuf/index.html)\n+//! for a mutable string builder.\n+//!\n+//! For converting to strings use the [`format!`](fmt/index.html)\n+//! macro, and for converting from strings use the\n+//! [`FromStr`](from_str/index.html) trait.\n+//!\n+//! ## Platform abstractions\n+//!\n+//! Besides basic data types, the standard library is largely concerned\n+//! with abstracting over differences in common platforms, most notably\n+//! Windows and Unix derivatives. The [`os`](os/index.html) module\n+//! provides a number of basic functions for interacting with the\n+//! operating environment, including program arguments, environment\n+//! variables, and directory navigation. The [`path`](path/index.html)\n+//! module encapsulates the platform-specific rules for dealing\n+//! with file paths.\n+//!\n+//! `std` also includes modules for interoperating with the\n+//! C language: [`c_str`](c_str/index.html) and\n+//! [`c_vec`](c_vec/index.html).\n+//!\n+//! ## Concurrency, I/O, and the runtime\n+//!\n+//! The [`task`](task/index.html) module contains Rust's threading abstractions,\n+//! while [`comm`](comm/index.html) contains the channel types for message\n+//! passing. [`sync`](sync/index.html) contains further, primitive, shared\n+//! memory types, including [`atomics`](sync/atomics/index.html).\n+//!\n+//! Common types of I/O, including files, TCP, UPD, pipes, Unix domain sockets,\n+//! timers, and process spawning, are defined in the [`io`](io/index.html).\n+//!\n+//! Rust's I/O and concurrency depends on a small runtime interface\n+//! that lives, along with its support code, in mod [`rt`](rt/index.html).\n+//! While a notable part of the standard library's architecture, this\n+//! module is not intended for public use.\n+//!\n+//! ## The Rust prelude and macros\n+//!\n+//! Finally, the [`prelude`](prelude/index.html) defines a set of\n+//! common set of traits, types, and functions that are made available\n+//! to all code by default. [`macros`](macros/index.html) contains\n+//! all the standard macros, such as `assert!`, `fail!`, `println!`.\n \n #![crate_id = \"std#0.11-pre\"]\n #![comment = \"The Rust standard library\"]"}, {"sha": "e6001537d49637e1dc50f559f136cd582a1107ba", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f2c4bcc390b5d2bcd6e48d137af7392d089cc8/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=95f2c4bcc390b5d2bcd6e48d137af7392d089cc8", "patch": "@@ -8,16 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n-\n-The standard module imported by default into all Rust modules\n-\n-Many programming languages have a 'prelude': a particular subset of the\n-libraries that come with the language. Every program imports the prelude by\n-default. The prelude imports various core parts of the library that are\n-generally useful to many Rust programs.\n-\n-*/\n+//! # The Rust prelude\n+//!\n+//! Because `std` is required by most serious Rust software, it is\n+//! imported at the topmost level of every crate by default, as if the\n+//! first line of each crate was\n+//!\n+//! ```ignore\n+//! extern crate std;\n+//! ```\n+//!\n+//! This means that the contents of std can be accessed from any context\n+//! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n+//! etc.\n+//!\n+//! Additionally, `std` contains a `prelude` module that reexports many of the\n+//! most common traits, types and functions. The contents of the prelude are\n+//! imported into every *module* by default.  Implicitly, all modules behave as if\n+//! they contained the following prologue:\n+//!\n+//! ```ignore\n+//! use std::prelude::*;\n+//! ```\n+//!\n+//! The prelude is primarily concerned with exporting *traits* that are so\n+//! pervasive that it would be obnoxious to import for every use, particularly\n+//! those that define methods on primitive types. It does include a few\n+//! particularly useful standalone functions, like `from_str`, `range`, and\n+//! `drop`, `spawn`, and `channel`.\n \n // Reexported core operators\n pub use kinds::{Copy, Send, Sized, Share};"}]}