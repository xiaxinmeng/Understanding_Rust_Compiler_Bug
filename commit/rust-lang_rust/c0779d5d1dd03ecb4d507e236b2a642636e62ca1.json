{"sha": "c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzc5ZDVkMWRkMDNlY2I0ZDUwN2UyMzZiMmE2NDI2MzZlNjJjYTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T15:40:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T15:40:46Z"}, "message": "Add comments for trap::codegen_print gv and fn defs", "tree": {"sha": "31a42db72734c47d793c868b003b4ed4985a3ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a42db72734c47d793c868b003b4ed4985a3ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "html_url": "https://github.com/rust-lang/rust/commit/c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0779d5d1dd03ecb4d507e236b2a642636e62ca1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eae6bc8793e43db7ebb210515e9b1de6574bd6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eae6bc8793e43db7ebb210515e9b1de6574bd6d", "html_url": "https://github.com/rust-lang/rust/commit/2eae6bc8793e43db7ebb210515e9b1de6574bd6d"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "f37f6cccae6bd24d1ba90a919a0bb5e7b58c6313", "filename": "src/trap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0779d5d1dd03ecb4d507e236b2a642636e62ca1/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0779d5d1dd03ecb4d507e236b2a642636e62ca1/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "patch": "@@ -7,17 +7,19 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n         returns: vec![],\n     }).unwrap();\n     let puts = fx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n+    fx.add_entity_comment(puts, \"puts\");\n \n     let symbol_name = fx.tcx.symbol_name(fx.instance);\n-    let msg_bytes = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg).into_bytes().into_boxed_slice();\n+    let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg);\n     let mut data_ctx = DataContext::new();\n-    data_ctx.define(msg_bytes);\n+    data_ctx.define(real_msg.as_bytes().to_vec().into_boxed_slice());\n     let msg_id = fx.module.declare_data(&(symbol_name.as_str().to_string() + msg), Linkage::Local, false, None).unwrap();\n \n     // Ignore DuplicateDefinition error, as the data will be the same\n     let _ = fx.module.define_data(msg_id, &data_ctx);\n \n     let local_msg_id = fx.module.declare_data_in_func(msg_id, fx.bcx.func);\n+    fx.add_entity_comment(local_msg_id, msg);\n     let msg_ptr = fx.bcx.ins().global_value(pointer_ty(fx.tcx), local_msg_id);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }"}]}