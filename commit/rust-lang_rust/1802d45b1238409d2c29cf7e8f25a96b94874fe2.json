{"sha": "1802d45b1238409d2c29cf7e8f25a96b94874fe2", "node_id": "C_kwDOAAsO6NoAKDE4MDJkNDViMTIzODQwOWQyYzI5Y2Y3ZThmMjVhOTZiOTQ4NzRmZTI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-02T14:03:29Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:54Z"}, "message": "Record RPITs elided lifetimes in path segments", "tree": {"sha": "2edfdea9f2bba81026966bca964e181da793a584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edfdea9f2bba81026966bca964e181da793a584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1802d45b1238409d2c29cf7e8f25a96b94874fe2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1y4ACgkQgTGiTgx5\n768vtQ/+OalSDtPktvepinx51Ea9thceeWw/yLqrE0t6wG9WI8xT8lKGie4hR2Ia\nLv1j0Gqh2dVl4G1zK4Btzj7UbdqQUZC7hjTCmP0TiaiXuBhxcK81JxPDjpxTVupN\nKOiBQnVN/XqaPoxml1Qn79ChEZ1ZVAWtXpnHPpXXJ/1yzkgBFv3jz8Xvuq0f0EsJ\n1t+Cajaxj3g3SKoYvTrEPbLPw5CGmu1/SGcLep4ruet1V/40XQ4y8wtt73BxihBY\nHTi3lFzwSP5y1dMEfKJ2OqDNte77Ikfn7T0Quj+Hd63aRCVi0FGDWoMcVNr/KjAH\nbBPd+z25hnyjgrhCGd1KR4wu9O244LvnLKguPaSLdSvxI+9HKWAIiHu13eWv6/3Q\n6ait0EQKgjJoDbgUA4gMth44bIwyb3UNsYWGwoqmix0zcL1zTzhijSWmoj8ViIK2\nwFlyufA3WSZb69eNDY2NOisOE52PhDpwN9KZuWfluNTjEA5D9z7tPEcoOJJw1G2v\nso9s1qB1A43RIqLoHo2BuTFyd6R7eQ29tYmAyScsAIPDgHHKF2d4PtCy6PJFfBhq\nzwXCPuAPqE3nUBXOAE2TwCYkyBjGk9MFjSsixLwLEGt2MZ+fU4Etem8OkfM576kN\nWoautkLqFR6S+m66GT5a2TEqGVbPOvH0C95JFMy+IPFynBXs4jY=\n=2KVe\n-----END PGP SIGNATURE-----", "payload": "tree 2edfdea9f2bba81026966bca964e181da793a584\nparent 81c4d2371aab4636c56ac5d61d391ae195d8bb0a\nauthor Santiago Pastorino <spastorino@gmail.com> 1659449009 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623214 -0300\n\nRecord RPITs elided lifetimes in path segments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1802d45b1238409d2c29cf7e8f25a96b94874fe2", "html_url": "https://github.com/rust-lang/rust/commit/1802d45b1238409d2c29cf7e8f25a96b94874fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1802d45b1238409d2c29cf7e8f25a96b94874fe2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c4d2371aab4636c56ac5d61d391ae195d8bb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c4d2371aab4636c56ac5d61d391ae195d8bb0a", "html_url": "https://github.com/rust-lang/rust/commit/81c4d2371aab4636c56ac5d61d391ae195d8bb0a"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "6cf938a242e5439d172bfe07104f2436ca1b4941", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1802d45b1238409d2c29cf7e8f25a96b94874fe2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1802d45b1238409d2c29cf7e8f25a96b94874fe2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1802d45b1238409d2c29cf7e8f25a96b94874fe2", "patch": "@@ -1446,7 +1446,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::OwnerNode::Item(self.arena.alloc(opaque_ty_item))\n     }\n \n-    fn create_and_capture_lifetime_defs(&mut self, lifetimes_in_bounds: &[&Lifetime]) {\n+    fn create_and_capture_lifetime_defs(&mut self, lifetimes_in_bounds: &[Lifetime]) {\n         for lifetime in lifetimes_in_bounds {\n             let ident = lifetime.ident;\n             let span = ident.span;"}, {"sha": "51fa7075d3450976666831f4c07457b14f386dce", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1802d45b1238409d2c29cf7e8f25a96b94874fe2/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1802d45b1238409d2c29cf7e8f25a96b94874fe2/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=1802d45b1238409d2c29cf7e8f25a96b94874fe2", "patch": "@@ -1,25 +1,26 @@\n use super::ResolverAstLoweringExt;\n use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n use rustc_ast::{\n-    FnRetTy, GenericBounds, Lifetime, NodeId, PolyTraitRef, TraitBoundModifier, Ty, TyKind,\n+    FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, TraitBoundModifier, Ty,\n+    TyKind,\n };\n use rustc_hir::def::LifetimeRes;\n use rustc_middle::ty::ResolverAstLowering;\n+use rustc_span::symbol::{kw, Ident};\n+use rustc_span::Span;\n \n-struct LifetimeCollectVisitor<'this, 'ast: 'this> {\n-    resolver: &'this ResolverAstLowering,\n+struct LifetimeCollectVisitor<'ast> {\n+    resolver: &'ast ResolverAstLowering,\n     current_binders: Vec<NodeId>,\n-    collected_lifetimes: Vec<&'ast Lifetime>,\n+    collected_lifetimes: Vec<Lifetime>,\n }\n \n-impl<'this, 'ast: 'this> LifetimeCollectVisitor<'this, 'ast> {\n-    fn new(resolver: &'this ResolverAstLowering) -> Self {\n+impl<'ast> LifetimeCollectVisitor<'ast> {\n+    fn new(resolver: &'ast ResolverAstLowering) -> Self {\n         Self { resolver, current_binders: Vec::new(), collected_lifetimes: Vec::new() }\n     }\n-}\n \n-impl<'this, 'ast: 'this> Visitor<'ast> for LifetimeCollectVisitor<'this, 'ast> {\n-    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n+    fn record_lifetime_use(&mut self, lifetime: Lifetime) {\n         let res = self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error);\n \n         if res.binder().map_or(true, |b| !self.current_binders.contains(&b)) {\n@@ -28,6 +29,25 @@ impl<'this, 'ast: 'this> Visitor<'ast> for LifetimeCollectVisitor<'this, 'ast> {\n             }\n         }\n     }\n+}\n+\n+impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n+    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n+        self.record_lifetime_use(*lifetime);\n+    }\n+\n+    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n+        if let Some(LifetimeRes::ElidedAnchor { start, end }) =\n+            self.resolver.get_lifetime_res(path_segment.id)\n+        {\n+            for i in start..end {\n+                let lifetime =\n+                    Lifetime { id: i, ident: Ident::new(kw::UnderscoreLifetime, path_span) };\n+                self.record_lifetime_use(lifetime);\n+            }\n+        }\n+        visit::walk_path_segment(self, path_span, path_segment);\n+    }\n \n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         self.current_binders.push(t.trait_ref.ref_id);\n@@ -51,19 +71,16 @@ impl<'this, 'ast: 'this> Visitor<'ast> for LifetimeCollectVisitor<'this, 'ast> {\n     }\n }\n \n-pub fn lifetimes_in_ret_ty<'this, 'ast: 'this>(\n-    resolver: &'this ResolverAstLowering,\n-    ret_ty: &'ast FnRetTy,\n-) -> Vec<&'ast Lifetime> {\n+pub fn lifetimes_in_ret_ty(resolver: &ResolverAstLowering, ret_ty: &FnRetTy) -> Vec<Lifetime> {\n     let mut visitor = LifetimeCollectVisitor::new(resolver);\n     visitor.visit_fn_ret_ty(ret_ty);\n     visitor.collected_lifetimes\n }\n \n-pub fn lifetimes_in_bounds<'this, 'ast: 'this>(\n-    resolver: &'this ResolverAstLowering,\n-    bounds: &'ast GenericBounds,\n-) -> Vec<&'ast Lifetime> {\n+pub fn lifetimes_in_bounds(\n+    resolver: &ResolverAstLowering,\n+    bounds: &GenericBounds,\n+) -> Vec<Lifetime> {\n     let mut visitor = LifetimeCollectVisitor::new(resolver);\n     for bound in bounds {\n         visitor.visit_param_bound(bound, BoundKind::Bound);"}]}