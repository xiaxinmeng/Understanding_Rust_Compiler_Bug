{"sha": "4fdeb353ceecd17fd7894bd7968d266a437d652e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZGViMzUzY2VlY2QxN2ZkNzg5NGJkNzk2OGQyNjZhNDM3ZDY1MmU=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-08-05T19:12:10Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-08-05T20:06:12Z"}, "message": "Fully generalize `BTree{Map, Set}` range iterators\n\nThis permits collections with `String` keys to be ranged over with\n`&str` bounds. The `K` defaults for `Min` and `Max` permit the default\ntype parameter fallback to work with things like\n\n```rust\nuse std::collections::{BTreeSet, Bound};\nlet set = BTreeSet::<String>::new();\nset.range(Bound::Included(\"a\"), Bound::Unbounded);\n```\n\nWithout the defaults, the type of the maximum bound would be\nunconstrained.", "tree": {"sha": "66419e4434dcc186bae7b3b71c462164ceb98974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66419e4434dcc186bae7b3b71c462164ceb98974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdeb353ceecd17fd7894bd7968d266a437d652e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdeb353ceecd17fd7894bd7968d266a437d652e", "html_url": "https://github.com/rust-lang/rust/commit/4fdeb353ceecd17fd7894bd7968d266a437d652e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdeb353ceecd17fd7894bd7968d266a437d652e/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03456183e85fe7bd465bbe7c8f67885a2528444", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03456183e85fe7bd465bbe7c8f67885a2528444", "html_url": "https://github.com/rust-lang/rust/commit/d03456183e85fe7bd465bbe7c8f67885a2528444"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "f5d1d44b4048295b12f1bb7fd60416a17ad2245a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=4fdeb353ceecd17fd7894bd7968d266a437d652e", "patch": "@@ -1522,7 +1522,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn range<'a>(&'a self, min: Bound<&K>, max: Bound<&K>) -> Range<'a, K, V> {\n+    pub fn range<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&self, min: Bound<&Min>,\n+                                                               max: Bound<&Max>)\n+        -> Range<K, V> where\n+        K: Borrow<Min> + Borrow<Max>,\n+    {\n         range_impl!(&self.root, min, max, as_slices_internal, iter, Range, edges, [])\n     }\n \n@@ -1542,7 +1546,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"].iter()\n     ///                                                                       .map(|&s| (s, 0))\n     ///                                                                       .collect();\n-    /// for (_, balance) in map.range_mut(Included(&\"B\"), Excluded(&\"Cheryl\")) {\n+    /// for (_, balance) in map.range_mut(Included(\"B\"), Excluded(\"Cheryl\")) {\n     ///     *balance += 100;\n     /// }\n     /// for (name, balance) in &map {\n@@ -1551,7 +1555,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn range_mut<'a>(&'a mut self, min: Bound<&K>, max: Bound<&K>) -> RangeMut<'a, K, V> {\n+    pub fn range_mut<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&mut self, min: Bound<&Min>,\n+                                                                   max: Bound<&Max>)\n+        -> RangeMut<K, V> where\n+        K: Borrow<Min> + Borrow<Max>,\n+    {\n         range_impl!(&mut self.root, min, max, as_slices_internal_mut, iter_mut, RangeMut,\n                                                                       edges_mut, [mut])\n     }"}, {"sha": "9f2e1db42c938b5c46e4546b1545892928ac7170", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=4fdeb353ceecd17fd7894bd7968d266a437d652e", "patch": "@@ -1528,7 +1528,9 @@ macro_rules! node_slice_impl {\n             }\n \n             /// Returns a sub-slice with elements starting with `min_key`.\n-            pub fn slice_from(self, min_key: &K) -> $NodeSlice<'a, K, V> {\n+            pub fn slice_from<Q: ?Sized + Ord>(self, min_key: &Q) -> $NodeSlice<'a, K, V> where\n+                K: Borrow<Q>,\n+            {\n                 //  _______________\n                 // |_1_|_3_|_5_|_7_|\n                 // |   |   |   |   |\n@@ -1556,7 +1558,9 @@ macro_rules! node_slice_impl {\n             }\n \n             /// Returns a sub-slice with elements up to and including `max_key`.\n-            pub fn slice_to(self, max_key: &K) -> $NodeSlice<'a, K, V> {\n+            pub fn slice_to<Q: ?Sized + Ord>(self, max_key: &Q) -> $NodeSlice<'a, K, V> where\n+                K: Borrow<Q>,\n+            {\n                 //  _______________\n                 // |_1_|_3_|_5_|_7_|\n                 // |   |   |   |   |"}, {"sha": "e31147b730830d1d92907ba05e2352403d9d8720", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdeb353ceecd17fd7894bd7968d266a437d652e/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=4fdeb353ceecd17fd7894bd7968d266a437d652e", "patch": "@@ -158,7 +158,11 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn range<'a>(&'a self, min: Bound<&T>, max: Bound<&T>) -> Range<'a, T> {\n+    pub fn range<'a, Min: ?Sized + Ord = T, Max: ?Sized + Ord = T>(&'a self, min: Bound<&Min>,\n+                                                                   max: Bound<&Max>)\n+        -> Range<'a, T> where\n+        T: Borrow<Min> + Borrow<Max>,\n+    {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n         let first: fn((&'a T, &'a ())) -> &'a T = first; // coerce to fn pointer\n "}]}