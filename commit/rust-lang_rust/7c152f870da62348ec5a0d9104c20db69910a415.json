{"sha": "7c152f870da62348ec5a0d9104c20db69910a415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTUyZjg3MGRhNjIzNDhlYzVhMGQ5MTA0YzIwZGI2OTkxMGE0MTU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-10-03T21:24:49Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-02T23:31:52Z"}, "message": "Add Error impls to a few key error types", "tree": {"sha": "226afdcba9a46822fe952e62cb12e7e5702326b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226afdcba9a46822fe952e62cb12e7e5702326b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c152f870da62348ec5a0d9104c20db69910a415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c152f870da62348ec5a0d9104c20db69910a415", "html_url": "https://github.com/rust-lang/rust/commit/7c152f870da62348ec5a0d9104c20db69910a415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c152f870da62348ec5a0d9104c20db69910a415/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6815c2e8e8dae3d8dedfe95e985a79c57841bdb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6815c2e8e8dae3d8dedfe95e985a79c57841bdb2", "html_url": "https://github.com/rust-lang/rust/commit/6815c2e8e8dae3d8dedfe95e985a79c57841bdb2"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "e69a0ea7929cba65db2209c715fba478bcc1495c", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=7c152f870da62348ec5a0d9104c20db69910a415", "patch": "@@ -13,6 +13,7 @@\n //! Base64 binary-to-text encoding\n use std::fmt;\n use std::string;\n+use std::error;\n \n /// Available encoding character sets\n pub enum CharacterSet {\n@@ -178,6 +179,19 @@ impl fmt::Show for FromBase64Error {\n     }\n }\n \n+impl error::Error for FromBase64Error {\n+    fn description(&self) -> &str {\n+        match *self {\n+            InvalidBase64Byte(_, _) => \"invalid character\",\n+            InvalidBase64Length => \"invalid length\",\n+        }\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        Some(self.to_string())\n+    }\n+}\n+\n impl<'a> FromBase64 for &'a str {\n     /**\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)"}, {"sha": "b591d35c67c09b2de4c7ee2251c10a2b598d24c0", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=7c152f870da62348ec5a0d9104c20db69910a415", "patch": "@@ -13,6 +13,7 @@\n //! Hex binary-to-text encoding\n use std::fmt;\n use std::string;\n+use std::error;\n \n /// A trait for converting a value to hexadecimal encoding\n pub trait ToHex {\n@@ -77,6 +78,20 @@ impl fmt::Show for FromHexError {\n     }\n }\n \n+impl error::Error for FromHexError {\n+    fn description(&self) -> &str {\n+        match *self {\n+            InvalidHexCharacter(_, _) => \"invalid character\",\n+            InvalidHexLength => \"invalid length\",\n+        }\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        Some(self.to_string())\n+    }\n+}\n+\n+\n impl<'a> FromHex for &'a str {\n     /**\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)"}, {"sha": "cde2dfac3782159ee204c423f09e2e17c3b4cfda", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7c152f870da62348ec5a0d9104c20db69910a415", "patch": "@@ -313,6 +313,11 @@ fn io_error_to_error(io: io::IoError) -> ParserError {\n     IoError(io.kind, io.desc)\n }\n \n+impl std::error::Error for DecoderError {\n+    fn description(&self) -> &str { \"decoder error\" }\n+    fn detail(&self) -> Option<std::string::String> { Some(self.to_string()) }\n+}\n+\n pub type EncodeResult = io::IoResult<()>;\n pub type DecodeResult<T> = Result<T, DecoderError>;\n "}, {"sha": "3dcd8d792a4d8f0d6f1248afe165e74618797a68", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7c152f870da62348ec5a0d9104c20db69910a415", "patch": "@@ -222,7 +222,9 @@ responding to errors that may occur while attempting to read the numbers.\n #![deny(unused_must_use)]\n \n use char::Char;\n+use clone::Clone;\n use default::Default;\n+use error::{FromError, Error};\n use fmt;\n use int;\n use iter::Iterator;\n@@ -433,6 +435,22 @@ impl fmt::Show for IoError {\n     }\n }\n \n+impl Error for IoError {\n+    fn description(&self) -> &str {\n+        self.desc\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        self.detail.clone()\n+    }\n+}\n+\n+impl FromError<IoError> for Box<Error> {\n+    fn from_error(err: IoError) -> Box<Error> {\n+        box err\n+    }\n+}\n+\n /// A list specifying general categories of I/O error.\n #[deriving(PartialEq, Eq, Clone, Show)]\n pub enum IoErrorKind {"}, {"sha": "9846f7b653e2b254471aae448810dc559b50beaf", "filename": "src/libstd/os.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c152f870da62348ec5a0d9104c20db69910a415/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=7c152f870da62348ec5a0d9104c20db69910a415", "patch": "@@ -32,11 +32,13 @@\n #![allow(non_snake_case)]\n \n use clone::Clone;\n+use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n use iter::Iterator;\n use libc::{c_void, c_int};\n use libc;\n+use boxed::Box;\n use ops::Drop;\n use option::{Some, None, Option};\n use os;\n@@ -48,6 +50,7 @@ use slice::{AsSlice, ImmutableSlice, MutableSlice, ImmutablePartialEqSlice};\n use slice::CloneableVector;\n use str::{Str, StrSlice, StrAllocating};\n use string::String;\n+use to_string::ToString;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use vec::Vec;\n \n@@ -1437,6 +1440,17 @@ impl fmt::Show for MapError {\n     }\n }\n \n+impl Error for MapError {\n+    fn description(&self) -> &str { \"memory map error\" }\n+    fn detail(&self) -> Option<String> { Some(self.to_string()) }\n+}\n+\n+impl FromError<MapError> for Box<Error> {\n+    fn from_error(err: MapError) -> Box<Error> {\n+        box err\n+    }\n+}\n+\n #[cfg(unix)]\n impl MemoryMap {\n     /// Create a new mapping with the given `options`, at least `min_len` bytes"}]}