{"sha": "fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjkwNWJjNjk4YzBiNmVlOGI0MDcyNzNlNzE1MWQ3YjlhN2E4OWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-27T08:40:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-27T12:04:53Z"}, "message": "panic when calling MaybeUninhabited::into_inner on uninhabited type", "tree": {"sha": "3a0ad6d20a36a7b5401a0cf724c2026b3ca44185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a0ad6d20a36a7b5401a0cf724c2026b3ca44185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "html_url": "https://github.com/rust-lang/rust/commit/fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7be40c65ae8ace467c9c40b0a22642973e31a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7be40c65ae8ace467c9c40b0a22642973e31a13", "html_url": "https://github.com/rust-lang/rust/commit/a7be40c65ae8ace467c9c40b0a22642973e31a13"}], "stats": {"total": 154, "additions": 101, "deletions": 53}, "files": [{"sha": "4f5310f5285c9956207887de18ae22a5126053bf", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "patch": "@@ -690,6 +690,11 @@ extern \"rust-intrinsic\" {\n     /// crate it is invoked in.\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n+    /// This will statically either panic, or do nothing.\n+    #[cfg(not(stage0))]\n+    pub fn panic_if_uninhabited<T>();\n+\n     /// Creates a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,"}, {"sha": "8fcbb73d9ce462eaa0090ccf9d11ff9a6dba59cd", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "patch": "@@ -492,6 +492,8 @@ pub const fn needs_drop<T>() -> bool {\n #[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::zeroed` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn zeroed<T>() -> T {\n+    #[cfg(not(stage0))]\n+    intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n }\n \n@@ -624,6 +626,8 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::uninitialized` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n+    #[cfg(not(stage0))]\n+    intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n }\n \n@@ -1128,6 +1132,8 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn into_inner(self) -> T {\n+        #[cfg(not(stage0))]\n+        intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n "}, {"sha": "de824322263d728e1f242b7d746724220c04503a", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 55, "deletions": 46, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "patch": "@@ -500,53 +500,62 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     _ => bx.new_fn_type(sig, &extra_args)\n                 };\n \n-                // emit a panic instead of instantiating an uninhabited type\n-                if (intrinsic == Some(\"init\") || intrinsic == Some(\"uninit\")) &&\n-                    fn_ty.ret.layout.abi.is_uninhabited()\n-                {\n-                    let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                    let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n-                    let filename = bx.const_str_slice(filename);\n-                    let line = bx.const_u32(loc.line as u32);\n-                    let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n-                    let align = tcx.data_layout.aggregate_align.abi\n-                        .max(tcx.data_layout.i32_align.abi)\n-                        .max(tcx.data_layout.pointer_align.abi);\n-\n-                    let str = format!(\n-                        \"Attempted to instantiate uninhabited type {} using mem::{}\",\n-                        sig.output(),\n-                        if intrinsic == Some(\"init\") { \"zeroed\" } else { \"uninitialized\" }\n-                    );\n-                    let msg_str = Symbol::intern(&str).as_str();\n-                    let msg_str = bx.const_str_slice(msg_str);\n-                    let msg_file_line_col = bx.const_struct(\n-                        &[msg_str, filename, line, col],\n-                        false,\n-                    );\n-                    let msg_file_line_col = bx.static_addr_of(\n-                        msg_file_line_col,\n-                        align,\n-                        Some(\"panic_loc\"),\n-                    );\n+                // emit a panic or a NOP for `panic_if_uninhabited`\n+                if intrinsic == Some(\"panic_if_uninhabited\") {\n+                    let ty = match callee.layout.ty.sty {\n+                        ty::FnDef(_, substs) => {\n+                            substs.type_at(0)\n+                        }\n+                        _ => bug!(\"{} is not callable as intrinsic\", callee.layout.ty)\n+                    };\n+                    let layout = bx.layout_of(ty);\n+                    if layout.abi.is_uninhabited() {\n+                        let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n+                        let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n+                        let filename = bx.const_str_slice(filename);\n+                        let line = bx.const_u32(loc.line as u32);\n+                        let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n+                        let align = tcx.data_layout.aggregate_align.abi\n+                            .max(tcx.data_layout.i32_align.abi)\n+                            .max(tcx.data_layout.pointer_align.abi);\n+\n+                        let str = format!(\n+                            \"Attempted to instantiate uninhabited type {}\",\n+                            ty\n+                        );\n+                        let msg_str = Symbol::intern(&str).as_str();\n+                        let msg_str = bx.const_str_slice(msg_str);\n+                        let msg_file_line_col = bx.const_struct(\n+                            &[msg_str, filename, line, col],\n+                            false,\n+                        );\n+                        let msg_file_line_col = bx.static_addr_of(\n+                            msg_file_line_col,\n+                            align,\n+                            Some(\"panic_loc\"),\n+                        );\n \n-                    // Obtain the panic entry point.\n-                    let def_id =\n-                        common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n-                    let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                    let fn_ty = bx.fn_type_of_instance(&instance);\n-                    let llfn = bx.get_fn(instance);\n-\n-                    // Codegen the actual panic invoke/call.\n-                    do_call(\n-                        self,\n-                        &mut bx,\n-                        fn_ty,\n-                        llfn,\n-                        &[msg_file_line_col],\n-                        destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n-                        cleanup,\n-                    );\n+                        // Obtain the panic entry point.\n+                        let def_id =\n+                            common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n+                        let instance = ty::Instance::mono(bx.tcx(), def_id);\n+                        let fn_ty = bx.fn_type_of_instance(&instance);\n+                        let llfn = bx.get_fn(instance);\n+\n+                        // Codegen the actual panic invoke/call.\n+                        do_call(\n+                            self,\n+                            &mut bx,\n+                            fn_ty,\n+                            llfn,\n+                            &[msg_file_line_col],\n+                            destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n+                            cleanup,\n+                        );\n+                    } else {\n+                        // a NOP\n+                        funclet_br(self, &mut bx, destination.as_ref().unwrap().1);\n+                    }\n                     return;\n                 }\n "}, {"sha": "eb6ebbe0e96a18f2c46d9db2479e18c5862a3d68", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "patch": "@@ -133,6 +133,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                  ], tcx.types.usize)\n             }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n+            \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),"}, {"sha": "d47ff6c630d1194abebf6ef7ddd6f78bec9992ea", "filename": "src/test/run-pass/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff905bc698c0b6ee8b407273e7151d7b9a7a89a/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs?ref=fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "patch": "@@ -2,7 +2,7 @@\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n \n-#![feature(never_type)]\n+#![feature(never_type, maybe_uninit)]\n \n use std::{mem, panic};\n \n@@ -20,7 +20,7 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::uninitialized::<!>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type ! using mem::uninitialized\"\n+                s == \"Attempted to instantiate uninhabited type !\"\n             })),\n             Some(true)\n         );\n@@ -29,7 +29,16 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::zeroed::<!>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type ! using mem::zeroed\"\n+                s == \"Attempted to instantiate uninhabited type !\"\n+            })),\n+            Some(true)\n+        );\n+\n+        assert_eq!(\n+            panic::catch_unwind(|| {\n+                mem::MaybeUninit::<!>::uninitialized().into_inner()\n+            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n+                s == \"Attempted to instantiate uninhabited type !\"\n             })),\n             Some(true)\n         );\n@@ -38,7 +47,7 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::uninitialized::<Foo>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo using mem::uninitialized\"\n+                s == \"Attempted to instantiate uninhabited type Foo\"\n             })),\n             Some(true)\n         );\n@@ -47,7 +56,16 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::zeroed::<Foo>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo using mem::zeroed\"\n+                s == \"Attempted to instantiate uninhabited type Foo\"\n+            })),\n+            Some(true)\n+        );\n+\n+        assert_eq!(\n+            panic::catch_unwind(|| {\n+                mem::MaybeUninit::<Foo>::uninitialized().into_inner()\n+            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n+                s == \"Attempted to instantiate uninhabited type Foo\"\n             })),\n             Some(true)\n         );\n@@ -56,7 +74,7 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::uninitialized::<Bar>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar using mem::uninitialized\"\n+                s == \"Attempted to instantiate uninhabited type Bar\"\n             })),\n             Some(true)\n         );\n@@ -65,7 +83,16 @@ fn main() {\n             panic::catch_unwind(|| {\n                 mem::zeroed::<Bar>()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar using mem::zeroed\"\n+                s == \"Attempted to instantiate uninhabited type Bar\"\n+            })),\n+            Some(true)\n+        );\n+\n+        assert_eq!(\n+            panic::catch_unwind(|| {\n+                mem::MaybeUninit::<Bar>::uninitialized().into_inner()\n+            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n+                s == \"Attempted to instantiate uninhabited type Bar\"\n             })),\n             Some(true)\n         );"}]}