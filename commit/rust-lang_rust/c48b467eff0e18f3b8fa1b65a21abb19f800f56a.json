{"sha": "c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OGI0NjdlZmYwZTE4ZjNiOGZhMWI2NWEyMWFiYjE5ZjgwMGY1NmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-25T11:50:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T11:50:06Z"}, "message": "Merge #2069\n\n2069: auto-generate assists docs and tests r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "47d48171346d25e357df7b15c012447756cf9b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d48171346d25e357df7b15c012447756cf9b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsuFuCRBK7hj4Ov3rIwAAdHIIAEwj9KfZ214cGVad+PcXIeXj\n5OLbC0xmzVXnJ0hwsvhkbwfcj4QHfH+I6zyITups0KFlYXuOg9ltn0nu/jrvoj7m\nuBMawXw+XIAj4MScotBxaGhu3sNH30MVBjgCeK7f4vuiSiRVj7NP3BwnueVADc0f\nMYrZjRPMI2tYr7CiQ3Vb1ikNwxEMtFIQVkkyWlIJcMgNHQRzqTsNYQK3E04XXqJN\nOuNHygtSGw6tCm3ue6Sk6d2TjYqg1MQds0vyx8SBhutX6/kXmljMf9aOicTservv\nUEeDKU2Gn3bZYJrYn4i3XoTonLIYGxASWJVSGwlVjJ8zXOLcvLinkvxfFRRRHiY=\n=hGDp\n-----END PGP SIGNATURE-----\n", "payload": "tree 47d48171346d25e357df7b15c012447756cf9b0b\nparent 5f779f6c46f29c63483c0e2be732377b1b87e685\nparent 0dd35ff2b2ceffdb926953fdacc7d30e1968047d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572004206 +0000\ncommitter GitHub <noreply@github.com> 1572004206 +0000\n\nMerge #2069\n\n2069: auto-generate assists docs and tests r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "html_url": "https://github.com/rust-lang/rust/commit/c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f779f6c46f29c63483c0e2be732377b1b87e685", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f779f6c46f29c63483c0e2be732377b1b87e685", "html_url": "https://github.com/rust-lang/rust/commit/5f779f6c46f29c63483c0e2be732377b1b87e685"}, {"sha": "0dd35ff2b2ceffdb926953fdacc7d30e1968047d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd35ff2b2ceffdb926953fdacc7d30e1968047d", "html_url": "https://github.com/rust-lang/rust/commit/0dd35ff2b2ceffdb926953fdacc7d30e1968047d"}], "stats": {"total": 321, "additions": 269, "deletions": 52}, "files": [{"sha": "b3d0253406c79074cb33d889196d0f74d6181626", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -1,26 +1,3 @@\n-//! Assist: `convert_to_guarded_return`\n-//!\n-//! Replace a large conditional with a guarded return.\n-//!\n-//! ```text\n-//! fn <|>main() {\n-//!     if cond {\n-//!         foo();\n-//!         bar();\n-//!     }\n-//! }\n-//! ```\n-//! ->\n-//! ```text\n-//! fn main() {\n-//!     if !cond {\n-//!         return;\n-//!     }\n-//!     foo();\n-//!     bar();\n-//! }\n-//! ```\n-\n use std::ops::RangeInclusive;\n \n use hir::db::HirDatabase;\n@@ -36,6 +13,26 @@ use crate::{\n     AssistId,\n };\n \n+// Assist: convert_to_guarded_return\n+// Replace a large conditional with a guarded return.\n+// ```\n+// fn main() {\n+//     <|>if cond {\n+//         foo();\n+//         bar();\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     if !cond {\n+//         return;\n+//     }\n+//     foo();\n+//     bar();\n+// }\n+// ```\n pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.node_at_offset()?;\n     let expr = if_expr.condition()?.expr()?;"}, {"sha": "88e901517c27feb597f916b97b15f5a0e8b46ad0", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -0,0 +1,23 @@\n+//! Each assist definition has a special comment, which specifies docs and\n+//! example.\n+//!\n+//! We collect all the example and write the as tests in this module.\n+\n+mod generated;\n+\n+use hir::mock::MockDatabase;\n+use ra_db::FileRange;\n+use ra_syntax::TextRange;\n+use test_utils::{assert_eq_text, extract_offset};\n+\n+fn check(assist_id: &str, before: &str, after: &str) {\n+    let (before_cursor_pos, before) = extract_offset(before);\n+    let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+    let frange = FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+\n+    let (_assist_id, action) =\n+        crate::assists(&db, frange).into_iter().find(|(id, _)| id.id.0 == assist_id).unwrap();\n+\n+    let actual = action.edit.apply(&before);\n+    assert_eq_text!(after, &actual);\n+}"}, {"sha": "e5f6910f1152356e8b02f899da4c4c90eb4d89d4", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -0,0 +1,27 @@\n+//! Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n+\n+use super::check;\n+\n+#[test]\n+fn doctest_convert_to_guarded_return() {\n+    check(\n+        \"convert_to_guarded_return\",\n+        r#####\"\n+fn main() {\n+    <|>if cond {\n+        foo();\n+        bar();\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    if !cond {\n+        return;\n+    }\n+    foo();\n+    bar();\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "de576324fbeb592d09ff47bff6b9ff76276c3cd9", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -7,6 +7,8 @@\n \n mod assist_ctx;\n mod marks;\n+#[cfg(test)]\n+mod doc_tests;\n \n use hir::db::HirDatabase;\n use itertools::Itertools;\n@@ -36,7 +38,7 @@ pub struct AssistAction {\n     pub target: Option<TextRange>,\n }\n \n-/// Return all the assists eapplicable at the given position.\n+/// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits."}, {"sha": "cb4b0b9fb83f6d04008639386b81c3824f45157c", "filename": "docs/user/assists.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -0,0 +1,24 @@\n+# Assists\n+\n+## `convert_to_guarded_return`\n+\n+Replace a large conditional with a guarded return.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    <|>if cond {\n+        foo();\n+        bar();\n+    }\n+}\n+\n+// AFTER\n+fn main() {\n+    if !cond {\n+        return;\n+    }\n+    foo();\n+    bar();\n+}\n+```"}, {"sha": "a94b65ad4da51e26ae3dc1e24a22a662ad713742", "filename": "docs/user/features.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -97,11 +97,13 @@ Start `cargo watch` for live error highlighting. Will prompt to install if it's\n \n Stop `cargo watch`\n \n-### Code Actions (Assists)\n+### Assists (Code Actions)\n \n These are triggered in a particular context via light bulb. We use custom code on\n the VS Code side to be able to position cursor. `<|>` signifies cursor\n \n+See [assists.md](./assists.md)\n+\n - Add `#[derive]`\n \n ```rust"}, {"sha": "44729cd57aad6ccf225d3be8023e2e8b3c49b87c", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -7,12 +7,22 @@\n \n mod gen_syntax;\n mod gen_parser_tests;\n+mod gen_assists_docs;\n \n-use std::{fs, mem, path::Path};\n+use std::{\n+    fs,\n+    io::Write,\n+    mem,\n+    path::Path,\n+    process::{Command, Stdio},\n+};\n \n-use crate::Result;\n+use crate::{project_root, Result};\n \n-pub use self::{gen_parser_tests::generate_parser_tests, gen_syntax::generate_syntax};\n+pub use self::{\n+    gen_assists_docs::generate_assists_docs, gen_parser_tests::generate_parser_tests,\n+    gen_syntax::generate_syntax,\n+};\n \n pub const GRAMMAR: &str = \"crates/ra_syntax/src/grammar.ron\";\n const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n@@ -22,6 +32,10 @@ const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\n pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs\";\n pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs\";\n \n+const ASSISTS_DIR: &str = \"crates/ra_assists/src/assists\";\n+const ASSISTS_TESTS: &str = \"crates/ra_assists/src/doc_tests/generated.rs\";\n+const ASSISTS_DOCS: &str = \"docs/user/assists.md\";\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum Mode {\n     Overwrite,\n@@ -30,7 +44,7 @@ pub enum Mode {\n \n /// A helper to update file on disk if it has changed.\n /// With verify = false,\n-pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n+fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     match fs::read_to_string(path) {\n         Ok(ref old_contents) if old_contents == contents => {\n             return Ok(());\n@@ -45,6 +59,20 @@ pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     Ok(())\n }\n \n+fn reformat(text: impl std::fmt::Display) -> Result<String> {\n+    let mut rustfmt = Command::new(\"rustfmt\")\n+        .arg(\"--config-path\")\n+        .arg(project_root().join(\"rustfmt.toml\"))\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()?;\n+    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n+    let output = rustfmt.wait_with_output()?;\n+    let stdout = String::from_utf8(output.stdout)?;\n+    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n+    Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n+}\n+\n fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n     let mut res = Vec::new();\n "}, {"sha": "654ae09d6692da962366e9c0c6984a3f0bcecba4", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -0,0 +1,123 @@\n+use std::{fs, path::Path};\n+\n+use crate::{\n+    codegen::{self, extract_comment_blocks, Mode},\n+    project_root, Result,\n+};\n+\n+pub fn generate_assists_docs(mode: Mode) -> Result<()> {\n+    let assists = collect_assists()?;\n+    generate_tests(&assists, mode)?;\n+    generate_docs(&assists, mode)?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+struct Assist {\n+    id: String,\n+    doc: String,\n+    before: String,\n+    after: String,\n+}\n+\n+fn collect_assists() -> Result<Vec<Assist>> {\n+    let mut res = Vec::new();\n+    for entry in fs::read_dir(project_root().join(codegen::ASSISTS_DIR))? {\n+        let entry = entry?;\n+        let path = entry.path();\n+        if path.is_file() {\n+            collect_file(&mut res, path.as_path())?;\n+        }\n+    }\n+    res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+    return Ok(res);\n+\n+    fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n+        let text = fs::read_to_string(path)?;\n+        let comment_blocks = extract_comment_blocks(&text);\n+\n+        for block in comment_blocks {\n+            // FIXME: doesn't support blank lines yet, need to tweak\n+            // `extract_comment_blocks` for that.\n+            let mut lines = block.iter();\n+            let first_line = lines.next().unwrap();\n+            if !first_line.starts_with(\"Assist: \") {\n+                continue;\n+            }\n+            let id = first_line[\"Assist: \".len()..].to_string();\n+            assert!(id.chars().all(|it| it.is_ascii_lowercase() || it == '_'));\n+\n+            let doc = take_until(lines.by_ref(), \"```\");\n+            let before = take_until(lines.by_ref(), \"```\");\n+\n+            assert_eq!(lines.next().unwrap().as_str(), \"->\");\n+            assert_eq!(lines.next().unwrap().as_str(), \"```\");\n+            let after = take_until(lines.by_ref(), \"```\");\n+            acc.push(Assist { id, doc, before, after })\n+        }\n+\n+        fn take_until<'a>(lines: impl Iterator<Item = &'a String>, marker: &str) -> String {\n+            let mut buf = Vec::new();\n+            for line in lines {\n+                if line == marker {\n+                    break;\n+                }\n+                buf.push(line.clone());\n+            }\n+            buf.join(\"\\n\")\n+        }\n+        Ok(())\n+    }\n+}\n+\n+fn generate_tests(assists: &[Assist], mode: Mode) -> Result<()> {\n+    let mut buf = String::from(\"use super::check;\\n\");\n+\n+    for assist in assists.iter() {\n+        let test = format!(\n+            r######\"\n+#[test]\n+fn doctest_{}() {{\n+    check(\n+        \"{}\",\n+r#####\"\n+{}\n+\"#####, r#####\"\n+{}\n+\"#####)\n+}}\n+\"######,\n+            assist.id, assist.id, assist.before, assist.after\n+        );\n+\n+        buf.push_str(&test)\n+    }\n+    let buf = codegen::reformat(buf)?;\n+    codegen::update(&project_root().join(codegen::ASSISTS_TESTS), &buf, mode)\n+}\n+\n+fn generate_docs(assists: &[Assist], mode: Mode) -> Result<()> {\n+    let mut buf = String::from(\"# Assists\\n\");\n+\n+    for assist in assists {\n+        let docs = format!(\n+            \"\n+## `{}`\n+\n+{}\n+\n+```rust\n+// BEFORE\n+{}\n+\n+// AFTER\n+{}\n+```\n+\",\n+            assist.id, assist.doc, assist.before, assist.after\n+        );\n+        buf.push_str(&docs);\n+    }\n+\n+    codegen::update(&project_root().join(codegen::ASSISTS_DOCS), &buf, mode)\n+}"}, {"sha": "88f2ac0e35e2652ad27744256c0f8a4efe7b2d9e", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -3,12 +3,7 @@\n //! Specifically, it generates the `SyntaxKind` enum and a number of newtype\n //! wrappers around `SyntaxNode` which implement `ra_syntax::AstNode`.\n \n-use std::{\n-    collections::BTreeMap,\n-    fs,\n-    io::Write,\n-    process::{Command, Stdio},\n-};\n+use std::{collections::BTreeMap, fs};\n \n use proc_macro2::{Punct, Spacing};\n use quote::{format_ident, quote};\n@@ -163,7 +158,7 @@ fn generate_ast(grammar: &Grammar) -> Result<String> {\n         #(#nodes)*\n     };\n \n-    let pretty = reformat(ast)?;\n+    let pretty = codegen::reformat(ast)?;\n     Ok(pretty)\n }\n \n@@ -276,21 +271,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n         }\n     };\n \n-    reformat(ast)\n-}\n-\n-fn reformat(text: impl std::fmt::Display) -> Result<String> {\n-    let mut rustfmt = Command::new(\"rustfmt\")\n-        .arg(\"--config-path\")\n-        .arg(project_root().join(\"rustfmt.toml\"))\n-        .stdin(Stdio::piped())\n-        .stdout(Stdio::piped())\n-        .spawn()?;\n-    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n-    let output = rustfmt.wait_with_output()?;\n-    let stdout = String::from_utf8(output.stdout)?;\n-    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n-    Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n+    codegen::reformat(ast)\n }\n \n #[derive(Deserialize, Debug)]"}, {"sha": "06aa3c8ecaa05cdc7d8b8c270f5aa085eaa3554d", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -64,6 +64,7 @@ fn main() -> Result<()> {\n             }\n             codegen::generate_syntax(Mode::Overwrite)?;\n             codegen::generate_parser_tests(Mode::Overwrite)?;\n+            codegen::generate_assists_docs(Mode::Overwrite)?;\n         }\n         \"format\" => {\n             if matches.contains([\"-h\", \"--help\"]) {"}, {"sha": "573ffadbf8eec9e68da691d6bea7e76bb6105eac", "filename": "xtask/tests/tidy-tests/cli.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Ftests%2Ftidy-tests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Ftests%2Ftidy-tests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fcli.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -18,6 +18,13 @@ fn generated_tests_are_fresh() {\n     }\n }\n \n+#[test]\n+fn generated_assists_are_fresh() {\n+    if let Err(error) = codegen::generate_assists_docs(Mode::Verify) {\n+        panic!(\"{}. Please update assists by running `cargo xtask codegen`\", error);\n+    }\n+}\n+\n #[test]\n fn check_code_formatting() {\n     if let Err(error) = run_rustfmt(Mode::Verify) {"}, {"sha": "b766aeff16deff20905d38d6d23267b888fbcd85", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48b467eff0e18f3b8fa1b65a21abb19f800f56a/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=c48b467eff0e18f3b8fa1b65a21abb19f800f56a", "patch": "@@ -8,7 +8,9 @@ use walkdir::{DirEntry, WalkDir};\n use xtask::project_root;\n \n fn is_exclude_dir(p: &Path) -> bool {\n-    let exclude_dirs = [\"tests\", \"test_data\"];\n+    // Test hopefully don't really need comments, and for assists we already\n+    // have special comments which are source of doc tests and user docs.\n+    let exclude_dirs = [\"tests\", \"test_data\", \"assists\"];\n     let mut cur_path = p;\n     while let Some(path) = cur_path.parent() {\n         if exclude_dirs.iter().any(|dir| path.ends_with(dir)) {"}]}