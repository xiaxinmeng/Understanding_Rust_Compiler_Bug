{"sha": "1a9514d5ce6d1a9fc2474bde8907493671012911", "node_id": "C_kwDOAAsO6NoAKDFhOTUxNGQ1Y2U2ZDFhOWZjMjQ3NGJkZTg5MDc0OTM2NzEwMTI5MTE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-13T01:45:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-27T05:58:35Z"}, "message": "Simplify types in `proc_macro_harness.rs`.\n\nThis gives the more obvious derive/attr/bang distinction, and reduces\ncode size slightly.", "tree": {"sha": "845e7546a66f516cdf4fe45fdaf914554cfcb1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/845e7546a66f516cdf4fe45fdaf914554cfcb1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a9514d5ce6d1a9fc2474bde8907493671012911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9514d5ce6d1a9fc2474bde8907493671012911", "html_url": "https://github.com/rust-lang/rust/commit/1a9514d5ce6d1a9fc2474bde8907493671012911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a9514d5ce6d1a9fc2474bde8907493671012911/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ece157e179e8613e8cfc3654acb3d32b62ed841", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ece157e179e8613e8cfc3654acb3d32b62ed841", "html_url": "https://github.com/rust-lang/rust/commit/2ece157e179e8613e8cfc3654acb3d32b62ed841"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "71e98bb447a7c7b2618ea7b1871db83d92385c9f", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1a9514d5ce6d1a9fc2474bde8907493671012911/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9514d5ce6d1a9fc2474bde8907493671012911/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=1a9514d5ce6d1a9fc2474bde8907493671012911", "patch": "@@ -22,21 +22,16 @@ struct ProcMacroDerive {\n     attrs: Vec<Symbol>,\n }\n \n-enum ProcMacroDefType {\n-    Attr,\n-    Bang,\n-}\n-\n struct ProcMacroDef {\n     id: NodeId,\n     function_name: Ident,\n     span: Span,\n-    def_type: ProcMacroDefType,\n }\n \n enum ProcMacro {\n     Derive(ProcMacroDerive),\n-    Def(ProcMacroDef),\n+    Attr(ProcMacroDef),\n+    Bang(ProcMacroDef),\n }\n \n struct CollectProcMacros<'a> {\n@@ -128,11 +123,10 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.kind.is_pub() {\n-            self.macros.push(ProcMacro::Def(ProcMacroDef {\n+            self.macros.push(ProcMacro::Attr(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,\n                 function_name: item.ident,\n-                def_type: ProcMacroDefType::Attr,\n             }));\n         } else {\n             let msg = if !self.in_root {\n@@ -147,11 +141,10 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.kind.is_pub() {\n-            self.macros.push(ProcMacro::Def(ProcMacroDef {\n+            self.macros.push(ProcMacro::Bang(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,\n                 function_name: item.ident,\n-                def_type: ProcMacroDefType::Bang,\n             }));\n         } else {\n             let msg = if !self.in_root {\n@@ -308,6 +301,17 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         let proc_macro_ty_method_path = |cx: &ExtCtxt<'_>, method| {\n             cx.expr_path(cx.path(span, vec![proc_macro, bridge, client, proc_macro_ty, method]))\n         };\n+        let attr_or_bang = |cx: &mut ExtCtxt<'_>, ca: &ProcMacroDef, ident| {\n+            cx.resolver.declare_proc_macro(ca.id);\n+            cx.expr_call(\n+                span,\n+                proc_macro_ty_method_path(cx, ident),\n+                vec![\n+                    cx.expr_str(ca.span, ca.function_name.name),\n+                    local_path(cx, ca.span, ca.function_name),\n+                ],\n+            )\n+        };\n         macros\n             .iter()\n             .map(|m| match m {\n@@ -329,22 +333,8 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n                         ],\n                     )\n                 }\n-                ProcMacro::Def(ca) => {\n-                    cx.resolver.declare_proc_macro(ca.id);\n-                    let ident = match ca.def_type {\n-                        ProcMacroDefType::Attr => attr,\n-                        ProcMacroDefType::Bang => bang,\n-                    };\n-\n-                    cx.expr_call(\n-                        span,\n-                        proc_macro_ty_method_path(cx, ident),\n-                        vec![\n-                            cx.expr_str(ca.span, ca.function_name.name),\n-                            local_path(cx, ca.span, ca.function_name),\n-                        ],\n-                    )\n-                }\n+                ProcMacro::Attr(ca) => attr_or_bang(cx, &ca, attr),\n+                ProcMacro::Bang(ca) => attr_or_bang(cx, &ca, bang),\n             })\n             .collect()\n     };"}]}