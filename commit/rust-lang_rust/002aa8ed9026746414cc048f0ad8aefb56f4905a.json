{"sha": "002aa8ed9026746414cc048f0ad8aefb56f4905a", "node_id": "C_kwDOAAsO6NoAKDAwMmFhOGVkOTAyNjc0NjQxNGNjMDQ4ZjBhZDhhZWZiNTZmNDkwNWE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-03T14:46:41Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:23:31Z"}, "message": "Don't use an allocator shim for `#[global_allocator]`\n\nThis makes it possible to use liballoc/libstd in combination with\n`--emit obj` if you use `#[global_allocator]`. Making it work for the\ndefault libstd allocator would require weak functions, which are not\nwell supported on all systems.", "tree": {"sha": "1796463d289557a2ff9d61eac1823225a1c05f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1796463d289557a2ff9d61eac1823225a1c05f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002aa8ed9026746414cc048f0ad8aefb56f4905a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002aa8ed9026746414cc048f0ad8aefb56f4905a", "html_url": "https://github.com/rust-lang/rust/commit/002aa8ed9026746414cc048f0ad8aefb56f4905a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002aa8ed9026746414cc048f0ad8aefb56f4905a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3faa78d0cdba3d90f559ce4d7a4e56a341950b", "url": "https://api.github.com/repos/rust-lang/rust/commits/db3faa78d0cdba3d90f559ce4d7a4e56a341950b", "html_url": "https://github.com/rust-lang/rust/commit/db3faa78d0cdba3d90f559ce4d7a4e56a341950b"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "ef69d3f7800cb4028ef9a8eab4b874d983cae3dd", "filename": "src/allocator.rs", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/002aa8ed9026746414cc048f0ad8aefb56f4905a/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002aa8ed9026746414cc048f0ad8aefb56f4905a/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=002aa8ed9026746414cc048f0ad8aefb56f4905a", "patch": "@@ -3,10 +3,11 @@\n \n use crate::prelude::*;\n \n-use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{\n+    alloc_error_handler_name, AllocatorKind, AllocatorTy, ALLOCATOR_METHODS,\n+};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -34,41 +35,43 @@ fn codegen_inner(\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n-    for method in ALLOCATOR_METHODS {\n-        let mut arg_tys = Vec::with_capacity(method.inputs.len());\n-        for ty in method.inputs.iter() {\n-            match *ty {\n-                AllocatorTy::Layout => {\n-                    arg_tys.push(usize_ty); // size\n-                    arg_tys.push(usize_ty); // align\n-                }\n-                AllocatorTy::Ptr => arg_tys.push(usize_ty),\n-                AllocatorTy::Usize => arg_tys.push(usize_ty),\n+    if kind == AllocatorKind::Default {\n+        for method in ALLOCATOR_METHODS {\n+            let mut arg_tys = Vec::with_capacity(method.inputs.len());\n+            for ty in method.inputs.iter() {\n+                match *ty {\n+                    AllocatorTy::Layout => {\n+                        arg_tys.push(usize_ty); // size\n+                        arg_tys.push(usize_ty); // align\n+                    }\n+                    AllocatorTy::Ptr => arg_tys.push(usize_ty),\n+                    AllocatorTy::Usize => arg_tys.push(usize_ty),\n \n-                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                    AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                }\n             }\n-        }\n-        let output = match method.output {\n-            AllocatorTy::ResultPtr => Some(usize_ty),\n-            AllocatorTy::Unit => None,\n+            let output = match method.output {\n+                AllocatorTy::ResultPtr => Some(usize_ty),\n+                AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"invalid allocator output\")\n-            }\n-        };\n+                AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                    panic!(\"invalid allocator output\")\n+                }\n+            };\n \n-        let sig = Signature {\n-            call_conv: module.target_config().default_call_conv,\n-            params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n-            returns: output.into_iter().map(AbiParam::new).collect(),\n-        };\n-        crate::common::create_wrapper_function(\n-            module,\n-            unwind_context,\n-            sig,\n-            &format!(\"__rust_{}\", method.name),\n-            &kind.fn_name(method.name),\n-        );\n+            let sig = Signature {\n+                call_conv: module.target_config().default_call_conv,\n+                params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n+                returns: output.into_iter().map(AbiParam::new).collect(),\n+            };\n+            crate::common::create_wrapper_function(\n+                module,\n+                unwind_context,\n+                sig,\n+                &format!(\"__rust_{}\", method.name),\n+                &AllocatorKind::Default.fn_name(method.name),\n+            );\n+        }\n     }\n \n     let sig = Signature {\n@@ -81,7 +84,7 @@ fn codegen_inner(\n         unwind_context,\n         sig,\n         \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n+        &alloc_error_handler_name(alloc_error_handler_kind),\n     );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();"}]}