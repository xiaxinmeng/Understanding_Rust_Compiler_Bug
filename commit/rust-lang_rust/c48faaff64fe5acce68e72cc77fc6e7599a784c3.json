{"sha": "c48faaff64fe5acce68e72cc77fc6e7599a784c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OGZhYWZmNjRmZTVhY2NlNjhlNzJjYzc3ZmM2ZTc1OTlhNzg0YzM=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-20T06:46:55Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-20T07:18:54Z"}, "message": "Disallow dereference of `!`\n\nLater compiler passes are not prepared to deal with deref of\n`ty_bot` and will generate various ICEs, so disallow it outright for now.\n\nCloses issue #17373", "tree": {"sha": "5e4820828de0870b4b61ca85f36127164dd2b772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4820828de0870b4b61ca85f36127164dd2b772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48faaff64fe5acce68e72cc77fc6e7599a784c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48faaff64fe5acce68e72cc77fc6e7599a784c3", "html_url": "https://github.com/rust-lang/rust/commit/c48faaff64fe5acce68e72cc77fc6e7599a784c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48faaff64fe5acce68e72cc77fc6e7599a784c3/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f6d45a181859e10595ee1de43dfaee9f16963d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f6d45a181859e10595ee1de43dfaee9f16963d", "html_url": "https://github.com/rust-lang/rust/commit/31f6d45a181859e10595ee1de43dfaee9f16963d"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "5c19110a71e5c6f14a4f8c43fd8e9a94356aa9bf", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c48faaff64fe5acce68e72cc77fc6e7599a784c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48faaff64fe5acce68e72cc77fc6e7599a784c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c48faaff64fe5acce68e72cc77fc6e7599a784c3", "patch": "@@ -3869,13 +3869,18 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_expr_with_expectation_and_lvalue_pref(\n             fcx, &**oprnd, expected_inner, lvalue_pref);\n         let mut oprnd_t = fcx.expr_ty(&**oprnd);\n-        if !ty::type_is_error(oprnd_t) && !ty::type_is_bot(oprnd_t) {\n+\n+        if !ty::type_is_error(oprnd_t) {\n             match unop {\n                 ast::UnBox => {\n-                    oprnd_t = ty::mk_box(tcx, oprnd_t)\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = ty::mk_box(tcx, oprnd_t)\n+                    }\n                 }\n                 ast::UnUniq => {\n-                    oprnd_t = ty::mk_uniq(tcx, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = ty::mk_uniq(tcx, oprnd_t);\n+                    }\n                 }\n                 ast::UnDeref => {\n                     oprnd_t = structurally_resolved_type(fcx, expr.span, oprnd_t);\n@@ -3912,23 +3917,27 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     };\n                 }\n                 ast::UnNot => {\n-                    oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n-                                                         oprnd_t);\n-                    if !(ty::type_is_integral(oprnd_t) ||\n-                         ty::get(oprnd_t).sty == ty::ty_bool) {\n-                        oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n-                                                  tcx.lang_items.not_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n+                                                             oprnd_t);\n+                        if !(ty::type_is_integral(oprnd_t) ||\n+                             ty::get(oprnd_t).sty == ty::ty_bool) {\n+                            oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n+                                                      tcx.lang_items.not_trait(),\n+                                                      expr, &**oprnd, oprnd_t);\n+                        }\n                     }\n                 }\n                 ast::UnNeg => {\n-                    oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n-                                                         oprnd_t);\n-                    if !(ty::type_is_integral(oprnd_t) ||\n-                         ty::type_is_fp(oprnd_t)) {\n-                        oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n-                                                  tcx.lang_items.neg_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n+                                                             oprnd_t);\n+                        if !(ty::type_is_integral(oprnd_t) ||\n+                             ty::type_is_fp(oprnd_t)) {\n+                            oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n+                                                      tcx.lang_items.neg_trait(),\n+                                                      expr, &**oprnd, oprnd_t);\n+                        }\n                     }\n                 }\n             }"}]}