{"sha": "9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "node_id": "C_kwDOAAsO6NoAKDlhODJmNzRjZGYyZjhhOTA4ZGQyYTIwNDZhODgxNjE0ZmRmODQxYTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-19T09:42:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-19T09:42:16Z"}, "message": "Rollup merge of #92783 - FabianWolff:issue-92726, r=nikomatsakis\n\nAnnotate dead code lint with notes about ignored derived impls\n\nFixes #92726. CC `@pmetzger,` is this what you had in mind?\n\nr? `@nikomatsakis`", "tree": {"sha": "c8d38f8463966da6082a3fb83f47172a5aad1212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d38f8463966da6082a3fb83f47172a5aad1212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh59z4CRBK7hj4Ov3rIwAAgkkIAG3DW0NzIx0HjwKiHoh+M3Z9\nFgjXAHy5WPfPJyvKgIrJif3XoI7ammUeDd1GHQVSSPgb9ScbQS3Mfn7D9F6Akcpa\nAg1QcSyBQ6IvILPhGfYE2n1StV1NLwqAQMow4zTlhewf3AGsfE70qbMHcF2ybnxs\nXAhJaN1t9iynQBoQXPMjwcZ8LgixVNIlo360wgxooBbuzIYqanCCHeAhwBvWZ+w1\ncwLYFCZb2jj1cPw4b87Z3r+K4meile+/tLtKfsNu2p6JPw6f3Ek9nq9oKBRAppn/\n3kBR9deS3iQ6njabL3kz3NuVreDDXfcy34hCeCTFhPi+xQw4m0jScF5FSOZV1j4=\n=oM4H\n-----END PGP SIGNATURE-----\n", "payload": "tree c8d38f8463966da6082a3fb83f47172a5aad1212\nparent 3148a322d87a2ba39da28f05b7d26ecac015c607\nparent 8b459dd73887732d4b2741b2459a2edd60a47229\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642585336 +0100\ncommitter GitHub <noreply@github.com> 1642585336 +0100\n\nRollup merge of #92783 - FabianWolff:issue-92726, r=nikomatsakis\n\nAnnotate dead code lint with notes about ignored derived impls\n\nFixes #92726. CC `@pmetzger,` is this what you had in mind?\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "html_url": "https://github.com/rust-lang/rust/commit/9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3148a322d87a2ba39da28f05b7d26ecac015c607", "url": "https://api.github.com/repos/rust-lang/rust/commits/3148a322d87a2ba39da28f05b7d26ecac015c607", "html_url": "https://github.com/rust-lang/rust/commit/3148a322d87a2ba39da28f05b7d26ecac015c607"}, {"sha": "8b459dd73887732d4b2741b2459a2edd60a47229", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b459dd73887732d4b2741b2459a2edd60a47229", "html_url": "https://github.com/rust-lang/rust/commit/8b459dd73887732d4b2741b2459a2edd60a47229"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "7f15aacc532b31bf0f8300b55b2584b789016498", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "patch": "@@ -3,6 +3,7 @@\n // from live codes are live, and everything else is dead.\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::pluralize;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -15,6 +16,7 @@ use rustc_middle::middle::privacy;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use std::mem;\n \n // Any local node that may call something in its body block should be\n@@ -47,6 +49,10 @@ struct MarkSymbolVisitor<'tcx> {\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n+    // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n+    // and the span of their respective impl (i.e., part of the derive\n+    // macro)\n+    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -242,14 +248,24 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     /// Automatically generated items marked with `rustc_trivial_field_reads`\n     /// will be ignored for the purposes of dead code analysis (see PR #85200\n     /// for discussion).\n-    fn should_ignore_item(&self, def_id: DefId) -> bool {\n+    fn should_ignore_item(&mut self, def_id: DefId) -> bool {\n         if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n             if !self.tcx.has_attr(impl_of, sym::automatically_derived) {\n                 return false;\n             }\n \n             if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n                 if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n+                    let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n+                    if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n+                        let impl_span = self.tcx.def_span(impl_of);\n+                        if let Some(v) = self.ignored_derived_traits.get_mut(&adt_def.did) {\n+                            v.push((impl_span, trait_of));\n+                        } else {\n+                            self.ignored_derived_traits\n+                                .insert(adt_def.did, vec![(impl_span, trait_of)]);\n+                        }\n+                    }\n                     return true;\n                 }\n             }\n@@ -571,7 +587,7 @@ fn create_and_seed_worklist<'tcx>(\n fn find_live<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-) -> FxHashSet<LocalDefId> {\n+) -> (FxHashSet<LocalDefId>, FxHashMap<DefId, Vec<(Span, DefId)>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n@@ -584,14 +600,16 @@ fn find_live<'tcx>(\n         pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n+        ignored_derived_traits: FxHashMap::default(),\n     };\n     symbol_visitor.mark_live_symbols();\n-    symbol_visitor.live_symbols\n+    (symbol_visitor.live_symbols, symbol_visitor.ignored_derived_traits)\n }\n \n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_symbols: FxHashSet<LocalDefId>,\n+    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -660,7 +678,37 @@ impl<'tcx> DeadVisitor<'tcx> {\n             self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n                 let def_id = self.tcx.hir().local_def_id(id);\n                 let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n-                lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name)).emit()\n+                let mut err = lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name));\n+                let hir = self.tcx.hir();\n+                if let Some(encl_scope) = hir.get_enclosing_scope(id) {\n+                    if let Some(encl_def_id) = hir.opt_local_def_id(encl_scope) {\n+                        if let Some(ign_traits) =\n+                            self.ignored_derived_traits.get(&encl_def_id.to_def_id())\n+                        {\n+                            let traits_str = ign_traits\n+                                .iter()\n+                                .map(|(_, t)| format!(\"`{}`\", self.tcx.item_name(*t)))\n+                                .collect::<Vec<_>>()\n+                                .join(\" and \");\n+                            let plural_s = pluralize!(ign_traits.len());\n+                            let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n+                            let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n+                            let msg = format!(\n+                                \"`{}` has {}derived impl{} for the trait{} {}, but {} \\\n+                                 intentionally ignored during dead code analysis\",\n+                                self.tcx.item_name(encl_def_id.to_def_id()),\n+                                article,\n+                                plural_s,\n+                                plural_s,\n+                                traits_str,\n+                                is_are\n+                            );\n+                            let multispan = ign_traits.iter().map(|(s, _)| *s).collect::<Vec<_>>();\n+                            err.span_note(multispan, &msg);\n+                        }\n+                    }\n+                }\n+                err.emit();\n             });\n         }\n     }\n@@ -790,7 +838,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(());\n-    let live_symbols = find_live(tcx, access_levels);\n-    let mut visitor = DeadVisitor { tcx, live_symbols };\n+    let (live_symbols, ignored_derived_traits) = find_live(tcx, access_levels);\n+    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n     tcx.hir().walk_toplevel_module(&mut visitor);\n }"}, {"sha": "2a44e56a3302c87054e9f145b4cc9e9d49521df2", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "patch": "@@ -5,6 +5,12 @@ LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n+note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/derive-uninhabited-enum-38885.rs:10:10\n+   |\n+LL | #[derive(Debug)]\n+   |          ^^^^^\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "67bb574315a72331ccffe78954b15eab4418a34e", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "patch": "@@ -15,18 +15,39 @@ error: field is never read: `f`\n    |\n LL | struct B { f: () }\n    |            ^^^^^\n+   |\n+note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:9:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n    |            ^^^^^\n+   |\n+note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:13:10\n+   |\n+LL | #[derive(Debug)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n    |            ^^^^^\n+   |\n+note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:17:10\n+   |\n+LL | #[derive(Debug,Clone)]\n+   |          ^^^^^ ^^^^^\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:21:12"}, {"sha": "3b5683a7748fa86ff795d874ff069ac8cd88305a", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a82f74cdf2f8a908dd2a2046a881614fdf841a6/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=9a82f74cdf2f8a908dd2a2046a881614fdf841a6", "patch": "@@ -9,6 +9,12 @@ note: the lint level is defined here\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n+note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/unused-variant.rs:3:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}