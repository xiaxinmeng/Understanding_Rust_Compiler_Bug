{"sha": "f64aacc0c1d3743f08a3be41562e4aab46f47871", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NGFhY2MwYzFkMzc0M2YwOGEzYmU0MTU2MmU0YWFiNDZmNDc4NzE=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T16:58:42Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T16:58:42Z"}, "message": "Use minicore", "tree": {"sha": "e85e698cdce99bbf38a6b05e1d3374d24e4c96ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85e698cdce99bbf38a6b05e1d3374d24e4c96ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f64aacc0c1d3743f08a3be41562e4aab46f47871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f64aacc0c1d3743f08a3be41562e4aab46f47871", "html_url": "https://github.com/rust-lang/rust/commit/f64aacc0c1d3743f08a3be41562e4aab46f47871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f64aacc0c1d3743f08a3be41562e4aab46f47871/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3c3a029c9e83c9690704723bd256e9efcfc8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3c3a029c9e83c9690704723bd256e9efcfc8f6", "html_url": "https://github.com/rust-lang/rust/commit/5a3c3a029c9e83c9690704723bd256e9efcfc8f6"}], "stats": {"total": 111, "additions": 27, "deletions": 84}, "files": [{"sha": "a9e2b52639448137c4689d65a091c3fe65a19a88", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f64aacc0c1d3743f08a3be41562e4aab46f47871", "patch": "@@ -2732,8 +2732,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 251..433,\n-                                    focus_range: 290..296,\n+                                    full_range: 252..434,\n+                                    focus_range: 291..297,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "009014396ca43f57132622584a9dab70f0ba80d5", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 13, "deletions": 82, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=f64aacc0c1d3743f08a3be41562e4aab46f47871", "patch": "@@ -304,36 +304,19 @@ mod tests {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n+//- minicore: fmt\n #[derive(Debu$0g)]\n struct Foo {\n     bar: String,\n }\n \"#,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n struct Foo {\n     bar: String,\n }\n \n-impl fmt::Debug for Foo {\n-    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n         f.debug_struct(\"Foo\").field(\"bar\", &self.bar).finish()\n     }\n }\n@@ -345,32 +328,14 @@ impl fmt::Debug for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n+//- minicore: fmt\n #[derive(Debu$0g)]\n struct Foo(String, usize);\n \"#,\n-            r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n-struct Foo(String, usize);\n+            r#\"struct Foo(String, usize);\n \n-impl fmt::Debug for Foo {\n-    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n         f.debug_tuple(\"Foo\").field(&self.0).field(&self.1).finish()\n     }\n }\n@@ -382,32 +347,15 @@ impl fmt::Debug for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n+//- minicore: fmt\n #[derive(Debu$0g)]\n struct Foo;\n \"#,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n struct Foo;\n \n-impl fmt::Debug for Foo {\n-    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n         f.debug_struct(\"Foo\").finish()\n     }\n }\n@@ -419,38 +367,21 @@ impl fmt::Debug for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n+//- minicore: fmt\n #[derive(Debu$0g)]\n enum Foo {\n     Bar,\n     Baz,\n }\n \"#,\n             r#\"\n-mod fmt {\n-    pub struct Error;\n-    pub type Result = Result<(), Error>;\n-    pub struct Formatter<'a>;\n-    pub trait Debug {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-    }\n-}\n-\n enum Foo {\n     Bar,\n     Baz,\n }\n \n-impl fmt::Debug for Foo {\n-    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n         match self {\n             Self::Bar => write!(f, \"Bar\"),\n             Self::Baz => write!(f, \"Baz\"),"}, {"sha": "eeadf2bee2efbdd7c02e2afeeb59838faf12dfdc", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64aacc0c1d3743f08a3be41562e4aab46f47871/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=f64aacc0c1d3743f08a3be41562e4aab46f47871", "patch": "@@ -31,6 +31,7 @@\n //!     eq: sized\n //!     ord: eq, option\n //!     derive:\n+//!     fmt:\n \n pub mod marker {\n     // region:sized\n@@ -334,6 +335,17 @@ pub mod cmp {\n }\n // endregion:eq\n \n+// region:fmt\n+pub mod fmt {\n+    pub struct Error;\n+    pub type Result = Result<(), Error>;\n+    pub struct Formatter<'a>;\n+    pub trait Debug {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+    }\n+}\n+// endregion:fmt\n+\n // region:slice\n pub mod slice {\n     #[lang = \"slice\"]"}]}