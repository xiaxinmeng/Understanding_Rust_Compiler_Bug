{"sha": "2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTczNTFjMWUwY2E0ODJhZTEzY2E5NjliZTU5NzVmMTYwM2EyYjE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-29T12:40:00Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-29T12:40:00Z"}, "message": "suggest wrapping_offset as well", "tree": {"sha": "2ab869f730ce2d35ff32f01fc9107e1973e5eda4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab869f730ce2d35ff32f01fc9107e1973e5eda4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "html_url": "https://github.com/rust-lang/rust/commit/2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c20c148e926310f011895693f88cafb5a26539", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c20c148e926310f011895693f88cafb5a26539", "html_url": "https://github.com/rust-lang/rust/commit/61c20c148e926310f011895693f88cafb5a26539"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "20934573f09aa07e1d942d5e11a7fa68b4dbf042", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "patch": "@@ -1,5 +1,6 @@\n use rustc::{declare_lint, hir, lint, lint_array};\n use crate::utils;\n+use std::fmt;\n \n /// **What it does:** Checks for usage of the `offset` pointer method with a `usize` casted to an\n /// `isize`.\n@@ -44,23 +45,23 @@ impl lint::LintPass for Pass {\n \n impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &lint::LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        // Check if the expressions is a ptr.offset method call\n-        let [receiver_expr, arg_expr] = match expr_as_ptr_offset_call(cx, expr) {\n+        // Check if the expressions is a ptr.offset or ptr.wrapping_offset method call\n+        let (receiver_expr, arg_expr, method) = match expr_as_ptr_offset_call(cx, expr) {\n             Some(call_arg) => call_arg,\n             None => return,\n         };\n \n-        // Check if the argument to ptr.offset is a cast from usize\n+        // Check if the argument to the method call is a cast from usize\n         let cast_lhs_expr = match expr_as_cast_from_usize(cx, arg_expr) {\n             Some(cast_lhs_expr) => cast_lhs_expr,\n             None => return,\n         };\n \n-        let msg = \"use of `offset` with a `usize` casted to an `isize`\";\n-        if let Some(sugg) = build_suggestion(cx, receiver_expr, cast_lhs_expr) {\n-            utils::span_lint_and_sugg(cx, PTR_OFFSET_WITH_CAST, expr.span, msg, \"try\", sugg);\n+        let msg = format!(\"use of `{}` with a `usize` casted to an `isize`\", method);\n+        if let Some(sugg) = build_suggestion(cx, method, receiver_expr, cast_lhs_expr) {\n+            utils::span_lint_and_sugg(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg, \"try\", sugg);\n         } else {\n-            utils::span_lint(cx, PTR_OFFSET_WITH_CAST, expr.span, msg);\n+            utils::span_lint(cx, PTR_OFFSET_WITH_CAST, expr.span, &msg);\n         }\n \n     }\n@@ -79,15 +80,20 @@ fn expr_as_cast_from_usize<'a, 'tcx>(\n     None\n }\n \n-// If the given expression is a ptr::offset method call, return the receiver and the arg of the\n-// method call.\n+// If the given expression is a ptr::offset  or ptr::wrapping_offset method call, return the\n+// receiver, the arg of the method call, and the method.\n fn expr_as_ptr_offset_call<'a, 'tcx>(\n     cx: &lint::LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr,\n-) -> Option<[&'tcx hir::Expr; 2]> {\n+) -> Option<(&'tcx hir::Expr, &'tcx hir::Expr, Method)> {\n     if let hir::ExprKind::MethodCall(ref path_segment, _, ref args) = expr.node {\n-        if path_segment.ident.name == \"offset\" && is_expr_ty_raw_ptr(cx, &args[0]) {\n-            return Some([&args[0], &args[1]]);\n+        if is_expr_ty_raw_ptr(cx, &args[0]) {\n+            if path_segment.ident.name == \"offset\" {\n+                return Some((&args[0], &args[1], Method::Offset));\n+            }\n+            if path_segment.ident.name == \"wrapping_offset\" {\n+                return Some((&args[0], &args[1], Method::WrappingOffset));\n+            }\n         }\n     }\n     None\n@@ -111,14 +117,40 @@ fn is_expr_ty_raw_ptr<'a, 'tcx>(\n \n fn build_suggestion<'a, 'tcx>(\n     cx: &lint::LateContext<'a, 'tcx>,\n+    method: Method,\n     receiver_expr: &hir::Expr,\n     cast_lhs_expr: &hir::Expr,\n ) -> Option<String> {\n     match (\n         utils::snippet_opt(cx, receiver_expr.span),\n         utils::snippet_opt(cx, cast_lhs_expr.span)\n     ) {\n-        (Some(receiver), Some(cast_lhs)) => Some(format!(\"{}.add({})\", receiver, cast_lhs)),\n+        (Some(receiver), Some(cast_lhs)) => {\n+            Some(format!(\"{}.{}({})\", receiver, method.suggestion(), cast_lhs))\n+        },\n         _ => None,\n     }\n }\n+\n+enum Method {\n+    Offset,\n+    WrappingOffset,\n+}\n+\n+impl Method {\n+    fn suggestion(&self) -> &'static str {\n+        match *self {\n+            Method::Offset => \"add\",\n+            Method::WrappingOffset => \"wrapping_add\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Method {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            Method::Offset => write!(f, \"offset\"),\n+            Method::WrappingOffset => write!(f, \"wrapping_offset\"),\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4549f960ca0d4bba2eed2f880e40b3bd274aed18", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "patch": "@@ -10,5 +10,9 @@ fn main() {\n         ptr.offset(offset_usize as isize);\n         ptr.offset(offset_isize as isize);\n         ptr.offset(offset_u8 as isize);\n+\n+        ptr.wrapping_offset(offset_usize as isize);\n+        ptr.wrapping_offset(offset_isize as isize);\n+        ptr.wrapping_offset(offset_u8 as isize);\n     }\n }"}, {"sha": "16bbf328b3375e4d9ff00e8a9e1603a2a191f7be", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fa7351c1e0ca482ae13ca969be5975f1603a2b1/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=2fa7351c1e0ca482ae13ca969be5975f1603a2b1", "patch": "@@ -6,5 +6,11 @@ error: use of `offset` with a `usize` casted to an `isize`\n    |\n    = note: `-D ptr-offset-with-cast` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: use of `wrapping_offset` with a `usize` casted to an `isize`\n+  --> $DIR/ptr_offset_with_cast.rs:14:9\n+   |\n+14 |         ptr.wrapping_offset(offset_usize as isize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`\n+\n+error: aborting due to 2 previous errors\n "}]}