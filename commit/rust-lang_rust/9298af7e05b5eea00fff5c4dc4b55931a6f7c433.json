{"sha": "9298af7e05b5eea00fff5c4dc4b55931a6f7c433", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOThhZjdlMDViNWVlYTAwZmZmNWM0ZGM0YjU1OTMxYTZmN2M0MzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-06T10:50:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-06T10:50:57Z"}, "message": "auto merge of #9002 : brson/rust/issue-8769, r=catamorphism\n\nThis is an unsafe implementation detail of `push`.", "tree": {"sha": "c2e5ea40bda4069039b36a95f85f5eb2cfe8e7ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2e5ea40bda4069039b36a95f85f5eb2cfe8e7ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9298af7e05b5eea00fff5c4dc4b55931a6f7c433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9298af7e05b5eea00fff5c4dc4b55931a6f7c433", "html_url": "https://github.com/rust-lang/rust/commit/9298af7e05b5eea00fff5c4dc4b55931a6f7c433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9298af7e05b5eea00fff5c4dc4b55931a6f7c433/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ed29a0edb3d48fef843a0b818ee68faf2252da", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ed29a0edb3d48fef843a0b818ee68faf2252da", "html_url": "https://github.com/rust-lang/rust/commit/25ed29a0edb3d48fef843a0b818ee68faf2252da"}, {"sha": "fec6716eec69cf0db650d5b86e51a32a530ae57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec6716eec69cf0db650d5b86e51a32a530ae57b", "html_url": "https://github.com/rust-lang/rust/commit/fec6716eec69cf0db650d5b86e51a32a530ae57b"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "4cc5c4f14ffdfba3f8e0747784802797edf5f50e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9298af7e05b5eea00fff5c4dc4b55931a6f7c433/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9298af7e05b5eea00fff5c4dc4b55931a6f7c433/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9298af7e05b5eea00fff5c4dc4b55931a6f7c433", "patch": "@@ -1201,8 +1201,6 @@ pub trait OwnedVector<T> {\n     fn shrink_to_fit(&mut self);\n \n     fn push(&mut self, t: T);\n-    unsafe fn push_fast(&mut self, t: T);\n-\n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n     fn pop_opt(&mut self) -> Option<T>;\n@@ -1334,7 +1332,7 @@ impl<T> OwnedVector<T> for ~[T] {\n                     self.reserve_at_least(new_len);\n                 }\n \n-                self.push_fast(t);\n+                push_fast(self, t);\n             } else {\n                 let repr: **Vec<()> = cast::transmute(&mut *self);\n                 let fill = (**repr).fill;\n@@ -1343,29 +1341,30 @@ impl<T> OwnedVector<T> for ~[T] {\n                     self.reserve_at_least(new_len);\n                 }\n \n-                self.push_fast(t);\n+                push_fast(self, t);\n             }\n         }\n-    }\n \n-    // This doesn't bother to make sure we have space.\n-    #[inline] // really pretty please\n-    unsafe fn push_fast(&mut self, t: T) {\n-        if contains_managed::<T>() {\n-            let repr: **mut Box<Vec<u8>> = cast::transmute(self);\n-            let fill = (**repr).data.fill;\n-            (**repr).data.fill += sys::nonzero_size_of::<T>();\n-            let p = to_unsafe_ptr(&((**repr).data.data));\n-            let p = ptr::offset(p, fill as int) as *mut T;\n-            intrinsics::move_val_init(&mut(*p), t);\n-        } else {\n-            let repr: **mut Vec<u8> = cast::transmute(self);\n-            let fill = (**repr).fill;\n-            (**repr).fill += sys::nonzero_size_of::<T>();\n-            let p = to_unsafe_ptr(&((**repr).data));\n-            let p = ptr::offset(p, fill as int) as *mut T;\n-            intrinsics::move_val_init(&mut(*p), t);\n+        // This doesn't bother to make sure we have space.\n+        #[inline] // really pretty please\n+        unsafe fn push_fast<T>(this: &mut ~[T], t: T) {\n+            if contains_managed::<T>() {\n+                let repr: **mut Box<Vec<u8>> = cast::transmute(this);\n+                let fill = (**repr).data.fill;\n+                (**repr).data.fill += sys::nonzero_size_of::<T>();\n+                let p = to_unsafe_ptr(&((**repr).data.data));\n+                let p = ptr::offset(p, fill as int) as *mut T;\n+                intrinsics::move_val_init(&mut(*p), t);\n+            } else {\n+                let repr: **mut Vec<u8> = cast::transmute(this);\n+                let fill = (**repr).fill;\n+                (**repr).fill += sys::nonzero_size_of::<T>();\n+                let p = to_unsafe_ptr(&((**repr).data));\n+                let p = ptr::offset(p, fill as int) as *mut T;\n+                intrinsics::move_val_init(&mut(*p), t);\n+            }\n         }\n+\n     }\n \n     /// Takes ownership of the vector `rhs`, moving all elements into"}]}