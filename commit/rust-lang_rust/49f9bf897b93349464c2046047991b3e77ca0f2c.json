{"sha": "49f9bf897b93349464c2046047991b3e77ca0f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjliZjg5N2I5MzM0OTQ2NGMyMDQ2MDQ3OTkxYjNlNzdjYTBmMmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-28T01:33:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "review comments", "tree": {"sha": "12ff76d15fe65195c40ac7ba8210a4f7a7dae0f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ff76d15fe65195c40ac7ba8210a4f7a7dae0f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f9bf897b93349464c2046047991b3e77ca0f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f9bf897b93349464c2046047991b3e77ca0f2c", "html_url": "https://github.com/rust-lang/rust/commit/49f9bf897b93349464c2046047991b3e77ca0f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f9bf897b93349464c2046047991b3e77ca0f2c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d927874a06d552c56c298fecb90d2af7444ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d927874a06d552c56c298fecb90d2af7444ae3", "html_url": "https://github.com/rust-lang/rust/commit/30d927874a06d552c56c298fecb90d2af7444ae3"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "be7a9de4317c594d77eaab1d41beb0bacd5f8d55", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49f9bf897b93349464c2046047991b3e77ca0f2c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f9bf897b93349464c2046047991b3e77ca0f2c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=49f9bf897b93349464c2046047991b3e77ca0f2c", "patch": "@@ -19,7 +19,7 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::lifetimes::{ElisionFailureInfo, ForLifetimeSpanType, MissingLifetimeSpot};\n+use crate::lifetimes::{ElisionFailureInfo, MissingLifetimeSpot};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -1502,30 +1502,17 @@ crate fn add_missing_lifetime_specifiers_label(\n                             [param, ..] => (param.span.shrink_to_lo(), \"'a, \".to_string()),\n                         }\n                     }\n-                    MissingLifetimeSpot::HRLT { span, span_type } => {\n+                    MissingLifetimeSpot::HigherRanked { span, span_type } => {\n                         msg = format!(\n                             \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n-                            match span_type {\n-                                ForLifetimeSpanType::BoundEmpty\n-                                | ForLifetimeSpanType::BoundTail => \"bound\",\n-                                ForLifetimeSpanType::TypeEmpty | ForLifetimeSpanType::TypeTail =>\n-                                    \"type\",\n-                            }\n+                            span_type.descr(),\n                         );\n                         should_break = false;\n                         err.note(\n                             \"for more information on higher-ranked polymorphism, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n-                        let suggestion = match span_type {\n-                            ForLifetimeSpanType::BoundEmpty | ForLifetimeSpanType::TypeEmpty => {\n-                                \"for<'a> \"\n-                            }\n-                            ForLifetimeSpanType::BoundTail | ForLifetimeSpanType::TypeTail => {\n-                                \", 'a\"\n-                            }\n-                        };\n-                        (*span, suggestion.to_string())\n+                        (*span, span_type.suggestion(\"'a\"))\n                     }\n                 });\n                 for param in params {"}, {"sha": "811b36022a5b9b83ad5bf6b844e638d769a4b695", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/49f9bf897b93349464c2046047991b3e77ca0f2c/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f9bf897b93349464c2046047991b3e77ca0f2c/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=49f9bf897b93349464c2046047991b3e77ca0f2c", "patch": "@@ -155,7 +155,7 @@ struct NamedRegionMap {\n \n crate enum MissingLifetimeSpot<'tcx> {\n     Generics(&'tcx hir::Generics<'tcx>),\n-    HRLT { span: Span, span_type: ForLifetimeSpanType },\n+    HigherRanked { span: Span, span_type: ForLifetimeSpanType },\n }\n \n crate enum ForLifetimeSpanType {\n@@ -165,6 +165,22 @@ crate enum ForLifetimeSpanType {\n     TypeTail,\n }\n \n+impl ForLifetimeSpanType {\n+    crate fn descr(&self) -> &'static str {\n+        match self {\n+            Self::BoundEmpty | Self::BoundTail => \"bound\",\n+            Self::TypeEmpty | Self::TypeTail => \"type\",\n+        }\n+    }\n+\n+    crate fn suggestion(&self, sugg: &str) -> String {\n+        match self {\n+            Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n+            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n+        }\n+    }\n+}\n+\n impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n     fn into(self) -> MissingLifetimeSpot<'tcx> {\n         MissingLifetimeSpot::Generics(self)\n@@ -525,7 +541,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     (ty.span.shrink_to_lo(), ForLifetimeSpanType::TypeEmpty)\n                 };\n                 self.missing_named_lifetime_spots\n-                    .push(MissingLifetimeSpot::HRLT { span, span_type });\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n                 let scope = Scope::Binder {\n                     lifetimes: c\n                         .generic_params\n@@ -1887,29 +1903,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                    MissingLifetimeSpot::HRLT { span, span_type } => {\n+                    MissingLifetimeSpot::HigherRanked { span, span_type } => {\n                         err.span_suggestion(\n                             *span,\n                             &format!(\n                                 \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n-                                match span_type {\n-                                    ForLifetimeSpanType::BoundEmpty\n-                                    | ForLifetimeSpanType::BoundTail => \"bound\",\n-                                    ForLifetimeSpanType::TypeEmpty\n-                                    | ForLifetimeSpanType::TypeTail => \"type\",\n-                                },\n+                                span_type.descr(),\n                                 lifetime_ref\n                             ),\n-                            match span_type {\n-                                ForLifetimeSpanType::TypeEmpty\n-                                | ForLifetimeSpanType::BoundEmpty => {\n-                                    format!(\"for<{}> \", lifetime_ref)\n-                                }\n-                                ForLifetimeSpanType::TypeTail | ForLifetimeSpanType::BoundTail => {\n-                                    format!(\", {}\", lifetime_ref)\n-                                }\n-                            }\n-                            .to_string(),\n+                            span_type.suggestion(&lifetime_ref.to_string()),\n                             Applicability::MaybeIncorrect,\n                         );\n                         err.note(\n@@ -2840,7 +2842,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     [.., bound] => (bound.span.shrink_to_hi(), ForLifetimeSpanType::BoundTail),\n                 };\n                 self.missing_named_lifetime_spots\n-                    .push(MissingLifetimeSpot::HRLT { span, span_type });\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n                 return true;\n             }\n         };"}]}