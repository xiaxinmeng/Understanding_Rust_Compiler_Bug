{"sha": "fe30f6251a011d06096e3847021aa4090708c60b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMzBmNjI1MWEwMTFkMDYwOTZlMzg0NzAyMWFhNDA5MDcwOGM2MGI=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-10T22:40:04Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-10T22:40:30Z"}, "message": "Remove `pub use` of TypeError in ty.rs", "tree": {"sha": "7a02ab76d92af61f8e6ae83d598f814533cb89ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a02ab76d92af61f8e6ae83d598f814533cb89ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe30f6251a011d06096e3847021aa4090708c60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe30f6251a011d06096e3847021aa4090708c60b", "html_url": "https://github.com/rust-lang/rust/commit/fe30f6251a011d06096e3847021aa4090708c60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe30f6251a011d06096e3847021aa4090708c60b/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754aaea88c5f2899e628a54fed4643384219da29", "url": "https://api.github.com/repos/rust-lang/rust/commits/754aaea88c5f2899e628a54fed4643384219da29", "html_url": "https://github.com/rust-lang/rust/commit/754aaea88c5f2899e628a54fed4643384219da29"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "94c76e2399947114245bc87e9ceeff25faa7d797", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -43,7 +43,7 @@ use super::type_variable::{RelationDir, BiTo, EqTo, SubtypeOf, SupertypeOf};\n \n use middle::ty::{TyVar};\n use middle::ty::{IntType, UintType};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TypeError};\n use middle::ty_fold;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use middle::ty_relate::{self, Relate, RelateResult, TypeRelation};\n@@ -108,7 +108,7 @@ pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,\n         // All other cases of inference are errors\n         (&ty::TyInfer(_), _) |\n         (_, &ty::TyInfer(_)) => {\n-            Err(ty::Sorts(ty_relate::expected_found(relation, &a, &b)))\n+            Err(TypeError::Sorts(ty_relate::expected_found(relation, &a, &b)))\n         }\n \n \n@@ -278,7 +278,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n         };\n         let u = ty.fold_with(&mut generalize);\n         if generalize.cycle_detected {\n-            Err(ty::CyclicTy)\n+            Err(TypeError::CyclicTy)\n         } else {\n             Ok(u)\n         }\n@@ -384,13 +384,13 @@ fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::Int\n                                -> ty::TypeError<'tcx>\n {\n     let (a, b) = v;\n-    ty::IntMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::IntMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n }\n \n fn float_unification_error<'tcx>(a_is_expected: bool,\n                                  v: (ast::FloatTy, ast::FloatTy))\n                                  -> ty::TypeError<'tcx>\n {\n     let (a, b) = v;\n-    ty::FloatMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::FloatMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n }"}, {"sha": "e5d9cda6a5229f600f33ffca9abb4e110aebb2f2", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -77,7 +77,7 @@ use middle::def;\n use middle::infer;\n use middle::region;\n use middle::subst;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeError, HasTypeFlags};\n use middle::ty::{Region, ReFree};\n \n use std::cell::{Cell, RefCell};\n@@ -351,8 +351,8 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     match free_regions_from_same_fn(self.tcx, sub, sup) {\n                         Some(ref same_frs) if trace.is_some() => {\n                             let trace = trace.unwrap();\n-                            let terr = ty::RegionsDoesNotOutlive(sup,\n-                                                                         sub);\n+                            let terr = TypeError::RegionsDoesNotOutlive(sup,\n+                                                                        sub);\n                             trace_origins.push((trace, terr));\n                             append_to_same_regions(&mut same_regions, same_frs);\n                         }\n@@ -595,7 +595,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         match origin {\n             infer::Subtype(trace) |\n             infer::DefaultExistentialBound(trace) => {\n-                let terr = ty::RegionsDoesNotOutlive(sup, sub);\n+                let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 self.report_and_explain_type_error(trace, &terr);\n             }\n             infer::Reborrow(span) => {"}, {"sha": "1919d8ffd294df7736f01b8cfc19715cceacb7d8", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -15,7 +15,7 @@ use super::{CombinedSnapshot, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::CombineFields;\n \n use middle::subst;\n-use middle::ty::{self, Binder};\n+use middle::ty::{self, TypeError, Binder};\n use middle::ty_fold::{self, TypeFoldable};\n use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n use syntax::codemap::Span;\n@@ -85,11 +85,11 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n                 Err((skol_br, tainted_region)) => {\n                     if self.a_is_expected {\n                         debug!(\"Not as polymorphic!\");\n-                        return Err(ty::RegionsInsufficientlyPolymorphic(skol_br,\n+                        return Err(TypeError::RegionsInsufficientlyPolymorphic(skol_br,\n                                                                                tainted_region));\n                     } else {\n                         debug!(\"Overly polymorphic!\");\n-                        return Err(ty::RegionsOverlyPolymorphic(skol_br,\n+                        return Err(TypeError::RegionsOverlyPolymorphic(skol_br,\n                                                                        tainted_region));\n                     }\n                 }"}, {"sha": "08489ee7c31e8aa9e0242551d4e2df52922bc7cf", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -32,7 +32,7 @@ use middle::subst::Subst;\n use middle::traits::{self, FulfillmentContext, Normalized,\n                      SelectionContext, ObligationCause};\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, UnconstrainedNumeric};\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeError, HasTypeFlags};\n use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n use rustc_data_structures::unify::{self, UnificationTable};\n@@ -913,7 +913,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         match higher_ranked::leak_check(self, skol_map, snapshot) {\n             Ok(()) => Ok(()),\n-            Err((br, r)) => Err(ty::RegionsInsufficientlyPolymorphic(br, r))\n+            Err((br, r)) => Err(TypeError::RegionsInsufficientlyPolymorphic(br, r))\n         }\n     }\n "}, {"sha": "7cfb733acda9d9f1068d5b812ab3278bad89eb77", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -23,7 +23,7 @@ use super::{RegionVariableOrigin, SubregionOrigin, TypeTrace, MiscVariable};\n use rustc_data_structures::graph::{self, Direction, NodeIndex};\n use middle::free_region::FreeRegionMap;\n use middle::region;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TypeError};\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReInfer, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n@@ -873,7 +873,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 if self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) == fr_scope {\n                     Ok(s)\n                 } else {\n-                    Err(ty::RegionsNoOverlap(b, a))\n+                    Err(TypeError::RegionsNoOverlap(b, a))\n                 }\n             }\n \n@@ -892,7 +892,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 if a == b {\n                     Ok(a)\n                 } else {\n-                    Err(ty::RegionsNoOverlap(b, a))\n+                    Err(TypeError::RegionsNoOverlap(b, a))\n                 }\n             }\n         }\n@@ -949,7 +949,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         } else if r_id == scope_b {\n             Ok(ReScope(scope_a))\n         } else {\n-            Err(ty::RegionsNoOverlap(region_a, region_b))\n+            Err(TypeError::RegionsNoOverlap(region_a, region_b))\n         }\n     }\n }"}, {"sha": "498ec610728a151f1a20bc1a65c7526cad2118bd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -11,7 +11,6 @@\n // FIXME: (@jroesch) @eddyb should remove this when he renames ctxt\n #![allow(non_camel_case_types)]\n \n-pub use self::TypeError::*;\n pub use self::InferTy::*;\n pub use self::InferRegion::*;\n pub use self::ImplOrTraitItemId::*;\n@@ -4932,6 +4931,7 @@ impl<'tcx> TyS<'tcx> {\n     }\n \n     fn sort_string(&self, cx: &ctxt) -> String {\n+\n         match self.sty {\n             TyBool | TyChar | TyInt(_) |\n             TyUint(_) | TyFloat(_) | TyStr => self.to_string(),\n@@ -4977,6 +4977,8 @@ impl<'tcx> TyS<'tcx> {\n /// errors.\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        use self::TypeError::*;\n+\n         match *self {\n             CyclicTy => write!(f, \"cyclic type of infinite size\"),\n             Mismatch => write!(f, \"types differ\"),\n@@ -5413,6 +5415,8 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     pub fn note_and_explain_type_err(&self, err: &TypeError<'tcx>, sp: Span) {\n+        use self::TypeError::*;\n+        \n         match *err {\n             RegionsDoesNotOutlive(subregion, superregion) => {\n                 self.note_and_explain_region(\"\", subregion, \"...\");"}, {"sha": "56b90e198a5c5500fb023f081eb0d3d7582f680e", "filename": "src/librustc/middle/ty_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_match.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n \n             (&ty::TyInfer(_), _) |\n             (_, &ty::TyInfer(_)) => {\n-                Err(ty::Sorts(ty_relate::expected_found(self, &a, &b)))\n+                Err(ty::TypeError::Sorts(ty_relate::expected_found(self, &a, &b)))\n             }\n \n             (&ty::TyError, _) | (_, &ty::TyError) => {"}, {"sha": "47fe9f74ce155fa85036d80d0cad117b793a2bb2", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -14,7 +14,7 @@\n //! type equality, etc.\n \n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TypeError};\n use middle::ty_fold::TypeFoldable;\n use std::rc::Rc;\n use syntax::abi;\n@@ -101,7 +101,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeWithMutability<'tcx> {\n                a,\n                b);\n         if a.mutbl != b.mutbl {\n-            Err(ty::Mutability)\n+            Err(TypeError::Mutability)\n         } else {\n             let mutbl = a.mutbl;\n             let variance = match mutbl {\n@@ -186,7 +186,7 @@ fn relate_type_params<'a,'tcx:'a,R>(relation: &mut R,\n     where R: TypeRelation<'a,'tcx>\n {\n     if a_tys.len() != b_tys.len() {\n-        return Err(ty::TyParamSize(expected_found(relation,\n+        return Err(TypeError::TyParamSize(expected_found(relation,\n                                                          &a_tys.len(),\n                                                          &b_tys.len())));\n     }\n@@ -256,7 +256,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::FnSig<'tcx> {\n         where R: TypeRelation<'a,'tcx>\n     {\n         if a.variadic != b.variadic {\n-            return Err(ty::VariadicMismatch(\n+            return Err(TypeError::VariadicMismatch(\n                 expected_found(relation, &a.variadic, &b.variadic)));\n         }\n \n@@ -270,7 +270,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::FnSig<'tcx> {\n             (ty::FnDiverging, ty::FnDiverging) =>\n                 Ok(ty::FnDiverging),\n             (a, b) =>\n-                Err(ty::ConvergenceMismatch(\n+                Err(TypeError::ConvergenceMismatch(\n                     expected_found(relation, &(a != ty::FnDiverging), &(b != ty::FnDiverging)))),\n         });\n \n@@ -287,7 +287,7 @@ fn relate_arg_vecs<'a,'tcx:'a,R>(relation: &mut R,\n     where R: TypeRelation<'a,'tcx>\n {\n     if a_args.len() != b_args.len() {\n-        return Err(ty::ArgCount);\n+        return Err(TypeError::ArgCount);\n     }\n \n     a_args.iter().zip(b_args)\n@@ -303,7 +303,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ast::Unsafety {\n         where R: TypeRelation<'a,'tcx>\n     {\n         if a != b {\n-            Err(ty::UnsafetyMismatch(expected_found(relation, a, b)))\n+            Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))\n         } else {\n             Ok(*a)\n         }\n@@ -320,7 +320,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for abi::Abi {\n         if a == b {\n             Ok(*a)\n         } else {\n-            Err(ty::AbiMismatch(expected_found(relation, a, b)))\n+            Err(TypeError::AbiMismatch(expected_found(relation, a, b)))\n         }\n     }\n }\n@@ -333,7 +333,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ProjectionTy<'tcx> {\n         where R: TypeRelation<'a,'tcx>\n     {\n         if a.item_name != b.item_name {\n-            Err(ty::ProjectionNameMismatched(\n+            Err(TypeError::ProjectionNameMismatched(\n                 expected_found(relation, &a.item_name, &b.item_name)))\n         } else {\n             let trait_ref = try!(relation.relate(&a.trait_ref, &b.trait_ref));\n@@ -368,7 +368,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for Vec<ty::PolyProjectionPredicate<'tcx>> {\n         // so we can just iterate through the lists pairwise, so long as they are the\n         // same length.\n         if a.len() != b.len() {\n-            Err(ty::ProjectionBoundsLength(expected_found(relation, &a.len(), &b.len())))\n+            Err(TypeError::ProjectionBoundsLength(expected_found(relation, &a.len(), &b.len())))\n         } else {\n             a.iter().zip(b)\n                 .map(|(a, b)| relation.relate(a, b))\n@@ -412,7 +412,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::BuiltinBounds {\n         // Two sets of builtin bounds are only relatable if they are\n         // precisely the same (but see the coercion code).\n         if a != b {\n-            Err(ty::BuiltinBoundsMismatch(expected_found(relation, a, b)))\n+            Err(TypeError::BuiltinBoundsMismatch(expected_found(relation, a, b)))\n         } else {\n             Ok(*a)\n         }\n@@ -428,7 +428,7 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TraitRef<'tcx> {\n     {\n         // Different traits cannot be related\n         if a.def_id != b.def_id {\n-            Err(ty::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n+            Err(TypeError::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n         } else {\n             let substs = try!(relate_item_substs(relation, a.def_id, a.substs, b.substs));\n             Ok(ty::TraitRef { def_id: a.def_id, substs: relation.tcx().mk_substs(substs) })\n@@ -547,7 +547,7 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             if sz_a == sz_b {\n                 Ok(tcx.mk_array(t, sz_a))\n             } else {\n-                Err(ty::FixedArraySize(expected_found(relation, &sz_a, &sz_b)))\n+                Err(TypeError::FixedArraySize(expected_found(relation, &sz_a, &sz_b)))\n             }\n         }\n \n@@ -565,10 +565,10 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n                                  .collect::<Result<_, _>>());\n                 Ok(tcx.mk_tup(ts))\n             } else if !(as_.is_empty() || bs.is_empty()) {\n-                Err(ty::TupleSize(\n+                Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))\n             } else {\n-                Err(ty::Sorts(expected_found(relation, &a, &b)))\n+                Err(TypeError::Sorts(expected_found(relation, &a, &b)))\n             }\n         }\n \n@@ -587,7 +587,7 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n \n         _ =>\n         {\n-            Err(ty::Sorts(expected_found(relation, &a, &b)))\n+            Err(TypeError::Sorts(expected_found(relation, &a, &b)))\n         }\n     }\n }"}, {"sha": "ff86b0e26111c23b46981d02d79711b00fd4879d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -66,7 +66,7 @@ use middle::infer::{self, Coercion};\n use middle::traits::{self, ObligationCause};\n use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::{AutoDerefRef, AdjustDerefRef};\n-use middle::ty::{self, TypeWithMutability, Ty};\n+use middle::ty::{self, TypeWithMutability, Ty, TypeError};\n use middle::ty_relate::RelateResult;\n use util::common::indent;\n \n@@ -247,7 +247,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             (u, cu)\n         } else {\n             debug!(\"Missing Unsize or CoerceUnsized traits\");\n-            return Err(ty::Mismatch);\n+            return Err(TypeError::Mismatch);\n         };\n \n         // Note, we want to avoid unnecessary unsizing. We don't want to coerce to\n@@ -307,7 +307,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // Uncertain or unimplemented.\n                 Ok(None) | Err(traits::Unimplemented) => {\n                     debug!(\"coerce_unsized: early return - can't prove obligation\");\n-                    return Err(ty::Mismatch);\n+                    return Err(TypeError::Mismatch);\n                 }\n \n                 // Object safety violations or miscellaneous.\n@@ -472,6 +472,6 @@ fn coerce_mutbls<'tcx>(from_mutbl: ast::Mutability,\n         (ast::MutMutable, ast::MutMutable) |\n         (ast::MutImmutable, ast::MutImmutable) |\n         (ast::MutMutable, ast::MutImmutable) => Ok(None),\n-        (ast::MutImmutable, ast::MutMutable) => Err(ty::Mutability)\n+        (ast::MutImmutable, ast::MutMutable) => Err(TypeError::Mutability)\n     }\n }"}, {"sha": "35636135cdacbd2775e80158c4225e42dd6950f8", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe30f6251a011d06096e3847021aa4090708c60b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=fe30f6251a011d06096e3847021aa4090708c60b", "patch": "@@ -454,7 +454,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                mk_ptr: &Fn(Ty<'tcx>) -> Ty<'tcx>| {\n                 if (mt_a.mutbl, mt_b.mutbl) == (ast::MutImmutable, ast::MutMutable) {\n                     infcx.report_mismatched_types(span, mk_ptr(mt_b.ty),\n-                                                  target, &ty::Mutability);\n+                                                  target, &ty::TypeError::Mutability);\n                 }\n                 (mt_a.ty, mt_b.ty, unsize_trait, None)\n             };"}]}