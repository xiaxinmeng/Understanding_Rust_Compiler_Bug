{"sha": "5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMmNmZGZiNzlkM2JlMThlZTUwZjViNWE2MDIwNWQwNDBjODM5NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-05T11:01:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-05T11:01:42Z"}, "message": "Auto merge of #28258 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #28225, #28231, #28234, #28253\n- Failed merges:", "tree": {"sha": "8cd038cf48b57efb6c5995c2bcf55db69897d168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd038cf48b57efb6c5995c2bcf55db69897d168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "html_url": "https://github.com/rust-lang/rust/commit/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b36e921f4198f5afc1656db2d153f4f74a1fabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b36e921f4198f5afc1656db2d153f4f74a1fabe", "html_url": "https://github.com/rust-lang/rust/commit/6b36e921f4198f5afc1656db2d153f4f74a1fabe"}, {"sha": "1bf060ffb31ef6dc79543b4c10b975cd802020d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf060ffb31ef6dc79543b4c10b975cd802020d0", "html_url": "https://github.com/rust-lang/rust/commit/1bf060ffb31ef6dc79543b4c10b975cd802020d0"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "a2bdd66b0c253e2954a11a4b17b7350961f9f6a1", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "patch": "@@ -7,7 +7,7 @@ can be awkward. Consider this code:\n baz(bar(foo));\n ```\n \n-We would read this left-to right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the\n+We would read this left-to-right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the\n order that the functions would get called in, that\u2019s inside-out: \u2018foo bar baz\u2019.\n Wouldn\u2019t it be nice if we could do this instead?\n \n@@ -45,17 +45,17 @@ This will print `12.566371`.\n \n \n \n-We\u2019ve made a struct that represents a circle. We then write an `impl` block,\n+We\u2019ve made a `struct` that represents a circle. We then write an `impl` block,\n and inside it, define a method, `area`.\n \n-Methods take a  special first parameter, of which there are three variants:\n+Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. You can think of this first parameter as\n being the `foo` in `foo.bar()`. The three variants correspond to the three\n kinds of things `foo` could be: `self` if it\u2019s just a value on the stack,\n `&self` if it\u2019s a reference, and `&mut self` if it\u2019s a mutable reference.\n Because we took the `&self` parameter to `area`, we can use it just like any\n other parameter. Because we know it\u2019s a `Circle`, we can access the `radius`\n-just like we would with any other struct. \n+just like we would with any other `struct`. \n \n We should default to using `&self`, as you should prefer borrowing over taking\n ownership, as well as taking immutable references over mutable ones. Here\u2019s an\n@@ -120,12 +120,12 @@ Check the return type:\n ```rust\n # struct Circle;\n # impl Circle {\n-fn grow(&self) -> Circle {\n+fn grow(&self, increment: f64) -> Circle {\n # Circle } }\n ```\n \n We just say we\u2019re returning a `Circle`. With this method, we can grow a new\n-circle to any arbitrary size.\n+`Circle` to any arbitrary size.\n \n # Associated functions\n \n@@ -161,7 +161,7 @@ methods\u2019.\n \n # Builder Pattern\n \n-Let\u2019s say that we want our users to be able to create Circles, but we will\n+Let\u2019s say that we want our users to be able to create `Circle`s, but we will\n allow them to only set the properties they care about. Otherwise, the `x`\n and `y` attributes will be `0.0`, and the `radius` will be `1.0`. Rust doesn\u2019t\n have method overloading, named arguments, or variable arguments. We employ\n@@ -224,7 +224,7 @@ fn main() {\n }\n ```\n \n-What we\u2019ve done here is make another struct, `CircleBuilder`. We\u2019ve defined our\n+What we\u2019ve done here is make another `struct`, `CircleBuilder`. We\u2019ve defined our\n builder methods on it. We\u2019ve also defined our `area()` method on `Circle`. We\n also made one more method on `CircleBuilder`: `finalize()`. This method creates\n our final `Circle` from the builder. Now, we\u2019ve used the type system to enforce"}, {"sha": "91845e916d4d4b531c89e17f054a5ef5f478654a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "patch": "@@ -44,7 +44,7 @@ E0002: r##\"\n This error indicates that an empty match expression is invalid because the type\n it is matching on is non-empty (there exist values of this type). In safe code\n it is impossible to create an instance of an empty type, so empty match\n-expressions are almost never desired.  This error is typically fixed by adding\n+expressions are almost never desired. This error is typically fixed by adding\n one or more cases to the match expression.\n \n An example of an empty type is `enum Empty { }`. So, the following will work:\n@@ -218,7 +218,14 @@ match x {\n E0010: r##\"\n The value of statics and constants must be known at compile time, and they live\n for the entire lifetime of a program. Creating a boxed value allocates memory on\n-the heap at runtime, and therefore cannot be done at compile time.\n+the heap at runtime, and therefore cannot be done at compile time. Erroneous\n+code example:\n+\n+```\n+#![feature(box_syntax)]\n+\n+const CON : Box<i32> = box 0;\n+```\n \"##,\n \n E0011: r##\"\n@@ -335,7 +342,6 @@ is not allowed.\n \n If you really want global mutable state, try using `static mut` or a global\n `UnsafeCell`.\n-\n \"##,\n \n E0018: r##\"\n@@ -399,7 +405,13 @@ fn main() {\n \n E0020: r##\"\n This error indicates that an attempt was made to divide by zero (or take the\n-remainder of a zero divisor) in a static or constant expression.\n+remainder of a zero divisor) in a static or constant expression. Erroneous\n+code example:\n+\n+```\n+const X: i32 = 42 / 0;\n+// error: attempted to divide by zero in a constant expression\n+```\n \"##,\n \n E0022: r##\""}, {"sha": "8d592c9262958e26d4058c44416cdce7732b2906", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "patch": "@@ -218,6 +218,9 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n                     span_err!(cx.tcx.sess, ex.span, E0002,\n                               \"non-exhaustive patterns: type {} is non-empty\",\n                               pat_ty);\n+                    span_help!(cx.tcx.sess, ex.span,\n+                        \"Please ensure that all possible cases are being handled; \\\n+                         possibly adding wildcards or more match arms.\");\n                 }\n                 // If the type *is* empty, it's vacuously exhaustive\n                 return;"}, {"sha": "8a2f8b1cf4bb0d706fdadebdc2a76929865066de", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "patch": "@@ -2475,6 +2475,24 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n+//NB: not currently reachable\n+E0247: r##\"\n+This error indicates an attempt to use a module name where a type is expected.\n+For example:\n+\n+```\n+mod MyMod {\n+    mod MySubMod { }\n+}\n+\n+fn do_something(x: MyMod::MySubMod) { }\n+```\n+\n+In this example, we're attempting to take a parameter of type `MyMod::MySubMod`\n+in the do_something function. This is not legal: `MyMod::MySubMod` is a module\n+name, not a type.\n+\"##,\n+\n E0248: r##\"\n This error indicates an attempt to use a value where a type is expected. For\n example:\n@@ -3291,7 +3309,6 @@ register_diagnostics! {\n     E0242, // internal error looking up a definition\n     E0245, // not a trait\n //  E0246, // invalid recursive type\n-    E0247, // found module name used as a type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n     E0321, // extended coherence rules for defaulted traits violated"}, {"sha": "82578172802f66614810f9774574251d3e23e61a", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2cfdfb79d3be18ee50f5b5a60205d040c8396a/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=5c2cfdfb79d3be18ee50f5b5a60205d040c8396a", "patch": "@@ -103,8 +103,8 @@\n //!   `Some` and `None`.\n //! * `std::result::Result::`{\n //!     [`self`](../result/enum.Result.html),\n-//!     [`Some`](../result/enum.Result.html),\n-//!     [`None`](../result/enum.Result.html)\n+//!     [`Ok`](../result/enum.Result.html),\n+//!     [`Err`](../result/enum.Result.html)\n //!   }.\n //!   The ubiquitous `Result` type and its two [variants][book-enums],\n //!   `Ok` and `Err`."}]}