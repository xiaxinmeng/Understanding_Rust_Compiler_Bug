{"sha": "d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTMwYzAxYTcxOTU0YTU0OTdjYmI1Zjk3ZGViOWNlMmJkZjc5NGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T13:38:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:22:39Z"}, "message": "Fallout out rustc", "tree": {"sha": "a71000981f62d3a849b53fee5e6d6eb408e1aa72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71000981f62d3a849b53fee5e6d6eb408e1aa72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "html_url": "https://github.com/rust-lang/rust/commit/d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890ed5c46847fa544278c18fd46c1bdfe2809c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/890ed5c46847fa544278c18fd46c1bdfe2809c09", "html_url": "https://github.com/rust-lang/rust/commit/890ed5c46847fa544278c18fd46c1bdfe2809c09"}], "stats": {"total": 344, "additions": 173, "deletions": 171}, "files": [{"sha": "495044f9459494f738fa501c229b69de93f22da3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -113,7 +113,7 @@ declare_lint! {\n }\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct HardwiredLints;\n \n impl LintPass for HardwiredLints {"}, {"sha": "498b2ce518c16dc6055166053e19ed7ac5cb8b20", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -41,7 +41,7 @@ pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_a\n                         GatherNodeLevels};\n \n /// Specification of a single lint.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///"}, {"sha": "cda0084768644a599a98b438b52539d184758109", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -116,7 +116,7 @@ pub const tag_items_data_item_reexport_def_id: usize = 0x47;\n pub const tag_items_data_item_reexport_name: usize = 0x48;\n \n // used to encode crate_ctxt side tables\n-#[derive(Copy, PartialEq, FromPrimitive)]\n+#[derive(Copy, Clone, PartialEq, FromPrimitive)]\n #[repr(usize)]\n pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_ast = 0x50,"}, {"sha": "d528e38d341cfe099a80acf0f37d039e9bc3c107", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MethodInfo {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,"}, {"sha": "1567f4b99475cb1fe345e0f1983f487cb695e12b", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -21,7 +21,7 @@ use std::path::{Path, PathBuf};\n use util::fs as myfs;\n use session::search_paths::{SearchPaths, PathKind};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FileMatch {\n     FileMatches,\n     FileDoesntMatch,"}, {"sha": "3fb128b1881f5b949bed0c91cc9c73b7ba1ba365", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -43,7 +43,7 @@ use syntax::parse::token;\n // def-id will depend on where it originated from.  Therefore, the conversion\n // function is given an indicator of the source of the def-id.  See\n // astencode.rs for more information.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum DefIdSource {\n     // Identifies a struct, trait, enum, etc.\n     NominalType,"}, {"sha": "cbc2ef1535ea6794b5705bfe15c0d27fbb16dce1", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -25,7 +25,7 @@ struct CFGBuilder<'a, 'tcx: 'a> {\n     loop_scopes: Vec<LoopScope>,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct LoopScope {\n     loop_id: ast::NodeId,     // id of loop/while node\n     continue_index: CFGIndex, // where to go on a `loop`"}, {"sha": "ad4fdcd7b834ef2e5b0bc427820d2ce5f522d9eb", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -24,7 +24,7 @@ pub struct CFG {\n     pub exit: CFGIndex,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CFGNodeData {\n     AST(ast::NodeId),\n     Entry,"}, {"sha": "ce011f2561b79f661744aa78f613fff58e023a23", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -76,7 +76,7 @@ bitflags! {\n     }\n }\n \n-#[derive(Copy, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n enum Mode {\n     Const,\n     Static,"}, {"sha": "bf6829d96765058feea270ec09378d460ecfad1a", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -21,7 +21,7 @@ enum Context {\n     Normal, Loop, Closure\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct CheckLoopVisitor<'a> {\n     sess: &'a Session,\n     cx: Context"}, {"sha": "79f4d62b45e75fb41740fada747d1a5274163cc4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -128,7 +128,7 @@ enum Usefulness {\n     NotUseful\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum WitnessPreference {\n     ConstructWitness,\n     LeaveOutWitness"}, {"sha": "7e0eebe3993d788febbe0950c9b8ae8849d25f92", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -28,7 +28,7 @@ use syntax::visit;\n use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EntryOrExit {\n     Entry,\n     Exit,"}, {"sha": "019cba410836d24bd18cefe844e1e9cf62d13f6a", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -65,7 +65,7 @@ pub enum Def {\n ///     <T as Trait>::AssocX::AssocY::MethodOrAssocType\n ///           ^~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~\n ///           base_def        depth = 2\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct PathResolution {\n     pub base_def: Def,\n     pub last_private: LastPrivate,\n@@ -93,7 +93,7 @@ pub type DefMap = RefCell<NodeMap<PathResolution>>;\n // within.\n pub type ExportMap = NodeMap<Vec<Export>>;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Export {\n     pub name: ast::Name,    // The name of the target.\n     pub def_id: ast::DefId, // The definition of the target."}, {"sha": "814492cbef1dd3fca1dd8d3d92d3f7c46fcd2303", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -22,7 +22,7 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum UnsafeContext {\n     SafeContext,\n     UnsafeFn,"}, {"sha": "2fa9c7c8fbebb0a7e8ceb794b5926ace6f818259", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -94,7 +94,7 @@ pub trait Delegate<'tcx> {\n               mode: MutateMode);\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n@@ -106,28 +106,28 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MatchMode {\n     NonBindingMatch,\n     BorrowingMatch,\n     CopyingMatch,\n     MovingMatch,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum TrackMatchMode {\n     Unknown,\n     Definite(MatchMode),\n@@ -194,14 +194,14 @@ impl TrackMatchMode {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MutateMode {\n     Init,\n     JustWrite,    // x = y\n     WriteAndRead, // x += y\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum OverloadedCallType {\n     FnOverloadedCall,\n     FnMutOverloadedCall,"}, {"sha": "a9ac61b49eca8bd247ffd8a7ce06e0275db5521b", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -66,13 +66,13 @@ pub struct NodeIndex(pub usize);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(usize::MAX);\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct EdgeIndex(pub usize);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(usize::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Direction { repr: usize }\n #[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };"}, {"sha": "5e426444cb1a88ebdd3424a576f609e9c0d75d81", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -294,7 +294,7 @@ pub enum RegionVariableOrigin<'tcx> {\n     BoundRegionInCoherence(ast::Name),\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),"}, {"sha": "3009b99df14413ab8b0df98506830dfeb2b80bd7", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -74,13 +74,13 @@ pub enum GenericKind<'tcx> {\n     Projection(ty::ProjectionTy<'tcx>),\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TwoRegions {\n     a: Region,\n     b: Region,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum UndoLogEntry {\n     OpenSnapshot,\n     CommitedSnapshot,\n@@ -91,7 +91,7 @@ pub enum UndoLogEntry {\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CombineMapType {\n     Lub, Glb\n }\n@@ -944,10 +944,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n // ______________________________________________________________________\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum Classification { Expanding, Contracting }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n struct VarData {"}, {"sha": "03612a6c1ae5bc2401e5ddc3ca4b82e1ed0a48f3", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -47,7 +47,7 @@ struct Delegate<'tcx>(PhantomData<&'tcx ()>);\n \n type Relation = (RelationDir, ty::TyVid);\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo, BiTo\n }"}, {"sha": "0797fd89302f107f23db22f3e7777395c11578bd", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -92,7 +92,7 @@ pub struct Node<K:UnifyKey> {\n     pub rank: usize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Delegate<K>(PhantomData<K>);\n \n // We can't use V:LatticeValue, much as I would like to,"}, {"sha": "a08de58f909d3a5f177161d4a074be53b10700e0", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -46,7 +46,7 @@ macro_rules! lets_do_this {\n         $( $variant:ident, $name:expr, $method:ident; )*\n     ) => {\n \n-#[derive(Copy, FromPrimitive, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, FromPrimitive, PartialEq, Eq, Hash)]\n pub enum LangItem {\n     $($variant),*\n }"}, {"sha": "d7161607b61eb9c3e9a1ea032db5e76b42894166", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -139,7 +139,7 @@ enum LoopKind<'a> {\n     WhileLoop(&'a Expr),\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n struct Variable(usize);\n \n #[derive(Copy, PartialEq)]\n@@ -159,7 +159,7 @@ impl Clone for LiveNode {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n@@ -245,13 +245,13 @@ struct CaptureInfo {\n     var_nid: NodeId\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct LocalInfo {\n     id: NodeId,\n     ident: ast::Ident\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n     Local(LocalInfo),\n@@ -534,7 +534,7 @@ fn invalid_users() -> Users {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,"}, {"sha": "85255d04df4329adc0033d8451fa3940f62379cb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -199,7 +199,7 @@ pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum deref_kind {\n     deref_ptr(PointerKind),\n     deref_interior(InteriorKind),\n@@ -263,6 +263,9 @@ pub struct MemCategorizationContext<'t,TYPER:'t> {\n }\n \n impl<'t,TYPER:'t> Copy for MemCategorizationContext<'t,TYPER> {}\n+impl<'t,TYPER:'t> Clone for MemCategorizationContext<'t,TYPER> {\n+    fn clone(&self) -> MemCategorizationContext<'t,TYPER> { *self }\n+}\n \n pub type McResult<T> = Result<T, ()>;\n "}, {"sha": "d8efb5655aaabc2c62ade363978214b7183ecc9a", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -32,7 +32,7 @@ pub type ExternalExports = DefIdSet;\n /// reexporting a public struct doesn't inline the doc).\n pub type PublicItems = NodeSet;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum LastPrivate {\n     LastMod(PrivateDep),\n     // `use` directives (imports) can refer to two separate definitions in the\n@@ -46,14 +46,14 @@ pub enum LastPrivate {\n                type_used: ImportUse},\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum PrivateDep {\n     AllPublic,\n     DependsOn(ast::DefId),\n }\n \n // How an import is used.\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ImportUse {\n     Unused,       // The import is not used.\n     Used,         // The import is used."}, {"sha": "a2e502b78d252283692a9affa3b9b96d9c7b11ef", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -255,7 +255,7 @@ pub struct RegionMaps {\n /// Carries the node id for the innermost block or match expression,\n /// for building up the `var_map` which maps ids to the blocks in\n /// which they were declared.\n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n enum InnermostDeclaringBlock {\n     None,\n     Block(ast::NodeId),\n@@ -280,7 +280,7 @@ impl InnermostDeclaringBlock {\n /// Contextual information for declarations introduced by a statement\n /// (i.e. `let`). It carries node-id's for statement and enclosing\n /// block both, as well as the statement's index within the block.\n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n struct DeclaringStatementContext {\n     stmt_id: ast::NodeId,\n     block_id: ast::NodeId,\n@@ -296,7 +296,7 @@ impl DeclaringStatementContext {\n     }\n }\n \n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n enum InnermostEnclosingExpr {\n     None,\n     Some(ast::NodeId),\n@@ -318,7 +318,7 @@ impl InnermostEnclosingExpr {\n     }\n }\n \n-#[derive(Debug, Copy)]\n+#[derive(Debug, Copy, Clone)]\n pub struct Context {\n     /// the scope that contains any new variables declared\n     var_parent: InnermostDeclaringBlock,"}, {"sha": "a405c5bda7d8e0c234381775913a99a2f1ab1df8", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -96,7 +96,7 @@ pub enum MethodMatchResult {\n     MethodDidNotMatch,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum MethodMatchedData {\n     // In the case of a precise match, we don't really need to store\n     // how the match was found. So don't."}, {"sha": "9abdd45170503d27d23095cb87f21bf0188b8d60", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -261,7 +261,7 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct creader_cache_key {\n     pub cnum: CrateNum,\n     pub pos: usize,\n@@ -595,7 +595,7 @@ pub type ObjectCastMap<'tcx> = RefCell<NodeMap<ty::PolyTraitRef<'tcx>>>;\n /// will push one or more such restriction into the\n /// `transmute_restrictions` vector during `intrinsicck`. They are\n /// then checked during `trans` by the fn `check_intrinsics`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TransmuteRestriction<'tcx> {\n     /// The span whence the restriction comes.\n     pub span: Span,\n@@ -885,7 +885,7 @@ macro_rules! sty_debug_print {\n         // variable names.\n         mod inner {\n             use middle::ty;\n-            #[derive(Copy)]\n+            #[derive(Copy, Clone)]\n             struct DebugStat {\n                 total: usize,\n                 region_infer: usize,\n@@ -4012,7 +4012,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n ///\n /// The ordering of the cases is significant. They are sorted so that cmp::max\n /// will keep the \"more erroneous\" of two values.\n-#[derive(Copy, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialOrd, Ord, Eq, PartialEq, Debug)]\n pub enum Representability {\n     Representable,\n     ContainsRecursive,\n@@ -4743,7 +4743,7 @@ pub fn expr_is_lval(tcx: &ctxt, e: &ast::Expr) -> bool {\n /// two kinds of rvalues is an artifact of trans which reflects how we will\n /// generate code for that kind of expression.  See trans/expr.rs for more\n /// information.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ExprKind {\n     LvalueExpr,\n     RvalueDpsExpr,\n@@ -5439,7 +5439,7 @@ pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> String {\n     with_path(cx, id, |path| ast_map::path_to_string(path)).to_string()\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum DtorKind {\n     NoDtor,\n     TraitDtor(DefId, bool)\n@@ -7163,7 +7163,7 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum CopyImplementationError {\n     FieldDoesNotImplementCopy(ast::Name),\n     VariantDoesNotImplementCopy(ast::Name),"}, {"sha": "2e8b135f5afab8101694f163256c9af3100a6c1a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -247,7 +247,7 @@ pub fn basic_options() -> Options {\n // users can have their own entry\n // functions that don't start a\n // scheduler\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum EntryFnType {\n     EntryMain,\n     EntryStart,"}, {"sha": "7dcd6ba6cd11f9fae652f40f996aa23d88ba43c8", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -15,7 +15,7 @@ use target::TargetOptions;\n use self::Arch::*;\n \n #[allow(non_camel_case_types)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Arch {\n     Armv7,\n     Armv7s,"}, {"sha": "f8da075e4bdc239929212106049be19c7bf0beca", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -334,7 +334,7 @@ impl ToInteriorKind for mc::InteriorKind {\n     }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in README.md\n     LpInterior(InteriorKind),    // `LV.f` in README.md\n@@ -500,13 +500,13 @@ pub struct BckError<'tcx> {\n     code: bckerr_code\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AliasableViolationKind {\n     MutabilityViolation,\n     BorrowViolation(euv::LoanCause)\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,"}, {"sha": "2d1b57243d1cccd192b7037d2a79134835b39d32", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -94,7 +94,7 @@ impl Clone for MovePathIndex {\n const InvalidMovePathIndex: MovePathIndex = MovePathIndex(usize::MAX);\n \n /// Index into `MoveData.moves`, used like a pointer\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct MoveIndex(usize);\n \n impl MoveIndex {\n@@ -125,15 +125,15 @@ pub struct MovePath<'tcx> {\n     pub next_sibling: MovePathIndex,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MoveKind {\n     Declared,   // When declared, variables start out \"moved\".\n     MoveExpr,   // Expression or binding that moves a variable\n     MovePat,    // By-move binding\n     Captured    // Closure creation that moves a value\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Move {\n     /// Path being moved.\n     pub path: MovePathIndex,\n@@ -148,7 +148,7 @@ pub struct Move {\n     pub next_move: MoveIndex\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Assignment {\n     /// Path being assigned.\n     pub path: MovePathIndex,\n@@ -160,7 +160,7 @@ pub struct Assignment {\n     pub span: Span,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct VariantMatch {\n     /// downcast to the variant.\n     pub path: MovePathIndex,"}, {"sha": "ade52bfde35e6cac3cb3425429849f8a0756e7ad", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::dataflow;\n use std::rc::Rc;\n use std::borrow::IntoCow;\n \n-#[derive(Debug, Copy)]\n+#[derive(Debug, Copy, Clone)]\n pub enum Variant {\n     Loans,\n     Moves,"}, {"sha": "b32c6829a221ba481d87a8e5f865fc50e1ba69e1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -182,7 +182,7 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n }\n \n // Whether to stop or continue compilation.\n-#[derive(Copy, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Compilation {\n     Stop,\n     Continue,\n@@ -265,7 +265,7 @@ pub trait CompilerCalls<'a> {\n }\n \n // CompilerCalls instance for a regular rustc build.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {"}, {"sha": "0d9bd50927ba6676b0b93082a336f1df9eddfa3e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -44,7 +44,7 @@ use std::option;\n use std::path::PathBuf;\n use std::str::FromStr;\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n     PpmNormal,\n     PpmEveryBodyLoops,\n@@ -56,7 +56,7 @@ pub enum PpSourceMode {\n }\n \n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpFlowGraphMode {\n     Default,\n     /// Drops the labels from the edges in the flowgraph output. This\n@@ -65,7 +65,7 @@ pub enum PpFlowGraphMode {\n     /// have become a pain to maintain.\n     UnlabelledEdges,\n }\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph(PpFlowGraphMode),"}, {"sha": "7b66f3fe7d05dce4a79e0174b09a5d7b1abe5b8a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -63,7 +63,7 @@ declare_lint! {\n     \"suggest using `loop { }` instead of `while true { }`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct WhileTrue;\n \n impl LintPass for WhileTrue {\n@@ -107,7 +107,7 @@ declare_lint! {\n     \"shift exceeds the type's number of bits\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -431,7 +431,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ImproperCTypes;\n \n impl LintPass for ImproperCTypes {\n@@ -474,7 +474,7 @@ declare_lint! {\n     \"use of owned (Box type) heap memory\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct BoxPointers;\n \n impl BoxPointers {\n@@ -621,7 +621,7 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedAttributes;\n \n impl LintPass for UnusedAttributes {\n@@ -662,7 +662,7 @@ declare_lint! {\n     \"path statements with no effect\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PathStatements;\n \n impl LintPass for PathStatements {\n@@ -696,7 +696,7 @@ declare_lint! {\n     \"unused result of an expression in a statement\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedResults;\n \n impl LintPass for UnusedResults {\n@@ -764,7 +764,7 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n@@ -874,7 +874,7 @@ declare_lint! {\n     \"methods, functions, lifetime parameters and modules should have snake case names\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonSnakeCase;\n \n impl NonSnakeCase {\n@@ -1014,7 +1014,7 @@ declare_lint! {\n     \"static constants should have uppercase identifiers\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonUpperCaseGlobals;\n \n impl NonUpperCaseGlobals {\n@@ -1072,7 +1072,7 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedParens;\n \n impl UnusedParens {\n@@ -1166,7 +1166,7 @@ declare_lint! {\n     \"unnecessary braces around an imported item\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedImportBraces;\n \n impl LintPass for UnusedImportBraces {\n@@ -1196,7 +1196,7 @@ declare_lint! {\n     \"using `Struct { x: x }` instead of `Struct { x }`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonShorthandFieldPatterns;\n \n impl LintPass for NonShorthandFieldPatterns {\n@@ -1233,7 +1233,7 @@ declare_lint! {\n     \"unnecessary use of an `unsafe` block\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedUnsafe;\n \n impl LintPass for UnusedUnsafe {\n@@ -1258,7 +1258,7 @@ declare_lint! {\n     \"usage of `unsafe` code\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnsafeCode;\n \n impl LintPass for UnsafeCode {\n@@ -1319,7 +1319,7 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedMut;\n \n impl UnusedMut {\n@@ -1388,7 +1388,7 @@ declare_lint! {\n     \"detects unnecessary allocations that can be eliminated\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedAllocation;\n \n impl LintPass for UnusedAllocation {\n@@ -1625,7 +1625,7 @@ declare_lint! {\n     \"detects potentially-forgotten implementations of `Copy`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MissingCopyImplementations;\n \n impl LintPass for MissingCopyImplementations {\n@@ -1740,7 +1740,7 @@ declare_lint! {\n }\n \n /// Checks for use of items with `#[deprecated]` attributes\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Stability;\n \n impl Stability {\n@@ -1800,7 +1800,7 @@ declare_lint! {\n     \"functions that cannot return without calling themselves\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnconditionalRecursion;\n \n \n@@ -1991,7 +1991,7 @@ declare_lint! {\n     \"compiler plugin used as ordinary library in non-plugin crate\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PluginAsLibrary;\n \n impl LintPass for PluginAsLibrary {\n@@ -2045,7 +2045,7 @@ declare_lint! {\n     \"const items will not have their symbols exported\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct InvalidNoMangleItems;\n \n impl LintPass for InvalidNoMangleItems {\n@@ -2088,7 +2088,7 @@ impl LintPass for InvalidNoMangleItems {\n }\n \n /// Forbids using the `#[feature(...)]` attribute\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnstableFeatures;\n \n declare_lint! {"}, {"sha": "e6350ae44d43f924d7ff2b12ea46435b6d551230", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -18,7 +18,7 @@ use std::ptr;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n@@ -38,7 +38,7 @@ impl OptimizationDiagnosticKind {\n }\n \n #[allow(raw_pointer_derive)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: *const c_char,\n@@ -69,14 +69,13 @@ impl OptimizationDiagnostic {\n     }\n }\n \n+#[derive(Copy, Clone)]\n pub struct InlineAsmDiagnostic {\n     pub cookie: c_uint,\n     pub message: TwineRef,\n     pub instruction: ValueRef,\n }\n \n-impl Copy for InlineAsmDiagnostic {}\n-\n impl InlineAsmDiagnostic {\n     unsafe fn unpack(di: DiagnosticInfoRef)\n             -> InlineAsmDiagnostic {\n@@ -96,7 +95,7 @@ impl InlineAsmDiagnostic {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n     InlineAsm(InlineAsmDiagnostic),"}, {"sha": "9b0ae2e9ef858e852aa2c17788cb1f68636bcda4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -76,7 +76,7 @@ pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to usize.\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CallConv {\n     CCallConv = 0,\n     FastCallConv = 8,\n@@ -86,7 +86,7 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n@@ -97,7 +97,7 @@ pub enum Visibility {\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n // they've been removed in upstream LLVM commit r203866.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n@@ -113,7 +113,7 @@ pub enum Linkage {\n }\n \n #[repr(C)]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n@@ -154,7 +154,7 @@ bitflags! {\n \n \n #[repr(u64)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n     // the LLVM c api so instead to add these\n@@ -175,13 +175,13 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n@@ -273,7 +273,7 @@ impl AttrBuilder {\n }\n \n // enum for the LLVM IntPredicate type\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -288,7 +288,7 @@ pub enum IntPredicate {\n }\n \n // enum for the LLVM RealPredicate type\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n     RealOEQ = 1,\n@@ -310,7 +310,7 @@ pub enum RealPredicate {\n \n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,\n@@ -332,7 +332,7 @@ pub enum TypeKind {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n     AtomicAdd  = 1,\n@@ -348,7 +348,7 @@ pub enum AtomicBinOp {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n     Unordered = 1,\n@@ -362,13 +362,13 @@ pub enum AtomicOrdering {\n \n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -385,13 +385,13 @@ pub enum MetadataType {\n }\n \n // Inline Asm Dialect\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n-#[derive(Copy, PartialEq, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n     CodeGenLevelNone = 0,\n@@ -400,7 +400,7 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n     RelocDefault = 0,\n@@ -410,7 +410,7 @@ pub enum RelocMode {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n     CodeModelJITDefault = 1,\n@@ -421,7 +421,7 @@ pub enum CodeGenModel {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n     DK_StackSize,\n@@ -533,7 +533,7 @@ pub mod debuginfo {\n     pub type DIEnumerator = DIDescriptor;\n     pub type DITemplateTypeParameter = DIDescriptor;\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub enum DIDescriptorFlags {\n       FlagPrivate            = 1 << 0,\n       FlagProtected          = 1 << 1,"}, {"sha": "52db6013f4d5df0b54f01abe3c47a026fc486b5d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -61,7 +61,7 @@ use std::rc::Rc;\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypesAndModules,\n@@ -70,7 +70,7 @@ enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum NamespaceError {\n     NoError,\n     ModuleError,"}, {"sha": "7ba386932ebc5afa6d4c531c54cc54532a0ba5e5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -107,7 +107,7 @@ mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct BindingInfo {\n     span: Span,\n     binding_mode: BindingMode,\n@@ -116,14 +116,14 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n     ArgumentIrrefutableMode,\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n@@ -277,7 +277,7 @@ enum FallbackSuggestion {\n     TraitMethod(String),\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum TypeParameters<'a> {\n     NoTypeParameters,\n     HasTypeParameters(\n@@ -294,7 +294,7 @@ enum TypeParameters<'a> {\n \n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n@@ -316,7 +316,7 @@ enum RibKind {\n     ConstantItemRibKind\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n@@ -327,7 +327,7 @@ enum ModulePrefixResult {\n     PrefixFound(Rc<Module>, usize)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum NameSearchType {\n     /// We're doing a name search in order to resolve a `use` directive.\n     ImportSearch,\n@@ -337,7 +337,7 @@ enum NameSearchType {\n     PathSearch,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n     FoundConst(Def, LastPrivate),\n@@ -369,7 +369,7 @@ enum ParentLink {\n }\n \n /// The type of module this is.\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -3539,7 +3539,7 @@ pub struct CrateMap {\n     pub glob_map: Option<GlobMap>\n }\n \n-#[derive(PartialEq,Copy)]\n+#[derive(PartialEq,Copy, Clone)]\n pub enum MakeGlobMap {\n     Yes,\n     No"}, {"sha": "f1a8507b1781197cc6683163bbf2b466978a2687", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -37,7 +37,7 @@ use std::rc::Rc;\n \n \n /// Contains data for specific types of import directives.\n-#[derive(Copy,Debug)]\n+#[derive(Copy, Clone,Debug)]\n pub enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport"}, {"sha": "db724b0ef6b650b5eac3238af14bfc607add3b11", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -62,7 +62,7 @@ macro_rules! svec {\n     })\n }\n \n-#[derive(Copy, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Row {\n     Variable,\n     Enum,"}, {"sha": "ef599a01e7c40fc5b8697ced0b52811c936bea3c", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -228,7 +228,7 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n impl<'a> ConstantExpr<'a> {\n@@ -311,7 +311,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum BranchKind {\n     NoBranch,\n     Single,"}, {"sha": "e027ea4b045a3ea807f0a23439a695f8389bb63c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -2112,7 +2112,7 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n \n \n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n     /// assigned to the current compilation unit."}, {"sha": "d3d055cda120293d172413158976fef590039b96", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -13,7 +13,7 @@ use llvm::BasicBlockRef;\n use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct BasicBlock(pub BasicBlockRef);\n \n pub type Preds = Map<Filter<Users, fn(&Value) -> bool>, fn(Value) -> BasicBlock>;"}, {"sha": "9eb46d3ff549a80bd33a7ef06295fc67f8a676a8", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -60,7 +60,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ptr::P;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MethodData {\n     pub llfn: ValueRef,\n     pub llself: ValueRef,\n@@ -1110,7 +1110,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     bcx\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AutorefArg {\n     DontAutorefArg,\n     DoAutorefArg(ast::NodeId)"}, {"sha": "19891e9307229fa52ee380c21b743b0f67fe9d5b", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -153,7 +153,7 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct CustomScopeIndex {\n     index: usize\n }\n@@ -184,14 +184,14 @@ impl<'blk, 'tcx: 'blk> fmt::Debug for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, usize)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n@@ -209,7 +209,7 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n@@ -982,7 +982,7 @@ impl EarlyExitLabel {\n ///////////////////////////////////////////////////////////////////////////\n // Cleanup types\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n     must_unwind: bool,\n@@ -1021,12 +1021,12 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Heap {\n     HeapExchange\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n@@ -1061,7 +1061,7 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FreeSlice {\n     ptr: ValueRef,\n     size: ValueRef,\n@@ -1098,7 +1098,7 @@ impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n }"}, {"sha": "c5985e930e97b98b72fc9e3ffdb72a3c6e1af935", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -343,7 +343,7 @@ pub fn gensym_name(name: &str) -> PathElem {\n *\n */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NodeIdAndSpan {\n     pub id: ast::NodeId,\n     pub span: Span,\n@@ -1225,7 +1225,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &infer::InferCtxt<'a,'tcx>,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),"}, {"sha": "a736a9fe88a1408de7da76457766aa7ca8fa8f52", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -172,7 +172,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,"}, {"sha": "2747288b60755c9245156bb496e4278d859e1aef", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -2382,7 +2382,7 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum EnumDiscriminantInfo {\n     RegularDiscriminant(DIType),\n     OptimizedDiscriminant,\n@@ -3106,7 +3106,7 @@ impl MetadataCreationResult {\n     }\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum InternalDebugLocation {\n     KnownLocation { scope: DIScope, line: usize, col: usize },\n     UnknownLocation"}, {"sha": "5a79aa35bfae175b1eee83da494f2a9ae2563a39", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -94,7 +94,7 @@ use std::rc::Rc;\n // These are passed around by the code generating functions to track the\n // destination of a computation's value.\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Dest {\n     SaveIn(ValueRef),\n     Ignore,\n@@ -2038,7 +2038,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,"}, {"sha": "c7857d6a775f3f3163c81b191b5b5033f25b605e", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -57,7 +57,7 @@ mod basic_block;\n mod llrepr;\n mod cleanup;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ModuleTranslation {\n     pub llcx: ContextRef,\n     pub llmod: ModuleRef,"}, {"sha": "791b58d88a93e97d84e934371ad2df617c49c3f2", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::ty_to_string;\n use syntax::ast;\n use syntax::parse::token::InternedString;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct VecTypes<'tcx> {\n     unit_ty: Ty<'tcx>,\n     llunit_ty: Type"}, {"sha": "bc71278c157434988a59da92ab11681d4b141976", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -14,7 +14,7 @@ use trans::basic_block::BasicBlock;\n use trans::common::Block;\n use libc::c_uint;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Value(pub ValueRef);\n \n macro_rules! opt_val { ($e:expr) => (\n@@ -125,7 +125,7 @@ impl Value {\n }\n \n /// Wrapper for LLVM UseRef\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Use(UseRef);\n \n impl Use {"}, {"sha": "677ab56852434802541e68a64f1014b2548085e8", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -52,7 +52,7 @@ pub enum MethodError {\n \n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n-#[derive(Copy, PartialOrd, Ord, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]\n pub enum CandidateSource {\n     ImplSource(ast::DefId),\n     TraitSource(/* trait id */ ast::DefId),"}, {"sha": "be3fcae9a15176a89433bdd0db22604eede0ff1f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -109,7 +109,7 @@ pub enum PickAdjustment {\n     AutoRef(ast::Mutability, Box<PickAdjustment>),\n }\n \n-#[derive(PartialEq, Eq, Copy)]\n+#[derive(PartialEq, Eq, Copy, Clone)]\n pub enum Mode {\n     // An expression of the form `receiver.method_name(...)`.\n     // Autoderefs are performed on `receiver`, lookup is done based on the"}, {"sha": "c5ff8a14bc1cf33be1a294297b2fc5cbddc8b800", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -266,7 +266,7 @@ fn type_derefs_to_local<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }).2.is_some()\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TraitInfo {\n     pub def_id: ast::DefId,\n }"}, {"sha": "f974c8df55535de26b0fbdbd4da6bd367bc37cde", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -204,7 +204,7 @@ struct CastCheck<'tcx> {\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n@@ -1951,14 +1951,14 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference\n }\n \n /// Whether `autoderef` requires types to resolve.\n-#[derive(Copy, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum UnresolvedTypeAction {\n     /// Produce an error and return `ty_err` whenever a type cannot\n     /// be resolved (i.e. it is `ty_infer`)."}, {"sha": "37f43252483aae2fe2ffbad0d43f2f045613ade1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -350,7 +350,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Resolution reason.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum ResolveReason {\n     ResolvingExpr(Span),\n     ResolvingLocal(Span),"}, {"sha": "8f1b8bf109215d6caa2825ce2dc7eac907ef89ed", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -135,7 +135,7 @@ struct ItemCtxt<'a,'tcx:'a> {\n     param_bounds: &'a (GetTypeParameterBounds<'tcx>+'a),\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n enum AstConvRequest {\n     GetItemTypeScheme(ast::DefId),\n     GetTraitDef(ast::DefId),"}, {"sha": "c908e21626e56eaa33c616f1ed044210a3ebdc3d", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -40,7 +40,7 @@ pub trait RegionScope {\n \n // A scope in which all regions must be explicitly named. This is used\n // for types that appear in structs and so on.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {"}, {"sha": "b83d8fc6af7fafe60871137dc864d67a66b91e7d", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9530c01a71954a5497cbb5f97deb9ce2bdf794a/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "patch": "@@ -295,10 +295,10 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct InferredIndex(usize);\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n@@ -336,7 +336,7 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[derive(Copy, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam,\n@@ -560,7 +560,7 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n \n /// Declares that the variable `decl_id` appears in a location with\n /// variance `variance`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Constraint<'a> {\n     inferred: InferredIndex,\n     variance: &'a VarianceTerm<'a>,"}]}