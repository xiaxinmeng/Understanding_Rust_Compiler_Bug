{"sha": "ec5603bf13ccb95c311fe5ca193a32efe07147a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTYwM2JmMTNjY2I5NWMzMTFmZTVjYTE5M2EzMmVmZTA3MTQ3YTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-04T23:20:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "librustpkg: Make `io::ignore_io_error()` use RAII; remove a few more\ncells.", "tree": {"sha": "6cf2f33e901d673ba63fa781ddb5167beaae42f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf2f33e901d673ba63fa781ddb5167beaae42f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec5603bf13ccb95c311fe5ca193a32efe07147a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5603bf13ccb95c311fe5ca193a32efe07147a2", "html_url": "https://github.com/rust-lang/rust/commit/ec5603bf13ccb95c311fe5ca193a32efe07147a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec5603bf13ccb95c311fe5ca193a32efe07147a2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3bec91d77150e434ac1480fbb3935213e33dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bec91d77150e434ac1480fbb3935213e33dca", "html_url": "https://github.com/rust-lang/rust/commit/ab3bec91d77150e434ac1480fbb3935213e33dca"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "48c25a53682098fbb8cf9a8197ceb9a67a83f496", "filename": "src/librustpkg/installed_packages.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -19,7 +19,10 @@ use std::io::fs;\n pub fn list_installed_packages(f: |&PkgId| -> bool) -> bool  {\n     let workspaces = rust_path();\n     for p in workspaces.iter() {\n-        let binfiles = io::ignore_io_error(|| fs::readdir(&p.join(\"bin\")));\n+        let binfiles = {\n+            let _guard = io::ignore_io_error();\n+            fs::readdir(&p.join(\"bin\"))\n+        };\n         for exec in binfiles.iter() {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n             match exec.filestem_str() {\n@@ -31,7 +34,10 @@ pub fn list_installed_packages(f: |&PkgId| -> bool) -> bool  {\n                 }\n             }\n         }\n-        let libfiles = io::ignore_io_error(|| fs::readdir(&p.join(\"lib\")));\n+        let libfiles = {\n+            let _guard = io::ignore_io_error();\n+            fs::readdir(&p.join(\"lib\"))\n+        };\n         for lib in libfiles.iter() {\n             debug!(\"Full name: {}\", lib.display());\n             match has_library(lib) {\n@@ -55,7 +61,10 @@ pub fn list_installed_packages(f: |&PkgId| -> bool) -> bool  {\n }\n \n pub fn has_library(p: &Path) -> Option<~str> {\n-    let files = io::ignore_io_error(|| fs::readdir(p));\n+    let files = {\n+        let _guard = io::ignore_io_error();\n+        fs::readdir(p)\n+    };\n     for path in files.iter() {\n         if path.extension_str() == Some(os::consts::DLL_EXTENSION) {\n             let stuff : &str = path.filestem_str().expect(\"has_library: weird path\");"}, {"sha": "7a17d3626256c52a42a0be2d6c58ec42d775b4c6", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -217,7 +217,10 @@ pub fn system_library(sysroot: &Path, lib_name: &str) -> Option<Path> {\n \n fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Option<Path> {\n     debug!(\"Listing directory {}\", dir_to_search.display());\n-    let dir_contents = io::ignore_io_error(|| fs::readdir(dir_to_search));\n+    let dir_contents = {\n+        let _guard = io::ignore_io_error();\n+        fs::readdir(dir_to_search)\n+    };\n     debug!(\"dir has {:?} entries\", dir_contents.len());\n \n     let lib_prefix = format!(\"{}{}\", os::consts::DLL_PREFIX, short_name);"}, {"sha": "c5d6ce2f3dfd2cb55a98a8c0047b634765d21067", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -162,7 +162,7 @@ impl<T, U> Condition<T, U> {\n ///\n /// Normally this object is not dealt with directly, but rather it's directly\n /// used after being returned from `trap`\n-struct Trap<'self, T, U> {\n+pub struct Trap<'self, T, U> {\n     priv cond: &'self Condition<T, U>,\n     priv handler: @Handler<T, U>\n }\n@@ -187,10 +187,24 @@ impl<'self, T, U> Trap<'self, T, U> {\n         local_data::set(self.cond.key, self.handler);\n         inner()\n     }\n+\n+    /// Returns a guard that will automatically reset the condition upon\n+    /// exit of the scope. This is useful if you want to use conditions with\n+    /// an RAII pattern.\n+    pub fn guard(&self) -> Guard<'self,T,U> {\n+        let guard = Guard {\n+            cond: self.cond\n+        };\n+        debug!(\"Guard: pushing handler to TLS\");\n+        local_data::set(self.cond.key, self.handler);\n+        guard\n+    }\n }\n \n-#[doc(hidden)]\n-struct Guard<'self, T, U> {\n+/// A guard that will automatically reset the condition handler upon exit of\n+/// the scope. This is useful if you want to use conditions with an RAII\n+/// pattern.\n+pub struct Guard<'self, T, U> {\n     priv cond: &'self Condition<T, U>\n }\n "}, {"sha": "d5e216e24267652394ef658fdec515566b948890", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -241,6 +241,7 @@ Out of scope\n #[allow(missing_doc)];\n \n use cast;\n+use condition::Guard;\n use container::Container;\n use int;\n use iter::Iterator;\n@@ -394,12 +395,12 @@ condition! {\n \n /// Helper for wrapper calls where you want to\n /// ignore any io_errors that might be raised\n-pub fn ignore_io_error<T>(cb: || -> T) -> T {\n+pub fn ignore_io_error() -> Guard<'static,IoError,()> {\n     io_error::cond.trap(|_| {\n         // just swallow the error.. downstream users\n         // who can make a decision based on a None result\n         // won't care\n-    }).inside(|| cb())\n+    }).guard()\n }\n \n /// Helper for catching an I/O error and wrapping it in a Result object. The"}, {"sha": "bcd353bab7af189235616c6ffd8c3f42cd96cb79", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -1477,7 +1477,9 @@ mod tests {\n             assert!(*chunk.data == 0xbe);\n             close(fd);\n         }\n-        io::ignore_io_error(|| fs::unlink(&path));\n+\n+        let _guard = io::ignore_io_error();\n+        fs::unlink(&path);\n     }\n \n     // More recursive_mkdir tests are in extra::tempfile"}, {"sha": "f4c6cdbd934ab0bea48bdb49e8b65139b289a54d", "filename": "src/libstd/run.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -12,7 +12,6 @@\n \n #[allow(missing_doc)];\n \n-use cell::Cell;\n use comm::{stream, SharedChan};\n use io::Reader;\n use io::process::ProcessExit;\n@@ -212,8 +211,8 @@ impl Process {\n      */\n     pub fn finish_with_output(&mut self) -> ProcessOutput {\n         self.close_input();\n-        let output = Cell::new(self.inner.io[1].take());\n-        let error = Cell::new(self.inner.io[2].take());\n+        let output = self.inner.io[1].take();\n+        let error = self.inner.io[2].take();\n \n         // Spawn two entire schedulers to read both stdout and sterr\n         // in parallel so we don't deadlock while blocking on one\n@@ -224,20 +223,20 @@ impl Process {\n         let ch_clone = ch.clone();\n \n         do spawn {\n-            io::ignore_io_error(|| {\n-                match error.take() {\n-                    Some(ref mut e) => ch.send((2, e.read_to_end())),\n-                    None => ch.send((2, ~[]))\n-                }\n-            })\n+            let _guard = io::ignore_io_error();\n+            let mut error = error;\n+            match error {\n+                Some(ref mut e) => ch.send((2, e.read_to_end())),\n+                None => ch.send((2, ~[]))\n+            }\n         }\n         do spawn {\n-            io::ignore_io_error(|| {\n-                match output.take() {\n-                    Some(ref mut e) => ch_clone.send((1, e.read_to_end())),\n-                    None => ch_clone.send((1, ~[]))\n-                }\n-            })\n+            let _guard = io::ignore_io_error();\n+            let mut output = output;\n+            match output {\n+                Some(ref mut e) => ch_clone.send((1, e.read_to_end())),\n+                None => ch_clone.send((1, ~[]))\n+            }\n         }\n \n         let status = self.finish();"}, {"sha": "ac2b1958f93984dd49275b11aba345707878bad7", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5603bf13ccb95c311fe5ca193a32efe07147a2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=ec5603bf13ccb95c311fe5ca193a32efe07147a2", "patch": "@@ -189,8 +189,12 @@ fn main() {\n    let mut proc_mode = false;\n \n    loop {\n-       let line = match io::ignore_io_error(|| rdr.read_line()) {\n-           Some(ln) => ln, None => break,\n+       let line = {\n+           let _guard = io::ignore_io_error();\n+           match rdr.read_line() {\n+               Some(ln) => ln,\n+               None => break,\n+           }\n        };\n        let line = line.trim().to_owned();\n "}]}