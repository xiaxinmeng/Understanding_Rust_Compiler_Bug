{"sha": "2f8dd64830d9892a94d437a65e4e0e221b225790", "node_id": "C_kwDOAAsO6NoAKDJmOGRkNjQ4MzBkOTg5MmE5NGQ0MzdhNjVlNGUwZTIyMWIyMjU3OTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-14T09:59:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-14T09:59:27Z"}, "message": "Replace HasSource usages with Semantics equivalent", "tree": {"sha": "cdf1cd8a44bae9ea1bce212b4ef98a1b1200db83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf1cd8a44bae9ea1bce212b4ef98a1b1200db83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f8dd64830d9892a94d437a65e4e0e221b225790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8dd64830d9892a94d437a65e4e0e221b225790", "html_url": "https://github.com/rust-lang/rust/commit/2f8dd64830d9892a94d437a65e4e0e221b225790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f8dd64830d9892a94d437a65e4e0e221b225790/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3148cb396bdcdb9802c56c95946093408bf8fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3148cb396bdcdb9802c56c95946093408bf8fc2", "html_url": "https://github.com/rust-lang/rust/commit/c3148cb396bdcdb9802c56c95946093408bf8fc2"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "8669b00ca1ac31ffe6e2240512837ef639a68c4d", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=2f8dd64830d9892a94d437a65e4e0e221b225790", "patch": "@@ -16,6 +16,9 @@ use crate::{\n \n pub trait HasSource {\n     type Ast;\n+    /// Fetches the definition's source node.\n+    /// Using [`crate::Semantics::source`] is preferred when working with [`crate::Semantics`],\n+    /// as that caches the parsed file in the semantics' cache.\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>>;\n }\n "}, {"sha": "f15a7c2a788eec4737f8e9a1cbae60d3298fa915", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=2f8dd64830d9892a94d437a65e4e0e221b225790", "patch": "@@ -443,17 +443,15 @@ impl<'db> SemanticsImpl<'db> {\n     fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n         let sa = self.analyze_no_infer(macro_call.syntax());\n         let file_id = sa.expand(self.db, InFile::new(sa.file_id, macro_call))?;\n-        let node = self.db.parse_or_expand(file_id)?;\n-        self.cache(node.clone(), file_id);\n+        let node = self.parse_or_expand(file_id)?;\n         Some(node)\n     }\n \n     fn expand_attr_macro(&self, item: &ast::Item) -> Option<SyntaxNode> {\n         let src = self.find_file(item.syntax()).with_value(item.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(src))?;\n         let file_id = macro_call_id.as_file();\n-        let node = self.db.parse_or_expand(file_id)?;\n-        self.cache(node.clone(), file_id);\n+        let node = self.parse_or_expand(file_id)?;\n         Some(node)\n     }\n \n@@ -750,9 +748,8 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn diagnostics_display_range(&self, src: InFile<SyntaxNodePtr>) -> FileRange {\n-        let root = self.db.parse_or_expand(src.file_id).unwrap();\n+        let root = self.parse_or_expand(src.file_id).unwrap();\n         let node = src.value.to_node(&root);\n-        self.cache(root, src.file_id);\n         src.with_value(&node).original_file_range(self.db.upcast())\n     }\n "}, {"sha": "b214c5c154a3221ed5e68d59b634725d1c993a80", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=2f8dd64830d9892a94d437a65e4e0e221b225790", "patch": "@@ -31,7 +31,7 @@\n //! }\n //! ```\n \n-use hir::{self, HasAttrs, HasSource};\n+use hir::{self, HasAttrs};\n use ide_db::{path_transform::PathTransform, traits::get_missing_assoc_items, SymbolKind};\n use syntax::{\n     ast::{self, edit_in_place::AttrsOwnerEdit},\n@@ -151,7 +151,7 @@ fn add_function_impl(\n \n     let range = replacement_range(ctx, fn_def_node);\n \n-    if let Some(source) = func.source(ctx.db) {\n+    if let Some(source) = ctx.sema.source(func) {\n         let assoc_item = ast::AssocItem::Fn(source.value);\n         if let Some(transformed_item) = get_transformed_assoc_item(ctx, assoc_item, impl_def) {\n             let transformed_fn = match transformed_item {\n@@ -189,7 +189,7 @@ fn get_transformed_assoc_item(\n         target_scope,\n         source_scope,\n         trait_,\n-        impl_def.source(ctx.db)?.value,\n+        ctx.sema.source(impl_def)?.value,\n     );\n \n     transform.apply(assoc_item.syntax());\n@@ -227,7 +227,7 @@ fn add_const_impl(\n     let const_name = const_.name(ctx.db).map(|n| n.to_smol_str());\n \n     if let Some(const_name) = const_name {\n-        if let Some(source) = const_.source(ctx.db) {\n+        if let Some(source) = ctx.sema.source(const_) {\n             let assoc_item = ast::AssocItem::Const(source.value);\n             if let Some(transformed_item) = get_transformed_assoc_item(ctx, assoc_item, impl_def) {\n                 let transformed_const = match transformed_item {"}, {"sha": "8d6a6349534d731e082e560a11e37d1364a8e5d7", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8dd64830d9892a94d437a65e4e0e221b225790/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=2f8dd64830d9892a94d437a65e4e0e221b225790", "patch": "@@ -1,8 +1,8 @@\n //! Renderer for macro invocations.\n \n use either::Either;\n-use hir::{db::HirDatabase, Documentation, HasSource};\n-use ide_db::SymbolKind;\n+use hir::{Documentation, HasSource, InFile, Semantics};\n+use ide_db::{RootDatabase, SymbolKind};\n use syntax::{\n     display::{fn_as_proc_macro_label, macro_label},\n     SmolStr,\n@@ -30,8 +30,6 @@ fn render(\n     macro_: hir::MacroDef,\n     import_to_add: Option<ImportEdit>,\n ) -> CompletionItem {\n-    let db = completion.db;\n-\n     let source_range = if completion.is_immediately_after_macro_bang() {\n         cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n         completion.token.parent().map_or_else(|| ctx.source_range(), |it| it.text_range())\n@@ -54,7 +52,7 @@ fn render(\n         label(&ctx, needs_bang, bra, ket, &name),\n     );\n     item.set_deprecated(ctx.is_deprecated(macro_))\n-        .set_detail(detail(db, macro_))\n+        .set_detail(detail(&completion.sema, macro_))\n         .set_documentation(docs);\n \n     if let Some(import_to_add) = import_to_add {\n@@ -104,9 +102,11 @@ fn banged_name(name: &str) -> SmolStr {\n     SmolStr::from_iter([name, \"!\"])\n }\n \n-fn detail(db: &dyn HirDatabase, macro_: hir::MacroDef) -> Option<String> {\n+fn detail(sema: &Semantics<RootDatabase>, macro_: hir::MacroDef) -> Option<String> {\n     // FIXME: This is parsing the file!\n-    let detail = match macro_.source(db)?.value {\n+    let InFile { file_id, value } = macro_.source(sema.db)?;\n+    let _ = sema.parse_or_expand(file_id);\n+    let detail = match value {\n         Either::Left(node) => macro_label(&node),\n         Either::Right(node) => fn_as_proc_macro_label(&node),\n     };"}]}