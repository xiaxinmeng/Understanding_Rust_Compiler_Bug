{"sha": "705afcd8445819c3f0493aa2befbe4788d9bb5ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNWFmY2Q4NDQ1ODE5YzNmMDQ5M2FhMmJlZmJlNDc4OGQ5YmI1Y2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-23T00:26:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-23T00:26:36Z"}, "message": "core: settle on the trap/in condition convention for now. Implement proper re-raising.", "tree": {"sha": "5f49acfa96e6cc424d1d4724973fa142c2fb0a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f49acfa96e6cc424d1d4724973fa142c2fb0a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705afcd8445819c3f0493aa2befbe4788d9bb5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705afcd8445819c3f0493aa2befbe4788d9bb5ce", "html_url": "https://github.com/rust-lang/rust/commit/705afcd8445819c3f0493aa2befbe4788d9bb5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705afcd8445819c3f0493aa2befbe4788d9bb5ce/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee5fff4f16cfc3390bd69abbb46b0a68521667c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee5fff4f16cfc3390bd69abbb46b0a68521667c", "html_url": "https://github.com/rust-lang/rust/commit/9ee5fff4f16cfc3390bd69abbb46b0a68521667c"}], "stats": {"total": 357, "additions": 119, "deletions": 238}, "files": [{"sha": "e50ebfc439b835e2d31ebc9f1ac129e462b815ca", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 119, "deletions": 238, "changes": 357, "blob_url": "https://github.com/rust-lang/rust/blob/705afcd8445819c3f0493aa2befbe4788d9bb5ce/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705afcd8445819c3f0493aa2befbe4788d9bb5ce/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=705afcd8445819c3f0493aa2befbe4788d9bb5ce", "patch": "@@ -1,300 +1,181 @@\n // helper for transmutation, shown below.\n type RustClosure = (int,int);\n-\n-struct Condition<T, U:Copy> {\n-    key: task::local_data::LocalDataKey<Handler<T,U>>\n-}\n-\n struct Handler<T, U:Copy> {\n-    handle: RustClosure\n-}\n-\n-\n-struct ProtectBlock<T, U:Copy> {\n-    cond: &Condition<T, U>,\n-    inner: RustClosure\n-}\n-\n-struct Guard<T, U:Copy> {\n-    cond: &Condition<T,U>,\n+    handle: RustClosure,\n     prev: Option<@Handler<T, U>>,\n-    drop {\n-        match self.prev {\n-            None => (),\n-            Some(p) =>\n-            unsafe {\n-                debug!(\"Guard: popping handler from TLS\");\n-                task::local_data::local_data_set(self.cond.key, p)\n-            }\n-        }\n-    }\n-}\n-\n-struct HandleBlock<T, U:Copy> {\n-    pb: &ProtectBlock<T,U>,\n-    prev: Option<@Handler<T,U>>,\n-    handler: @Handler<T,U>,\n-    drop {\n-        unsafe {\n-            debug!(\"HandleBlock: pushing handler to TLS\");\n-            let _g = Guard { cond: self.pb.cond,\n-                             prev: self.prev };\n-            task::local_data::local_data_set(self.pb.cond.key,\n-                                             self.handler);\n-            // transmutation to avoid copying non-copyable, should\n-            // be fixable by tracking closure pointees in regionck.\n-            let f : &fn() = ::cast::transmute(self.pb.inner);\n-            debug!(\"HandleBlock: invoking protected code\");\n-            f();\n-            debug!(\"HandleBlock: returned from protected code\");\n-        }\n-    }\n-}\n-\n-struct Trap<T, U:Copy> {\n-    cond: &Condition<T,U>,\n-    handler: @Handler<T, U>\n }\n \n-impl<T, U: Copy> ProtectBlock<T,U> {\n-    fn handle(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self<T,U> {\n-        unsafe {\n-            debug!(\"ProtectBlock.handle: setting up handler block\");\n-            let p : *RustClosure = ::cast::transmute(&h);\n-            let prev = task::local_data::local_data_get(self.cond.key);\n-            HandleBlock { pb: self,\n-                          prev: prev,\n-                          handler: @Handler{handle: *p} }\n-        }\n-    }\n-}\n-\n-\n-\n-impl<T, U: Copy> Trap<T,U> {\n-    fn in<V: Copy>(&self, inner: &self/fn() -> V) -> V {\n-        unsafe {\n-            let prev = task::local_data::local_data_get(self.cond.key);\n-            let _g = Guard { cond: self.cond,\n-                             prev: prev };\n-            debug!(\"Trap: pushing handler to TLS\");\n-            task::local_data::local_data_set(self.cond.key, self.handler);\n-            inner()\n-        }\n-    }\n+struct Condition<T, U:Copy> {\n+    key: task::local_data::LocalDataKey<Handler<T,U>>\n }\n \n impl<T, U: Copy>  Condition<T,U> {\n \n-    fn guard(&self, h: &self/fn(&T) ->U) -> Guard/&self<T,U> {\n-        unsafe {\n-            let prev = task::local_data::local_data_get(self.key);\n-            let g = Guard { cond: self, prev: prev };\n-            debug!(\"Guard: pushing handler to TLS\");\n-            let p : *RustClosure = ::cast::transmute(&h);\n-            let h = @Handler{handle: *p};\n-            task::local_data::local_data_set(self.key, h);\n-            move g\n-        }\n-    }\n-\n     fn trap(&self, h: &self/fn(&T) ->U) -> Trap/&self<T,U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n-            let h = @Handler{handle: *p};\n+            let prev = task::local_data::local_data_get(self.key);\n+            let h = @Handler{handle: *p, prev: prev};\n             move Trap { cond: self, handler: h }\n         }\n     }\n \n-    fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self<T,U> {\n-        unsafe {\n-            // transmutation to avoid copying non-copyable, should\n-            // be fixable by tracking closure pointees in regionck.\n-            debug!(\"Condition.protect: setting up protected block\");\n-            let p : *RustClosure = ::cast::transmute(&inner);\n-            ProtectBlock { cond: self,\n-                           inner: *p }\n-        }\n-    }\n-\n     fn raise(t:&T) -> U {\n         unsafe {\n-            match task::local_data::local_data_get(self.key) {\n+            match task::local_data::local_data_pop(self.key) {\n                 None => {\n                     debug!(\"Condition.raise: found no handler\");\n                     fail\n                 }\n \n                 Some(handler) => {\n                     debug!(\"Condition.raise: found handler\");\n-                    let f : &fn(&T) -> U = ::cast::transmute(handler.handle);\n-                    f(t)\n+                    match handler.prev {\n+                        None => (),\n+                        Some(hp) =>\n+                        task::local_data::local_data_set(self.key, hp)\n+                    }\n+                    let handle : &fn(&T) -> U =\n+                        ::cast::transmute(handler.handle);\n+                    let u = handle(t);\n+                    task::local_data::local_data_set(self.key,\n+                                                     handler);\n+                    move u\n                 }\n             }\n         }\n     }\n }\n \n \n-#[cfg(test)]\n-fn sadness_key(_x: @Handler<int,int>) { }\n \n-#[cfg(test)]\n-fn trouble(i: int) {\n-    // Condition should work as a const, just limitations in consts.\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-    debug!(\"trouble: raising conition\");\n-    let j = sadness_condition.raise(&i);\n-    debug!(\"trouble: handler recovered with %d\", j);\n+struct Trap<T, U:Copy> {\n+    cond: &Condition<T,U>,\n+    handler: @Handler<T, U>\n }\n \n-#[test]\n-fn test1() {\n-\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-\n-    let mut i = 10;\n-\n-    let b = do sadness_condition.protect {\n-        debug!(\"test1: in protected block\");\n-        trouble(1);\n-        trouble(2);\n-        trouble(3);\n-    };\n-\n-    do b.handle |j| {\n-        debug!(\"test1: in handler\");\n-        i += *j;\n-        i\n-    };\n-\n-    assert i == 16;\n-}\n-#[cfg(test)]\n-fn nested_test_inner() {\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-\n-    let mut inner_trapped = false;\n-\n-    let b = do sadness_condition.protect {\n-        debug!(\"nested_test_inner: in protected block\");\n-        trouble(1);\n-    };\n-\n-    do b.handle |_j| {\n-        debug!(\"nested_test_inner: in handler\");\n-        inner_trapped = true;\n-        0\n-    };\n-\n-    assert inner_trapped;\n+impl<T, U: Copy> Trap<T,U> {\n+    fn in<V: Copy>(&self, inner: &self/fn() -> V) -> V {\n+        unsafe {\n+            let _g = Guard { cond: self.cond };\n+            debug!(\"Trap: pushing handler to TLS\");\n+            task::local_data::local_data_set(self.cond.key, self.handler);\n+            inner()\n+        }\n+    }\n }\n \n-#[test]\n-fn nested_test_outer() {\n-\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-\n-    let mut outer_trapped = false;\n-\n-    let b = do sadness_condition.protect {\n-        debug!(\"nested_test_outer: in protected block\");\n-        nested_test_inner();\n-        trouble(1);\n-    };\n-\n-    do b.handle |_j| {\n-        debug!(\"nested_test_outer: in handler\");\n-        outer_trapped = true;\n-        0\n-    };\n-\n-    assert outer_trapped;\n+struct Guard<T, U:Copy> {\n+    cond: &Condition<T,U>,\n+    drop {\n+        unsafe {\n+            debug!(\"Guard: popping handler from TLS\");\n+            let curr = task::local_data::local_data_pop(self.cond.key);\n+            match curr {\n+                None => (),\n+                Some(h) =>\n+                match h.prev {\n+                    None => (),\n+                    Some(hp) => {\n+                        task::local_data::local_data_set(self.cond.key, hp)\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n \n #[cfg(test)]\n-fn nested_guard_test_inner() {\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-\n-    let mut inner_trapped = false;\n+mod test {\n+\n+    fn sadness_key(_x: @Handler<int,int>) { }\n+    fn trouble(i: int) {\n+        // Condition should work as a const, just limitations in consts.\n+        let sadness_condition : Condition<int,int> =\n+            Condition { key: sadness_key };\n+        debug!(\"trouble: raising conition\");\n+        let j = sadness_condition.raise(&i);\n+        debug!(\"trouble: handler recovered with %d\", j);\n+    }\n \n-    let _g = do sadness_condition.guard |_j| {\n-        debug!(\"nested_guard_test_inner: in handler\");\n-        inner_trapped = true;\n-        0\n-    };\n+    fn nested_trap_test_inner() {\n+        let sadness_condition : Condition<int,int> =\n+            Condition { key: sadness_key };\n \n-    debug!(\"nested_guard_test_inner: in protected block\");\n-    trouble(1);\n+        let mut inner_trapped = false;\n \n-    assert inner_trapped;\n-}\n+        do sadness_condition.trap(|_j| {\n+            debug!(\"nested_trap_test_inner: in handler\");\n+            inner_trapped = true;\n+            0\n+        }).in {\n+            debug!(\"nested_trap_test_inner: in protected block\");\n+            trouble(1);\n+        }\n \n-#[test]\n-fn nested_guard_test_outer() {\n+        assert inner_trapped;\n+    }\n \n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n+    #[test]\n+    fn nested_trap_test_outer() {\n \n-    let mut outer_trapped = false;\n+        let sadness_condition : Condition<int,int> =\n+            Condition { key: sadness_key };\n \n-    let _g = do sadness_condition.guard |_j| {\n-        debug!(\"nested_guard_test_outer: in handler\");\n-        outer_trapped = true;\n-        0\n-    };\n+        let mut outer_trapped = false;\n \n-    debug!(\"nested_guard_test_outer: in protected block\");\n-    nested_guard_test_inner();\n-    trouble(1);\n+        do sadness_condition.trap(|_j| {\n+            debug!(\"nested_trap_test_outer: in handler\");\n+            outer_trapped = true; 0\n+        }).in {\n+            debug!(\"nested_guard_test_outer: in protected block\");\n+            nested_trap_test_inner();\n+            trouble(1);\n+        }\n \n-    assert outer_trapped;\n-}\n \n+        assert outer_trapped;\n+    }\n \n+    fn nested_reraise_trap_test_inner() {\n+        let sadness_condition : Condition<int,int> =\n+            Condition { key: sadness_key };\n+\n+        let mut inner_trapped = false;\n+\n+        do sadness_condition.trap(|_j| {\n+            debug!(\"nested_reraise_trap_test_inner: in handler\");\n+            inner_trapped = true;\n+            let i = 10;\n+            debug!(\"nested_reraise_trap_test_inner: handler re-raising\");\n+            sadness_condition.raise(&i)\n+        }).in {\n+            debug!(\"nested_reraise_trap_test_inner: in protected block\");\n+            trouble(1);\n+        }\n \n-#[cfg(test)]\n-fn nested_trap_test_inner() {\n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n-\n-    let mut inner_trapped = false;\n-\n-    do sadness_condition.trap(|_j| {\n-        debug!(\"nested_trap_test_inner: in handler\");\n-        inner_trapped = true;\n-        0\n-    }).in {\n-        debug!(\"nested_trap_test_inner: in protected block\");\n-        trouble(1);\n+        assert inner_trapped;\n     }\n \n-    assert inner_trapped;\n-}\n+    #[test]\n+    fn nested_reraise_trap_test_outer() {\n+\n+        let sadness_condition : Condition<int,int> =\n+            Condition { key: sadness_key };\n \n-#[test]\n-fn nested_trap_test_outer() {\n+        let mut outer_trapped = false;\n \n-    let sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n+        do sadness_condition.trap(|_j| {\n+            debug!(\"nested_reraise_trap_test_outer: in handler\");\n+            outer_trapped = true; 0\n+        }).in {\n+            debug!(\"nested_reraise_trap_test_outer: in protected block\");\n+            nested_reraise_trap_test_inner();\n+        }\n \n-    let mut outer_trapped = false;\n \n-    do sadness_condition.trap(|_j| {\n-        debug!(\"nested_trap_test_outer: in handler\");\n-        outer_trapped = true; 0\n-    }).in {\n-        debug!(\"nested_guard_test_outer: in protected block\");\n-        nested_trap_test_inner();\n-        trouble(1);\n+        assert outer_trapped;\n     }\n \n-\n-    assert outer_trapped;\n-}\n+}\n\\ No newline at end of file"}]}