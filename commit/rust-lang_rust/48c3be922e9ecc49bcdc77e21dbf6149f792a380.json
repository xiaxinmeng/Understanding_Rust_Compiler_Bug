{"sha": "48c3be922e9ecc49bcdc77e21dbf6149f792a380", "node_id": "C_kwDOAAsO6NoAKDQ4YzNiZTkyMmU5ZWNjNDliY2RjNzdlMjFkYmY2MTQ5Zjc5MmEzODA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-18T10:47:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-18T10:47:04Z"}, "message": "Merge #10574\n\n10574: fix: Fix PartialOrd codegen r=lnicola a=yoshuawuyts\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/10571#issuecomment-945516462. Thanks!\r\n\r\nr? `@lnicola` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "a30b0f038a91e5264900187063540dfff6fb5f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30b0f038a91e5264900187063540dfff6fb5f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c3be922e9ecc49bcdc77e21dbf6149f792a380", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbVCoCRBK7hj4Ov3rIwAA0aMIAClf2QyQF/bPXsf13l3HtfTC\nZYBBNWqV0I3EgneBJfsLJYd8Tm+VnpV2aTCRAUALda/5MeuKjMcU1U5WCimuqGki\nE7rB5gDscX3jFYz3l63MulT4cdIonShusnJrTiodSL3K7oSeliXwWPObBY+dKg4b\ne/KvTl4TGrzI6stu8MqWWvB8CMccxbk/jiYBuGkrxCEBA+g9wHekQDOSPMy2ktfy\n31xeCirqDZM29LGVuQec5DQ9SBCKnRKo4MHd/TJUHyxXE1bF2J03llwtYJ1VU9BU\nhiVjyT2qtI0o7qppw0CY6KuazSQJBa5dq13WfrPj2klcCTcWNhrlKZ7qXHjBqeA=\n=BJap\n-----END PGP SIGNATURE-----\n", "payload": "tree a30b0f038a91e5264900187063540dfff6fb5f43\nparent 5ce9b046696846099de8f052818aae5c18d3cfe3\nparent a9ec345cf7e53eba7c28290ed02901647955c474\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634554024 +0000\ncommitter GitHub <noreply@github.com> 1634554024 +0000\n\nMerge #10574\n\n10574: fix: Fix PartialOrd codegen r=lnicola a=yoshuawuyts\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/10571#issuecomment-945516462. Thanks!\r\n\r\nr? `@lnicola` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c3be922e9ecc49bcdc77e21dbf6149f792a380", "html_url": "https://github.com/rust-lang/rust/commit/48c3be922e9ecc49bcdc77e21dbf6149f792a380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c3be922e9ecc49bcdc77e21dbf6149f792a380/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce9b046696846099de8f052818aae5c18d3cfe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9b046696846099de8f052818aae5c18d3cfe3", "html_url": "https://github.com/rust-lang/rust/commit/5ce9b046696846099de8f052818aae5c18d3cfe3"}, {"sha": "a9ec345cf7e53eba7c28290ed02901647955c474", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec345cf7e53eba7c28290ed02901647955c474", "html_url": "https://github.com/rust-lang/rust/commit/a9ec345cf7e53eba7c28290ed02901647955c474"}], "stats": {"total": 263, "additions": 10, "deletions": 253}, "files": [{"sha": "138c694d496b6cc14d19bdc3a893dd880d782f9e", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 116, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/48c3be922e9ecc49bcdc77e21dbf6149f792a380/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c3be922e9ecc49bcdc77e21dbf6149f792a380/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=48c3be922e9ecc49bcdc77e21dbf6149f792a380", "patch": "@@ -693,7 +693,7 @@ struct Foo {\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        self.bin.partial_cmp(other.bin)\n+        self.bin.partial_cmp(&other.bin)\n     }\n }\n \"#,\n@@ -722,7 +722,7 @@ struct Foo {\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.bin, self.bar, self.baz).partial_cmp((other.bin, other.bar, other.baz))\n+        (self.bin, self.bar, self.baz).partial_cmp(&(other.bin, other.bar, other.baz))\n     }\n }\n \"#,\n@@ -743,120 +743,7 @@ struct Foo(usize, usize, usize);\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.0, self.1, self.2).partial_cmp((other.0, other.1, other.2))\n-    }\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn add_custom_impl_partial_ord_enum() {\n-        check_assist(\n-            replace_derive_with_manual_impl,\n-            r#\"\n-//- minicore: ord\n-#[derive(Partial$0Ord)]\n-enum Foo {\n-    Bin,\n-    Bar,\n-    Baz,\n-}\n-\"#,\n-            r#\"\n-enum Foo {\n-    Bin,\n-    Bar,\n-    Baz,\n-}\n-\n-impl PartialOrd for Foo {\n-    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other))\n-    }\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn add_custom_impl_partial_ord_record_enum() {\n-        check_assist(\n-            replace_derive_with_manual_impl,\n-            r#\"\n-//- minicore: ord\n-#[derive(Partial$0Ord)]\n-enum Foo {\n-    Bar {\n-        bin: String,\n-    },\n-    Baz {\n-        qux: String,\n-        fez: String,\n-    },\n-    Qux {},\n-    Bin,\n-}\n-\"#,\n-            r#\"\n-enum Foo {\n-    Bar {\n-        bin: String,\n-    },\n-    Baz {\n-        qux: String,\n-        fez: String,\n-    },\n-    Qux {},\n-    Bin,\n-}\n-\n-impl PartialOrd for Foo {\n-    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        match (self, other) {\n-            (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin.partial_cmp(r_bin),\n-            (Self::Baz { qux: l_qux, fez: l_fez }, Self::Baz { qux: r_qux, fez: r_fez }) => {\n-                (l_qux, l_fez).partial_cmp((r_qux, r_fez))\n-            }\n-            _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n-        }\n-    }\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn add_custom_impl_partial_ord_tuple_enum() {\n-        check_assist(\n-            replace_derive_with_manual_impl,\n-            r#\"\n-//- minicore: ord\n-#[derive(Partial$0Ord)]\n-enum Foo {\n-    Bar(String),\n-    Baz(String, String),\n-    Qux(),\n-    Bin,\n-}\n-\"#,\n-            r#\"\n-enum Foo {\n-    Bar(String),\n-    Baz(String, String),\n-    Qux(),\n-    Bin,\n-}\n-\n-impl PartialOrd for Foo {\n-    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        match (self, other) {\n-            (Self::Bar(l0), Self::Bar(r0)) => l0.partial_cmp(r0),\n-            (Self::Baz(l0, l1), Self::Baz(r0, r1)) => {\n-                (l0, l1).partial_cmp((r0, r1))\n-            }\n-            _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n-        }\n+        (self.0, self.1, self.2).partial_cmp(&(other.0, other.1, other.2))\n     }\n }\n \"#,"}, {"sha": "40c3734f9dd54eab8baff4f6bd81441e31793812", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 7, "deletions": 137, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/48c3be922e9ecc49bcdc77e21dbf6149f792a380/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c3be922e9ecc49bcdc77e21dbf6149f792a380/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=48c3be922e9ecc49bcdc77e21dbf6149f792a380", "patch": "@@ -574,154 +574,24 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_partial_cmp_call(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n-        let method = make::name_ref(\"partial_cmp\");\n-        make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n-    }\n-    fn gen_partial_cmp_call2(mut lhs: Vec<ast::Expr>, mut rhs: Vec<ast::Expr>) -> ast::Expr {\n+    fn gen_partial_cmp_call(mut lhs: Vec<ast::Expr>, mut rhs: Vec<ast::Expr>) -> ast::Expr {\n         let (lhs, rhs) = match (lhs.len(), rhs.len()) {\n             (1, 1) => (lhs.pop().unwrap(), rhs.pop().unwrap()),\n             _ => (make::expr_tuple(lhs.into_iter()), make::expr_tuple(rhs.into_iter())),\n         };\n+        let rhs = make::expr_ref(rhs, false);\n         let method = make::name_ref(\"partial_cmp\");\n         make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n     }\n \n-    fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n-        let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n-        let name_ref = make::name_ref(field_name);\n-        make::record_pat_field(name_ref, pat.into())\n-    }\n-\n-    fn gen_record_pat(record_name: ast::Path, fields: Vec<ast::RecordPatField>) -> ast::RecordPat {\n-        let list = make::record_pat_field_list(fields);\n-        make::record_pat_with_fields(record_name, list)\n-    }\n-\n-    fn gen_variant_path(variant: &ast::Variant) -> Option<ast::Path> {\n-        make::ext::path_from_idents([\"Self\", &variant.name()?.to_string()])\n-    }\n-\n-    fn gen_tuple_field(field_name: &String) -> ast::Pat {\n-        ast::Pat::IdentPat(make::ident_pat(false, false, make::name(field_name)))\n-    }\n-\n     // FIXME: return `None` if the trait carries a generic type; we can only\n     // generate this code `Self` for the time being.\n \n     let body = match adt {\n-        // `Hash` cannot be derived for unions, so no default impl can be provided.\n+        // `PartialOrd` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => return None,\n-\n-        ast::Adt::Enum(enum_) => {\n-            // => std::mem::discriminant(self) == std::mem::discriminant(other)\n-            let lhs_name = make::expr_path(make::ext::ident_path(\"self\"));\n-            let lhs = make::expr_call(make_discriminant()?, make::arg_list(Some(lhs_name.clone())));\n-            let rhs_name = make::expr_path(make::ext::ident_path(\"other\"));\n-            let rhs = make::expr_call(make_discriminant()?, make::arg_list(Some(rhs_name.clone())));\n-            let ord_check = gen_partial_cmp_call(lhs, rhs);\n-\n-            let mut case_count = 0;\n-            let mut arms = vec![];\n-            for variant in enum_.variant_list()?.variants() {\n-                case_count += 1;\n-                match variant.field_list() {\n-                    // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n-                    Some(ast::FieldList::RecordFieldList(list)) => {\n-                        let mut l_pat_fields = vec![];\n-                        let mut r_pat_fields = vec![];\n-                        let mut l_fields = vec![];\n-                        let mut r_fields = vec![];\n-\n-                        for field in list.fields() {\n-                            let field_name = field.name()?.to_string();\n-\n-                            let l_name = &format!(\"l_{}\", field_name);\n-                            l_pat_fields.push(gen_record_pat_field(&field_name, &l_name));\n-\n-                            let r_name = &format!(\"r_{}\", field_name);\n-                            r_pat_fields.push(gen_record_pat_field(&field_name, &r_name));\n-\n-                            let lhs = make::expr_path(make::ext::ident_path(l_name));\n-                            let rhs = make::expr_path(make::ext::ident_path(r_name));\n-                            l_fields.push(lhs);\n-                            r_fields.push(rhs);\n-                        }\n-\n-                        let left_pat = gen_record_pat(gen_variant_path(&variant)?, l_pat_fields);\n-                        let right_pat = gen_record_pat(gen_variant_path(&variant)?, r_pat_fields);\n-                        let tuple_pat = make::tuple_pat(vec![left_pat.into(), right_pat.into()]);\n-\n-                        let len = l_fields.len();\n-                        if len != 0 {\n-                            let mut expr = gen_partial_cmp_call2(l_fields, r_fields);\n-                            if len >= 2 {\n-                                expr = make::block_expr(None, Some(expr))\n-                                    .indent(ast::edit::IndentLevel(1))\n-                                    .into();\n-                            }\n-                            arms.push(make::match_arm(Some(tuple_pat.into()), None, expr));\n-                        }\n-                    }\n-\n-                    Some(ast::FieldList::TupleFieldList(list)) => {\n-                        let mut l_pat_fields = vec![];\n-                        let mut r_pat_fields = vec![];\n-                        let mut l_fields = vec![];\n-                        let mut r_fields = vec![];\n-\n-                        for (i, _) in list.fields().enumerate() {\n-                            let field_name = format!(\"{}\", i);\n-\n-                            let l_name = format!(\"l{}\", field_name);\n-                            l_pat_fields.push(gen_tuple_field(&l_name));\n-\n-                            let r_name = format!(\"r{}\", field_name);\n-                            r_pat_fields.push(gen_tuple_field(&r_name));\n-\n-                            let lhs = make::expr_path(make::ext::ident_path(&l_name));\n-                            let rhs = make::expr_path(make::ext::ident_path(&r_name));\n-                            l_fields.push(lhs);\n-                            r_fields.push(rhs);\n-                        }\n-\n-                        let left_pat =\n-                            make::tuple_struct_pat(gen_variant_path(&variant)?, l_pat_fields);\n-                        let right_pat =\n-                            make::tuple_struct_pat(gen_variant_path(&variant)?, r_pat_fields);\n-                        let tuple_pat = make::tuple_pat(vec![left_pat.into(), right_pat.into()]);\n-\n-                        let len = l_fields.len();\n-                        if len != 0 {\n-                            let mut expr = gen_partial_cmp_call2(l_fields, r_fields);\n-                            if len >= 2 {\n-                                expr = make::block_expr(None, Some(expr))\n-                                    .indent(ast::edit::IndentLevel(1))\n-                                    .into();\n-                            }\n-                            arms.push(make::match_arm(Some(tuple_pat.into()), None, expr));\n-                        }\n-                    }\n-                    None => continue,\n-                }\n-            }\n-\n-            let expr = match arms.len() {\n-                0 => ord_check,\n-                _ => {\n-                    if case_count > arms.len() {\n-                        let lhs = make::wildcard_pat().into();\n-                        arms.push(make::match_arm(Some(lhs), None, ord_check));\n-                    }\n-\n-                    let match_target = make::expr_tuple(vec![lhs_name, rhs_name]);\n-                    let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n-                    make::expr_match(match_target, list)\n-                }\n-            };\n-\n-            make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n-        }\n+        // `core::mem::Discriminant` does not implement `PartialOrd` in stable Rust today.\n+        ast::Adt::Enum(_) => return None,\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n                 let mut l_fields = vec![];\n@@ -735,7 +605,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     r_fields.push(rhs);\n                 }\n \n-                let expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                let expr = gen_partial_cmp_call(l_fields, r_fields);\n                 make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n             }\n \n@@ -751,7 +621,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     l_fields.push(lhs);\n                     r_fields.push(rhs);\n                 }\n-                let expr = gen_partial_cmp_call2(l_fields, r_fields);\n+                let expr = gen_partial_cmp_call(l_fields, r_fields);\n                 make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n             }\n "}]}