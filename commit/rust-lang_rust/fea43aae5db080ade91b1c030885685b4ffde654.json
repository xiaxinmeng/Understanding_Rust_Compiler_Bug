{"sha": "fea43aae5db080ade91b1c030885685b4ffde654", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYTQzYWFlNWRiMDgwYWRlOTFiMWMwMzA4ODU2ODViNGZmZGU2NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T23:38:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-08T23:38:29Z"}, "message": "Rollup merge of #63162 - RalfJung:miri-xargo, r=alexcrichton\n\nMiri tests: use xargo to build separate libstd\n\nThis uses `cargo miri setup` to prepare the libstd that is used for testing Miri, instead of adjusting the entire bootstrap process to make sure the libstd that already gets built is fit for Miri.\n\nThe issue with our current approach is that with `test-miri = true`, libstd and the test suite get built with `--cfg miri`, which e.g. means hashbrown uses no SIMD, and not all things are tested. Such global side-effects seem like footguns waiting to go off.\n\nOn the other hand, the new approach means we install xargo as a side-effect of doing `./x.py test src/tools/miri`, which might be surprising, and we also both have to build xargo and another libstd which costs some extra time. Not sure if the tools builders have enough time budget for that. Maybe there is a way to cache xargo?\n\nWe have to first first land https://github.com/rust-lang/miri/pull/870 in Miri and then update this PR to include that change (also to get CI to test Miri before bors), but I wanted to get the review started here.\n\nCc @oli-obk (for Miri) @alexcrichton (for CI) @Mark-Simulacrum (for bootstrap)\n\nFixes https://github.com/rust-lang/rust/issues/61833, fixes https://github.com/rust-lang/rust/issues/63219", "tree": {"sha": "2edf14b070167034eebfe3defc6da6ddff12e7ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edf14b070167034eebfe3defc6da6ddff12e7ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea43aae5db080ade91b1c030885685b4ffde654", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdTLJ1CRBK7hj4Ov3rIwAAdHIIAAkUFZJGqHsLMZrN+BFHXEf2\na6Uc8PjzU29cPJs3o3+jungQO8vDpv7R4/ZeCi1+JO+KAZl6muyk9QKxoKBdX2Nr\nIccHgFo2Zfjnin8MUC0yOPtgJ0M/4vKCGpo9MjVLG3+RWjDiUnssRYxpjFL188Wq\nCZmy2Nu8vmayTiRUNoYcWwF/JI65l7/FOCeZsI+8tlIWcP6wjtb+H9RMYAdqexCb\nkTMwt02s7o778qmL/l+WeUAIqHYhbXdGDDJl7Rs0PUO4kxJCjNxPgwxiMHF3Y5G7\n1hMzy7F3Q+oL77ok7lyNR5RuAZVgZDCScN941rEhFxEjnhPLbiQa4/JNjZVoclc=\n=9S/d\n-----END PGP SIGNATURE-----\n", "payload": "tree 2edf14b070167034eebfe3defc6da6ddff12e7ef\nparent 2d1a551e144335e0d60a637d12f410cf65849876\nparent e6be1d713497a47ddbcedd2776d999fe4324cc16\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565307509 +0200\ncommitter GitHub <noreply@github.com> 1565307509 +0200\n\nRollup merge of #63162 - RalfJung:miri-xargo, r=alexcrichton\n\nMiri tests: use xargo to build separate libstd\n\nThis uses `cargo miri setup` to prepare the libstd that is used for testing Miri, instead of adjusting the entire bootstrap process to make sure the libstd that already gets built is fit for Miri.\n\nThe issue with our current approach is that with `test-miri = true`, libstd and the test suite get built with `--cfg miri`, which e.g. means hashbrown uses no SIMD, and not all things are tested. Such global side-effects seem like footguns waiting to go off.\n\nOn the other hand, the new approach means we install xargo as a side-effect of doing `./x.py test src/tools/miri`, which might be surprising, and we also both have to build xargo and another libstd which costs some extra time. Not sure if the tools builders have enough time budget for that. Maybe there is a way to cache xargo?\n\nWe have to first first land https://github.com/rust-lang/miri/pull/870 in Miri and then update this PR to include that change (also to get CI to test Miri before bors), but I wanted to get the review started here.\n\nCc @oli-obk (for Miri) @alexcrichton (for CI) @Mark-Simulacrum (for bootstrap)\n\nFixes https://github.com/rust-lang/rust/issues/61833, fixes https://github.com/rust-lang/rust/issues/63219\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea43aae5db080ade91b1c030885685b4ffde654", "html_url": "https://github.com/rust-lang/rust/commit/fea43aae5db080ade91b1c030885685b4ffde654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea43aae5db080ade91b1c030885685b4ffde654/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1a551e144335e0d60a637d12f410cf65849876", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1a551e144335e0d60a637d12f410cf65849876", "html_url": "https://github.com/rust-lang/rust/commit/2d1a551e144335e0d60a637d12f410cf65849876"}, {"sha": "e6be1d713497a47ddbcedd2776d999fe4324cc16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6be1d713497a47ddbcedd2776d999fe4324cc16", "html_url": "https://github.com/rust-lang/rust/commit/e6be1d713497a47ddbcedd2776d999fe4324cc16"}], "stats": {"total": 141, "additions": 86, "deletions": 55}, "files": [{"sha": "cb9f388a8e47b22d28663ce8507a3c62d254e5ad", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -368,10 +368,6 @@\n # When creating source tarballs whether or not to create a source tarball.\n #dist-src = false\n \n-# Whether to also run the Miri tests suite when running tests.\n-# As a side-effect also generates MIR for all libraries.\n-#test-miri = false\n-\n # After building or testing extended tools (e.g. clippy and rustfmt), append the\n # result (broken, compiling, testing) into this JSON file.\n #save-toolstates = \"/path/to/toolstates.json\""}, {"sha": "54b689fb062a53ee9a02a8d3b26cf37a72e277f5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -143,8 +143,11 @@ fn main() {\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n-        // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(&sysroot);\n+        // actually downloaded, so we just always pass the `--sysroot` option,\n+        // unless one is already set.\n+        if !args.iter().any(|arg| arg == \"--sysroot\") {\n+            cmd.arg(\"--sysroot\").arg(&sysroot);\n+        }\n \n         cmd.arg(\"-Zexternal-macro-backtrace\");\n \n@@ -285,20 +288,6 @@ fn main() {\n             }\n         }\n \n-        // When running miri tests, we need to generate MIR for all libraries\n-        if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") {\n-            // The flags here should be kept in sync with `add_miri_default_args`\n-            // in miri's `src/lib.rs`.\n-            cmd.arg(\"-Zalways-encode-mir\");\n-            cmd.arg(\"--cfg=miri\");\n-            // These options are preferred by miri, to be able to perform better validation,\n-            // but the bootstrap compiler might not understand them.\n-            if stage != \"0\" {\n-                cmd.arg(\"-Zmir-emit-retag\");\n-                cmd.arg(\"-Zmir-opt-level=0\");\n-            }\n-        }\n-\n         if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {\n             cmd.arg(\"--remap-path-prefix\").arg(&map);\n         }"}, {"sha": "e54c9360baeceeac8163e0ec67db44a4f487ffa6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -543,15 +543,6 @@ impl<'a> Builder<'a> {\n             parent: Cell::new(None),\n         };\n \n-        if kind == Kind::Dist {\n-            assert!(\n-                !builder.config.test_miri,\n-                \"Do not distribute with miri enabled.\\n\\\n-                The distributed libraries would include all MIR (increasing binary size).\n-                The distributed MIR would include validation statements.\"\n-            );\n-        }\n-\n         builder\n     }\n \n@@ -981,7 +972,6 @@ impl<'a> Builder<'a> {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n                 },\n             )\n-            .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir());\n \n         if let Some(host_linker) = self.linker(compiler.host) {"}, {"sha": "a5bfafdfdb4dcf5b45e91b75dd25827b9fdab22f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -128,7 +128,6 @@ pub struct Config {\n     pub low_priority: bool,\n     pub channel: String,\n     pub verbose_tests: bool,\n-    pub test_miri: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n     pub missing_tools: bool,\n@@ -315,7 +314,6 @@ struct Rust {\n     debug: Option<bool>,\n     dist_src: Option<bool>,\n     verbose_tests: Option<bool>,\n-    test_miri: Option<bool>,\n     incremental: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n@@ -375,7 +373,6 @@ impl Config {\n         config.codegen_tests = true;\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n-        config.test_miri = false;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n         config.deny_warnings = true;\n@@ -557,7 +554,6 @@ impl Config {\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.verbose_tests, rust.verbose_tests);\n-            set(&mut config.test_miri, rust.test_miri);\n             // in the case \"false\" is set explicitly, do not overwrite the command line args\n             if let Some(true) = rust.incremental {\n                 config.incremental = true;"}, {"sha": "346f0cb2039c08ccbd8d17826cc7af7c24f84a75", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -36,7 +36,6 @@ def v(*args):\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")\n o(\"parallel-compiler\", \"rust.parallel-compiler\", \"build a multi-threaded rustc\")\n-o(\"test-miri\", \"rust.test-miri\", \"run miri's test suite\")\n o(\"verbose-tests\", \"rust.verbose-tests\", \"enable verbose output when running tests\")\n o(\"ccache\", \"llvm.ccache\", \"invoke gcc/clang via ccache to reuse object files between builds\")\n o(\"sccache\", None, \"invoke gcc/clang via sccache to reuse object files between builds\")"}, {"sha": "b72aa78f3de191c330134764a625d3d251915177", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -540,9 +540,7 @@ impl Build {\n             Mode::Rustc => \"-rustc\",\n             Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n-            Mode::ToolStd => \"-tools\",\n-            Mode::ToolTest => \"-tools\",\n-            Mode::ToolRustc => \"-tools\",\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "c2c134bfd1d7da7d1a7225e448a62810e9873d74", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 78, "deletions": 14, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -363,11 +363,9 @@ pub struct Miri {\n impl Step for Miri {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let test_miri = run.builder.config.test_miri;\n-        run.path(\"src/tools/miri\").default_condition(test_miri)\n+        run.path(\"src/tools/miri\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -389,26 +387,92 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = tool::prepare_tool_cargo(builder,\n-                                                 compiler,\n-                                                 Mode::ToolRustc,\n-                                                 host,\n-                                                 \"test\",\n-                                                 \"src/tools/miri\",\n-                                                 SourceType::Submodule,\n-                                                 &[]);\n+            // # Run `cargo miri setup`.\n+            // As a side-effect, this will install xargo.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"run\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n+            cargo\n+                .arg(\"--bin\")\n+                .arg(\"cargo-miri\")\n+                .arg(\"--\")\n+                .arg(\"miri\")\n+                .arg(\"setup\");\n+\n+            // Tell `cargo miri` not to worry about the sysroot mismatch (we built with\n+            // stage1 but run with stage2).\n+            cargo.env(\"MIRI_SKIP_SYSROOT_CHECK\", \"1\");\n+            // Tell `cargo miri setup` where to find the sources.\n+            cargo.env(\"XARGO_RUST_SRC\", builder.src.join(\"src\"));\n+            // Debug things.\n+            cargo.env(\"RUST_BACKTRACE\", \"1\");\n+            // Configure `cargo install` path, and let cargo-miri know that that's where\n+            // xargo ends up.\n+            cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out); // cargo adds a `bin/`\n+            cargo.env(\"XARGO\", builder.out.join(\"bin\").join(\"xargo\"));\n+\n+            if !try_run(builder, &mut cargo) {\n+                return;\n+            }\n+\n+            // # Determine where Miri put its sysroot.\n+            // To this end, we run `cargo miri setup --env` and capture the output.\n+            // (We do this separately from the above so that when the setup actually\n+            // happens we get some output.)\n+            // We re-use the `cargo` from above.\n+            cargo.arg(\"--env\");\n+\n+            // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n+            let miri_sysroot = if builder.config.dry_run {\n+                String::new()\n+            } else {\n+                builder.verbose(&format!(\"running: {:?}\", cargo));\n+                let out = cargo.output()\n+                    .expect(\"We already ran `cargo miri setup` before and that worked\");\n+                assert!(out.status.success(), \"`cargo miri setup` returned with non-0 exit code\");\n+                // Output is \"MIRI_SYSROOT=<str>\\n\".\n+                let stdout = String::from_utf8(out.stdout)\n+                    .expect(\"`cargo miri setup` stdout is not valid UTF-8\");\n+                let stdout = stdout.trim();\n+                builder.verbose(&format!(\"`cargo miri setup --env` returned: {:?}\", stdout));\n+                let sysroot = stdout.splitn(2, '=')\n+                    .nth(1).expect(\"`cargo miri setup` stdout did not contain '='\");\n+                sysroot.to_owned()\n+            };\n+\n+            // # Run `cargo test`.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"test\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n \n             // miri tests need to know about the stage sysroot\n-            cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n+            cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI_PATH\", miri);\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo) {\n-                builder.save_toolstate(\"miri\", ToolState::TestPass);\n+            if !try_run(builder, &mut cargo) {\n+                return;\n             }\n+\n+            // # Done!\n+            builder.save_toolstate(\"miri\", ToolState::TestPass);\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n         }"}, {"sha": "687856cca6b62cc2b860afb59964d8c0d8d95e00", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -254,7 +254,7 @@ jobs:\n       x86_64-msvc-tools:\n         MSYS_BITS: 64\n         SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json\n \n       # 32/64-bit MinGW builds.\n       #"}, {"sha": "f11ae7a34cb91fcd45c4f6af30f5e6e9f0c1c6eb", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/fea43aae5db080ade91b1c030885685b4ffde654/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -23,6 +23,5 @@ COPY x86_64-gnu-tools/repo.sh /tmp/\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\\n-  --enable-test-miri \\\n   --save-toolstates=/tmp/toolstates.json\n ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json linux"}, {"sha": "b12ebfc3de853abf6b4260c44a71cd51323803c5", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=fea43aae5db080ade91b1c030885685b4ffde654", "patch": "@@ -1 +1 @@\n-Subproject commit 39a524f694e42cfb178639d490d3fdbbaf8569dc\n+Subproject commit b12ebfc3de853abf6b4260c44a71cd51323803c5"}]}