{"sha": "24fe35a3e1858a6b8441847729e233fa8144996a", "node_id": "C_kwDOAAsO6NoAKDI0ZmUzNWEzZTE4NThhNmI4NDQxODQ3NzI5ZTIzM2ZhODE0NDk5NmE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-03T12:04:14Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-03T12:04:14Z"}, "message": "Remove argument from closure in thread::Scope::spawn.", "tree": {"sha": "a8a9eb29693eb355caa455139557bfef4419b1f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a9eb29693eb355caa455139557bfef4419b1f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24fe35a3e1858a6b8441847729e233fa8144996a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24fe35a3e1858a6b8441847729e233fa8144996a", "html_url": "https://github.com/rust-lang/rust/commit/24fe35a3e1858a6b8441847729e233fa8144996a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24fe35a3e1858a6b8441847729e233fa8144996a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "html_url": "https://github.com/rust-lang/rust/commit/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "e066f97c8e659d36dac66a497409068be35d1ca8", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/24fe35a3e1858a6b8441847729e233fa8144996a/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fe35a3e1858a6b8441847729e233fa8144996a/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=24fe35a3e1858a6b8441847729e233fa8144996a", "patch": "@@ -9,23 +9,24 @@ use crate::sync::Arc;\n /// A scope to spawn scoped threads in.\n ///\n /// See [`scope`] for details.\n-pub struct Scope<'env> {\n+pub struct Scope<'scope, 'env: 'scope> {\n     data: ScopeData,\n-    /// Invariance over 'env, to make sure 'env cannot shrink,\n+    /// Invariance over 'scope, to make sure 'scope cannot shrink,\n     /// which is necessary for soundness.\n     ///\n     /// Without invariance, this would compile fine but be unsound:\n     ///\n-    /// ```compile_fail\n+    /// ```compile_fail,E0373\n     /// #![feature(scoped_threads)]\n     ///\n     /// std::thread::scope(|s| {\n-    ///     s.spawn(|s| {\n+    ///     s.spawn(|| {\n     ///         let a = String::from(\"abcd\");\n-    ///         s.spawn(|_| println!(\"{:?}\", a)); // might run after `a` is dropped\n+    ///         s.spawn(|| println!(\"{:?}\", a)); // might run after `a` is dropped\n     ///     });\n     /// });\n     /// ```\n+    scope: PhantomData<&'scope mut &'scope ()>,\n     env: PhantomData<&'env mut &'env ()>,\n }\n \n@@ -88,12 +89,12 @@ impl ScopeData {\n /// let mut x = 0;\n ///\n /// thread::scope(|s| {\n-///     s.spawn(|_| {\n+///     s.spawn(|| {\n ///         println!(\"hello from the first scoped thread\");\n ///         // We can borrow `a` here.\n ///         dbg!(&a);\n ///     });\n-///     s.spawn(|_| {\n+///     s.spawn(|| {\n ///         println!(\"hello from the second scoped thread\");\n ///         // We can even mutably borrow `x` here,\n ///         // because no other threads are using it.\n@@ -109,7 +110,7 @@ impl ScopeData {\n #[track_caller]\n pub fn scope<'env, F, T>(f: F) -> T\n where\n-    F: FnOnce(&Scope<'env>) -> T,\n+    F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,\n {\n     let scope = Scope {\n         data: ScopeData {\n@@ -118,6 +119,7 @@ where\n             a_thread_panicked: AtomicBool::new(false),\n         },\n         env: PhantomData,\n+        scope: PhantomData,\n     };\n \n     // Run `f`, but catch panics so we can make sure to wait for all the threads to join.\n@@ -138,7 +140,7 @@ where\n     }\n }\n \n-impl<'env> Scope<'env> {\n+impl<'scope, 'env> Scope<'scope, 'env> {\n     /// Spawns a new thread within a scope, returning a [`ScopedJoinHandle`] for it.\n     ///\n     /// Unlike non-scoped threads, threads spawned with this function may\n@@ -163,10 +165,10 @@ impl<'env> Scope<'env> {\n     /// to recover from such errors.\n     ///\n     /// [`join`]: ScopedJoinHandle::join\n-    pub fn spawn<'scope, F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\n+    pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\n     where\n-        F: FnOnce(&Scope<'env>) -> T + Send + 'env,\n-        T: Send + 'env,\n+        F: FnOnce() -> T + Send + 'scope,\n+        T: Send + 'scope,\n     {\n         Builder::new().spawn_scoped(self, f).expect(\"failed to spawn thread\")\n     }\n@@ -196,7 +198,7 @@ impl Builder {\n     /// thread::scope(|s| {\n     ///     thread::Builder::new()\n     ///         .name(\"first\".to_string())\n-    ///         .spawn_scoped(s, |_|\n+    ///         .spawn_scoped(s, ||\n     ///     {\n     ///         println!(\"hello from the {:?} scoped thread\", thread::current().name());\n     ///         // We can borrow `a` here.\n@@ -205,7 +207,7 @@ impl Builder {\n     ///     .unwrap();\n     ///     thread::Builder::new()\n     ///         .name(\"second\".to_string())\n-    ///         .spawn_scoped(s, |_|\n+    ///         .spawn_scoped(s, ||\n     ///     {\n     ///         println!(\"hello from the {:?} scoped thread\", thread::current().name());\n     ///         // We can even mutably borrow `x` here,\n@@ -222,14 +224,14 @@ impl Builder {\n     /// ```\n     pub fn spawn_scoped<'scope, 'env, F, T>(\n         self,\n-        scope: &'scope Scope<'env>,\n+        scope: &'scope Scope<'scope, 'env>,\n         f: F,\n     ) -> io::Result<ScopedJoinHandle<'scope, T>>\n     where\n-        F: FnOnce(&Scope<'env>) -> T + Send + 'env,\n-        T: Send + 'env,\n+        F: FnOnce() -> T + Send + 'scope,\n+        T: Send + 'scope,\n     {\n-        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(|| f(scope), Some(&scope.data)) }?))\n+        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(|| f(), Some(&scope.data)) }?))\n     }\n }\n \n@@ -245,7 +247,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n-    ///     let t = s.spawn(|_| {\n+    ///     let t = s.spawn(|| {\n     ///         println!(\"hello\");\n     ///     });\n     ///     println!(\"thread id: {:?}\", t.thread().id());\n@@ -279,7 +281,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n-    ///     let t = s.spawn(|_| {\n+    ///     let t = s.spawn(|| {\n     ///         panic!(\"oh no\");\n     ///     });\n     ///     assert!(t.join().is_err());\n@@ -299,7 +301,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     }\n }\n \n-impl<'env> fmt::Debug for Scope<'env> {\n+impl<'scope, 'env> fmt::Debug for Scope<'scope, 'env> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scope\")\n             .field(\"num_running_threads\", &self.data.num_running_threads.load(Ordering::Relaxed))"}]}