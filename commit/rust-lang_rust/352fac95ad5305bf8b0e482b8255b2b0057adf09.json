{"sha": "352fac95ad5305bf8b0e482b8255b2b0057adf09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MmZhYzk1YWQ1MzA1YmY4YjBlNDgyYjgyNTViMmIwMDU3YWRmMDk=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-08-17T05:48:09Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2016-09-02T18:58:02Z"}, "message": "Reject certain auto trait declarations\n\nFixes #29859", "tree": {"sha": "500da3f0af1651d3ab4509f87c32f72b83c735d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500da3f0af1651d3ab4509f87c32f72b83c735d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352fac95ad5305bf8b0e482b8255b2b0057adf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352fac95ad5305bf8b0e482b8255b2b0057adf09", "html_url": "https://github.com/rust-lang/rust/commit/352fac95ad5305bf8b0e482b8255b2b0057adf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352fac95ad5305bf8b0e482b8255b2b0057adf09/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18c99072e6b9ec0075d913ea6454f0c5e75881c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18c99072e6b9ec0075d913ea6454f0c5e75881c", "html_url": "https://github.com/rust-lang/rust/commit/f18c99072e6b9ec0075d913ea6454f0c5e75881c"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "414e7b71f7cf2970d67b0818c0ce23e2f53d5faa", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -762,6 +762,16 @@ pub struct GenericPredicates<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n+    pub fn empty() -> GenericPredicates<'tcx> {\n+        GenericPredicates {\n+            predicates: VecPerParamSpace::empty(),\n+        }\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.predicates.is_empty()\n+    }\n+\n     pub fn instantiate(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();"}, {"sha": "0117dfa673007edb35253e64d41112fad4e8b4be", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -251,16 +251,55 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         });\n     }\n \n+    fn check_auto_trait(&mut self,\n+                                   trait_def_id: DefId,\n+                                   span: Span)\n+    {\n+        let predicates = self.tcx().lookup_predicates(trait_def_id);\n+\n+        // If we must exclude the Self : Trait predicate contained by all\n+        // traits.\n+        let no_refl_predicates : Vec<_> =\n+            predicates.predicates.iter().filter(|predicate| {\n+                match *predicate {\n+                    &ty::Predicate::Trait(ref poly_trait_ref) =>\n+                        poly_trait_ref.def_id() != trait_def_id,\n+                    _ => true,\n+            }\n+            }).collect();\n+\n+        let trait_def = self.tcx().lookup_trait_def(trait_def_id);\n+\n+        // We use an if-else here, since the generics will also trigger\n+        // an extraneous error message when we find predicates like\n+        // `T : Sized` for a trait like: `trait Magic<T>`.\n+        if !trait_def.generics.types.get_slice(ParamSpace::TypeSpace).is_empty() {\n+            error_566(self.ccx, span);\n+        } else if !no_refl_predicates.is_empty() {\n+            error_565(self.ccx, span);\n+        }\n+\n+    }\n+\n     fn check_trait(&mut self,\n                    item: &hir::Item,\n                    items: &[hir::TraitItem])\n     {\n         let trait_def_id = self.tcx().map.local_def_id(item.id);\n \n         if self.tcx().trait_has_default_impl(trait_def_id) {\n+            // We want to both ensure:\n+            // 1) that there are no items contained within\n+            // the trait defintion\n+            //\n+            // 2) that the definition doesn't violate the no-super trait rule\n+            // for auto traits.\n+\n             if !items.is_empty() {\n                 error_380(self.ccx, item.span);\n             }\n+\n+            self.check_auto_trait(trait_def_id, item.span);\n         }\n \n         self.for_item(item).with_fcx(|fcx, this| {\n@@ -272,6 +311,8 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         });\n     }\n \n+\n+\n     fn check_item_fn(&mut self,\n                      item: &hir::Item,\n                      body: &hir::Block)\n@@ -637,6 +678,18 @@ fn error_380(ccx: &CrateCtxt, span: Span) {\n                Trait for ..`) must have no methods or associated items\")\n }\n \n+fn error_565(ccx: &CrateCtxt, span: Span) {\n+    span_err!(ccx.tcx.sess, span, E0565,\n+              \"traits with default impls (`e.g. unsafe impl \\\n+               Trait for ..`) can not have predicates\")\n+}\n+\n+fn error_566(ccx: &CrateCtxt, span: Span) {\n+    span_err!(ccx.tcx.sess, span, E0566,\n+              \"traits with default impls (`e.g. unsafe impl \\\n+               Trait for ..`) can not have type parameters\")\n+}\n+\n fn error_392<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(ccx.tcx.sess, span, E0392,"}, {"sha": "7b7b4d2aa00fa9cd952687e9216be4c7f16019b0", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -4072,4 +4072,6 @@ register_diagnostics! {\n     E0563, // cannot determine a type for this `impl Trait`: {}\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n+    E0565, // auto-traits can not have predicates,\n+    E0566, // auto traits can not have type parameters\n }"}, {"sha": "258aafb15baf4e556db7b9b1e539ea68aa98a483", "filename": "src/test/compile-fail/issue-29859-2.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Fissue-29859-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Fissue-29859-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29859-2.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -10,16 +10,5 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {}\n-impl Magic for .. {}\n-impl<T:Magic> Magic for T {}\n-\n-fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-\n-#[derive(Debug)]\n-struct NoClone;\n-\n-fn main() {\n-    let (a, b) = copy(NoClone); //~ ERROR E0277\n-    println!(\"{:?} {:?}\", a, b);\n-}\n+trait Magic<T> {} //~ E0566\n+impl Magic<isize> for .. {}"}, {"sha": "3419e66af13931d8b66aa84e3c9919b9c607f154", "filename": "src/test/compile-fail/issue-29859.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Fissue-29859.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352fac95ad5305bf8b0e482b8255b2b0057adf09/src%2Ftest%2Fcompile-fail%2Fissue-29859.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29859.rs?ref=352fac95ad5305bf8b0e482b8255b2b0057adf09", "patch": "@@ -10,8 +10,8 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {}\n-impl Magic for .. {}\n+trait Magic: Copy {} //~ ERROR E0565\n+impl Magic for .. {} \n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n@@ -20,6 +20,6 @@ fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n struct NoClone;\n \n fn main() {\n-    let (a, b) = copy(NoClone); //~ ERROR E0277\n+    let (a, b) = copy(NoClone);\n     println!(\"{:?} {:?}\", a, b);\n }"}]}