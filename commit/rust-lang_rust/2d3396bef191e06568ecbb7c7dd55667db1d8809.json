{"sha": "2d3396bef191e06568ecbb7c7dd55667db1d8809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzM5NmJlZjE5MWUwNjU2OGVjYmI3YzdkZDU1NjY3ZGIxZDg4MDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-24T01:02:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-24T01:45:51Z"}, "message": "tutorial: Merge some related, small sections", "tree": {"sha": "52ca49b83fd7e5a1d6f526b7f656c49f278a6668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ca49b83fd7e5a1d6f526b7f656c49f278a6668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3396bef191e06568ecbb7c7dd55667db1d8809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3396bef191e06568ecbb7c7dd55667db1d8809", "html_url": "https://github.com/rust-lang/rust/commit/2d3396bef191e06568ecbb7c7dd55667db1d8809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3396bef191e06568ecbb7c7dd55667db1d8809/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e14fd6e133a9eec6c3e5f8472ebf6788695781e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e14fd6e133a9eec6c3e5f8472ebf6788695781e", "html_url": "https://github.com/rust-lang/rust/commit/0e14fd6e133a9eec6c3e5f8472ebf6788695781e"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "00b9f93eaf1bf818137cb7a27d6e60a3f8229e15", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d3396bef191e06568ecbb7c7dd55667db1d8809/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d3396bef191e06568ecbb7c7dd55667db1d8809/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2d3396bef191e06568ecbb7c7dd55667db1d8809", "patch": "@@ -742,8 +742,6 @@ struct Stack {\n With a value of such a type, you can do `mystack.head += 1`. If `mut` were\n omitted from the type, such an assignment would result in a type error.\n \n-## Struct patterns\n-\n Structs can be destructured in `match` patterns. The basic syntax is\n `Name {fieldname: pattern, ...}`:\n ~~~~\n@@ -845,8 +843,6 @@ let my_gizmo_id = GizmoId(10);\n let id_int: int = *my_gizmo_id;\n ~~~~\n \n-## Enum patterns\n-\n For enum types with multiple variants, destructuring is the only way to\n get at their contents. All variant constructors can be used as\n patterns, as in this definition of `area`:\n@@ -862,7 +858,10 @@ fn area(sh: Shape) -> float {\n }\n ~~~~\n \n-Another example, matching nullary enum variants:\n+Like other patterns, a lone underscore ignores individual fields.\n+Ignoring all fields of a variant can be written `Circle(*)`. As in\n+their introductory form, nullary enum patterns are written without\n+parentheses.\n \n ~~~~\n # type Point = {x: float, y: float};"}]}