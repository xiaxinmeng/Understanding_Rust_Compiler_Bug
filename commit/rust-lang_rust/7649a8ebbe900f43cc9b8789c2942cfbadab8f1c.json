{"sha": "7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDlhOGViYmU5MDBmNDNjYzliODc4OWMyOTQyY2ZiYWRhYjhmMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:19:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:19:06Z"}, "message": "remove dead code", "tree": {"sha": "42418245aea7df068317b427cbdb3c50c3f53208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42418245aea7df068317b427cbdb3c50c3f53208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "html_url": "https://github.com/rust-lang/rust/commit/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24894aca3162d654ee051f591a920ef1525d821f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24894aca3162d654ee051f591a920ef1525d821f", "html_url": "https://github.com/rust-lang/rust/commit/24894aca3162d654ee051f591a920ef1525d821f"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "ff1f3fa75c7e5e4afc0168a0f1b3b5d4f5b81f3e", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "patch": "@@ -9,7 +9,6 @@ use ra_db::{\n     salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase,\n     SourceRootId,\n };\n-use rustc_hash::FxHashMap;\n \n use crate::{db, debug::HirDebugHelper};\n \n@@ -28,9 +27,6 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n pub struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n     runtime: salsa::Runtime<MockDatabase>,\n-    files: FxHashMap<String, FileId>,\n-    crate_names: Arc<FxHashMap<CrateId, String>>,\n-    file_paths: Arc<FxHashMap<FileId, String>>,\n }\n \n impl panic::RefUnwindSafe for MockDatabase {}\n@@ -51,24 +47,18 @@ impl FileLoader for MockDatabase {\n     }\n }\n \n+// FIXME: improve `WithFixture` to bring useful hir debugging back\n impl HirDebugHelper for MockDatabase {\n-    fn crate_name(&self, krate: CrateId) -> Option<String> {\n-        self.crate_names.get(&krate).cloned()\n+    fn crate_name(&self, _krate: CrateId) -> Option<String> {\n+        None\n     }\n \n-    fn file_path(&self, file_id: FileId) -> Option<String> {\n-        self.file_paths.get(&file_id).cloned()\n+    fn file_path(&self, _file_id: FileId) -> Option<String> {\n+        None\n     }\n }\n \n impl MockDatabase {\n-    pub fn file_id_of(&self, path: &str) -> FileId {\n-        match self.files.get(path) {\n-            Some(it) => *it,\n-            None => panic!(\"unknown file: {:?}\\nexisting files:\\n{:#?}\", path, self.files),\n-        }\n-    }\n-\n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n         let crate_graph = self.crate_graph();\n@@ -104,13 +94,8 @@ impl salsa::Database for MockDatabase {\n \n impl Default for MockDatabase {\n     fn default() -> MockDatabase {\n-        let mut db = MockDatabase {\n-            events: Default::default(),\n-            runtime: salsa::Runtime::default(),\n-            files: FxHashMap::default(),\n-            crate_names: Default::default(),\n-            file_paths: Default::default(),\n-        };\n+        let mut db =\n+            MockDatabase { events: Default::default(), runtime: salsa::Runtime::default() };\n         db.set_crate_graph(Default::default());\n         db\n     }\n@@ -121,10 +106,6 @@ impl salsa::ParallelDatabase for MockDatabase {\n         salsa::Snapshot::new(MockDatabase {\n             events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n-            // only the root database can be used to get file_id by path.\n-            files: FxHashMap::default(),\n-            file_paths: Arc::clone(&self.file_paths),\n-            crate_names: Arc::clone(&self.crate_names),\n         })\n     }\n }"}]}