{"sha": "fbb7cd32c3be0c36ff50046325a6e958d5980393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjdjZDMyYzNiZTBjMzZmZjUwMDQ2MzI1YTZlOTU4ZDU5ODAzOTM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-02T13:34:11Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-03T07:13:11Z"}, "message": "std: use ptr.offset where possible in the vec iterator.\n\nCloses #8212.", "tree": {"sha": "21d8d0a0119164499f7a3d2e44c0834d2c4ae2ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21d8d0a0119164499f7a3d2e44c0834d2c4ae2ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb7cd32c3be0c36ff50046325a6e958d5980393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb7cd32c3be0c36ff50046325a6e958d5980393", "html_url": "https://github.com/rust-lang/rust/commit/fbb7cd32c3be0c36ff50046325a6e958d5980393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb7cd32c3be0c36ff50046325a6e958d5980393/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e685d4fd70eeb607668fed2026ac6cafec6107", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e685d4fd70eeb607668fed2026ac6cafec6107", "html_url": "https://github.com/rust-lang/rust/commit/54e685d4fd70eeb607668fed2026ac6cafec6107"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "5f66d93b6d9430452afe8ae8b972416376b0c769", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fbb7cd32c3be0c36ff50046325a6e958d5980393/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb7cd32c3be0c36ff50046325a6e958d5980393/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=fbb7cd32c3be0c36ff50046325a6e958d5980393", "patch": "@@ -2141,11 +2141,15 @@ macro_rules! iterator {\n                         None\n                     } else {\n                         let old = self.ptr;\n-                        // purposefully don't use 'ptr.offset' because for\n-                        // vectors with 0-size elements this would return the\n-                        // same pointer.\n-                        self.ptr = cast::transmute(self.ptr as uint +\n-                                                   sys::nonzero_size_of::<T>());\n+                        self.ptr = if sys::size_of::<T>() == 0 {\n+                            // purposefully don't use 'ptr.offset' because for\n+                            // vectors with 0-size elements this would return the\n+                            // same pointer.\n+                            cast::transmute(self.ptr as uint + 1)\n+                        } else {\n+                            self.ptr.offset(1)\n+                        };\n+\n                         Some(cast::transmute(old))\n                     }\n                 }\n@@ -2171,9 +2175,12 @@ macro_rules! double_ended_iterator {\n                     if self.end == self.ptr {\n                         None\n                     } else {\n-                        // See above for why 'ptr.offset' isn't used\n-                        self.end = cast::transmute(self.end as uint -\n-                                                   sys::nonzero_size_of::<T>());\n+                        self.end = if sys::size_of::<T>() == 0 {\n+                            // See above for why 'ptr.offset' isn't used\n+                            cast::transmute(self.end as uint - 1)\n+                        } else {\n+                            self.end.offset(-1)\n+                        };\n                         Some(cast::transmute(self.end))\n                     }\n                 }\n@@ -3566,3 +3573,26 @@ mod tests {\n         assert!(cnt == 3);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use vec;\n+    use option::*;\n+\n+    #[bench]\n+    fn iterator(bh: &mut BenchHarness) {\n+        // peculiar numbers to stop LLVM from optimising the summation\n+        // out.\n+        let v = vec::from_fn(100, |i| i ^ (i << 1) ^ (i >> 1));\n+\n+        do bh.iter {\n+            let mut sum = 0;\n+            foreach x in v.iter() {\n+                sum += *x;\n+            }\n+            // sum == 11806, to stop dead code elimination.\n+            if sum == 0 {fail!()}\n+        }\n+    }\n+}"}]}