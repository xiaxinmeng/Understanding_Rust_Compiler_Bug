{"sha": "9d5c34a80e37984b422cf0370654ed393db73c70", "node_id": "C_kwDOAAsO6NoAKDlkNWMzNGE4MGUzNzk4NGI0MjJjZjAzNzA2NTRlZDM5M2RiNzNjNzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-04T09:33:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-04T09:33:53Z"}, "message": "Auto merge of #14970 - HKalbasi:mir-fix, r=HKalbasi\n\nDetect \"bound more than once\" error and suppress `need-mut` for it.\n\nFix the `need-mut` false positive for `izip!`", "tree": {"sha": "190a6feceba95f4ba1fa31c2618cab312d9f856d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190a6feceba95f4ba1fa31c2618cab312d9f856d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5c34a80e37984b422cf0370654ed393db73c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5c34a80e37984b422cf0370654ed393db73c70", "html_url": "https://github.com/rust-lang/rust/commit/9d5c34a80e37984b422cf0370654ed393db73c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5c34a80e37984b422cf0370654ed393db73c70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4eb3946fa3cdc9387c114596927316bea25ddb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4eb3946fa3cdc9387c114596927316bea25ddb3", "html_url": "https://github.com/rust-lang/rust/commit/c4eb3946fa3cdc9387c114596927316bea25ddb3"}, {"sha": "71f3e4b08ca0f4dc63fa6a58f921e8e1addf404d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f3e4b08ca0f4dc63fa6a58f921e8e1addf404d", "html_url": "https://github.com/rust-lang/rust/commit/71f3e4b08ca0f4dc63fa6a58f921e8e1addf404d"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "7b88e525bf1845a1319b3f43b4d78568d92bd29a", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=9d5c34a80e37984b422cf0370654ed393db73c70", "patch": "@@ -30,9 +30,9 @@ use crate::{\n     db::DefDatabase,\n     expander::Expander,\n     hir::{\n-        dummy_expr_id, Array, Binding, BindingAnnotation, BindingId, CaptureBy, ClosureKind, Expr,\n-        ExprId, Label, LabelId, Literal, LiteralOrConst, MatchArm, Movability, Pat, PatId,\n-        RecordFieldPat, RecordLitField, Statement,\n+        dummy_expr_id, Array, Binding, BindingAnnotation, BindingId, BindingProblems, CaptureBy,\n+        ClosureKind, Expr, ExprId, Label, LabelId, Literal, LiteralOrConst, MatchArm, Movability,\n+        Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n     lang_item::LangItem,\n@@ -141,6 +141,8 @@ impl RibKind {\n #[derive(Debug, Default)]\n struct BindingList {\n     map: FxHashMap<Name, BindingId>,\n+    is_used: FxHashMap<BindingId, bool>,\n+    reject_new: bool,\n }\n \n impl BindingList {\n@@ -150,7 +152,27 @@ impl BindingList {\n         name: Name,\n         mode: BindingAnnotation,\n     ) -> BindingId {\n-        *self.map.entry(name).or_insert_with_key(|n| ec.alloc_binding(n.clone(), mode))\n+        let id = *self.map.entry(name).or_insert_with_key(|n| ec.alloc_binding(n.clone(), mode));\n+        if ec.body.bindings[id].mode != mode {\n+            ec.body.bindings[id].problems = Some(BindingProblems::BoundInconsistently);\n+        }\n+        self.check_is_used(ec, id);\n+        id\n+    }\n+\n+    fn check_is_used(&mut self, ec: &mut ExprCollector<'_>, id: BindingId) {\n+        match self.is_used.get(&id) {\n+            None => {\n+                if self.reject_new {\n+                    ec.body.bindings[id].problems = Some(BindingProblems::NotBoundAcrossAll);\n+                }\n+            }\n+            Some(true) => {\n+                ec.body.bindings[id].problems = Some(BindingProblems::BoundMoreThanOnce);\n+            }\n+            Some(false) => {}\n+        }\n+        self.is_used.insert(id, true);\n     }\n }\n \n@@ -1208,9 +1230,34 @@ impl ExprCollector<'_> {\n                     p.path().and_then(|path| self.expander.parse_path(self.db, path)).map(Box::new);\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n-            ast::Pat::OrPat(p) => {\n-                let pats = p.pats().map(|p| self.collect_pat(p, binding_list)).collect();\n-                Pat::Or(pats)\n+            ast::Pat::OrPat(p) => 'b: {\n+                let prev_is_used = mem::take(&mut binding_list.is_used);\n+                let prev_reject_new = mem::take(&mut binding_list.reject_new);\n+                let mut pats = Vec::with_capacity(p.pats().count());\n+                let mut it = p.pats();\n+                let Some(first) = it.next() else {\n+                    break 'b Pat::Or(Box::new([]));\n+                };\n+                pats.push(self.collect_pat(first, binding_list));\n+                binding_list.reject_new = true;\n+                for rest in it {\n+                    for (_, x) in binding_list.is_used.iter_mut() {\n+                        *x = false;\n+                    }\n+                    pats.push(self.collect_pat(rest, binding_list));\n+                    for (&id, &x) in binding_list.is_used.iter() {\n+                        if !x {\n+                            self.body.bindings[id].problems =\n+                                Some(BindingProblems::NotBoundAcrossAll);\n+                        }\n+                    }\n+                }\n+                binding_list.reject_new = prev_reject_new;\n+                let current_is_used = mem::replace(&mut binding_list.is_used, prev_is_used);\n+                for (id, _) in current_is_used.into_iter() {\n+                    binding_list.check_is_used(self, id);\n+                }\n+                Pat::Or(pats.into())\n             }\n             ast::Pat::ParenPat(p) => return self.collect_pat_opt(p.pat(), binding_list),\n             ast::Pat::TuplePat(p) => {\n@@ -1499,6 +1546,7 @@ impl ExprCollector<'_> {\n             mode,\n             definitions: SmallVec::new(),\n             owner: self.current_binding_owner,\n+            problems: None,\n         })\n     }\n "}, {"sha": "4ad8a7aa8eb12a0c52f78adcf934c486bae1a532", "filename": "crates/hir-def/src/hir.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir-def%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir-def%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir.rs?ref=9d5c34a80e37984b422cf0370654ed393db73c70", "patch": "@@ -486,6 +486,16 @@ impl BindingAnnotation {\n     }\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum BindingProblems {\n+    /// https://doc.rust-lang.org/stable/error_codes/E0416.html\n+    BoundMoreThanOnce,\n+    /// https://doc.rust-lang.org/stable/error_codes/E0409.html\n+    BoundInconsistently,\n+    /// https://doc.rust-lang.org/stable/error_codes/E0408.html\n+    NotBoundAcrossAll,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Binding {\n     pub name: Name,\n@@ -494,6 +504,7 @@ pub struct Binding {\n     /// Id of the closure/generator that owns this binding. If it is owned by the\n     /// top level expression, this field would be `None`.\n     pub owner: Option<ExprId>,\n+    pub problems: Option<BindingProblems>,\n }\n \n impl Binding {"}, {"sha": "5926d8654210de589e8ef6f9d5f0d2454e8d9423", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9d5c34a80e37984b422cf0370654ed393db73c70", "patch": "@@ -1643,7 +1643,11 @@ impl DefWithBody {\n                     )\n                 }\n                 let mol = &borrowck_result.mutability_of_locals;\n-                for (binding_id, _) in hir_body.bindings.iter() {\n+                for (binding_id, binding_data) in hir_body.bindings.iter() {\n+                    if binding_data.problems.is_some() {\n+                        // We should report specific diagnostics for these problems, not `need-mut` and `unused-mut`.\n+                        continue;\n+                    }\n                     let Some(&local) = mir_body.binding_locals.get(binding_id) else {\n                         continue;\n                     };"}, {"sha": "b95c8c573b50619cba25a43da552907141f55965", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5c34a80e37984b422cf0370654ed393db73c70/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=9d5c34a80e37984b422cf0370654ed393db73c70", "patch": "@@ -620,6 +620,19 @@ fn f((x, y): (i32, i32)) {\n         );\n     }\n \n+    #[test]\n+    fn no_diagnostics_in_case_of_multiple_bounds() {\n+        check_diagnostics(\n+            r#\"\n+fn f() {\n+    let (b, a, b) = (2, 3, 5);\n+    a = 8;\n+  //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `a`\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn for_loop() {\n         check_diagnostics("}]}