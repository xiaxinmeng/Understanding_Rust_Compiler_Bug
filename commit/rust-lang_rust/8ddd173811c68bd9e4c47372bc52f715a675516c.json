{"sha": "8ddd173811c68bd9e4c47372bc52f715a675516c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZGQxNzM4MTFjNjhiZDllNGM0NzM3MmJjNTJmNzE1YTY3NTUxNmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T13:09:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_try_block", "tree": {"sha": "e28a9ce981a54ae2b3c9b2e5314aa0c94381ade1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28a9ce981a54ae2b3c9b2e5314aa0c94381ade1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ddd173811c68bd9e4c47372bc52f715a675516c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddd173811c68bd9e4c47372bc52f715a675516c", "html_url": "https://github.com/rust-lang/rust/commit/8ddd173811c68bd9e4c47372bc52f715a675516c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ddd173811c68bd9e4c47372bc52f715a675516c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e450dcaf8e1f6c1a4b64d3d3160cf6ef5743ccb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e450dcaf8e1f6c1a4b64d3d3160cf6ef5743ccb7", "html_url": "https://github.com/rust-lang/rust/commit/e450dcaf8e1f6c1a4b64d3d3160cf6ef5743ccb7"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "711ec662301c160268141ae7406758640568587d", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8ddd173811c68bd9e4c47372bc52f715a675516c/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ddd173811c68bd9e4c47372bc52f715a675516c/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=8ddd173811c68bd9e4c47372bc52f715a675516c", "patch": "@@ -225,31 +225,7 @@ impl LoweringContext<'_> {\n                     hir::LoopSource::Loop,\n                 )\n             }),\n-            ExprKind::TryBlock(ref body) => {\n-                self.with_catch_scope(body.id, |this| {\n-                    let unstable_span = this.mark_span_with_reason(\n-                        DesugaringKind::TryBlock,\n-                        body.span,\n-                        this.allow_try_trait.clone(),\n-                    );\n-                    let mut block = this.lower_block(body, true).into_inner();\n-                    let tail = block.expr.take().map_or_else(\n-                        || {\n-                            let span = this.sess.source_map().end_point(unstable_span);\n-                            hir::Expr {\n-                                span,\n-                                node: hir::ExprKind::Tup(hir_vec![]),\n-                                attrs: ThinVec::new(),\n-                                hir_id: this.next_id(),\n-                            }\n-                        },\n-                        |x: P<hir::Expr>| x.into_inner(),\n-                    );\n-                    block.expr = Some(this.wrap_in_try_constructor(\n-                        sym::from_ok, tail, unstable_span));\n-                    hir::ExprKind::Block(P(block), None)\n-                })\n-            }\n+            ExprKind::TryBlock(ref body) => self.lower_expr_try_block(body),\n             ExprKind::Match(ref expr, ref arms) => hir::ExprKind::Match(\n                 P(self.lower_expr(expr)),\n                 arms.iter().map(|x| self.lower_arm(x)).collect(),\n@@ -375,6 +351,23 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_expr_try_block(&mut self, body: &Block) -> hir::ExprKind {\n+        self.with_catch_scope(body.id, |this| {\n+            let unstable_span = this.mark_span_with_reason(\n+                DesugaringKind::TryBlock,\n+                body.span,\n+                this.allow_try_trait.clone(),\n+            );\n+            let mut block = this.lower_block(body, true).into_inner();\n+            let tail = block.expr.take().map_or_else(\n+                || this.expr_unit(this.sess.source_map().end_point(unstable_span)),\n+                |x: P<hir::Expr>| x.into_inner(),\n+            );\n+            block.expr = Some(this.wrap_in_try_constructor(sym::from_ok, tail, unstable_span));\n+            hir::ExprKind::Block(P(block), None)\n+        })\n+    }\n+\n     /// Desugar `<expr>.await` into:\n     /// ```rust\n     /// {"}]}