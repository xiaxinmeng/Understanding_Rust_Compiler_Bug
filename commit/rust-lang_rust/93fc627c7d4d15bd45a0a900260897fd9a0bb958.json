{"sha": "93fc627c7d4d15bd45a0a900260897fd9a0bb958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZmM2MjdjN2Q0ZDE1YmQ0NWEwYTkwMDI2MDg5N2ZkOWEwYmI5NTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-01T04:50:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-01T04:50:06Z"}, "message": "Rollup merge of #61387 - JohnTitor:remove-unused, r=matthewjasper\n\nRemove ty::BrFresh and RegionConstraintCollector::new_bound\n\nFixes #60957\n\nr? @matthewjasper", "tree": {"sha": "82295be1abf0e949674fdf7bae5d8885e831b90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82295be1abf0e949674fdf7bae5d8885e831b90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93fc627c7d4d15bd45a0a900260897fd9a0bb958", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8gP+CRBK7hj4Ov3rIwAAdHIIAJ3HsT7TGkiESI1cbdJ/g93z\nIoAlM7fq2lRO8QfDWLQWyHOrcb/fqw2uID2O20USFG7+weG+QzyMCJhPTJtQGXE0\nZa6QHot7YDnKHDLmnGplmN6LjstiWiqVwU8BqlNzmxpKhFJtnViEehizpDsZ0zj3\nsqBKFfDt77SgkXzrHO0jmoRBG9W6KPzZ9JO+A2H2R7teMDPMvVpXqhHllgH1QATI\nxBE8KFoZVi3qzL0Ry4qX+1qAgKF89h2+AsrLqbyUyAclg6xuGS/GjpwCNcLEacsL\n6Bucc8vSI7Cw+YLt8Peax1TW+s2QXfFx/5zOLMJCXrR3mcAxRo6j2cNNJoUTQ9s=\n=O8I2\n-----END PGP SIGNATURE-----\n", "payload": "tree 82295be1abf0e949674fdf7bae5d8885e831b90f\nparent d0a0ba42d7e915a7df92f9310223ea56cc10ae6f\nparent 8f34a50cc5bb94f7d3381ec00ed273af68724a4b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559364606 +0200\ncommitter GitHub <noreply@github.com> 1559364606 +0200\n\nRollup merge of #61387 - JohnTitor:remove-unused, r=matthewjasper\n\nRemove ty::BrFresh and RegionConstraintCollector::new_bound\n\nFixes #60957\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93fc627c7d4d15bd45a0a900260897fd9a0bb958", "html_url": "https://github.com/rust-lang/rust/commit/93fc627c7d4d15bd45a0a900260897fd9a0bb958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93fc627c7d4d15bd45a0a900260897fd9a0bb958/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a0ba42d7e915a7df92f9310223ea56cc10ae6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a0ba42d7e915a7df92f9310223ea56cc10ae6f", "html_url": "https://github.com/rust-lang/rust/commit/d0a0ba42d7e915a7df92f9310223ea56cc10ae6f"}, {"sha": "8f34a50cc5bb94f7d3381ec00ed273af68724a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f34a50cc5bb94f7d3381ec00ed273af68724a4b", "html_url": "https://github.com/rust-lang/rust/commit/8f34a50cc5bb94f7d3381ec00ed273af68724a4b"}], "stats": {"total": 56, "additions": 4, "deletions": 52}, "files": [{"sha": "563948a63514b300eb4c01a23398aa988ffb452c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -100,7 +100,6 @@ for ty::RegionKind {\n             ty::ReClosureBound(vid) => {\n                 vid.hash_stable(hcx, hasher);\n             }\n-            ty::ReLateBound(..) |\n             ty::ReVar(..) |\n             ty::RePlaceholder(..) => {\n                 bug!(\"StableHasher: unexpected region {:?}\", *self)"}, {"sha": "b1eba7d5934f91fed1f45662b46200870ac28307", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -218,10 +218,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n                     self.hir().span_by_hir_id(node),\n                 ),\n-                ty::BrFresh(_) => (\n-                    \"an anonymous lifetime defined on\".to_owned(),\n-                    self.hir().span_by_hir_id(node),\n-                ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", region),\n                     cm.def_span(self.hir().span_by_hir_id(node)),"}, {"sha": "ca766ea724f3db02379a4a398aeccf8c3496157d", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -11,11 +11,11 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::unify as ut;\n use crate::ty::ReStatic;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::{BrFresh, ReLateBound, ReVar};\n+use crate::ty::{ReLateBound, ReVar};\n use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n-use std::{cmp, fmt, mem, u32};\n+use std::{cmp, fmt, mem};\n use std::ops::Range;\n \n mod leak_check;\n@@ -37,10 +37,6 @@ pub struct RegionConstraintCollector<'tcx> {\n     /// exist). This prevents us from making many such regions.\n     glbs: CombineMap<'tcx>,\n \n-    /// Global counter used during the GLB algorithm to create unique\n-    /// names for fresh bound regions\n-    bound_count: u32,\n-\n     /// The undo log records actions that might later be undone.\n     ///\n     /// Note: `num_open_snapshots` is used to track if we are actively\n@@ -392,7 +388,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data,\n             lubs,\n             glbs,\n-            bound_count: _,\n             undo_log: _,\n             num_open_snapshots: _,\n             unification_table,\n@@ -579,39 +574,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn new_bound(\n-        &mut self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        debruijn: ty::DebruijnIndex,\n-    ) -> Region<'tcx> {\n-        // Creates a fresh bound variable for use in GLB computations.\n-        // See discussion of GLB computation in the large comment at\n-        // the top of this file for more details.\n-        //\n-        // This computation is potentially wrong in the face of\n-        // rollover.  It's conceivable, if unlikely, that one might\n-        // wind up with accidental capture for nested functions in\n-        // that case, if the outer function had bound regions created\n-        // a very long time before and the inner function somehow\n-        // wound up rolling over such that supposedly fresh\n-        // identifiers were in fact shadowed. For now, we just assert\n-        // that there is no rollover -- eventually we should try to be\n-        // robust against this possibility, either by checking the set\n-        // of bound identifiers that appear in a given expression and\n-        // ensure that we generate one that is distinct, or by\n-        // changing the representation of bound regions in a fn\n-        // declaration\n-\n-        let sc = self.bound_count;\n-        self.bound_count = sc + 1;\n-\n-        if sc >= self.bound_count {\n-            bug!(\"rollover in RegionInference new_bound()\");\n-        }\n-\n-        tcx.mk_region(ReLateBound(debruijn, BrFresh(sc)))\n-    }\n-\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!("}, {"sha": "300ea9bb49785177baf8a763cd64aa5e23b0cb4c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -1441,7 +1441,6 @@ impl<F: fmt::Write> FmtPrinter<'_, 'gcx, 'tcx, F> {\n                     br\n                 }\n                 ty::BrAnon(_) |\n-                ty::BrFresh(_) |\n                 ty::BrEnv => {\n                     let name = loop {\n                         let name = name_by_region_index(region_index);"}, {"sha": "56d47a7f849cf6eec7c8888087bb29abb881ee67", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -94,7 +94,6 @@ impl fmt::Debug for ty::BoundRegion {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n-            ty::BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n             ty::BrNamed(did, name) => {\n                 write!(f, \"BrNamed({:?}:{:?}, {})\",\n                         did.krate, did.index, name)"}, {"sha": "ddc4bd3f9f6c3c057cd918147a6eef1937be875e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -56,9 +56,6 @@ pub enum BoundRegion {\n     /// the event of shadowing.\n     BrNamed(DefId, InternedString),\n \n-    /// Fresh bound identifiers created during GLB computations.\n-    BrFresh(u32),\n-\n     /// Anonymous region for the implicit env pointer parameter\n     /// to a closure\n     BrEnv,"}, {"sha": "0d452c99ea16853776aa04db9b3b9e42ebd16ca2", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegion::BrAnon(_) | ty::BoundRegion::BrFresh(_) => None,\n+                ty::BoundRegion::BrAnon(_) => None,\n             },\n \n             ty::ReLateBound(..)"}, {"sha": "cc054adee7bea80ebe5b72923b5357f755f78027", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93fc627c7d4d15bd45a0a900260897fd9a0bb958/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=93fc627c7d4d15bd45a0a900260897fd9a0bb958", "patch": "@@ -2049,7 +2049,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         for br in late_bound_in_ret.difference(&late_bound_in_args) {\n             let lifetime_name = match *br {\n                 ty::BrNamed(_, name) => format!(\"lifetime `{}`,\", name),\n-                ty::BrAnon(_) | ty::BrFresh(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n+                ty::BrAnon(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n             };\n             let mut err = struct_span_err!(tcx.sess,\n                                            decl.output.span(),"}]}