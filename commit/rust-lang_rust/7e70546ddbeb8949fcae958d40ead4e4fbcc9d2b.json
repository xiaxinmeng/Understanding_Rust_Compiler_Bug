{"sha": "7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzA1NDZkZGJlYjg5NDlmY2FlOTU4ZDQwZWFkNGU0ZmJjYzlkMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-21T14:04:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-21T14:04:15Z"}, "message": "Auto merge of #45430 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #45227, #45356, #45407, #45411, #45418, #45419\n- Failed merges: #45421", "tree": {"sha": "823d9a763ba57432396794516a06c87408d451f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/823d9a763ba57432396794516a06c87408d451f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "html_url": "https://github.com/rust-lang/rust/commit/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d532ba7c627a558410e3f21efbb149540c1461e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d532ba7c627a558410e3f21efbb149540c1461e9", "html_url": "https://github.com/rust-lang/rust/commit/d532ba7c627a558410e3f21efbb149540c1461e9"}, {"sha": "6ed7927fa0d99b2321d3fa44334e63d5412ba696", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed7927fa0d99b2321d3fa44334e63d5412ba696", "html_url": "https://github.com/rust-lang/rust/commit/6ed7927fa0d99b2321d3fa44334e63d5412ba696"}], "stats": {"total": 297, "additions": 260, "deletions": 37}, "files": [{"sha": "d42476bc4130dd8e1b14d23ce936de657955debe", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -6,7 +6,7 @@ A version of this document [can be found online](https://www.rust-lang.org/condu\n \n **Contact**: [rust-mods@rust-lang.org](mailto:rust-mods@rust-lang.org)\n \n-* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n+* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n * On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n * Please be kind and courteous. There's no need to be mean or rude.\n * Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer."}, {"sha": "cd0a09dd725f17391fc4416a790645028a14bedd", "filename": "src/Cargo.lock", "status": "modified", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -224,6 +224,16 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cargotest\"\n version = \"0.1.0\"\n@@ -270,6 +280,43 @@ dependencies = [\n  \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"clippy\"\n+version = \"0.0.166\"\n+dependencies = [\n+ \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clippy-mini-macro-test 0.1.0\",\n+ \"clippy_lints 0.0.166\",\n+ \"compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"clippy-mini-macro-test\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"clippy_lints\"\n+version = \"0.0.166\"\n+dependencies = [\n+ \"itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cmake\"\n version = \"0.1.26\"\n@@ -307,6 +354,15 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"compiletest_rs\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"completion\"\n version = \"0.1.0\"\n@@ -469,6 +525,22 @@ name = \"dtoa\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"duct\"\n+version = \"0.8.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"error-chain 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"either\"\n+version = \"1.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"enum_primitive\"\n version = \"0.1.1\"\n@@ -495,6 +567,14 @@ dependencies = [\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"error-chain\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error-chain\"\n version = \"0.11.0\"\n@@ -752,6 +832,14 @@ dependencies = [\n  \"xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"either 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.3.4\"\n@@ -816,6 +904,11 @@ name = \"lazy_static\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"lazycell\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"libc\"\n version = \"0.0.0\"\n@@ -999,6 +1092,17 @@ dependencies = [\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"nix\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"num\"\n version = \"0.1.40\"\n@@ -1110,6 +1214,16 @@ dependencies = [\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"os_pipe\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"nix 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"owning_ref\"\n version = \"0.3.3\"\n@@ -1229,6 +1343,15 @@ dependencies = [\n  \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.0.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.1.0\"\n@@ -1243,6 +1366,11 @@ name = \"quick-error\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quine-mc_cluskey\"\n+version = \"0.2.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"quote\"\n version = \"0.2.3\"\n@@ -1894,6 +2022,14 @@ dependencies = [\n  \"smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"semver\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"semver\"\n version = \"0.8.0\"\n@@ -1955,6 +2091,16 @@ dependencies = [\n name = \"serialize\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"shared_child\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"shell-escape\"\n version = \"0.1.3\"\n@@ -2485,10 +2631,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5cde24d1b2e2216a726368b2363a273739c91f4e3eb4e0dd12d672d396ad989\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n+\"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cc 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2c674f0870e3dbd4105184ea035acb1c32c8ae69939c9e228d2b11bbfe29efad\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.26.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3451e409013178663435d6f15fdb212f14ee4424a3d74f979d081d0a66b6f1f2\"\n \"checksum cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"357c07e7a1fc95732793c1edb5901e1a1f305cfcf63a90eb12dbd22bdb6b789d\"\n+\"checksum compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2741d378feb7a434dba54228c89a70b4e427fee521de67cdda3750b8a0265f5a\"\n \"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n \"checksum core-foundation 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5909502e547762013619f4c4e01cc7393c20fe2d52d7fa471c1210adb2320dc7\"\n \"checksum core-foundation-sys 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc9fb3d6cb663e6fd7cf1c63f9b144ee2b1e4a78595a0451dd34bff85b9a3387\"\n@@ -2505,10 +2653,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b5b93718f8b3e5544fcc914c43de828ca6c6ace23e0332c6080a2977b49787a\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n+\"checksum duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e45aa15fe0a8a8f511e6d834626afd55e49b62e5c8802e18328a87e8a8f6065c\"\n+\"checksum either 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e311a7479512fbdf858fb54d91ec59f3b9f85bc0113659f46bba12b199d273ce\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n+\"checksum error-chain 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6930e04918388a9a2e41d518c25cf679ccafe26733fb4127dbf21993f2575d46\"\n \"checksum filetime 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ab199bf38537c6f38792669e081e0bb278b9b7405bba2642e4e5d15bf732c0e\"\n \"checksum flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6234dd4468ae5d1e2dbb06fe2b058696fdc50a339c68a393aefbf00bc81e423\"\n \"checksum fnv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cc484842f1e2884faf56f529f960cc12ad8c71ce96cc7abba0a067c98fee344\"\n@@ -2529,13 +2680,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum html5ever 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a49d5001dd1bddf042ea41ed4e0a671d50b1bf187e66b349d7ec613bdce4ad90\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n+\"checksum itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3f2be4da1690a039e9ae5fd575f706a63ad5a2120f161b1d653c9da3930dd21\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum jobserver 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"094f87ed101b6832def8632f43db43dc204d27897eb95aca69b26ce2e4011e84\"\n \"checksum jsonrpc-core 7.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1acd0f9934da94466d2370f36832b9b19271b4abdfdb5e69f0bcd991ebcd515\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef2ea4f2f7883cd7c6772b06c14abca01a2cc1f75c426cebffcf6b3b925ef9fc\"\n \"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n+\"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n \"checksum libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1419b2939a0bc44b77feb34661583c7546b532b192feab36249ab584b86856c\"\n \"checksum libgit2-sys 0.6.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"205fc37e829c5b36de63d14c8dc8b62c5a6a2519b16318ed0977079ca97256a9\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n@@ -2553,6 +2706,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n \"checksum net2 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a80f842784ef6c9a958b68b7516bc7e35883c614004dd94959a4dca1b716c09\"\n+\"checksum nix 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"47e49f6982987135c5e9620ab317623e723bd06738fd85377e8d55f57c8b6487\"\n \"checksum num 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a311b77ebdc5dd4cf6449d81e4135d9f0e3b153839ac90e648a8ef538f923525\"\n \"checksum num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fd0f8dbb4c0960998958a796281d88c16fbe68d87b1baa6f31e2979e81fd0bd\"\n \"checksum num-complex 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"503e668405c5492d67cf662a81e05be40efe2e6bcf10f7794a07bd9865e704e6\"\n@@ -2565,6 +2719,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum openssl 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"816914b22eb15671d62c73442a51978f311e911d6a6f6cbdafa6abce1b5038fc\"\n \"checksum openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d98df0270d404ccd3c050a41d579c52d1db15375168bb3471e04ec0f5f378daf\"\n \"checksum openssl-sys 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e4c63a7d559c1e5afa6d6a9e6fa34bbc5f800ffc9ae08b72c605420b0c4f5e8\"\n+\"checksum os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"998bfbb3042e715190fe2a41abfa047d7e8cb81374d2977d7f100eacd8619cb1\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n@@ -2577,8 +2732,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum procedural-masquerade 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c93cdc1fb30af9ddf3debc4afbdb0f35126cbd99daa229dd76cdd5349b41d989\"\n \"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n+\"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n \"checksum pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a656fdb8b6848f896df5e478a0eb9083681663e37dcb77dd16981ff65329fe8b\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n+\"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c5cf478fe1006dbcc72567121d23dbdae5f1632386068c5c86ff4f645628504\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f120c7510ef7aff254aeb06067fb6fac573ec96a1660e194787cf9dced412bf0\"\n@@ -2599,13 +2756,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n \"checksum selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3c89b1c6a3c029c82263f7dd2d44d0005ee7374eb09e254ab59dede4353a8c0\"\n+\"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a7046c9d4c6c522d10b2d098f9bebe2bef227e0e74044d8c1bfcf6b476af799\"\n \"checksum serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1afcaae083fd1c46952a315062326bc9957f182358eb7da03b57ef1c688f7aa9\"\n \"checksum serde_derive_internals 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd381f6d01a6616cdba8530492d453b7761b456ba974e98768a18cad2cd76f58\"\n \"checksum serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190e9765dcedb56be63b6e0993a006c7e3b071a016a304736e4a315dc01fb142\"\n \"checksum serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d243424e06f9f9c39e3cd36147470fd340db785825e367625f79298a6ac6b7ac\"\n+\"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n \"checksum smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f8266519bc1d17d0b5b16f6c21295625d562841c708f6376f49028a43e9c11e\""}, {"sha": "3e1da987035d35a8fc7da3a8c4c7468950beddfc", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -5,6 +5,7 @@ members = [\n   \"libstd\",\n   \"libtest\",\n   \"tools/cargotest\",\n+  \"tools/clippy\",\n   \"tools/compiletest\",\n   \"tools/error_index_generator\",\n   \"tools/linkchecker\","}, {"sha": "3a2022ad429f7ef85150138ac6e83e81c699b4a5", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -70,7 +70,7 @@ impl Layout {\n     ///\n     /// * `align` must be a power of two,\n     ///\n-    /// * `align` must not exceed 2^31 (i.e. `1 << 31`),\n+    /// * `align` must not exceed 2<sup>31</sup> (i.e. `1 << 31`),\n     ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n     ///    must not overflow (i.e. the rounded value must be less than\n@@ -113,7 +113,7 @@ impl Layout {\n     /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n-    /// a power-of-two that is also less than or equal to 2^31, nor\n+    /// a power-of-two that is also less than or equal to 2<sup>31</sup>, nor\n     /// that `size` aligned to `align` fits within the address space\n     /// (i.e. the `Layout::from_size_align` preconditions).\n     #[inline]\n@@ -227,7 +227,7 @@ impl Layout {\n         };\n \n         // We can assume that `self.align` is a power-of-two that does\n-        // not exceed 2^31. Furthermore, `alloc_size` has already been\n+        // not exceed 2<sup>31</sup>. Furthermore, `alloc_size` has already been\n         // rounded up to a multiple of `self.align`; therefore, the\n         // call to `Layout::from_size_align` below should never panic.\n         Some((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))"}, {"sha": "58299d5d8361eec7f8e1240e79de2c82708d3481", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -475,7 +475,6 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n //!\n-//! [`format!`]: ../../macro.format.html\n //! [`usize`]: ../../std/primitive.usize.html\n //! [`isize`]: ../../std/primitive.isize.html\n //! [`i8`]: ../../std/primitive.i8.html"}, {"sha": "4e4d9b3f1e2f0585cfc9c3be3c366bb973268f27", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -22,7 +22,7 @@ use mem;\n /// This is currently the default hashing function used by standard library\n /// (eg. `collections::HashMap` uses it by default).\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash>\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[rustc_deprecated(since = \"1.13.0\",\n                    reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n@@ -33,7 +33,7 @@ pub struct SipHasher13 {\n \n /// An implementation of SipHash 2-4.\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash/>\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[rustc_deprecated(since = \"1.13.0\",\n                    reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n@@ -44,7 +44,7 @@ pub struct SipHasher24 {\n \n /// An implementation of SipHash 2-4.\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash/>\n ///\n /// SipHash is a general-purpose hashing function: it runs at a good\n /// speed (competitive with Spooky and City) and permits strong _keyed_"}, {"sha": "01990f61feeb3cbda9babdccf1e2f651e31f3d41", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -551,7 +551,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -684,7 +684,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -743,7 +743,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1182,7 +1182,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1382,7 +1382,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1441,7 +1441,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory"}, {"sha": "e283fc40c50a345fc9ed5658753bc45eb9d6836a", "filename": "src/librustc/hir/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fhir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fhir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2FREADME.md?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -57,7 +57,7 @@ carry around references into the HIR, but rather to carry around\n *identifier numbers* (or just \"ids\"). Right now, you will find four\n sorts of identifiers in active use:\n \n-- `DefId`, which primarily name \"definitions\" or top-level items.\n+- `DefId`, which primarily names \"definitions\" or top-level items.\n   - You can think of a `DefId` as being shorthand for a very explicit\n     and complete path, like `std::collections::HashMap`. However,\n     these paths are able to name things that are not nameable in\n@@ -114,6 +114,6 @@ A **body** represents some kind of executable code, such as the body\n of a function/closure or the definition of a constant. Bodies are\n associated with an **owner**, which is typically some kind of item\n (e.g., a `fn()` or `const`), but could also be a closure expression\n-(e.g., `|x, y| x + y`). You can use the HIR map to find find the body\n+(e.g., `|x, y| x + y`). You can use the HIR map to find the body\n associated with a given def-id (`maybe_body_owned_by()`) or to find\n the owner of a body (`body_owner_def_id()`)."}, {"sha": "fb0c7ce1df23dd38a3be7a1c37f33b969701d39d", "filename": "src/librustc/mir/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fmir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fmir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2FREADME.md?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -6,7 +6,7 @@ register and define new MIR transformations and analyses.\n \n Most of the code that operates on MIR can be found in the\n `librustc_mir` crate or other crates. The code found here in\n-`librustc` is just the datatype definitions, alonging the functions\n+`librustc` is just the datatype definitions, along with the functions\n which operate on MIR to be placed everywhere else.\n \n ## MIR Data Types and visitor\n@@ -27,7 +27,7 @@ As a MIR *consumer*, you are expected to use one of the queries that\n returns a \"final MIR\". As of the time of this writing, there is only\n one: `optimized_mir(def_id)`, but more are expected to come in the\n future. For foreign def-ids, we simply read the MIR from the other\n-crate's metadata. But for local query, this query will construct the\n+crate's metadata. But for local def-ids, the query will construct the\n MIR and then iteratively optimize it by putting it through various\n pipeline stages. This section describes those pipeline stages and how\n you can extend them.\n@@ -51,7 +51,7 @@ a `&'tcx Steal<Mir<'tcx>>`, allocated using\n **stolen** by the next suite of optimizations -- this is an\n optimization to avoid cloning the MIR. Attempting to use a stolen\n result will cause a panic in the compiler. Therefore, it is important\n-that you not read directly from these intermediate queries except as\n+that you do not read directly from these intermediate queries except as\n part of the MIR processing pipeline.\n \n Because of this stealing mechanism, some care must also be taken to"}, {"sha": "8207c18e67791af4507a6b5604cd298ce4ea9863", "filename": "src/librustc/ty/maps/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fty%2Fmaps%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc%2Fty%2Fmaps%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2FREADME.md?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -169,7 +169,7 @@ That is, they take an `&mut Providers` and mutate it in place. Usually\n we use the formulation above just because it looks nice, but you could\n as well do `providers.type_of = type_of`, which would be equivalent.\n (Here, `type_of` would be a top-level function, defined as we saw\n-before.) So, if we wanted to have add a provider for some other query,\n+before.) So, if we want to add a provider for some other query,\n let's call it `fubar`, into the crate above, we might modify the `provide()`\n function like so:\n \n@@ -185,7 +185,7 @@ pub fn provide(providers: &mut Providers) {\n fn fubar<'cx, 'tcx>(tcx: TyCtxt<'cx, 'tcx>, key: DefId) -> Fubar<'tcx> { .. }\n ```\n \n-NB. Most of the `rustc_*` crate only provide **local\n+NB. Most of the `rustc_*` crates only provide **local\n providers**. Almost all **extern providers** wind up going through the\n `rustc_metadata` crate, which loads the information from the crate\n metadata.  But in some cases there are crates that provide queries for\n@@ -201,7 +201,7 @@ Well, defining a query takes place in two steps:\n 1. first, you have to specify the query name and arguments; and then,\n 2. you have to supply query providers where needed.\n \n-The specify the query name and arguments, you simply add an entry\n+To specify the query name and arguments, you simply add an entry\n to the big macro invocation in `mod.rs`. This will probably have changed\n by the time you read this README, but at present it looks something\n like:"}, {"sha": "594cd0878cbfbc62144d3aabfed38bf24350174c", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -3986,6 +3986,10 @@ details.\n \"##,\n \n E0599: r##\"\n+This error occurs when a method is used on a type which doesn't implement it:\n+\n+Erroneous code example:\n+\n ```compile_fail,E0599\n struct Mouth;\n "}, {"sha": "327deb9b419bee6c93ead3b6bf3554c152dfaace", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -411,10 +411,12 @@ pub trait AsciiExt {\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII punctuation character:\n+    ///\n     /// U+0021 ... U+002F `! \" # $ % & ' ( ) * + , - . /`\n     /// U+003A ... U+0040 `: ; < = > ? @`\n-    /// U+005B ... U+0060 `[ \\\\ ] ^ _ \\``\n+    /// U+005B ... U+0060 ``[ \\\\ ] ^ _ ` ``\n     /// U+007B ... U+007E `{ | } ~`\n+    ///\n     /// For strings, true if all characters in the string are\n     /// ASCII punctuation.\n     ///"}, {"sha": "8c34660f821b71b45c20406adf5a4f7a47c1994d", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -41,7 +41,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n-/// [`From`]`<`[`String`]`>`, so you can use `my_string.`[`from`] to\n+/// [`From`]`<`[`String`]`>`, so you can use `my_string.from` to\n /// create an `OsString` from a normal Rust string.\n ///\n /// **From slices:** Just like you can start with an empty Rust\n@@ -63,7 +63,6 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// [`OsStr`]: struct.OsStr.html\n /// [`From`]: ../convert/trait.From.html\n-/// [`from`]: ../convert/trait.From.html#tymethod.from\n /// [`String`]: ../string/struct.String.html\n /// [`&str`]: ../primitive.str.html\n /// [`u8`]: ../primitive.u8.html"}, {"sha": "539ff1df1876f052bb00188edce8504c289e52e3", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -498,18 +498,46 @@ impl TcpStream {\n \n     /// Moves this TCP stream into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in `read`, `write`, `recv` and `send` operations\n+    /// becoming nonblocking, i.e. immediately returning from their calls.\n+    /// If the IO operation is successful, `Ok` is returned and no further\n+    /// action is required. If the IO operation could not be completed and needs\n+    /// to be retried, an error with kind [`io::ErrorKind::WouldBlock`] is\n+    /// returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n     ///\n     /// # Examples\n     ///\n+    /// Reading bytes from a TCP stream in non-blocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io::{self, Read};\n     /// use std::net::TcpStream;\n     ///\n-    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n-    ///                        .expect(\"Couldn't connect to the server...\");\n+    /// let mut stream = TcpStream::connect(\"127.0.0.1:7878\")\n+    ///     .expect(\"Couldn't connect to the server...\");\n     /// stream.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// let mut buf = vec![];\n+    /// loop {\n+    ///     match stream.read_to_end(&mut buf) {\n+    ///         Ok(_) => break,\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     };\n+    /// };\n+    /// println!(\"bytes: {:?}\", buf);\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n@@ -780,17 +808,48 @@ impl TcpListener {\n \n     /// Moves this TCP stream into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in the `accept` operation becoming nonblocking,\n+    /// i.e. immediately returning from their calls. If the IO operation is\n+    /// successful, `Ok` is returned and no further action is required. If the\n+    /// IO operation could not be completed and needs to be retried, an error\n+    /// with kind [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n     ///\n     /// # Examples\n     ///\n+    /// Bind a TCP listener to an address, listen for connections, and read\n+    /// bytes in nonblocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io;\n     /// use std::net::TcpListener;\n     ///\n-    /// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    /// let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n     /// listener.set_nonblocking(true).expect(\"Cannot set non-blocking\");\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// # fn handle_connection(stream: std::net::TcpStream) { unimplemented!() }\n+    /// for stream in listener.incoming() {\n+    ///     match stream {\n+    ///         Ok(s) => {\n+    ///             // do something with the TcpStream\n+    ///             handle_connection(s);\n+    ///         }\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///             continue;\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     }\n+    /// }\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}, {"sha": "870d11298fe3bf6be136277a1b7ad6bbdd562340", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -168,7 +168,7 @@ impl UdpSocket {\n     /// This will return an error when the IP version of the local socket\n     /// does not match that returned from [`ToSocketAddrs`].\n     ///\n-    /// See https://github.com/rust-lang/rust/issues/34202 for more details.\n+    /// See <https://github.com/rust-lang/rust/issues/34202> for more details.\n     ///\n     /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n     ///"}, {"sha": "7c107177c64cd67a83beb6a3b35274183a9be1b0", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -343,7 +343,7 @@ impl Command {\n     /// The search path to be used may be controlled by setting the\n     /// `PATH` environment variable on the Command,\n     /// but this has some implementation limitations on Windows\n-    /// (see https://github.com/rust-lang/rust/issues/37519).\n+    /// (see <https://github.com/rust-lang/rust/issues/37519>).\n     ///\n     /// # Examples\n     ///"}, {"sha": "24c41046f263abf462b914ee937adf453bc28707", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -32,7 +32,7 @@ pub trait FileExt {\n     /// function, it is set to the end of the read.\n     ///\n     /// Reading beyond the end of the file will always return with a length of\n-    /// 0.\n+    /// 0\\.\n     ///\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is"}, {"sha": "281bd790de7b992831a1ff8a589c0fc38c842c95", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -1 +1 @@\n-Subproject commit b62b1b68edcdf23a70cb12f31403c80e97f13634\n+Subproject commit 281bd790de7b992831a1ff8a589c0fc38c842c95"}, {"sha": "e62597c52169fb6a5c15d860a2fcd1534b3794d9", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=7e70546ddbeb8949fcae958d40ead4e4fbcc9d2b", "patch": "@@ -26,7 +26,7 @@\n miri = \"Broken\"\n \n # ping @Manishearth @llogiq @mcarton @oli-obk\n-clippy = \"Broken\"\n+clippy = \"Compiling\"\n \n # ping @nrc\n rls = \"Testing\""}]}