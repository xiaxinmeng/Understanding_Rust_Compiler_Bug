{"sha": "360c0a7a3e787aea059d9a100907dfb5841b3dee", "node_id": "C_kwDOAAsO6NoAKDM2MGMwYTdhM2U3ODdhZWEwNTlkOWExMDA5MDdkZmI1ODQxYjNkZWU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-26T02:20:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-28T22:08:19Z"}, "message": "Tweak shortening logic to be less trigger happy", "tree": {"sha": "5b5d8b82286aaa883915a1fe687e4dd75ef1dfcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5d8b82286aaa883915a1fe687e4dd75ef1dfcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360c0a7a3e787aea059d9a100907dfb5841b3dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360c0a7a3e787aea059d9a100907dfb5841b3dee", "html_url": "https://github.com/rust-lang/rust/commit/360c0a7a3e787aea059d9a100907dfb5841b3dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360c0a7a3e787aea059d9a100907dfb5841b3dee/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7674edeebac02ce9b3ee6434e5a4ab6a085005f9", "html_url": "https://github.com/rust-lang/rust/commit/7674edeebac02ce9b3ee6434e5a4ab6a085005f9"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "7b936c7693b1698a6c94102f266ab21e5095d5cf", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/360c0a7a3e787aea059d9a100907dfb5841b3dee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360c0a7a3e787aea059d9a100907dfb5841b3dee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=360c0a7a3e787aea059d9a100907dfb5841b3dee", "patch": "@@ -2503,7 +2503,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         Some(match (exp_found.expected.unpack(), exp_found.found.unpack()) {\n             (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => {\n                 let (mut exp, mut fnd) = self.cmp(expected, found);\n-                let len = self.tcx.sess().diagnostic_width().saturating_sub(20);\n+                // Use the terminal width as the basis to determine when to compress the printed\n+                // out type, but give ourselves some leeway to avoid ending up creating a file for\n+                // a type that is somewhat shorter than the path we'd write to.\n+                let len = self.tcx.sess().diagnostic_width() + 40;\n                 let exp_s = exp.content();\n                 let fnd_s = fnd.content();\n                 let mut exp_p = None;"}, {"sha": "3fd7a7110fd973191eb0fb6ab0bef6fc09a4cf24", "filename": "src/test/ui/diagnostic-width/long-E0308.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs?ref=360c0a7a3e787aea059d9a100907dfb5841b3dee", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --diagnostic-width=100\n+// compile-flags: --diagnostic-width=60\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n struct Atype<T, K>(T, K);"}, {"sha": "c784995b0e86fa9ec765aae98462679eba3f02c0", "filename": "src/test/ui/diagnostic-width/long-E0308.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=360c0a7a3e787aea059d9a100907dfb5841b3dee", "patch": "@@ -8,35 +8,35 @@ LL |  |         Ctype<\n LL |  |           Atype<\n ...   |\n LL |  |       i32\n-LL |  |     > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+LL |  |     > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n    |  |_____-___^\n    | ||_____|\n    | |      expected due to this\n-LL | |          Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+LL | |          Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n LL | |              Ok(\"\")\n LL | |          ))))))))))))))))))))))))))))))\n LL | |      ))))))))))))))))))))))))))))));\n    | |___________________________________^ expected struct `Atype`, found enum `Result`\n    |\n-   = note: expected struct `Atype<Btype<Ctype<Atype<Btype<Ctype<..., ...>, ...>, ...>, ...>, ...>, ...>`\n+   = note: expected struct `Atype<Btype<Ctype<..., ...>, ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n-                found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+                found enum `Result<Result<..., ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n   --> $DIR/long-E0308.rs:46:26\n    |\n-LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n+LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  __________________________^\n-LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n    | |____________________________^ expected enum `Option`, found enum `Result`\n    |\n-   = note: expected enum `Option<Result<Option<Option<Option<Option<Option<Option<Option<...>>>>>>>, ...>>`\n+   = note: expected enum `Option<Result<Option<Option<...>>, ...>>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n-              found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+              found enum `Result<Result<..., ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n@@ -54,25 +54,25 @@ LL | |     > = ();\n    | |_____|\n    |       expected due to this\n    |\n-   = note: expected struct `Atype<Btype<Ctype<Atype<Btype<Ctype<..., ...>, ...>, ...>, ...>, ...>, ...>`\n+   = note: expected struct `Atype<Btype<Ctype<..., ...>, ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n            found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/long-E0308.rs:80:17\n    |\n-LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  ____________--___^\n    | |            |\n    | |            expected due to this\n-LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n    | |____________________________^ expected `()`, found enum `Result`\n    |\n    = note: expected unit type `()`\n-                   found enum `Result<Result<Result<Result<Result<..., ...>, ...>, ...>, ...>, ...>`\n+                   found enum `Result<Result<..., ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error: aborting due to 4 previous errors"}, {"sha": "90b552a6283957433a19464c1dbd8291fb1b9391", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/360c0a7a3e787aea059d9a100907dfb5841b3dee/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=360c0a7a3e787aea059d9a100907dfb5841b3dee", "patch": "@@ -5,8 +5,7 @@ LL |     vec!['a'].iter().map(|c| c)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Map`\n    |\n    = note: expected unit type `()`\n-                 found struct `Map<std::slice::Iter<'_, char>, ...>`\n-           the full type name has been written to '$TEST_BUILD_DIR/typeck/return_type_containing_closure/return_type_containing_closure.long-type-hash.txt'\n+                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:4:26: 4:29]>`\n help: consider using a semicolon here\n    |\n LL |     vec!['a'].iter().map(|c| c);"}]}