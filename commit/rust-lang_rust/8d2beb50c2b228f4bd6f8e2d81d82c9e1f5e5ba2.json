{"sha": "8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "node_id": "C_kwDOAAsO6NoAKDhkMmJlYjUwYzJiMjI4ZjRiZDZmOGUyZDgxZDgyYzllMWY1ZTViYTI", "commit": {"author": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-03-28T02:22:36Z"}, "committer": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-03-28T03:29:44Z"}, "message": "Allow access to `OsStr` bytes\n\n`OsStr` has historically kept its implementation details private out of\nconcern for locking us into a specific encoding on Windows.\n\nThis is an alternative to #95290 which proposed specifying the encoding on Windows.  Instead, this\nonly specifies that for cross-platform code, `OsStr`'s encoding is a superset of UTF-8 and defines\nrules for safely interacting with it\n\nAt minimum, this can greatly simplify the `os_str_bytes` crate and every\narg parser that interacts with `OsStr` directly (which is most of those\nthat support invalid UTF-8).", "tree": {"sha": "de100128b6cc7933b991384b581f9cef3135724d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de100128b6cc7933b991384b581f9cef3135724d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "html_url": "https://github.com/rust-lang/rust/commit/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/comments", "author": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "committer": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e04bd88d85cab8ed110ace5a278fab106d0ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e04bd88d85cab8ed110ace5a278fab106d0ef5", "html_url": "https://github.com/rust-lang/rust/commit/70e04bd88d85cab8ed110ace5a278fab106d0ef5"}], "stats": {"total": 100, "additions": 91, "deletions": 9}, "files": [{"sha": "3ddb8748753e40c5b5ca440c82155c432e0e975c", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -127,6 +127,14 @@\n //! trait, which provides a [`from_wide`] method to convert a native Windows\n //! string (without the terminating nul character) to an [`OsString`].\n //!\n+//! ## On all platforms\n+//!\n+//! On all platforms, [`OsStr`] consists of a sequence of bytes that is encoded as a superset of\n+//! UTF-8; see [`OsString`] for more details on its encoding on different platforms.\n+//!\n+//! For limited, inexpensive conversions from and to bytes, see [`OsStr::as_os_str_bytes`] and\n+//! [`OsStr::from_os_str_bytes_unchecked`].\n+//!\n //! [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n //! [Unicode code point]: https://www.unicode.org/glossary/#code_point\n //! [`env::set_var()`]: crate::env::set_var \"env::set_var\""}, {"sha": "25ab2196688b0cc59226845b6042c2381aab260e", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -667,6 +667,45 @@ impl OsStr {\n         s.as_ref()\n     }\n \n+    /// Converts a slice of bytes to an OS string slice without checking that the string contains\n+    /// valid `OsStr`-encoded data.\n+    ///\n+    /// See the [module's toplevel documentation about conversions][conversions] for safe,\n+    /// cross-platform [conversions] from/to native representations.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `OsStr`'s encoding is an unspecified superset of UTF-8 and callers must\n+    /// pass in bytes that originated as a mixture of validated UTF-8 and bytes from\n+    /// [`OsStr::as_os_str_bytes`] from within the same rust version built for the same target\n+    /// platform.  The bytes from `OsStr::as_os_str_bytes` may be split either\n+    /// immediately before or immediately after some valid non-empty UTF-8 substring\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(os_str_bytes)]\n+    ///\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"Mary had a little lamb\");\n+    /// let bytes = os_str.as_os_str_bytes();\n+    /// let words = bytes.split(|b| *b == b' ');\n+    /// let words: Vec<&OsStr> = words.map(|word| {\n+    ///     // SAFETY:\n+    ///     // - Each `word` only contains content that originated from `OsStr::as_os_str_bytes`\n+    ///     // - Only split with ASCII whitespace which is a non-empty UTF-8 substring\n+    ///     unsafe { OsStr::from_os_str_bytes_unchecked(word) }\n+    /// }).collect();\n+    /// ```\n+    ///\n+    /// [conversions]: super#conversions\n+    #[inline]\n+    #[unstable(feature = \"os_str_bytes\", issue = \"111544\")]\n+    pub fn from_os_str_bytes_unchecked(bytes: &[u8]) -> &Self {\n+        Self::from_inner(Slice::from_os_str_bytes_unchecked(bytes))\n+    }\n+\n     #[inline]\n     fn from_inner(inner: &Slice) -> &OsStr {\n         // SAFETY: OsStr is just a wrapper of Slice,\n@@ -837,13 +876,28 @@ impl OsStr {\n         OsString { inner: Buf::from_box(boxed) }\n     }\n \n+    /// Converts an OS string slice to a byte slice.  To convert the byte slice back into an OS\n+    /// string slice, use the [`OsStr::from_os_str_bytes_unchecked`] function.\n+    ///\n+    /// Note: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should\n+    /// be treated as opaque and only comparable within the same rust version built for the same\n+    /// target platform.  See [`OsString`] for more encoding details and [`std::ffi`] for\n+    /// platform-specific, specified conversions.\n+    ///\n+    /// [`std::ffi`]: crate::ffi\n+    #[inline]\n+    #[unstable(feature = \"os_str_bytes\", issue = \"111544\")]\n+    pub fn as_os_str_bytes(&self) -> &[u8] {\n+        self.inner.as_os_str_bytes()\n+    }\n+\n     /// Gets the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is not externally public, to avoid\n     /// revealing the internal, platform-specific encodings.\n     #[inline]\n     pub(crate) fn bytes(&self) -> &[u8] {\n-        unsafe { &*(&self.inner as *const _ as *const [u8]) }\n+        self.as_os_str_bytes()\n     }\n \n     /// Converts this string to its ASCII lower case equivalent in-place."}, {"sha": "142fcb9ed0b739f503781380f4330e82c611579e", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -193,13 +193,18 @@ impl Buf {\n \n impl Slice {\n     #[inline]\n-    fn from_u8_slice(s: &[u8]) -> &Slice {\n+    pub fn as_os_str_bytes(&self) -> &[u8] {\n+        &self.inner\n+    }\n+\n+    #[inline]\n+    pub unsafe fn from_os_str_bytes_unchecked(s: &[u8]) -> &Slice {\n         unsafe { mem::transmute(s) }\n     }\n \n     #[inline]\n     pub fn from_str(s: &str) -> &Slice {\n-        Slice::from_u8_slice(s.as_bytes())\n+        unsafe { Slice::from_os_str_bytes_unchecked(s.as_bytes()) }\n     }\n \n     pub fn to_str(&self) -> Option<&str> {"}, {"sha": "91bc0e61a4a5baa41cd3f007e1a969af49efcab2", "filename": "library/std/src/sys/unix/os_str/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n #[test]\n fn slice_debug_output() {\n-    let input = Slice::from_u8_slice(b\"\\xF0hello,\\tworld\");\n+    let input = unsafe { Slice::from_os_str_bytes_unchecked(b\"\\xF0hello,\\tworld\") };\n     let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n     let output = format!(\"{input:?}\");\n \n@@ -11,8 +11,7 @@ fn slice_debug_output() {\n \n #[test]\n fn display() {\n-    assert_eq!(\n-        \"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\",\n-        Slice::from_u8_slice(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").to_string(),\n-    );\n+    assert_eq!(\"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\", unsafe {\n+        Slice::from_os_str_bytes_unchecked(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").to_string()\n+    },);\n }"}, {"sha": "611f0d040f0eb74d6eb3f23b8bbda1eae5d80799", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -151,6 +151,16 @@ impl Buf {\n }\n \n impl Slice {\n+    #[inline]\n+    pub fn as_os_str_bytes(&self) -> &[u8] {\n+        self.inner.as_bytes()\n+    }\n+\n+    #[inline]\n+    pub unsafe fn from_os_str_bytes_unchecked(s: &[u8]) -> &Slice {\n+        mem::transmute(Wtf8::from_bytes_unchecked(s))\n+    }\n+\n     #[inline]\n     pub fn from_str(s: &str) -> &Slice {\n         unsafe { mem::transmute(Wtf8::from_str(s)) }"}, {"sha": "31bb0ad25a656a2b57b9a675607abae02443de37", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=8d2beb50c2b228f4bd6f8e2d81d82c9e1f5e5ba2", "patch": "@@ -570,7 +570,7 @@ impl Wtf8 {\n     /// Since the byte slice is not checked for valid WTF-8, this functions is\n     /// marked unsafe.\n     #[inline]\n-    unsafe fn from_bytes_unchecked(value: &[u8]) -> &Wtf8 {\n+    pub unsafe fn from_bytes_unchecked(value: &[u8]) -> &Wtf8 {\n         mem::transmute(value)\n     }\n \n@@ -614,6 +614,12 @@ impl Wtf8 {\n         Wtf8CodePoints { bytes: self.bytes.iter() }\n     }\n \n+    /// Access raw bytes of WTF-8 data\n+    #[inline]\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes\n+    }\n+\n     /// Tries to convert the string to UTF-8 and return a `&str` slice.\n     ///\n     /// Returns `None` if the string contains surrogates."}]}