{"sha": "985b52be6df504ce6dcef29df61ea20ab9c9323f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NWI1MmJlNmRmNTA0Y2U2ZGNlZjI5ZGY2MWVhMjBhYjljOTMyM2Y=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-12T22:03:33Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T00:03:49Z"}, "message": "Support prefix notation for vstore strings. Closes #2906.", "tree": {"sha": "a39c70608818cb99dce14da30f67fa9aff9f0e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39c70608818cb99dce14da30f67fa9aff9f0e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985b52be6df504ce6dcef29df61ea20ab9c9323f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985b52be6df504ce6dcef29df61ea20ab9c9323f", "html_url": "https://github.com/rust-lang/rust/commit/985b52be6df504ce6dcef29df61ea20ab9c9323f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985b52be6df504ce6dcef29df61ea20ab9c9323f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4de1602226315fcb7ee3b1d7f925b5c361f001d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4de1602226315fcb7ee3b1d7f925b5c361f001d", "html_url": "https://github.com/rust-lang/rust/commit/e4de1602226315fcb7ee3b1d7f925b5c361f001d"}], "stats": {"total": 489, "additions": 252, "deletions": 237}, "files": [{"sha": "6271c35f4945eb088421c3e1022836eee176b3df", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -283,7 +283,7 @@ fn load_crate(filename: str) -> option<crate> {\n             ast::view_item_use(ident, metas, id) {\n                 let name_items = attr::find_meta_items_by_name(metas, \"name\");\n                 let m = if name_items.is_empty() {\n-                    metas + ~[attr::mk_name_value_item_str(@\"name\", *ident)]\n+                    metas + ~[attr::mk_name_value_item_str(@\"name\"/~, *ident)]\n                 } else {\n                     metas\n                 };"}, {"sha": "8816b58d9e61c954ce28a84231f70ad17bf89580", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -45,7 +45,7 @@ fn common_exprs() -> ~[ast::expr] {\n      dse(ast::expr_again),\n      dse(ast::expr_fail(option::none)),\n      dse(ast::expr_fail(option::some(\n-         @dse(ast::expr_lit(@dsl(ast::lit_str(@\"boo\"))))))),\n+         @dse(ast::expr_lit(@dsl(ast::lit_str(@\"boo\"/~))))))),\n      dse(ast::expr_ret(option::none)),\n      dse(ast::expr_lit(@dsl(ast::lit_nil))),\n      dse(ast::expr_lit(@dsl(ast::lit_bool(false)))),"}, {"sha": "597a49305e620eb273f8ed40c6d8131781e5b373", "filename": "src/libcore/task.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -1301,10 +1301,10 @@ fn test_unkillable_nested() {\n #[test]\n fn test_tls_multitask() unsafe {\n     fn my_key(+_x: @str/~) { }\n-    local_data_set(my_key, @\"parent data\");\n+    local_data_set(my_key, @\"parent data\"/~);\n     do task::spawn {\n         assert local_data_get(my_key) == none; // TLS shouldn't carry over.\n-        local_data_set(my_key, @\"child data\");\n+        local_data_set(my_key, @\"child data\"/~);\n         assert *(local_data_get(my_key).get()) == \"child data\";\n         // should be cleaned up for us\n     }\n@@ -1317,15 +1317,15 @@ fn test_tls_multitask() unsafe {\n #[test]\n fn test_tls_overwrite() unsafe {\n     fn my_key(+_x: @str/~) { }\n-    local_data_set(my_key, @\"first data\");\n-    local_data_set(my_key, @\"next data\"); // Shouldn't leak.\n+    local_data_set(my_key, @\"first data\"/~);\n+    local_data_set(my_key, @\"next data\"/~); // Shouldn't leak.\n     assert *(local_data_get(my_key).get()) == \"next data\";\n }\n \n #[test]\n fn test_tls_pop() unsafe {\n     fn my_key(+_x: @str/~) { }\n-    local_data_set(my_key, @\"weasel\");\n+    local_data_set(my_key, @\"weasel\"/~);\n     assert *(local_data_pop(my_key).get()) == \"weasel\";\n     // Pop must remove the data from the map.\n     assert local_data_pop(my_key) == none;\n@@ -1337,12 +1337,12 @@ fn test_tls_modify() unsafe {\n     local_data_modify(my_key, |data| {\n         alt data {\n             some(@val) { fail \"unwelcome value: \" + val }\n-            none       { some(@\"first data\") }\n+            none       { some(@\"first data\"/~) }\n         }\n     });\n     local_data_modify(my_key, |data| {\n         alt data {\n-            some(@\"first data\") { some(@\"next data\") }\n+            some(@\"first data\"/~) { some(@\"next data\"/~) }\n             some(@val)          { fail \"wrong value: \" + val }\n             none                { fail \"missing value\" }\n         }\n@@ -1359,7 +1359,7 @@ fn test_tls_crust_automorestack_memorial_bug() unsafe {\n     // for logging, think vsnprintf) would run on a stack smaller than 1 MB.\n     fn my_key(+_x: @str/~) { }\n     do task::spawn {\n-        unsafe { local_data_set(my_key, @\"hax\"); }\n+        unsafe { local_data_set(my_key, @\"hax\"/~); }\n     }\n }\n \n@@ -1369,7 +1369,7 @@ fn test_tls_multiple_types() unsafe {\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n     do task::spawn {\n-        local_data_set(str_key, @\"string data\");\n+        local_data_set(str_key, @\"string data\"/~);\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);\n     }\n@@ -1381,7 +1381,7 @@ fn test_tls_overwrite_multiple_types() unsafe {\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n     do task::spawn {\n-        local_data_set(str_key, @\"string data\");\n+        local_data_set(str_key, @\"string data\"/~);\n         local_data_set(int_key, @42);\n         // This could cause a segfault if overwriting-destruction is done with\n         // the crazy polymorphic transmute rather than the provided finaliser.\n@@ -1396,10 +1396,10 @@ fn test_tls_cleanup_on_failure() unsafe {\n     fn str_key(+_x: @str/~) { }\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n-    local_data_set(str_key, @\"parent data\");\n+    local_data_set(str_key, @\"parent data\"/~);\n     local_data_set(box_key, @@());\n     do task::spawn { // spawn_linked\n-        local_data_set(str_key, @\"string data\");\n+        local_data_set(str_key, @\"string data\"/~);\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);\n         fail;"}, {"sha": "e148d979b3485b51602615ac15aa91ca0e4f1c29", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -58,7 +58,7 @@ mod tests {\n     #[test]\n     fn test_bump_box_refcount() {\n         unsafe {\n-            let box = @\"box box box\";       // refcount 1\n+            let box = @\"box box box\"/~;       // refcount 1\n             bump_box_refcount(box);         // refcount 2\n             let ptr: *int = transmute(box); // refcount 2\n             let _box1: @str/~ = reinterpret_cast(ptr);"}, {"sha": "eab42a52b5970e19b250493395a92856509aa185", "filename": "src/libstd/json.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -659,8 +659,8 @@ mod tests {\n \n     #[test]\n     fn test_write_str() {\n-        assert to_str(string(@\"\")) == \"\\\"\\\"\";\n-        assert to_str(string(@\"foo\")) == \"\\\"foo\\\"\";\n+        assert to_str(string(@\"\"/~)) == \"\\\"\\\"\"/~;\n+        assert to_str(string(@\"foo\"/~)) == \"\\\"foo\\\"\"/~;\n     }\n \n     #[test]\n@@ -676,7 +676,7 @@ mod tests {\n         assert to_str(list(@~[\n             boolean(false),\n             null,\n-            list(@~[string(@\"foo\\nbar\"), num(3.5f)])\n+            list(@~[string(@\"foo\\nbar\"/~), num(3.5f)])\n         ])) == \"[false, null, [\\\"foo\\\\nbar\\\", 3.5]]\";\n     }\n \n@@ -687,8 +687,8 @@ mod tests {\n         assert to_str(mk_dict(~[\n             (\"a\", boolean(true)),\n             (\"b\", list(@~[\n-                mk_dict(~[(\"c\", string(@\"\\x0c\\r\"))]),\n-                mk_dict(~[(\"d\", string(@\"\"))])\n+                mk_dict(~[(\"c\", string(@\"\\x0c\\r\"/~))]),\n+                mk_dict(~[(\"d\", string(@\"\"/~))])\n             ]))\n         ])) ==\n             \"{ \" +\n@@ -703,35 +703,35 @@ mod tests {\n     #[test]\n     fn test_trailing_characters() {\n         assert from_str(\"nulla\") ==\n-            err({line: 1u, col: 5u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 5u, msg: @\"trailing characters\"/~});\n         assert from_str(\"truea\") ==\n-            err({line: 1u, col: 5u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 5u, msg: @\"trailing characters\"/~});\n         assert from_str(\"falsea\") ==\n-            err({line: 1u, col: 6u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 6u, msg: @\"trailing characters\"/~});\n         assert from_str(\"1a\") ==\n-            err({line: 1u, col: 2u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 2u, msg: @\"trailing characters\"/~});\n         assert from_str(\"[]a\") ==\n-            err({line: 1u, col: 3u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 3u, msg: @\"trailing characters\"/~});\n         assert from_str(\"{}a\") ==\n-            err({line: 1u, col: 3u, msg: @\"trailing characters\"});\n+            err({line: 1u, col: 3u, msg: @\"trailing characters\"/~});\n     }\n \n     #[test]\n     fn test_read_identifiers() {\n         assert from_str(\"n\") ==\n-            err({line: 1u, col: 2u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 2u, msg: @\"invalid syntax\"/~});\n         assert from_str(\"nul\") ==\n-            err({line: 1u, col: 4u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 4u, msg: @\"invalid syntax\"/~});\n \n         assert from_str(\"t\") ==\n-            err({line: 1u, col: 2u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 2u, msg: @\"invalid syntax\"/~});\n         assert from_str(\"truz\") ==\n-            err({line: 1u, col: 4u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 4u, msg: @\"invalid syntax\"/~});\n \n         assert from_str(\"f\") ==\n-            err({line: 1u, col: 2u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 2u, msg: @\"invalid syntax\"/~});\n         assert from_str(\"faz\") ==\n-            err({line: 1u, col: 3u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 3u, msg: @\"invalid syntax\"/~});\n \n         assert from_str(\"null\") == ok(null);\n         assert from_str(\"true\") == ok(boolean(true));\n@@ -744,20 +744,20 @@ mod tests {\n     #[test]\n     fn test_read_num() {\n         assert from_str(\"+\") ==\n-            err({line: 1u, col: 1u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 1u, msg: @\"invalid syntax\"/~});\n         assert from_str(\".\") ==\n-            err({line: 1u, col: 1u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 1u, msg: @\"invalid syntax\"/~});\n \n         assert from_str(\"-\") ==\n-            err({line: 1u, col: 2u, msg: @\"invalid number\"});\n+            err({line: 1u, col: 2u, msg: @\"invalid number\"/~});\n         assert from_str(\"00\") ==\n-            err({line: 1u, col: 2u, msg: @\"invalid number\"});\n+            err({line: 1u, col: 2u, msg: @\"invalid number\"/~});\n         assert from_str(\"1.\") ==\n-            err({line: 1u, col: 3u, msg: @\"invalid number\"});\n+            err({line: 1u, col: 3u, msg: @\"invalid number\"/~});\n         assert from_str(\"1e\") ==\n-            err({line: 1u, col: 3u, msg: @\"invalid number\"});\n+            err({line: 1u, col: 3u, msg: @\"invalid number\"/~});\n         assert from_str(\"1e+\") ==\n-            err({line: 1u, col: 4u, msg: @\"invalid number\"});\n+            err({line: 1u, col: 4u, msg: @\"invalid number\"/~});\n \n         assert from_str(\"3\") == ok(num(3f));\n         assert from_str(\"3.1\") == ok(num(3.1f));\n@@ -772,32 +772,32 @@ mod tests {\n     #[test]\n     fn test_read_str() {\n         assert from_str(\"\\\"\") ==\n-            err({line: 1u, col: 2u, msg: @\"EOF while parsing string\"});\n+            err({line: 1u, col: 2u, msg: @\"EOF while parsing string\"/~});\n         assert from_str(\"\\\"lol\") ==\n-            err({line: 1u, col: 5u, msg: @\"EOF while parsing string\"});\n+            err({line: 1u, col: 5u, msg: @\"EOF while parsing string\"/~});\n \n-        assert from_str(\"\\\"\\\"\") == ok(string(@\"\"));\n-        assert from_str(\"\\\"foo\\\"\") == ok(string(@\"foo\"));\n-        assert from_str(\"\\\"\\\\\\\"\\\"\") == ok(string(@\"\\\"\"));\n-        assert from_str(\"\\\"\\\\b\\\"\") == ok(string(@\"\\x08\"));\n-        assert from_str(\"\\\"\\\\n\\\"\") == ok(string(@\"\\n\"));\n-        assert from_str(\"\\\"\\\\r\\\"\") == ok(string(@\"\\r\"));\n-        assert from_str(\"\\\"\\\\t\\\"\") == ok(string(@\"\\t\"));\n-        assert from_str(\" \\\"foo\\\" \") == ok(string(@\"foo\"));\n+        assert from_str(\"\\\"\\\"\") == ok(string(@\"\"/~));\n+        assert from_str(\"\\\"foo\\\"\") == ok(string(@\"foo\"/~));\n+        assert from_str(\"\\\"\\\\\\\"\\\"\") == ok(string(@\"\\\"\"/~));\n+        assert from_str(\"\\\"\\\\b\\\"\") == ok(string(@\"\\x08\"/~));\n+        assert from_str(\"\\\"\\\\n\\\"\") == ok(string(@\"\\n\"/~));\n+        assert from_str(\"\\\"\\\\r\\\"\") == ok(string(@\"\\r\"/~));\n+        assert from_str(\"\\\"\\\\t\\\"\") == ok(string(@\"\\t\"/~));\n+        assert from_str(\" \\\"foo\\\" \") == ok(string(@\"foo\"/~));\n     }\n \n     #[test]\n     fn test_read_list() {\n         assert from_str(\"[\") ==\n-            err({line: 1u, col: 2u, msg: @\"EOF while parsing value\"});\n+            err({line: 1u, col: 2u, msg: @\"EOF while parsing value\"/~});\n         assert from_str(\"[1\") ==\n-            err({line: 1u, col: 3u, msg: @\"EOF while parsing list\"});\n+            err({line: 1u, col: 3u, msg: @\"EOF while parsing list\"/~});\n         assert from_str(\"[1,\") ==\n-            err({line: 1u, col: 4u, msg: @\"EOF while parsing value\"});\n+            err({line: 1u, col: 4u, msg: @\"EOF while parsing value\"/~});\n         assert from_str(\"[1,]\") ==\n-            err({line: 1u, col: 4u, msg: @\"invalid syntax\"});\n+            err({line: 1u, col: 4u, msg: @\"invalid syntax\"/~});\n         assert from_str(\"[6 7]\") ==\n-            err({line: 1u, col: 4u, msg: @\"expected `,` or `]`\"});\n+            err({line: 1u, col: 4u, msg: @\"expected `,` or `]`\"/~});\n \n         assert from_str(\"[]\") == ok(list(@~[]));\n         assert from_str(\"[ ]\") == ok(list(@~[]));\n@@ -813,28 +813,28 @@ mod tests {\n     #[test]\n     fn test_read_dict() {\n         assert from_str(\"{\") ==\n-            err({line: 1u, col: 2u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 2u, msg: @\"EOF while parsing object\"/~});\n         assert from_str(\"{ \") ==\n-            err({line: 1u, col: 3u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 3u, msg: @\"EOF while parsing object\"/~});\n         assert from_str(\"{1\") ==\n-            err({line: 1u, col: 2u, msg: @\"key must be a string\"});\n+            err({line: 1u, col: 2u, msg: @\"key must be a string\"/~});\n         assert from_str(\"{ \\\"a\\\"\") ==\n-            err({line: 1u, col: 6u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 6u, msg: @\"EOF while parsing object\"/~});\n         assert from_str(\"{\\\"a\\\"\") ==\n-            err({line: 1u, col: 5u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 5u, msg: @\"EOF while parsing object\"/~});\n         assert from_str(\"{\\\"a\\\" \") ==\n-            err({line: 1u, col: 6u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 6u, msg: @\"EOF while parsing object\"/~});\n \n         assert from_str(\"{\\\"a\\\" 1\") ==\n-            err({line: 1u, col: 6u, msg: @\"expected `:`\"});\n+            err({line: 1u, col: 6u, msg: @\"expected `:`\"/~});\n         assert from_str(\"{\\\"a\\\":\") ==\n-            err({line: 1u, col: 6u, msg: @\"EOF while parsing value\"});\n+            err({line: 1u, col: 6u, msg: @\"EOF while parsing value\"/~});\n         assert from_str(\"{\\\"a\\\":1\") ==\n-            err({line: 1u, col: 7u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 7u, msg: @\"EOF while parsing object\"/~});\n         assert from_str(\"{\\\"a\\\":1 1\") ==\n-            err({line: 1u, col: 8u, msg: @\"expected `,` or `}`\"});\n+            err({line: 1u, col: 8u, msg: @\"expected `,` or `}`\"/~});\n         assert from_str(\"{\\\"a\\\":1,\") ==\n-            err({line: 1u, col: 8u, msg: @\"EOF while parsing object\"});\n+            err({line: 1u, col: 8u, msg: @\"EOF while parsing object\"/~});\n \n         assert eq(result::get(from_str(\"{}\")), mk_dict(~[]));\n         assert eq(result::get(from_str(\"{\\\"a\\\": 3}\")),\n@@ -866,7 +866,7 @@ mod tests {\n                       (\"a\", num(1.0f)),\n                       (\"b\", list(@~[\n                           boolean(true),\n-                          string(@\"foo\\nbar\"),\n+                          string(@\"foo\\nbar\"/~),\n                           mk_dict(~[\n                               (\"c\", mk_dict(~[(\"d\", null)]))\n                           ])\n@@ -877,6 +877,6 @@ mod tests {\n     #[test]\n     fn test_multiline_errors() {\n         assert from_str(\"{\\n  \\\"foo\\\":\\n \\\"bar\\\"\") ==\n-            err({line: 3u, col: 8u, msg: @\"EOF while parsing object\"});\n+            err({line: 3u, col: 8u, msg: @\"EOF while parsing object\"/~});\n     }\n }"}, {"sha": "917adfaaecd4b36c012e550797f6aaf95925387e", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -1270,7 +1270,7 @@ mod tests {\n \n     #[test]\n     fn of_string1() {\n-        let sample = @\"0123456789ABCDE\";\n+        let sample = @\"0123456789ABCDE\"/~;\n         let r      = of_str(sample);\n \n         assert char_len(r) == str::char_len(*sample);\n@@ -1330,8 +1330,8 @@ mod tests {\n \n     #[test]\n     fn bal1() {\n-        let init = @ \"1234567890\";\n-        let buf  = @ mut * init;\n+        let init = @\"1234567890\"/~;\n+        let buf  = @mut * init;\n         let mut i = 0;\n         while i < 8 { *buf = *buf + *buf; i+=1;}\n         let sample = @*buf;\n@@ -1352,7 +1352,7 @@ mod tests {\n     #[ignore]\n     fn char_at1() {\n         //Generate a large rope\n-        let mut r = of_str(@ \"123456789\");\n+        let mut r = of_str(@\"123456789\"/~);\n         for uint::range(0u, 10u) |_i| {\n             r = append_rope(r, r);\n         }\n@@ -1384,7 +1384,7 @@ mod tests {\n     #[test]\n     fn concat1() {\n         //Generate a reasonable rope\n-        let chunk = of_str(@ \"123456789\");\n+        let chunk = of_str(@\"123456789\"/~);\n         let mut r = empty();\n         for uint::range(0u, 10u) |_i| {\n             r = append_rope(r, chunk);"}, {"sha": "cfaa7103a58939252c792b149283ea3a295ab943", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -381,7 +381,7 @@ fn dtor_dec() -> fn_decl {\n     let nil_t = @{id: 0, node: ty_nil, span: dummy_sp()};\n     // dtor has one argument, of type ()\n     {inputs: ~[{mode: ast::expl(ast::by_ref),\n-               ty: nil_t, ident: @\"_\", id: 0}],\n+               ty: nil_t, ident: @\"_\"/~, id: 0}],\n      output: nil_t, purity: impure_fn, cf: return_val, constraints: ~[]}\n }\n "}, {"sha": "114daa900aac62548adfe520515f97d85b100653", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -77,7 +77,7 @@ fn mk_sugared_doc_attr(text: str, lo: uint, hi: uint) -> ast::attribute {\n     let lit = spanned(lo, hi, ast::lit_str(@text));\n     let attr = {\n         style: doc_comment_style(text),\n-        value: spanned(lo, hi, ast::meta_name_value(@\"doc\", lit)),\n+        value: spanned(lo, hi, ast::meta_name_value(@\"doc\"/~, lit)),\n         is_sugared_doc: true\n     };\n     ret spanned(lo, hi, attr);\n@@ -97,7 +97,7 @@ fn attr_metas(attrs: ~[ast::attribute]) -> ~[@ast::meta_item] {\n fn desugar_doc_attr(attr: ast::attribute) -> ast::attribute {\n     if attr.node.is_sugared_doc {\n         let comment = get_meta_item_value_str(@attr.node.value).get();\n-        let meta = mk_name_value_item_str(@\"doc\",\n+        let meta = mk_name_value_item_str(@\"doc\"/~,\n                                      strip_doc_comment_decoration(*comment));\n         ret mk_attr(meta);\n     } else {\n@@ -345,13 +345,13 @@ fn foreign_abi(attrs: ~[ast::attribute]) -> either<str, ast::foreign_abi> {\n       option::none {\n         either::right(ast::foreign_abi_cdecl)\n       }\n-      option::some(@\"rust-intrinsic\") {\n+      option::some(@\"rust-intrinsic\"/~) {\n         either::right(ast::foreign_abi_rust_intrinsic)\n       }\n-      option::some(@\"cdecl\") {\n+      option::some(@\"cdecl\"/~) {\n         either::right(ast::foreign_abi_cdecl)\n       }\n-      option::some(@\"stdcall\") {\n+      option::some(@\"stdcall\"/~) {\n         either::right(ast::foreign_abi_stdcall)\n       }\n       option::some(t) {\n@@ -371,8 +371,8 @@ fn find_inline_attr(attrs: ~[ast::attribute]) -> inline_attr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline(always)]\n     do vec::foldl(ia_none, attrs) |ia,attr| {\n         alt attr.node.value.node {\n-          ast::meta_word(@\"inline\") { ia_hint }\n-          ast::meta_list(@\"inline\", items) {\n+          ast::meta_word(@\"inline\"/~) { ia_hint }\n+          ast::meta_list(@\"inline\"/~, items) {\n             if !vec::is_empty(find_meta_items_by_name(items, \"always\")) {\n                 ia_always\n             } else {"}, {"sha": "377d08641519de829bd90ce555cc7d3c2d6c653b", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -250,7 +250,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n \n fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n     do option::iter (sp.expn_info) |ei| {\n-        let ss = option::map_default(ei.callie.span, @\"\",\n+        let ss = option::map_default(ei.callie.span, @\"\"/~,\n                                      |span| @codemap::span_to_str(span, cm));\n         print_diagnostic(*ss, note,\n                          #fmt(\"in expansion of #%s\", ei.callie.name));"}, {"sha": "896ce16f5854c2b1a0c15f6e3221d319ee97580d", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -92,7 +92,7 @@ fn expand(cx: ext_ctxt,\n           _mitem: ast::meta_item,\n           in_items: ~[@ast::item]) -> ~[@ast::item] {\n     fn not_auto_serialize(a: ast::attribute) -> bool {\n-        attr::get_attr_name(a) != @\"auto_serialize\"\n+        attr::get_attr_name(a) != @\"auto_serialize\"/~\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n@@ -154,7 +154,7 @@ impl helpers for ext_ctxt {\n         let args = do vec::map(input_tys) |ty| {\n             {mode: ast::expl(ast::by_ref),\n              ty: ty,\n-             ident: @\"\",\n+             ident: @\"\"/~,\n              id: self.next_id()}\n         };\n \n@@ -350,7 +350,7 @@ fn is_vec_or_str(ty: @ast::ty) -> bool {\n       // This may be wrong if the user has shadowed (!) str\n       ast::ty_path(@{span: _, global: _, idents: ids,\n                              rp: none, types: _}, _)\n-      if ids == ~[@\"str\"] { true }\n+      if ids == ~[@\"str\"/~] { true }\n       _ { false }\n     }\n }\n@@ -529,12 +529,12 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n \n     let ser_inputs: ~[ast::arg] =\n         vec::append(~[{mode: ast::expl(ast::by_ref),\n-                      ty: cx.ty_path(span, ~[@\"__S\"], ~[]),\n-                      ident: @\"__s\",\n+                      ty: cx.ty_path(span, ~[@\"__S\"/~], ~[]),\n+                      ident: @\"__s\"/~,\n                       id: cx.next_id()},\n                      {mode: ast::expl(ast::by_ref),\n                       ty: v_ty,\n-                      ident: @\"__v\",\n+                      ident: @\"__v\"/~,\n                       id: cx.next_id()}],\n                     tp_inputs);\n \n@@ -552,12 +552,12 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n \n     let ser_bnds = @~[\n         ast::bound_trait(cx.ty_path(span,\n-                                    ~[@\"std\", @\"serialization\",\n-                                     @\"serializer\"],\n+                                    ~[@\"std\"/~, @\"serialization\"/~,\n+                                     @\"serializer\"/~],\n                                     ~[]))];\n \n     let ser_tps: ~[ast::ty_param] =\n-        vec::append(~[{ident: @\"__S\",\n+        vec::append(~[{ident: @\"__S\"/~,\n                       id: cx.next_id(),\n                       bounds: ser_bnds}],\n                     vec::map(tps, |tp| cx.clone_ty_param(tp)));\n@@ -749,8 +749,8 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n \n     let deser_inputs: ~[ast::arg] =\n         vec::append(~[{mode: ast::expl(ast::by_ref),\n-                      ty: cx.ty_path(span, ~[@\"__D\"], ~[]),\n-                      ident: @\"__d\",\n+                      ty: cx.ty_path(span, ~[@\"__D\"/~], ~[]),\n+                      ident: @\"__d\"/~,\n                       id: cx.next_id()}],\n                     tp_inputs);\n \n@@ -768,11 +768,11 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n     let deser_bnds = @~[\n         ast::bound_trait(cx.ty_path(\n             span,\n-            ~[@\"std\", @\"serialization\", @\"deserializer\"],\n+            ~[@\"std\"/~, @\"serialization\"/~, @\"deserializer\"/~],\n             ~[]))];\n \n     let deser_tps: ~[ast::ty_param] =\n-        vec::append(~[{ident: @\"__D\",\n+        vec::append(~[{ident: @\"__D\"/~,\n                       id: cx.next_id(),\n                       bounds: deser_bnds}],\n                     vec::map(tps, |tp| {"}, {"sha": "bacfe0d6e10513d3216090b0982cfeee824c98bf", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -38,7 +38,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                   pieces: ~[piece], args: ~[@ast::expr])\n    -> @ast::expr {\n     fn make_path_vec(_cx: ext_ctxt, ident: ast::ident) -> ~[ast::ident] {\n-        ret ~[@\"extfmt\", @\"rt\", ident];\n+        ret ~[@\"extfmt\"/~, @\"rt\"/~, ident];\n     }\n     fn make_rt_path_expr(cx: ext_ctxt, sp: span,\n                          ident: ast::ident) -> @ast::expr {\n@@ -50,7 +50,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n \n     fn make_rt_conv_expr(cx: ext_ctxt, sp: span, cnv: conv) -> @ast::expr {\n         fn make_flags(cx: ext_ctxt, sp: span, flags: ~[flag]) -> @ast::expr {\n-            let mut tmp_expr = make_rt_path_expr(cx, sp, @\"flag_none\");\n+            let mut tmp_expr = make_rt_path_expr(cx, sp, @\"flag_none\"/~);\n             for flags.each |f| {\n                 let fstr = alt f {\n                   flag_left_justify { \"flag_left_justify\" }\n@@ -67,11 +67,11 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n         fn make_count(cx: ext_ctxt, sp: span, cnt: count) -> @ast::expr {\n             alt cnt {\n               count_implied {\n-                ret make_rt_path_expr(cx, sp, @\"count_implied\");\n+                ret make_rt_path_expr(cx, sp, @\"count_implied\"/~);\n               }\n               count_is(c) {\n                 let count_lit = mk_int(cx, sp, c);\n-                let count_is_path = make_path_vec(cx, @\"count_is\");\n+                let count_is_path = make_path_vec(cx, @\"count_is\"/~);\n                 let count_is_args = ~[count_lit];\n                 ret mk_call(cx, sp, count_is_path, count_is_args);\n               }\n@@ -97,10 +97,10 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                          width_expr: @ast::expr, precision_expr: @ast::expr,\n                          ty_expr: @ast::expr) -> @ast::expr {\n             ret mk_rec_e(cx, sp,\n-                         ~[{ident: @\"flags\", ex: flags_expr},\n-                          {ident: @\"width\", ex: width_expr},\n-                          {ident: @\"precision\", ex: precision_expr},\n-                          {ident: @\"ty\", ex: ty_expr}]);\n+                         ~[{ident: @\"flags\"/~, ex: flags_expr},\n+                          {ident: @\"width\"/~, ex: width_expr},\n+                          {ident: @\"precision\"/~, ex: precision_expr},\n+                          {ident: @\"ty\"/~, ex: ty_expr}]);\n         }\n         let rt_conv_flags = make_flags(cx, sp, cnv.flags);\n         let rt_conv_width = make_count(cx, sp, cnv.width);\n@@ -275,7 +275,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n     }\n \n     let arg_vec = mk_fixed_vec_e(cx, fmt_sp, piece_exprs);\n-    ret mk_call(cx, fmt_sp, ~[@\"str\", @\"concat\"], ~[arg_vec]);\n+    ret mk_call(cx, fmt_sp, ~[@\"str\"/~, @\"concat\"/~], ~[arg_vec]);\n }\n //\n // Local Variables:"}, {"sha": "4a3c9e4afec6577eb697c5ed2d8b525712a2dc4b", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -28,8 +28,8 @@ impl proto_parser for parser {\n         };\n         self.bump();\n         let dir = alt dir {\n-          @\"send\" { send }\n-          @\"recv\" { recv }\n+          @\"send\"/~ { send }\n+          @\"recv\"/~ { recv }\n           _ { fail }\n         };\n "}, {"sha": "e55900968e89e07dff1f838db9c679e5f9896f11", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -75,7 +75,7 @@ impl methods for message {\n             );\n \n             let args_ast = vec::append(\n-                ~[cx.arg_mode(@\"pipe\",\n+                ~[cx.arg_mode(@\"pipe\"/~,\n                               cx.ty_path(path(this.data_name())\n                                         .add_tys(cx.ty_vars(this.ty_params))),\n                               ast::by_copy)],\n@@ -92,7 +92,7 @@ impl methods for message {\n             body += #fmt(\"let message = %s::%s(%s);\\n\",\n                          *this.proto.name,\n                          *self.name(),\n-                         str::connect(vec::append_one(arg_names, @\"s\")\n+                         str::connect(vec::append_one(arg_names, @\"s\"/~)\n                                       .map(|x| *x),\n                                       \", \"));\n             body += #fmt(\"pipes::send(pipe, message);\\n\");\n@@ -158,8 +158,8 @@ impl methods for state {\n             let next_name = next.data_name();\n \n             let dir = alt this.dir {\n-              send { @\"server\" }\n-              recv { @\"client\" }\n+              send { @\"server\"/~ }\n+              recv { @\"client\"/~ }\n             };\n \n             let v = cx.variant(name,\n@@ -190,7 +190,7 @@ impl methods for state {\n                   cx.item_ty_poly(\n                       self.data_name(),\n                       cx.ty_path(\n-                          (@\"pipes\" + @(dir.to_str() + \"_packet\"))\n+                          (@\"pipes\"/~ + @(dir.to_str() + \"_packet\"/~))\n                           .add_ty(cx.ty_path(\n                               (self.proto.name + self.data_name())\n                               .add_tys(cx.ty_vars(self.ty_params))))),\n@@ -281,10 +281,10 @@ impl methods for protocol {\n         }\n \n         vec::push(items,\n-                  cx.item_mod(@\"client\",\n+                  cx.item_mod(@\"client\"/~,\n                               client_states));\n         vec::push(items,\n-                  cx.item_mod(@\"server\",\n+                  cx.item_mod(@\"server\"/~,\n                               server_states));\n \n         cx.item_mod(self.name, items)"}, {"sha": "c6a4ba1d916c6ee0d67dcdba27336fb07d1aeb19", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -35,7 +35,8 @@ impl of qq_helper for @ast::crate {\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_crate(*self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_crate\"])\n+        mk_path(cx, sp,\n+                ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_crate\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_crate\"}\n }\n@@ -49,7 +50,8 @@ impl of qq_helper for @ast::expr {\n         }\n     }\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_expr\"])\n+        mk_path(cx, sp,\n+                ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_expr\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_expr\"}\n }\n@@ -63,7 +65,8 @@ impl of qq_helper for @ast::ty {\n         }\n     }\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_ty\"])\n+        mk_path(cx, sp,\n+                ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_ty\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_ty\"}\n }\n@@ -72,7 +75,8 @@ impl of qq_helper for @ast::item {\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_item(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_item\"])\n+        mk_path(cx, sp,\n+                ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_item\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_item\"}\n }\n@@ -81,7 +85,8 @@ impl of qq_helper for @ast::stmt {\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_stmt(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_stmt\"])\n+        mk_path(cx, sp,\n+                ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_stmt\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_stmt\"}\n }\n@@ -90,7 +95,7 @@ impl of qq_helper for @ast::pat {\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_pat(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, ~[@\"syntax\", @\"ext\", @\"qquote\", @\"parse_pat\"])\n+        mk_path(cx, sp, ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"parse_pat\"/~])\n     }\n     fn get_fold_fn() -> str {\"fold_pat\"}\n }\n@@ -228,19 +233,19 @@ fn finish<T: qq_helper>\n     let cx = ecx;\n \n     let cfg_call = || mk_call_(\n-        cx, sp, mk_access(cx, sp, ~[@\"ext_cx\"], @\"cfg\"), ~[]);\n+        cx, sp, mk_access(cx, sp, ~[@\"ext_cx\"/~], @\"cfg\"/~), ~[]);\n \n     let parse_sess_call = || mk_call_(\n-        cx, sp, mk_access(cx, sp, ~[@\"ext_cx\"], @\"parse_sess\"), ~[]);\n+        cx, sp, mk_access(cx, sp, ~[@\"ext_cx\"/~], @\"parse_sess\"/~), ~[]);\n \n     let pcall = mk_call(cx,sp,\n-                       ~[@\"syntax\", @\"parse\", @\"parser\",\n-                        @\"parse_from_source_str\"],\n+                       ~[@\"syntax\"/~, @\"parse\"/~, @\"parser\"/~,\n+                        @\"parse_from_source_str\"/~],\n                        ~[node.mk_parse_fn(cx,sp),\n                         mk_str(cx,sp, fname),\n                         mk_call(cx,sp,\n-                                ~[@\"syntax\",@\"ext\",\n-                                 @\"qquote\", @\"mk_file_substr\"],\n+                                ~[@\"syntax\"/~,@\"ext\"/~,\n+                                 @\"qquote\"/~, @\"mk_file_substr\"/~],\n                                 ~[mk_str(cx,sp, loc.file.name),\n                                  mk_uint(cx,sp, loc.line),\n                                  mk_uint(cx,sp, loc.col)]),\n@@ -252,15 +257,15 @@ fn finish<T: qq_helper>\n     let mut rcall = pcall;\n     if (g_len > 0u) {\n         rcall = mk_call(cx,sp,\n-                        ~[@\"syntax\", @\"ext\", @\"qquote\", @\"replace\"],\n+                        ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~, @\"replace\"/~],\n                         ~[pcall,\n                           mk_uniq_vec_e(cx,sp, qcx.gather.map_to_vec(|g| {\n                              mk_call(cx,sp,\n-                                     ~[@\"syntax\", @\"ext\",\n-                                      @\"qquote\", @g.constr],\n+                                     ~[@\"syntax\"/~, @\"ext\"/~,\n+                                      @\"qquote\"/~, @g.constr],\n                                      ~[g.e])})),\n                          mk_path(cx,sp,\n-                                 ~[@\"syntax\", @\"ext\", @\"qquote\",\n+                                 ~[@\"syntax\"/~, @\"ext\"/~, @\"qquote\"/~,\n                                   @node.get_fold_fn()])]);\n     }\n     ret rcall;"}, {"sha": "b454dcfc0be5136167357efd84386217afa3e6fe", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -18,9 +18,9 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n \n     let argument_gram = ~[\n         ms(mtc_rep(~[\n-            ms(mtc_bb(@\"lhs\",@\"mtcs\", 0u)),\n+            ms(mtc_bb(@\"lhs\"/~,@\"mtcs\"/~, 0u)),\n             ms(mtc_tok(FAT_ARROW)),\n-            ms(mtc_bb(@\"rhs\",@\"tt\", 1u)),\n+            ms(mtc_bb(@\"rhs\"/~,@\"tt\"/~, 1u)),\n         ], some(SEMI), false))];\n \n     let arg_reader = new_tt_reader(cx.parse_sess().span_diagnostic,\n@@ -31,11 +31,11 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n       failure(sp, msg) { cx.span_fatal(sp, msg); }\n     };\n \n-    let lhses = alt arguments.get(@\"lhs\") {\n+    let lhses = alt arguments.get(@\"lhs\"/~) {\n       @seq(s, sp) { s }\n       _ { cx.span_bug(sp, \"wrong-structured lhs\") }\n     };\n-    let rhses = alt arguments.get(@\"rhs\") {\n+    let rhses = alt arguments.get(@\"rhs\"/~) {\n       @seq(s, sp) { s }\n       _ { cx.span_bug(sp, \"wrong-structured rhs\") }\n     };"}, {"sha": "2ab796db3196a73eed202e2033db56b4a3e7ddbe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -259,7 +259,7 @@ class parser {\n                 let name = self.parse_value_ident();\n                 p.bump();\n                 name\n-            } else { @\"\" };\n+            } else { @\"\"/~ };\n \n             {mode: mode, ty: p.parse_ty(false), ident: name,\n              id: p.get_id()}\n@@ -1337,7 +1337,8 @@ class parser {\n                 hi = e.span.hi;\n                 // HACK: turn &[...] into a &-evec\n                 ex = alt e.node {\n-                  expr_vec(*) if m == m_imm {\n+                  expr_vec(*) | expr_lit(@{node: lit_str(_), span: _})\n+                  if m == m_imm {\n                     expr_vstore(e, vstore_slice(self.region_from_name(none)))\n                   }\n                   _ { expr_addr_of(m, e) }\n@@ -1353,7 +1354,8 @@ class parser {\n             hi = e.span.hi;\n             // HACK: turn @[...] into a @-evec\n             ex = alt e.node {\n-              expr_vec(*) if m == m_imm { expr_vstore(e, vstore_box) }\n+              expr_vec(*) | expr_lit(@{node: lit_str(_), span: _})\n+              if m == m_imm { expr_vstore(e, vstore_box) }\n               _ { expr_unary(box(m), e) }\n             };\n           }\n@@ -1364,7 +1366,8 @@ class parser {\n             hi = e.span.hi;\n             // HACK: turn ~[...] into a ~-evec\n             ex = alt e.node {\n-              expr_vec(*) if m == m_imm { expr_vstore(e, vstore_uniq) }\n+              expr_vec(*) | expr_lit(@{node: lit_str(_), span: _})\n+              if m == m_imm { expr_vstore(e, vstore_uniq) }\n               _ { expr_unary(uniq(m), e) }\n             };\n           }\n@@ -2134,12 +2137,16 @@ class parser {\n     fn parse_method_name() -> ident {\n         alt copy self.token {\n           token::BINOP(op) { self.bump(); @token::binop_to_str(op) }\n-          token::NOT { self.bump(); @\"!\" }\n-          token::LBRACKET { self.bump(); self.expect(token::RBRACKET); @\"[]\" }\n+          token::NOT { self.bump(); @\"!\"/~ }\n+          token::LBRACKET {\n+            self.bump();\n+            self.expect(token::RBRACKET);\n+            @\"[]\"/~\n+          }\n           _ {\n             let id = self.parse_value_ident();\n-            if id == @\"unary\" && self.eat(token::BINOP(token::MINUS)) {\n-                @\"unary-\"\n+            if id == @\"unary\"/~ && self.eat(token::BINOP(token::MINUS)) {\n+                @\"unary-\"/~\n             }\n             else { id }\n           }"}, {"sha": "3387b716ec62eb80cca8399631ace7105977720d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -28,8 +28,8 @@ fn name_of_fn(fk: fn_kind) -> ident {\n     alt fk {\n       fk_item_fn(name, _) | fk_method(name, _, _)\n           | fk_ctor(name, _, _, _) { /* FIXME (#2543) */ copy name }\n-      fk_anon(*) | fk_fn_block(*) { @\"anon\" }\n-      fk_dtor(*)                  { @\"drop\" }\n+      fk_anon(*) | fk_fn_block(*) { @\"anon\"/~ }\n+      fk_dtor(*)                  { @\"drop\"/~ }\n     }\n }\n "}, {"sha": "eda52e0dcf4c5fdd73fff369bef63f251e3a7b69", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -51,13 +51,13 @@ fn default_configuration(sess: session, argv0: str, input: input) ->\n \n     ret ~[ // Target bindings.\n          attr::mk_word_item(@os::family()),\n-         mk(@\"target_os\", os::sysname()),\n-         mk(@\"target_family\", os::family()),\n-         mk(@\"target_arch\", arch),\n-         mk(@\"target_libc\", libc),\n+         mk(@\"target_os\"/~, os::sysname()),\n+         mk(@\"target_family\"/~, os::family()),\n+         mk(@\"target_arch\"/~, arch),\n+         mk(@\"target_libc\"/~, libc),\n          // Build bindings.\n-         mk(@\"build_compiler\", argv0),\n-         mk(@\"build_input\", source_name(input))];\n+         mk(@\"build_compiler\"/~, argv0),\n+         mk(@\"build_input\"/~, source_name(input))];\n }\n \n fn build_configuration(sess: session, argv0: str, input: input) ->\n@@ -71,7 +71,7 @@ fn build_configuration(sess: session, argv0: str, input: input) ->\n         {\n             if sess.opts.test && !attr::contains_name(user_cfg, \"test\")\n                {\n-                ~[attr::mk_word_item(@\"test\")]\n+                ~[attr::mk_word_item(@\"test\"/~)]\n             } else { ~[] }\n         };\n     ret vec::append(vec::append(user_cfg, gen_cfg), default_cfg);"}, {"sha": "8daa4ec8e8abfc3431b833adf38f4e342f87153f", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -217,7 +217,7 @@ fn building_library(req_crate_type: crate_type, crate: @ast::crate,\n             alt syntax::attr::first_attr_value_str_by_name(\n                 crate.node.attrs,\n                 \"crate_type\") {\n-              option::some(@\"lib\") { true }\n+              option::some(@\"lib\"/~) { true }\n               _ { false }\n             }\n         }\n@@ -245,7 +245,7 @@ mod test {\n             style: ast::attr_outer,\n             value: ast_util::respan(ast_util::dummy_sp(),\n                 ast::meta_name_value(\n-                    @\"crate_type\",\n+                    @\"crate_type\"/~,\n                     ast_util::respan(ast_util::dummy_sp(),\n                                      ast::lit_str(@t)))),\n             is_sugared_doc: false"}, {"sha": "c16fbabdccef642e4a59115dcf6404bec753421d", "filename": "src/rustc/front/core_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fcore_inject.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -30,11 +30,11 @@ fn inject_libcore_ref(sess: session,\n     let n1 = sess.next_node_id();\n     let n2 = sess.next_node_id();\n \n-    let vi1 = @{node: ast::view_item_use(@\"core\", ~[], n1),\n+    let vi1 = @{node: ast::view_item_use(@\"core\"/~, ~[], n1),\n                 attrs: ~[],\n                 vis: ast::public,\n                 span: dummy_sp()};\n-    let vp = spanned(ast::view_path_glob(ident_to_path(dummy_sp(), @\"core\"),\n+    let vp = spanned(ast::view_path_glob(ident_to_path(dummy_sp(), @\"core\"/~),\n                                          n2));\n     let vi2 = @{node: ast::view_item_import(~[vp]),\n                 attrs: ~[],"}, {"sha": "dfc6286055a2e1f12131d4935d84bde9f6e7cf48", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -192,9 +192,9 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n     let item_ = ast::item_mod(testmod);\n     // This attribute tells resolve to let us call unexported functions\n     let resolve_unexported_attr =\n-        attr::mk_attr(attr::mk_word_item(@\"!resolve_unexported\"));\n+        attr::mk_attr(attr::mk_word_item(@\"!resolve_unexported\"/~));\n     let item: ast::item =\n-        {ident: @\"__test\",\n+        {ident: @\"__test\"/~,\n          attrs: ~[resolve_unexported_attr],\n          id: cx.sess.next_node_id(),\n          node: item_,\n@@ -233,7 +233,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n \n     let item_ = ast::item_fn(decl, ~[], body);\n     let item: ast::item =\n-        {ident: @\"tests\",\n+        {ident: @\"tests\"/~,\n          attrs: ~[],\n          id: cx.sess.next_node_id(),\n          node: item_,\n@@ -248,17 +248,18 @@ fn mk_path(cx: test_ctxt, path: ~[ast::ident]) -> ~[ast::ident] {\n     let is_std = {\n         let items = attr::find_linkage_metas(cx.crate.node.attrs);\n         alt attr::last_meta_item_value_str_by_name(items, \"name\") {\n-          some(@\"std\") { true }\n+          some(@\"std\"/~) { true }\n           _ { false }\n         }\n     };\n     if is_std { path }\n-    else { vec::append(~[@\"std\"], path) }\n+    else { vec::append(~[@\"std\"/~], path) }\n }\n \n // The ast::ty of ~[std::test::test_desc]\n fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::ty {\n-    let test_desc_ty_path = path_node(mk_path(cx, ~[@\"test\", @\"test_desc\"]));\n+    let test_desc_ty_path =\n+        path_node(mk_path(cx, ~[@\"test\"/~, @\"test_desc\"/~]));\n \n     let test_desc_ty: ast::ty =\n         {id: cx.sess.next_node_id(),\n@@ -307,7 +308,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n          span: span};\n \n     let name_field: ast::field =\n-        nospan({mutbl: ast::m_imm, ident: @\"name\", expr: @name_expr});\n+        nospan({mutbl: ast::m_imm, ident: @\"name\"/~, expr: @name_expr});\n \n     let fn_path = path_node(path);\n \n@@ -320,7 +321,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let fn_wrapper_expr = mk_test_wrapper(cx, fn_expr, span);\n \n     let fn_field: ast::field =\n-        nospan({mutbl: ast::m_imm, ident: @\"fn\", expr: fn_wrapper_expr});\n+        nospan({mutbl: ast::m_imm, ident: @\"fn\"/~, expr: fn_wrapper_expr});\n \n     let ignore_lit: ast::lit = nospan(ast::lit_bool(test.ignore));\n \n@@ -331,7 +332,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n          span: span};\n \n     let ignore_field: ast::field =\n-        nospan({mutbl: ast::m_imm, ident: @\"ignore\", expr: @ignore_expr});\n+        nospan({mutbl: ast::m_imm, ident: @\"ignore\"/~, expr: @ignore_expr});\n \n     let fail_lit: ast::lit = nospan(ast::lit_bool(test.should_fail));\n \n@@ -342,7 +343,9 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n          span: span};\n \n     let fail_field: ast::field =\n-        nospan({mutbl: ast::m_imm, ident: @\"should_fail\", expr: @fail_expr});\n+        nospan({mutbl: ast::m_imm,\n+                ident: @\"should_fail\"/~,\n+                expr: @fail_expr});\n \n     let desc_rec_: ast::expr_ =\n         ast::expr_rec(~[name_field, fn_field, ignore_field, fail_field],\n@@ -397,7 +400,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n }\n \n fn mk_main(cx: test_ctxt) -> @ast::item {\n-    let str_pt = path_node(~[@\"str\"]);\n+    let str_pt = path_node(~[@\"str\"/~]);\n     let str_ty = @{id: cx.sess.next_node_id(),\n                    node: ast::ty_path(str_pt, cx.sess.next_node_id()),\n                    span: dummy_sp()};\n@@ -413,7 +416,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n     let args_arg: ast::arg =\n         {mode: ast::expl(ast::by_val),\n          ty: @args_ty,\n-         ident: @\"args\",\n+         ident: @\"args\"/~,\n          id: cx.sess.next_node_id()};\n \n     let ret_ty = {id: cx.sess.next_node_id(),\n@@ -436,7 +439,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n \n     let item_ = ast::item_fn(decl, ~[], body);\n     let item: ast::item =\n-        {ident: @\"main\",\n+        {ident: @\"main\"/~,\n          attrs: ~[],\n          id: cx.sess.next_node_id(),\n          node: item_,\n@@ -448,7 +451,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n \n     // Get the args passed to main so we can pass the to test_main\n-    let args_path = path_node(~[@\"args\"]);\n+    let args_path = path_node(~[@\"args\"/~]);\n \n     let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n \n@@ -457,7 +460,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n          node: args_path_expr_, span: dummy_sp()};\n \n     // Call __test::test to generate the vector of test_descs\n-    let test_path = path_node(~[@\"tests\"]);\n+    let test_path = path_node(~[@\"tests\"/~]);\n \n     let test_path_expr_: ast::expr_ = ast::expr_path(test_path);\n \n@@ -472,7 +475,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n          node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n-    let test_main_path = path_node(mk_path(cx, ~[@\"test\", @\"test_main\"]));\n+    let test_main_path = path_node(mk_path(cx, ~[@\"test\"/~, @\"test_main\"/~]));\n \n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n "}, {"sha": "09713da9c746bff5a21903ad0a13d88e98d0ea1c", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -49,7 +49,7 @@ fn dump_crates(crate_cache: dvec<cache_entry>) {\n         #debug(\"span: %?\", entry.span);\n         #debug(\"hash: %?\", entry.hash);\n         let attrs = ~[\n-            attr::mk_attr(attr::mk_list_item(@\"link\", *entry.metas))\n+            attr::mk_attr(attr::mk_list_item(@\"link\"/~, *entry.metas))\n         ];\n         for attr::find_linkage_attrs(attrs).each |attr| {\n             #debug(\"meta: %s\", pprust::attr_to_str(attr));\n@@ -81,7 +81,7 @@ fn warn_if_multiple_versions(diag: span_handler,\n             for matches.each |match| {\n                 diag.span_note(match.span, \"used here\");\n                 let attrs = ~[\n-                    attr::mk_attr(attr::mk_list_item(@\"link\", *match.metas))\n+                    attr::mk_attr(attr::mk_list_item(@\"link\"/~, *match.metas))\n                 ];\n                 loader::note_linkage_attrs(diag, attrs);\n             }\n@@ -168,7 +168,7 @@ fn metas_with(ident: ast::ident, key: ast::ident,\n \n fn metas_with_ident(ident: ast::ident,\n                     metas: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n-    metas_with(ident, @\"name\", metas)\n+    metas_with(ident, @\"name\"/~, metas)\n }\n \n fn existing_match(e: env, metas: ~[@ast::meta_item], hash: str) ->\n@@ -245,7 +245,7 @@ fn resolve_crate_deps(e: env, cdata: @~[u8]) -> cstore::cnum_map {\n     for decoder::get_crate_deps(cdata).each |dep| {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;\n-        let cmetas = metas_with(dep.vers, @\"vers\", ~[]);\n+        let cmetas = metas_with(dep.vers, @\"vers\"/~, ~[]);\n         #debug(\"resolving dep crate %s ver: %s hash: %s\",\n                *dep.name, *dep.vers, *dep.hash);\n         alt existing_match(e, metas_with_ident(cname, cmetas), *dep.hash) {"}, {"sha": "bd3697a23b2d42741945aaaf1d6bd7cbff3e69a9", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -833,7 +833,7 @@ fn get_crate_vers(data: @~[u8]) -> @str/~ {\n     ret alt attr::last_meta_item_value_str_by_name(\n         attr::find_linkage_metas(attrs), \"vers\") {\n       some(ver) { ver }\n-      none { @\"0.0\" }\n+      none { @\"0.0\"/~ }\n     };\n }\n "}, {"sha": "8b8df41ab43e3e8fb1a706b948e9b1d2a9349832", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -802,7 +802,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n     ebml_w.start_tag(tag_items_data);\n     vec::push(*index, {val: crate_node_id, pos: ebml_w.writer.tell()});\n     encode_info_for_mod(ecx, ebml_w, crate.node.module,\n-                        crate_node_id, ~[], @\"\");\n+                        crate_node_id, ~[], @\"\"/~);\n     visit::visit_crate(*crate, (), visit::mk_vt(@{\n         visit_expr: |_e, _cx, _v| { },\n         visit_item: |i, cx, v, copy ebml_w| {\n@@ -952,18 +952,18 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: @crate) -> ~[attribute] {\n         assert (*ecx.link_meta.vers != \"\");\n \n         let name_item =\n-            attr::mk_name_value_item_str(@\"name\", *ecx.link_meta.name);\n+            attr::mk_name_value_item_str(@\"name\"/~, *ecx.link_meta.name);\n         let vers_item =\n-            attr::mk_name_value_item_str(@\"vers\", *ecx.link_meta.vers);\n+            attr::mk_name_value_item_str(@\"vers\"/~, *ecx.link_meta.vers);\n \n         let other_items =\n             {\n-                let tmp = attr::remove_meta_items_by_name(items, @\"name\");\n-                attr::remove_meta_items_by_name(tmp, @\"vers\")\n+                let tmp = attr::remove_meta_items_by_name(items, @\"name\"/~);\n+                attr::remove_meta_items_by_name(tmp, @\"vers\"/~)\n             };\n \n         let meta_items = vec::append(~[name_item, vers_item], other_items);\n-        let link_item = attr::mk_list_item(@\"link\", meta_items);\n+        let link_item = attr::mk_list_item(@\"link\"/~, meta_items);\n \n         ret attr::mk_attr(link_item);\n     }"}, {"sha": "ed7c76d39ade602daedf8a64c3c24f36eef47fd7", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -67,8 +67,8 @@ fn check_exhaustive(tcx: ty::ctxt, sp: span, pats: ~[@pat]) {\n         alt ty::get(ty).struct {\n           ty::ty_bool {\n             alt check ctor {\n-              val(const_int(1i64)) { some(@\"true\") }\n-              val(const_int(0i64)) { some(@\"false\") }\n+              val(const_int(1i64)) { some(@\"true\"/~) }\n+              val(const_int(0i64)) { some(@\"false\"/~) }\n             }\n           }\n           ty::ty_enum(id, _) {"}, {"sha": "c99c3a3a4fa896266885a556ef0b92ac7c610108", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -458,7 +458,7 @@ fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n               }\n               ast::ty_path(@{span: _, global: _, idents: ids,\n                              rp: none, types: _}, _)\n-              if ids == ~[@\"str\"] && (! uses_vstore.contains_key(t.id)) {\n+              if ids == ~[@\"str\"/~] && (! uses_vstore.contains_key(t.id)) {\n                 cx.sess.span_lint(\n                     old_strs, t.id, it.id,\n                     t.span, \"deprecated str type\");"}, {"sha": "1987dcc0f63afb82d1010d85c40573fb72b67843", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -290,8 +290,8 @@ class ir_maps {\n         alt self.var_kinds[*var] {\n           vk_local(_, name) | vk_arg(_, name, _) {name}\n           vk_field(name) {@(\"self.\" + *name)}\n-          vk_self {@\"self\"}\n-          vk_implicit_ret {@\"<implicit-ret>\"}\n+          vk_self {@\"self\"/~}\n+          vk_implicit_ret {@\"<implicit-ret>\"/~}\n         }\n     }\n "}, {"sha": "532d85645dfa00d6decdae4ac19205748c8e2ac5", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -505,7 +505,7 @@ impl methods for determine_rp_ctxt {\n     fn region_is_relevant(r: @ast::region) -> bool {\n         alt r.node {\n           ast::re_anon {self.anon_implies_rp}\n-          ast::re_named(@\"self\") {true}\n+          ast::re_named(@\"self\"/~) {true}\n           ast::re_named(_) {false}\n         }\n     }"}, {"sha": "fb5c81caeb1214d153a2abed98a1dd4a78175bd5", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -885,7 +885,7 @@ fn resolve_import(e: env, n_id: node_id, name: ast::ident,\n     // import\n     alt e.imports.find(n_id) {\n       some(resolving(sp)) {\n-        e.imports.insert(n_id, resolved(none, none, none, @~[], @\"\", sp));\n+        e.imports.insert(n_id, resolved(none, none, none, @~[], @\"\"/~, sp));\n       }\n       _ { }\n     }"}, {"sha": "c2f9790731954ba02a5f11dbf8b95c7d711dab13", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -560,22 +560,22 @@ class PrimitiveTypeTable {\n     new(atom_table: @AtomTable) {\n         self.primitive_types = atom_hashmap();\n \n-        self.intern(atom_table, @\"bool\",    ty_bool);\n-        self.intern(atom_table, @\"char\",    ty_int(ty_char));\n-        self.intern(atom_table, @\"float\",   ty_float(ty_f));\n-        self.intern(atom_table, @\"f32\",     ty_float(ty_f32));\n-        self.intern(atom_table, @\"f64\",     ty_float(ty_f64));\n-        self.intern(atom_table, @\"int\",     ty_int(ty_i));\n-        self.intern(atom_table, @\"i8\",      ty_int(ty_i8));\n-        self.intern(atom_table, @\"i16\",     ty_int(ty_i16));\n-        self.intern(atom_table, @\"i32\",     ty_int(ty_i32));\n-        self.intern(atom_table, @\"i64\",     ty_int(ty_i64));\n-        self.intern(atom_table, @\"str\",     ty_str);\n-        self.intern(atom_table, @\"uint\",    ty_uint(ty_u));\n-        self.intern(atom_table, @\"u8\",      ty_uint(ty_u8));\n-        self.intern(atom_table, @\"u16\",     ty_uint(ty_u16));\n-        self.intern(atom_table, @\"u32\",     ty_uint(ty_u32));\n-        self.intern(atom_table, @\"u64\",     ty_uint(ty_u64));\n+        self.intern(atom_table, @\"bool\"/~,    ty_bool);\n+        self.intern(atom_table, @\"char\"/~,    ty_int(ty_char));\n+        self.intern(atom_table, @\"float\"/~,   ty_float(ty_f));\n+        self.intern(atom_table, @\"f32\"/~,     ty_float(ty_f32));\n+        self.intern(atom_table, @\"f64\"/~,     ty_float(ty_f64));\n+        self.intern(atom_table, @\"int\"/~,     ty_int(ty_i));\n+        self.intern(atom_table, @\"i8\"/~,      ty_int(ty_i8));\n+        self.intern(atom_table, @\"i16\"/~,     ty_int(ty_i16));\n+        self.intern(atom_table, @\"i32\"/~,     ty_int(ty_i32));\n+        self.intern(atom_table, @\"i64\"/~,     ty_int(ty_i64));\n+        self.intern(atom_table, @\"str\"/~,     ty_str);\n+        self.intern(atom_table, @\"uint\"/~,    ty_uint(ty_u));\n+        self.intern(atom_table, @\"u8\"/~,      ty_uint(ty_u8));\n+        self.intern(atom_table, @\"u16\"/~,     ty_uint(ty_u16));\n+        self.intern(atom_table, @\"u32\"/~,     ty_uint(ty_u32));\n+        self.intern(atom_table, @\"u64\"/~,     ty_uint(ty_u64));\n     }\n \n     fn intern(atom_table: @AtomTable, string: @str/~,\n@@ -651,7 +651,7 @@ class Resolver {\n         self.type_ribs = @dvec();\n         self.xray_context = NoXray;\n \n-        self.self_atom = (*self.atom_table).intern(@\"self\");\n+        self.self_atom = (*self.atom_table).intern(@\"self\"/~);\n         self.primitive_type_table = @PrimitiveTypeTable(self.atom_table);\n \n         self.namespaces = ~[ ModuleNS, TypeNS, ValueNS, ImplNS ];\n@@ -4234,7 +4234,7 @@ class Resolver {\n                     current_module = module;\n                 }\n                 BlockParentLink(module, node_id) {\n-                    atoms.push((*self.atom_table).intern(@\"<opaque>\"));\n+                    atoms.push((*self.atom_table).intern(@\"<opaque>\"/~));\n                     current_module = module;\n                 }\n             }"}, {"sha": "17d00eb2ed959820600cc27fcabfc41e2c73fa52", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -486,8 +486,8 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     let llalign = llalign_of(ccx, llty);\n     //XXX this triggers duplicate LLVM symbols\n     let name = if false /*ccx.sess.opts.debuginfo*/ {\n-        mangle_internal_name_by_type_only(ccx, t, @\"tydesc\")\n-    } else { mangle_internal_name_by_seq(ccx, @\"tydesc\") };\n+        mangle_internal_name_by_type_only(ccx, t, @\"tydesc\"/~)\n+    } else { mangle_internal_name_by_seq(ccx, @\"tydesc\"/~) };\n     note_unique_llvm_symbol(ccx, name);\n     log(debug, #fmt(\"+++ declare_tydesc %s %s\", ty_to_str(ccx.tcx, t), name));\n     let gvar = str::as_c_str(name, |buf| {\n@@ -667,8 +667,8 @@ fn incr_refcnt_of_boxed(cx: block, box_ptr: ValueRef) {\n fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(\"make_visit_glue\");\n     let mut bcx = bcx;\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(@\"ty_visitor\");\n-    let (iid, ty) = bcx.ccx().tcx.intrinsic_defs.get(@\"ty_visitor\");\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key(@\"ty_visitor\"/~);\n+    let (iid, ty) = bcx.ccx().tcx.intrinsic_defs.get(@\"ty_visitor\"/~);\n     let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n     bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, iid);\n     build_return(bcx);\n@@ -2131,7 +2131,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n              must_cast: true};\n       }\n       ast_map::node_ctor(nm, _, ct, _, pt) { (pt, nm, ct.span) }\n-      ast_map::node_dtor(_, dtor, _, pt) {(pt, @\"drop\", dtor.span)}\n+      ast_map::node_dtor(_, dtor, _, pt) {(pt, @\"drop\"/~, dtor.span)}\n       ast_map::node_expr(*) { ccx.tcx.sess.bug(\"Can't monomorphize an expr\") }\n       ast_map::node_export(*) {\n           ccx.tcx.sess.bug(\"Can't monomorphize an export\")\n@@ -3825,7 +3825,7 @@ fn trans_log(log_ex: @ast::expr, lvl: @ast::expr,\n         ccx.module_data.get(modname)\n     } else {\n         let s = link::mangle_internal_name_by_path_and_seq(\n-            ccx, modpath, @\"loglevel\");\n+            ccx, modpath, @\"loglevel\"/~);\n         let global = str::as_c_str(s, |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, T_i32(), buf)\n         });\n@@ -4563,7 +4563,7 @@ fn trans_enum_variant(ccx: @crate_ctxt, enum_id: ast::node_id,\n     let fn_args = vec::map(variant.node.args, |varg|\n         {mode: ast::expl(ast::by_copy),\n          ty: varg.ty,\n-         ident: @\"arg\",\n+         ident: @\"arg\"/~,\n          id: varg.id});\n     let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, variant.node.id,\n                                param_substs, none);\n@@ -5215,7 +5215,7 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n         let path = item_path(ccx, it);\n         for vec::each(variants) |variant| {\n             let p = vec::append(path, ~[path_name(variant.node.name),\n-                                       path_name(@\"discrim\")]);\n+                                       path_name(@\"discrim\"/~)]);\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n             let disr_val = vi[i].disr_val;\n             note_unique_llvm_symbol(ccx, s);"}, {"sha": "6b90ec30ab3befe38fd2727eeb3a1a3e5e0b3ca0", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -365,7 +365,7 @@ fn trans_expr_fn(bcx: block,\n     let ccx = bcx.ccx(), bcx = bcx;\n     let fty = node_id_type(bcx, id);\n     let llfnty = type_of_fn_from_ty(ccx, fty);\n-    let sub_path = vec::append_one(bcx.fcx.path, path_name(@\"anon\"));\n+    let sub_path = vec::append_one(bcx.fcx.path, path_name(@\"anon\"/~));\n     let s = mangle_internal_name_by_path(ccx, sub_path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n "}, {"sha": "2a054b9fe7b3d43c3f99198726faf1cdf80dcff3", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -1001,7 +1001,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n         let _icx = ccx.insn_ctxt(\"foreign::foreign::build_rust_fn\");\n         let t = ty::node_id_to_type(ccx.tcx, id);\n         let ps = link::mangle_internal_name_by_path(\n-            ccx, vec::append_one(path, ast_map::path_name(@\"__rust_abi\")));\n+            ccx, vec::append_one(path, ast_map::path_name(@\"__rust_abi\"/~)));\n         let llty = type_of_fn_from_ty(ccx, t);\n         let llfndecl = decl_internal_cdecl_fn(ccx.llmod, ps, llty);\n         trans_fn(ccx, path, decl, body, llfndecl, no_self, none, id);\n@@ -1039,7 +1039,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n \n         let shim_name = link::mangle_internal_name_by_path(\n             ccx, vec::append_one(path,\n-                                 ast_map::path_name(@\"__rust_stack_shim\")));\n+                                 ast_map::path_name(@\"__rust_stack_shim\"/~)));\n         ret build_shim_fn_(ccx, shim_name, llrustfn, tys,\n                            lib::llvm::CCallConv,\n                            build_args, build_ret);"}, {"sha": "ec9e68ae1c0fe9ba712b108775d18e12715e3170", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -297,8 +297,8 @@ fn emit_calls_to_trait_visit_ty(bcx: block, t: ty::t,\n                                 visitor_iid: def_id) -> block {\n \n     let final = sub_block(bcx, \"final\");\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(@\"tydesc\");\n-    let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(@\"tydesc\");\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key(@\"tydesc\"/~);\n+    let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(@\"tydesc\"/~);\n     let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n     let r = reflector({\n         visitor_val: visitor_val,"}, {"sha": "607c20573ec10d82ecc8d735afaa4c3ab4ebb985", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -730,7 +730,7 @@ fn simplify_type(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n           ty::ty_class(did, substs) {\n             let simpl_fields = (if is_some(ty::ty_dtor(tcx, did)) {\n                 // remember the drop flag\n-                  ~[{ident: @\"drop\", mt: {ty:\n+                  ~[{ident: @\"drop\"/~, mt: {ty:\n                                         ty::mk_u8(tcx),\n                                         mutbl: ast::m_mutbl}}] }\n                 else { ~[] }) +"}, {"sha": "a0a3c818e5f48a8b55910f3fee3404eb8a80bebe", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -2661,7 +2661,7 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n             vec::append_one(*path, ast_map::path_name(nm))\n           }\n           ast_map::node_dtor(_, _, _, path) {\n-            vec::append_one(*path, ast_map::path_name(@\"dtor\"))\n+            vec::append_one(*path, ast_map::path_name(@\"dtor\"/~))\n           }\n \n "}, {"sha": "10b7ff78df7a32c746e9c03ffd1e49649aa42ebe", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -1625,7 +1625,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         let p_ty = fcx.expr_ty(p);\n \n         let lkup = method::lookup(fcx, p, p, expr.id, alloc_id,\n-                                  @\"alloc\", p_ty, ~[], false);\n+                                  @\"alloc\"/~, p_ty, ~[], false);\n         alt lkup.method() {\n           some(entry) {\n             fcx.ccx.method_map.insert(alloc_id, entry);\n@@ -2282,10 +2282,10 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n         (1u, ~[], ty::mk_nil_ptr(tcx))\n       }\n       \"visit_tydesc\" {\n-        assert ccx.tcx.intrinsic_defs.contains_key(@\"tydesc\");\n-        assert ccx.tcx.intrinsic_defs.contains_key(@\"ty_visitor\");\n-        let (_, tydesc_ty) = ccx.tcx.intrinsic_defs.get(@\"tydesc\");\n-        let (_, visitor_trait) = ccx.tcx.intrinsic_defs.get(@\"ty_visitor\");\n+        assert ccx.tcx.intrinsic_defs.contains_key(@\"tydesc\"/~);\n+        assert ccx.tcx.intrinsic_defs.contains_key(@\"ty_visitor\"/~);\n+        let (_, tydesc_ty) = ccx.tcx.intrinsic_defs.get(@\"tydesc\"/~);\n+        let (_, visitor_trait) = ccx.tcx.intrinsic_defs.get(@\"ty_visitor\"/~);\n         let td_ptr = ty::mk_ptr(ccx.tcx, {ty: tydesc_ty,\n                                           mutbl: ast::m_imm});\n         (0u, ~[arg(ast::by_val, td_ptr),"}, {"sha": "90ff2fd322865bfa3db0106d5c3eb49553e1e666", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -74,7 +74,7 @@ fn local_rhs_span(l: @ast::local, def: span) -> span {\n fn is_main_name(path: syntax::ast_map::path) -> bool {\n     // FIXME (#34): path should be a constrained type, so we know\n     // the call to last doesn't fail.\n-    vec::last(path) == syntax::ast_map::path_name(@\"main\")\n+    vec::last(path) == syntax::ast_map::path_name(@\"main\"/~)\n }\n \n //"}, {"sha": "52dc7cabee0dea51b8cf1ca470087542648e354b", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -116,7 +116,7 @@ fn pandoc_header_id(header: str) -> str {\n         let s = str::replace(s, \"]\", \"\");\n         let s = str::replace(s, \"(\", \"\");\n         let s = str::replace(s, \")\", \"\");\n-        let s = str::replace(s, \"@\", \"\");\n+        let s = str::replace(s, \"@\", \"/~\"/~);\n         let s = str::replace(s, \"~\", \"\");\n         let s = str::replace(s, \"/\", \"\");\n         let s = str::replace(s, \":\", \"\");"}, {"sha": "8da8043c854b4924ee5a96f908226d7862f0c14d", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -5,7 +5,7 @@ fn failfn() {\n }\n \n fn main() {\n-    let x = @\"hi\";\n+    let x = @\"hi\"/~;\n     failfn();\n     log(error, x);\n }\n\\ No newline at end of file"}, {"sha": "f76d710d502e3b217d8a6aee6213dfc339d6dc65", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     let cheese = \"roquefort\";\n-    let carrots = @\"crunchy\";\n+    let carrots = @\"crunchy\"/~;\n \n     fn@(tasties: @str/~, macerate: fn(str)) {\n         macerate(*tasties);"}, {"sha": "72b176e80c55e3c27fde9bdcb97898775e62bddf", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -18,8 +18,8 @@ fn main() {\n     let map = map::hashmap(hash, eq);\n     let mut arr = ~[];\n     for uint::range(0u, 10u) |i| {\n-        arr += ~[@\"key stuff\"];\n-        map.insert(arr, arr + ~[@\"value stuff\"]);\n+        arr += ~[@\"key stuff\"/~];\n+        map.insert(arr, arr + ~[@\"value stuff\"/~]);\n     }\n-    map.insert(~[@\"boom\"], ~[]);\n+    map.insert(~[@\"boom\"/~], ~[]);\n }"}, {"sha": "3102166b3903e1194be0b57bad85f6ee2db43c0c", "filename": "src/test/run-pass/box-compare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     assert (@1 < @3);\n-    assert (@@\"hello \" > @@\"hello\");\n-    assert (@@@\"hello\" != @@@\"there\");\n+    assert (@@\"hello \"/~ > @@\"hello\"/~);\n+    assert (@@@\"hello\"/~ != @@@\"there\"/~);\n }"}, {"sha": "6a3025be697bbe101f56deb1114d9c25cfefc6f6", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -10,7 +10,7 @@ import std::map::str_hash;\n import dvec;\n \n fn main() {\n-  let v = ~[mut @\"hi\"];\n+  let v = ~[mut @\"hi\"/~];\n   let m: req::header_map = str_hash();\n   m.insert(\"METHOD\", @dvec::from_vec(v));\n   request::<int>(m);"}, {"sha": "25f23bdf384686d5bf4e4981c1c29adf6b92cb2b", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -6,7 +6,7 @@ fn perform_hax<T>(x: @T) -> hax {\n }\n \n fn deadcode() {\n-    perform_hax(@\"deadcode\");\n+    perform_hax(@\"deadcode\"/~);\n }\n \n fn main() {"}, {"sha": "6c2f28c88b6f882d5ada2b312b9a91bd925139a1", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985b52be6df504ce6dcef29df61ea20ab9c9323f/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=985b52be6df504ce6dcef29df61ea20ab9c9323f", "patch": "@@ -6,7 +6,7 @@ fn perform_hax<T>(x: @T) -> hax {\n }\n \n fn deadcode() {\n-    perform_hax(@\"deadcode\");\n+    perform_hax(@\"deadcode\"/~);\n }\n \n fn main() {"}]}