{"sha": "713a360560ab70651d10f09c9949673fa5e42fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxM2EzNjA1NjBhYjcwNjUxZDEwZjA5Yzk5NDk2NzNmYTVlNDJmY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-04T21:14:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-04T21:14:48Z"}, "message": "Auto merge of #37356 - cristicbz:wrapsum, r=alexcrichton\n\nAdd impls for `&Wrapping`. Also `Sum`, `Product` impls for both `Wrapping` and `&Wrapping`.\n\nThere are two changes here (split into two commits):\n- Ops for references to `&Wrapping`  (`Add`, `Sub`, `Mul` etc.) similar to the way they are implemented for primitives.\n- Impls for `iter::{Sum,Product}` for `Wrapping`.\n\nAs far as I know `impl` stability attributes don't really matter so I didn't bother breaking up the macro for two different kinds of stability. Happy to change if it does matter.", "tree": {"sha": "22ab79e011a9a40c74bd0d843f124c69d5a3be81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22ab79e011a9a40c74bd0d843f124c69d5a3be81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713a360560ab70651d10f09c9949673fa5e42fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713a360560ab70651d10f09c9949673fa5e42fcd", "html_url": "https://github.com/rust-lang/rust/commit/713a360560ab70651d10f09c9949673fa5e42fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713a360560ab70651d10f09c9949673fa5e42fcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "html_url": "https://github.com/rust-lang/rust/commit/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f"}, {"sha": "df0e5a97fb326ade900567d80977f40b83aea565", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0e5a97fb326ade900567d80977f40b83aea565", "html_url": "https://github.com/rust-lang/rust/commit/df0e5a97fb326ade900567d80977f40b83aea565"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "f2cdc9d6a98c540de1c55271509687c2f0a89b71", "filename": "src/libcore/internal_macros.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=713a360560ab70651d10f09c9949673fa5e42fcd", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// implements the unary operator \"op &T\"\n+// based on \"op T\" where T is expected to be `Copy`able\n+macro_rules! forward_ref_unop {\n+    (impl $imp:ident, $method:ident for $t:ty) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp for &'a $t {\n+            type Output = <$t as $imp>::Output;\n+\n+            #[inline]\n+            fn $method(self) -> <$t as $imp>::Output {\n+                $imp::$method(*self)\n+            }\n+        }\n+    }\n+}\n+\n+// implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n+// based on \"T op U\" where T and U are expected to be `Copy`able\n+macro_rules! forward_ref_binop {\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp<$u> for &'a $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, other)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a> $imp<&'a $u> for $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(self, *other)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, *other)\n+            }\n+        }\n+    }\n+}"}, {"sha": "bc4be073c5f9838bd687bef743ba25c077b5502c", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=713a360560ab70651d10f09c9949673fa5e42fcd", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n use ops::{Mul, Add};\n+use num::Wrapping;\n \n /// Conversion from an `Iterator`.\n ///\n@@ -584,35 +585,39 @@ pub trait Product<A = Self>: Sized {\n \n // NB: explicitly use Add and Mul here to inherit overflow checks\n macro_rules! integer_sum_product {\n-    ($($a:ident)*) => ($(\n+    (@impls $zero:expr, $one:expr, $($a:ty)*) => ($(\n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n-                iter.fold(0, Add::add)\n+                iter.fold($zero, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n             fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n-                iter.fold(1, Mul::mul)\n+                iter.fold($one, Mul::mul)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n-                iter.cloned().fold(0, Add::add)\n+                iter.fold($zero, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n-                iter.cloned().fold(1, Mul::mul)\n+                iter.fold($one, Mul::mul)\n             }\n         }\n-    )*)\n+    )*);\n+    ($($a:ty)*) => (\n+        integer_sum_product!(@impls 0, 1, $($a)+);\n+        integer_sum_product!(@impls Wrapping(0), Wrapping(1), $(Wrapping<$a>)+);\n+    );\n }\n \n macro_rules! float_sum_product {"}, {"sha": "07f5e725e2003bbcb7001b448a1072972e33e83d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=713a360560ab70651d10f09c9949673fa5e42fcd", "patch": "@@ -100,6 +100,9 @@ use prelude::v1::*;\n #[macro_use]\n mod macros;\n \n+#[macro_use]\n+mod internal_macros;\n+\n #[path = \"num/float_macros.rs\"]\n #[macro_use]\n mod float_macros;"}, {"sha": "50d64838a5c0b0507af36fc83ff86c716df3781d", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=713a360560ab70651d10f09c9949673fa5e42fcd", "patch": "@@ -131,6 +131,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_add(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl AddAssign for Wrapping<$t> {\n@@ -149,6 +150,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_sub(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl SubAssign for Wrapping<$t> {\n@@ -167,6 +169,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_mul(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Mul, mul for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl MulAssign for Wrapping<$t> {\n@@ -185,6 +188,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_div(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl DivAssign for Wrapping<$t> {\n@@ -203,6 +207,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0.wrapping_rem(other.0))\n             }\n         }\n+        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl RemAssign for Wrapping<$t> {\n@@ -221,6 +226,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(!self.0)\n             }\n         }\n+        forward_ref_unop! { impl Not, not for Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitXor for Wrapping<$t> {\n@@ -231,6 +237,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 ^ other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitXorAssign for Wrapping<$t> {\n@@ -249,6 +256,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 | other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitOrAssign for Wrapping<$t> {\n@@ -267,6 +275,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(self.0 & other.0)\n             }\n         }\n+        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitAndAssign for Wrapping<$t> {\n@@ -284,6 +293,7 @@ macro_rules! wrapping_impl {\n                 Wrapping(0) - self\n             }\n         }\n+        forward_ref_unop! { impl Neg, neg for Wrapping<$t> }\n     )*)\n }\n "}, {"sha": "07ae5b920b27b1b61399823fb5d520e75ff86c56", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a360560ab70651d10f09c9949673fa5e42fcd/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=713a360560ab70651d10f09c9949673fa5e42fcd", "patch": "@@ -196,58 +196,6 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-// implements the unary operator \"op &T\"\n-// based on \"op T\" where T is expected to be `Copy`able\n-macro_rules! forward_ref_unop {\n-    (impl $imp:ident, $method:ident for $t:ty) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp for &'a $t {\n-            type Output = <$t as $imp>::Output;\n-\n-            #[inline]\n-            fn $method(self) -> <$t as $imp>::Output {\n-                $imp::$method(*self)\n-            }\n-        }\n-    }\n-}\n-\n-// implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n-// based on \"T op U\" where T and U are expected to be `Copy`able\n-macro_rules! forward_ref_binop {\n-    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp<$u> for &'a $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(*self, other)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> $imp<&'a $u> for $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(self, *other)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n-            type Output = <$t as $imp<$u>>::Output;\n-\n-            #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n-                $imp::$method(*self, *other)\n-            }\n-        }\n-    }\n-}\n-\n /// The `Add` trait is used to specify the functionality of `+`.\n ///\n /// # Examples"}]}