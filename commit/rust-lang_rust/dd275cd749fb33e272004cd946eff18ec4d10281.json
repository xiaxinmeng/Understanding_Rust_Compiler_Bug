{"sha": "dd275cd749fb33e272004cd946eff18ec4d10281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMjc1Y2Q3NDlmYjMzZTI3MjAwNGNkOTQ2ZWZmMThlYzRkMTAyODE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-17T19:51:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-17T19:55:04Z"}, "message": "Stop using temporary intrinsic_2 functions", "tree": {"sha": "2320f18486a8ad97f0bb4a9d650e466cc77c394a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2320f18486a8ad97f0bb4a9d650e466cc77c394a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd275cd749fb33e272004cd946eff18ec4d10281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd275cd749fb33e272004cd946eff18ec4d10281", "html_url": "https://github.com/rust-lang/rust/commit/dd275cd749fb33e272004cd946eff18ec4d10281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd275cd749fb33e272004cd946eff18ec4d10281/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ad5978d9fb966ad87b9afff13e5e567a522f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ad5978d9fb966ad87b9afff13e5e567a522f08", "html_url": "https://github.com/rust-lang/rust/commit/e7ad5978d9fb966ad87b9afff13e5e567a522f08"}], "stats": {"total": 420, "additions": 225, "deletions": 195}, "files": [{"sha": "3e6eda110d83766f840f01bbe564d235537a3733", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=dd275cd749fb33e272004cd946eff18ec4d10281", "patch": "@@ -5724,7 +5724,7 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, _path: [str], name: str,\n       ast::native_abi_rust_intrinsic. {\n         let num_ty_param = native_fn_ty_param_count(ccx, id);\n         let fn_type = native_fn_wrapper_type(ccx, sp, num_ty_param, fn_type);\n-        let ri_name = \"rust_intrinsic_2_\" + name;\n+        let ri_name = \"rust_intrinsic_\" + name;\n         let llnativefn = get_extern_fn(ccx.externs, ccx.llmod, ri_name,\n                                        lib::llvm::LLVMCCallConv, fn_type);\n         ccx.item_ids.insert(id, llnativefn);"}, {"sha": "8806ee45031c534b779f143937195278efa30af8", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=dd275cd749fb33e272004cd946eff18ec4d10281", "patch": "@@ -16,7 +16,7 @@ extern \"C\" CDECL void\n rust_task_sleep(size_t time_in_us);\n \n extern \"C\" void\n-rust_intrinsic_2_vec_len(size_t *retptr,\n+rust_intrinsic_vec_len(size_t *retptr,\n                          void *env,\n                          type_desc *ty,\n                          rust_vec **vp)\n@@ -25,7 +25,7 @@ rust_intrinsic_2_vec_len(size_t *retptr,\n }\n \n extern \"C\" void\n-rust_intrinsic_2_ptr_offset(void **retptr,\n+rust_intrinsic_ptr_offset(void **retptr,\n                           void *env,\n                           type_desc *ty,\n                           void *ptr,\n@@ -35,7 +35,7 @@ rust_intrinsic_2_ptr_offset(void **retptr,\n }\n \n extern \"C\" void\n-rust_intrinsic_2_cast(void *retptr,\n+rust_intrinsic_cast(void *retptr,\n                     void *env,\n                     type_desc *t1,\n                     type_desc *t2,\n@@ -51,91 +51,97 @@ rust_intrinsic_2_cast(void *retptr,\n }\n \n extern \"C\" void\n-rust_intrinsic_2_addr_of(void **retptr,\n+rust_intrinsic_addr_of(void **retptr,\n                        void *env,\n                        type_desc *ty,\n                        void *valptr) {\n     *retptr = valptr;\n }\n \n extern \"C\" void\n-rust_intrinsic_2_recv(void **retptr,\n+rust_intrinsic_recv(void **retptr,\n                     void *env,\n                     type_desc *ty,\n                     rust_port *port) {\n     port_recv((uintptr_t*)retptr, port);\n }\n \n extern \"C\" void\n-rust_intrinsic_2_get_type_desc(void **retptr,\n+rust_intrinsic_get_type_desc(void **retptr,\n                              void *env,\n                              type_desc* ty) {\n     *(type_desc**)retptr = ty;\n }\n \n extern \"C\" void\n-rust_intrinsic_2_task_sleep(void **retptr,\n+rust_intrinsic_task_sleep(void **retptr,\n                           void *env,\n                           size_t time_in_us) {\n     rust_task_sleep(time_in_us);\n }\n \n+\n extern \"C\" void\n-rust_intrinsic_vec_len(void *task,\n-                       size_t *retptr,\n-                       type_desc *ty,\n-                       rust_vec **vp)\n+rust_intrinsic_2_vec_len(size_t *retptr,\n+                         void *env,\n+                         type_desc *ty,\n+                         rust_vec **vp)\n {\n-    rust_intrinsic_2_vec_len(retptr, NULL, ty, vp);\n+    *retptr = (*vp)->fill / ty->size;\n }\n \n extern \"C\" void\n-rust_intrinsic_ptr_offset(void *task,\n-                          void **retptr,\n+rust_intrinsic_2_ptr_offset(void **retptr,\n+                          void *env,\n                           type_desc *ty,\n                           void *ptr,\n                           uintptr_t count)\n {\n-    rust_intrinsic_2_ptr_offset(retptr, NULL, ty, ptr, count);\n+    *retptr = &((uint8_t *)ptr)[ty->size * count];\n }\n \n extern \"C\" void\n-rust_intrinsic_cast(void *task,\n-                    void *retptr,\n+rust_intrinsic_2_cast(void *retptr,\n+                    void *env,\n                     type_desc *t1,\n                     type_desc *t2,\n                     void *src)\n {\n-    rust_intrinsic_2_cast(retptr, NULL, t1, t2, src);\n+    if (t1->size != t2->size) {\n+        upcall_fail(\"attempt to cast values of differing sizes\",\n+                    __FILE__, __LINE__);\n+        return;\n+    }\n+\n+    memmove(retptr, src, t1->size);\n }\n \n extern \"C\" void\n-rust_intrinsic_addr_of(void *task,\n-                       void **retptr,\n+rust_intrinsic_2_addr_of(void **retptr,\n+                       void *env,\n                        type_desc *ty,\n                        void *valptr) {\n-    rust_intrinsic_2_addr_of(retptr, NULL, ty, valptr);\n+    *retptr = valptr;\n }\n \n extern \"C\" void\n-rust_intrinsic_recv(void *task,\n-                    void **retptr,\n+rust_intrinsic_2_recv(void **retptr,\n+                    void *env,\n                     type_desc *ty,\n                     rust_port *port) {\n-    rust_intrinsic_2_recv(retptr, NULL, ty, port);\n+    port_recv((uintptr_t*)retptr, port);\n }\n \n extern \"C\" void\n-rust_intrinsic_get_type_desc(void *task,\n-                             void **retptr,\n+rust_intrinsic_2_get_type_desc(void **retptr,\n+                             void *env,\n                              type_desc* ty) {\n-    rust_intrinsic_2_get_type_desc(retptr, NULL, ty);\n+    *(type_desc**)retptr = ty;\n }\n \n extern \"C\" void\n-rust_intrinsic_task_sleep(void *task,\n-                          void **retptr,\n+rust_intrinsic_2_task_sleep(void **retptr,\n+                          void *env,\n                           size_t time_in_us) {\n     rust_task_sleep(time_in_us);\n }\n-"}, {"sha": "acf42dd603ecd2c136899530e921d48f1688e258", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 94, "deletions": 82, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=dd275cd749fb33e272004cd946eff18ec4d10281", "patch": "@@ -1,83 +1,90 @@\n ; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n-; target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32\"\n+; target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128\"\n target triple = \"@CFG_TARGET_TRIPLE@\"\n \n-%0 = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n-%1 = type { i32, %struct.rust_scheduler**, i32 }\n-%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n-%class.array_list = type { i32, %struct.rust_task**, i32 }\n-%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n-%class.context = type { %struct.registers_t, %class.context* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n-%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n-%class.indexed_list = type { i32 (...)**, %class.array_list }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t*, i8, i8 }\n-%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i32, %2, i32, i32, i32, %struct.rust_env* }\n-%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n-%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n+%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%struct.rust_shape_tables = type { i8*, i8* }\n+%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n+%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%struct.rust_vec = type { i32, i32, [0 x i8] }\n %class.rust_port = type { i32, i32, %class.rust_kernel*, %struct.rust_task*, i32, %class.circular_buffer, %class.lock_and_signal }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.0, %struct.randctx, i32, %class.hash_map, i32, i32, i32, %struct.rust_env* }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%class.array_list = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n+%\"struct.memory_region::alloc_header\" = type { i8 }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i32, i8, i8 }\n+%union.pthread_cond_t = type { %struct.anon, [4 x i8] }\n+%struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n+%union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n+%\"struct.<anonymous union>::__pthread_mutex_s\" = type { i32, i32, i32, i32, i32, %union.anon }\n+%union.anon = type { i32 }\n+%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n+%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n+%class.rust_thread = type { i32 (...)**, i8, i32 }\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n-%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%class.timer = type { i32 (...)**, i64, i64 }\n-%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n-%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n-%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }\n-%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n-%struct._opaque_pthread_attr_t = type { i32, [36 x i8] }\n-%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }\n-%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n-%struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }\n+%class.indexed_list = type { i32 (...)**, %class.array_list.2 }\n+%class.array_list.2 = type { i32, %struct.rust_task**, i32 }\n+%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n %struct.chan_handle = type { i32, i32 }\n-%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n-%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n-%\"struct.memory_region::alloc_header\" = type { i8 }\n-%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n+%class.context = type { %struct.registers_t, %class.context* }\n %struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n-%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%struct.stk_seg = type { %struct.stk_seg*, i32, i32, i32, [0 x i8] }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n+%struct.rust_cond = type { i8 }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.hash_map.4 = type { %\"struct.hash_map<int, rust_port *>::map_entry\"* }\n+%\"struct.hash_map<int, rust_port *>::map_entry\" = type opaque\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i32, i32, i32, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n-%struct.rust_shape_tables = type { i8*, i8* }\n-%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.rust_obstack_chunk*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %\"struct.memory_region::alloc_header\"*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n-%struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n-%struct.rust_vec = type { i32, i32, [0 x i8] }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.memory_region::alloc_header\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n+%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n+%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n+%union.pthread_attr_t = type { i32, [32 x i8] }\n+%class.array_list.0 = type { i32, %struct.rust_scheduler**, i32 }\n+%class.hash_map = type { %\"struct.hash_map<int, rust_task *>::map_entry\"* }\n+%\"struct.hash_map<int, rust_task *>::map_entry\" = type opaque\n+%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n \n-define void @rust_intrinsic_2_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 4\n+define void @rust_intrinsic_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n+  %1 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n-  %3 = load i32* %2, align 4\n+  %3 = load i32* %2, align 4, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %5 = load i32* %4, align 4\n+  %5 = load i32* %4, align 4, !tbaa !3\n   %6 = udiv i32 %3, %5\n-  store i32 %6, i32* %retptr, align 4\n+  store i32 %6, i32* %retptr, align 4, !tbaa !3\n   ret void\n }\n \n-define void @rust_intrinsic_2_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n+define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = mul i32 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i32 %3\n-  store i8* %4, i8** %retptr, align 4\n+  store i8* %4, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n-  %4 = load i32* %3, align 4\n+  %4 = load i32* %3, align 4, !tbaa !3\n   %5 = icmp eq i32 %2, %4\n   br i1 %5, label %7, label %6\n \n@@ -97,90 +104,95 @@ declare void @upcall_fail(i8*, i8*, i32)\n \n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n-define void @rust_intrinsic_2_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 4\n+define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n+  store i8* %valptr, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+define void @rust_intrinsic_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n   %1 = bitcast i8** %retptr to i32*\n   tail call void @port_recv(i32* %1, %class.rust_port* %port)\n   ret void\n }\n \n declare void @port_recv(i32*, %class.rust_port*)\n \n-define void @rust_intrinsic_2_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {\n+define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c, i8** %retptr, align 4\n+  store i8* %ty.c, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i32 %time_in_us) {\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i32 %time_in_us) {\n   tail call void @rust_task_sleep(i32 %time_in_us)\n   ret void\n }\n \n declare void @rust_task_sleep(i32)\n \n-define void @rust_intrinsic_vec_len(i8* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 4\n+define void @rust_intrinsic_2_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n+  %1 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n-  %3 = load i32* %2, align 4\n+  %3 = load i32* %2, align 4, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %5 = load i32* %4, align 4\n+  %5 = load i32* %4, align 4, !tbaa !3\n   %6 = udiv i32 %3, %5\n-  store i32 %6, i32* %retptr, align 4\n+  store i32 %6, i32* %retptr, align 4, !tbaa !3\n   ret void\n }\n \n-define void @rust_intrinsic_ptr_offset(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n+define void @rust_intrinsic_2_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = mul i32 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i32 %3\n-  store i8* %4, i8** %retptr, align 4\n+  store i8* %4, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_cast(i8* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_2_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n-  %4 = load i32* %3, align 4\n+  %4 = load i32* %3, align 4, !tbaa !3\n   %5 = icmp eq i32 %2, %4\n   br i1 %5, label %7, label %6\n \n ; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 46)\n-  br label %rust_intrinsic_2_cast.exit\n+  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 112)\n+  br label %8\n \n ; <label>:7                                       ; preds = %0\n   tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %2, i32 1, i1 false)\n-  br label %rust_intrinsic_2_cast.exit\n+  br label %8\n \n-rust_intrinsic_2_cast.exit:                       ; preds = %6, %7\n+; <label>:8                                       ; preds = %7, %6\n   ret void\n }\n \n-define void @rust_intrinsic_addr_of(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 4\n+define void @rust_intrinsic_2_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n+  store i8* %valptr, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_recv(i8* nocapture %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+define void @rust_intrinsic_2_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n   %1 = bitcast i8** %retptr to i32*\n   tail call void @port_recv(i32* %1, %class.rust_port* %port)\n   ret void\n }\n \n-define void @rust_intrinsic_get_type_desc(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n-  %ty.c.i = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c.i, i8** %retptr, align 4\n+define void @rust_intrinsic_2_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {\n+  %ty.c = bitcast %struct.type_desc* %ty to i8*\n+  store i8* %ty.c, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8* nocapture %task, i8** nocapture %retptr, i32 %time_in_us) {\n+define void @rust_intrinsic_2_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i32 %time_in_us) {\n   tail call void @rust_task_sleep(i32 %time_in_us)\n   ret void\n }\n+\n+!0 = metadata !{metadata !\"any pointer\", metadata !1}\n+!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n+!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}\n+!3 = metadata !{metadata !\"int\", metadata !1}"}, {"sha": "17921e051fcd16094f304bf6bf019db7d95f5b02", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 94, "deletions": 82, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/dd275cd749fb33e272004cd946eff18ec4d10281/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=dd275cd749fb33e272004cd946eff18ec4d10281", "patch": "@@ -1,83 +1,90 @@\n ; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n-; target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n+; target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n target triple = \"@CFG_TARGET_TRIPLE@\"\n \n-%0 = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n-%1 = type { i64, %struct.rust_scheduler**, i64 }\n-%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n-%class.array_list = type { i64, %struct.rust_task**, i64 }\n-%class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n-%class.context = type { %struct.registers_t, %class.context* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n-%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n-%class.indexed_list = type { i32 (...)**, %class.array_list }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_attr_t, %struct._opaque_pthread_t*, i8, i8 }\n-%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i64, %2, i64, i32, i32, %struct.rust_env* }\n-%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n-%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n+%struct.type_desc = type { %struct.type_desc**, i64, i64, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i64, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i64, i64, %struct.UT_hash_handle, i64, [0 x %struct.type_desc*] }\n+%struct.rust_shape_tables = type { i8*, i8* }\n+%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n+%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i64, i32, i32, i32, i32 }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%struct.rust_vec = type { i64, i64, [0 x i8] }\n %class.rust_port = type { i64, i64, %class.rust_kernel*, %struct.rust_task*, i64, %class.circular_buffer, %class.lock_and_signal }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.0, %struct.randctx, i64, %class.hash_map, i64, i32, i32, %struct.rust_env* }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%class.array_list = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n+%\"struct.memory_region::alloc_header\" = type { i8 }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i64, i8, i8 }\n+%union.pthread_cond_t = type { %struct.anon }\n+%struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n+%union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n+%\"struct.<anonymous union>::__pthread_mutex_s\" = type { i32, i32, i32, i32, i32, i32, %struct.__pthread_internal_list }\n+%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }\n+%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n+%struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n+%class.rust_thread = type { i32 (...)**, i8, i64 }\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n-%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%class.timer = type { i32 (...)**, i64, i64 }\n-%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n-%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n-%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i64, i32, i32, i32, i32 }\n-%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n-%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }\n-%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }\n-%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [1168 x i8] }\n+%class.indexed_list = type { i32 (...)**, %class.array_list.2 }\n+%class.array_list.2 = type { i64, %struct.rust_task**, i64 }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i64, i64, %struct.chan_handle, i64 }\n %struct.chan_handle = type { i64, i64 }\n-%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n-%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n-%\"struct.memory_region::alloc_header\" = type { i8 }\n-%struct.randctx = type { i64, [256 x i64], [256 x i64], i64, i64, i64 }\n+%class.context = type { %struct.registers_t, %class.context* }\n %struct.registers_t = type { [22 x i64] }\n-%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%struct.stk_seg = type { %struct.stk_seg*, i64, i32, [0 x i8] }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n+%struct.rust_cond = type { i8 }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.hash_map.4 = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n+%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i64, i64, i64, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n-%struct.rust_shape_tables = type { i8*, i8* }\n-%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %\"struct.memory_region::alloc_header\"*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n-%struct.rust_task_user = type { i64, i64, %struct.chan_handle, i64 }\n-%struct.rust_vec = type { i64, i64, [0 x i8] }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.memory_region::alloc_header\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%struct.stk_seg = type { %struct.stk_seg*, i64, i32, [0 x i8] }\n-%struct.type_desc = type { %struct.type_desc**, i64, i64, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i64, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i64, i64, %struct.UT_hash_handle, i64, [0 x %struct.type_desc*] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n+%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n+%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%struct.randctx = type { i64, [256 x i64], [256 x i64], i64, i64, i64 }\n+%union.pthread_attr_t = type { i64, [48 x i8] }\n+%class.array_list.0 = type { i64, %struct.rust_scheduler**, i64 }\n+%class.hash_map = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n+%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n+%class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n \n-define void @rust_intrinsic_2_vec_len(i64* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 8\n+define void @rust_intrinsic_vec_len(i64* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind uwtable {\n+  %1 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n-  %3 = load i64* %2, align 8\n+  %3 = load i64* %2, align 8, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %5 = load i64* %4, align 8\n+  %5 = load i64* %4, align 8, !tbaa !3\n   %6 = udiv i64 %3, %5\n-  store i64 %6, i64* %retptr, align 8\n+  store i64 %6, i64* %retptr, align 8, !tbaa !3\n   ret void\n }\n \n-define void @rust_intrinsic_2_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind {\n+define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = mul i64 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i64 %3\n-  store i8* %4, i8** %retptr, align 8\n+  store i8* %4, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i64 0, i32 1\n-  %4 = load i64* %3, align 8\n+  %4 = load i64* %3, align 8, !tbaa !3\n   %5 = icmp eq i64 %2, %4\n   br i1 %5, label %7, label %6\n \n@@ -97,90 +104,95 @@ declare void @upcall_fail(i8*, i8*, i64)\n \n declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n \n-define void @rust_intrinsic_2_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 8\n+define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind uwtable {\n+  store i8* %valptr, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+define void @rust_intrinsic_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) uwtable {\n   %1 = bitcast i8** %retptr to i64*\n   tail call void @port_recv(i64* %1, %class.rust_port* %port)\n   ret void\n }\n \n declare void @port_recv(i64*, %class.rust_port*)\n \n-define void @rust_intrinsic_2_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {\n+define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind uwtable {\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c, i8** %retptr, align 8\n+  store i8* %ty.c, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_2_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i64 %time_in_us) {\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i64 %time_in_us) uwtable {\n   tail call void @rust_task_sleep(i64 %time_in_us)\n   ret void\n }\n \n declare void @rust_task_sleep(i64)\n \n-define void @rust_intrinsic_vec_len(i8* nocapture %task, i64* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 8\n+define void @rust_intrinsic_2_vec_len(i64* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind uwtable {\n+  %1 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n-  %3 = load i64* %2, align 8\n+  %3 = load i64* %2, align 8, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %5 = load i64* %4, align 8\n+  %5 = load i64* %4, align 8, !tbaa !3\n   %6 = udiv i64 %3, %5\n-  store i64 %6, i64* %retptr, align 8\n+  store i64 %6, i64* %retptr, align 8, !tbaa !3\n   ret void\n }\n \n-define void @rust_intrinsic_ptr_offset(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind {\n+define void @rust_intrinsic_2_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = mul i64 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i64 %3\n-  store i8* %4, i8** %retptr, align 8\n+  store i8* %4, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_cast(i8* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_2_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i64 0, i32 1\n-  %4 = load i64* %3, align 8\n+  %4 = load i64* %3, align 8, !tbaa !3\n   %5 = icmp eq i64 %2, %4\n   br i1 %5, label %7, label %6\n \n ; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 46)\n-  br label %rust_intrinsic_2_cast.exit\n+  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 112)\n+  br label %8\n \n ; <label>:7                                       ; preds = %0\n   tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %retptr, i8* %src, i64 %2, i32 1, i1 false)\n-  br label %rust_intrinsic_2_cast.exit\n+  br label %8\n \n-rust_intrinsic_2_cast.exit:                       ; preds = %6, %7\n+; <label>:8                                       ; preds = %7, %6\n   ret void\n }\n \n-define void @rust_intrinsic_addr_of(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 8\n+define void @rust_intrinsic_2_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind uwtable {\n+  store i8* %valptr, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_recv(i8* nocapture %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+define void @rust_intrinsic_2_recv(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %class.rust_port* %port) uwtable {\n   %1 = bitcast i8** %retptr to i64*\n   tail call void @port_recv(i64* %1, %class.rust_port* %port)\n   ret void\n }\n \n-define void @rust_intrinsic_get_type_desc(i8* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n-  %ty.c.i = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c.i, i8** %retptr, align 8\n+define void @rust_intrinsic_2_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind uwtable {\n+  %ty.c = bitcast %struct.type_desc* %ty to i8*\n+  store i8* %ty.c, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8* nocapture %task, i8** nocapture %retptr, i64 %time_in_us) {\n+define void @rust_intrinsic_2_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i64 %time_in_us) uwtable {\n   tail call void @rust_task_sleep(i64 %time_in_us)\n   ret void\n }\n+\n+!0 = metadata !{metadata !\"any pointer\", metadata !1}\n+!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n+!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}\n+!3 = metadata !{metadata !\"long\", metadata !1}"}]}