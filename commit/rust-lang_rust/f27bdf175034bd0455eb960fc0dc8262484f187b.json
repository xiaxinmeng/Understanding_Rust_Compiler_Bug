{"sha": "f27bdf175034bd0455eb960fc0dc8262484f187b", "node_id": "C_kwDOAAsO6NoAKGYyN2JkZjE3NTAzNGJkMDQ1NWViOTYwZmMwZGM4MjYyNDg0ZjE4N2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-31T03:28:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-31T21:25:08Z"}, "message": "Collect late-bound regions from all closure parents in `closure_mapping`", "tree": {"sha": "21ba314e3c118129f0a4a82211658986feda6f5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ba314e3c118129f0a4a82211658986feda6f5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f27bdf175034bd0455eb960fc0dc8262484f187b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f27bdf175034bd0455eb960fc0dc8262484f187b", "html_url": "https://github.com/rust-lang/rust/commit/f27bdf175034bd0455eb960fc0dc8262484f187b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f27bdf175034bd0455eb960fc0dc8262484f187b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630dff6ba7217d15e757ba4c552b8a4bedca4130", "url": "https://api.github.com/repos/rust-lang/rust/commits/630dff6ba7217d15e757ba4c552b8a4bedca4130", "html_url": "https://github.com/rust-lang/rust/commit/630dff6ba7217d15e757ba4c552b8a4bedca4130"}], "stats": {"total": 131, "additions": 91, "deletions": 40}, "files": [{"sha": "0e7f243bcf36ced6c9a1889d797b98839f0d8a8a", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f27bdf175034bd0455eb960fc0dc8262484f187b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27bdf175034bd0455eb960fc0dc8262484f187b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=f27bdf175034bd0455eb960fc0dc8262484f187b", "patch": "@@ -2314,7 +2314,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n             tcx,\n             closure_substs,\n             self.num_external_vids,\n-            tcx.typeck_root_def_id(closure_def_id),\n+            closure_def_id.expect_local(),\n         );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n "}, {"sha": "0f300564c208607e13f882d52c136a4a3b6b4ae9", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f27bdf175034bd0455eb960fc0dc8262484f187b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27bdf175034bd0455eb960fc0dc8262484f187b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=f27bdf175034bd0455eb960fc0dc8262484f187b", "patch": "@@ -243,17 +243,21 @@ impl<'tcx> UniversalRegions<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n-        typeck_root_def_id: DefId,\n+        closure_def_id: LocalDefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.lifetimes.re_static);\n         tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n-            region_mapping.push(r);\n-        });\n+        for_each_late_bound_region_in_scope(\n+            tcx,\n+            tcx.local_parent(closure_def_id),\n+            |r| {\n+                region_mapping.push(r);\n+            },\n+        );\n \n         assert_eq!(\n             region_mapping.len(),\n@@ -341,9 +345,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // tests, and the resulting print-outs include def-ids\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n+                for_each_late_bound_region_in_scope(tcx, def_id.expect_local(), |r| {\n+                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::Generator(def_id, substs, _) => {\n@@ -356,9 +359,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // FIXME: As above, we'd like to print out the region\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n+                for_each_late_bound_region_in_scope(tcx, def_id.expect_local(), |r| {\n+                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::FnDef(def_id, substs) => {\n@@ -749,28 +751,17 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     #[instrument(skip(self, indices))]\n     fn replace_late_bound_regions_with_nll_infer_vars(\n         &self,\n-        mut mir_def_id: LocalDefId,\n+        mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n-        let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n-\n-        // Walk up the tree, collecting late-bound regions until we hit the typeck root\n-        loop {\n-            for_each_late_bound_region_defined_on(self.tcx, mir_def_id.to_def_id(), |r| {\n-                debug!(?r);\n-                if !indices.indices.contains_key(&r) {\n-                    let region_vid = self.next_nll_region_var(FR);\n-                    debug!(?region_vid);\n-                    indices.insert_late_bound_region(r, region_vid.to_region_vid());\n-                }\n-            });\n-\n-            if mir_def_id.to_def_id() == typeck_root_def_id {\n-                break;\n-            } else {\n-                mir_def_id = self.tcx.parent(mir_def_id.to_def_id()).expect_local();\n+        for_each_late_bound_region_in_scope(self.tcx, mir_def_id, |r| {\n+            debug!(?r);\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.next_nll_region_var(FR);\n+                debug!(?region_vid);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n             }\n-        }\n+        });\n     }\n }\n \n@@ -814,18 +805,31 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     }\n }\n \n-/// Iterates over the late-bound regions defined on fn_def_id and\n-/// invokes `f` with the liberated form of each one.\n-fn for_each_late_bound_region_defined_on<'tcx>(\n+/// Iterates over the late-bound regions defined on fn_def_id and all of its\n+/// parents, up to the typeck root, and invokes `f` with the liberated form\n+/// of each one.\n+fn for_each_late_bound_region_in_scope<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    fn_def_id: DefId,\n+    mut mir_def_id: LocalDefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(fn_def_id.expect_local()))\n-    {\n-        let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n-        let liberated_region =\n-            tcx.mk_region(ty::ReFree(ty::FreeRegion { scope: fn_def_id, bound_region }));\n-        f(liberated_region);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(mir_def_id.to_def_id());\n+\n+    // Walk up the tree, collecting late-bound regions until we hit the typeck root\n+    loop {\n+        for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n+            let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n+            let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n+                scope: mir_def_id.to_def_id(),\n+                bound_region,\n+            }));\n+            f(liberated_region);\n+        }\n+\n+        if mir_def_id.to_def_id() == typeck_root_def_id {\n+            break;\n+        } else {\n+            mir_def_id = tcx.local_parent(mir_def_id);\n+        }\n     }\n }"}, {"sha": "6bfc6c80b78822ad06ebea3ac9cb07a4fe60766d", "filename": "src/test/ui/closures/binder/nested-closures-regions.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f27bdf175034bd0455eb960fc0dc8262484f187b/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27bdf175034bd0455eb960fc0dc8262484f187b/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.rs?ref=f27bdf175034bd0455eb960fc0dc8262484f187b", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(closure_lifetime_binder)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn main() {\n+    for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+}"}, {"sha": "b385e0ed6e0a5a0fef103a79ee5818ab83257572", "filename": "src/test/ui/closures/binder/nested-closures-regions.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f27bdf175034bd0455eb960fc0dc8262484f187b/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f27bdf175034bd0455eb960fc0dc8262484f187b/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr?ref=f27bdf175034bd0455eb960fc0dc8262484f187b", "patch": "@@ -0,0 +1,38 @@\n+note: external requirements\n+  --> $DIR/nested-closures-regions.rs:8:24\n+   |\n+LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: main::{closure#0}::{closure#0} with closure substs [\n+               i8,\n+               extern \"rust-call\" fn((&(),)),\n+               (),\n+           ]\n+   = note: late-bound region is '_#4r\n+   = note: late-bound region is '_#2r\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n+   = note: where '_#2r: '_#1r\n+\n+note: no external requirements\n+  --> $DIR/nested-closures-regions.rs:8:5\n+   |\n+LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: main::{closure#0} with closure substs [\n+               i8,\n+               extern \"rust-call\" fn(()),\n+               (),\n+           ]\n+   = note: late-bound region is '_#2r\n+\n+note: no external requirements\n+  --> $DIR/nested-closures-regions.rs:7:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+   |\n+   = note: defining type: main\n+"}]}