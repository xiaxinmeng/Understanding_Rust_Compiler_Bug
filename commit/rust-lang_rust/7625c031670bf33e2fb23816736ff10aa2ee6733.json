{"sha": "7625c031670bf33e2fb23816736ff10aa2ee6733", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjVjMDMxNjcwYmYzM2UyZmIyMzgxNjczNmZmMTBhYTJlZTY3MzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T06:30:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T06:30:10Z"}, "message": "Auto merge of #53648 - japaric:thumb-lld, r=alexcrichton\n\nchange the default linker of the ARM Cortex-M targets\n\nto rust-lld so users won't need an external linker to build programs\n\nThis will break nightly builds.\n\nWe discussed this within the embedded WG and with the embedded community in\nrust-embedded/wg#160 and there was consensus in that this breaking change is\nworthwhile and that we should do it now before it becomes impossible to do\nwithout breaking stable builds.\n\nWe have already written an announcement (see rust-embedded/wg#196) that explains\nthe breakage and instructs the users how to fix their builds. The TL;DR is that\nthey can switch to the old behavior by passing the `-C linker` flag to rustc.\nWe'll post the announcement as soon as this change makes into nightly.\n\ncloses rust-embedded/wg#160\n\nr? @alexcrichton", "tree": {"sha": "e6daff0bb42f38609e4502091170b04387b5b2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6daff0bb42f38609e4502091170b04387b5b2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7625c031670bf33e2fb23816736ff10aa2ee6733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7625c031670bf33e2fb23816736ff10aa2ee6733", "html_url": "https://github.com/rust-lang/rust/commit/7625c031670bf33e2fb23816736ff10aa2ee6733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7625c031670bf33e2fb23816736ff10aa2ee6733/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a2c603eeabad012298f391f09c0b526eabeb5af", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2c603eeabad012298f391f09c0b526eabeb5af", "html_url": "https://github.com/rust-lang/rust/commit/3a2c603eeabad012298f391f09c0b526eabeb5af"}, {"sha": "d65a64e31b8a5007b4ee0fb1dbd4cad2176859ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65a64e31b8a5007b4ee0fb1dbd4cad2176859ab", "html_url": "https://github.com/rust-lang/rust/commit/d65a64e31b8a5007b4ee0fb1dbd4cad2176859ab"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "4c9a4764eff4097d47067c8aca8a71dff46cd82b", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=7625c031670bf33e2fb23816736ff10aa2ee6733", "patch": "@@ -42,9 +42,8 @@ pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n         executables: true,\n-        // In 99%+ of cases, we want to use the `arm-none-eabi-gcc` compiler (there aren't many\n-        // options around)\n-        linker: Some(\"arm-none-eabi-gcc\".to_string()),\n+        // In most cases, LLD is good enough\n+        linker: Some(\"rust-lld\".to_string()),\n         // Because these devices have very little resources having an unwinder is too onerous so we\n         // default to \"abort\" because the \"unwind\" strategy is very rare.\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "99034277abd58eba6071958f5dc7d0e2732a462c", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=7625c031670bf33e2fb23816736ff10aa2ee6733", "patch": "@@ -10,7 +10,7 @@\n \n // Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n \n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n         target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them"}, {"sha": "17fad29dd29685c3d7a83babe6a42a16d36c5ab3", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=7625c031670bf33e2fb23816736ff10aa2ee6733", "patch": "@@ -19,7 +19,7 @@\n // To opt-in to hardware accelerated floating point operations, you can use, for example,\n // `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n \n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -32,7 +32,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n         target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             max_atomic_width: Some(32),"}, {"sha": "02ede112ed3c649d14decc5bf58c12ad740c6068", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=7625c031670bf33e2fb23816736ff10aa2ee6733", "patch": "@@ -18,7 +18,7 @@\n //\n // To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n \n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -31,7 +31,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n         target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the"}, {"sha": "f4fffade16351c7de1a8bc0c12e9bc34029deea9", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625c031670bf33e2fb23816736ff10aa2ee6733/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=7625c031670bf33e2fb23816736ff10aa2ee6733", "patch": "@@ -10,7 +10,7 @@\n \n // Targets the Cortex-M3 processor (ARMv7-M)\n \n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n         target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             max_atomic_width: Some(32),"}]}