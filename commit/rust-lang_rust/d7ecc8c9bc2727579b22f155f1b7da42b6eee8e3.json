{"sha": "d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZWNjOGM5YmMyNzI3NTc5YjIyZjE1NWYxYjdkYTQyYjZlZWU4ZTM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T18:22:19Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T18:22:19Z"}, "message": "query normalize_generic_arg_after_erasing_regions", "tree": {"sha": "6eb919d1b4bc617b49f74857f84d5f6e17e94561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb919d1b4bc617b49f74857f84d5f6e17e94561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "html_url": "https://github.com/rust-lang/rust/commit/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda976d42db4abc496bb8673246b34e667b48e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda976d42db4abc496bb8673246b34e667b48e6f", "html_url": "https://github.com/rust-lang/rust/commit/bda976d42db4abc496bb8673246b34e667b48e6f"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "61d63f4623249c21886ee2e7e260c7c079168aee", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -59,7 +59,7 @@ use crate::traits::query::{\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "86855cb0ef0c2c3e27be088b9b695c267b479c38", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -9,7 +9,7 @@ use crate::traits::query::{\n };\n use crate::ty::query::queries;\n use crate::ty::query::QueryDescription;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n \n@@ -1114,9 +1114,9 @@ rustc_queries! {\n         }\n \n         /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-        query normalize_ty_after_erasing_regions(\n-            goal: ParamEnvAnd<'tcx, Ty<'tcx>>\n-        ) -> Ty<'tcx> {\n+        query normalize_generic_arg_after_erasing_regions(\n+            goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n+        ) -> GenericArg<'tcx> {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n "}, {"sha": "e49bf6f8e67dcbe069c97d97a86a7e405ebe8f03", "filename": "src/librustc/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -4,8 +4,8 @@\n //!\n //! The methods in this file use a `TypeFolder` to recursively process\n //! contents, invoking the underlying\n-//! `normalize_ty_after_erasing_regions` query for each type found\n-//! within. (This underlying query is what is cached.)\n+//! `normalize_generic_arg_after_erasing_regions` query for each type\n+//! or constant found within. (This underlying query is what is cached.)\n \n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n@@ -94,6 +94,14 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx.normalize_ty_after_erasing_regions(self.param_env.and(ty))\n+        self.tcx\n+            .normalize_generic_arg_after_erasing_regions(self.param_env.and(ty.into()))\n+            .expect_ty()\n+    }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        self.tcx\n+            .normalize_generic_arg_after_erasing_regions(self.param_env.and(c.into()))\n+            .expect_const()\n     }\n }"}, {"sha": "6be1f04efca2b5366a58cfc3de30e51447cebae0", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -5,7 +5,7 @@ use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::query::caches::DefaultCacheSelector;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n@@ -194,6 +194,17 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for GenericArg<'tcx> {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "1094eb49403463df6842377b5a05cb344423b173", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -31,7 +31,7 @@ use crate::traits::specialization_graph;\n use crate::traits::Clauses;\n use crate::traits::{self, Vtable};\n use crate::ty::steal::Steal;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;"}, {"sha": "0f4485a705046dff5d33017a6fd09b8edb99d338", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -128,6 +128,14 @@ impl<'tcx> GenericArg<'tcx> {\n             _ => bug!(\"expected a type, but found another kind\"),\n         }\n     }\n+\n+    /// Unpack the `GenericArg` as a const when it is known certainly to be a const.\n+    pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {\n+        match self.unpack() {\n+            GenericArgKind::Const(c) => c,\n+            _ => bug!(\"expected a const, but found another kind\"),\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {"}, {"sha": "b3d75143c56392bf633d50f7cb2d0d3d44721579", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -150,7 +150,7 @@ pub struct PerfStats {\n     /// Total number of values canonicalized queries constructed.\n     pub queries_canonicalized: AtomicUsize,\n     /// Number of times this query is invoked.\n-    pub normalize_ty_after_erasing_regions: AtomicUsize,\n+    pub normalize_generic_arg_after_erasing_regions: AtomicUsize,\n     /// Number of times this query is invoked.\n     pub normalize_projection_ty: AtomicUsize,\n }\n@@ -707,8 +707,8 @@ impl Session {\n             self.perf_stats.queries_canonicalized.load(Ordering::Relaxed)\n         );\n         println!(\n-            \"normalize_ty_after_erasing_regions:            {}\",\n-            self.perf_stats.normalize_ty_after_erasing_regions.load(Ordering::Relaxed)\n+            \"normalize_generic_arg_after_erasing_regions:   {}\",\n+            self.perf_stats.normalize_generic_arg_after_erasing_regions.load(Ordering::Relaxed)\n         );\n         println!(\n             \"normalize_projection_ty:                       {}\",\n@@ -1080,7 +1080,7 @@ fn build_session_(\n             symbol_hash_time: Lock::new(Duration::from_secs(0)),\n             decode_def_path_tables_time: Lock::new(Duration::from_secs(0)),\n             queries_canonicalized: AtomicUsize::new(0),\n-            normalize_ty_after_erasing_regions: AtomicUsize::new(0),\n+            normalize_generic_arg_after_erasing_regions: AtomicUsize::new(0),\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n         code_stats: Default::default(),"}, {"sha": "065cf38eb249075a3c9ac3b2407c6dbcc5d5aaa0", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "patch": "@@ -1,23 +1,24 @@\n use rustc::traits::query::NoSolution;\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use rustc::ty::subst::GenericArg;\n+use rustc::ty::{self, ParamEnvAnd, TyCtxt};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers<'_>) {\n-    *p = Providers { normalize_ty_after_erasing_regions, ..*p };\n+    *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n }\n \n-fn normalize_ty_after_erasing_regions<'tcx>(\n+fn normalize_generic_arg_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-) -> Ty<'tcx> {\n-    debug!(\"normalize_ty_after_erasing_regions(goal={:#?})\", goal);\n+    goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>,\n+) -> GenericArg<'tcx> {\n+    debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n \n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess.perf_stats.normalize_ty_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n+    tcx.sess.perf_stats.normalize_generic_arg_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(&value) {"}]}