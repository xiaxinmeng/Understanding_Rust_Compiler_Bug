{"sha": "d249d756374737eb014079901ac132f1e1ed905e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNDlkNzU2Mzc0NzM3ZWIwMTQwNzk5MDFhYzEzMmYxZTFlZDkwNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-09T00:11:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-09T00:11:27Z"}, "message": "Auto merge of #70936 - Dylan-DPC:rollup-2ng3e5h, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #70134 (add basic support of OsStrExt for HermitCore)\n - #70565 (Add inline attributes for functions used in the query system)\n - #70828 (rustdoc: Don't try to load source files from external crates)\n - #70870 (Fix abuses of tykind::err)\n - #70906 (Suggest move for closures and async blocks in more cases.)\n - #70912 (Do not suggest adding type param when `use` is already suggested)\n - #70930 (add tracking issue to `VecDeque::make_contiguous`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e40a76a168a79ea3db20a0671e7367756dbc93a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40a76a168a79ea3db20a0671e7367756dbc93a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d249d756374737eb014079901ac132f1e1ed905e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d249d756374737eb014079901ac132f1e1ed905e", "html_url": "https://github.com/rust-lang/rust/commit/d249d756374737eb014079901ac132f1e1ed905e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d249d756374737eb014079901ac132f1e1ed905e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1edcfc83c6a08ddc5e63fc652b149baea0236e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1edcfc83c6a08ddc5e63fc652b149baea0236e7c", "html_url": "https://github.com/rust-lang/rust/commit/1edcfc83c6a08ddc5e63fc652b149baea0236e7c"}, {"sha": "5848209b64ad3403c155bc884f25500b178a5610", "url": "https://api.github.com/repos/rust-lang/rust/commits/5848209b64ad3403c155bc884f25500b178a5610", "html_url": "https://github.com/rust-lang/rust/commit/5848209b64ad3403c155bc884f25500b178a5610"}], "stats": {"total": 310, "additions": 211, "deletions": 99}, "files": [{"sha": "0ed9773630e24b8716f56dc62ca9e67113131865", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -2104,7 +2104,7 @@ impl<T> VecDeque<T> {\n     ///     assert_eq!(slice, &[3, 2, 1] as &[_]);\n     /// }\n     /// ```\n-    #[unstable(feature = \"deque_make_contiguous\", issue = \"none\")]\n+    #[unstable(feature = \"deque_make_contiguous\", issue = \"70929\")]\n     pub fn make_contiguous(&mut self) -> &mut [T] {\n         if self.is_contiguous() {\n             let tail = self.tail;"}, {"sha": "4ae7532d992b9b18098bd4d1176f3bd58395b73e", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -140,6 +140,7 @@ mod hack {\n     use crate::string::ToString;\n     use crate::vec::Vec;\n \n+    #[inline]\n     pub fn into_vec<T>(b: Box<[T]>) -> Vec<T> {\n         unsafe {\n             let len = b.len();"}, {"sha": "9db5c40c8e362df1e74dcd166332b2cae8107ad5", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -29,7 +29,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n \n     assert!(!instance.substs.needs_infer());\n     assert!(!instance.substs.has_escaping_bound_vars());\n-    assert!(!instance.substs.has_param_types());\n+    assert!(!instance.substs.has_param_types_or_consts());\n \n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;"}, {"sha": "486ea7f22dfffb1c968607e57fc60682ece68f11", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -47,7 +47,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         visibility: Visibility,\n         symbol_name: &str,\n     ) {\n-        assert!(!instance.substs.needs_infer() && !instance.substs.has_param_types());\n+        assert!(!instance.substs.needs_infer() && !instance.substs.has_param_types_or_consts());\n \n         let fn_abi = FnAbi::of_instance(self, instance, &[]);\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);"}, {"sha": "9989e3fba730e6835846860aa9c5cee8bb143d26", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -84,7 +84,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_ERR)\n     }\n-    fn has_param_types(&self) -> bool {\n+    fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n     fn has_infer_types(&self) -> bool {"}, {"sha": "894f9070ce1549ec4bd2f8bf9017b5b59799a96d", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> Instance<'tcx> {\n         // There shouldn't be any params - if there are, then\n         // Instance.ty_env should have been used to provide the proper\n         // ParamEnv\n-        if self.substs.has_param_types() {\n+        if self.substs.has_param_types_or_consts() {\n             bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n         }\n         tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)"}, {"sha": "1bb338d43ad0a4acf076fdbb22783060554443bc", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1585,7 +1585,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Ignore layouts that are done with non-empty environments or\n         // non-monomorphic layouts, as the user only wants to see the stuff\n         // resulting from the final codegen session.\n-        if layout.ty.has_param_types() || !self.param_env.caller_bounds.is_empty() {\n+        if layout.ty.has_param_types_or_consts() || !self.param_env.caller_bounds.is_empty() {\n             return;\n         }\n \n@@ -1754,7 +1754,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 match tail.kind {\n                     ty::Param(_) | ty::Projection(_) => {\n-                        debug_assert!(tail.has_param_types());\n+                        debug_assert!(tail.has_param_types_or_consts());\n                         Ok(SizeSkeleton::Pointer { non_zero, tail: tcx.erase_regions(&tail) })\n                     }\n                     _ => bug!("}, {"sha": "65561e224dbfdead3f285f67ff1e21e05e7cbb92", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -760,47 +760,26 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             (\n                 Some(ref name),\n                 BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::Return,\n+                    category:\n+                        category\n+                        @\n+                        (ConstraintCategory::Return\n+                        | ConstraintCategory::CallArgument\n+                        | ConstraintCategory::OpaqueType),\n                     from_closure: false,\n                     ref region_name,\n                     span,\n                     ..\n                 },\n-            )\n-            | (\n-                Some(ref name),\n-                BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::CallArgument,\n-                    from_closure: false,\n-                    ref region_name,\n-                    span,\n-                    ..\n-                },\n-            ) if borrow_spans.for_closure() => self.report_escaping_closure_capture(\n-                borrow_spans,\n-                borrow_span,\n-                region_name,\n-                category,\n-                span,\n-                &format!(\"`{}`\", name),\n-            ),\n-            (\n-                Some(ref name),\n-                BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::OpaqueType,\n-                    from_closure: false,\n-                    ref region_name,\n+            ) if borrow_spans.for_generator() | borrow_spans.for_closure() => self\n+                .report_escaping_closure_capture(\n+                    borrow_spans,\n+                    borrow_span,\n+                    region_name,\n+                    category,\n                     span,\n-                    ..\n-                },\n-            ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n-                borrow_spans,\n-                borrow_span,\n-                region_name,\n-                category,\n-                span,\n-                &format!(\"`{}`\", name),\n-            ),\n+                    &format!(\"`{}`\", name),\n+                ),\n             (\n                 ref name,\n                 BorrowExplanation::MustBeValidFor {\n@@ -1187,7 +1166,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n-        let mut err = self.cannot_capture_in_long_lived_closure(args_span, captured_var, var_span);\n \n         let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n             Ok(mut string) => {\n@@ -1213,6 +1191,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             },\n             None => \"closure\",\n         };\n+\n+        let mut err =\n+            self.cannot_capture_in_long_lived_closure(args_span, kind, captured_var, var_span);\n         err.span_suggestion(\n             args_span,\n             &format!(\n@@ -1225,8 +1206,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let msg = match category {\n-            ConstraintCategory::Return => \"closure is returned here\".to_string(),\n-            ConstraintCategory::OpaqueType => \"generator is returned here\".to_string(),\n+            ConstraintCategory::Return | ConstraintCategory::OpaqueType => {\n+                format!(\"{} is returned here\", kind)\n+            }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n                 format!(\"function requires argument type to outlive `{}`\", fr_name)"}, {"sha": "07822f865d2bd545370d245ec2dc7e41366571e0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -25,6 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "f8bb7e7a85d1117356715ccd170ea256609c6cc0", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -431,16 +431,18 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_capture_in_long_lived_closure(\n         &self,\n         closure_span: Span,\n+        closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n             E0373,\n-            \"closure may outlive the current function, \\\n+            \"{} may outlive the current function, \\\n              but it borrows {}, \\\n              which is owned by the current function\",\n+            closure_kind,\n             borrowed_path,\n         );\n         err.span_label(capture_span, format!(\"{} is borrowed here\", borrowed_path))"}, {"sha": "34470c2ded5f9440c92e822836a6f270748d771f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1238,7 +1238,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         if !self.in_body {\n             // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.\n             // The traits' privacy in bodies is already checked as a part of trait object types.\n-            let bounds = rustc_typeck::hir_trait_to_predicates(self.tcx, trait_ref);\n+            let bounds = rustc_typeck::hir_trait_to_predicates(\n+                self.tcx,\n+                trait_ref,\n+                // NOTE: This isn't really right, but the actual type doesn't matter here. It's\n+                // just required by `ty::TraitRef`.\n+                self.tcx.types.never,\n+            );\n \n             for (trait_predicate, _, _) in bounds.trait_bounds {\n                 if self.visit_trait(*trait_predicate.skip_binder()) {"}, {"sha": "fa2b51058a3781380241e79f59e07b0d524e387f", "filename": "src/librustc_query_system/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1112,6 +1112,7 @@ impl DepNodeColorMap {\n         DepNodeColorMap { values: (0..size).map(|_| AtomicU32::new(COMPRESSED_NONE)).collect() }\n     }\n \n+    #[inline]\n     fn get(&self, index: SerializedDepNodeIndex) -> Option<DepNodeColor> {\n         match self.values[index].load(Ordering::Acquire) {\n             COMPRESSED_NONE => None,"}, {"sha": "9da13f236643b72f13281a3e2461aa989f150c32", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -51,6 +51,7 @@ pub struct QueryState<CTX: QueryContext, C: QueryCache> {\n }\n \n impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n+    #[inline]\n     pub(super) fn get_lookup<'tcx>(\n         &'tcx self,\n         key: &C::Key,"}, {"sha": "525a0955c0a72b2af17d21c2c1dcd6abeb67e0cb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -2480,8 +2480,7 @@ impl<'a> Resolver<'a> {\n             let (span, found_use) = UsePlacementFinder::check(krate, node_id);\n             if !candidates.is_empty() {\n                 diagnostics::show_candidates(&mut err, span, &candidates, better, found_use);\n-            }\n-            if let Some((span, msg, sugg, appl)) = suggestion {\n+            } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n             }\n             err.emit();"}, {"sha": "e18508eeeb18ea7e3c6b1b4215f678fab56bea92", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -706,13 +706,13 @@ fn check_where_clauses<'tcx, 'fcx>(\n                         return default_ty.into();\n                     }\n                 }\n-                // Mark unwanted params as error.\n-                fcx.tcx.types.err.into()\n+\n+                fcx.tcx.mk_param_from_def(param)\n             }\n \n             GenericParamDefKind::Const => {\n                 // FIXME(const_generics:defaults)\n-                fcx.tcx.consts.err.into()\n+                fcx.tcx.mk_param_from_def(param)\n             }\n         }\n     });\n@@ -750,7 +750,10 @@ fn check_where_clauses<'tcx, 'fcx>(\n             let substituted_pred = pred.subst(fcx.tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n-            if substituted_pred.references_error() || param_count.params.len() > 1 || has_region {\n+            if substituted_pred.has_param_types_or_consts()\n+                || param_count.params.len() > 1\n+                || has_region\n+            {\n                 None\n             } else if predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n                 // Avoid duplication of predicates that contain no parameters, for example."}, {"sha": "69d0b3723b0ad8d251a8bf800b03105c8215a60b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -367,6 +367,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n pub fn hir_trait_to_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     hir_trait: &hir::TraitRef<'_>,\n+    self_ty: Ty<'tcx>,\n ) -> Bounds<'tcx> {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n@@ -380,7 +381,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         hir_trait,\n         DUMMY_SP,\n         hir::Constness::NotConst,\n-        tcx.types.err,\n+        self_ty,\n         &mut bounds,\n         true,\n     );"}, {"sha": "afa6e49a05cf1abecd304609fc6ffab0cb372aa4", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -315,11 +315,9 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_region(current, r, contra);\n \n                 if let Some(poly_trait_ref) = data.principal() {\n-                    let poly_trait_ref =\n-                        poly_trait_ref.with_self_ty(self.tcx(), self.tcx().types.err);\n-                    self.add_constraints_from_trait_ref(\n+                    self.add_constraints_from_invariant_substs(\n                         current,\n-                        *poly_trait_ref.skip_binder(),\n+                        poly_trait_ref.skip_binder().substs,\n                         variance,\n                     );\n                 }"}, {"sha": "03413f67f88fb2f685f697b47394d44f19888f21", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1936,6 +1936,7 @@ impl Clean<Span> for rustc_span::Span {\n         let hi = sm.lookup_char_pos(self.hi());\n         Span {\n             filename,\n+            cnum: lo.file.cnum,\n             loline: lo.line,\n             locol: lo.col.to_usize(),\n             hiline: hi.line,"}, {"sha": "0a682857b18259fee5ff7398681b35c1c4100fff", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n@@ -1357,6 +1357,7 @@ pub enum VariantKind {\n #[derive(Clone, Debug)]\n pub struct Span {\n     pub filename: FileName,\n+    pub cnum: CrateNum,\n     pub loline: usize,\n     pub locol: usize,\n     pub hiline: usize,\n@@ -1368,6 +1369,7 @@ impl Span {\n     pub fn empty() -> Span {\n         Span {\n             filename: FileName::Anon(0),\n+            cnum: LOCAL_CRATE,\n             loline: 0,\n             locol: 0,\n             hiline: 0,"}, {"sha": "da020b85ed499cc1be7c48dad8a82968c6b15b77", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -47,7 +47,7 @@ use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n@@ -1623,14 +1623,14 @@ impl Context {\n             _ => return None,\n         };\n \n-        let (krate, path) = if item.def_id.is_local() {\n+        let (krate, path) = if item.source.cnum == LOCAL_CRATE {\n             if let Some(path) = self.shared.local_sources.get(file) {\n                 (&self.shared.layout.krate, path)\n             } else {\n                 return None;\n             }\n         } else {\n-            let (krate, src_root) = match *self.cache.extern_locations.get(&item.def_id.krate)? {\n+            let (krate, src_root) = match *self.cache.extern_locations.get(&item.source.cnum)? {\n                 (ref name, ref src, Local) => (name, src),\n                 (ref name, ref src, Remote(ref s)) => {\n                     root = s.to_string();"}, {"sha": "c5f44baced2e47c3e8f6f9e7f1fc6d98d6a3be05", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -5,6 +5,7 @@ use crate::html::format::Buffer;\n use crate::html::highlight;\n use crate::html::layout;\n use crate::html::render::{Error, SharedContext, BASIC_KEYWORDS};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_span::source_map::FileName;\n use std::ffi::OsStr;\n use std::fs;\n@@ -37,8 +38,8 @@ impl<'a> DocFolder for SourceCollector<'a> {\n         if self.scx.include_sources\n             // skip all synthetic \"files\"\n             && item.source.filename.is_real()\n-            // skip non-local items\n-            && item.def_id.is_local()\n+            // skip non-local files\n+            && item.source.cnum == LOCAL_CRATE\n         {\n             // If it turns out that we couldn't read this file, then we probably\n             // can't read any of the files (generating html output from json or"}, {"sha": "0fa4a1d2353cac33ca1265144ba8e4a76b72bdd5", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -24,7 +24,7 @@ cfg_if::cfg_if! {\n         // If we're not documenting libstd then we just expose the main modules\n         // as we otherwise would.\n \n-        #[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\"))]\n+        #[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use crate::sys::ext as unix;\n "}, {"sha": "07b59a02556d9f3e8ea80c4b941c593219c5b2af", "filename": "src/libstd/sys/hermit/ext/ffi.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fffi.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -0,0 +1,38 @@\n+//! HermitCore-specific extension to the primitives in the `std::ffi` module\n+//!\n+//! # Examples\n+//!\n+//! ```\n+//! use std::ffi::OsString;\n+//! use std::os::hermit::ffi::OsStringExt;\n+//!\n+//! let bytes = b\"foo\".to_vec();\n+//!\n+//! // OsStringExt::from_vec\n+//! let os_string = OsString::from_vec(bytes);\n+//! assert_eq!(os_string.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStringExt::into_vec\n+//! let bytes = os_string.into_vec();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n+//!\n+//! ```\n+//! use std::ffi::OsStr;\n+//! use std::os::hermit::ffi::OsStrExt;\n+//!\n+//! let bytes = b\"foo\";\n+//!\n+//! // OsStrExt::from_bytes\n+//! let os_str = OsStr::from_bytes(bytes);\n+//! assert_eq!(os_str.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStrExt::as_bytes\n+//! let bytes = os_str.as_bytes();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys_common::os_str_bytes::*;"}, {"sha": "ea87d0ad2c94d769b86094668852a2c03e59630e", "filename": "src/libstd/sys/hermit/ext/mod.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fext%2Fmod.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -0,0 +1,14 @@\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![allow(missing_docs)]\n+\n+pub mod ffi;\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod prelude {\n+    #[doc(no_inline)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::ffi::{OsStrExt, OsStringExt};\n+}"}, {"sha": "f739df88ea6aa66ab3488aa46757edcf44cf4bb6", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -21,6 +21,7 @@ pub mod args;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n+pub mod ext;\n pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;"}, {"sha": "29e99c0afd27f0a3b6daa0ed049769aac322271e", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -253,6 +253,7 @@ impl<T: 'static> LocalKey<T> {\n     /// This function will still `panic!()` if the key is uninitialized and the\n     /// key's initializer panics.\n     #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n+    #[inline]\n     pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>\n     where\n         F: FnOnce(&T) -> R,"}, {"sha": "ce20ca5c91e6b79ba5a9dfa6d3d2e209cd295b2c", "filename": "src/test/rustdoc/auxiliary/external-macro-src.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-macro-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-macro-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-macro-src.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags:--remap-path-prefix={{src-base}}=/does-not-exist\n+\n+#![doc(html_root_url = \"https://example.com/\")]\n+\n+#[macro_export]\n+macro_rules! make_foo {\n+    () => {\n+        pub struct Foo;\n+        impl Foo {\n+            pub fn new() -> Foo {\n+                Foo\n+            }\n+        }\n+    }\n+}"}, {"sha": "4394415e5c76804d490d892f6c7b9c93885d0441", "filename": "src/test/rustdoc/external-macro-src.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:external-macro-src.rs\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate external_macro_src;\n+\n+// @has foo/index.html '//a[@href=\"../src/foo/external-macro-src.rs.html#4-15\"]' '[src]'\n+\n+// @has foo/struct.Foo.html\n+// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#8\"]' '[src]'\n+// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#9-13\"]' '[src]'\n+// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#10-12\"]' '[src]'\n+make_foo!();"}, {"sha": "c8e9a63ea9f771e2a648ac8afe2c93ffa406e5ce", "filename": "src/test/rustdoc/issue-26606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-26606.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -7,5 +7,5 @@\n extern crate issue_26606_macro;\n \n // @has issue_26606/constant.FOO.html\n-// @has - '//a/@href' '../src/issue_26606/auxiliary/issue-26606-macro.rs.html#3'\n+// @has - '//a/@href' '../src/issue_26606_macro/issue-26606-macro.rs.html#3'\n make_item!(FOO);"}, {"sha": "022d81a4dbfca295d9cde463cfc59000dbaf398c", "filename": "src/test/rustdoc/thread-local-src.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthread-local-src.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/index.html '//a[@href=\"../src/foo/thread-local-src.rs.html#1-6\"]' '[src]'\n+\n+// @has foo/constant.FOO.html '//a/@href' 'https://doc.rust-lang.org/nightly/src/std/'\n+thread_local!(pub static FOO: bool = false);"}, {"sha": "605cfdfe747a34412e3635975268d1c66a5b9b43", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1,12 +1,18 @@\n // edition:2018\n // run-rustfix\n \n-fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new(async move { x } )\n     //~^ ERROR E0373\n }\n \n+fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+    async move { *x }\n+    //~^ ERROR E0373\n+}\n+\n fn main() {\n-    let _foo = foo();\n+    let _ = test_boxed();\n+    let _ = test_ref(&0u32);\n }"}, {"sha": "ec752c15fa28456aac4bace049dcf18bcee9d1f5", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1,12 +1,18 @@\n // edition:2018\n // run-rustfix\n \n-fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new(async { x } )\n     //~^ ERROR E0373\n }\n \n+fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+    async { *x }\n+    //~^ ERROR E0373\n+}\n+\n fn main() {\n-    let _foo = foo();\n+    let _ = test_boxed();\n+    let _ = test_ref(&0u32);\n }"}, {"sha": "193026541d073433629c5f00547375cff6cc1110", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1,4 +1,4 @@\n-error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/async-borrowck-escaping-block-error.rs:6:20\n    |\n LL |     Box::new(async { x } )\n@@ -7,16 +7,35 @@ LL |     Box::new(async { x } )\n    |                    | `x` is borrowed here\n    |                    may outlive borrowed value `x`\n    |\n-note: generator is returned here\n-  --> $DIR/async-borrowck-escaping-block-error.rs:4:13\n+note: async block is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:4:20\n    |\n-LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n    |                    ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/async-borrowck-escaping-block-error.rs:11:11\n+   |\n+LL |     async { *x }\n+   |           ^^^-^^\n+   |           |  |\n+   |           |  `x` is borrowed here\n+   |           may outlive borrowed value `x`\n+   |\n+note: async block is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:11:5\n+   |\n+LL |     async { *x }\n+   |     ^^^^^^^^^^^^\n+help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     async move { *x }\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0373`."}, {"sha": "e667b72aee530616b705ed4354b14c1cacba0a93", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-#![feature(async_closure,async_await)]\n+#![feature(async_closure)]\n fn foo() -> Box<dyn std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new((async || x)())"}, {"sha": "d2a345231eb438687fe02d40b38bc2c9edfca400", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -4,7 +4,7 @@ struct List {\n impl List {\n     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n-        //~^ ERROR does not live long enough\n+        //~^ ERROR E0373\n     }\n }\n "}, {"sha": "468c2f366299c854df01813094270feba4fa7f1a", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -1,21 +1,21 @@\n-error[E0597]: `prefix` does not live long enough\n-  --> $DIR/does-not-live-long-enough.rs:6:51\n+error[E0373]: closure may outlive the current function, but it borrows `prefix`, which is owned by the current function\n+  --> $DIR/does-not-live-long-enough.rs:6:33\n    |\n-LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n-   |                     -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n LL |         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n-   |                                 ---               ^^^^^^ borrowed value does not live long enough\n+   |                                 ^^^               ------ `prefix` is borrowed here\n    |                                 |\n-   |                                 value captured here\n-LL |\n-LL |     }\n-   |     - `prefix` dropped here while still borrowed\n+   |                                 may outlive borrowed value `prefix`\n+   |\n+note: closure is returned here\n+  --> $DIR/does-not-live-long-enough.rs:5:55\n    |\n-help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `prefix` (and any other referenced variables), use the `move` keyword\n    |\n-LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n-   |                                                                                   ^^^^\n+LL |         self.data.iter().filter(move |s| s.starts_with(prefix)).map(|s| s.as_ref())\n+   |                                 ^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "45ca00f55ab596598b61c54ecaae4cf7e267b246", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -63,10 +63,6 @@ LL | use foo2::Bar;\n    |\n LL | use foo3::Bar;\n    |\n-help: you might be missing a type parameter\n-   |\n-LL | fn test_glob3<Bar>() {\n-   |              ^^^^^\n \n error[E0107]: wrong number of const arguments: expected 0, found 1\n   --> $DIR/privacy-ns1.rs:35:17"}, {"sha": "22aad3b0a9f584a0e021ee6ceba95464c20f3276", "filename": "src/test/ui/suggestions/no-extern-crate-in-type.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d249d756374737eb014079901ac132f1e1ed905e/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=d249d756374737eb014079901ac132f1e1ed905e", "patch": "@@ -8,10 +8,6 @@ help: possible candidate is found in another module, you can import it into scop\n    |\n LL | use foo::Foo;\n    |\n-help: you might be missing a type parameter\n-   |\n-LL | type Output<Foo> = Option<Foo>;\n-   |            ^^^^^\n \n error: aborting due to previous error\n "}]}