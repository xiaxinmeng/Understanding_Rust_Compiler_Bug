{"sha": "a838952239493d9dafe2d5f2ca1204f326841ae9", "node_id": "C_kwDOAAsO6NoAKGE4Mzg5NTIyMzk0OTNkOWRhZmUyZDVmMmNhMTIwNGYzMjY4NDFhZTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-04T00:09:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-05T02:56:36Z"}, "message": "Remove `unescape_byte_literal`.\n\nIt's easy to just use `unescape_literal` + `byte_from_char`.", "tree": {"sha": "366306fdb0e628a4749ce4890abf05216a059f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366306fdb0e628a4749ce4890abf05216a059f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a838952239493d9dafe2d5f2ca1204f326841ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a838952239493d9dafe2d5f2ca1204f326841ae9", "html_url": "https://github.com/rust-lang/rust/commit/a838952239493d9dafe2d5f2ca1204f326841ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a838952239493d9dafe2d5f2ca1204f326841ae9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a203482d2a20cba0c86298334ebd74438bd477ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a203482d2a20cba0c86298334ebd74438bd477ba", "html_url": "https://github.com/rust-lang/rust/commit/a203482d2a20cba0c86298334ebd74438bd477ba"}], "stats": {"total": 63, "additions": 20, "deletions": 43}, "files": [{"sha": "8f342175f7d37133f67b288b672b1eaa9e3bfaec", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=a838952239493d9dafe2d5f2ca1204f326841ae9", "patch": "@@ -2,12 +2,9 @@\n \n use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n-\n-use rustc_lexer::unescape::{unescape_byte, unescape_char};\n-use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n+use rustc_lexer::unescape::{byte_from_char, unescape_byte, unescape_char, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-\n use std::ascii;\n \n pub enum LitError {\n@@ -109,13 +106,11 @@ impl LitKind {\n                 let s = symbol.as_str();\n                 let mut buf = Vec::with_capacity(s.len());\n                 let mut error = Ok(());\n-                unescape_byte_literal(&s, Mode::ByteStr, &mut |_, unescaped_byte| {\n-                    match unescaped_byte {\n-                        Ok(c) => buf.push(c),\n-                        Err(err) => {\n-                            if err.is_fatal() {\n-                                error = Err(LitError::LexerError);\n-                            }\n+                unescape_literal(&s, Mode::ByteStr, &mut |_, c| match c {\n+                    Ok(c) => buf.push(byte_from_char(c)),\n+                    Err(err) => {\n+                        if err.is_fatal() {\n+                            error = Err(LitError::LexerError);\n                         }\n                     }\n                 });\n@@ -127,13 +122,11 @@ impl LitKind {\n                 let bytes = if s.contains('\\r') {\n                     let mut buf = Vec::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_byte_literal(&s, Mode::RawByteStr, &mut |_, unescaped_byte| {\n-                        match unescaped_byte {\n-                            Ok(c) => buf.push(c),\n-                            Err(err) => {\n-                                if err.is_fatal() {\n-                                    error = Err(LitError::LexerError);\n-                                }\n+                    unescape_literal(&s, Mode::RawByteStr, &mut |_, c| match c {\n+                        Ok(c) => buf.push(byte_from_char(c)),\n+                        Err(err) => {\n+                            if err.is_fatal() {\n+                                error = Err(LitError::LexerError);\n                             }\n                         }\n                     });"}, {"sha": "8d5eac29452e7405d841067d2fb7195993e9adc6", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=a838952239493d9dafe2d5f2ca1204f326841ae9", "patch": "@@ -93,19 +93,6 @@ where\n     }\n }\n \n-/// Takes a contents of a byte, byte string or raw byte string (without quotes)\n-/// and produces a sequence of bytes or errors.\n-/// Values are returned through invoking of the provided callback.\n-pub fn unescape_byte_literal<F>(src: &str, mode: Mode, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n-{\n-    debug_assert!(mode.is_byte());\n-    unescape_literal(src, mode, &mut |range, result| {\n-        callback(range, result.map(byte_from_char));\n-    })\n-}\n-\n /// Takes a contents of a char literal (without quotes), and returns an\n /// unescaped char or an error\n pub fn unescape_char(src: &str) -> Result<char, (usize, EscapeError)> {\n@@ -351,7 +338,8 @@ where\n     }\n }\n \n-fn byte_from_char(c: char) -> u8 {\n+#[inline]\n+pub fn byte_from_char(c: char) -> u8 {\n     let res = c as u32;\n     debug_assert!(res <= u8::MAX as u32, \"guaranteed because of Mode::ByteStr\");\n     res as u8"}, {"sha": "00c8401efdfe492413887a394c6479644f4522f9", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a838952239493d9dafe2d5f2ca1204f326841ae9/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=a838952239493d9dafe2d5f2ca1204f326841ae9", "patch": "@@ -246,10 +246,10 @@ fn test_unescape_byte_good() {\n fn test_unescape_byte_str_good() {\n     fn check(literal_text: &str, expected: &[u8]) {\n         let mut buf = Ok(Vec::with_capacity(literal_text.len()));\n-        unescape_byte_literal(literal_text, Mode::ByteStr, &mut |range, c| {\n+        unescape_literal(literal_text, Mode::ByteStr, &mut |range, c| {\n             if let Ok(b) = &mut buf {\n                 match c {\n-                    Ok(c) => b.push(c),\n+                    Ok(c) => b.push(byte_from_char(c)),\n                     Err(e) => buf = Err((range, e)),\n                 }\n             }\n@@ -280,15 +280,13 @@ fn test_unescape_raw_str() {\n \n #[test]\n fn test_unescape_raw_byte_str() {\n-    fn check(literal: &str, expected: &[(Range<usize>, Result<u8, EscapeError>)]) {\n+    fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n         let mut unescaped = Vec::with_capacity(literal.len());\n-        unescape_byte_literal(literal, Mode::RawByteStr, &mut |range, res| {\n-            unescaped.push((range, res))\n-        });\n+        unescape_literal(literal, Mode::RawByteStr, &mut |range, res| unescaped.push((range, res)));\n         assert_eq!(unescaped, expected);\n     }\n \n     check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n     check(\"\ud83e\udd80\", &[(0..4, Err(EscapeError::NonAsciiCharInByte))]);\n-    check(\"\ud83e\udd80a\", &[(0..4, Err(EscapeError::NonAsciiCharInByte)), (4..5, Ok(byte_from_char('a')))]);\n+    check(\"\ud83e\udd80a\", &[(0..4, Err(EscapeError::NonAsciiCharInByte)), (4..5, Ok('a'))]);\n }"}, {"sha": "1eea2346451dd42038a9edcb5bdfe3cd368bb20c", "filename": "src/tools/rust-analyzer/crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a838952239493d9dafe2d5f2ca1204f326841ae9/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a838952239493d9dafe2d5f2ca1204f326841ae9/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=a838952239493d9dafe2d5f2ca1204f326841ae9", "patch": "@@ -5,9 +5,7 @@\n mod block;\n \n use rowan::Direction;\n-use rustc_lexer::unescape::{\n-    self, unescape_byte, unescape_byte_literal, unescape_char, unescape_literal, Mode,\n-};\n+use rustc_lexer::unescape::{self, unescape_byte, unescape_char, unescape_literal, Mode};\n \n use crate::{\n     algo,\n@@ -143,7 +141,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         ast::LiteralKind::ByteString(s) => {\n             if !s.is_raw() {\n                 if let Some(without_quotes) = unquote(text, 2, '\"') {\n-                    unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n+                    unescape_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n                         if let Err(err) = char {\n                             push_err(2, (range.start, err));\n                         }"}]}