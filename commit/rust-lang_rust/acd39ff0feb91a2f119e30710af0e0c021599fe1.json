{"sha": "acd39ff0feb91a2f119e30710af0e0c021599fe1", "node_id": "C_kwDOAAsO6NoAKGFjZDM5ZmYwZmViOTFhMmYxMTllMzA3MTBhZjBlMGMwMjE1OTlmZTE", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-12-01T17:57:09Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-12-07T11:11:23Z"}, "message": "Make IdFunctor::try_map_id panic-safe", "tree": {"sha": "4bfc33b7cfc3d061b51180c294a6761d3ca1dade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bfc33b7cfc3d061b51180c294a6761d3ca1dade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd39ff0feb91a2f119e30710af0e0c021599fe1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGvQVsACgkQB8rDzKfg\nZD+o3Q/9EjY9XZTz3G3bCpIyEJHsAJGh8MVcMmgweDpvVaN22kj5YpDlEFuMqQeu\nwy5AduGI4QgBtEcJC49XJTMMaiKIUPpeqC5H5+pNH6ipdyiYeCAOu10L6RihcOF6\n/kvA+dLw6HHy0o70KgT+brQn6OdPpMx1p68gADg7LIBonsTqvNoqvb5semdulA40\niMk30ZPHfIyqG9nl6v0kif07676cSVT+yI6cJhcV+jrNdaK1px5AhdHvW4ORgHT1\nmY8mQeYgRAEI3OyTYEAlO2uGnQ4WB8Yx1kC0RoaWiQTMWD/00g2+gfUM+hYeQo10\ndrA61H/8gROcibGWEcY36z4GvRATOar1mM6tuNA45UXQqU7mAmL614qaVWrZzTFZ\nbz8/f+7PKiXT7rfYZCkywNqAESj9/cR2OvdFeGEAQhLb+uFJCHWZpy6NRD64wPuN\ndJa9LJcqNcSo7DMwAIZie2TG4lxt5lpwqpeIrefEZuh3sB00O9iudt/ovVBd/7Ws\n+ukBOy8CAmEpp42X8KAjg5vR4gTTeUyX6TZgVuH0+hQPDbCbcHQH3avaxBaJyCb3\nZyQr53wLdZsbtt/ngoA1giBZiKOolvjsLIZCAOyJHMb1vxc/kZJulkvXqLfcNajW\nBGbBQiRtzZI80HNX9n2Z12cjd/r6VryiFFYDClbkmeLrm325HQU=\n=eVnt\n-----END PGP SIGNATURE-----", "payload": "tree 4bfc33b7cfc3d061b51180c294a6761d3ca1dade\nparent 2af5c6562deed1878000e791f2cb21b981a53959\nauthor Alan Egerton <eggyal@gmail.com> 1638381429 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638875483 +0000\n\nMake IdFunctor::try_map_id panic-safe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd39ff0feb91a2f119e30710af0e0c021599fe1", "html_url": "https://github.com/rust-lang/rust/commit/acd39ff0feb91a2f119e30710af0e0c021599fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd39ff0feb91a2f119e30710af0e0c021599fe1/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af5c6562deed1878000e791f2cb21b981a53959", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af5c6562deed1878000e791f2cb21b981a53959", "html_url": "https://github.com/rust-lang/rust/commit/2af5c6562deed1878000e791f2cb21b981a53959"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "a3d3f988344c6e0663c6f980494da10354b4725e", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/acd39ff0feb91a2f119e30710af0e0c021599fe1/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd39ff0feb91a2f119e30710af0e0c021599fe1/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=acd39ff0feb91a2f119e30710af0e0c021599fe1", "patch": "@@ -34,38 +34,43 @@ impl<T> IdFunctor for Vec<T> {\n     type Inner = T;\n \n     #[inline]\n-    fn try_map_id<F, E>(mut self, mut f: F) -> Result<Self, E>\n+    fn try_map_id<F, E>(self, mut f: F) -> Result<Self, E>\n     where\n         F: FnMut(Self::Inner) -> Result<Self::Inner, E>,\n     {\n-        // FIXME: We don't really care about panics here and leak\n-        // far more than we should, but that should be fine for now.\n-        let len = self.len();\n-        unsafe {\n-            self.set_len(0);\n-            let start = self.as_mut_ptr();\n-            for i in 0..len {\n-                let p = start.add(i);\n-                match f(p.read()) {\n-                    Ok(val) => p.write(val),\n-                    Err(err) => {\n-                        // drop all other elements in self\n-                        // (current element was \"moved\" into the call to f)\n-                        for j in (0..i).chain(i + 1..len) {\n-                            start.add(j).drop_in_place();\n-                        }\n+        struct HoleVec<T> {\n+            vec: Vec<mem::ManuallyDrop<T>>,\n+            hole: Option<usize>,\n+        }\n \n-                        // returning will drop self, releasing the allocation\n-                        // (len is 0 so elements will not be re-dropped)\n-                        return Err(err);\n+        impl<T> Drop for HoleVec<T> {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    for (index, slot) in self.vec.iter_mut().enumerate() {\n+                        if self.hole != Some(index) {\n+                            mem::ManuallyDrop::drop(slot);\n+                        }\n                     }\n                 }\n             }\n-            // Even if we encountered an error, set the len back\n-            // so we don't leak memory.\n-            self.set_len(len);\n         }\n-        Ok(self)\n+\n+        unsafe {\n+            let (ptr, length, capacity) = self.into_raw_parts();\n+            let vec = Vec::from_raw_parts(ptr.cast(), length, capacity);\n+            let mut hole_vec = HoleVec { vec, hole: None };\n+\n+            for (index, slot) in hole_vec.vec.iter_mut().enumerate() {\n+                hole_vec.hole = Some(index);\n+                let original = mem::ManuallyDrop::take(slot);\n+                let mapped = f(original)?;\n+                *slot = mem::ManuallyDrop::new(mapped);\n+                hole_vec.hole = None;\n+            }\n+\n+            mem::forget(hole_vec);\n+            Ok(Vec::from_raw_parts(ptr, length, capacity))\n+        }\n     }\n }\n "}, {"sha": "181e5180d53d5b67da9a50b8b0f8af8aa7d7134a", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd39ff0feb91a2f119e30710af0e0c021599fe1/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd39ff0feb91a2f119e30710af0e0c021599fe1/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=acd39ff0feb91a2f119e30710af0e0c021599fe1", "patch": "@@ -23,6 +23,7 @@\n #![feature(once_cell)]\n #![feature(test)]\n #![feature(thread_id_value)]\n+#![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n "}]}