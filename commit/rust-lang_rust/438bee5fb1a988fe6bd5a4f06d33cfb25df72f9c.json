{"sha": "438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGJlZTVmYjFhOTg4ZmU2YmQ1YTRmMDZkMzNjZmIyNWRmNzJmOWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-05T17:03:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-05T17:03:47Z"}, "message": "Rustup to rustc 1.32.0-nightly (e6c5cf923 2018-11-04)", "tree": {"sha": "327c155a5aa7c28bac8c3a8dd16ab22b5bcd3559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/327c155a5aa7c28bac8c3a8dd16ab22b5bcd3559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "html_url": "https://github.com/rust-lang/rust/commit/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7f65ce550e1c8b633155366435e91064726aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7f65ce550e1c8b633155366435e91064726aca", "html_url": "https://github.com/rust-lang/rust/commit/4f7f65ce550e1c8b633155366435e91064726aca"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "24645279f97fb17d1a42ffa6760189d11a533919", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "patch": "@@ -456,7 +456,7 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n ) {\n-    let fn_ty = fx.monomorphize(&func.ty(&fx.mir.local_decls, fx.tcx));\n+    let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n     let sig = ty_fn_sig(fx.tcx, fn_ty);\n \n     // Unpack arguments tuple for closures"}, {"sha": "3d4112dba1042a7a2e12f0eaf46a6aaa5b43396e", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "patch": "@@ -402,7 +402,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     place.write_place_ref(fx, lval);\n                 }\n                 Rvalue::BinaryOp(bin_op, lhs, rhs) => {\n-                    let ty = fx.monomorphize(&lhs.ty(&fx.mir.local_decls, fx.tcx));\n+                    let ty = fx.monomorphize(&lhs.ty(fx.mir, fx.tcx));\n                     let lhs = trans_operand(fx, lhs);\n                     let rhs = trans_operand(fx, rhs);\n \n@@ -422,7 +422,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n-                    let ty = fx.monomorphize(&lhs.ty(&fx.mir.local_decls, fx.tcx));\n+                    let ty = fx.monomorphize(&lhs.ty(fx.mir, fx.tcx));\n                     let lhs = trans_operand(fx, lhs);\n                     let rhs = trans_operand(fx, rhs);\n "}, {"sha": "f642384634af0232a893bca894f3d3377c36e9ad", "filename": "src/common.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=438bee5fb1a988fe6bd5a4f06d33cfb25df72f9c", "patch": "@@ -20,7 +20,7 @@ pub fn pointer_ty(tcx: TyCtxt) -> types::Type {\n }\n \n fn scalar_to_cton_type(tcx: TyCtxt, scalar: &Scalar) -> Type {\n-    match scalar.value.size(tcx).bits() {\n+    match scalar.value.size(&tcx).bits() {\n         8 => types::I8,\n         16 => types::I16,\n         32 => types::I32,\n@@ -530,7 +530,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                         scalar_to_cton_type(fx.tcx, b),\n                         MemFlags::new(),\n                         addr,\n-                        a.value.size(fx.tcx).bytes() as u32 as i32,\n+                        a.value.size(&fx.tcx).bytes() as u32 as i32,\n                     );\n                     CPlace::Addr(ptr, Some(extra), inner_layout)\n                 }\n@@ -558,7 +558,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                             MemFlags::new(),\n                             extra.expect(\"unsized type without metadata\"),\n                             dest.expect_addr(),\n-                            a.value.size(fx.tcx).bytes() as u32 as i32,\n+                            a.value.size(&fx.tcx).bytes() as u32 as i32,\n                         );\n                     }\n                     _ => bug!(\n@@ -643,29 +643,29 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n     }\n }\n \n-impl<'a, 'tcx: 'a, B: Backend> LayoutOf for &'a FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = TyLayout<'tcx>;\n \n-    fn layout_of(self, ty: Ty<'tcx>) -> TyLayout<'tcx> {\n+    fn layout_of(&self, ty: Ty<'tcx>) -> TyLayout<'tcx> {\n         let ty = self.monomorphize(&ty);\n         self.tcx.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap()\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for &'a FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for FunctionCx<'a, 'tcx, B> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> layout::HasDataLayout for &'a FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx, B: Backend + 'a> layout::HasDataLayout for FunctionCx<'a, 'tcx, B> {\n     fn data_layout(&self) -> &layout::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> HasTargetSpec for &'a FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx, B: Backend + 'a> HasTargetSpec for FunctionCx<'a, 'tcx, B> {\n     fn target_spec(&self) -> &Target {\n         &self.tcx.sess.target.target\n     }"}]}