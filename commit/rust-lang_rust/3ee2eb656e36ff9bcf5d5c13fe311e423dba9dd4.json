{"sha": "3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTJlYjY1NmUzNmZmOWJjZjVkNWMxM2ZlMzExZTQyM2RiYTlkZDQ=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-02T01:15:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-02T19:38:24Z"}, "message": "doc: added definition of trivial casts to spec\n\n(cf @ignored Expr.Be and #1215 for intended use)", "tree": {"sha": "0ec2024c691336b3adcb513329950e44e91a98e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ec2024c691336b3adcb513329950e44e91a98e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "html_url": "https://github.com/rust-lang/rust/commit/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "html_url": "https://github.com/rust-lang/rust/commit/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "540b209c0745c280e34ec96f9b296be46eba71af", "filename": "doc/rust.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "patch": "@@ -2954,9 +2954,8 @@ analogous to a @code{become} expression in Newsqueak or Alef.}  destroys the\n current function activation frame and replaces it with an activation frame for\n the called function. In other words, @code{be} executes a tail-call. The\n syntactic form of a @code{be} expression is therefore limited to @emph{tail\n-position}: its argument must be a @emph{call expression}, and it must be the\n-last expression in a block.\n-\n+position}: its argument must be a @emph{call expression} or a @{trivial cast}\n+of a @emph{call expression}, and it must be the last expression in a block.\n An example of a @code{be} expression:\n @example\n fn print_loop(n: int) @{\n@@ -2971,6 +2970,7 @@ fn print_loop(n: int) @{\n \n The above example executes in constant space, replacing each frame with a new\n copy of itself.\n+\n @end ignore\n \n \n@@ -3001,6 +3001,7 @@ execution and destroying the iterator frame.\n @cindex As expression\n @cindex Cast\n @cindex Typecast\n+@cindex Trivial cast\n \n Executing an @code{as} expression casts the value on the left-hand side to the\n type on the right-hand side.\n@@ -3018,6 +3019,10 @@ fn avg(v: [float]) -> float @{\n @}\n @end example\n \n+A cast is a @emph{trivial cast} iff the type of the casted expression and the\n+target type are identical after replacing all occurences of @code{int},\n+@code{uint}, @code{float} with their machine type equivalents of the\n+target architecture in both types.\n \n @node       Ref.Expr.Fail\n @subsection Ref.Expr.Fail"}]}