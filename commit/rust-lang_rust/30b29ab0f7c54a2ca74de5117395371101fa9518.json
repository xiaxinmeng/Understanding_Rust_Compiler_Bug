{"sha": "30b29ab0f7c54a2ca74de5117395371101fa9518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjI5YWIwZjdjNTRhMmNhNzRkZTUxMTczOTUzNzExMDFmYTk1MTg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-27T01:58:16Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-28T11:00:27Z"}, "message": "Simplify `maybe_get_optimized_mir` and `maybe_get_promoted_mir`\n\nSince both functions are always unwrapped, don't wrap the return value\nin an `Option`.", "tree": {"sha": "26a33907ddc7621451273a3de87a1c3c8402c112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a33907ddc7621451273a3de87a1c3c8402c112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b29ab0f7c54a2ca74de5117395371101fa9518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b29ab0f7c54a2ca74de5117395371101fa9518", "html_url": "https://github.com/rust-lang/rust/commit/30b29ab0f7c54a2ca74de5117395371101fa9518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b29ab0f7c54a2ca74de5117395371101fa9518/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca64e73399c02b2f964e3b34f969e826d061eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca64e73399c02b2f964e3b34f969e826d061eed", "html_url": "https://github.com/rust-lang/rust/commit/cca64e73399c02b2f964e3b34f969e826d061eed"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "81e0cd7a4c4dd0276dc0b96e13b71759e18e5fc5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30b29ab0f7c54a2ca74de5117395371101fa9518/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b29ab0f7c54a2ca74de5117395371101fa9518/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=30b29ab0f7c54a2ca74de5117395371101fa9518", "patch": "@@ -127,24 +127,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n-    optimized_mir => {\n-        let mir = cdata.maybe_get_optimized_mir(tcx, def_id.index).unwrap_or_else(|| {\n-            bug!(\"get_optimized_mir: missing MIR for `{:?}`\", def_id)\n-        });\n-\n-        let mir = tcx.arena.alloc(mir);\n-\n-        mir\n-    }\n-    promoted_mir => {\n-        let promoted = cdata.maybe_get_promoted_mir(tcx, def_id.index).unwrap_or_else(|| {\n-            bug!(\"get_promoted_mir: missing promoted MIR for `{:?}`\", def_id)\n-        });\n-\n-        let promoted = tcx.arena.alloc(promoted);\n-\n-        promoted\n-    }\n+    optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n+    promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_const_qualif => {\n         (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }"}, {"sha": "10b165c9066254463fc562cce83efa68b9e427d3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30b29ab0f7c54a2ca74de5117395371101fa9518/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b29ab0f7c54a2ca74de5117395371101fa9518/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=30b29ab0f7c54a2ca74de5117395371101fa9518", "patch": "@@ -917,22 +917,32 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n-    pub fn maybe_get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Option<Body<'tcx>> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),\n-        }\n+    pub fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+        let mir =\n+            match self.is_proc_macro(id) {\n+                true => None,\n+                false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),\n+            };\n+\n+        mir.unwrap_or_else(|| {\n+            bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n+        })\n     }\n \n-    pub fn maybe_get_promoted_mir(\n+    pub fn get_promoted_mir(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n-    ) -> Option<IndexVec<Promoted, Body<'tcx>>> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)),)\n-        }\n+    ) -> IndexVec<Promoted, Body<'tcx>> {\n+        let promoted =\n+            match self.is_proc_macro(id) {\n+                true => None,\n+                false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)))\n+            };\n+\n+        promoted.unwrap_or_else(|| {\n+            bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n+        })\n     }\n \n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {"}]}