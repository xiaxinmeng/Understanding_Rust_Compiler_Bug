{"sha": "01bb3710b5e7114a470f07b6d0463a70ae728607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmIzNzEwYjVlNzExNGE0NzBmMDdiNmQwNDYzYTcwYWU3Mjg2MDc=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-26T02:52:17Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:50Z"}, "message": "Pass constness to SelectionContext", "tree": {"sha": "e59919553f05738dcc24ba2cb38b8ec4fe59b444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59919553f05738dcc24ba2cb38b8ec4fe59b444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bb3710b5e7114a470f07b6d0463a70ae728607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1IACgkQAn35M4hi\nrd31qg/+KOIA+iEEv7CeMx62BQJMCO1Ar0I5+/bZs0gbMFbcUj0FnaOYy0fwXI2/\neAknzm6p7zoavlZA6A9wELrKE7CE9iBpL1okdHfOch0ZRMxCPbPVzYxxn/sYK7Cj\n7Bz3wfMaEzEh7wpKd5t6YKjErpZwMKk2yYPlSukzWkVTk9glJvTXLvbQE0+6IXAM\nY52jdBB2fOf8ygKGRL31GUIQ5LqQn27I/Epf+xWSEhGhhZo5oBl0nMSBA1i0wZYN\nM0k5uzyajCBbWw4sn4AEqOuFhXBEkMhHknn6WF+1xB84iZZopVCu7FkcJ/vphgl3\nMZvHaNjx3B2o0w6IBQFUVSmTl2Ohjw6gtO1zZeraMYlZWLfDmZNlhkqY1P9PBnOM\n+X4rbGwmhxoHCzeDKYtbL7swxLYeQOzAuYzYymsWbgRvXFAmSppJL3pxh3OZK6rC\nj/5owNu3V7p2ihIhR+zSt0CWkvIzlJbmZuyANvWO3OHGBmbF2PNcmG/4ygiCfp2u\nLpXAkI/F62/0IqpBeujc2f/FqlFgySoS+qF9DKv+wCsDwUPoeXngkrBqEivLXe8C\nR+Po2EXpxuE89rbyJvv2TksTbvi4GQwWADWX8mCZNYMEA6Unop+GZklMUjk+zYYw\n5azabGNvkWz/lQqvZKA43habpKoMA/7Qe49+oGrTd8W9q1WDGeQ=\n=RzTG\n-----END PGP SIGNATURE-----", "payload": "tree e59919553f05738dcc24ba2cb38b8ec4fe59b444\nparent a00f2bcf5c8d98852d6cfda2468185eda41ff2ba\nauthor Deadbeef <ent3rm4n@gmail.com> 1627267937 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846930 +0000\n\nPass constness to SelectionContext\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bb3710b5e7114a470f07b6d0463a70ae728607", "html_url": "https://github.com/rust-lang/rust/commit/01bb3710b5e7114a470f07b6d0463a70ae728607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bb3710b5e7114a470f07b6d0463a70ae728607/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "html_url": "https://github.com/rust-lang/rust/commit/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba"}], "stats": {"total": 124, "additions": 101, "deletions": 23}, "files": [{"sha": "d60388b31c13c878f48ff6abf4eb502de39583a4", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=01bb3710b5e7114a470f07b6d0463a70ae728607", "patch": "@@ -1,5 +1,6 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ToPredicate, Ty, WithConstness};\n \n@@ -49,11 +50,28 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n+    fn select_all_with_constness_or_error(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        _constness: hir::Constness,\n+    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+        self.select_all_or_error(infcx)\n+    }\n+\n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n+    // FIXME this should not provide a default body for chalk as chalk should be updated\n+    fn select_with_constness_where_possible(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        _constness: hir::Constness,\n+    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+        self.select_where_possible(infcx)\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n }\n "}, {"sha": "4c5d8b5ec7978c8d1c198abf23ea94f2349318f2", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=01bb3710b5e7114a470f07b6d0463a70ae728607", "patch": "@@ -3,6 +3,7 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -228,6 +229,22 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         if errors.is_empty() { Ok(()) } else { Err(errors) }\n     }\n \n+    fn select_all_with_constness_or_error(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        constness: rustc_hir::Constness,\n+    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+        self.select_with_constness_where_possible(infcx, constness)?;\n+\n+        let errors: Vec<_> = self\n+            .predicates\n+            .to_errors(CodeAmbiguity)\n+            .into_iter()\n+            .map(to_fulfillment_error)\n+            .collect();\n+        if errors.is_empty() { Ok(()) } else { Err(errors) }\n+    }\n+\n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n@@ -236,6 +253,15 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n+    fn select_with_constness_where_possible(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        constness: hir::Constness,\n+    ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+        let mut selcx = SelectionContext::with_constness(infcx, constness);\n+        self.select(&mut selcx)\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }"}, {"sha": "f7c66f8b2849f3f8937f4c838ee4eb7f4d4b7c14", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=01bb3710b5e7114a470f07b6d0463a70ae728607", "patch": "@@ -130,6 +130,9 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// and a negative impl\n     allow_negative_impls: bool,\n \n+    /// Do we only want const impls when we have a const trait predicate?\n+    const_impls_required: bool,\n+\n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n     /// rather than immediately reported because we do not have accurate spans.\n@@ -221,6 +224,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            const_impls_required: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -232,6 +236,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            const_impls_required: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -247,6 +252,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n+            const_impls_required: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -262,10 +268,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            const_impls_required: false,\n             query_mode,\n         }\n     }\n \n+    pub fn with_constness(\n+        infcx: &'cx InferCtxt<'cx, 'tcx>,\n+        constness: hir::Constness,\n+    ) -> SelectionContext<'cx, 'tcx> {\n+        SelectionContext {\n+            infcx,\n+            freshener: infcx.freshener_keep_static(),\n+            intercrate: false,\n+            intercrate_ambiguity_causes: None,\n+            allow_negative_impls: false,\n+            const_impls_required: matches!(constness, hir::Constness::Const),\n+            query_mode: TraitQueryMode::Standard,\n+        }\n+    }\n+\n     /// Enables tracking of intercrate ambiguity causes. These are\n     /// used in coherence to give improved diagnostics. We don't do\n     /// this until we detect a coherence error because it can lead to\n@@ -1024,26 +1046,29 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n-        if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n-            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n-                != tcx.lang_items().sized_trait()\n-            // const Sized bounds are skipped\n-            {\n-                match candidate {\n-                    // const impl\n-                    ImplCandidate(def_id)\n-                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                    // const param\n-                    ParamCandidate(ty::ConstnessAnd {\n-                        constness: hir::Constness::Const, ..\n-                    }) => {}\n-                    // auto trait impl\n-                    AutoImplCandidate(..) => {}\n-                    // FIXME check if this is right, but this would allow Sized impls\n-                    // BuiltinCandidate { .. } => {}\n-                    _ => {\n-                        // reject all other types of candidates\n-                        return Err(Unimplemented);\n+        if self.const_impls_required {\n+            if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n+                if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n+                    != tcx.lang_items().sized_trait()\n+                // const Sized bounds are skipped\n+                {\n+                    match candidate {\n+                        // const impl\n+                        ImplCandidate(def_id)\n+                            if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                        // const param\n+                        ParamCandidate(ty::ConstnessAnd {\n+                            constness: hir::Constness::Const,\n+                            ..\n+                        }) => {}\n+                        // auto trait impl\n+                        AutoImplCandidate(..) => {}\n+                        // FIXME check if this is right, but this would allow Sized impls\n+                        // BuiltinCandidate { .. } => {}\n+                        _ => {\n+                            // reject all other types of candidates\n+                            return Err(Unimplemented);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "0ce2746b128a85918e77c3f2929bddf7e5442926", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=01bb3710b5e7114a470f07b6d0463a70ae728607", "patch": "@@ -1354,7 +1354,9 @@ pub fn check_type_bounds<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+        if let Err(ref errors) =\n+            inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness)\n+        {\n             infcx.report_fulfillment_errors(errors, None, false);\n             return Err(ErrorReported);\n         }"}, {"sha": "c13901ae8be2b7be59dc465008af303a4278766b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bb3710b5e7114a470f07b6d0463a70ae728607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=01bb3710b5e7114a470f07b6d0463a70ae728607", "patch": "@@ -714,7 +714,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n         debug!(\"select_all_obligations_or_error\");\n-        if let Err(errors) = self.fulfillment_cx.borrow_mut().select_all_or_error(&self) {\n+        if let Err(errors) = self\n+            .fulfillment_cx\n+            .borrow_mut()\n+            .select_all_with_constness_or_error(&self, self.inh.constness)\n+        {\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n         }\n     }\n@@ -725,7 +729,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) {\n-        let result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n+        let result = self\n+            .fulfillment_cx\n+            .borrow_mut()\n+            .select_with_constness_where_possible(self, self.inh.constness);\n         if let Err(mut errors) = result {\n             mutate_fulfillment_errors(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);"}]}