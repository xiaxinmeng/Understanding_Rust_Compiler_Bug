{"sha": "2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmQzMGZhNTE2YzdmZDkxZjlkMTNjMGFlYWZmODhjN2U0ZTYwMjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T10:29:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T07:35:20Z"}, "message": "implement char handling", "tree": {"sha": "b9c47872a933d9dd3d92e8c18616c5e56d00dd7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c47872a933d9dd3d92e8c18616c5e56d00dd7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaO44AAoJEFbW7qD8Z6xG1GsQAJqVBsFQ7iWnZ62CNEcKPlAY\nLGRhkDP76xBVXdiO5fCGfSUweA3jtIuLKaoUPepDLv/wcdGtWqlvaJ2RzvjwEWyY\nQ4wIm0mEXScYW3qIxMFyEedAIBVrc3rAAsI7a9O/oU7gy6rng+9BBOetzEWIzACT\n51lMgJf8gQy3TiJGIrM3bbQMAsOz4CdGMWmNGZjws+C8v5OYHCqJxSd78b9Nu7Cm\nf3X+EIyVp6iz4zn2nvGYRxbuMHyvYD/zvvXGTeC/zyq/5gS/o0IvkZFKOwd2b0T6\npRf/mqPxrYVTAjjhra6Uy5VF170LwnQjAfs6wwO84XJw+cgf/HK9cn37gHUuYhdI\nmsReDpu6/qQsvWFvflUY4IrOkC1ZJTclwfK6JFLaHz/nP+i6LRa+exZT9+3tsTpD\n1RnDVOWb3nPQwhAfrz2ZxlBPGD0ptsUVBPhFy7xY0BPaOoUtWNTlXivv97p54M18\nloz0GHBmAdvlX82eemIUa+4OJJjy/Op7VfKcP1+XMXEP8WU2pfUSelX6T/7e25WG\ndxRiNIfzd2eJ15K2PyBg/kooDGealAjmnOw6EWm2shTzj71GcUTZKMp2+L8WhIIz\nIOIojr5CWpJ6fYTdIXikNIBGX5j6mXX8+Nu4iz7+XLEGdEOMPuqU/AzEtOTpJSAu\nqdfnIb3TuWZfcDxzvnKJ\n=Ehou\n-----END PGP SIGNATURE-----", "payload": "tree b9c47872a933d9dd3d92e8c18616c5e56d00dd7e\nparent 579628f56ddae7fa07e415ceebe0cb4faa0cfe72\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466418585 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466494520 +0200\n\nimplement char handling"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "html_url": "https://github.com/rust-lang/rust/commit/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579628f56ddae7fa07e415ceebe0cb4faa0cfe72", "url": "https://api.github.com/repos/rust-lang/rust/commits/579628f56ddae7fa07e415ceebe0cb4faa0cfe72", "html_url": "https://github.com/rust-lang/rust/commit/579628f56ddae7fa07e415ceebe0cb4faa0cfe72"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "9725e9aafc4e327a97d9fa38ec668a2b5fa03f21", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -28,6 +28,7 @@ pub enum EvalError<'tcx> {\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n+    InvalidChar(u32),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -66,6 +67,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::InvalidChar(..) =>\n+                \"tried to interpret an invalid 32-bit value as a char\",\n         }\n     }\n \n@@ -85,6 +88,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"array index {} out of bounds {} at {:?}\", index, len, span),\n             EvalError::Math(span, ref err) =>\n                 write!(f, \"mathematical operation at {:?} failed with {:?}\", span, err),\n+            EvalError::InvalidChar(c) =>\n+                write!(f, \"invalid utf8 character: {}\", c),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "6b6779b59c47a82258222519543ca3d1a21f564c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -208,7 +208,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_bool(ptr, b)?;\n                 Ok(ptr)\n             }\n-            Char(_c)          => unimplemented!(),\n+            Char(c) => {\n+                let ptr = self.memory.allocate(4);\n+                self.memory.write_uint(ptr, c as u32 as u64, 4)?;\n+                Ok(ptr)\n+            },\n             Struct(_node_id)  => unimplemented!(),\n             Tuple(_node_id)   => unimplemented!(),\n             Function(_def_id) => unimplemented!(),\n@@ -1371,6 +1375,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use syntax::ast::{IntTy, UintTy};\n         let val = match (self.memory.pointer_size, &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n+            (_, &ty::TyChar)              => {\n+                let c = self.memory.read_uint(ptr, 4)? as u32;\n+                match ::std::char::from_u32(c) {\n+                    Some(ch) => PrimVal::Char(ch),\n+                    None => return Err(EvalError::InvalidChar(c)),\n+                }\n+            }\n             (_, &ty::TyInt(IntTy::I8))    => PrimVal::I8(self.memory.read_int(ptr, 1)? as i8),\n             (2, &ty::TyInt(IntTy::Is)) |\n             (_, &ty::TyInt(IntTy::I16))   => PrimVal::I16(self.memory.read_int(ptr, 2)? as i16),"}, {"sha": "17a42e6fccf2a2590135aad3866f17c7fd702491", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -369,6 +369,7 @@ impl<'tcx> Memory<'tcx> {\n             PrimVal::U16(n)  => self.write_uint(ptr, n as u64, 2),\n             PrimVal::U32(n)  => self.write_uint(ptr, n as u64, 4),\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n+            PrimVal::Char(c) => self.write_uint(ptr, c as u32 as u64, 4),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n             PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),"}, {"sha": "f3aedfc19743d12db124897c56a4d7cb01e14274", "filename": "src/primval.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -12,6 +12,7 @@ pub enum PrimVal {\n     AbstractPtr(Pointer),\n     FnPtr(Pointer),\n     IntegerPtr(u64),\n+    Char(char),\n }\n \n /// returns the result of the operation and whether the operation overflowed\n@@ -127,6 +128,15 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (U16(l), U16(r)) => int_binops!(U16, l, r),\n         (U32(l), U32(r)) => int_binops!(U32, l, r),\n         (U64(l), U64(r)) => int_binops!(U64, l, r),\n+        (Char(l), Char(r)) => match bin_op {\n+            Eq => Bool(l == r),\n+            Ne => Bool(l != r),\n+            Lt => Bool(l < r),\n+            Le => Bool(l <= r),\n+            Gt => Bool(l > r),\n+            Ge => Bool(l >= r),\n+            _ => panic!(\"invalid char op: {:?}\", bin_op),\n+        },\n \n         (Bool(l), Bool(r)) => {\n             Bool(match bin_op {"}, {"sha": "8315ae7af84a7e5a2ecc4b903043a8a77e63c193", "filename": "tests/compile-fail/option_eq.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/tests%2Fcompile-fail%2Foption_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/tests%2Fcompile-fail%2Foption_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foption_eq.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: can't handle cast: tmp0 as isize (Misc)\n+// no-ignore-x86 ignore-x86_64\n+fn main() {\n+    assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n+}"}, {"sha": "505c09b0ad885a287d187a6731d9902b029e770f", "filename": "tests/run-pass/char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/tests%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021/tests%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fchar.rs?ref=2dbd30fa516c7fd91f9d13c0aeaff88c7e4e6021", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let c = 'x';\n+    assert_eq!(c, 'x');\n+    assert!('a' < 'z');\n+    assert!('1' < '9');\n+    assert_eq!(std::char::from_u32('x' as u32).unwrap(), 'x');\n+    // FIXME:\n+    // assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n+}"}]}