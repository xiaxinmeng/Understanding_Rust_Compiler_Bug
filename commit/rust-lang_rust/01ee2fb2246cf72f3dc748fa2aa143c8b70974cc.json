{"sha": "01ee2fb2246cf72f3dc748fa2aa143c8b70974cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZWUyZmIyMjQ2Y2Y3MmYzZGM3NDhmYTJhYTE0M2M4YjcwOTc0Y2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T21:39:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `IrMaps::num_vars`", "tree": {"sha": "8988b1b973c45630301886e1b597e015088937c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8988b1b973c45630301886e1b597e015088937c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc", "html_url": "https://github.com/rust-lang/rust/commit/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "html_url": "https://github.com/rust-lang/rust/commit/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "ad9a64954f1905adf0c294f80314753de51ae261", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ee2fb2246cf72f3dc748fa2aa143c8b70974cc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=01ee2fb2246cf72f3dc748fa2aa143c8b70974cc", "patch": "@@ -246,7 +246,7 @@ struct IrMaps {\n     capture_map: moves::CaptureMap,\n \n     num_live_nodes: Cell<uint>,\n-    num_vars: uint,\n+    num_vars: Cell<uint>,\n     live_node_map: HashMap<NodeId, LiveNode>,\n     variable_map: HashMap<NodeId, Variable>,\n     capture_info_map: HashMap<NodeId, @~[CaptureInfo]>,\n@@ -263,7 +263,7 @@ fn IrMaps(tcx: ty::ctxt,\n         method_map: method_map,\n         capture_map: capture_map,\n         num_live_nodes: Cell::new(0),\n-        num_vars: 0,\n+        num_vars: Cell::new(0),\n         live_node_map: HashMap::new(),\n         variable_map: HashMap::new(),\n         capture_info_map: HashMap::new(),\n@@ -295,9 +295,9 @@ impl IrMaps {\n     }\n \n     pub fn add_variable(&mut self, vk: VarKind) -> Variable {\n-        let v = Variable(self.num_vars);\n+        let v = Variable(self.num_vars.get());\n         self.var_kinds.push(vk);\n-        self.num_vars += 1;\n+        self.num_vars.set(self.num_vars.get() + 1);\n \n         match vk {\n             Local(LocalInfo { id: node_id, .. }) | Arg(node_id, _) => {\n@@ -604,7 +604,8 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n         s: specials,\n         successors: @mut vec::from_elem(ir.num_live_nodes.get(),\n                                         invalid_node()),\n-        users: @mut vec::from_elem(ir.num_live_nodes.get() * ir.num_vars,\n+        users: @mut vec::from_elem(ir.num_live_nodes.get() *\n+                                   ir.num_vars.get(),\n                                    invalid_users()),\n         loop_scope: @mut ~[],\n         break_ln: @RefCell::new(HashMap::new()),\n@@ -672,7 +673,7 @@ impl Liveness {\n     }\n \n     pub fn idx(&self, ln: LiveNode, var: Variable) -> uint {\n-        *ln * self.ir.num_vars + *var\n+        *ln * self.ir.num_vars.get() + *var\n     }\n \n     pub fn live_on_entry(&self, ln: LiveNode, var: Variable)\n@@ -713,7 +714,7 @@ impl Liveness {\n                     op: |uint, uint|) {\n         let node_base_idx = self.idx(ln, Variable(0u));\n         let succ_base_idx = self.idx(succ_ln, Variable(0u));\n-        for var_idx in range(0u, self.ir.num_vars) {\n+        for var_idx in range(0u, self.ir.num_vars.get()) {\n             op(node_base_idx + var_idx, succ_base_idx + var_idx);\n         }\n     }\n@@ -723,7 +724,7 @@ impl Liveness {\n                       ln: LiveNode,\n                       test: |uint| -> LiveNode) {\n         let node_base_idx = self.idx(ln, Variable(0));\n-        for var_idx in range(0u, self.ir.num_vars) {\n+        for var_idx in range(0u, self.ir.num_vars.get()) {\n             let idx = node_base_idx + var_idx;\n             if test(idx).is_valid() {\n                 write!(wr, \" {}\", Variable(var_idx).to_str());"}]}