{"sha": "6fb79245e8c7491469ce1904b585fabc1d3e6566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjc5MjQ1ZThjNzQ5MTQ2OWNlMTkwNGI1ODVmYWJjMWQzZTY1NjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-07T17:06:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T17:06:13Z"}, "message": "Rollup merge of #80744 - camelid:next_def_id-docs, r=jyn514\n\nrustdoc: Turn `next_def_id` comments into docs\n\nSplit out from #80740.\n\nr? ``@jyn514``", "tree": {"sha": "f9db1722bb1af7de32a6e84b91a3853e711bda9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9db1722bb1af7de32a6e84b91a3853e711bda9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb79245e8c7491469ce1904b585fabc1d3e6566", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9z+FCRBK7hj4Ov3rIwAAdHIIAECvAfZ27u0y3jAHwhri2ABQ\n7n6OjQbOUitk1YriX2jyliFC6XO8WT0YZ6k6X5YGrD/c9OGjvX8mQuYMro+/5Kip\nNj7StWMKSL3pUAp6rOTRD6DYe31zF20pqML64U4HtAgGj/wHPQ1SGNlmbR1Nkrh4\nBMFgrYIpknVfP7Zf5+oTsuY2dn/Ejya1krwbCxSiaazK/TtbRVJesWbolz12gdIl\nVOYY1d/pSeLWEPW1aRsKLxolXNcItMonvbaKtyNrKyZsqJ71W0QkoG4XQjod8i1v\ncgXDAO9d8e+zLGXW3UuLbP0neB106/S0tz81EGJCxmnhNAn8MK3SHWY2nVsKm1M=\n=XqXp\n-----END PGP SIGNATURE-----\n", "payload": "tree f9db1722bb1af7de32a6e84b91a3853e711bda9a\nparent 94a27f2617c540132b07667df6ad92ee02f33a69\nparent 7428e2d1349fe03da821ee2181ccf7395b9cfe30\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610039173 +0900\ncommitter GitHub <noreply@github.com> 1610039173 +0900\n\nRollup merge of #80744 - camelid:next_def_id-docs, r=jyn514\n\nrustdoc: Turn `next_def_id` comments into docs\n\nSplit out from #80740.\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb79245e8c7491469ce1904b585fabc1d3e6566", "html_url": "https://github.com/rust-lang/rust/commit/6fb79245e8c7491469ce1904b585fabc1d3e6566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb79245e8c7491469ce1904b585fabc1d3e6566/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94a27f2617c540132b07667df6ad92ee02f33a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/94a27f2617c540132b07667df6ad92ee02f33a69", "html_url": "https://github.com/rust-lang/rust/commit/94a27f2617c540132b07667df6ad92ee02f33a69"}, {"sha": "7428e2d1349fe03da821ee2181ccf7395b9cfe30", "url": "https://api.github.com/repos/rust-lang/rust/commits/7428e2d1349fe03da821ee2181ccf7395b9cfe30", "html_url": "https://github.com/rust-lang/rust/commit/7428e2d1349fe03da821ee2181ccf7395b9cfe30"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "38791fcea548428797d699f38173b941525aa551", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb79245e8c7491469ce1904b585fabc1d3e6566/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb79245e8c7491469ce1904b585fabc1d3e6566/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6fb79245e8c7491469ce1904b585fabc1d3e6566", "patch": "@@ -291,7 +291,9 @@ impl Item {\n         }\n     }\n \n-    /// See comments on next_def_id\n+    /// See the documentation for [`next_def_id()`].\n+    ///\n+    /// [`next_def_id()`]: DocContext::next_def_id()\n     crate fn is_fake(&self) -> bool {\n         MAX_DEF_ID.with(|m| {\n             m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)"}, {"sha": "43aaefa0870738618b2a77226b289a3f48874a92", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fb79245e8c7491469ce1904b585fabc1d3e6566/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb79245e8c7491469ce1904b585fabc1d3e6566/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6fb79245e8c7491469ce1904b585fabc1d3e6566", "patch": "@@ -120,14 +120,20 @@ impl<'tcx> DocContext<'tcx> {\n         r\n     }\n \n-    // This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n-    // refactoring either librustdoc or librustc_middle. In particular, allowing new DefIds to be\n-    // registered after the AST is constructed would require storing the defid mapping in a\n-    // RefCell, decreasing the performance for normal compilation for very little gain.\n-    //\n-    // Instead, we construct 'fake' def ids, which start immediately after the last DefId.\n-    // In the Debug impl for clean::Item, we explicitly check for fake\n-    // def ids, as we'll end up with a panic if we use the DefId Debug impl for fake DefIds\n+    /// Create a new \"fake\" [`DefId`].\n+    ///\n+    /// This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n+    /// refactoring either rustdoc or [`rustc_middle`]. In particular, allowing new [`DefId`]s\n+    /// to be registered after the AST is constructed would require storing the [`DefId`] mapping\n+    /// in a [`RefCell`], decreasing the performance for normal compilation for very little gain.\n+    ///\n+    /// Instead, we construct \"fake\" [`DefId`]s, which start immediately after the last `DefId`.\n+    /// In the [`Debug`] impl for [`clean::Item`], we explicitly check for fake `DefId`s,\n+    /// as we'll end up with a panic if we use the `DefId` `Debug` impl for fake `DefId`s.\n+    ///\n+    /// [`RefCell`]: std::cell::RefCell\n+    /// [`Debug`]: std::fmt::Debug\n+    /// [`clean::Item`]: crate::clean::types::Item\n     crate fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n         let start_def_id = {\n             let num_def_ids = if crate_num == LOCAL_CRATE {"}]}