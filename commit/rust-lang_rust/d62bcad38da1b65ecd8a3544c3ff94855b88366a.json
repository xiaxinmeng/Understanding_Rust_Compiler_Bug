{"sha": "d62bcad38da1b65ecd8a3544c3ff94855b88366a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MmJjYWQzOGRhMWI2NWVjZDhhMzU0NGMzZmY5NDg1NWI4ODM2NmE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T13:38:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:06Z"}, "message": "Allow `let` bindings everywhere", "tree": {"sha": "9cbbeedc77d04d85a750152d45e67842b3a1c56b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cbbeedc77d04d85a750152d45e67842b3a1c56b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d62bcad38da1b65ecd8a3544c3ff94855b88366a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d62bcad38da1b65ecd8a3544c3ff94855b88366a", "html_url": "https://github.com/rust-lang/rust/commit/d62bcad38da1b65ecd8a3544c3ff94855b88366a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d62bcad38da1b65ecd8a3544c3ff94855b88366a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "html_url": "https://github.com/rust-lang/rust/commit/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff"}], "stats": {"total": 1138, "additions": 446, "deletions": 692}, "files": [{"sha": "a82a7b555a05e869b970f2e5f124af5bca8f8810", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -149,6 +149,12 @@ pub struct Mir<'tcx> {\n     /// This is used for the \"rust-call\" ABI.\n     pub spread_arg: Option<Local>,\n \n+    /// Mark this MIR of a const context other than const functions as having converted a `&&` or\n+    /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n+    /// this conversion from happening and use short circuiting, we will cause the following code\n+    /// to change the value of `x`: `let mut x = 42; false && { x = 55; true };`\n+    pub const_can_have_let_mut_bindings: bool,\n+\n     /// A span representing this MIR, for error reporting\n     pub span: Span,\n \n@@ -167,6 +173,7 @@ impl<'tcx> Mir<'tcx> {\n         arg_count: usize,\n         upvar_decls: Vec<UpvarDecl>,\n         span: Span,\n+        const_can_have_let_mut_bindings: bool,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place\n         assert!(\n@@ -191,6 +198,7 @@ impl<'tcx> Mir<'tcx> {\n             spread_arg: None,\n             span,\n             cache: cache::Cache::new(),\n+            const_can_have_let_mut_bindings,\n         }\n     }\n \n@@ -421,6 +429,7 @@ impl_stable_hash_for!(struct Mir<'tcx> {\n     arg_count,\n     upvar_decls,\n     spread_arg,\n+    const_can_have_let_mut_bindings,\n     span,\n     cache\n });\n@@ -2974,6 +2983,7 @@ BraceStructTypeFoldableImpl! {\n         arg_count,\n         upvar_decls,\n         spread_arg,\n+        const_can_have_let_mut_bindings,\n         span,\n         cache,\n     }"}, {"sha": "ab19cd9dd5bedf5cbddc6ac2c19dbe35f607e5a7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -854,15 +854,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        Mir::new(self.cfg.basic_blocks,\n-                 self.source_scopes,\n-                 ClearCrossCrate::Set(self.source_scope_local_data),\n-                 IndexVec::new(),\n-                 yield_ty,\n-                 self.local_decls,\n-                 self.arg_count,\n-                 self.upvar_decls,\n-                 self.fn_span\n+        Mir::new(\n+            self.cfg.basic_blocks,\n+            self.source_scopes,\n+            ClearCrossCrate::Set(self.source_scope_local_data),\n+            IndexVec::new(),\n+            yield_ty,\n+            self.local_decls,\n+            self.arg_count,\n+            self.upvar_decls,\n+            self.fn_span,\n+            self.hir.const_can_have_let_mut_bindings(),\n         )\n     }\n "}, {"sha": "951651aa1ce1c6b0d44a8b57dcaab0e5aadf74fa", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -372,13 +372,15 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // FIXME(eddyb) use logical ops in constants when\n                     // they can handle that kind of control-flow.\n                     (hir::BinOpKind::And, hir::Constness::Const) => {\n+                        cx.const_can_have_let_mut_bindings = false;\n                         ExprKind::Binary {\n                             op: BinOp::BitAnd,\n                             lhs: lhs.to_ref(),\n                             rhs: rhs.to_ref(),\n                         }\n                     }\n                     (hir::BinOpKind::Or, hir::Constness::Const) => {\n+                        cx.const_can_have_let_mut_bindings = false;\n                         ExprKind::Binary {\n                             op: BinOp::BitOr,\n                             lhs: lhs.to_ref(),"}, {"sha": "8ee1eac0e331a5afe32bdf47281d1d6bf52e8459", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -56,6 +56,9 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n \n     /// True if this constant/function needs overflow checks.\n     check_overflow: bool,\n+\n+    /// See field with the same name on `Mir`\n+    const_can_have_let_mut_bindings: bool,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n@@ -96,9 +99,13 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             constness,\n             body_owner_kind,\n             check_overflow,\n+            const_can_have_let_mut_bindings: true,\n         }\n     }\n \n+    pub fn const_can_have_let_mut_bindings(&self) -> bool {\n+        self.const_can_have_let_mut_bindings\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {"}, {"sha": "5a08165608d53d3fd209e3befe465eeb4726bda8", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -219,7 +219,8 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         local_decls_for_sig(&sig, span),\n         sig.inputs().len(),\n         vec![],\n-        span\n+        span,\n+        true,\n     );\n \n     if let Some(..) = ty {\n@@ -387,7 +388,8 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             self.local_decls,\n             self.sig.inputs().len(),\n             vec![],\n-            self.span\n+            self.span,\n+            true,\n         )\n     }\n \n@@ -835,7 +837,8 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         local_decls,\n         sig.inputs().len(),\n         vec![],\n-        span\n+        span,\n+        true,\n     );\n     if let Abi::RustCall = sig.abi {\n         mir.spread_arg = Some(Local::new(sig.inputs().len()));\n@@ -912,6 +915,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         local_decls,\n         sig.inputs().len(),\n         vec![],\n-        span\n+        span,\n+        true,\n     )\n }"}, {"sha": "3a0094bcd625af6ffde470600a96300845b7f848", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -412,7 +412,8 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 initial_locals,\n                 0,\n                 vec![],\n-                mir.span\n+                mir.span,\n+                false,\n             ),\n             tcx,\n             source: mir,"}, {"sha": "8eae45376642bd19b82fce368b93b2c05482ac8c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 55, "deletions": 150, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -30,7 +30,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUs\n use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -114,7 +114,6 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n-    const_fn_arg_vars: BitSet<Local>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -149,7 +148,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             param_env,\n             local_qualif,\n             qualif: Qualif::empty(),\n-            const_fn_arg_vars: BitSet::new_empty(mir.local_decls.len()),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -178,26 +176,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    /// Error about extra statements in a constant.\n-    fn statement_like(&mut self) {\n-        self.add(Qualif::NOT_CONST);\n-        if self.mode != Mode::Fn {\n-            let mut err = feature_err(\n-                &self.tcx.sess.parse_sess,\n-                \"const_let\",\n-                self.span,\n-                GateIssue::Language,\n-                &format!(\"statements in {}s are unstable\", self.mode),\n-            );\n-            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"Blocks in constants may only contain items (such as constant, function \\\n-                          definition, etc...) and a tail expression.\");\n-                err.help(\"To avoid it, you have to replace the non-item object.\");\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     /// Add the given qualification to self.qualif.\n     fn add(&mut self, qualif: Qualif) {\n         self.qualif = self.qualif | qualif;\n@@ -243,87 +221,48 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        if self.const_let_allowed() {\n-            let mut dest = dest;\n-            let index = loop {\n-                match dest {\n-                    // with `const_let` active, we treat all locals equal\n-                    Place::Local(index) => break *index,\n-                    // projections are transparent for assignments\n-                    // we qualify the entire destination at once, even if just a field would have\n-                    // stricter qualification\n-                    Place::Projection(proj) => {\n-                        // Catch more errors in the destination. `visit_place` also checks various\n-                        // projection rules like union field access and raw pointer deref\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        dest = &proj.base;\n-                    },\n-                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n-                    Place::Static(..) => {\n-                        // Catch more errors in the destination. `visit_place` also checks that we\n-                        // do not try to access statics from constants or try to mutate statics\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        return;\n-                    }\n+        let mut dest = dest;\n+        let index = loop {\n+            match dest {\n+                Place::Local(index) => break *index,\n+                // projections are transparent for assignments\n+                // we qualify the entire destination at once, even if just a field would have\n+                // stricter qualification\n+                Place::Projection(proj) => {\n+                    // Catch more errors in the destination. `visit_place` also checks various\n+                    // projection rules like union field access and raw pointer deref\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    dest = &proj.base;\n+                },\n+                Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                Place::Static(..) => {\n+                    // Catch more errors in the destination. `visit_place` also checks that we\n+                    // do not try to access statics from constants or try to mutate statics\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    return;\n                 }\n-            };\n-            debug!(\"store to var {:?}\", index);\n-            match &mut self.local_qualif[index] {\n-                // this is overly restrictive, because even full assignments do not clear the qualif\n-                // While we could special case full assignments, this would be inconsistent with\n-                // aggregates where we overwrite all fields via assignments, which would not get\n-                // that feature.\n-                Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n-                // insert new qualification\n-                qualif @ None => *qualif = Some(self.qualif),\n-            }\n-            return;\n-        }\n-\n-        match *dest {\n-            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n-                                   self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n-                debug!(\"store to {:?} (temp or return pointer)\", index);\n-                store(&mut self.local_qualif[index])\n-            }\n-\n-            Place::Projection(box Projection {\n-                base: Place::Local(index),\n-                elem: ProjectionElem::Deref\n-            }) if self.mir.local_kind(index) == LocalKind::Temp\n-               && self.mir.local_decls[index].ty.is_box()\n-               && self.local_qualif[index].map_or(false, |qualif| {\n-                    qualif.contains(Qualif::NOT_CONST)\n-               }) => {\n-                // Part of `box expr`, we should've errored\n-                // already for the Box allocation Rvalue.\n-            }\n-\n-            // This must be an explicit assignment.\n-            _ => {\n-                // Catch more errors in the destination.\n-                self.visit_place(\n-                    dest,\n-                    PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                    location\n-                );\n-                self.statement_like();\n             }\n+        };\n+        debug!(\"store to var {:?}\", index);\n+        match &mut self.local_qualif[index] {\n+            // this is overly restrictive, because even full assignments do not clear the qualif\n+            // While we could special case full assignments, this would be inconsistent with\n+            // aggregates where we overwrite all fields via assignments, which would not get\n+            // that feature.\n+            Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n+            // insert new qualification\n+            qualif @ None => *qualif = Some(self.qualif),\n         }\n     }\n \n-    fn const_let_allowed(&self) -> bool {\n-        self.tcx.features().const_let || self.mode == Mode::ConstFn\n-    }\n-\n     /// Qualify a whole const, static initializer or const fn.\n     fn qualify_const(&mut self) -> (Qualif, Lrc<BitSet<Local>>) {\n         debug!(\"qualifying {} {:?}\", self.mode, self.def_id);\n@@ -360,48 +299,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseEdges { .. } |\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n-                TerminatorKind::Return => {\n-                    if !self.const_let_allowed() {\n-                        // Check for unused values. This usually means\n-                        // there are extra statements in the AST.\n-                        for temp in mir.temps_iter() {\n-                            if self.local_qualif[temp].is_none() {\n-                                continue;\n-                            }\n-\n-                            let state = self.temp_promotion_state[temp];\n-                            if let TempState::Defined { location, uses: 0 } = state {\n-                                let data = &mir[location.block];\n-                                let stmt_idx = location.statement_index;\n-\n-                                // Get the span for the initialization.\n-                                let source_info = if stmt_idx < data.statements.len() {\n-                                    data.statements[stmt_idx].source_info\n-                                } else {\n-                                    data.terminator().source_info\n-                                };\n-                                self.span = source_info.span;\n-\n-                                // Treat this as a statement in the AST.\n-                                self.statement_like();\n-                            }\n-                        }\n-\n-                        // Make sure there are no extra unassigned variables.\n-                        self.qualif = Qualif::NOT_CONST;\n-                        for index in mir.vars_iter() {\n-                            if !self.const_fn_arg_vars.contains(index) {\n-                                debug!(\"unassigned variable {:?}\", index);\n-                                self.assign(&Place::Local(index), Location {\n-                                    block: bb,\n-                                    statement_index: usize::MAX,\n-                                });\n-                            }\n-                        }\n-                    }\n-\n-                    break;\n-                }\n+                TerminatorKind::Return => break,\n             };\n \n             match target {\n@@ -468,14 +366,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.const_let_allowed() => {\n-                if self.mode != Mode::Fn {\n-                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n-                                    self.span, GateIssue::Language,\n-                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n-                }\n-                self.add(Qualif::NOT_CONST);\n-            }\n             LocalKind::Var |\n             LocalKind::Arg |\n             LocalKind::Temp => {\n@@ -556,7 +446,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.super_place(place, context, location);\n                     match proj.elem {\n                         ProjectionElem::Deref => {\n-                            this.add(Qualif::NOT_CONST);\n+                            if context.is_mutating_use() {\n+                                this.not_const()\n+                            }\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             match this.mode {\n                                 Mode::Fn => {},\n@@ -1291,6 +1183,19 @@ impl MirPass for QualifyAndPromoteConstants {\n             // Do the actual promotion, now that we know what's viable.\n             promote_consts::promote_candidates(mir, tcx, temps, candidates);\n         } else {\n+            if !mir.const_can_have_let_mut_bindings {\n+                for local in mir.mut_vars_iter() {\n+                    let span = mir.local_decls[local].source_info.span;\n+                    tcx.sess.span_err(\n+                        span,\n+                        &format!(\n+                            \"Cannot have both mutable bindings and \\\n+                            short circuiting operators in {}\",\n+                            mode,\n+                        ),\n+                    );\n+                }\n+            }\n             let promoted_temps = if mode == Mode::Const {\n                 // Already computed by `mir_const_qualif`.\n                 const_promoted_temps.unwrap()"}, {"sha": "586659ecd9ca27451c7782023b22483c8f46872d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -209,9 +209,6 @@ declare_features! (\n     // Allows the definition of `const fn` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n-    // Allows let bindings and destructuring in `const fn` functions and constants.\n-    (active, const_let, \"1.22.1\", Some(48821), None),\n-\n     // Allows accessing fields of unions inside const fn.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n "}, {"sha": "997476853ec4e3a6aaa5591c14adc7422efcf241", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -11,8 +11,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n type Array = [u32; {  let x = 2; 5 }];\n \n pub fn main() {}"}, {"sha": "0943818e2b7dc4708f8e8507864010614d8b0425", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -11,8 +11,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n enum Foo {\n     Bar = { let x = 1; 3 }\n }"}, {"sha": "c4413dba69fb27f983ab870db0f74f77d2c31404", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,7 +12,7 @@\n \n // https://github.com/rust-lang/rust/issues/48821\n \n-#![feature(const_fn, const_let)]\n+#![feature(const_fn)]\n \n const fn foo(i: usize) -> usize {\n     let x = i;"}, {"sha": "ac549cd8d1a485af11f611ee800991634784bd24", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -13,44 +13,80 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:89:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:99:32\n+  --> $DIR/check-static-values-constraints.rs:100:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:104:5\n+  --> $DIR/check-static-values-constraints.rs:105:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:105:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:105:5\n+  --> $DIR/check-static-values-constraints.rs:107:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:107:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:109:6\n+  --> $DIR/check-static-values-constraints.rs:112:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:112:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:6\n+  --> $DIR/check-static-values-constraints.rs:114:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:114:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:116:5\n+  --> $DIR/check-static-values-constraints.rs:121:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:121:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:120:45\n+  --> $DIR/check-static-values-constraints.rs:126:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n@@ -59,12 +95,18 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:120:38\n+  --> $DIR/check-static-values-constraints.rs:126:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:126:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "1822af333231ea6237922717c9e02b8aff961649", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -88,6 +88,7 @@ struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR contains unimplemented expression type\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n@@ -102,22 +103,28 @@ static mut STATIC14: SafeStruct = SafeStruct {\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR contains unimplemented expression type\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR contains unimplemented expression type\n ];\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR contains unimplemented expression type\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR contains unimplemented expression type\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR contains unimplemented expression type\n \n pub fn main() {\n     let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR allocations are not allowed in statics\n     //~^^ ERROR cannot move out of static item\n+    //~| ERROR contains unimplemented expression type\n }"}, {"sha": "40f8555f6afa7c7a82cfa9d8e7fc31a84a4177ae", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -13,55 +13,97 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:89:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:99:32\n+  --> $DIR/check-static-values-constraints.rs:100:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:104:5\n+  --> $DIR/check-static-values-constraints.rs:105:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:105:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:105:5\n+  --> $DIR/check-static-values-constraints.rs:107:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:107:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:109:6\n+  --> $DIR/check-static-values-constraints.rs:112:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:112:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:6\n+  --> $DIR/check-static-values-constraints.rs:114:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:114:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:116:5\n+  --> $DIR/check-static-values-constraints.rs:121:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:121:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:120:45\n+  --> $DIR/check-static-values-constraints.rs:126:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^ cannot move out of static item\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:120:38\n+  --> $DIR/check-static-values-constraints.rs:126:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:126:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "0e96f96e3d14e92f378fdbc9640a87a6d9a38a7c", "filename": "src/test/ui/consts/const-block-non-item-statement-2.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n const A: usize = { 1; 2 };\n-//~^ ERROR statements in constants are unstable\n \n const B: usize = { { } 2 };\n-//~^ ERROR statements in constants are unstable\n \n macro_rules! foo {\n-    () => (()) //~ ERROR statements in constants are unstable\n+    () => (())\n }\n const C: usize = { foo!(); 2 };\n \n const D: usize = { let x = 4; 2 };\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "580f7e039d1c35f55709ebed193e7cfd1317f11b", "filename": "src/test/ui/consts/const-block-non-item-statement-2.stderr", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr?ref=7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "patch": "@@ -1,62 +0,0 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:11:20\n-   |\n-LL | const A: usize = { 1; 2 };\n-   |                    ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:14:20\n-   |\n-LL | const B: usize = { { } 2 };\n-   |                    ^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:18:12\n-   |\n-LL |     () => (()) //~ ERROR statements in constants are unstable\n-   |            ^^\n-LL | }\n-LL | const C: usize = { foo!(); 2 };\n-   |                    ------- in this macro invocation\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:22:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:22:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:22:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:22:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "496e5486e9b99234a19a8a122e3f099ce0498bdb", "filename": "src/test/ui/consts/const-block-non-item-statement-3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "0124288d43d575caa4c6d3668b0cbdccec94f4c2", "filename": "src/test/ui/consts/const-block-non-item-statement-3.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr?ref=7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:11:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:11:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:11:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:11:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "281a07808e9272beb1bf58ccf76b8cf190a1e057", "filename": "src/test/ui/consts/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n enum Foo {\n     Bar = { let x = 1; 3 }\n-    //~^ ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n-    //~| ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n }\n \n pub fn main() {}"}, {"sha": "b367a9d99374eedcf42f1fcaa69db3254d66214d", "filename": "src/test/ui/consts/const-block-non-item-statement.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr?ref=7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:12:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:12:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:12:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:12:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad0dfabebedea7e53342b4dfe36497063a234ba4", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,7 +12,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n \n@@ -24,7 +23,7 @@ unsafe impl Sync for Foo {}\n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n static BAR: () = unsafe {\n-    *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n+    *FOO.0.get() = 5; //~ ERROR static contains unimplemented expression type\n };\n \n fn main() {}"}, {"sha": "740c1ab0b2d69fcd82d1ff6e6d21e6fc9ec628a3", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,9 +1,9 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/assign-to-static-within-other-static-2.rs:27:5\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/assign-to-static-within-other-static-2.rs:26:5\n    |\n-LL |     *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n-   |     ^^^^^^^^^^^^^^^^ tried to modify a static's initial value from another static's initializer\n+LL |     *FOO.0.get() = 5; //~ ERROR static contains unimplemented expression type\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "2f786fb16cc80111d5defb93aa9c6b4f93df2278", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,7 +12,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "031a87701266f36704fb2a3a5cd186fd660882df", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/assign-to-static-within-other-static.rs:21:5\n+  --> $DIR/assign-to-static-within-other-static.rs:20:5\n    |\n LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n    |     ^^^^^^^"}, {"sha": "3b5014a57b590c71ab32f8b772af91986251f697", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_let)]\n-\n fn main() {}\n \n struct FakeNeedsDrop;"}, {"sha": "f0c17bca36a7cc84a636a1c896fc023370ca39c2", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:25:55\n+  --> $DIR/const_let.rs:23:55\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                                       ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:29:35\n+  --> $DIR/const_let.rs:27:35\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                                   ^"}, {"sha": "4aad5216442ce5cd1446d485f4721a337b5a1648", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_let)]\n-\n fn main() {\n     // Tests the Collatz conjecture with an incorrect base case (0 instead of 1).\n     // The value of `n` will loop indefinitely (4 - 2 - 1 - 4)."}, {"sha": "04a3362d95e7802d50a671958e9189b4a1f4667f", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:19:9\n+  --> $DIR/infinite_loop.rs:17:9\n    |\n LL | /         while n != 0 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/infinite_loop.rs:16:18\n+  --> $DIR/infinite_loop.rs:14:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:20:20\n+  --> $DIR/infinite_loop.rs:18:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "970d1a056f330e02332d9a8d70e4f2539355de89", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_let)]\n-\n fn main() {\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time"}, {"sha": "128979a67a91257993779039f650b7448cb0beb0", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52475.rs:18:9\n+  --> $DIR/issue-52475.rs:16:9\n    |\n LL | /         while n < 5 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/issue-52475.rs:14:18\n+  --> $DIR/issue-52475.rs:12:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:19:17\n+  --> $DIR/issue-52475.rs:17:17\n    |\n LL |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "8132d26d63b148838af28d53961b9dd82be7a75d", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,7 +12,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n \n@@ -27,9 +26,7 @@ fn foo() {}\n \n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    // we do not error on the above access, because that is not detectable statically. Instead,\n-    // const evaluation will error when trying to evaluate it. Due to the error below, we never even\n-    // attempt to const evaluate `BAR`, so we don't see the error\n+    //~^ ERROR static contains unimplemented expression\n \n     foo();\n     //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants"}, {"sha": "eb5e88ad6931df523036b6838d692999493ab379", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,9 +1,16 @@\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/mod-static-with-const-fn.rs:28:5\n+   |\n+LL |     *FOO.0.get() = 5;\n+   |     ^^^^^^^^^^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:34:5\n+  --> $DIR/mod-static-with-const-fn.rs:31:5\n    |\n LL |     foo();\n    |     ^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors occurred: E0015, E0019.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "20e6593f88ae8219db7cefd9715914480b242074", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -20,17 +20,6 @@ LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR doe\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_raw_ptr_ops.rs:17:28\n-   |\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-   |            |\n-   |            type annotation requires that borrow lasts for `'static`\n-LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:18:29\n    |\n@@ -41,6 +30,6 @@ LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "a9d5d6901522ab9ab5082276ff02e97692e30d34", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_transmute,const_let)]\n+#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "0b09b8469fd752f206b6dffa945d78dfffeef1fd", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n-\n struct S(i32);\n \n const A: () = {"}, {"sha": "dd9690ef858b9405a5f66c891892220f54123f95", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_let)]\n #![feature(const_fn)]\n \n struct S {\n@@ -8,6 +7,7 @@ struct S {\n impl S {\n     const fn foo(&mut self, x: u32) {\n         self.state = x;\n+        //~^ ERROR constant function contains unimplemented expression\n     }\n }\n "}, {"sha": "7380906bec7b3b47b84b5223c7a72de38e9526f6", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,9 +1,16 @@\n+error[E0019]: constant function contains unimplemented expression type\n+  --> $DIR/const_let_assign3.rs:9:9\n+   |\n+LL |         self.state = x;\n+   |         ^^^^^^^^^^^^^^\n+\n error[E0017]: references in constants may only refer to immutable values\n   --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n    |     ^ constants require immutable values\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0017`.\n+Some errors occurred: E0017, E0019.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "dbc50f1fbd4b4c75efcaf784d0b1165685e9662a", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,7 +1,5 @@\n // https://github.com/rust-lang/rust/issues/55223\n \n-#![feature(const_let)]\n-\n union Foo<'a> {\n     y: &'a (),\n     long_live_the_unit: &'static (),"}, {"sha": "2cd8711f03d3168ed8e696c4c8b40b6a49a1f3d8", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling-alloc-id-ice.rs:10:1\n+  --> $DIR/dangling-alloc-id-ice.rs:8:1\n    |\n LL | / const FOO: &() = { //~ ERROR any use of this value will cause an error\n LL | |     let y = ();"}, {"sha": "c2d8e6d421a2876346286962f7b620bc946114ed", "filename": "src/test/ui/consts/dangling_raw_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n     let x = 42;\n     &x"}, {"sha": "091f1f785cb02a2824d36e8917f4267d000bf360", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling_raw_ptr.rs:3:1\n+  --> $DIR/dangling_raw_ptr.rs:1:1\n    |\n LL | / const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n LL | |     let x = 42;"}, {"sha": "bb6be37340cf9ffb6a5af5fa14ac9ca3d10628b0", "filename": "src/test/ui/consts/issue-54224.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,6 +1,8 @@\n+// compile-pass\n+\n #![feature(nll)]\n \n-const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n+const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n \n use std::borrow::Cow;\n \n@@ -9,6 +11,5 @@ pub const Y: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[X]);\n \n \n pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n-//~^ ERROR temporary value dropped while borrowed\n \n fn main() {}"}, {"sha": "451f49c1cb57abecf1253e7298ccedeabcc1b9e6", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "patch": "@@ -1,23 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:3:39\n-   |\n-LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n-   |                                 ------^^^^^^^^^-\n-   |                                 |     |        |\n-   |                                 |     |        temporary value is freed at the end of this statement\n-   |                                 |     creates a temporary which is freed while still in use\n-   |                                 using this value as a constant requires that borrow lasts for `'static`\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:11:57\n-   |\n-LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n-   |                                          ---------------^^^^^^^^^-\n-   |                                          |              |        |\n-   |                                          |              |        temporary value is freed at the end of this statement\n-   |                                          |              creates a temporary which is freed while still in use\n-   |                                          using this value as a constant requires that borrow lasts for `'static`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "7a0cd939c145cb6560ed13184b4032127f3e8d2f", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.nll.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -0,0 +1,51 @@\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:3:9\n+   |\n+LL |     let b = &mut a; //~ ERROR mutable references in const fn are unstable\n+   |         ^\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:12:13\n+   |\n+LL |         let b = &mut a; //~ ERROR mutable references in const fn are unstable\n+   |             ^\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:19:13\n+   |\n+LL |     let b = &mut a; //~ references in statics may only refer to immutable\n+   |             ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:26:15\n+   |\n+LL |     { let b = &mut a; }  //~ references in statics may only refer to immutable\n+   |               ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:37:17\n+   |\n+LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n+   |                 ^^^^^^^^^ statics require immutable values\n+\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/mutable_borrow.rs:39:5\n+   |\n+LL |     *a = Some(Foo); //~ unimplemented expression type\n+   |     ^^\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mutable_borrow.rs:37:22\n+   |\n+LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n+   |                      ^^^^ creates a temporary which is freed while still in use\n+...\n+LL |     a\n+   |     - using this value as a static requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0017, E0019, E0716.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "d9a4164aa13eb2f5ca53dfa78b142fc22c1c828d", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -14,4 +14,30 @@ impl X {\n     }\n }\n \n+static mut FOO: u32 = {\n+    let mut a = 0;\n+    let b = &mut a; //~ references in statics may only refer to immutable\n+    *b\n+};\n+\n+static mut BAR: Option<String> = {\n+    let mut a = None;\n+    // taking a mutable reference erases everything we know about `a`\n+    { let b = &mut a; }  //~ references in statics may only refer to immutable\n+    a\n+};\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+static mut BAR2: &mut Option<Foo> = {\n+    let mut a = &mut None; //~ references in statics may only refer to immutable values\n+    //~^ does not live long enough\n+    *a = Some(Foo); //~ unimplemented expression type\n+    a\n+};\n+\n fn main() {}"}, {"sha": "ac619490197449cde6f05e4ccb2ae3535a3838d8", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -10,5 +10,42 @@ error: mutable references in const fn are unstable\n LL |         let b = &mut a; //~ ERROR mutable references in const fn are unstable\n    |             ^\n \n-error: aborting due to 2 previous errors\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:19:13\n+   |\n+LL |     let b = &mut a; //~ references in statics may only refer to immutable\n+   |             ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:26:15\n+   |\n+LL |     { let b = &mut a; }  //~ references in statics may only refer to immutable\n+   |               ^^^^^^ statics require immutable values\n+\n+error[E0017]: references in statics may only refer to immutable values\n+  --> $DIR/mutable_borrow.rs:37:17\n+   |\n+LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n+   |                 ^^^^^^^^^ statics require immutable values\n+\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/mutable_borrow.rs:39:5\n+   |\n+LL |     *a = Some(Foo); //~ unimplemented expression type\n+   |     ^^\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/mutable_borrow.rs:37:22\n+   |\n+LL |     let mut a = &mut None; //~ references in statics may only refer to immutable values\n+   |                      ^^^^ temporary value does not live long enough\n+...\n+LL | };\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 7 previous errors\n \n+Some errors occurred: E0017, E0019, E0597.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "32c68e69f4beda7d4d4ba48908ce00ae90aaf899", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "967fb83b78b087d64d18cc5770af96a3c0f04de5", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:8:5\n+  --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "411cdff3d24d48577603badb95e298434c2b8d95", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,12 +1,11 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &u32 = {\n     let mut a = 42;\n     {\n         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n+        //~^ ERROR constant contains unimplemented expression\n     }\n     &{a}\n };"}, {"sha": "410c51c4b54e1bb666d4bc7a87a760756fa99e16", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,18 +1,24 @@\n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/projection_qualif.rs:8:27\n+  --> $DIR/projection_qualif.rs:6:27\n    |\n LL |         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n    |                           ^^^^^^ constants require immutable values\n \n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/projection_qualif.rs:7:18\n+   |\n+LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n+   |                  ^^^^^^\n+\n error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n-  --> $DIR/projection_qualif.rs:9:18\n+  --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0017, E0658.\n+Some errors occurred: E0017, E0019, E0658.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "1fc345d5a12feb2a808a5432cb6ef06c588fe077", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:9\n+  --> $DIR/promote_const_let.rs:4:9\n    |\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`"}, {"sha": "cbebe84d9058c267bc133a8046386a0d49c00ade", "filename": "src/test/ui/consts/promote_const_let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {\n     let x: &'static u32 = {\n         let y = 42;"}, {"sha": "2ec4ad90855a2bb99dd5b1e47294cf62420063a7", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:10\n+  --> $DIR/promote_const_let.rs:4:10\n    |\n LL |         &y //~ ERROR does not live long enough\n    |          ^ borrowed value does not live long enough"}, {"sha": "430eea37de73c60cb76e51b054d1e346e136393a", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications"}, {"sha": "30479139e314c82c0d51341b79b678dafd8d9960", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:12:5\n+  --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "fa79b5c14a73629e80853143aaff2217c7f83d2f", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "8276db99a12c0b264b227387cbb90b70b1a3e03a", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:10:5\n+  --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^^^"}, {"sha": "13371175f9caac456a4d4ca83af31af450b276c8", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -14,5 +14,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR contains unimplemented expression type\n \n fn main() {}"}, {"sha": "670698891d42882fcfae2e313f75411b0d791d6f", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -6,6 +6,16 @@ LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010-teach.rs:16:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+   |\n+   = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n+   = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "7a80b335c5619a14aaf85c2d090e3956a5a6e6da", "filename": "src/test/ui/error-codes/E0010.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,5 +12,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR contains unimplemented expression type\n \n fn main() {}"}, {"sha": "01295469b2bb240dbcf1f22d0aeff90ebe341a96", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in constants\n LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010.rs:14:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "3724eaf61ca0a2e80476047039319ba040c65982", "filename": "src/test/ui/feature-gate-underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(const_let)]\n \n trait Trt {}\n struct Str {}"}, {"sha": "050ad8710309e4a0d82818f3a12474be88220a1d", "filename": "src/test/ui/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/feature-gate-underscore_const_names.rs:17:1\n+  --> $DIR/feature-gate-underscore_const_names.rs:16:1\n    |\n LL | / const _ : () = {\n LL | |     use std::marker::PhantomData;"}, {"sha": "9bf957a5f1e05988a3f0de479442d264e8f86000", "filename": "src/test/ui/feature-gates/feature-gate-const_let.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs?ref=7ec3c10d7e1bfac9e93b0138d2a9703d1f722dff", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test use of const let without feature gate.\n-\n-const FOO: usize = {\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    let x = 42;\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    42\n-};\n-\n-static BAR: usize = {\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    let x = 42;\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    42\n-};\n-\n-fn main() {}"}, {"sha": "9529b60c1b6ade4256ad95f2435ad71a271fbd5f", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,68 +1,14 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:15:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:15:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:18:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:12:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:12:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:18:9\n+  --> $DIR/issue-18118.rs:14:9\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^\n    |         |\n    |         borrowed value does not live long enough\n    |         using this value as a constant requires that `p` is borrowed for `'static`\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - `p` dropped here while still borrowed\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "05e46230db29aa1c64d92df052792a1bb50f7f25", "filename": "src/test/ui/issues/issue-18118.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -10,12 +10,7 @@\n \n pub fn main() {\n     const z: &'static isize = {\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         let p = 3;\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n-        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "4f755745b2857316d6b5c8b41b92b89f1b3d004b", "filename": "src/test/ui/issues/issue-18118.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,67 +1,13 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:15:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:15:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:18:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:12:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:12:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:18:10\n+  --> $DIR/issue-18118.rs:14:10\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |          ^ borrowed value does not live long enough\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "b5026d8c5e1e5d57b6b910dfe94139019975af1f", "filename": "src/test/ui/issues/issue-32829-2.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -15,32 +15,28 @@\n const bad : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in constants are unstable\n-        //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n const bad_three : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n@@ -49,40 +45,35 @@ static bad_five : u32 = {\n     {\n         invalid();\n         //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n-        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in statics are unstable\n-        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "5e5cdf8adda2ce071087e9766bfe33eeb4f23e82", "filename": "src/test/ui/issues/issue-32829-2.stderr", "status": "modified", "additions": 5, "deletions": 78, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,94 +1,21 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:17:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:25:9\n+  --> $DIR/issue-32829-2.rs:24:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:25:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:34:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:42:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:50:9\n+  --> $DIR/issue-32829-2.rs:46:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:50:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:59:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:67:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:75:9\n+  --> $DIR/issue-32829-2.rs:68:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:75:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:84:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "fca4fb62fad22f92dfb5b32e6eb9dadf30a4a828", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -16,5 +16,6 @@ use std::cell::RefCell;\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `std::cell::RefCell<isize>` cannot be shared between threads safely [E0277]\n+//~| ERROR contains unimplemented expression type\n \n fn main() { }"}, {"sha": "b6594b1caca2cfcad6cf7839c119821760d70698", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -4,6 +4,12 @@ error[E0010]: allocations are not allowed in statics\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/issue-7364.rs:16:41\n+   |\n+LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n+   |                                         ^^^^^^^^^^^^^^^\n+\n error[E0277]: `std::cell::RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:16:1\n    |\n@@ -15,7 +21,7 @@ LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    = note: required because it appears within the type `std::boxed::Box<std::cell::RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0010, E0277.\n+Some errors occurred: E0010, E0019, E0277.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "a25236b53b51ffe67f6440858d677f0cf7bb478a", "filename": "src/test/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -12,5 +12,6 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR static contains unimplemented expression\n \n fn main() {}"}, {"sha": "d9250e85d3e3f0d975b32f86eddedf807277ec3e", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in statics\n LL | static mut a: Box<isize> = box 3;\n    |                            ^^^^^ allocation not allowed in statics\n \n-error: aborting due to previous error\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/static-mut-not-constant.rs:13:32\n+   |\n+LL | static mut a: Box<isize> = box 3;\n+   |                                ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "bb123f46a577217b2e7f7b21c2c8900e56619bda", "filename": "src/test/ui/underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore_const_names.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -10,7 +10,6 @@\n \n // compile-pass\n \n-#![feature(const_let)]\n #![feature(underscore_const_names)]\n \n trait Trt {}"}, {"sha": "9a570a4381b32deb1626a4868204fb1644b77053", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_let)]\n-\n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n //~^ ERROR cannot mutate statics in the initializer of another static"}, {"sha": "e7233c5b8a5e003f568077c366ed990d59a9adee", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62bcad38da1b65ecd8a3544c3ff94855b88366a/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=d62bcad38da1b65ecd8a3544c3ff94855b88366a", "patch": "@@ -1,11 +1,11 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/write-to-static-mut-in-static.rs:14:33\n+  --> $DIR/write-to-static-mut-in-static.rs:12:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^\n \n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/write-to-static-mut-in-static.rs:17:34\n+  --> $DIR/write-to-static-mut-in-static.rs:15:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^"}]}