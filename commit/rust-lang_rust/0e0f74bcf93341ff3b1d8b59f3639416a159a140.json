{"sha": "0e0f74bcf93341ff3b1d8b59f3639416a159a140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMGY3NGJjZjkzMzQxZmYzYjFkOGI1OWYzNjM5NDE2YTE1OWExNDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-09T15:25:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-13T15:29:19Z"}, "message": "rustc: Embed LLVM bitcode by default on iOS\n\nThis commit updates rustc to embed bitcode in each object file generated by\ndefault when compiling for iOS. This was determined in #35968 as a step\ntowards better compatibility with the iOS toolchain, so let's give it a spin and\nsee how it turns out!\n\nNote that this also updates the `cc` dependency which should propagate this\nchange of embedding bitcode for C dependencies as well.", "tree": {"sha": "119a2c795c2cb96c87cf74771ec9b50949573086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119a2c795c2cb96c87cf74771ec9b50949573086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e0f74bcf93341ff3b1d8b59f3639416a159a140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0f74bcf93341ff3b1d8b59f3639416a159a140", "html_url": "https://github.com/rust-lang/rust/commit/0e0f74bcf93341ff3b1d8b59f3639416a159a140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e0f74bcf93341ff3b1d8b59f3639416a159a140/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999a3fb4154961329ecfff7d70a6303471b996a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999a3fb4154961329ecfff7d70a6303471b996a", "html_url": "https://github.com/rust-lang/rust/commit/1999a3fb4154961329ecfff7d70a6303471b996a"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "3e894abd17c9b10420fd4078de0c733fe141a34b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0e0f74bcf93341ff3b1d8b59f3639416a159a140", "patch": "@@ -1288,6 +1288,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n           \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+    embed_bitcode: bool = (false, parse_bool, [TRACKED],\n+          \"embed LLVM bitcode in object files\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "f53eeb86a9c56f562b77e05e528382e335a9386d", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=0e0f74bcf93341ff3b1d8b59f3639416a159a140", "patch": "@@ -473,6 +473,9 @@ pub struct TargetOptions {\n     /// The default visibility for symbols in this target should be \"hidden\"\n     /// rather than \"default\"\n     pub default_hidden_visibility: bool,\n+\n+    /// Whether or not bitcode is embedded in object files\n+    pub embed_bitcode: bool,\n }\n \n impl Default for TargetOptions {\n@@ -544,6 +547,7 @@ impl Default for TargetOptions {\n             i128_lowering: false,\n             codegen_backend: \"llvm\".to_string(),\n             default_hidden_visibility: false,\n+            embed_bitcode: false,\n         }\n     }\n }\n@@ -792,6 +796,7 @@ impl Target {\n         key!(no_builtins, bool);\n         key!(codegen_backend);\n         key!(default_hidden_visibility, bool);\n+        key!(embed_bitcode, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -990,6 +995,7 @@ impl ToJson for Target {\n         target_option_val!(no_builtins);\n         target_option_val!(codegen_backend);\n         target_option_val!(default_hidden_visibility);\n+        target_option_val!(embed_bitcode);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "3e7422557e9b69bfad097094d7c51ae9876b683f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=0e0f74bcf93341ff3b1d8b59f3639416a159a140", "patch": "@@ -42,6 +42,7 @@ use syntax_pos::MultiSpan;\n use syntax_pos::symbol::Symbol;\n use type_::Type;\n use context::{is_pie_binary, get_reloc_model};\n+use common::{C_bytes_in_context, val_ty};\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n \n@@ -262,6 +263,8 @@ pub struct ModuleConfig {\n     // emscripten's ecc compiler, when used as the linker.\n     obj_is_bitcode: bool,\n     no_integrated_as: bool,\n+    embed_bitcode: bool,\n+    embed_bitcode_marker: bool,\n }\n \n impl ModuleConfig {\n@@ -279,6 +282,8 @@ impl ModuleConfig {\n             emit_asm: false,\n             emit_obj: false,\n             obj_is_bitcode: false,\n+            embed_bitcode: false,\n+            embed_bitcode_marker: false,\n             no_integrated_as: false,\n \n             no_verify: false,\n@@ -299,6 +304,17 @@ impl ModuleConfig {\n         self.time_passes = sess.time_passes();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n+        let embed_bitcode = sess.target.target.options.embed_bitcode ||\n+            sess.opts.debugging_opts.embed_bitcode;\n+        if embed_bitcode {\n+            match sess.opts.optimize {\n+                config::OptLevel::No |\n+                config::OptLevel::Less => {\n+                    self.embed_bitcode_marker = embed_bitcode;\n+                }\n+                _ => self.embed_bitcode = embed_bitcode,\n+            }\n+        }\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -662,7 +678,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n     let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, module_name);\n \n \n-    if write_bc || config.emit_bc_compressed {\n+    if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n         let thin;\n         let old;\n         let data = if llvm::LLVMRustThinLTOAvailable() {\n@@ -681,6 +697,11 @@ unsafe fn codegen(cgcx: &CodegenContext,\n             timeline.record(\"write-bc\");\n         }\n \n+        if config.embed_bitcode {\n+            embed_bitcode(cgcx, llcx, llmod, Some(data));\n+            timeline.record(\"embed-bc\");\n+        }\n+\n         if config.emit_bc_compressed {\n             let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n             let data = bytecode::encode(&mtrans.llmod_id, data);\n@@ -689,6 +710,8 @@ unsafe fn codegen(cgcx: &CodegenContext,\n             }\n             timeline.record(\"compress-bc\");\n         }\n+    } else if config.embed_bitcode_marker {\n+        embed_bitcode(cgcx, llcx, llmod, None);\n     }\n \n     time_ext(config.time_passes, None, &format!(\"codegen passes [{}]\", module_name.unwrap()),\n@@ -796,6 +819,59 @@ unsafe fn codegen(cgcx: &CodegenContext,\n                                    &cgcx.output_filenames))\n }\n \n+/// Embed the bitcode of an LLVM module in the LLVM module itself.\n+///\n+/// This is done primarily for iOS where it appears to be standard to compile C\n+/// code at least with `-fembed-bitcode` which creates two sections in the\n+/// executable:\n+///\n+/// * __LLVM,__bitcode\n+/// * __LLVM,__cmdline\n+///\n+/// It appears *both* of these sections are necessary to get the linker to\n+/// recognize what's going on. For us though we just always throw in an empty\n+/// cmdline section.\n+///\n+/// Furthermore debug/O1 builds don't actually embed bitcode but rather just\n+/// embed an empty section.\n+///\n+/// Basically all of this is us attempting to follow in the footsteps of clang\n+/// on iOS. See #35968 for lots more info.\n+unsafe fn embed_bitcode(cgcx: &CodegenContext,\n+                        llcx: ContextRef,\n+                        llmod: ModuleRef,\n+                        bitcode: Option<&[u8]>) {\n+    let llconst = C_bytes_in_context(llcx, bitcode.unwrap_or(&[]));\n+    let llglobal = llvm::LLVMAddGlobal(\n+        llmod,\n+        val_ty(llconst).to_ref(),\n+        \"rustc.embedded.module\\0\".as_ptr() as *const _,\n+    );\n+    llvm::LLVMSetInitializer(llglobal, llconst);\n+    let section = if cgcx.opts.target_triple.contains(\"-ios\") {\n+        \"__LLVM,__bitcode\\0\"\n+    } else {\n+        \".llvmbc\\0\"\n+    };\n+    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n+\n+    let llconst = C_bytes_in_context(llcx, &[]);\n+    let llglobal = llvm::LLVMAddGlobal(\n+        llmod,\n+        val_ty(llconst).to_ref(),\n+        \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n+    );\n+    llvm::LLVMSetInitializer(llglobal, llconst);\n+    let section = if cgcx.opts.target_triple.contains(\"-ios\") {\n+        \"__LLVM,__cmdline\\0\"\n+    } else {\n+        \".llvmcmd\\0\"\n+    };\n+    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n+}\n+\n pub(crate) struct CompiledModules {\n     pub modules: Vec<CompiledModule>,\n     pub metadata_module: CompiledModule,"}, {"sha": "6652ff98201a07b40f3da92de3276b8e4eb51486", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0f74bcf93341ff3b1d8b59f3639416a159a140/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=0e0f74bcf93341ff3b1d8b59f3639416a159a140", "patch": "@@ -86,6 +86,7 @@ fn main() {\n \n fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n     let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \".libs\")?;\n+    let cflags = env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden -O2\";\n \n     run(Command::new(\"sh\")\n                 .current_dir(&native.out_dir)\n@@ -98,7 +99,7 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .arg(\"--disable-host-shared\")\n                 .arg(format!(\"--host={}\", build_helper::gnu_target(target)))\n                 .arg(format!(\"--build={}\", build_helper::gnu_target(host)))\n-                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden -O2\"));\n+                .env(\"CFLAGS\", cflags));\n \n     run(Command::new(build_helper::make(host))\n                 .current_dir(&native.out_dir)"}]}