{"sha": "54e7bdc48e97d369acd51d1c08988fd946ccafd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZTdiZGM0OGU5N2QzNjlhY2Q1MWQxYzA4OTg4ZmQ5NDZjY2FmZDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-29T10:57:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-29T12:55:59Z"}, "message": "rt: Handle non-integer RUST_THREADS (slightly) more gracefully.\n\nPreviously it would call Option.unwrap(), which calls `fail!` on None,\nwhich doesn't work without the runtime (e.g. when initialising it).", "tree": {"sha": "1477e941b25b68ca5633d7448afa9c60ea04fcb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1477e941b25b68ca5633d7448afa9c60ea04fcb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54e7bdc48e97d369acd51d1c08988fd946ccafd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54e7bdc48e97d369acd51d1c08988fd946ccafd2", "html_url": "https://github.com/rust-lang/rust/commit/54e7bdc48e97d369acd51d1c08988fd946ccafd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54e7bdc48e97d369acd51d1c08988fd946ccafd2/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d65720360dedf612cab5f0d4343429e11b227e", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d65720360dedf612cab5f0d4343429e11b227e", "html_url": "https://github.com/rust-lang/rust/commit/33d65720360dedf612cab5f0d4343429e11b227e"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "6f39cbbade3d47265aa7e4201bf7c32860b5012c", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54e7bdc48e97d369acd51d1c08988fd946ccafd2/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7bdc48e97d369acd51d1c08988fd946ccafd2/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=54e7bdc48e97d369acd51d1c08988fd946ccafd2", "patch": "@@ -11,7 +11,7 @@\n use container::Container;\n use from_str::FromStr;\n use libc;\n-use option::{Some, None};\n+use option::{Some, None, Option};\n use os;\n use str::StrSlice;\n use unstable::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n@@ -57,7 +57,13 @@ pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n /// either `RUST_THREADS` or `num_cpus`.\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n-        Some(nstr) => FromStr::from_str(nstr).unwrap(),\n+        Some(nstr) => {\n+            let opt_n: Option<uint> = FromStr::from_str(nstr);\n+            match opt_n {\n+                Some(n) if n > 0 => n,\n+                _ => rtabort!(\"`RUST_THREADS` is `%s`, should be a positive integer\", nstr)\n+            }\n+        }\n         None => {\n             if limit_thread_creation_due_to_osx_and_valgrind() {\n                 1"}]}