{"sha": "e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNjY5OTcwNDYzNzhjZTllYmI5ZjFmNjVmZTJlZjdmZGVmY2I4MjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-10T07:33:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-10T07:33:20Z"}, "message": "FOR_KV_MAP can now lint on mutable maps due to values_mut()", "tree": {"sha": "773b0fd1ff76dc9266c0a145a2479483ef97a787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773b0fd1ff76dc9266c0a145a2479483ef97a787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYdI5AAAoJEFbW7qD8Z6xGcAoP/2SReOrYctvg0TaJYAglKOcq\nFObbRN0uTujS+JwGNDGpAh2tJHsfBYcDKKUn97c1kwWwme1MNI64fT0FOKLQrtQe\nSlakcVsZ+Fnn7WUodbR4qr7MF2NJm0VWlMjTxT6wdhFW2fkXsqQcQuskxy673N/H\nr3qm7wrmUAKk80hWTsja9ycc19FkvZDYs98JcI+7NiOkyyAItl6XaioG95jgkJ8x\nB5DpzaC8sfXtTEgcCNkx6ngik/TEx44+TY+tZMkDrCnZMhSnwSxfxVbBl4oTTkG5\nBUO5fGP3TrKKf0iflfKk19d13uICXTsihLTAvuFkqkMdbEaEJ9mmKJqtXqWl2/RJ\nAFDMxctRrgrvv+i9VuRMCzBpU+LCUjXRz28mA+DycebqNizPG9twrmqqBTKKsTi8\nX4IpWGZ24FXeE8pRFGLANcPdQTGLpGiIvZV45w66o32gr8hebEDMbA2tb2MVG3zh\nKAkhZOz66ztKDKLEqxR1uYc0HWhwVFSlCH4jtlDFhMIJq+3T+UK0+Jv3RWmF0/Up\nUKnB2lk/jyvmU6nNHW8fykYV0MTVSxpHakry81H/F94UHeTI+fQs32UUiE+2KY8/\nxumMOuq8Z9c3MNi3YrMds0+T1K/BkN90nBAcxwtc1fAHvm0mVgAX76IkhRy+hDx7\n7rR0I/0nWKDJo/EC6+7G\n=JZab\n-----END PGP SIGNATURE-----", "payload": "tree 773b0fd1ff76dc9266c0a145a2479483ef97a787\nparent 3a18a48856e054ed3cdb2cf657f790533c588cf3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484033600 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484033600 +0100\n\nFOR_KV_MAP can now lint on mutable maps due to values_mut()"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "html_url": "https://github.com/rust-lang/rust/commit/e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e066997046378ce9ebb9f1f65fe2ef7fdefcb823/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a18a48856e054ed3cdb2cf657f790533c588cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a18a48856e054ed3cdb2cf657f790533c588cf3", "html_url": "https://github.com/rust-lang/rust/commit/3a18a48856e054ed3cdb2cf657f790533c588cf3"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "27bfa16d496a4b8f715d7fd5573511d221da2e2b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e066997046378ce9ebb9f1f65fe2ef7fdefcb823/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e066997046378ce9ebb9f1f65fe2ef7fdefcb823/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "patch": "@@ -16,7 +16,7 @@ use utils::sugg;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg, in_external_macro,\n             is_refutable, span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n-            walk_ptrs_ty, last_path_segment};\n+            last_path_segment};\n use utils::paths;\n \n /// **What it does:** Checks for looping over the range of `0..len` of some\n@@ -712,19 +712,24 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n \n     if let PatKind::Tuple(ref pat, _) = pat.node {\n         if pat.len() == 2 {\n-            let (new_pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n-                (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\"),\n-                (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\"),\n+            let arg_span = arg.span;\n+            let (new_pat_span, kind, ty, mutbl) = match cx.tcx.tables().expr_ty(arg).sty {\n+                ty::TyRef(_, ref tam) => match (&pat[0].node, &pat[1].node) {\n+                    (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", tam.ty, tam.mutbl),\n+                    (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", tam.ty, MutImmutable),\n+                    _ => return,\n+                },\n                 _ => return,\n             };\n-\n-            let (arg_span, arg) = match arg.node {\n-                ExprAddrOf(MutImmutable, ref expr) => (arg.span, &**expr),\n-                ExprAddrOf(MutMutable, _) => return, // for _ in &mut _, there is no {values,keys}_mut method\n-                _ => (arg.span, arg),\n+            let mutbl = match mutbl {\n+                MutImmutable => \"\",\n+                MutMutable => \"_mut\",\n+            };\n+            let arg = match arg.node {\n+                ExprAddrOf(_, ref expr) => &**expr,\n+                _ => arg,\n             };\n \n-            let ty = walk_ptrs_ty(cx.tcx.tables().expr_ty(arg));\n             if match_type(cx, ty, &paths::HASHMAP) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(cx,\n                                    FOR_KV_MAP,\n@@ -735,7 +740,7 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                     multispan_sugg(db,\n                                    \"use the corresponding method\".into(),\n                                    &[(pat_span, &snippet(cx, new_pat_span, kind)),\n-                                     (arg_span, &format!(\"{}.{}s()\", map.maybe_par(), kind))]);\n+                                     (arg_span, &format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n                 });\n             }\n         }"}, {"sha": "659935e6098ed49065c8a0987907cfc7289d5287", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e066997046378ce9ebb9f1f65fe2ef7fdefcb823/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e066997046378ce9ebb9f1f65fe2ef7fdefcb823/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=e066997046378ce9ebb9f1f65fe2ef7fdefcb823", "patch": "@@ -87,7 +87,7 @@ impl Unrelated {\n     }\n }\n \n-#[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n #[deny(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n #[allow(many_single_char_names)]\n@@ -417,11 +417,23 @@ fn main() {\n \n     let mut m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &mut m {\n-        // Ok, there is no values_mut method or equivalent\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in m.values_mut()\n         let _v = v;\n     }\n \n+    let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n+    for (_, v) in &mut *m {\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in (*m).values_mut()\n+        let _v = v;\n+    }\n \n+    let m : HashMap<u64, u64> = HashMap::new();\n     let rm = &m;\n     for (k, _value) in rm {\n         //~^ you seem to want to iterate on a map's keys"}]}