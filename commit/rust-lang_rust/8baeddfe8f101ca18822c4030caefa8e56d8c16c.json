{"sha": "8baeddfe8f101ca18822c4030caefa8e56d8c16c", "node_id": "C_kwDOAAsO6NoAKDhiYWVkZGZlOGYxMDFjYTE4ODIyYzQwMzBjYWVmYThlNTZkOGMxNmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T00:07:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T00:07:29Z"}, "message": "Auto merge of #92437 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "aa9d3fe2900bdc379ecfe98d62acc6134c1615e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9d3fe2900bdc379ecfe98d62acc6134c1615e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8baeddfe8f101ca18822c4030caefa8e56d8c16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8baeddfe8f101ca18822c4030caefa8e56d8c16c", "html_url": "https://github.com/rust-lang/rust/commit/8baeddfe8f101ca18822c4030caefa8e56d8c16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8baeddfe8f101ca18822c4030caefa8e56d8c16c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09f775e5a71ba809f465b3af377943627552001", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09f775e5a71ba809f465b3af377943627552001", "html_url": "https://github.com/rust-lang/rust/commit/a09f775e5a71ba809f465b3af377943627552001"}, {"sha": "4bb6fde5f927175762f6b1c9926445f3bec8ab6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6fde5f927175762f6b1c9926445f3bec8ab6e", "html_url": "https://github.com/rust-lang/rust/commit/4bb6fde5f927175762f6b1c9926445f3bec8ab6e"}], "stats": {"total": 1932, "additions": 1493, "deletions": 439}, "files": [{"sha": "3d8c39408a924b5601d27262e8cb91811cfc8456", "filename": "src/tools/clippy/.github/workflows/clippy.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -58,6 +58,10 @@ jobs:\n       run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n       working-directory: clippy_lints\n \n+    - name: Test clippy_utils\n+      run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n+      working-directory: clippy_utils\n+\n     - name: Test rustc_tools_util\n       run: cargo test --features deny-warnings\n       working-directory: rustc_tools_util"}, {"sha": "8b644aa28176b6e4fc44de9dcf81b3c8cd09dc58", "filename": "src/tools/clippy/.github/workflows/clippy_bors.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -121,6 +121,10 @@ jobs:\n       run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n       working-directory: clippy_lints\n \n+    - name: Test clippy_utils\n+      run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n+      working-directory: clippy_utils\n+\n     - name: Test rustc_tools_util\n       run: cargo test --features deny-warnings\n       working-directory: rustc_tools_util"}, {"sha": "27bac4718b6c3b0c6705c7fcfb0578fd77dd372e", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 119, "deletions": 4, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -6,13 +6,127 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[b7f3f7f...master](https://github.com/rust-lang/rust-clippy/compare/b7f3f7f...master)\n+[e181011...master](https://github.com/rust-lang/rust-clippy/compare/e181011...master)\n+\n+## Rust 1.58 (beta)\n+\n+Current beta, release 2022-01-13\n+\n+[00e31fa...e181011](https://github.com/rust-lang/rust-clippy/compare/00e31fa...e181011)\n+\n+### New lints\n+\n+* [`transmute_num_to_bytes`]\n+  [#7805](https://github.com/rust-lang/rust-clippy/pull/7805)\n+* [`match_str_case_mismatch`]\n+  [#7806](https://github.com/rust-lang/rust-clippy/pull/7806)\n+* [`format_in_format_args`], [`to_string_in_format_args`]\n+  [#7743](https://github.com/rust-lang/rust-clippy/pull/7743)\n+* [`uninit_vec`]\n+  [#7682](https://github.com/rust-lang/rust-clippy/pull/7682)\n+* [`fn_to_numeric_cast_any`]\n+  [#7705](https://github.com/rust-lang/rust-clippy/pull/7705)\n+* [`undocumented_unsafe_blocks`]\n+  [#7748](https://github.com/rust-lang/rust-clippy/pull/7748)\n+* [`trailing_empty_array`]\n+  [#7838](https://github.com/rust-lang/rust-clippy/pull/7838)\n+* [`string_slice`]\n+  [#7878](https://github.com/rust-lang/rust-clippy/pull/7878)\n+\n+### Moves or deprecations of lints\n+\n+* Move [`non_send_fields_in_send_ty`] to `suspicious`\n+  [#7874](https://github.com/rust-lang/rust-clippy/pull/7874)\n+* Move [`non_ascii_literal`] to `restriction`\n+  [#7907](https://github.com/rust-lang/rust-clippy/pull/7907)\n+\n+### Changes that expand what code existing lints cover\n+\n+* [`question_mark`] now covers `Result`\n+  [#7840](https://github.com/rust-lang/rust-clippy/pull/7840)\n+* Make [`useless_format`] recognize bare `format!(\"\")`\n+  [#7801](https://github.com/rust-lang/rust-clippy/pull/7801)\n+* Lint on underscored variables with no side effects in [`no_effect`]\n+  [#7775](https://github.com/rust-lang/rust-clippy/pull/7775)\n+* Expand [`match_ref_pats`] to check for multiple reference patterns\n+  [#7800](https://github.com/rust-lang/rust-clippy/pull/7800)\n+\n+### False positive fixes\n+\n+* Fix false positive of [`implicit_saturating_sub`] with `else` clause\n+  [#7832](https://github.com/rust-lang/rust-clippy/pull/7832)\n+* Fix [`question_mark`] when there is call in conditional predicate\n+  [#7860](https://github.com/rust-lang/rust-clippy/pull/7860)\n+* [`mut_mut`] no longer lints when type is defined in external macros\n+  [#7795](https://github.com/rust-lang/rust-clippy/pull/7795)\n+* Avoid [`eq_op`] in test functions\n+  [#7811](https://github.com/rust-lang/rust-clippy/pull/7811)\n+* [`cast_possible_truncation`] no longer lints when cast is coming from `signum`\n+  method call [#7850](https://github.com/rust-lang/rust-clippy/pull/7850)\n+* [`match_str_case_mismatch`] no longer lints on uncased characters\n+  [#7865](https://github.com/rust-lang/rust-clippy/pull/7865)\n+* [`ptr_arg`] no longer lints references to type aliases\n+  [#7890](https://github.com/rust-lang/rust-clippy/pull/7890)\n+* [`missing_safety_doc`] now also accepts \"implementation safety\" headers\n+  [#7856](https://github.com/rust-lang/rust-clippy/pull/7856)\n+* [`missing_safety_doc`] no longer lints if any parent has `#[doc(hidden)]`\n+  attribute [#7849](https://github.com/rust-lang/rust-clippy/pull/7849)\n+* [`if_not_else`] now ignores else-if statements\n+  [#7895](https://github.com/rust-lang/rust-clippy/pull/7895)\n+* Avoid linting [`cast_possible_truncation`] on bit-reducing operations\n+  [#7819](https://github.com/rust-lang/rust-clippy/pull/7819)\n+* Avoid linting [`field_reassign_with_default`] when `Drop` and `Copy` are\n+  involved [#7794](https://github.com/rust-lang/rust-clippy/pull/7794)\n+* [`unnecessary_sort_by`] now checks if argument implements `Ord` trait\n+  [#7824](https://github.com/rust-lang/rust-clippy/pull/7824)\n+* Fix false positive in [`match_overlapping_arm`]\n+  [#7847](https://github.com/rust-lang/rust-clippy/pull/7847)\n+* Prevent [`needless_lifetimes`] false positive in `async` function definition\n+  [#7901](https://github.com/rust-lang/rust-clippy/pull/7901)\n+\n+### Suggestion fixes/improvements\n+\n+* Keep an initial `::` when [`doc_markdown`] suggests to use ticks\n+  [#7916](https://github.com/rust-lang/rust-clippy/pull/7916)\n+* Add a machine applicable suggestion for the [`doc_markdown`] missing backticks\n+  lint [#7904](https://github.com/rust-lang/rust-clippy/pull/7904)\n+* [`equatable_if_let`] no longer expands macros in the suggestion\n+  [#7788](https://github.com/rust-lang/rust-clippy/pull/7788)\n+* Make [`shadow_reuse`] suggestion less verbose\n+  [#7782](https://github.com/rust-lang/rust-clippy/pull/7782)\n+\n+### ICE fixes\n+\n+* Fix ICE in [`enum_variant_names`]\n+  [#7873](https://github.com/rust-lang/rust-clippy/pull/7873)\n+* Fix ICE in [`undocumented_unsafe_blocks`]\n+  [#7891](https://github.com/rust-lang/rust-clippy/pull/7891)\n+\n+### Documentation improvements\n+\n+* Fixed naive doc formatting for `#[must_use]` lints ([`must_use_unit`],\n+  [`double_must_use`], [`must_use_candidate`], [`let_underscore_must_use`])\n+  [#7827](https://github.com/rust-lang/rust-clippy/pull/7827)\n+* Fix typo in example for [`match_result_ok`]\n+  [#7815](https://github.com/rust-lang/rust-clippy/pull/7815)\n+\n+### Others\n+\n+* Allow giving reasons for [`disallowed_types`]\n+  [#7791](https://github.com/rust-lang/rust-clippy/pull/7791)\n+* Fix [`manual_assert`] and [`match_wild_err_arm`] for `#![no_std]` and Rust\n+  2021. [#7851](https://github.com/rust-lang/rust-clippy/pull/7851)\n+* Fix regression in [`semicolon_if_nothing_returned`] on macros containing while\n+  loops [#7789](https://github.com/rust-lang/rust-clippy/pull/7789)\n+* Added a new configuration `literal-suffix-style` to enforce a certain style\n+  writing [`unseparated_literal_suffix`]\n+  [#7726](https://github.com/rust-lang/rust-clippy/pull/7726)\n \n ## Rust 1.57\n \n-Current beta, release 2021-12-02\n+Current stable, released 2021-12-02\n \n-[7bfc26e...b7f3f7f](https://github.com/rust-lang/rust-clippy/compare/7bfc26e...b7f3f7f)\n+[7bfc26e...00e31fa](https://github.com/rust-lang/rust-clippy/compare/7bfc26e...00e31fa)\n \n ### New Lints\n \n@@ -161,7 +275,7 @@ Current beta, release 2021-12-02\n \n ## Rust 1.56\n \n-Current stable, released 2021-10-21\n+Released 2021-10-21\n \n [74d1561...7bfc26e](https://github.com/rust-lang/rust-clippy/compare/74d1561...7bfc26e)\n \n@@ -2912,6 +3026,7 @@ Released 2018-09-13\n [`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n [`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n [`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n+[`init_numbered_fields`]: https://rust-lang.github.io/rust-clippy/master/index.html#init_numbered_fields\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n [`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n [`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax"}, {"sha": "fc663de8f792dfb3e086fbe8ebcc7022b663e85c", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -118,16 +118,16 @@ which `IntelliJ Rust` will be able to understand.\n Run `cargo dev setup intellij --repo-path <repo-path>` where `<repo-path>` is a path to the rustc repo\n you just cloned.\n The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n-Clippys `Cargo.toml`s and should allow `IntelliJ Rust` to understand most of the types that Clippy uses.\n+Clippy's `Cargo.toml`s and should allow `IntelliJ Rust` to understand most of the types that Clippy uses.\n Just make sure to remove the dependencies again before finally making a pull request!\n \n [rustc_repo]: https://github.com/rust-lang/rust/\n [IntelliJ_rust_homepage]: https://intellij-rust.github.io/\n \n ### Rust Analyzer\n As of [#6869][6869], [`rust-analyzer`][ra_homepage] can understand that Clippy uses compiler-internals\n-using `extern crate` when `package.metadata.rust-analyzer.rustc_private` is set to `true` in Clippys `Cargo.toml.`\n-You will required a `nightly` toolchain with the `rustc-dev` component installed.\n+using `extern crate` when `package.metadata.rust-analyzer.rustc_private` is set to `true` in Clippy's `Cargo.toml.`\n+You will require a `nightly` toolchain with the `rustc-dev` component installed.\n Make sure that in the `rust-analyzer` configuration, you set\n ```\n { \"rust-analyzer.rustcSource\": \"discover\" }\n@@ -228,7 +228,7 @@ about `subtree`s in the Rust repository see [Rust's `CONTRIBUTING.md`][subtree].\n \n ### Patching git-subtree to work with big repos\n \n-Currently there's a bug in `git-subtree` that prevents it from working properly\n+Currently, there's a bug in `git-subtree` that prevents it from working properly\n with the [`rust-lang/rust`] repo. There's an open PR to fix that, but it's stale.\n Before continuing with the following steps, we need to manually apply that fix to\n our local copy of `git-subtree`."}, {"sha": "1bbd89e7822e8a8f7d7d01c29b8302432c145ea4", "filename": "src/tools/clippy/README.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FREADME.md?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -144,7 +144,7 @@ line. (You can swap `clippy::all` with the specific lint category you are target\n ## Configuration\n \n Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable =\n-value` mapping eg.\n+value` mapping e.g.\n \n ```toml\n avoid-breaking-exported-api = false\n@@ -155,6 +155,10 @@ cognitive-complexity-threshold = 30\n See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n lints can be configured and the meaning of the variables.\n \n+Note that configuration changes will not apply for code that has already been compiled and cached under `./target/`;\n+for example, adding a new string to `doc-valid-idents` may still result in Clippy flagging that string. To be sure that\n+any configuration changes are applied, you may want to run `cargo clean` and re-compile your crate from scratch.\n+\n To deactivate the \u201cfor further information visit *lint-link*\u201d message you can\n define the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n \n@@ -193,7 +197,7 @@ And to warn on `lint_name`, run\n cargo clippy -- -W clippy::lint_name\n ```\n \n-This also works with lint groups. For example you\n+This also works with lint groups. For example, you\n can run Clippy with warnings for all lints enabled:\n ```terminal\n cargo clippy -- -W clippy::pedantic\n@@ -228,7 +232,7 @@ fn main() {\n You can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\n is equivalent to `msrv = 1.30.0`.\n \n-Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+Note: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.\n \n Lints that recognize this configuration option can be found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)\n "}, {"sha": "5061c9d1eaf6f41a4a68b1c23a211b4ffb863c83", "filename": "src/tools/clippy/clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -87,7 +87,7 @@ impl ApproxConstant {\n         let s = s.as_str();\n         if s.parse::<f64>().is_ok() {\n             for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n-                if is_approx_const(constant, &s, min_digits)\n+                if is_approx_const(constant, s, min_digits)\n                     && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n                 {\n                     span_lint_and_help("}, {"sha": "0629674307ba77dd86ad61b4f042a1a726cdf8dd", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -310,8 +310,10 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"wildcard_imports\")\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"enum_glob_use\")\n+                                            || extract_clippy_lint(lint)\n+                                                .map_or(false, |s| s.as_str() == \"wildcard_imports\")\n+                                            || extract_clippy_lint(lint)\n+                                                .map_or(false, |s| s.as_str() == \"enum_glob_use\")\n                                         {\n                                             return;\n                                         }"}, {"sha": "1915d990c126c1e4b990104b1fce603afac4fa53", "filename": "src/tools/clippy/clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -49,8 +49,9 @@ pub(super) fn check(\n                 if cast_from.kind() == cast_to.kind() =>\n             {\n                 if let Some(src) = snippet_opt(cx, lit.span) {\n-                    let num_lit = NumericLiteral::from_lit_kind(&src, &lit.node).unwrap();\n-                    lint_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n+                    if let Some(num_lit) = NumericLiteral::from_lit_kind(&src, &lit.node) {\n+                        lint_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n+                    }\n                 }\n             },\n             _ => {"}, {"sha": "4f89e5674306817ab83b3f3f791e80716aed6c4c", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 67, "deletions": 61, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -2,8 +2,8 @@\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n-use clippy_utils::str_utils::{self, count_match_end, count_match_start};\n-use rustc_hir::{EnumDef, Item, ItemKind};\n+use clippy_utils::str_utils::{camel_case_split, count_match_end, count_match_start};\n+use rustc_hir::{EnumDef, Item, ItemKind, Variant};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -18,6 +18,12 @@ declare_clippy_lint! {\n     /// Enumeration variant names should specify their variant,\n     /// not repeat the enumeration name.\n     ///\n+    /// ### Limitations\n+    /// Characters with no casing will be considered when comparing prefixes/suffixes\n+    /// This applies to numbers and non-ascii characters without casing\n+    /// e.g. `Foo1` and `Foo2` is considered to have different prefixes\n+    /// (the prefixes are `Foo1` and `Foo2` respectively), as also `Bar\u8783`, `Bar\u87f9`\n+    ///\n     /// ### Example\n     /// ```rust\n     /// enum Cake {\n@@ -120,72 +126,73 @@ impl_lint_pass!(EnumVariantNames => [\n     MODULE_INCEPTION\n ]);\n \n-fn check_variant(\n-    cx: &LateContext<'_>,\n-    threshold: u64,\n-    def: &EnumDef<'_>,\n-    item_name: &str,\n-    item_name_chars: usize,\n-    span: Span,\n-) {\n+fn check_enum_start(cx: &LateContext<'_>, item_name: &str, variant: &Variant<'_>) {\n+    let name = variant.ident.name.as_str();\n+    let item_name_chars = item_name.chars().count();\n+\n+    if count_match_start(item_name, name).char_count == item_name_chars\n+        && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n+        && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n+    {\n+        span_lint(\n+            cx,\n+            ENUM_VARIANT_NAMES,\n+            variant.span,\n+            \"variant name starts with the enum's name\",\n+        );\n+    }\n+}\n+\n+fn check_enum_end(cx: &LateContext<'_>, item_name: &str, variant: &Variant<'_>) {\n+    let name = variant.ident.name.as_str();\n+    let item_name_chars = item_name.chars().count();\n+\n+    if count_match_end(item_name, name).char_count == item_name_chars {\n+        span_lint(\n+            cx,\n+            ENUM_VARIANT_NAMES,\n+            variant.span,\n+            \"variant name ends with the enum's name\",\n+        );\n+    }\n+}\n+\n+fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_name: &str, span: Span) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }\n+\n+    let first = &def.variants[0].ident.name.as_str();\n+    let mut pre = camel_case_split(first);\n+    let mut post = pre.clone();\n+    post.reverse();\n     for var in def.variants {\n-        let name = var.ident.name.as_str();\n-        if count_match_start(item_name, &name).char_count == item_name_chars\n-            && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n-            && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n-        {\n-            span_lint(\n-                cx,\n-                ENUM_VARIANT_NAMES,\n-                var.span,\n-                \"variant name starts with the enum's name\",\n-            );\n-        }\n-        if count_match_end(item_name, &name).char_count == item_name_chars {\n-            span_lint(\n-                cx,\n-                ENUM_VARIANT_NAMES,\n-                var.span,\n-                \"variant name ends with the enum's name\",\n-            );\n-        }\n-    }\n-    let first = def.variants[0].ident.name.as_str();\n-    let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n-    let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n-    for var in def.variants {\n+        check_enum_start(cx, item_name, var);\n+        check_enum_end(cx, item_name, var);\n         let name = var.ident.name.as_str();\n \n-        let pre_match = count_match_start(pre, &name).byte_count;\n-        pre = &pre[..pre_match];\n-        let pre_camel = str_utils::camel_case_until(pre).byte_index;\n-        pre = &pre[..pre_camel];\n-        while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n-            if next.is_numeric() {\n-                return;\n-            }\n-            if next.is_lowercase() {\n-                let last = pre.len() - last.len_utf8();\n-                let last_camel = str_utils::camel_case_until(&pre[..last]);\n-                pre = &pre[..last_camel.byte_index];\n-            } else {\n-                break;\n-            }\n-        }\n+        let variant_split = camel_case_split(name);\n \n-        let post_match = count_match_end(post, &name);\n-        let post_end = post.len() - post_match.byte_count;\n-        post = &post[post_end..];\n-        let post_camel = str_utils::camel_case_start(post);\n-        post = &post[post_camel.byte_index..];\n+        pre = pre\n+            .iter()\n+            .zip(variant_split.iter())\n+            .take_while(|(a, b)| a == b)\n+            .map(|e| *e.0)\n+            .collect();\n+        post = post\n+            .iter()\n+            .zip(variant_split.iter().rev())\n+            .take_while(|(a, b)| a == b)\n+            .map(|e| *e.0)\n+            .collect();\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {\n         (true, true) => return,\n-        (false, _) => (\"pre\", pre),\n-        (true, false) => (\"post\", post),\n+        (false, _) => (\"pre\", pre.join(\"\")),\n+        (true, false) => {\n+            post.reverse();\n+            (\"post\", post.join(\"\"))\n+        },\n     };\n     span_lint_and_help(\n         cx,\n@@ -233,8 +240,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n     #[allow(clippy::similar_names)]\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n-        let item_name_chars = item_name.chars().count();\n-        let item_camel = to_camel_case(&item_name);\n+        let item_camel = to_camel_case(item_name);\n         if !item.span.from_expansion() && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n@@ -283,7 +289,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id)) {\n-                check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n+                check_variant(cx, self.threshold, def, item_name, item.span);\n             }\n         }\n         self.modules.push((item.ident.name, item_camel));"}, {"sha": "7a4397a7b746714ac8cd70d26d4a797e76976f13", "filename": "src/tools/clippy/clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n                 // If its within the 2 decimal digits of being out of precision we\n                 // check if the parsed representation is the same as the string\n                 // since we'll need the truncated string anyway.\n-                let digits = count_digits(&sym_str);\n+                let digits = count_digits(sym_str);\n                 let max = max_digits(fty);\n                 let type_suffix = match lit_float_ty {\n                     LitFloatType::Suffixed(ast::FloatTy::F32) => Some(\"f32\"),"}, {"sha": "6dcbaf68dfdbcb3787087603e2cba3bb00a94fef", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -356,7 +356,7 @@ fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n             if eq_expr_value(cx, lmul_lhs, lmul_rhs);\n             if eq_expr_value(cx, rmul_lhs, rmul_rhs);\n             then {\n-                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, lmul_lhs, \"..\"), Sugg::hir(cx, rmul_lhs, \"..\")));\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, lmul_lhs, \"..\").maybe_par(), Sugg::hir(cx, rmul_lhs, \"..\")));\n             }\n         }\n \n@@ -379,7 +379,7 @@ fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n             if let Some((rvalue, _)) = constant(cx, cx.typeck_results(), rargs_1);\n             if Int(2) == lvalue && Int(2) == rvalue;\n             then {\n-                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, largs_0, \"..\"), Sugg::hir(cx, rargs_0, \"..\")));\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, largs_0, \"..\").maybe_par(), Sugg::hir(cx, rargs_0, \"..\")));\n             }\n         }\n     }\n@@ -654,26 +654,52 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&\n                (F32(180_f32) == lvalue || F64(180_f64) == lvalue)\n             {\n+                let mut proposal = format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                if_chain! {\n+                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ast::LitKind::Float(ref value, float_type) = literal.node;\n+                    if float_type == ast::LitFloatType::Unsuffixed;\n+                    then {\n+                        if value.as_str().ends_with('.') {\n+                            proposal = format!(\"{}0_f64.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        } else {\n+                            proposal = format!(\"{}_f64.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        }\n+                    }\n+                }\n                 span_lint_and_sugg(\n                     cx,\n                     SUBOPTIMAL_FLOPS,\n                     expr.span,\n                     \"conversion to degrees can be done more accurately\",\n                     \"consider using\",\n-                    format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\")),\n+                    proposal,\n                     Applicability::MachineApplicable,\n                 );\n             } else if\n                 (F32(180_f32) == rvalue || F64(180_f64) == rvalue) &&\n                 (F32(f32_consts::PI) == lvalue || F64(f64_consts::PI) == lvalue)\n             {\n+                let mut proposal = format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                if_chain! {\n+                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ast::LitKind::Float(ref value, float_type) = literal.node;\n+                    if float_type == ast::LitFloatType::Unsuffixed;\n+                    then {\n+                        if value.as_str().ends_with('.') {\n+                            proposal = format!(\"{}0_f64.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        } else {\n+                            proposal = format!(\"{}_f64.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        }\n+                    }\n+                }\n                 span_lint_and_sugg(\n                     cx,\n                     SUBOPTIMAL_FLOPS,\n                     expr.span,\n                     \"conversion to radians can be done more accurately\",\n                     \"consider using\",\n-                    format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\")),\n+                    proposal,\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "f824f20ca40a017b28d725fcc452fc50f3209e55", "filename": "src/tools/clippy/clippy_lints/src/identity_op.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -61,15 +61,18 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n }\n \n fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-    // `1 << 0` is a common pattern in bit manipulation code\n-    cmp.node == BinOpKind::Shl\n-        && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n-        && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1))\n+    // This lint applies to integers\n+    !cx.typeck_results().expr_ty(left).peel_refs().is_integral()\n+        || !cx.typeck_results().expr_ty(right).peel_refs().is_integral()\n+        // `1 << 0` is a common pattern in bit manipulation code\n+        || (cmp.node == BinOpKind::Shl\n+            && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n+            && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1)))\n }\n \n fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n-    if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e) {\n-        let check = match *cx.typeck_results().expr_ty(e).kind() {\n+    if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e).map(Constant::peel_refs) {\n+        let check = match *cx.typeck_results().expr_ty(e).peel_refs().kind() {\n             ty::Int(ity) => unsext(cx.tcx, -1_i128, ity),\n             ty::Uint(uty) => clip(cx.tcx, !0, uty),\n             _ => return,"}, {"sha": "6515975fbffdc8b1b723e4196059168ebdda1256", "filename": "src/tools/clippy/clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                         if let LitKind::Int(0, _) = cond_lit.node {\n                             if cx.typeck_results().expr_ty(cond_left).is_signed() {\n                             } else {\n-                                print_lint_and_sugg(cx, &var_name, expr);\n+                                print_lint_and_sugg(cx, var_name, expr);\n                             };\n                         }\n                     },\n@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             let mut int_ids = INT_TYPES.iter().filter_map(|&ty| cx.tcx.lang_items().require(ty).ok());\n                             if int_ids.any(|int_id| int_id == impl_id);\n                             then {\n-                                print_lint_and_sugg(cx, &var_name, expr)\n+                                print_lint_and_sugg(cx, var_name, expr)\n                             }\n                         }\n                     },\n@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             let mut int_ids = INT_TYPES.iter().filter_map(|&ty| cx.tcx.lang_items().require(ty).ok());\n                             if int_ids.any(|int_id| int_id == impl_id);\n                             then {\n-                                print_lint_and_sugg(cx, &var_name, expr)\n+                                print_lint_and_sugg(cx, var_name, expr)\n                             }\n                         }\n                     },"}, {"sha": "5fe6725b581dc341f4c5e89cfb603c3b64ff528c", "filename": "src/tools/clippy/clippy_lints/src/init_numbered_fields.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finit_numbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finit_numbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finit_numbered_fields.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,80 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::borrow::Cow;\n+use std::cmp::Reverse;\n+use std::collections::BinaryHeap;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for tuple structs initialized with field syntax.\n+    /// It will however not lint if a base initializer is present.\n+    /// The lint will also ignore code in macros.\n+    ///\n+    /// ### Why is this bad?\n+    /// This may be confusing to the uninitiated and adds no\n+    /// benefit as opposed to tuple initializers\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct TupleStruct(u8, u16);\n+    ///\n+    /// let _ = TupleStruct {\n+    ///     0: 1,\n+    ///     1: 23,\n+    /// };\n+    ///\n+    /// // should be written as\n+    /// let base = TupleStruct(1, 23);\n+    ///\n+    /// // This is OK however\n+    /// let _ = TupleStruct { 0: 42, ..base };\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub INIT_NUMBERED_FIELDS,\n+    style,\n+    \"numbered fields in tuple struct initializer\"\n+}\n+\n+declare_lint_pass!(NumberedFields => [INIT_NUMBERED_FIELDS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NumberedFields {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Struct(path, fields, None) = e.kind {\n+            if !fields.is_empty()\n+                && !in_macro(e.span)\n+                && fields\n+                    .iter()\n+                    .all(|f| f.ident.as_str().as_bytes().iter().all(u8::is_ascii_digit))\n+            {\n+                let expr_spans = fields\n+                    .iter()\n+                    .map(|f| (Reverse(f.ident.as_str().parse::<usize>().unwrap()), f.expr.span))\n+                    .collect::<BinaryHeap<_>>();\n+                let mut appl = Applicability::MachineApplicable;\n+                let snippet = format!(\n+                    \"{}({})\",\n+                    snippet_with_applicability(cx, path.span(), \"..\", &mut appl),\n+                    expr_spans\n+                        .into_iter_sorted()\n+                        .map(|(_, span)| snippet_with_applicability(cx, span, \"..\", &mut appl))\n+                        .intersperse(Cow::Borrowed(\", \"))\n+                        .collect::<String>()\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    INIT_NUMBERED_FIELDS,\n+                    e.span,\n+                    \"used a field initializer for a tuple struct\",\n+                    \"try this instead\",\n+                    snippet,\n+                    appl,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "20e6220ec7d3adaa3250873b8285e53e533462a9", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -441,7 +441,7 @@ fn is_empty_string(expr: &Expr<'_>) -> bool {\n     if let ExprKind::Lit(ref lit) = expr.kind {\n         if let LitKind::Str(lit, _) = lit.node {\n             let lit = lit.as_str();\n-            return lit == \"\";\n+            return lit.is_empty();\n         }\n     }\n     false"}, {"sha": "944411087e9511dd9dab1e90f3f90a5031b30b11", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -81,6 +81,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),"}, {"sha": "002122793f3b6b4c2a26965be3bbbd1239f2d1cb", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -178,6 +178,7 @@ store.register_lints(&[\n     inherent_impl::MULTIPLE_INHERENT_IMPL,\n     inherent_to_string::INHERENT_TO_STRING,\n     inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    init_numbered_fields::INIT_NUMBERED_FIELDS,\n     inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n     int_plus_one::INT_PLUS_ONE,\n     integer_division::INTEGER_DIVISION,"}, {"sha": "1a0b869d40adb5f2fb8e4c9ef89ea812533f0569", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n     LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n     LintId::of(len_zero::LEN_ZERO),"}, {"sha": "d4687a1e2879749d7253fcf0d2bc90ece839f7ad", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,13 +1,15 @@\n // error-pattern:cargo-clippy\n \n+#![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_intersperse)]\n+#![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n-#![feature(control_flow_enum)]\n-#![feature(let_else)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n@@ -242,6 +244,7 @@ mod indexing_slicing;\n mod infinite_iter;\n mod inherent_impl;\n mod inherent_to_string;\n+mod init_numbered_fields;\n mod inline_fn_without_body;\n mod int_plus_one;\n mod integer_division;\n@@ -854,6 +857,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n     store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n+    store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "c62fa5e998bd475da630f949ac6198c71ce02a97", "filename": "src/tools/clippy/clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Pat, PatKind, StmtKind}\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::sym;\n+use std::fmt::Display;\n use std::iter::Iterator;\n \n /// Checks for for loops that sequentially copy items from one slice-like\n@@ -108,7 +109,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     src: &IndexExpr<'_>,\n ) -> String {\n     fn print_offset(offset: MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        if offset.as_str() == \"0\" {\n+        if offset.to_string() == \"0\" {\n             sugg::EMPTY.into()\n         } else {\n             offset\n@@ -123,7 +124,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n             if let Some(arg) = len_args.get(0);\n             if path_to_local(arg) == path_to_local(base);\n             then {\n-                if sugg.as_str() == end_str {\n+                if sugg.to_string() == end_str {\n                     sugg::EMPTY.into()\n                 } else {\n                     sugg\n@@ -147,7 +148,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n             print_offset(apply_offset(&start_str, &idx_expr.idx_offset)).into_sugg(),\n             print_limit(\n                 end,\n-                end_str.as_str(),\n+                end_str.to_string().as_str(),\n                 idx_expr.base,\n                 apply_offset(&end_str, &idx_expr.idx_offset),\n             )\n@@ -159,7 +160,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n                 print_offset(apply_offset(&counter_start, &idx_expr.idx_offset)).into_sugg(),\n                 print_limit(\n                     end,\n-                    end_str.as_str(),\n+                    end_str.to_string().as_str(),\n                     idx_expr.base,\n                     apply_offset(&end_str, &idx_expr.idx_offset) + &counter_start - &start_str,\n                 )\n@@ -202,15 +203,13 @@ fn build_manual_memcpy_suggestion<'tcx>(\n #[derive(Clone)]\n struct MinifyingSugg<'a>(Sugg<'a>);\n \n-impl<'a> MinifyingSugg<'a> {\n-    fn as_str(&self) -> &str {\n-        // HACK: Don't sync to Clippy! Required because something with the `or_patterns` feature\n-        // changed and this would now require parentheses.\n-        match &self.0 {\n-            Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s) => s.as_ref(),\n-        }\n+impl Display for MinifyingSugg<'a> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        self.0.fmt(f)\n     }\n+}\n \n+impl<'a> MinifyingSugg<'a> {\n     fn into_sugg(self) -> Sugg<'a> {\n         self.0\n     }\n@@ -225,7 +224,7 @@ impl<'a> From<Sugg<'a>> for MinifyingSugg<'a> {\n impl std::ops::Add for &MinifyingSugg<'static> {\n     type Output = MinifyingSugg<'static>;\n     fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n+        match (self.to_string().as_str(), rhs.to_string().as_str()) {\n             (\"0\", _) => rhs.clone(),\n             (_, \"0\") => self.clone(),\n             (_, _) => (&self.0 + &rhs.0).into(),\n@@ -236,7 +235,7 @@ impl std::ops::Add for &MinifyingSugg<'static> {\n impl std::ops::Sub for &MinifyingSugg<'static> {\n     type Output = MinifyingSugg<'static>;\n     fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n+        match (self.to_string().as_str(), rhs.to_string().as_str()) {\n             (_, \"0\") => self.clone(),\n             (\"0\", _) => (-rhs.0.clone()).into(),\n             (x, y) if x == y => sugg::ZERO.into(),\n@@ -248,7 +247,7 @@ impl std::ops::Sub for &MinifyingSugg<'static> {\n impl std::ops::Add<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     type Output = MinifyingSugg<'static>;\n     fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n+        match (self.to_string().as_str(), rhs.to_string().as_str()) {\n             (\"0\", _) => rhs.clone(),\n             (_, \"0\") => self,\n             (_, _) => (self.0 + &rhs.0).into(),\n@@ -259,7 +258,7 @@ impl std::ops::Add<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     type Output = MinifyingSugg<'static>;\n     fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n+        match (self.to_string().as_str(), rhs.to_string().as_str()) {\n             (_, \"0\") => self,\n             (\"0\", _) => (-rhs.0.clone()).into(),\n             (x, y) if x == y => sugg::ZERO.into(),"}, {"sha": "50d80e6a1d224fc2ae05c5b2ec681cd53ee69f10", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n@@ -8,7 +9,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::hygiene::ExpnKind;\n use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n@@ -213,7 +213,3 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n }\n-\n-fn in_macro(span: Span) -> bool {\n-    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-}"}, {"sha": "2c0fc218ca07c0d5eabb6a3140c540406a938a6d", "filename": "src/tools/clippy/clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -94,8 +94,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n-            ExprKind::MethodCall(segment, _, [receiver], _)\n-                if self.case_altered(segment.ident.as_str(), receiver) => {},\n+            ExprKind::MethodCall(segment, _, [receiver], _) if self.case_altered(segment.ident.as_str(), receiver) => {\n+            },\n             _ => walk_expr(self, ex),\n         }\n     }\n@@ -142,7 +142,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n                             }) = arm.pat.kind;\n             if let LitKind::Str(symbol, _) = lit.node;\n             let input = symbol.as_str();\n-            if !case_check(&input);\n+            if !case_check(input);\n             then {\n                 return Some((lit.span, symbol));\n             }"}, {"sha": "f5410c7fd7fc808cab894f0ba762cc20919d3a72", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,8 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::is_trait_method;\n+use clippy_utils::path_to_local;\n use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::{BindingAnnotation, Node, PatKind};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n@@ -11,14 +13,34 @@ use super::ITER_SKIP_NEXT;\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     // lint if caller of skip is an Iterator\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        span_lint_and_sugg(\n+        let mut application = Applicability::MachineApplicable;\n+        span_lint_and_then(\n             cx,\n             ITER_SKIP_NEXT,\n             expr.span.trim_start(recv.span).unwrap(),\n             \"called `skip(..).next()` on an iterator\",\n-            \"use `nth` instead\",\n-            format!(\".nth({})\", snippet(cx, arg.span, \"..\")),\n-            Applicability::MachineApplicable,\n+            |diag| {\n+                if_chain! {\n+                    if let Some(id) = path_to_local(recv);\n+                    if let Node::Binding(pat) = cx.tcx.hir().get(id);\n+                    if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n+                    if ann != BindingAnnotation::Mutable;\n+                    then {\n+                        application = Applicability::Unspecified;\n+                        diag.span_help(\n+                            pat.span,\n+                            &format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n+                        );\n+                    }\n+                }\n+\n+                diag.span_suggestion(\n+                    expr.span.trim_start(recv.span).unwrap(),\n+                    \"use `nth` instead\",\n+                    format!(\".nth({})\", snippet(cx, arg.span, \"..\")),\n+                    application,\n+                );\n+            },\n         );\n     }\n }"}, {"sha": "4e33b2ff14cdeaa2e3d7427e5349c30c2f22a5d5", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -2112,7 +2112,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 {\n                     wrong_self_convention::check(\n                         cx,\n-                        &name,\n+                        name,\n                         self_ty,\n                         first_arg_ty,\n                         first_arg.pat.span,"}, {"sha": "f3af281d6cacc289838d278b25d9d3ed144d4494", "filename": "src/tools/clippy/clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -2,7 +2,8 @@\n \n use super::UNWRAP_OR_ELSE_DEFAULT;\n use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, is_trait_item, source::snippet_with_applicability, ty::is_type_diagnostic_item,\n+    diagnostics::span_lint_and_sugg, is_default_equivalent_call, source::snippet_with_applicability,\n+    ty::is_type_diagnostic_item,\n };\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -24,7 +25,7 @@ pub(super) fn check<'tcx>(\n \n     if_chain! {\n         if is_option || is_result;\n-        if is_trait_item(cx, u_arg, sym::Default);\n+        if is_default_equivalent_call(cx, u_arg);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n "}, {"sha": "24b44f819f41997df804161082b5e7e5a7887ac0", "filename": "src/tools/clippy/clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -57,7 +57,7 @@ pub(super) fn get_hint_if_single_char_arg(\n         let string = r.as_str();\n         if string.chars().count() == 1;\n         then {\n-            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n+            let snip = snippet_with_applicability(cx, arg.span, string, applicability);\n             let ch = if let ast::StrStyle::Raw(nhash) = style {\n                 let nhash = nhash as usize;\n                 // for raw string: r##\"a\"##"}, {"sha": "778d49cb4b6ed1634cc1024bfad5e3d6883376bb", "filename": "src/tools/clippy/clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -187,14 +187,14 @@ impl<'tcx> LateLintPass<'tcx> for BoolComparison {\n                 BinOpKind::Eq => {\n                     let true_case = Some((|h| h, \"equality checks against true are unnecessary\"));\n                     let false_case = Some((\n-                        |h: Sugg<'_>| !h,\n+                        |h: Sugg<'tcx>| !h,\n                         \"equality checks against false can be replaced by a negation\",\n                     ));\n                     check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal);\n                 },\n                 BinOpKind::Ne => {\n                     let true_case = Some((\n-                        |h: Sugg<'_>| !h,\n+                        |h: Sugg<'tcx>| !h,\n                         \"inequality checks against true can be replaced by a negation\",\n                     ));\n                     let false_case = Some((|h| h, \"inequality checks against false are unnecessary\"));\n@@ -206,27 +206,27 @@ impl<'tcx> LateLintPass<'tcx> for BoolComparison {\n                     ignore_case,\n                     Some((|h| h, \"greater than checks against false are unnecessary\")),\n                     Some((\n-                        |h: Sugg<'_>| !h,\n+                        |h: Sugg<'tcx>| !h,\n                         \"less than comparison against true can be replaced by a negation\",\n                     )),\n                     ignore_case,\n                     Some((\n-                        |l: Sugg<'_>, r: Sugg<'_>| (!l).bit_and(&r),\n+                        |l: Sugg<'tcx>, r: Sugg<'tcx>| (!l).bit_and(&r),\n                         \"order comparisons between booleans can be simplified\",\n                     )),\n                 ),\n                 BinOpKind::Gt => check_comparison(\n                     cx,\n                     e,\n                     Some((\n-                        |h: Sugg<'_>| !h,\n+                        |h: Sugg<'tcx>| !h,\n                         \"less than comparison against true can be replaced by a negation\",\n                     )),\n                     ignore_case,\n                     ignore_case,\n                     Some((|h| h, \"greater than checks against false are unnecessary\")),\n                     Some((\n-                        |l: Sugg<'_>, r: Sugg<'_>| l.bit_and(&(!r)),\n+                        |l: Sugg<'tcx>, r: Sugg<'tcx>| l.bit_and(&(!r)),\n                         \"order comparisons between booleans can be simplified\",\n                     )),\n                 ),"}, {"sha": "0d05c83ffe45ee05804556515df1ce330e118152", "filename": "src/tools/clippy/clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,6 +1,8 @@\n use clippy_utils::consts::{self, Constant};\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -18,12 +20,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// x * -1\n+    /// // Bad\n+    /// let a = x * -1;\n+    ///\n+    /// // Good\n+    /// let b = -x;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEG_MULTIPLY,\n     style,\n-    \"multiplying integers with `-1`\"\n+    \"multiplying integers by `-1`\"\n }\n \n declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n@@ -49,8 +55,19 @@ fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n         if let ExprKind::Lit(ref l) = lit.kind;\n         if consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n+\n         then {\n-            span_lint(cx, NEG_MULTIPLY, span, \"negation by multiplying with `-1`\");\n+            let mut applicability = Applicability::MachineApplicable;\n+            let suggestion = format!(\"-{}\", snippet_with_applicability(cx, exp.span, \"..\", &mut applicability));\n+            span_lint_and_sugg(\n+                    cx,\n+                    NEG_MULTIPLY,\n+                    span,\n+                    \"this multiplication by -1 can be written more succinctly\",\n+                    \"consider using\",\n+                    suggestion,\n+                    applicability,\n+                );\n         }\n     }\n }"}, {"sha": "39a37e3e378ed4002b483d4b4800250e55e34e48", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -218,20 +218,20 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             return;\n         }\n         for existing_name in &self.0.names {\n-            if allowed_to_be_similar(&interned_name, existing_name.exemptions) {\n+            if allowed_to_be_similar(interned_name, existing_name.exemptions) {\n                 continue;\n             }\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n                     if existing_name.len - count != 1\n-                        || levenstein_not_1(&interned_name, existing_name.interned.as_str())\n+                        || levenstein_not_1(interned_name, existing_name.interned.as_str())\n                     {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n                     if count - existing_name.len != 1\n-                        || levenstein_not_1(existing_name.interned.as_str(), &interned_name)\n+                        || levenstein_not_1(existing_name.interned.as_str(), interned_name)\n                     {\n                         continue;\n                     }\n@@ -298,7 +298,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             return;\n         }\n         self.0.names.push(ExistingName {\n-            exemptions: get_exemptions(&interned_name).unwrap_or(&[]),\n+            exemptions: get_exemptions(interned_name).unwrap_or(&[]),\n             interned: ident.name,\n             span: ident.span,\n             len: count,"}, {"sha": "c8cbfefb63d65059b3b65c4d0ff6e875e97e334c", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -378,8 +378,8 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 span,\n                 \"an inclusive range would be more readable\",\n                 |diag| {\n-                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n-                    let end = Sugg::hir(cx, y, \"y\");\n+                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").maybe_par().to_string());\n+                    let end = Sugg::hir(cx, y, \"y\").maybe_par();\n                     if let Some(is_wrapped) = &snippet_opt(cx, span) {\n                         if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n                             diag.span_suggestion(\n@@ -415,8 +415,8 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 expr.span,\n                 \"an exclusive range would be more readable\",\n                 |diag| {\n-                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n-                    let end = Sugg::hir(cx, y, \"y\");\n+                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").maybe_par().to_string());\n+                    let end = Sugg::hir(cx, y, \"y\").maybe_par();\n                     diag.span_suggestion(\n                         expr.span,\n                         \"use\","}, {"sha": "b57ec96bc7e6d101a41d53aa1622bca70cd473cf", "filename": "src/tools/clippy/clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,11 +1,12 @@\n-use clippy_utils::{diagnostics::span_lint, must_use_attr, nth_arg, return_ty};\n+use clippy_utils::ty::is_must_use_ty;\n+use clippy_utils::{diagnostics::span_lint, nth_arg, return_ty};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -50,16 +51,18 @@ fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalD\n         if decl.implicit_self.has_implicit_self();\n         // We only show this warning for public exported methods.\n         if cx.access_levels.is_exported(fn_def);\n+        // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n+        if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n         if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n-        // No need to warn if the attribute is already present.\n-        if must_use_attr(cx.tcx.hir().attrs(hir_id)).is_none();\n         let ret_ty = return_ty(cx, hir_id);\n         let self_arg = nth_arg(cx, hir_id, 0);\n         // If `Self` has the same type as the returned type, then we want to warn.\n         //\n         // For this check, we don't want to remove the reference on the returned type because if\n         // there is one, we shouldn't emit a warning!\n         if self_arg.peel_refs() == ret_ty;\n+        // If `Self` is already marked as `#[must_use]`, no need for the attribute here.\n+        if !is_must_use_ty(cx, ret_ty);\n \n         then {\n             span_lint("}, {"sha": "112ccdcdd4202af8fdfea61895e67a38fddfebf6", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -73,6 +73,7 @@ declare_clippy_lint! {\n enum RetReplacement {\n     Empty,\n     Block,\n+    Unit,\n }\n \n declare_lint_pass!(Return => [LET_AND_RETURN, NEEDLESS_RETURN]);\n@@ -212,7 +213,7 @@ fn check_final_expr<'tcx>(\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Block);\n+                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Unit);\n             }\n         },\n         ExprKind::DropTemps(expr) => check_final_expr(cx, expr, None, RetReplacement::Empty),\n@@ -259,6 +260,17 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                     Applicability::MachineApplicable,\n                 );\n             },\n+            RetReplacement::Unit => {\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_RETURN,\n+                    ret_span,\n+                    \"unneeded `return` statement\",\n+                    \"replace `return` with a unit value\",\n+                    \"()\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            },\n         },\n     }\n }"}, {"sha": "ce05c5a6164fd76ab6e88bf137de1fcb7bc0663e", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::hir_id::ItemLocalId;\n-use rustc_hir::{Block, Body, BodyOwnerKind, Expr, ExprKind, HirId, Node, Pat, PatKind, QPath, UnOp};\n+use rustc_hir::{Block, Body, BodyOwnerKind, Expr, ExprKind, HirId, Let, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, Symbol};\n@@ -220,14 +220,14 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n }\n \n-/// Finds the \"init\" expression for a pattern: `let <pat> = <init>;` or\n+/// Finds the \"init\" expression for a pattern: `let <pat> = <init>;` (or `if let`) or\n /// `match <init> { .., <pat> => .., .. }`\n fn find_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n     for (_, node) in cx.tcx.hir().parent_iter(hir_id) {\n         let init = match node {\n             Node::Arm(_) | Node::Pat(_) => continue,\n             Node::Expr(expr) => match expr.kind {\n-                ExprKind::Match(e, _, _) => Some(e),\n+                ExprKind::Match(e, _, _) | ExprKind::Let(&Let { init: e, .. }) => Some(e),\n                 _ => None,\n             },\n             Node::Local(local) => local.init,"}, {"sha": "15543b6a2627785bd303a948f911b1fb5bbe1cc1", "filename": "src/tools/clippy/clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -64,7 +64,7 @@ impl TabsInDocComments {\n         if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n             let comment = comment.as_str();\n \n-            for (lo, hi) in get_chunks_of_tabs(&comment) {\n+            for (lo, hi) in get_chunks_of_tabs(comment) {\n                 // +3 skips the opening delimiter\n                 let new_span = Span::new(\n                     attr.span.lo() + BytePos(3 + lo),"}, {"sha": "3d3b4a6679dd1e445b956a8777b6a6e889c93b8d", "filename": "src/tools/clippy/clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -15,7 +15,7 @@ use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `unsafe` blocks without a `// Safety: ` comment\n+    /// Checks for `unsafe` blocks without a `// SAFETY: ` comment\n     /// explaining why the unsafe operations performed inside\n     /// the block are safe.\n     ///\n@@ -36,7 +36,7 @@ declare_clippy_lint! {\n     /// use std::ptr::NonNull;\n     /// let a = &mut 42;\n     ///\n-    /// // Safety: references are guaranteed to be non-null.\n+    /// // SAFETY: references are guaranteed to be non-null.\n     /// let ptr = unsafe { NonNull::new_unchecked(a) };\n     /// ```\n     #[clippy::version = \"1.58.0\"]\n@@ -213,7 +213,7 @@ impl UndocumentedUnsafeBlocks {\n             );\n         } else {\n             let block_indent = indent_of(cx, span);\n-            let suggestion = format!(\"// Safety: ...\\n{}\", snippet(cx, span, \"..\"));\n+            let suggestion = format!(\"// SAFETY: ...\\n{}\", snippet(cx, span, \"..\"));\n \n             span_lint_and_sugg(\n                 cx,"}, {"sha": "64f7a055cd9bd7f72bff009805bccdb575426cb8", "filename": "src/tools/clippy/clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -60,7 +60,7 @@ fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>, span: Span) {\n     let old_str = old_name.name.as_str();\n     let new_str = new_name.name.as_str();\n-    if contains_unsafe(&old_str) && !contains_unsafe(&new_str) {\n+    if contains_unsafe(old_str) && !contains_unsafe(new_str) {\n         span_lint(\n             cx,\n             UNSAFE_REMOVED_FROM_NAME,"}, {"sha": "918fa5f7dc12467bb6a19fd5601756d5ccf027eb", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -161,7 +161,7 @@ fn collect_unwrap_info<'tcx>(\n             if is_relevant_option_call(cx, ty, name) || is_relevant_result_call(cx, ty, name);\n             then {\n                 assert!(args.len() == 1);\n-                let unwrappable = match name.as_ref() {\n+                let unwrappable = match name {\n                     \"is_some\" | \"is_ok\" => true,\n                     \"is_err\" | \"is_none\" => false,\n                     _ => unreachable!(),"}, {"sha": "7286d0a7bf99b890b2bd0f90aa58e754c6e427ab", "filename": "src/tools/clippy/clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -87,7 +87,7 @@ fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     if (ident.chars().all(|c| c.is_ascii_uppercase()) && ident.len() > 2)\n     // otherwise, warn if we have SOmeTHING lIKE THIs but only warn with the aggressive\n     // upper-case-acronyms-aggressive config option enabled\n-    || (be_aggressive && ident != &corrected)\n+    || (be_aggressive && ident != corrected)\n     {\n         span_lint_and_sugg(\n             cx,"}, {"sha": "e98dcd3cf983b721905c555cb9f2c2aceef18d4d", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, BytePos, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -344,11 +344,11 @@ impl EarlyLintPass for ClippyLintsInternal {\n             if let ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) = utils.kind {\n                 if let Some(paths) = items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n                     if let ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) = paths.kind {\n-                        let mut last_name: Option<SymbolStr> = None;\n+                        let mut last_name: Option<&str> = None;\n                         for item in items {\n                             let name = item.ident.as_str();\n-                            if let Some(ref last_name) = last_name {\n-                                if **last_name > *name {\n+                            if let Some(last_name) = last_name {\n+                                if *last_name > *name {\n                                     span_lint(\n                                         cx,\n                                         CLIPPY_LINTS_INTERNAL,\n@@ -608,8 +608,7 @@ impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n         }\n \n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n-        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(Symbol::as_str).collect();\n         if_chain! {\n             if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];\n@@ -839,7 +838,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n             if is_expr_path_def_path(cx, fn_path, &[\"clippy_utils\", \"ty\", \"match_type\"]);\n             // Extract the path to the matched type\n             if let Some(segments) = path_to_matched_type(cx, ty_path);\n-            let segments: Vec<&str> = segments.iter().map(|sym| &**sym).collect();\n+            let segments: Vec<&str> = segments.iter().map(Symbol::as_str).collect();\n             if let Some(ty_did) = path_to_res(cx, &segments[..]).opt_def_id();\n             // Check if the matched type is a diagnostic item\n             if let Some(item_name) = cx.tcx.get_diagnostic_name(ty_did);\n@@ -862,7 +861,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n     }\n }\n \n-fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Vec<SymbolStr>> {\n+fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Vec<Symbol>> {\n     use rustc_hir::ItemKind;\n \n     match &expr.kind {\n@@ -887,12 +886,12 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n             _ => {},\n         },\n         ExprKind::Array(exprs) => {\n-            let segments: Vec<SymbolStr> = exprs\n+            let segments: Vec<Symbol> = exprs\n                 .iter()\n                 .filter_map(|expr| {\n                     if let ExprKind::Lit(lit) = &expr.kind {\n                         if let LitKind::Str(sym, _) = lit.node {\n-                            return Some(sym.as_str());\n+                            return Some(sym);\n                         }\n                     }\n \n@@ -1076,7 +1075,6 @@ impl InterningDefinedSymbol {\n             &paths::SYMBOL_TO_IDENT_STRING,\n             &paths::TO_STRING_METHOD,\n         ];\n-        // SymbolStr might be de-referenced: `&*symbol.as_str()`\n         let call = if_chain! {\n             if let ExprKind::AddrOf(_, _, e) = expr.kind;\n             if let ExprKind::Unary(UnOp::Deref, e) = e.kind;"}, {"sha": "5c024612f8eba85711aa188d834b663c58a3790f", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -168,6 +168,14 @@ impl Constant {\n             None\n         }\n     }\n+\n+    #[must_use]\n+    pub fn peel_refs(mut self) -> Self {\n+        while let Constant::Ref(r) = self {\n+            self = *r;\n+        }\n+        self\n+    }\n }\n \n /// Parses a `LitKind` to a `Constant`.\n@@ -320,7 +328,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     let res = self.typeck_results.qpath_res(qpath, callee.hir_id);\n                     if let Some(def_id) = res.opt_def_id();\n                     let def_path = self.lcx.get_def_path(def_id);\n-                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| s.as_str()).collect();\n+                    let def_path: Vec<&str> = def_path.iter().take(4).map(Symbol::as_str).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {"}, {"sha": "54d470ca738201c0a783cc6599de3bf42eb4c32b", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 76, "deletions": 47, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,8 +1,9 @@\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(let_else)]\n+#![feature(once_cell)]\n #![feature(rustc_private)]\n-#![feature(control_flow_enum)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![allow(clippy::missing_errors_doc, clippy::missing_panics_doc, clippy::must_use_candidate)]\n@@ -60,9 +61,12 @@ pub use self::hir_utils::{both, count_eq, eq_expr_value, over, SpanlessEq, Spanl\n \n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n+use std::lazy::SyncOnceCell;\n+use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, Attribute, LitKind};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -87,6 +91,7 @@ use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n@@ -142,6 +147,13 @@ macro_rules! extract_msrv_attr {\n     };\n }\n \n+/// Returns `true` if the span comes from a macro expansion, no matter if from a\n+/// macro by example or from a procedural macro\n+#[must_use]\n+pub fn in_macro(span: Span) -> bool {\n+    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n+}\n+\n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n #[must_use]\n@@ -156,18 +168,18 @@ pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n /// instead.\n ///\n /// Examples:\n-/// ```ignore\n+/// ```\n /// let abc = 1;\n /// //        ^ output\n /// let def = abc;\n-/// dbg!(def)\n+/// dbg!(def);\n /// //   ^^^ input\n ///\n /// // or...\n /// let abc = 1;\n /// let def = abc + 2;\n /// //        ^^^^^^^ output\n-/// dbg!(def)\n+/// dbg!(def);\n /// //   ^^^ input\n /// ```\n pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr<'b>) -> &'a Expr<'b> {\n@@ -664,6 +676,22 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n     false\n }\n \n+/// Return true if the expr is equal to `Default::default` when evaluated.\n+pub fn is_default_equivalent_call(cx: &LateContext<'_>, repl_func: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let hir::ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+        if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        if is_diag_trait_item(cx, repl_def_id, sym::Default)\n+            || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n+        then {\n+            true\n+        }\n+        else {\n+            false\n+        }\n+    }\n+}\n+\n /// Returns true if the expr is equal to `Default::default()` of it's type when evaluated.\n /// It doesn't cover all cases, for example indirect function calls (some of std\n /// functions are supported) but it is the best we have.\n@@ -686,18 +714,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n                 false\n             }\n         },\n-        ExprKind::Call(repl_func, _) => if_chain! {\n-            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if is_diag_trait_item(cx, repl_def_id, sym::Default)\n-                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n-            then {\n-                true\n-            }\n-            else {\n-                false\n-            }\n-        },\n+        ExprKind::Call(repl_func, _) => is_default_equivalent_call(cx, repl_func),\n         ExprKind::Path(qpath) => is_lang_ctor(cx, qpath, OptionNone),\n         ExprKind::AddrOf(rustc_hir::BorrowKind::Ref, _, expr) => matches!(expr.kind, ExprKind::Array([])),\n         _ => false,\n@@ -1136,7 +1153,7 @@ pub fn find_macro_calls(names: &[&str], body: &Body<'_>) -> Vec<Span> {\n \n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n-/// ```rust,ignore\n+/// ```rust\n ///        let x = ();\n /// //             ^^\n /// // will be converted to\n@@ -1337,7 +1354,7 @@ pub fn is_adjusted(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     cx.typeck_results().adjustments().get(e.hir_id).is_some()\n }\n \n-/// Returns the pre-expansion span if is this comes from an expansion of the\n+/// Returns the pre-expansion span if this comes from an expansion of the\n /// macro `name`.\n /// See also [`is_direct_expn_of`].\n #[must_use]\n@@ -1364,7 +1381,8 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// of the macro `name`.\n /// The difference with [`is_expn_of`] is that in\n /// ```rust\n-/// # macro_rules! foo { ($e:tt) => { $e } }; macro_rules! bar { ($e:expr) => { $e } }\n+/// # macro_rules! foo { ($name:tt!$args:tt) => { $name!$args } }\n+/// # macro_rules! bar { ($e:expr) => { $e } }\n /// foo!(bar!(42));\n /// ```\n /// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only\n@@ -1905,7 +1923,9 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n \n /// Check if parent of a hir node is a trait implementation block.\n /// For example, `f` in\n-/// ```rust,ignore\n+/// ```rust\n+/// # struct S;\n+/// # trait Trait { fn f(); }\n /// impl Trait for S {\n ///     fn f() {}\n /// }\n@@ -2124,26 +2144,25 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     false\n }\n \n-struct VisitConstTestStruct<'tcx> {\n+struct TestItemNamesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     names: Vec<Symbol>,\n-    found: bool,\n }\n-impl<'hir> ItemLikeVisitor<'hir> for VisitConstTestStruct<'hir> {\n+\n+impl<'hir> ItemLikeVisitor<'hir> for TestItemNamesVisitor<'hir> {\n     fn visit_item(&mut self, item: &Item<'_>) {\n         if let ItemKind::Const(ty, _body) = item.kind {\n             if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n                 // We could also check for the type name `test::TestDescAndFn`\n-                // and the `#[rustc_test_marker]` attribute?\n                 if let Res::Def(DefKind::Struct, _) = path.res {\n                     let has_test_marker = self\n                         .tcx\n                         .hir()\n                         .attrs(item.hir_id())\n                         .iter()\n                         .any(|a| a.has_name(sym::rustc_test_marker));\n-                    if has_test_marker && self.names.contains(&item.ident.name) {\n-                        self.found = true;\n+                    if has_test_marker {\n+                        self.names.push(item.ident.name);\n                     }\n                 }\n             }\n@@ -2154,32 +2173,42 @@ impl<'hir> ItemLikeVisitor<'hir> for VisitConstTestStruct<'hir> {\n     fn visit_foreign_item(&mut self, _: &ForeignItem<'_>) {}\n }\n \n+static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = SyncOnceCell::new();\n+\n+fn with_test_item_names(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n+    let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n+    let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n+    match map.entry(module) {\n+        Entry::Occupied(entry) => f(entry.get()),\n+        Entry::Vacant(entry) => {\n+            let mut visitor = TestItemNamesVisitor { tcx, names: Vec::new() };\n+            tcx.hir().visit_item_likes_in_module(module, &mut visitor);\n+            visitor.names.sort_unstable();\n+            f(&*entry.insert(visitor.names))\n+        },\n+    }\n+}\n+\n /// Checks if the function containing the given `HirId` is a `#[test]` function\n ///\n /// Note: If you use this function, please add a `#[test]` case in `tests/ui_test`.\n pub fn is_in_test_function(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n-    let names: Vec<_> = tcx\n-        .hir()\n-        .parent_iter(id)\n-        // Since you can nest functions we need to collect all until we leave\n-        // function scope\n-        .filter_map(|(_id, node)| {\n-            if let Node::Item(item) = node {\n-                if let ItemKind::Fn(_, _, _) = item.kind {\n-                    return Some(item.ident.name);\n+    with_test_item_names(tcx, tcx.parent_module(id), |names| {\n+        tcx.hir()\n+            .parent_iter(id)\n+            // Since you can nest functions we need to collect all until we leave\n+            // function scope\n+            .any(|(_id, node)| {\n+                if let Node::Item(item) = node {\n+                    if let ItemKind::Fn(_, _, _) = item.kind {\n+                        // Note that we have sorted the item names in the visitor,\n+                        // so the binary_search gets the same as `contains`, but faster.\n+                        return names.binary_search(&item.ident.name).is_ok();\n+                    }\n                 }\n-            }\n-            None\n-        })\n-        .collect();\n-    let parent_mod = tcx.parent_module(id);\n-    let mut vis = VisitConstTestStruct {\n-        tcx,\n-        names,\n-        found: false,\n-    };\n-    tcx.hir().visit_item_likes_in_module(parent_mod, &mut vis);\n-    vis.found\n+                false\n+            })\n+    })\n }\n \n /// Checks whether item either has `test` attribute applied, or"}, {"sha": "03a9d3c25fd9862ac9efeaf616deba7fe6d34e2f", "filename": "src/tools/clippy/clippy_utils/src/str_utils.rs", "status": "modified", "additions": 98, "deletions": 3, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fstr_utils.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -15,6 +15,7 @@ impl StrIndex {\n /// Returns the index of the character after the first camel-case component of `s`.\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{camel_case_until, StrIndex};\n /// assert_eq!(camel_case_until(\"AbcDef\"), StrIndex::new(6, 6));\n /// assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n /// assert_eq!(camel_case_until(\"AbcDD\"), StrIndex::new(3, 3));\n@@ -55,9 +56,10 @@ pub fn camel_case_until(s: &str) -> StrIndex {\n     }\n }\n \n-/// Returns index of the last camel-case component of `s`.\n+/// Returns index of the first camel-case component of `s`.\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{camel_case_start, StrIndex};\n /// assert_eq!(camel_case_start(\"AbcDef\"), StrIndex::new(0, 0));\n /// assert_eq!(camel_case_start(\"abcDef\"), StrIndex::new(3, 3));\n /// assert_eq!(camel_case_start(\"ABCD\"), StrIndex::new(4, 4));\n@@ -66,19 +68,37 @@ pub fn camel_case_until(s: &str) -> StrIndex {\n /// ```\n #[must_use]\n pub fn camel_case_start(s: &str) -> StrIndex {\n+    camel_case_start_from_idx(s, 0)\n+}\n+\n+/// Returns `StrIndex` of the last camel-case component of `s[idx..]`.\n+///\n+/// ```\n+/// # use clippy_utils::str_utils::{camel_case_start_from_idx, StrIndex};\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 0), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 1), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_start_from_idx(\"Abcdefg\", 1), StrIndex::new(7, 7));\n+/// ```\n+pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n     let char_count = s.chars().count();\n     let range = 0..char_count;\n     let mut iter = range.rev().zip(s.char_indices().rev());\n-    if let Some((char_index, (_, first))) = iter.next() {\n+    if let Some((_, (_, first))) = iter.next() {\n         if !first.is_lowercase() {\n-            return StrIndex::new(char_index, s.len());\n+            return StrIndex::new(char_count, s.len());\n         }\n     } else {\n         return StrIndex::new(char_count, s.len());\n     }\n+\n     let mut down = true;\n     let mut last_index = StrIndex::new(char_count, s.len());\n     for (char_index, (byte_index, c)) in iter {\n+        if byte_index < start_idx {\n+            break;\n+        }\n         if down {\n             if c.is_uppercase() {\n                 down = false;\n@@ -96,9 +116,55 @@ pub fn camel_case_start(s: &str) -> StrIndex {\n             return last_index;\n         }\n     }\n+\n     last_index\n }\n \n+/// Get the indexes of camel case components of a string `s`\n+///\n+/// ```\n+/// # use clippy_utils::str_utils::{camel_case_indices, StrIndex};\n+/// assert_eq!(\n+///     camel_case_indices(\"AbcDef\"),\n+///     vec![StrIndex::new(0, 0), StrIndex::new(3, 3), StrIndex::new(6, 6)]\n+/// );\n+/// assert_eq!(\n+///     camel_case_indices(\"abcDef\"),\n+///     vec![StrIndex::new(3, 3), StrIndex::new(6, 6)]\n+/// );\n+/// ```\n+pub fn camel_case_indices(s: &str) -> Vec<StrIndex> {\n+    let mut result = Vec::new();\n+    let mut str_idx = camel_case_start(s);\n+\n+    while str_idx.byte_index < s.len() {\n+        let next_idx = str_idx.byte_index + 1;\n+        result.push(str_idx);\n+        str_idx = camel_case_start_from_idx(s, next_idx);\n+    }\n+    result.push(str_idx);\n+\n+    result\n+}\n+\n+/// Split camel case string into a vector of its components\n+///\n+/// ```\n+/// # use clippy_utils::str_utils::{camel_case_split, StrIndex};\n+/// assert_eq!(camel_case_split(\"AbcDef\"), vec![\"Abc\", \"Def\"]);\n+/// ```\n+pub fn camel_case_split(s: &str) -> Vec<&str> {\n+    let mut offsets = camel_case_indices(s)\n+        .iter()\n+        .map(|e| e.byte_index)\n+        .collect::<Vec<usize>>();\n+    if offsets[0] != 0 {\n+        offsets.insert(0, 0);\n+    }\n+\n+    offsets.windows(2).map(|w| &s[w[0]..w[1]]).collect()\n+}\n+\n /// Dealing with sting comparison can be complicated, this struct ensures that both the\n /// character and byte count are provided for correct indexing.\n #[derive(Debug, Default, PartialEq, Eq)]\n@@ -116,6 +182,7 @@ impl StrCount {\n /// Returns the number of chars that match from the start\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{count_match_start, StrCount};\n /// assert_eq!(count_match_start(\"hello_mouse\", \"hello_penguin\"), StrCount::new(6, 6));\n /// assert_eq!(count_match_start(\"hello_clippy\", \"bye_bugs\"), StrCount::new(0, 0));\n /// assert_eq!(count_match_start(\"hello_world\", \"hello_world\"), StrCount::new(11, 11));\n@@ -141,6 +208,7 @@ pub fn count_match_start(str1: &str, str2: &str) -> StrCount {\n /// Returns the number of chars and bytes that match from the end\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{count_match_end, StrCount};\n /// assert_eq!(count_match_end(\"hello_cat\", \"bye_cat\"), StrCount::new(4, 4));\n /// assert_eq!(count_match_end(\"if_item_thing\", \"enum_value\"), StrCount::new(0, 0));\n /// assert_eq!(count_match_end(\"Clippy\", \"Clippy\"), StrCount::new(6, 6));\n@@ -227,4 +295,31 @@ mod test {\n     fn until_caps() {\n         assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n     }\n+\n+    #[test]\n+    fn camel_case_start_from_idx_full() {\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 4), StrIndex::new(6, 6));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 0), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 1), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start_from_idx(\"Abcdefg\", 1), StrIndex::new(7, 7));\n+    }\n+\n+    #[test]\n+    fn camel_case_indices_full() {\n+        assert_eq!(camel_case_indices(\"Abc\\u{f6}\\u{f6}DD\"), vec![StrIndex::new(7, 9)]);\n+    }\n+\n+    #[test]\n+    fn camel_case_split_full() {\n+        assert_eq!(camel_case_split(\"A\"), vec![\"A\"]);\n+        assert_eq!(camel_case_split(\"AbcDef\"), vec![\"Abc\", \"Def\"]);\n+        assert_eq!(camel_case_split(\"Abc\"), vec![\"Abc\"]);\n+        assert_eq!(camel_case_split(\"abcDef\"), vec![\"abc\", \"Def\"]);\n+        assert_eq!(\n+            camel_case_split(\"\\u{f6}\\u{f6}AabABcd\"),\n+            vec![\"\\u{f6}\\u{f6}\", \"Aab\", \"A\", \"Bcd\"]\n+        );\n+    }\n }"}, {"sha": "92662c59226a2e300f38ac8378fe9f932540ce98", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 163, "deletions": 88, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,9 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::source::{\n-    snippet, snippet_opt, snippet_with_applicability, snippet_with_context, snippet_with_macro_callsite,\n-};\n+use crate::source::{snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite};\n use crate::{get_parent_expr_for_hir, higher};\n use rustc_ast::util::parser::AssocOp;\n use rustc_ast::{ast, token};\n@@ -33,7 +31,7 @@ pub enum Sugg<'a> {\n     MaybeParen(Cow<'a, str>),\n     /// A binary operator expression, including `as`-casts and explicit type\n     /// coercion.\n-    BinOp(AssocOp, Cow<'a, str>),\n+    BinOp(AssocOp, Cow<'a, str>, Cow<'a, str>),\n }\n \n /// Literal constant `0`, for convenience.\n@@ -46,7 +44,8 @@ pub const EMPTY: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"\"));\n impl Display for Sugg<'_> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         match *self {\n-            Sugg::NonParen(ref s) | Sugg::MaybeParen(ref s) | Sugg::BinOp(_, ref s) => s.fmt(f),\n+            Sugg::NonParen(ref s) | Sugg::MaybeParen(ref s) => s.fmt(f),\n+            Sugg::BinOp(op, ref lhs, ref rhs) => binop_to_string(op, lhs, rhs).fmt(f),\n         }\n     }\n }\n@@ -55,10 +54,8 @@ impl Display for Sugg<'_> {\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Self> {\n-        snippet_opt(cx, expr.span).map(|snippet| {\n-            let snippet = Cow::Owned(snippet);\n-            Self::hir_from_snippet(expr, snippet)\n-        })\n+        let get_snippet = |span| snippet(cx, span, \"\");\n+        snippet_opt(cx, expr.span).map(|_| Self::hir_from_snippet(expr, get_snippet))\n     }\n \n     /// Convenience function around `hir_opt` for suggestions with a default\n@@ -93,9 +90,8 @@ impl<'a> Sugg<'a> {\n \n     /// Same as `hir`, but will use the pre expansion span if the `expr` was in a macro.\n     pub fn hir_with_macro_callsite(cx: &LateContext<'_>, expr: &hir::Expr<'_>, default: &'a str) -> Self {\n-        let snippet = snippet_with_macro_callsite(cx, expr.span, default);\n-\n-        Self::hir_from_snippet(expr, snippet)\n+        let get_snippet = |span| snippet_with_macro_callsite(cx, span, default);\n+        Self::hir_from_snippet(expr, get_snippet)\n     }\n \n     /// Same as `hir`, but first walks the span up to the given context. This will result in the\n@@ -112,24 +108,26 @@ impl<'a> Sugg<'a> {\n         default: &'a str,\n         applicability: &mut Applicability,\n     ) -> Self {\n-        let (snippet, in_macro) = snippet_with_context(cx, expr.span, ctxt, default, applicability);\n-\n-        if in_macro {\n-            Sugg::NonParen(snippet)\n+        if expr.span.ctxt() == ctxt {\n+            Self::hir_from_snippet(expr, |span| snippet(cx, span, default))\n         } else {\n-            Self::hir_from_snippet(expr, snippet)\n+            let snip = snippet_with_applicability(cx, expr.span, default, applicability);\n+            Sugg::NonParen(snip)\n         }\n     }\n \n     /// Generate a suggestion for an expression with the given snippet. This is used by the `hir_*`\n     /// function variants of `Sugg`, since these use different snippet functions.\n-    fn hir_from_snippet(expr: &hir::Expr<'_>, snippet: Cow<'a, str>) -> Self {\n+    fn hir_from_snippet(expr: &hir::Expr<'_>, get_snippet: impl Fn(Span) -> Cow<'a, str>) -> Self {\n         if let Some(range) = higher::Range::hir(expr) {\n             let op = match range.limits {\n                 ast::RangeLimits::HalfOpen => AssocOp::DotDot,\n                 ast::RangeLimits::Closed => AssocOp::DotDotEq,\n             };\n-            return Sugg::BinOp(op, snippet);\n+            let start = range.start.map_or(\"\".into(), |expr| get_snippet(expr.span));\n+            let end = range.end.map_or(\"\".into(), |expr| get_snippet(expr.span));\n+\n+            return Sugg::BinOp(op, start, end);\n         }\n \n         match expr.kind {\n@@ -139,7 +137,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure(..)\n             | hir::ExprKind::Unary(..)\n-            | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n+            | hir::ExprKind::Match(..) => Sugg::MaybeParen(get_snippet(expr.span)),\n             hir::ExprKind::Continue(..)\n             | hir::ExprKind::Yield(..)\n             | hir::ExprKind::Array(..)\n@@ -160,23 +158,33 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n             | hir::ExprKind::DropTemps(_)\n-            | hir::ExprKind::Err => Sugg::NonParen(snippet),\n-            hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n-            hir::ExprKind::AssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n-            hir::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(op.node.into()), snippet),\n-            hir::ExprKind::Cast(..) => Sugg::BinOp(AssocOp::As, snippet),\n-            hir::ExprKind::Type(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n+            | hir::ExprKind::Err => Sugg::NonParen(get_snippet(expr.span)),\n+            hir::ExprKind::Assign(lhs, rhs, _) => {\n+                Sugg::BinOp(AssocOp::Assign, get_snippet(lhs.span), get_snippet(rhs.span))\n+            },\n+            hir::ExprKind::AssignOp(op, lhs, rhs) => {\n+                Sugg::BinOp(hirbinop2assignop(op), get_snippet(lhs.span), get_snippet(rhs.span))\n+            },\n+            hir::ExprKind::Binary(op, lhs, rhs) => Sugg::BinOp(\n+                AssocOp::from_ast_binop(op.node.into()),\n+                get_snippet(lhs.span),\n+                get_snippet(rhs.span),\n+            ),\n+            hir::ExprKind::Cast(lhs, ty) => Sugg::BinOp(AssocOp::As, get_snippet(lhs.span), get_snippet(ty.span)),\n+            hir::ExprKind::Type(lhs, ty) => Sugg::BinOp(AssocOp::Colon, get_snippet(lhs.span), get_snippet(ty.span)),\n         }\n     }\n \n     /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let snippet = if expr.span.from_expansion() {\n-            snippet_with_macro_callsite(cx, expr.span, default)\n-        } else {\n-            snippet(cx, expr.span, default)\n+        let get_whole_snippet = || {\n+            if expr.span.from_expansion() {\n+                snippet_with_macro_callsite(cx, expr.span, default)\n+            } else {\n+                snippet(cx, expr.span, default)\n+            }\n         };\n \n         match expr.kind {\n@@ -186,7 +194,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n-            | ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n+            | ast::ExprKind::Match(..) => Sugg::MaybeParen(get_whole_snippet()),\n             ast::ExprKind::Async(..)\n             | ast::ExprKind::Block(..)\n             | ast::ExprKind::Break(..)\n@@ -215,14 +223,42 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Array(..)\n             | ast::ExprKind::While(..)\n             | ast::ExprKind::Await(..)\n-            | ast::ExprKind::Err => Sugg::NonParen(snippet),\n-            ast::ExprKind::Range(.., RangeLimits::HalfOpen) => Sugg::BinOp(AssocOp::DotDot, snippet),\n-            ast::ExprKind::Range(.., RangeLimits::Closed) => Sugg::BinOp(AssocOp::DotDotEq, snippet),\n-            ast::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n-            ast::ExprKind::AssignOp(op, ..) => Sugg::BinOp(astbinop2assignop(op), snippet),\n-            ast::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(op.node), snippet),\n-            ast::ExprKind::Cast(..) => Sugg::BinOp(AssocOp::As, snippet),\n-            ast::ExprKind::Type(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n+            | ast::ExprKind::Err => Sugg::NonParen(get_whole_snippet()),\n+            ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::HalfOpen) => Sugg::BinOp(\n+                AssocOp::DotDot,\n+                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n+                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+            ),\n+            ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::Closed) => Sugg::BinOp(\n+                AssocOp::DotDotEq,\n+                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n+                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+            ),\n+            ast::ExprKind::Assign(ref lhs, ref rhs, _) => Sugg::BinOp(\n+                AssocOp::Assign,\n+                snippet(cx, lhs.span, default),\n+                snippet(cx, rhs.span, default),\n+            ),\n+            ast::ExprKind::AssignOp(op, ref lhs, ref rhs) => Sugg::BinOp(\n+                astbinop2assignop(op),\n+                snippet(cx, lhs.span, default),\n+                snippet(cx, rhs.span, default),\n+            ),\n+            ast::ExprKind::Binary(op, ref lhs, ref rhs) => Sugg::BinOp(\n+                AssocOp::from_ast_binop(op.node),\n+                snippet(cx, lhs.span, default),\n+                snippet(cx, rhs.span, default),\n+            ),\n+            ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n+                AssocOp::As,\n+                snippet(cx, lhs.span, default),\n+                snippet(cx, ty.span, default),\n+            ),\n+            ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n+                AssocOp::Colon,\n+                snippet(cx, lhs.span, default),\n+                snippet(cx, ty.span, default),\n+            ),\n         }\n     }\n \n@@ -306,17 +342,51 @@ impl<'a> Sugg<'a> {\n                     Sugg::NonParen(format!(\"({})\", sugg).into())\n                 }\n             },\n-            Sugg::BinOp(_, sugg) => {\n-                if has_enclosing_paren(&sugg) {\n-                    Sugg::NonParen(sugg)\n-                } else {\n-                    Sugg::NonParen(format!(\"({})\", sugg).into())\n-                }\n+            Sugg::BinOp(op, lhs, rhs) => {\n+                let sugg = binop_to_string(op, &lhs, &rhs);\n+                Sugg::NonParen(format!(\"({})\", sugg).into())\n             },\n         }\n     }\n }\n \n+/// Generates a string from the operator and both sides.\n+fn binop_to_string(op: AssocOp, lhs: &str, rhs: &str) -> String {\n+    match op {\n+        AssocOp::Add\n+        | AssocOp::Subtract\n+        | AssocOp::Multiply\n+        | AssocOp::Divide\n+        | AssocOp::Modulus\n+        | AssocOp::LAnd\n+        | AssocOp::LOr\n+        | AssocOp::BitXor\n+        | AssocOp::BitAnd\n+        | AssocOp::BitOr\n+        | AssocOp::ShiftLeft\n+        | AssocOp::ShiftRight\n+        | AssocOp::Equal\n+        | AssocOp::Less\n+        | AssocOp::LessEqual\n+        | AssocOp::NotEqual\n+        | AssocOp::Greater\n+        | AssocOp::GreaterEqual => format!(\n+            \"{} {} {}\",\n+            lhs,\n+            op.to_ast_binop().expect(\"Those are AST ops\").to_string(),\n+            rhs\n+        ),\n+        AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n+        AssocOp::AssignOp(op) => {\n+            format!(\"{} {}= {}\", lhs, token_kind_to_string(&token::BinOp(op)), rhs)\n+        },\n+        AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n+        AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n+        AssocOp::DotDotEq => format!(\"{}..={}\", lhs, rhs),\n+        AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n+    }\n+}\n+\n /// Return `true` if `sugg` is enclosed in parenthesis.\n fn has_enclosing_paren(sugg: impl AsRef<str>) -> bool {\n     let mut chars = sugg.as_ref().chars();\n@@ -391,10 +461,25 @@ impl Neg for Sugg<'_> {\n     }\n }\n \n-impl Not for Sugg<'_> {\n-    type Output = Sugg<'static>;\n-    fn not(self) -> Sugg<'static> {\n-        make_unop(\"!\", self)\n+impl Not for Sugg<'a> {\n+    type Output = Sugg<'a>;\n+    fn not(self) -> Sugg<'a> {\n+        use AssocOp::{Equal, Greater, GreaterEqual, Less, LessEqual, NotEqual};\n+\n+        if let Sugg::BinOp(op, lhs, rhs) = self {\n+            let to_op = match op {\n+                Equal => NotEqual,\n+                NotEqual => Equal,\n+                Less => GreaterEqual,\n+                GreaterEqual => Less,\n+                Greater => LessEqual,\n+                LessEqual => Greater,\n+                _ => return make_unop(\"!\", Sugg::BinOp(op, lhs, rhs)),\n+            };\n+            Sugg::BinOp(to_op, lhs, rhs)\n+        } else {\n+            make_unop(\"!\", self)\n+        }\n     }\n }\n \n@@ -463,53 +548,21 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n             || is_shift(other) && is_arith(op)\n     }\n \n-    let lhs_paren = if let Sugg::BinOp(lop, _) = *lhs {\n+    let lhs_paren = if let Sugg::BinOp(lop, _, _) = *lhs {\n         needs_paren(op, lop, Associativity::Left)\n     } else {\n         false\n     };\n \n-    let rhs_paren = if let Sugg::BinOp(rop, _) = *rhs {\n+    let rhs_paren = if let Sugg::BinOp(rop, _, _) = *rhs {\n         needs_paren(op, rop, Associativity::Right)\n     } else {\n         false\n     };\n \n-    let lhs = ParenHelper::new(lhs_paren, lhs);\n-    let rhs = ParenHelper::new(rhs_paren, rhs);\n-    let sugg = match op {\n-        AssocOp::Add\n-        | AssocOp::BitAnd\n-        | AssocOp::BitOr\n-        | AssocOp::BitXor\n-        | AssocOp::Divide\n-        | AssocOp::Equal\n-        | AssocOp::Greater\n-        | AssocOp::GreaterEqual\n-        | AssocOp::LAnd\n-        | AssocOp::LOr\n-        | AssocOp::Less\n-        | AssocOp::LessEqual\n-        | AssocOp::Modulus\n-        | AssocOp::Multiply\n-        | AssocOp::NotEqual\n-        | AssocOp::ShiftLeft\n-        | AssocOp::ShiftRight\n-        | AssocOp::Subtract => format!(\n-            \"{} {} {}\",\n-            lhs,\n-            op.to_ast_binop().expect(\"Those are AST ops\").to_string(),\n-            rhs\n-        ),\n-        AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n-        AssocOp::AssignOp(op) => format!(\"{} {}= {}\", lhs, token_kind_to_string(&token::BinOp(op)), rhs),\n-        AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n-        AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n-        AssocOp::DotDotEq => format!(\"{}..={}\", lhs, rhs),\n-        AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n-    };\n-\n-    Sugg::BinOp(op, sugg.into())\n+    let lhs = ParenHelper::new(lhs_paren, lhs).to_string();\n+    let rhs = ParenHelper::new(rhs_paren, rhs).to_string();\n+    Sugg::BinOp(op, lhs.into(), rhs.into())\n }\n \n /// Convenience wrapper around `make_assoc` and `AssocOp::from_ast_binop`.\n@@ -1007,10 +1060,32 @@ mod test {\n \n     #[test]\n     fn binop_maybe_par() {\n-        let sugg = Sugg::BinOp(AssocOp::Add, \"(1 + 1)\".into());\n+        let sugg = Sugg::BinOp(AssocOp::Add, \"1\".into(), \"1\".into());\n         assert_eq!(\"(1 + 1)\", sugg.maybe_par().to_string());\n \n-        let sugg = Sugg::BinOp(AssocOp::Add, \"(1 + 1) + (1 + 1)\".into());\n+        let sugg = Sugg::BinOp(AssocOp::Add, \"(1 + 1)\".into(), \"(1 + 1)\".into());\n         assert_eq!(\"((1 + 1) + (1 + 1))\", sugg.maybe_par().to_string());\n     }\n+    #[test]\n+    fn not_op() {\n+        use AssocOp::{Add, Equal, Greater, GreaterEqual, LAnd, LOr, Less, LessEqual, NotEqual};\n+\n+        fn test_not(op: AssocOp, correct: &str) {\n+            let sugg = Sugg::BinOp(op, \"x\".into(), \"y\".into());\n+            assert_eq!((!sugg).to_string(), correct);\n+        }\n+\n+        // Invert the comparison operator.\n+        test_not(Equal, \"x != y\");\n+        test_not(NotEqual, \"x == y\");\n+        test_not(Less, \"x >= y\");\n+        test_not(LessEqual, \"x > y\");\n+        test_not(Greater, \"x <= y\");\n+        test_not(GreaterEqual, \"x < y\");\n+\n+        // Other operators are inverted like !(..).\n+        test_not(Add, \"!(x + y)\");\n+        test_not(LAnd, \"!(x && y)\");\n+        test_not(LOr, \"!(x || y)\");\n+    }\n }"}, {"sha": "471ae40f1ac7af43fb20fc1efb8f419a99c4c5f7", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-17\"\n+channel = \"nightly-2021-12-30\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "111350a6280dc44a4415e30f74fe636f673c0f0e", "filename": "src/tools/clippy/tests/ui/crashes/ice-7868.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { 0 };\n    = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL ~     unsafe { 0 };\n    |\n "}, {"sha": "d3662a0a213d2cc4b276a974efd8a111e318b509", "filename": "src/tools/clippy/tests/ui/enum_variants.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -145,4 +145,10 @@ enum HIDataRequest {\n     DeleteUnpubHIData(String),\n }\n \n+enum North {\n+    Normal,\n+    NoLeft,\n+    NoRight,\n+}\n+\n fn main() {}"}, {"sha": "8a3265086e84fe146cef93d1e3aaad081b97f1c4", "filename": "src/tools/clippy/tests/ui/enum_variants.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fenum_variants.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -6,6 +6,18 @@ LL |     cFoo,\n    |\n    = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n+error: all variants have the same prefix: `c`\n+  --> $DIR/enum_variants.rs:14:1\n+   |\n+LL | / enum Foo {\n+LL | |     cFoo,\n+LL | |     cBar,\n+LL | |     cBaz,\n+LL | | }\n+   | |_^\n+   |\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n error: variant name starts with the enum's name\n   --> $DIR/enum_variants.rs:26:5\n    |\n@@ -60,25 +72,25 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `WithOut`\n-  --> $DIR/enum_variants.rs:81:1\n+error: all variants have the same prefix: `C`\n+  --> $DIR/enum_variants.rs:59:1\n    |\n-LL | / enum Seallll {\n-LL | |     WithOutCake,\n-LL | |     WithOutTea,\n-LL | |     WithOut,\n+LL | / enum Something {\n+LL | |     CCall,\n+LL | |     CCreate,\n+LL | |     CCryogenize,\n LL | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `Prefix`\n-  --> $DIR/enum_variants.rs:87:1\n+error: all variants have the same prefix: `WithOut`\n+  --> $DIR/enum_variants.rs:81:1\n    |\n-LL | / enum NonCaps {\n-LL | |     Prefix\u7684,\n-LL | |     PrefixTea,\n-LL | |     PrefixCake,\n+LL | / enum Seallll {\n+LL | |     WithOutCake,\n+LL | |     WithOutTea,\n+LL | |     WithOut,\n LL | | }\n    | |_^\n    |\n@@ -108,5 +120,5 @@ LL | | }\n    |\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "ce91fe176c6fccec4fee57bc3339f7091e0e8827", "filename": "src/tools/clippy/tests/ui/floating_point_rad.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -11,7 +11,12 @@ pub const fn const_context() {\n fn main() {\n     let x = 3f32;\n     let _ = x.to_degrees();\n+    let _ = 90.0_f64.to_degrees();\n+    let _ = 90.5_f64.to_degrees();\n     let _ = x.to_radians();\n+    let _ = 90.0_f64.to_radians();\n+    let _ = 90.5_f64.to_radians();\n+    // let _ = 90.5 * 80. * std::f32::consts::PI / 180f32;\n     // Cases where the lint shouldn't be applied\n     let _ = x * 90f32 / std::f32::consts::PI;\n     let _ = x * std::f32::consts::PI / 90f32;"}, {"sha": "8f3234986148b70d302dd0f5ac04852feec89c16", "filename": "src/tools/clippy/tests/ui/floating_point_rad.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -11,7 +11,12 @@ pub const fn const_context() {\n fn main() {\n     let x = 3f32;\n     let _ = x * 180f32 / std::f32::consts::PI;\n+    let _ = 90. * 180f64 / std::f64::consts::PI;\n+    let _ = 90.5 * 180f64 / std::f64::consts::PI;\n     let _ = x * std::f32::consts::PI / 180f32;\n+    let _ = 90. * std::f32::consts::PI / 180f32;\n+    let _ = 90.5 * std::f32::consts::PI / 180f32;\n+    // let _ = 90.5 * 80. * std::f32::consts::PI / 180f32;\n     // Cases where the lint shouldn't be applied\n     let _ = x * 90f32 / std::f32::consts::PI;\n     let _ = x * std::f32::consts::PI / 90f32;"}, {"sha": "f12d3d23f3ab93fa38f53d5fc595857872e1d3a2", "filename": "src/tools/clippy/tests/ui/floating_point_rad.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloating_point_rad.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -6,11 +6,35 @@ LL |     let _ = x * 180f32 / std::f32::consts::PI;\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n-error: conversion to radians can be done more accurately\n+error: conversion to degrees can be done more accurately\n   --> $DIR/floating_point_rad.rs:14:13\n    |\n+LL |     let _ = 90. * 180f64 / std::f64::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.0_f64.to_degrees()`\n+\n+error: conversion to degrees can be done more accurately\n+  --> $DIR/floating_point_rad.rs:15:13\n+   |\n+LL |     let _ = 90.5 * 180f64 / std::f64::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.5_f64.to_degrees()`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:16:13\n+   |\n LL |     let _ = x * std::f32::consts::PI / 180f32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`\n \n-error: aborting due to 2 previous errors\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:17:13\n+   |\n+LL |     let _ = 90. * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.0_f64.to_radians()`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:18:13\n+   |\n+LL |     let _ = 90.5 * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.5_f64.to_radians()`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "2ed4b5db574d42aabae78102fc94d00e24c9b4ce", "filename": "src/tools/clippy/tests/ui/identity_op.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -2,10 +2,20 @@ const ONE: i64 = 1;\n const NEG_ONE: i64 = -1;\n const ZERO: i64 = 0;\n \n+struct A(String);\n+\n+impl std::ops::Shl<i32> for A {\n+    type Output = A;\n+    fn shl(mut self, other: i32) -> Self {\n+        self.0.push_str(&format!(\"{}\", other));\n+        self\n+    }\n+}\n #[allow(\n     clippy::eq_op,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n+    clippy::op_ref,\n     clippy::double_parens\n )]\n #[warn(clippy::identity_op)]\n@@ -38,4 +48,9 @@ fn main() {\n     42 << 0;\n     1 >> 0;\n     42 >> 0;\n+    &x >> 0;\n+    x >> &0;\n+\n+    let mut a = A(\"\".into());\n+    let b = a << 0; // no error: non-integer\n }"}, {"sha": "ff34b38db015bbf49077a823bf35b03b5a45d050", "filename": "src/tools/clippy/tests/ui/identity_op.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,70 +1,82 @@\n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:16:5\n+  --> $DIR/identity_op.rs:26:5\n    |\n LL |     x + 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:17:5\n+  --> $DIR/identity_op.rs:27:5\n    |\n LL |     x + (1 - 1);\n    |     ^^^^^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:19:5\n+  --> $DIR/identity_op.rs:29:5\n    |\n LL |     0 + x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:22:5\n+  --> $DIR/identity_op.rs:32:5\n    |\n LL |     x | (0);\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:25:5\n+  --> $DIR/identity_op.rs:35:5\n    |\n LL |     x * 1;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:26:5\n+  --> $DIR/identity_op.rs:36:5\n    |\n LL |     1 * x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:32:5\n+  --> $DIR/identity_op.rs:42:5\n    |\n LL |     -1 & x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:35:5\n+  --> $DIR/identity_op.rs:45:5\n    |\n LL |     u & 255;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:38:5\n+  --> $DIR/identity_op.rs:48:5\n    |\n LL |     42 << 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:39:5\n+  --> $DIR/identity_op.rs:49:5\n    |\n LL |     1 >> 0;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:40:5\n+  --> $DIR/identity_op.rs:50:5\n    |\n LL |     42 >> 0;\n    |     ^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: the operation is ineffective. Consider reducing it to `&x`\n+  --> $DIR/identity_op.rs:51:5\n+   |\n+LL |     &x >> 0;\n+   |     ^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:52:5\n+   |\n+LL |     x >> &0;\n+   |     ^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "2db4c2bee7f2bc62db61af4877891a091dcba504", "filename": "src/tools/clippy/tests/ui/iter_skip_next.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::iter_skip_next)]\n #![allow(clippy::blacklisted_name)]\n #![allow(clippy::iter_nth)]\n+#![allow(unused_mut, dead_code)]\n \n extern crate option_helpers;\n \n@@ -19,4 +20,18 @@ fn main() {\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.skip(42).next();\n     let _ = foo.filter().skip(42).next();\n+\n+    // fix #8128\n+    let test_string = \"1|1 2\";\n+    let mut sp = test_string.split('|').map(|s| s.trim());\n+    let _: Vec<&str> = sp.nth(1).unwrap().split(' ').collect();\n+    if let Some(mut s) = Some(test_string.split('|').map(|s| s.trim())) {\n+        let _: Vec<&str> = s.nth(1).unwrap().split(' ').collect();\n+    };\n+    fn check<T>(mut s: T)\n+    where\n+        T: Iterator<Item = String>,\n+    {\n+        let _: Vec<&str> = s.nth(1).unwrap().split(' ').collect();\n+    }\n }"}, {"sha": "692edb9aed9396386c1a04cc1e97d6725e337871", "filename": "src/tools/clippy/tests/ui/iter_skip_next.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::iter_skip_next)]\n #![allow(clippy::blacklisted_name)]\n #![allow(clippy::iter_nth)]\n+#![allow(unused_mut, dead_code)]\n \n extern crate option_helpers;\n \n@@ -19,4 +20,18 @@ fn main() {\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.skip(42).next();\n     let _ = foo.filter().skip(42).next();\n+\n+    // fix #8128\n+    let test_string = \"1|1 2\";\n+    let mut sp = test_string.split('|').map(|s| s.trim());\n+    let _: Vec<&str> = sp.skip(1).next().unwrap().split(' ').collect();\n+    if let Some(mut s) = Some(test_string.split('|').map(|s| s.trim())) {\n+        let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+    };\n+    fn check<T>(mut s: T)\n+    where\n+        T: Iterator<Item = String>,\n+    {\n+        let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+    }\n }"}, {"sha": "ca6970b27f16c50fdff4e834cf08d55840ccf8c3", "filename": "src/tools/clippy/tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,28 +1,46 @@\n error: called `skip(..).next()` on an iterator\n-  --> $DIR/iter_skip_next.rs:15:28\n+  --> $DIR/iter_skip_next.rs:16:28\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |                            ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(..).next()` on an iterator\n-  --> $DIR/iter_skip_next.rs:16:36\n+  --> $DIR/iter_skip_next.rs:17:36\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |                                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n \n error: called `skip(..).next()` on an iterator\n-  --> $DIR/iter_skip_next.rs:17:20\n+  --> $DIR/iter_skip_next.rs:18:20\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(10)`\n \n error: called `skip(..).next()` on an iterator\n-  --> $DIR/iter_skip_next.rs:18:33\n+  --> $DIR/iter_skip_next.rs:19:33\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |                                 ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(3)`\n \n-error: aborting due to 4 previous errors\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next.rs:27:26\n+   |\n+LL |     let _: Vec<&str> = sp.skip(1).next().unwrap().split(' ').collect();\n+   |                          ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next.rs:29:29\n+   |\n+LL |         let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+   |                             ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next.rs:35:29\n+   |\n+LL |         let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+   |                             ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "3607330cfa0d370149a80375b2f0f6cc041c0d88", "filename": "src/tools/clippy/tests/ui/iter_skip_next_unfixable.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::iter_skip_next)]\n+#![allow(dead_code)]\n+\n+/// Checks implementation of `ITER_SKIP_NEXT` lint\n+fn main() {\n+    // fix #8128\n+    let test_string = \"1|1 2\";\n+    let sp = test_string.split('|').map(|s| s.trim());\n+    let _: Vec<&str> = sp.skip(1).next().unwrap().split(' ').collect();\n+    if let Some(s) = Some(test_string.split('|').map(|s| s.trim())) {\n+        let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+    };\n+    fn check<T>(s: T)\n+    where\n+        T: Iterator<Item = String>,\n+    {\n+        let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+    }\n+}"}, {"sha": "74c327c748361df3feb10de6718e1b0fecfcbaf1", "filename": "src/tools/clippy/tests/ui/iter_skip_next_unfixable.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_skip_next_unfixable.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,39 @@\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next_unfixable.rs:9:26\n+   |\n+LL |     let _: Vec<&str> = sp.skip(1).next().unwrap().split(' ').collect();\n+   |                          ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+   |\n+   = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n+help: for this change `sp` has to be mutable\n+  --> $DIR/iter_skip_next_unfixable.rs:8:9\n+   |\n+LL |     let sp = test_string.split('|').map(|s| s.trim());\n+   |         ^^\n+\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next_unfixable.rs:11:29\n+   |\n+LL |         let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+   |                             ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+   |\n+help: for this change `s` has to be mutable\n+  --> $DIR/iter_skip_next_unfixable.rs:10:17\n+   |\n+LL |     if let Some(s) = Some(test_string.split('|').map(|s| s.trim())) {\n+   |                 ^\n+\n+error: called `skip(..).next()` on an iterator\n+  --> $DIR/iter_skip_next_unfixable.rs:17:29\n+   |\n+LL |         let _: Vec<&str> = s.skip(1).next().unwrap().split(' ').collect();\n+   |                             ^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(1)`\n+   |\n+help: for this change `s` has to be mutable\n+  --> $DIR/iter_skip_next_unfixable.rs:13:17\n+   |\n+LL |     fn check<T>(s: T)\n+   |                 ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2e3ebadd7b5d2c580d2c89b09898d01b67f00adc", "filename": "src/tools/clippy/tests/ui/manual_memcpy/with_loop_counters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -43,7 +43,7 @@ LL | /     for i in 3..(3 + src.len()) {\n LL | |         dst[i] = src[count];\n LL | |         count += 1;\n LL | |     }\n-   | |_____^ help: try replacing the loop by: `dst[3..(3 + src.len())].clone_from_slice(&src[..((3 + src.len()) - 3)]);`\n+   | |_____^ help: try replacing the loop by: `dst[3..(3 + src.len())].clone_from_slice(&src[..(3 + src.len() - 3)]);`\n \n error: it looks like you're manually copying between slices\n   --> $DIR/with_loop_counters.rs:35:5"}, {"sha": "89dc13fd5b13d20077cfeecb305ea35fa20dcc2f", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -41,6 +41,15 @@ fn main() {\n     x;\n     !x;\n     !(x && y);\n+    let a = 0;\n+    let b = 1;\n+\n+    a != b;\n+    a == b;\n+    a >= b;\n+    a > b;\n+    a <= b;\n+    a < b;\n     if x {\n         x\n     } else {"}, {"sha": "c11d9472e8d066fa643c7472d4e2fa024c75eb7d", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -53,6 +53,39 @@ fn main() {\n     } else {\n         true\n     };\n+    let a = 0;\n+    let b = 1;\n+\n+    if a == b {\n+        false\n+    } else {\n+        true\n+    };\n+    if a != b {\n+        false\n+    } else {\n+        true\n+    };\n+    if a < b {\n+        false\n+    } else {\n+        true\n+    };\n+    if a <= b {\n+        false\n+    } else {\n+        true\n+    };\n+    if a > b {\n+        false\n+    } else {\n+        true\n+    };\n+    if a >= b {\n+        false\n+    } else {\n+        true\n+    };\n     if x {\n         x\n     } else {"}, {"sha": "d2c48376f76622d0fe3528a76e92c45165261f31", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 73, "deletions": 13, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -31,7 +31,67 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:72:5\n+  --> $DIR/fixable.rs:59:5\n+   |\n+LL | /     if a == b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a != b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:64:5\n+   |\n+LL | /     if a != b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a == b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:69:5\n+   |\n+LL | /     if a < b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a >= b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:74:5\n+   |\n+LL | /     if a <= b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a > b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:79:5\n+   |\n+LL | /     if a > b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a <= b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:84:5\n+   |\n+LL | /     if a >= b {\n+LL | |         false\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^ help: you can reduce it to: `a < b`\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:105:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +101,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:80:5\n+  --> $DIR/fixable.rs:113:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +111,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:88:5\n+  --> $DIR/fixable.rs:121:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +121,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:96:5\n+  --> $DIR/fixable.rs:129:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +131,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:104:8\n+  --> $DIR/fixable.rs:137:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:108:8\n+  --> $DIR/fixable.rs:141:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:118:8\n+  --> $DIR/fixable.rs:151:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:119:8\n+  --> $DIR/fixable.rs:152:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:128:12\n+  --> $DIR/fixable.rs:161:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^\n@@ -108,7 +168,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `{ !returns_bool() }`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:141:5\n+  --> $DIR/fixable.rs:174:5\n    |\n LL | /     if unsafe { no(4) } & 1 != 0 {\n LL | |         true\n@@ -118,16 +178,16 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:146:30\n+  --> $DIR/fixable.rs:179:30\n    |\n LL |     let _brackets_unneeded = if unsafe { no(4) } & 1 != 0 { true } else { false };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `unsafe { no(4) } & 1 != 0`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:149:9\n+  --> $DIR/fixable.rs:182:9\n    |\n LL |         if unsafe { no(4) } & 1 != 0 { true } else { false }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "603d438d55889a8f72cb339beadf5031de43dfba", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -71,7 +71,18 @@ fn test_void_if_fun(b: bool) {\n fn test_void_match(x: u32) {\n     match x {\n         0 => (),\n-        _ => {},\n+        _ => (),\n+    }\n+}\n+\n+fn test_nested_match(x: u32) {\n+    match x {\n+        0 => (),\n+        1 => {\n+            let _ = 42;\n+            \n+        },\n+        _ => (),\n     }\n }\n \n@@ -182,7 +193,7 @@ async fn async_test_void_if_fun(b: bool) {\n async fn async_test_void_match(x: u32) {\n     match x {\n         0 => (),\n-        _ => {},\n+        _ => (),\n     }\n }\n "}, {"sha": "c6c8cb9ec152049e19929ab16092c4633f3b6112", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -75,6 +75,17 @@ fn test_void_match(x: u32) {\n     }\n }\n \n+fn test_nested_match(x: u32) {\n+    match x {\n+        0 => (),\n+        1 => {\n+            let _ = 42;\n+            return;\n+        },\n+        _ => return,\n+    }\n+}\n+\n fn read_line() -> String {\n     use std::io::BufRead;\n     let stdin = ::std::io::stdin();"}, {"sha": "5bc787c56a65bca559178a498e846a0ce6392942", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -70,127 +70,139 @@ error: unneeded `return` statement\n   --> $DIR/needless_return.rs:74:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:89:9\n+  --> $DIR/needless_return.rs:83:13\n+   |\n+LL |             return;\n+   |             ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:85:14\n+   |\n+LL |         _ => return,\n+   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:100:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:91:9\n+  --> $DIR/needless_return.rs:102:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:32\n+  --> $DIR/needless_return.rs:124:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:118:13\n+  --> $DIR/needless_return.rs:129:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:120:20\n+  --> $DIR/needless_return.rs:131:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:126:32\n+  --> $DIR/needless_return.rs:137:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:135:5\n+  --> $DIR/needless_return.rs:146:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:139:5\n+  --> $DIR/needless_return.rs:150:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:144:9\n+  --> $DIR/needless_return.rs:155:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:146:9\n+  --> $DIR/needless_return.rs:157:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:152:17\n+  --> $DIR/needless_return.rs:163:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:154:13\n+  --> $DIR/needless_return.rs:165:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:161:9\n+  --> $DIR/needless_return.rs:172:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:163:16\n+  --> $DIR/needless_return.rs:174:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:171:5\n+  --> $DIR/needless_return.rs:182:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:176:9\n+  --> $DIR/needless_return.rs:187:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:178:9\n+  --> $DIR/needless_return.rs:189:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:185:14\n+  --> $DIR/needless_return.rs:196:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:200:9\n+  --> $DIR/needless_return.rs:211:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:202:9\n+  --> $DIR/needless_return.rs:213:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 34 previous errors\n "}, {"sha": "35af9d6ae317f5c75424dabac4dee8786776f73f", "filename": "src/tools/clippy/tests/ui/neg_multiply.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![warn(clippy::neg_multiply)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::precedence)]\n+#![allow(unused)]\n+\n+use std::ops::Mul;\n+\n+struct X;\n+\n+impl Mul<isize> for X {\n+    type Output = X;\n+\n+    fn mul(self, _r: isize) -> Self {\n+        self\n+    }\n+}\n+\n+impl Mul<X> for isize {\n+    type Output = X;\n+\n+    fn mul(self, _r: X) -> X {\n+        X\n+    }\n+}\n+\n+fn main() {\n+    let x = 0;\n+\n+    -x;\n+\n+    -x;\n+\n+    100 + -x;\n+\n+    -(100 + x);\n+\n+    -17;\n+\n+    0xcafe | -0xff00;\n+\n+    -1 * -1; // should be ok\n+\n+    X * -1; // should be ok\n+    -1 * X; // should also be ok\n+}"}, {"sha": "7dbdb0906ceeb3e7f17c3b480b94c141f25bad01", "filename": "src/tools/clippy/tests/ui/neg_multiply.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n #![warn(clippy::neg_multiply)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::precedence)]\n+#![allow(unused)]\n \n use std::ops::Mul;\n \n@@ -28,6 +30,14 @@ fn main() {\n \n     -1 * x;\n \n+    100 + x * -1;\n+\n+    (100 + x) * -1;\n+\n+    -1 * 17;\n+\n+    0xcafe | 0xff00 * -1;\n+\n     -1 * -1; // should be ok\n \n     X * -1; // should be ok"}, {"sha": "dbf8fb36938cbcbdd918c9d18656e32640e695e2", "filename": "src/tools/clippy/tests/ui/neg_multiply.stderr", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneg_multiply.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,16 +1,40 @@\n-error: negation by multiplying with `-1`\n-  --> $DIR/neg_multiply.rs:27:5\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:29:5\n    |\n LL |     x * -1;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider using: `-x`\n    |\n    = note: `-D clippy::neg-multiply` implied by `-D warnings`\n \n-error: negation by multiplying with `-1`\n-  --> $DIR/neg_multiply.rs:29:5\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:31:5\n    |\n LL |     -1 * x;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider using: `-x`\n+\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:33:11\n+   |\n+LL |     100 + x * -1;\n+   |           ^^^^^^ help: consider using: `-x`\n+\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:35:5\n+   |\n+LL |     (100 + x) * -1;\n+   |     ^^^^^^^^^^^^^^ help: consider using: `-(100 + x)`\n+\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:37:5\n+   |\n+LL |     -1 * 17;\n+   |     ^^^^^^^ help: consider using: `-17`\n+\n+error: this multiplication by -1 can be written more succinctly\n+  --> $DIR/neg_multiply.rs:39:14\n+   |\n+LL |     0xcafe | 0xff00 * -1;\n+   |              ^^^^^^^^^^^ help: consider using: `-0xff00`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "1da97e9687988aa856051a79a1a7b868b6b0d7b6", "filename": "src/tools/clippy/tests/ui/numbered_fields.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,33 @@\n+//run-rustfix\n+#![warn(clippy::init_numbered_fields)]\n+\n+#[derive(Default)]\n+struct TupleStruct(u32, u32, u8);\n+\n+// This shouldn't lint because it's in a macro\n+macro_rules! tuple_struct_init {\n+    () => {\n+        TupleStruct { 0: 0, 1: 1, 2: 2 }\n+    };\n+}\n+\n+fn main() {\n+    let tuple_struct = TupleStruct::default();\n+\n+    // This should lint\n+    let _ = TupleStruct(1u32, 42, 23u8);\n+\n+    // This should also lint and order the fields correctly\n+    let _ = TupleStruct(1u32, 3u32, 2u8);\n+\n+    // Ok because of default initializer\n+    let _ = TupleStruct { 0: 42, ..tuple_struct };\n+\n+    let _ = TupleStruct {\n+        1: 23,\n+        ..TupleStruct::default()\n+    };\n+\n+    // Ok because it's in macro\n+    let _ = tuple_struct_init!();\n+}"}, {"sha": "08ec405a5606e2ae8772754dbcf35697ad5b4cdb", "filename": "src/tools/clippy/tests/ui/numbered_fields.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,41 @@\n+//run-rustfix\n+#![warn(clippy::init_numbered_fields)]\n+\n+#[derive(Default)]\n+struct TupleStruct(u32, u32, u8);\n+\n+// This shouldn't lint because it's in a macro\n+macro_rules! tuple_struct_init {\n+    () => {\n+        TupleStruct { 0: 0, 1: 1, 2: 2 }\n+    };\n+}\n+\n+fn main() {\n+    let tuple_struct = TupleStruct::default();\n+\n+    // This should lint\n+    let _ = TupleStruct {\n+        0: 1u32,\n+        1: 42,\n+        2: 23u8,\n+    };\n+\n+    // This should also lint and order the fields correctly\n+    let _ = TupleStruct {\n+        0: 1u32,\n+        2: 2u8,\n+        1: 3u32,\n+    };\n+\n+    // Ok because of default initializer\n+    let _ = TupleStruct { 0: 42, ..tuple_struct };\n+\n+    let _ = TupleStruct {\n+        1: 23,\n+        ..TupleStruct::default()\n+    };\n+\n+    // Ok because it's in macro\n+    let _ = tuple_struct_init!();\n+}"}, {"sha": "01691c8b141e8a3ad7ac998739f5eb08b4f0a7c4", "filename": "src/tools/clippy/tests/ui/numbered_fields.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnumbered_fields.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -0,0 +1,26 @@\n+error: used a field initializer for a tuple struct\n+  --> $DIR/numbered_fields.rs:18:13\n+   |\n+LL |       let _ = TupleStruct {\n+   |  _____________^\n+LL | |         0: 1u32,\n+LL | |         1: 42,\n+LL | |         2: 23u8,\n+LL | |     };\n+   | |_____^ help: try this instead: `TupleStruct(1u32, 42, 23u8)`\n+   |\n+   = note: `-D clippy::init-numbered-fields` implied by `-D warnings`\n+\n+error: used a field initializer for a tuple struct\n+  --> $DIR/numbered_fields.rs:25:13\n+   |\n+LL |       let _ = TupleStruct {\n+   |  _____________^\n+LL | |         0: 1u32,\n+LL | |         2: 2u8,\n+LL | |         1: 3u32,\n+LL | |     };\n+   | |_____^ help: try this instead: `TupleStruct(1u32, 3u32, 2u8)`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7dd5742dae9f213d5038af6d0422b6b201342db6", "filename": "src/tools/clippy/tests/ui/return_self_not_must_use.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Freturn_self_not_must_use.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -5,12 +5,12 @@ pub struct Bar;\n \n pub trait Whatever {\n     fn what(&self) -> Self;\n-    // There should be no warning here!\n+    // There should be no warning here! (returns a reference)\n     fn what2(&self) -> &Self;\n }\n \n impl Bar {\n-    // There should be no warning here!\n+    // There should be no warning here! (note taking a self argument)\n     pub fn not_new() -> Self {\n         Self\n     }\n@@ -20,23 +20,38 @@ impl Bar {\n     pub fn bar(self) -> Self {\n         self\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (private method)\n     fn foo2(&self) -> Self {\n         Self\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (returns a reference)\n     pub fn foo3(&self) -> &Self {\n         self\n     }\n+    // There should be no warning here! (already a `must_use` attribute)\n+    #[must_use]\n+    pub fn foo4(&self) -> Self {\n+        Self\n+    }\n }\n \n impl Whatever for Bar {\n-    // There should be no warning here!\n+    // There should be no warning here! (comes from the trait)\n     fn what(&self) -> Self {\n         self.foo2()\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (comes from the trait)\n     fn what2(&self) -> &Self {\n         self\n     }\n }\n+\n+#[must_use]\n+pub struct Foo;\n+\n+impl Foo {\n+    // There should be no warning here! (`Foo` already implements `#[must_use]`)\n+    fn foo(&self) -> Self {\n+        Self\n+    }\n+}"}, {"sha": "0321f8c4cdf84ba14f107536ba7019033d09d851", "filename": "src/tools/clippy/tests/ui/shadow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -47,6 +47,8 @@ fn syntax() {\n     let _ = |[x]: [u32; 1]| {\n         let x = 1;\n     };\n+    let y = Some(1);\n+    if let Some(y) = y {}\n }\n \n fn negative() {"}, {"sha": "f8b9221d555871d7f6fbd4378857a619da51f41f", "filename": "src/tools/clippy/tests/ui/shadow.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -241,17 +241,29 @@ note: previous binding is here\n LL |     let _ = |[x]: [u32; 1]| {\n    |               ^\n \n+error: `y` is shadowed\n+  --> $DIR/shadow.rs:51:17\n+   |\n+LL |     if let Some(y) = y {}\n+   |                 ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:50:9\n+   |\n+LL |     let y = Some(1);\n+   |         ^\n+\n error: `_b` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:85:9\n+  --> $DIR/shadow.rs:87:9\n    |\n LL |     let _b = _a;\n    |         ^^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:84:28\n+  --> $DIR/shadow.rs:86:28\n    |\n LL | pub async fn foo2(_a: i32, _b: i64) {\n    |                            ^^\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "dd22ecab0b551593f959cb7ce425318866ea09ee", "filename": "src/tools/clippy/tests/ui/short_circuit_statement.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -6,7 +6,7 @@\n fn main() {\n     if f() { g(); }\n     if !f() { g(); }\n-    if !(1 == 2) { g(); }\n+    if 1 != 2 { g(); }\n }\n \n fn f() -> bool {"}, {"sha": "aa84ac3a7925f3e6d0f741dd1d244b3c5b46209e", "filename": "src/tools/clippy/tests/ui/short_circuit_statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshort_circuit_statement.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -16,7 +16,7 @@ error: boolean short circuit operator in statement may be clearer using an expli\n   --> $DIR/short_circuit_statement.rs:9:5\n    |\n LL |     1 == 2 || g();\n-   |     ^^^^^^^^^^^^^^ help: replace it with: `if !(1 == 2) { g(); }`\n+   |     ^^^^^^^^^^^^^^ help: replace it with: `if 1 != 2 { g(); }`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "380303d8152aae2bfc56d37e7a09ddf660f46302", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -5,7 +5,7 @@\n fn nested_local() {\n     let _ = {\n         let _ = {\n-            // Safety:\n+            // SAFETY:\n             let _ = unsafe {};\n         };\n     };\n@@ -14,7 +14,7 @@ fn nested_local() {\n fn deep_nest() {\n     let _ = {\n         let _ = {\n-            // Safety:\n+            // SAFETY:\n             let _ = unsafe {};\n \n             // Safety:\n@@ -28,7 +28,7 @@ fn deep_nest() {\n                                 // Safety:\n                                 let _ = unsafe {};\n \n-                                // Safety:\n+                                // SAFETY:\n                                 unsafe {};\n                             };\n                         };\n@@ -44,7 +44,7 @@ fn deep_nest() {\n         unsafe {};\n     };\n \n-    // Safety:\n+    // SAFETY:\n     unsafe {};\n }\n \n@@ -59,7 +59,7 @@ fn line_comment() {\n }\n \n fn line_comment_newlines() {\n-    // Safety:\n+    // SAFETY:\n \n     unsafe {}\n }\n@@ -84,7 +84,7 @@ fn block_comment() {\n }\n \n fn block_comment_newlines() {\n-    /* Safety: */\n+    /* SAFETY: */\n \n     unsafe {}\n }\n@@ -96,7 +96,7 @@ fn inline_block_comment() {\n \n fn block_comment_with_extras() {\n     /* This is a description\n-     * Safety:\n+     * SAFETY:\n      */\n     unsafe {}\n }\n@@ -122,7 +122,7 @@ fn buried_safety() {\n }\n \n fn safety_with_prepended_text() {\n-    // This is a test. Safety:\n+    // This is a test. safety:\n     unsafe {}\n }\n \n@@ -132,7 +132,7 @@ fn local_line_comment() {\n }\n \n fn local_block_comment() {\n-    /* Safety: */\n+    /* SAFETY: */\n     let _ = unsafe {};\n }\n \n@@ -142,18 +142,18 @@ fn comment_array() {\n }\n \n fn comment_tuple() {\n-    // Safety:\n+    // sAFETY:\n     let _ = (42, unsafe {}, \"test\", unsafe {});\n }\n \n fn comment_unary() {\n-    // Safety:\n+    // SAFETY:\n     let _ = *unsafe { &42 };\n }\n \n #[allow(clippy::match_single_binding)]\n fn comment_match() {\n-    // Safety:\n+    // SAFETY:\n     let _ = match unsafe {} {\n         _ => {},\n     };\n@@ -177,7 +177,7 @@ fn comment_macro_call() {\n     }\n \n     t!(\n-        // Safety:\n+        // SAFETY:\n         unsafe {}\n     );\n }\n@@ -194,18 +194,18 @@ fn comment_macro_def() {\n }\n \n fn non_ascii_comment() {\n-    // \u0950\u19fb\u0ed2 Safety: \u0bf5\u2230\n+    // \u0950\u19fb\u0ed2 SaFeTy: \u0bf5\u2230\n     unsafe {};\n }\n \n fn local_commented_block() {\n     let _ =\n-        // Safety:\n+        // safety:\n         unsafe {};\n }\n \n fn local_nest() {\n-    // Safety:\n+    // safety:\n     let _ = [(42, unsafe {}, unsafe {}), (52, unsafe {}, unsafe {})];\n }\n \n@@ -267,17 +267,17 @@ fn no_comment_macro_def() {\n }\n \n fn trailing_comment() {\n-    unsafe {} // Safety:\n+    unsafe {} // SAFETY:\n }\n \n fn internal_comment() {\n     unsafe {\n-        // Safety:\n+        // SAFETY:\n     }\n }\n \n fn interference() {\n-    // Safety\n+    // SAFETY\n \n     let _ = 42;\n "}, {"sha": "f69d0da54e0d6cf4fdb21a80aa73244b5d38e7c5", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe {}\n    = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     unsafe {}\n    |\n \n@@ -19,7 +19,7 @@ LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |\n \n@@ -31,7 +31,7 @@ LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |\n \n@@ -43,7 +43,7 @@ LL |     let _ = *unsafe { &42 };\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = *unsafe { &42 };\n    |\n \n@@ -55,7 +55,7 @@ LL |     let _ = match unsafe {} {\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = match unsafe {} {\n    |\n \n@@ -67,7 +67,7 @@ LL |     let _ = &unsafe {};\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = &unsafe {};\n    |\n \n@@ -79,7 +79,7 @@ LL |     let _ = [unsafe {}; 5];\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = [unsafe {}; 5];\n    |\n \n@@ -91,7 +91,7 @@ LL |     let _ = unsafe {};\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     let _ = unsafe {};\n    |\n \n@@ -103,7 +103,7 @@ LL |     t!(unsafe {});\n    |\n help: consider adding a safety comment\n    |\n-LL ~     t!(// Safety: ...\n+LL ~     t!(// SAFETY: ...\n LL ~     unsafe {});\n    |\n \n@@ -122,13 +122,13 @@ LL |     t!();\n error: unsafe block missing a safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:270:5\n    |\n-LL |     unsafe {} // Safety:\n+LL |     unsafe {} // SAFETY:\n    |     ^^^^^^^^^\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n-LL ~     unsafe {} // Safety:\n+LL ~     // SAFETY: ...\n+LL ~     unsafe {} // SAFETY:\n    |\n \n error: unsafe block missing a safety comment\n@@ -139,7 +139,7 @@ LL |     unsafe {\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL +     unsafe {\n    |\n \n@@ -151,7 +151,7 @@ LL |     unsafe {};\n    |\n help: consider adding a safety comment\n    |\n-LL ~     // Safety: ...\n+LL ~     // SAFETY: ...\n LL ~     unsafe {};\n    |\n \n@@ -163,7 +163,7 @@ LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |\n help: consider adding a safety comment\n    |\n-LL ~     println!(\"{}\", // Safety: ...\n+LL ~     println!(\"{}\", // SAFETY: ...\n LL ~     unsafe { String::from_utf8_unchecked(vec![]) });\n    |\n "}, {"sha": "c2b9bd2c881fe916b8e2f789dcf3bce7de18b1ee", "filename": "src/tools/clippy/tests/ui/unwrap_or_else_default.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.fixed?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -45,7 +45,7 @@ fn unwrap_or_else_default() {\n     with_enum.unwrap_or_else(Enum::A);\n \n     let with_new = Some(vec![1]);\n-    with_new.unwrap_or_else(Vec::new);\n+    with_new.unwrap_or_default();\n \n     let with_err: Result<_, ()> = Ok(vec![1]);\n     with_err.unwrap_or_else(make);\n@@ -66,6 +66,9 @@ fn unwrap_or_else_default() {\n \n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_default();\n+\n+    let with_default_type: Option<Vec<u64>> = None;\n+    with_default_type.unwrap_or_default();\n }\n \n fn main() {}"}, {"sha": "d55664990aeb96f6dbbcf30869fc602538604329", "filename": "src/tools/clippy/tests/ui/unwrap_or_else_default.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.rs?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -66,6 +66,9 @@ fn unwrap_or_else_default() {\n \n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_else(u64::default);\n+\n+    let with_default_type: Option<Vec<u64>> = None;\n+    with_default_type.unwrap_or_else(Vec::new);\n }\n \n fn main() {}"}, {"sha": "53e31d85edfca277bab0061c7815eb5c18199c6d", "filename": "src/tools/clippy/tests/ui/unwrap_or_else_default.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8baeddfe8f101ca18822c4030caefa8e56d8c16c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funwrap_or_else_default.stderr?ref=8baeddfe8f101ca18822c4030caefa8e56d8c16c", "patch": "@@ -1,10 +1,16 @@\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:48:5\n+   |\n+LL |     with_new.unwrap_or_else(Vec::new);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_new.unwrap_or_default()`\n+   |\n+   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n+\n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:62:5\n    |\n LL |     with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_real_default.unwrap_or_default()`\n-   |\n-   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n \n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:65:5\n@@ -18,5 +24,11 @@ error: use of `.unwrap_or_else(..)` to construct default value\n LL |     with_default_type.unwrap_or_else(u64::default);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n \n-error: aborting due to 3 previous errors\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:71:5\n+   |\n+LL |     with_default_type.unwrap_or_else(Vec::new);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n+\n+error: aborting due to 5 previous errors\n "}]}