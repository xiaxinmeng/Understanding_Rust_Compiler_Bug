{"sha": "324f57a180ed2c80b17894ccd0b0b75aab14ec97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNGY1N2ExODBlZDJjODBiMTc4OTRjY2QwYjBiNzVhYWIxNGVjOTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T21:47:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T21:47:57Z"}, "message": "rustc: Check call and bind expressions using a set of region bindings", "tree": {"sha": "3ce2541fcf378f85b00b84437c3ec4fefeacdeb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce2541fcf378f85b00b84437c3ec4fefeacdeb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324f57a180ed2c80b17894ccd0b0b75aab14ec97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324f57a180ed2c80b17894ccd0b0b75aab14ec97", "html_url": "https://github.com/rust-lang/rust/commit/324f57a180ed2c80b17894ccd0b0b75aab14ec97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324f57a180ed2c80b17894ccd0b0b75aab14ec97/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf968c9d9e12d54c7dd724807684724aa23763d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf968c9d9e12d54c7dd724807684724aa23763d", "html_url": "https://github.com/rust-lang/rust/commit/bdf968c9d9e12d54c7dd724807684724aa23763d"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "7432310045900b1f17d8894772d07c6a26741a06", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/324f57a180ed2c80b17894ccd0b0b75aab14ec97/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324f57a180ed2c80b17894ccd0b0b75aab14ec97/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=324f57a180ed2c80b17894ccd0b0b75aab14ec97", "patch": "@@ -1538,7 +1538,7 @@ mod unify {\n     import result::{result, ok, err, chain, map, map2};\n \n     export fixup_vars;\n-    export mk_var_bindings;\n+    export mk_var_bindings, mk_region_bindings;\n     export resolve_type_structure;\n     export resolve_type_var;\n     export unify;"}, {"sha": "0b8f966fa58752baa40606e9e26c475d880e2f76", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/324f57a180ed2c80b17894ccd0b0b75aab14ec97/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324f57a180ed2c80b17894ccd0b0b75aab14ec97/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=324f57a180ed2c80b17894ccd0b0b75aab14ec97", "patch": "@@ -2141,6 +2141,11 @@ fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n     check_fn(fcx.ccx, proto, decl, body, expr.id, some(fcx));\n }\n \n+type check_call_or_bind_result = {\n+    bot: bool,\n+    rb: @ty::unify::region_bindings\n+};\n+\n fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                            expected: ty::t) -> bool {\n \n@@ -2150,7 +2155,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n     // A generic function to factor out common logic from call and bind\n     // expressions.\n     fn check_call_or_bind(fcx: @fn_ctxt, sp: span, id: ast::node_id,\n-                          fty: ty::t, args: [option<@ast::expr>]) -> bool {\n+                          fty: ty::t, args: [option<@ast::expr>])\n+            -> check_call_or_bind_result {\n         // Replaces \"caller\" regions in the arguments with the local region.\n         fn instantiate_caller_regions(fcx: @fn_ctxt, id: ast::node_id,\n                                       args: [ty::arg]) -> [ty::arg] {\n@@ -2185,6 +2191,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             };\n         }\n \n+        let rb = ty::unify::mk_region_bindings();\n+        let unifier = bind demand::with_region_bindings(_, _, rb, _, _);\n+\n         let sty = structure_of(fcx, sp, fty);\n         // Grab the argument types\n         let arg_tys = alt sty {\n@@ -2222,6 +2231,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             arg_tys = vec::from_elem(supplied_arg_count, dummy);\n         }\n \n+        // FIXME: This should instantiate re_params instead.\n         arg_tys = instantiate_caller_regions(fcx, id, arg_tys);\n \n         // Check the arguments.\n@@ -2241,8 +2251,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                       _ { false }\n                     };\n                     if is_block == check_blocks {\n-                        bot |= check_expr_with_unifier(\n-                            fcx, a, demand::simple, arg_tys[i].ty);\n+                        let t = arg_tys[i].ty;\n+                        bot |= check_expr_with_unifier(fcx, a, unifier, t);\n                     }\n                   }\n                   none { }\n@@ -2251,7 +2261,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             }\n             ret bot;\n         };\n-        check_args(false) | check_args(true)\n+        let bot = check_args(false) | check_args(true);\n+        ret { bot: bot, rb: rb };\n     }\n \n     // A generic function for checking assignment expressions\n@@ -2272,10 +2283,15 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             args_opt_0 += [some::<@ast::expr>(arg)];\n         }\n \n-        let bot = check_expr(fcx, f);\n+        let mut bot = check_expr(fcx, f);\n         // Call the generic checker.\n-        bot | check_call_or_bind(fcx, sp, id, expr_ty(fcx.ccx.tcx, f),\n-                                 args_opt_0)\n+        let ccobr = check_call_or_bind(fcx, sp, id, expr_ty(fcx.ccx.tcx, f),\n+                                       args_opt_0);\n+        bot |= ccobr.bot;\n+\n+        // TODO: Munge return type.\n+\n+        ret bot;\n     }\n \n     // A generic function for doing all of the checking for call expressions\n@@ -2690,8 +2706,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       ast::expr_bind(f, args) {\n         // Call the generic checker.\n         bot = check_expr(fcx, f);\n-        bot |= check_call_or_bind(fcx, expr.span, expr.id, expr_ty(tcx, f),\n-                                  args);\n+        let ccobr = check_call_or_bind(fcx, expr.span, expr.id,\n+                                       expr_ty(tcx, f), args);\n+        bot |= ccobr.bot;\n+\n+        // TODO: Perform substitutions on the return type.\n \n         // Pull the argument and return types out.\n         let proto, arg_tys, rt, cf, constrs;"}]}