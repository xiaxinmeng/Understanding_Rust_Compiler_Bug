{"sha": "d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjczM2VmZWJjNWQ4YjM3ODM5OGYxY2JiNGJiZDlmM2RlYjgyNzA=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-02-19T04:29:34Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-02-19T04:36:59Z"}, "message": "Cleanup", "tree": {"sha": "41099b8ebd3f8ca0aea64ac8623e8ac1140ca572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41099b8ebd3f8ca0aea64ac8623e8ac1140ca572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "html_url": "https://github.com/rust-lang/rust/commit/d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd0c3c41b927654553fa407fbb654bb3a2c64a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0c3c41b927654553fa407fbb654bb3a2c64a48", "html_url": "https://github.com/rust-lang/rust/commit/dd0c3c41b927654553fa407fbb654bb3a2c64a48"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "f4a7497dbe0207e6f14feeb6a11d1eb8386a4bd0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "patch": "@@ -38,7 +38,7 @@ pub struct GroupLabel(pub String);\n impl AssistLabel {\n     pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n-        assert!(label.chars().next().unwrap().is_uppercase());\n+        assert!(label.starts_with(|c: char| c.is_uppercase()));\n         AssistLabel { label, id }\n     }\n }"}, {"sha": "a524987fd5d00de0518fc1a4d475aa3511b3ff5c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "patch": "@@ -135,11 +135,7 @@ impl Completions {\n             let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n             // Ensure to match the full word\n             if after.starts_with('!')\n-                && before\n-                    .chars()\n-                    .rev()\n-                    .next()\n-                    .map_or(true, |c| c != '_' && !c.is_ascii_alphanumeric())\n+                && !before.ends_with(|c: char| c == '_' || c.is_ascii_alphanumeric())\n             {\n                 // It may have spaces before the braces like `foo! {}`\n                 match after[1..].chars().find(|&c| !c.is_whitespace()) {"}, {"sha": "dacca82794f74644168850318b9d4a8fef20af31", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06733efebc5d8b378398f1cbb4bbd9f3deb8270/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=d06733efebc5d8b378398f1cbb4bbd9f3deb8270", "patch": "@@ -141,7 +141,7 @@ fn convert_literal(l: &tt::Literal) -> TtToken {\n }\n \n fn convert_ident(ident: &tt::Ident) -> TtToken {\n-    let kind = if let Some('\\'') = ident.text.chars().next() {\n+    let kind = if ident.text.starts_with('\\'') {\n         LIFETIME\n     } else {\n         SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT)"}]}