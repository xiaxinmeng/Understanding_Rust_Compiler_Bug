{"sha": "39a575fb43d2ba0511d295b7e1a9178b4919e348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTU3NWZiNDNkMmJhMDUxMWQyOTViN2UxYTkxNzhiNDkxOWUzNDg=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-12T23:01:50Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-12T23:01:50Z"}, "message": "Added libuv UDP function bindings.", "tree": {"sha": "7af8c573b0b2882aed568d361d59b1879c959e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af8c573b0b2882aed568d361d59b1879c959e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a575fb43d2ba0511d295b7e1a9178b4919e348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a575fb43d2ba0511d295b7e1a9178b4919e348", "html_url": "https://github.com/rust-lang/rust/commit/39a575fb43d2ba0511d295b7e1a9178b4919e348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a575fb43d2ba0511d295b7e1a9178b4919e348/comments", "author": null, "committer": null, "parents": [{"sha": "eb11274919f96331bc21702ce95e77e973d76109", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb11274919f96331bc21702ce95e77e973d76109", "html_url": "https://github.com/rust-lang/rust/commit/eb11274919f96331bc21702ce95e77e973d76109"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "8a3f02cb59b7abe710584ee4bbc0b56c54229f1b", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/39a575fb43d2ba0511d295b7e1a9178b4919e348/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a575fb43d2ba0511d295b7e1a9178b4919e348/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=39a575fb43d2ba0511d295b7e1a9178b4919e348", "patch": "@@ -56,12 +56,14 @@ pub type uv_handle_t = c_void;\n pub type uv_loop_t = c_void;\n pub type uv_idle_t = c_void;\n pub type uv_tcp_t = c_void;\n+pub type uv_udp_t = c_void;\n pub type uv_connect_t = c_void;\n pub type uv_write_t = c_void;\n pub type uv_async_t = c_void;\n pub type uv_timer_t = c_void;\n pub type uv_stream_t = c_void;\n pub type uv_fs_t = c_void;\n+pub type uv_udp_send_t = c_void;\n \n pub type uv_idle_cb = *u8;\n \n@@ -183,6 +185,40 @@ pub unsafe fn idle_stop(handle: *uv_idle_t) -> c_int {\n     rust_uv_idle_stop(handle)\n }\n \n+pub unsafe fn udp_init(loop_handle: *uv_loop_t, handle: *uv_udp_t) -> c_int {\n+    return rust_uv_udp_init(loop_handle, handle);\n+}\n+\n+pub unsafe fn udp_bind(server: *uv_udp_t, addr: *sockaddr_in, flags: c_uint) -> c_int {\n+    return rust_uv_udp_bind(server, addr, flags);\n+}\n+\n+pub unsafe fn udp_bind6(server: *uv_udp_t, addr: *sockaddr_in6, flags: c_uint) -> c_int {\n+    return rust_uv_udp_bind6(server, addr, flags);\n+}\n+\n+pub unsafe fn udp_send<T>(req: *uv_udp_send_t, handle: *T, buf_in: &[uv_buf_t],\n+                          addr: *sockaddr_in, cb: *u8) -> c_int {\n+    let buf_ptr = vec::raw::to_ptr(buf_in);\n+    let buf_cnt = buf_in.len() as i32;\n+    return rust_uv_udp_send(req, handle, buf_ptr, buf_cnt, addr, cb);\n+}\n+\n+pub unsafe fn udp_send6<T>(req: *uv_udp_send_t, handle: *T, buf_in: &[uv_buf_t],\n+                          addr: *sockaddr_in6, cb: *u8) -> c_int {\n+    let buf_ptr = vec::raw::to_ptr(buf_in);\n+    let buf_cnt = buf_in.len() as i32;\n+    return rust_uv_udp_send(req, handle, buf_ptr, buf_cnt, addr, cb);\n+}\n+\n+pub unsafe fn udp_recv_start(server: *uv_udp_t, on_alloc: *u8, on_recv: *u8) -> c_int {\n+    return rust_uv_udp_recv_start(server, on_alloc, on_recv);\n+}\n+\n+pub unsafe fn udp_recv_stop(server: *uv_udp_t) -> c_int {\n+    return rust_uv_udp_recv_stop(server);\n+}\n+\n pub unsafe fn tcp_init(loop_handle: *c_void, handle: *uv_tcp_t) -> c_int {\n     return rust_uv_tcp_init(loop_handle, handle);\n }\n@@ -417,6 +453,17 @@ extern {\n                                name: *sockaddr_in) -> c_int;\n     fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n                                 name: *sockaddr_in6) ->c_int;\n+\n+    fn rust_uv_udp_init(loop_handle: *uv_loop_t, handle_ptr: *uv_udp_t) -> c_int;\n+    fn rust_uv_udp_bind(server: *uv_udp_t, addr: *sockaddr_in, flags: c_uint) -> c_int;\n+    fn rust_uv_udp_bind6(server: *uv_udp_t, addr: *sockaddr_in6, flags: c_uint) -> c_int;\n+    fn rust_uv_udp_send(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n+                        buf_cnt: c_int, addr: *sockaddr_in, cb: *u8) -> c_int;\n+    fn rust_uv_udp_send6(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n+                         buf_cnt: c_int, addr: *sockaddr_in6, cb: *u8) -> c_int;\n+    fn rust_uv_udp_recv_start(server: *uv_udp_t, on_alloc: *u8, on_recv: *u8) -> c_int;\n+    fn rust_uv_udp_recv_stop(server: *uv_udp_t) -> c_int;\n+\n     fn rust_uv_listen(stream: *c_void, backlog: c_int, cb: *u8) -> c_int;\n     fn rust_uv_accept(server: *c_void, client: *c_void) -> c_int;\n     fn rust_uv_write(req: *c_void,"}]}