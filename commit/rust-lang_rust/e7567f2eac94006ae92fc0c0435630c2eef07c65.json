{"sha": "e7567f2eac94006ae92fc0c0435630c2eef07c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTY3ZjJlYWM5NDAwNmFlOTJmYzBjMDQzNTYzMGMyZWVmMDdjNjU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-17T05:24:33Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-17T05:24:33Z"}, "message": "Made requested changes", "tree": {"sha": "4722896b4bdd2a7642cb6a627e514bec6ad73310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4722896b4bdd2a7642cb6a627e514bec6ad73310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7567f2eac94006ae92fc0c0435630c2eef07c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7567f2eac94006ae92fc0c0435630c2eef07c65", "html_url": "https://github.com/rust-lang/rust/commit/e7567f2eac94006ae92fc0c0435630c2eef07c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7567f2eac94006ae92fc0c0435630c2eef07c65/comments", "author": null, "committer": null, "parents": [{"sha": "21fde9a9d177ddffa34d58e049bc27d4c404469b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fde9a9d177ddffa34d58e049bc27d4c404469b", "html_url": "https://github.com/rust-lang/rust/commit/21fde9a9d177ddffa34d58e049bc27d4c404469b"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "e5109cf3ebb3d6ea080cef6bd6e88567f069b070", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7567f2eac94006ae92fc0c0435630c2eef07c65/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7567f2eac94006ae92fc0c0435630c2eef07c65/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e7567f2eac94006ae92fc0c0435630c2eef07c65", "patch": "@@ -220,12 +220,12 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     }\n                 } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n                     if match_type_parameter(cx, qpath, &paths::OPTION) {\n-                        span_help_and_lint(\n+                        span_lint(\n                             cx,\n                             OPTION_OPTION,\n                             ast_ty.span,\n-                            \"consider using `Option<T>` instead of `Option<Option<T>>`\",\n-                            \"`Option<_>` is easier to use than `Option<Option<_>`\",\n+                            \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n+                            enum if you need to distinguish all 3 cases\",\n                         );\n                         return; // don't recurse into the type\n                     }"}, {"sha": "91f686288dd5c69f0736df60677187de2b1b5543", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7567f2eac94006ae92fc0c0435630c2eef07c65/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7567f2eac94006ae92fc0c0435630c2eef07c65/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=e7567f2eac94006ae92fc0c0435630c2eef07c65", "patch": "@@ -1,57 +1,44 @@\n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n  --> $DIR/option_option.rs:1:13\n   |\n 1 | fn input(_: Option<Option<u8>>) {\n   |             ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D option-option` implied by `-D warnings`\n-  = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n  --> $DIR/option_option.rs:4:16\n   |\n 4 | fn output() -> Option<Option<u8>> {\n   |                ^^^^^^^^^^^^^^^^^^\n-  |\n-  = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n  --> $DIR/option_option.rs:8:27\n   |\n 8 | fn output_nested() -> Vec<Option<Option<u8>>> {\n   |                           ^^^^^^^^^^^^^^^^^^\n-  |\n-  = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n   --> $DIR/option_option.rs:13:30\n    |\n 13 | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n   --> $DIR/option_option.rs:18:8\n    |\n 18 |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n   --> $DIR/option_option.rs:22:11\n    |\n 22 |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `Option<_>` is easier to use than `Option<Option<_>`\n \n-error: consider using `Option<T>` instead of `Option<Option<T>>`\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n   --> $DIR/option_option.rs:23:15\n    |\n 23 |     Struct{x: Option<Option<u8>>},\n    |               ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `Option<_>` is easier to use than `Option<Option<_>`\n "}]}