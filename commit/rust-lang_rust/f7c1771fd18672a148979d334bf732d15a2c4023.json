{"sha": "f7c1771fd18672a148979d334bf732d15a2c4023", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YzE3NzFmZDE4NjcyYTE0ODk3OWQzMzRiZjczMmQxNWEyYzQwMjM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-05T20:44:49Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-07T02:11:19Z"}, "message": "Implement Index/IndexMut for [T]\n\nCloses #16529", "tree": {"sha": "adc3bb5f4752e9292064f7f17aed77ad7710283c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc3bb5f4752e9292064f7f17aed77ad7710283c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7c1771fd18672a148979d334bf732d15a2c4023", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c1771fd18672a148979d334bf732d15a2c4023", "html_url": "https://github.com/rust-lang/rust/commit/f7c1771fd18672a148979d334bf732d15a2c4023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7c1771fd18672a148979d334bf732d15a2c4023/comments", "author": null, "committer": null, "parents": [{"sha": "45cbdec4174778bf915f17561ef971c068a7fcbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/45cbdec4174778bf915f17561ef971c068a7fcbc", "html_url": "https://github.com/rust-lang/rust/commit/45cbdec4174778bf915f17561ef971c068a7fcbc"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "5475eef9d47d702a212b7b8e28d46cf51a239834", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7c1771fd18672a148979d334bf732d15a2c4023/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c1771fd18672a148979d334bf732d15a2c4023/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f7c1771fd18672a148979d334bf732d15a2c4023", "patch": "@@ -638,7 +638,7 @@ shr_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"index\"]\n-pub trait Index<Index, Sized? Result> {\n+pub trait Index<Index, Sized? Result> for Sized? {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     fn index<'a>(&'a self, index: &Index) -> &'a Result;\n }\n@@ -669,7 +669,7 @@ pub trait Index<Index, Sized? Result> {\n  * ```\n  */\n #[lang=\"index_mut\"]\n-pub trait IndexMut<Index, Result> {\n+pub trait IndexMut<Index, Result> for Sized? {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Result;\n }"}, {"sha": "138422ceff1ce02e80133ab0c0e1ba7c98e97459", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7c1771fd18672a148979d334bf732d15a2c4023/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c1771fd18672a148979d334bf732d15a2c4023/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f7c1771fd18672a148979d334bf732d15a2c4023", "patch": "@@ -256,7 +256,6 @@ pub trait SlicePrelude<T> for Sized? {\n     #[inline]\n     #[experimental = \"not triaged yet\"]\n     fn is_empty(&self) -> bool { self.len() == 0 }\n-\n     /// Returns a mutable reference to the element at the given index,\n     /// or `None` if the index is out of bounds\n     #[unstable = \"waiting on final error conventions\"]\n@@ -698,6 +697,22 @@ impl<T> SlicePrelude<T> for [T] {\n     }\n }\n \n+impl<T> ops::Index<uint, T> for [T] {\n+    fn index(&self, &index: &uint) -> &T {\n+        assert!(index < self.len());\n+\n+        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n+    }\n+}\n+\n+impl<T> ops::IndexMut<uint, T> for [T] {\n+    fn index_mut(&mut self, &index: &uint) -> &mut T {\n+        assert!(index < self.len());\n+\n+        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n+    }\n+}\n+\n impl<T> ops::Slice<uint, [T]> for [T] {\n     #[inline]\n     fn as_slice_<'a>(&'a self) -> &'a [T] {"}]}