{"sha": "1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTVkMWVhYmI5NTdjOGIwYmQwZjQ1NjRhNWY3YzhiZWYxODI2YmI=", "commit": {"author": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-05-13T07:42:30Z"}, "committer": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-05-13T07:42:30Z"}, "message": "Unified `unescape_{char,byte,str,byte_str,raw_str,raw_byte_str}` methods into one method `unescape_literal` with a mode argument.", "tree": {"sha": "08bc5f223db3b3bf719a507358be5e10c9f06d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08bc5f223db3b3bf719a507358be5e10c9f06d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb", "html_url": "https://github.com/rust-lang/rust/commit/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb/comments", "author": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e734e31340586f14c29efa6396ae15ad37f84a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/e734e31340586f14c29efa6396ae15ad37f84a96", "html_url": "https://github.com/rust-lang/rust/commit/e734e31340586f14c29efa6396ae15ad37f84a96"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "dcb4cc917960fc139a5eca17e07178d40d9cd630", "filename": "src/librustc_lexer/src/unescape.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=1be5d1eabb957c8b0bd0f4564a5f7c8bef1826bb", "patch": "@@ -58,6 +58,42 @@ pub enum EscapeError {\n     NonAsciiCharInByteString,\n }\n \n+/// Takes a contents of a literal (without quotes) and produces a\n+/// sequence of escaped characters or errors.\n+/// Values are returned through invoking of the provided callback.\n+pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)\n+where\n+    F: FnMut(Range<usize>, Result<char, EscapeError>),\n+{\n+    match mode {\n+        Mode::Char | Mode::Byte => {\n+            let mut chars = literal_text.chars();\n+            let result = unescape_char_or_byte(&mut chars, mode);\n+            // The Chars iterator moved forward.\n+            callback(0..(literal_text.len() - chars.as_str().len()), result);\n+        }\n+        Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),\n+        // NOTE: Raw strings do not perform any explicit character escaping, here we\n+        // only translate CRLF to LF and produce errors on bare CR.\n+        Mode::RawStr | Mode::RawByteStr => {\n+            unescape_raw_str_or_byte_str(literal_text, mode, callback)\n+        }\n+    }\n+}\n+\n+/// Takes a contents of a byte, byte string or raw byte string (without quotes)\n+/// and produces a sequence of bytes or errors.\n+/// Values are returned through invoking of the provided callback.\n+pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)\n+where\n+    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n+{\n+    assert!(mode.is_bytes());\n+    unescape_literal(literal_text, mode, &mut |range, result| {\n+        callback(range, result.map(byte_from_char));\n+    })\n+}\n+\n /// Takes a contents of a char literal (without quotes), and returns an\n /// unescaped char or an error\n pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n@@ -130,13 +166,15 @@ pub enum Mode {\n     Str,\n     Byte,\n     ByteStr,\n+    RawStr,\n+    RawByteStr,\n }\n \n impl Mode {\n     pub fn in_single_quotes(self) -> bool {\n         match self {\n             Mode::Char | Mode::Byte => true,\n-            Mode::Str | Mode::ByteStr => false,\n+            Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,\n         }\n     }\n \n@@ -146,8 +184,8 @@ impl Mode {\n \n     pub fn is_bytes(self) -> bool {\n         match self {\n-            Mode::Byte | Mode::ByteStr => true,\n-            Mode::Char | Mode::Str => false,\n+            Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,\n+            Mode::Char | Mode::Str | Mode::RawStr => false,\n         }\n     }\n }\n@@ -345,7 +383,7 @@ where\n \n fn byte_from_char(c: char) -> u8 {\n     let res = c as u32;\n-    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::Byte(Str)\");\n+    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::ByteStr\");\n     res as u8\n }\n "}]}