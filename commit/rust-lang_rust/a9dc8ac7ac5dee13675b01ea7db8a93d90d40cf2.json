{"sha": "a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGM4YWM3YWM1ZGVlMTM2NzViMDFlYTdkYjhhOTNkOTBkNDBjZjI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-29T20:53:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-29T20:53:29Z"}, "message": "Rollup merge of #40780 - aidanhs:aphs-cache-git-modules, r=alexcrichton\n\nAttempt to cache git modules\n\nPartial resolution of #40772, appveyor remains to be done once travis looks like it's working ok.\n\nThe approach in this PR is based on the `--reference` flag to `git-clone`/`git-submodule --update` and is a compromise based on the current limitations of the tools we're using.\n\nThe ideal would be:\n1. have a cached pristine copy of rust-lang/rust master in `$HOME/rustsrc` with all submodules initialised\n2. clone the PR branch with `git clone --recurse-submodules --reference $HOME/rustsrc git@github.com:rust-lang/rust.git`\n\nThis would (in the nonexistent ideal world) use the pristine copy as an object cache for the top level repo and all submodules, transferring over the network only the changes on the branch. Unfortunately, a) there is no way to manually control the initial clone with travis and b) even if there was, cloned submodules don't use the submodules of the reference as an object cache. So the steps we end up with are:\n\n1. have a cached pristine copy of rust-lang/rust master in `$HOME/rustsrc` with all submodules initialised\n2. have a cloned PR branch\n3. extract the path of each submodule, and explicitly `git submodule update --init --reference $HOME/rustsrc/$module $module` (i.e. point directly to the location of the pristine submodule repo) for each one\n\nI've also taken some care to make this forward compatible, both for adding and removing submodules.\n\nr? @alexcrichton", "tree": {"sha": "f76cb929c8dd1e4da27b14656a56b4e0a99c330f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f76cb929c8dd1e4da27b14656a56b4e0a99c330f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "html_url": "https://github.com/rust-lang/rust/commit/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cec5d4bf626f151a779323e16d62fe60117086", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cec5d4bf626f151a779323e16d62fe60117086", "html_url": "https://github.com/rust-lang/rust/commit/e1cec5d4bf626f151a779323e16d62fe60117086"}, {"sha": "96e174febdd9e0f3624b59e8411332b3e46eb97b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e174febdd9e0f3624b59e8411332b3e46eb97b", "html_url": "https://github.com/rust-lang/rust/commit/96e174febdd9e0f3624b59e8411332b3e46eb97b"}], "stats": {"total": 107, "additions": 97, "deletions": 10}, "files": [{"sha": "83e837e2d7690afd4e6458442b4d1545a6b937d4", "filename": ".travis.yml", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "patch": "@@ -133,13 +133,14 @@ before_script:\n script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build;\n-      elif [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/run.sh;\n+          echo skipping, not a full build\n       else\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/docker/run.sh $IMAGE;\n+          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+              stamp src/ci/run.sh;\n+          else\n+              stamp src/ci/docker/run.sh $IMAGE;\n+          fi\n       fi\n \n after_success:\n@@ -169,20 +170,29 @@ after_failure:\n   - dmesg | grep -i kill\n \n # Save tagged docker images we created and load them if they're available\n+# Travis saves caches whether the build failed or not, nuke rustsrc if\n+# the failure was while updating it (as it may be in an bad state)\n+# https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n+  - if [ ! -f $HOME/rustsrc/cache_valid1 ]; then\n+        echo \"WARNING rustsrc cache was invalid when saving\";\n+        rm -rf $HOME/rustsrc && mkdir $HOME/rustsrc;\n+    fi\n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false\n \n cache:\n   directories:\n     - $HOME/docker\n+    - $HOME/rustsrc\n \n before_deploy:\n   - mkdir -p deploy/$TRAVIS_COMMIT"}, {"sha": "fa599a00c4de349144f9acb15252afd477fdb533", "filename": "appveyor.yml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "patch": "@@ -141,7 +141,8 @@ install:\n   - set SCCACHE_ERROR_LOG=%CD%/sccache.log\n \n test_script:\n-  - appveyor-retry sh -c 'git submodule deinit -f . && git submodule update --init'\n+  - mkdir C:\\cache\\rustsrc\n+  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n@@ -150,6 +151,7 @@ on_failure:\n   - cat %CD%/sccache.log\n \n cache:\n+  - C:\\cache\\rustsrc\n   - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\""}, {"sha": "71a4bfae3caf9424b930bf81aeba9a26b15e1a7e", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "patch": "@@ -57,6 +57,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\\n   --rm \\\n   rust-ci \\"}, {"sha": "4e22907d9794c733251fa1ad0a79679b47b14f57", "filename": "src/ci/init_repo.sh", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "patch": "@@ -0,0 +1,71 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n+\n+set -o xtrace\n+\n+ci_dir=$(cd $(dirname $0) && pwd)\n+. \"$ci_dir/shared.sh\"\n+\n+REPO_DIR=\"$1\"\n+CACHE_DIR=\"$2\"\n+\n+cache_src_dir=\"$CACHE_DIR/src\"\n+# If the layout of the cache directory changes, bump the number here\n+# (and anywhere else this file is referenced) so the cache is wiped\n+cache_valid_file=\"$CACHE_DIR/cache_valid1\"\n+\n+if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n+    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n+    exit 1\n+fi\n+cd $REPO_DIR\n+if [ ! -d \"$CACHE_DIR\" ]; then\n+    echo \"Error: $CACHE_DIR does not exist or is not an absolute path\"\n+    exit 1\n+fi\n+\n+# Wipe the cache if it's not valid, or mark it as invalid while we update it\n+if [ ! -f \"$cache_valid_file\" ]; then\n+    rm -rf \"$CACHE_DIR\" && mkdir \"$CACHE_DIR\"\n+else\n+    rm \"$cache_valid_file\"\n+fi\n+\n+# Update the cache (a pristine copy of the rust source master)\n+if [ ! -d \"$cache_src_dir/.git\" ]; then\n+    retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n+        git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n+fi\n+retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+retry sh -c \"cd $cache_src_dir && \\\n+    git submodule deinit -f . && git submodule sync && git submodule update --init\"\n+\n+# Cache was updated without errors, mark it as valid\n+touch \"$cache_valid_file\"\n+\n+# Update the submodules of the repo we're in, using the pristine repo as\n+# a cache for any object files\n+# No, `git submodule foreach` won't work:\n+# http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+for module in $modules; do\n+    if [ ! -d \"$cache_src_dir/$module\" ]; then\n+        echo \"WARNING: $module not found in pristine repo\"\n+        retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\"\n+        continue\n+    fi\n+    retry sh -c \"git submodule deinit -f $module && \\\n+        git submodule update --init --reference $cache_src_dir/$module $module\"\n+done"}, {"sha": "f2e13fc73ae4778930fcd635a8c85f21a9e91d7a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/bin/false\n # Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -9,13 +9,16 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# This file is intended to be sourced with `. shared.sh` or\n+# `source shared.sh`, hence the invalid shebang and not being\n+# marked as an executable file in git.\n+\n # See http://unix.stackexchange.com/questions/82598\n function retry {\n+  echo \"Attempting with retry:\" \"$@\"\n   local n=1\n   local max=5\n-  local delay=15\n   while true; do\n-    echo \"Attempting:\" \"$@\"\n     \"$@\" && break || {\n       if [[ $n -lt $max ]]; then\n         ((n++))"}]}