{"sha": "5d8af38329a2f3cf93f392239252664fd7d25a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGFmMzgzMjlhMmYzY2Y5M2YzOTIyMzkyNTI2NjRmZDdkMjVhNjk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-09T14:37:28Z"}, "committer": {"name": "Dan Aloni", "email": "dan@kernelim.com", "date": "2019-10-09T15:07:22Z"}, "message": "resolve: Keep field spans for diagnostics", "tree": {"sha": "df9fb31a0bce58c3307ec14a02de553367dce013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df9fb31a0bce58c3307ec14a02de553367dce013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8af38329a2f3cf93f392239252664fd7d25a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8af38329a2f3cf93f392239252664fd7d25a69", "html_url": "https://github.com/rust-lang/rust/commit/5d8af38329a2f3cf93f392239252664fd7d25a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8af38329a2f3cf93f392239252664fd7d25a69/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "147c0472ebc82db8cdf99e9dc233d79f12220667", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5d8af38329a2f3cf93f392239252664fd7d25a69", "patch": "@@ -33,6 +33,7 @@ use syntax::source_map;\n use syntax::edition::Edition;\n use syntax::parse::source_file_to_stream;\n use syntax::parse::parser::emit_unclosed_delims;\n+use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, FileName};\n use rustc_index::bit_set::BitSet;\n@@ -420,8 +421,8 @@ impl cstore::CStore {\n         self.get_crate_data(cnum).root.edition\n     }\n \n-    pub fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name> {\n-        self.get_crate_data(def.krate).get_struct_field_names(def.index)\n+    pub fn struct_field_names_untracked(&self, def: DefId, sess: &Session) -> Vec<Spanned<Symbol>> {\n+        self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n     pub fn ctor_kind_untracked(&self, def: DefId) -> def::CtorKind {"}, {"sha": "74715278c829aab132daf87f1066a91846767399", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5d8af38329a2f3cf93f392239252664fd7d25a69", "patch": "@@ -29,7 +29,7 @@ use std::u32;\n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n-use syntax::source_map;\n+use syntax::source_map::{self, respan, Spanned};\n use syntax::symbol::{Symbol, sym};\n use syntax::ext::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, symbol::{InternedString}};\n@@ -1021,11 +1021,11 @@ impl<'a, 'tcx> CrateMetadata {\n         Lrc::from(self.get_attributes(&item, sess))\n     }\n \n-    pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> {\n+    pub fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<ast::Name>> {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| self.item_name(index))\n+            .map(|index| respan(self.get_span(index, sess), self.item_name(index)))\n             .collect()\n     }\n "}, {"sha": "030f9b97eb8b975a575757a214fb63aa2a1d8328", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5d8af38329a2f3cf93f392239252664fd7d25a69", "patch": "@@ -38,6 +38,7 @@ use syntax::ext::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::{span_err, struct_span_err};\n+use syntax::source_map::{respan, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n \n@@ -301,7 +302,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Name>) {\n+    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Name>>) {\n         if !field_names.is_empty() {\n             self.r.field_names.insert(def_id, field_names);\n         }\n@@ -752,12 +753,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }\n \n                 // Record field names for error reporting.\n-                let field_names = struct_def.fields().iter().filter_map(|field| {\n+                let field_names = struct_def.fields().iter().map(|field| {\n                     let field_vis = self.resolve_visibility(&field.vis);\n                     if ctor_vis.is_at_least(field_vis, &*self.r) {\n                         ctor_vis = field_vis;\n                     }\n-                    field.ident.map(|ident| ident.name)\n+                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n                 }).collect();\n                 let item_def_id = self.r.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n@@ -779,9 +780,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n-                let field_names = vdata.fields().iter().filter_map(|field| {\n+                let field_names = vdata.fields().iter().map(|field| {\n                     self.resolve_visibility(&field.vis);\n-                    field.ident.map(|ident| ident.name)\n+                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n                 }).collect();\n                 let item_def_id = self.r.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n@@ -895,7 +896,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         match res {\n             Res::Def(DefKind::Struct, def_id) | Res::Def(DefKind::Union, def_id) => {\n-                let field_names = self.r.cstore.struct_field_names_untracked(def_id);\n+                let field_names =\n+                    self.r.cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Res::Def(DefKind::Method, def_id) => {"}, {"sha": "1e6c5b46b68d5f0997be5e681af09a052aab38b3", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=5d8af38329a2f3cf93f392239252664fd7d25a69", "patch": "@@ -497,7 +497,8 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                         Res::Def(DefKind::Struct, did) | Res::Def(DefKind::Union, did)\n                                 if resolution.unresolved_segments() == 0 => {\n                             if let Some(field_names) = self.r.field_names.get(&did) {\n-                                if field_names.iter().any(|&field_name| ident.name == field_name) {\n+                                if field_names.iter()\n+                                        .any(|&field_name| ident.name == field_name.node) {\n                                     return Some(AssocSuggestion::Field);\n                                 }\n                             }"}, {"sha": "e625cf1f48841bae79b7d0c1024faa9ca699a3aa", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8af38329a2f3cf93f392239252664fd7d25a69/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5d8af38329a2f3cf93f392239252664fd7d25a69", "patch": "@@ -47,6 +47,7 @@ use syntax::attr;\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n use syntax::{struct_span_err, unwrap_or};\n+use syntax::source_map::Spanned;\n \n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};\n@@ -840,7 +841,7 @@ pub struct Resolver<'a> {\n \n     /// Names of fields of an item `DefId` accessible with dot syntax.\n     /// Used for hints during error reporting.\n-    field_names: FxHashMap<DefId, Vec<Name>>,\n+    field_names: FxHashMap<DefId, Vec<Spanned<Name>>>,\n \n     /// All imports known to succeed or fail.\n     determined_imports: Vec<&'a ImportDirective<'a>>,"}]}