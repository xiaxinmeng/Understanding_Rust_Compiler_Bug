{"sha": "cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGRkMjlmNTQ3YWU5NmQ2YjZlYjc2NDQxZjE2NmQ3YjNmNzM0Yjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T17:27:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T07:16:58Z"}, "message": "kill xargo dir and update docs", "tree": {"sha": "04f5e7cd673a35f4243e0385e553a3b8e1739d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f5e7cd673a35f4243e0385e553a3b8e1739d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "html_url": "https://github.com/rust-lang/rust/commit/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ac7ec1b1a7d07a1806d42e0f350580d537c121", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ac7ec1b1a7d07a1806d42e0f350580d537c121", "html_url": "https://github.com/rust-lang/rust/commit/16ac7ec1b1a7d07a1806d42e0f350580d537c121"}], "stats": {"total": 103, "additions": 26, "deletions": 77}, "files": [{"sha": "5dced653bb007cb3f66a08fe68a3681fe9e52e50", "filename": "README.md", "status": "modified", "additions": 23, "deletions": 55, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "patch": "@@ -42,7 +42,7 @@ in this directory.\n \n [rustup]: https://www.rustup.rs\n \n-## Running Miri\n+## Running Miri on tiny examples\n \n ```sh\n cargo +nightly run -- -Zmiri-disable-validation tests/run-pass/vecs.rs # Or whatever test you like.\n@@ -51,74 +51,42 @@ cargo +nightly run -- -Zmiri-disable-validation tests/run-pass/vecs.rs # Or what\n We have to disable validation because that can lead to errors when libstd is not\n compiled the right way.\n \n-## Running Miri with full libstd\n-\n-Per default libstd does not contain the MIR of non-polymorphic functions, and\n-also does not contain some extra MIR statements that miri needs for validation.\n-When Miri hits a call to such a function, execution terminates, and even when\n-the MIR is present, validation can fail.  To fix this, it is possible to compile\n-libstd with full MIR:\n-\n-```sh\n-rustup component add --toolchain nightly rust-src\n-cargo +nightly install xargo\n-rustup run nightly xargo/build.sh\n-```\n-\n-Now you can run Miri against the libstd compiled by xargo:\n-\n-```sh\n-MIRI_SYSROOT=~/.xargo/HOST cargo +nightly run tests/run-pass-fullmir/hashmap.rs\n-```\n-\n-Notice that you will have to re-run the last step of the preparations above\n-(`xargo/build.sh`) when your toolchain changes (e.g., when you update the\n-nightly).\n-\n ## Running Miri on your own project('s test suite)\n \n-Install Miri as a cargo subcommand with `cargo +nightly install --all-features\n---path .`.  Be aware that if you used `rustup override set` to fix a particular\n-Rust version for the miri directory, that will *not* apply to your own project\n-directory!  You have to use a consistent Rust version for building miri and your\n-project for this to work, so remember to either always specify the nightly\n-version manually, overriding it in your project directory as well, or use\n-`rustup default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally\n-make `nightly` the default toolchain.\n-\n-We assume that you have prepared a MIR-enabled libstd as described above.  Now\n-compile your project and its dependencies against that libstd:\n-\n-1. Run `cargo clean` to eliminate any cached dependencies that were built against\n-the non-MIR `libstd`.\n-2. To run all tests in your project through, Miri, use\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test`. **NOTE**: This is\n-currently broken, see the discussion in\n-[#479](https://github.com/solson/miri/issues/479).\n-3. If you have a binary project, you can run it through Miri using\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri`.\n+Install Miri as a cargo subcommand with `cargo +nightly install --path .`.  Be\n+aware that if you used `rustup override set` to fix a particular Rust version\n+for the miri directory, that will *not* apply to your own project directory!\n+You have to use a consistent Rust version for building miri and your project for\n+this to work, so remember to either always specify the nightly version manually,\n+overriding it in your project directory as well, or use `rustup default nightly`\n+(or `rustup default nightly-YYYY-MM-DD`) to globally make `nightly` the default\n+toolchain.\n+\n+1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n+   dependencies to be compiled the right way, that would not happen if they have\n+   previously already been compiled.\n+2. To run all tests in your project through Miri, use `cargo +nightly miri test`.\n+   **NOTE**: This is currently broken, see the discussion in\n+   [#479](https://github.com/solson/miri/issues/479).\n+3. If you have a binary project, you can run it through Miri using `cargo\n+   +nightly miri run`.\n \n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler\n errors.\n \n-#### \"constant evaluation error: no mir for `<function>`\"\n-\n-You may have forgotten to set `MIRI_SYSROOT` when calling `cargo miri`, and\n-your program called into `std` or `core`. Be sure to set `MIRI_SYSROOT=~/.xargo/HOST`.\n-\n #### \"found possibly newer version of crate `std` which `<dependency>` depends on\"\n \n-Your build directory may contain artifacts from an earlier build that did/did not\n-have `MIRI_SYSROOT` set. Run `cargo clean` before switching from non-Miri to Miri\n-builds and vice-versa.\n+Your build directory may contain artifacts from an earlier build that have/have\n+not been built for Miri. Run `cargo clean` before switching from non-Miri to\n+Miri builds and vice-versa.\n \n #### \"found crate `std` compiled by an incompatible version of rustc\"\n \n You may be running `cargo miri` with a different compiler version than the one\n-used to build the MIR-enabled `std`. Be sure to consistently use the same toolchain,\n-which should be the toolchain specified in the `rust-version` file.\n+used to build the custom libstd that Miri uses, and Miri failed to detect that.\n+Try deleting `~/.miri`.\n \n ## Miri `-Z` flags\n "}, {"sha": "42745535e0ef4f01589767293d01343fa4176257", "filename": "cargo-miri-test/run-test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/cargo-miri-test%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/cargo-miri-test%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Frun-test.py?ref=cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "patch": "@@ -8,10 +8,10 @@\n import sys, subprocess\n \n def test_cargo_miri():\n-    print(\"==> Testing `cargo miri` <==\")\n+    print(\"==> Testing `cargo miri run` <==\")\n     ## Call `cargo miri`, capture all output\n     p = subprocess.Popen(\n-        [\"cargo\", \"miri\", \"-q\"],\n+        [\"cargo\", \"miri\", \"run\", \"-q\"],\n         stdout=subprocess.PIPE,\n         stderr=subprocess.PIPE\n     )"}, {"sha": "5b6ff084024d91cb57008c64227a721c38e83376", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd29f547ae96d6b6eb76441f166d7b3f734b7/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=cc4dd29f547ae96d6b6eb76441f166d7b3f734b7", "patch": "@@ -174,7 +174,7 @@ path = \"lib.rs\"\n         \"#).unwrap();\n     File::create(dir.join(\"lib.rs\")).unwrap();\n     // Run xargo\n-    if !Command::new(\"xargo\").arg(\"build\")\n+    if !Command::new(\"xargo\").arg(\"build\").arg(\"-q\")\n         .current_dir(&dir)\n         .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n         .env(\"XARGO_HOME\", dir.to_str().unwrap())"}, {"sha": "c85820b708b67fa78874fbfee622efe770ea2abd", "filename": "xargo/Cargo.lock", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FCargo.lock?ref=16ac7ec1b1a7d07a1806d42e0f350580d537c121", "patch": "@@ -1,4 +0,0 @@\n-[[package]]\n-name = \"miri-xargo\"\n-version = \"0.0.0\"\n-"}, {"sha": "9129c105b112bb1b3dd597b118e2ac13466b505b", "filename": "xargo/Cargo.toml", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FCargo.toml?ref=16ac7ec1b1a7d07a1806d42e0f350580d537c121", "patch": "@@ -1,6 +0,0 @@\n-[package]\n-name = \"miri-xargo\"\n-description = \"A dummy project for building libstd with xargo.\"\n-version = \"0.0.0\"\n-\n-[dependencies]"}, {"sha": "e49b0dbe743b4fb726a1533ffa6cd2a30e76ba1b", "filename": "xargo/Xargo.toml", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FXargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2FXargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FXargo.toml?ref=16ac7ec1b1a7d07a1806d42e0f350580d537c121", "patch": "@@ -1,5 +0,0 @@\n-[dependencies.std]\n-features = [\"panic_unwind\", \"backtrace\"]\n-\n-[dependencies.test]\n-stage = 1"}, {"sha": "25c56d31ab56a4032e22e773d153064700091643", "filename": "xargo/build.sh", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2Fbuild.sh?ref=16ac7ec1b1a7d07a1806d42e0f350580d537c121", "patch": "@@ -1,4 +0,0 @@\n-#!/bin/sh\n-cd \"$(dirname \"$0\")\"\n-# The flags here should be kept in sync with `add_miri_default_args` in `src/lib.rs`.\n-RUSTFLAGS='-Zalways-encode-mir -Zmir-emit-retag -Zmir-opt-level=0' xargo build"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "xargo/src/lib.rs", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ac7ec1b1a7d07a1806d42e0f350580d537c121/xargo%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2Fsrc%2Flib.rs?ref=16ac7ec1b1a7d07a1806d42e0f350580d537c121"}]}