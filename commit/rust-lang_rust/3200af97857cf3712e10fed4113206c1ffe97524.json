{"sha": "3200af97857cf3712e10fed4113206c1ffe97524", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDBhZjk3ODU3Y2YzNzEyZTEwZmVkNDExMzIwNmMxZmZlOTc1MjQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-06T05:17:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-06T05:17:53Z"}, "message": "Do not consider macro-origin await as chain item (#3671)", "tree": {"sha": "089c6e577b237fde4b4a473ce31a4bc37c9c1726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089c6e577b237fde4b4a473ce31a4bc37c9c1726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3200af97857cf3712e10fed4113206c1ffe97524", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIC8BCRBK7hj4Ov3rIwAAdHIIAD4oaRANOcSSfn/PlMgzyfV0\n1c5zC9TLA/xDOjn5KHh0qcyIl1YX0xLo6fw5uxlh8BJay58wu6NuUp1/0cRWbr18\niH+ckiOSYBCEySaq4dqgEPoVQgS8MPLgGgvtiJIYYJ3teGssZa7K07F8nmHYYxyI\nid4WIh39W2Iivn8SN/0Q0erKTQnI1cOBGLGWugnPdQ1oNPWR2BiJ1c/x26teCcHX\n0r1Vjxi1o4ON3m7iJSyyBU4XHkqd9Dv7JiCcvS6ytqV4EBbk6mWBrz9HoFVR2nZD\nH0Sdx436S83CSnRK5tEfS8aO/09pC41wTjxV6TAqAOCLJ2XalzbhtVF4KJrDxWo=\n=EwAI\n-----END PGP SIGNATURE-----\n", "payload": "tree 089c6e577b237fde4b4a473ce31a4bc37c9c1726\nparent ff49b806283050c9e095e0352560256522356c3b\nauthor Seiichi Uchida <seuchida@gmail.com> 1562390273 +0900\ncommitter GitHub <noreply@github.com> 1562390273 +0900\n\nDo not consider macro-origin await as chain item (#3671)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3200af97857cf3712e10fed4113206c1ffe97524", "html_url": "https://github.com/rust-lang/rust/commit/3200af97857cf3712e10fed4113206c1ffe97524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3200af97857cf3712e10fed4113206c1ffe97524/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff49b806283050c9e095e0352560256522356c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff49b806283050c9e095e0352560256522356c3b", "html_url": "https://github.com/rust-lang/rust/commit/ff49b806283050c9e095e0352560256522356c3b"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "1ca0ac582b7c3afc45ab99969a2b696e0eb6db6e", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3200af97857cf3712e10fed4113206c1ffe97524/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200af97857cf3712e10fed4113206c1ffe97524/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=3200af97857cf3712e10fed4113206c1ffe97524", "patch": "@@ -168,7 +168,7 @@ impl ChainItemKind {\n                 let span = mk_sp(nested.span.hi(), field.span.hi());\n                 (kind, span)\n             }\n-            ast::ExprKind::Await(_, ref nested) => {\n+            ast::ExprKind::Await(ast::AwaitOrigin::FieldLike, ref nested) => {\n                 let span = mk_sp(nested.span.hi(), expr.span.hi());\n                 (ChainItemKind::Await, span)\n             }\n@@ -396,7 +396,9 @@ impl Chain {\n             }\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n-            | ast::ExprKind::Await(_, ref subexpr) => Some(Self::convert_try(subexpr, context)),\n+            | ast::ExprKind::Await(ast::AwaitOrigin::FieldLike, ref subexpr) => {\n+                Some(Self::convert_try(subexpr, context))\n+            }\n             _ => None,\n         }\n     }"}, {"sha": "b4dc9fac5b2eb5a8d6e837a07fc55076c4e127b1", "filename": "tests/source/async_fn.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3200af97857cf3712e10fed4113206c1ffe97524/tests%2Fsource%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200af97857cf3712e10fed4113206c1ffe97524/tests%2Fsource%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fasync_fn.rs?ref=3200af97857cf3712e10fed4113206c1ffe97524", "patch": "@@ -19,3 +19,8 @@ async unsafe fn rust() {\n         Ok(())\n     }\n }\n+\n+async fn await_macro() {\n+    await ! (\n+        something)?;\n+}"}, {"sha": "82be8c76785ebd5de1a28d319327f389593ae1a1", "filename": "tests/target/async_fn.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3200af97857cf3712e10fed4113206c1ffe97524/tests%2Ftarget%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200af97857cf3712e10fed4113206c1ffe97524/tests%2Ftarget%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fasync_fn.rs?ref=3200af97857cf3712e10fed4113206c1ffe97524", "patch": "@@ -18,3 +18,7 @@ async unsafe fn rust() {\n         Ok(())\n     }\n }\n+\n+async fn await_macro() {\n+    await!(something)?;\n+}"}]}