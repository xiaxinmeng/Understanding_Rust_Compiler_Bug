{"sha": "0bc9e623747b462ab11a4660a19a50bc38313875", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzllNjIzNzQ3YjQ2MmFiMTFhNDY2MGExOWE1MGJjMzgzMTM4NzU=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T03:00:47Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T03:00:47Z"}, "message": "Completion now replaces whole fn/const/type def with snippet.", "tree": {"sha": "66c1ea4694f37cf4d2dbe74f8ad2af1ab28019e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c1ea4694f37cf4d2dbe74f8ad2af1ab28019e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc9e623747b462ab11a4660a19a50bc38313875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc9e623747b462ab11a4660a19a50bc38313875", "html_url": "https://github.com/rust-lang/rust/commit/0bc9e623747b462ab11a4660a19a50bc38313875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc9e623747b462ab11a4660a19a50bc38313875/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "html_url": "https://github.com/rust-lang/rust/commit/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "81899308b3fbfe5c18d8392ff20c560a7b10bf0d", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0bc9e623747b462ab11a4660a19a50bc38313875/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc9e623747b462ab11a4660a19a50bc38313875/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=0bc9e623747b462ab11a4660a19a50bc38313875", "patch": "@@ -10,10 +10,11 @@ use crate::{\n use hir::{self, Docs, HasSource};\n use ra_syntax::{\n     ast::{self, edit},\n-    AstNode, SyntaxKind, TextRange,\n+    AstNode, SyntaxKind, SyntaxNode, TextRange,\n };\n \n use ra_assists::utils::get_missing_impl_items;\n+use ra_text_edit::TextEdit;\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     let trigger = ctx.token.ancestors().find(|p| match p.kind() {\n@@ -37,7 +38,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                         _ => None,\n                     })\n                 {\n-                    add_function_impl(acc, ctx, &missing_fn);\n+                    add_function_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n@@ -49,7 +50,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                         _ => None,\n                     })\n                 {\n-                    add_type_alias_impl(acc, ctx, &missing_fn);\n+                    add_type_alias_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n@@ -61,7 +62,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                         _ => None,\n                     })\n                 {\n-                    add_const_impl(acc, ctx, &missing_fn);\n+                    add_const_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n@@ -70,7 +71,12 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n-fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext, func: &hir::Function) {\n+fn add_function_impl(\n+    fn_def_node: &SyntaxNode,\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    func: &hir::Function,\n+) {\n     let display = FunctionSignature::from_hir(ctx.db, func.clone());\n \n     let func_name = func.name(ctx.db);\n@@ -93,28 +99,37 @@ fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext, func: &hir:\n \n     let snippet = format!(\"{} {{}}\", display);\n \n-    builder.insert_text(snippet).kind(completion_kind).add_to(acc);\n+    builder\n+        .text_edit(TextEdit::replace(fn_def_node.text_range(), snippet))\n+        .kind(completion_kind)\n+        .add_to(acc);\n }\n \n fn add_type_alias_impl(\n+    type_def_node: &SyntaxNode,\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     type_alias: &hir::TypeAlias,\n ) {\n     let snippet = format!(\"type {} = \", type_alias.name(ctx.db).to_string());\n \n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n-        .insert_text(snippet)\n+        .text_edit(TextEdit::replace(type_def_node.text_range(), snippet))\n         .kind(CompletionItemKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db))\n         .add_to(acc);\n }\n \n-fn add_const_impl(acc: &mut Completions, ctx: &CompletionContext, const_: &hir::Const) {\n+fn add_const_impl(\n+    const_def_node: &SyntaxNode,\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    const_: &hir::Const,\n+) {\n     let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n \n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n-        .insert_text(snippet)\n+        .text_edit(TextEdit::replace(const_def_node.text_range(), snippet))\n         .kind(CompletionItemKind::Const)\n         .set_documentation(const_.docs(ctx.db))\n         .add_to(acc);\n@@ -172,7 +187,7 @@ mod tests {\n             CompletionItem {\n                 label: \"fn foo()\",\n                 source_range: [140; 140),\n-                delete: [140; 140),\n+                delete: [138; 140),\n                 insert: \"fn foo() {}\",\n                 kind: Function,\n             },\n@@ -203,7 +218,7 @@ mod tests {\n             CompletionItem {\n                 label: \"fn bar()\",\n                 source_range: [195; 195),\n-                delete: [195; 195),\n+                delete: [193; 195),\n                 insert: \"fn bar() {}\",\n                 kind: Function,\n             },\n@@ -231,7 +246,7 @@ mod tests {\n             CompletionItem {\n                 label: \"fn foo()\",\n                 source_range: [143; 143),\n-                delete: [143; 143),\n+                delete: [141; 143),\n                 insert: \"fn foo<T>() {}\",\n                 kind: Function,\n             },\n@@ -259,7 +274,7 @@ mod tests {\n             CompletionItem {\n                 label: \"fn foo()\",\n                 source_range: [165; 165),\n-                delete: [165; 165),\n+                delete: [163; 165),\n                 insert: \"fn foo<T>()\\nwhere T: Into<String> {}\",\n                 kind: Function,\n             },\n@@ -285,7 +300,7 @@ mod tests {\n             CompletionItem {\n                 label: \"type SomeType = \",\n                 source_range: [123; 123),\n-                delete: [123; 123),\n+                delete: [119; 123),\n                 insert: \"type SomeType = \",\n                 kind: TypeAlias,\n             },\n@@ -311,7 +326,7 @@ mod tests {\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n                 source_range: [133; 134),\n-                delete: [133; 134),\n+                delete: [127; 134),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },\n@@ -337,7 +352,7 @@ mod tests {\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n                 source_range: [138; 139),\n-                delete: [138; 139),\n+                delete: [132; 139),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },"}]}