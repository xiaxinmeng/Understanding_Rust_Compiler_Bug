{"sha": "fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "node_id": "C_kwDOAAsO6NoAKGZjNmNkYTg2MDM0NWI3MzRmN2M1ZTM5Yjc4MDFlM2ZhNGNiYWFiYTA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-23T17:12:31Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-17T07:48:19Z"}, "message": "`rustc_data_structures`: remove `ref` patterns and other artifacts of the past", "tree": {"sha": "62629c5e7bab716877000ee70450c7ea5f13ab9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62629c5e7bab716877000ee70450c7ea5f13ab9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "html_url": "https://github.com/rust-lang/rust/commit/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dca58e249703a9e6558f5683b904fcb71d9d879", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dca58e249703a9e6558f5683b904fcb71d9d879", "html_url": "https://github.com/rust-lang/rust/commit/3dca58e249703a9e6558f5683b904fcb71d9d879"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "dc1ce1747bfa0dc1d6def1306db79460d3e907f9", "filename": "compiler/rustc_data_structures/src/graph/implementation/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Ftests.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -70,8 +70,8 @@ fn test_adjacent_edges<N: PartialEq + Debug, E: PartialEq + Debug>(\n             \"counter={:?} expected={:?} edge_index={:?} edge={:?}\",\n             counter, expected_incoming[counter], edge_index, edge\n         );\n-        match expected_incoming[counter] {\n-            (ref e, ref n) => {\n+        match &expected_incoming[counter] {\n+            (e, n) => {\n                 assert!(e == &edge.data);\n                 assert!(n == graph.node_data(edge.source()));\n                 assert!(start_index == edge.target);\n@@ -88,8 +88,8 @@ fn test_adjacent_edges<N: PartialEq + Debug, E: PartialEq + Debug>(\n             \"counter={:?} expected={:?} edge_index={:?} edge={:?}\",\n             counter, expected_outgoing[counter], edge_index, edge\n         );\n-        match expected_outgoing[counter] {\n-            (ref e, ref n) => {\n+        match &expected_outgoing[counter] {\n+            (e, n) => {\n                 assert!(e == &edge.data);\n                 assert!(start_index == edge.source);\n                 assert!(n == graph.node_data(edge.target));"}, {"sha": "9409057d4847e419b8960e0a389d6341f7a6d192", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -1,6 +1,5 @@\n use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n-use std::cmp::Ordering;\n use std::fmt::Debug;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n@@ -171,7 +170,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n     where\n         F: Fn(&mut K),\n     {\n-        self.data.iter_mut().map(|&mut (ref mut k, _)| k).for_each(f);\n+        self.data.iter_mut().map(|(k, _)| k).for_each(f);\n     }\n \n     /// Inserts a presorted range of elements into the map. If the range can be\n@@ -232,22 +231,22 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let start = match range.start_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n             Bound::Unbounded => 0,\n         };\n \n         let end = match range.end_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n             Bound::Unbounded => self.data.len(),\n@@ -302,7 +301,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {\n         let mut data: Vec<(K, V)> = iter.into_iter().collect();\n \n         data.sort_unstable_by(|(k1, _), (k2, _)| k1.cmp(k2));\n-        data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);\n+        data.dedup_by(|(k1, _), (k2, _)| k1 == k2);\n \n         SortedMap { data }\n     }"}, {"sha": "814e7c7fb9ba6751aa9dbe368319bd5525df3c17", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -63,13 +63,13 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     /// Returns an iterator over the items in the map in insertion order.\n     #[inline]\n     pub fn iter(&self) -> impl '_ + DoubleEndedIterator<Item = (&K, &V)> {\n-        self.items.iter().map(|(ref k, ref v)| (k, v))\n+        self.items.iter().map(|(k, v)| (k, v))\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n     #[inline]\n     pub fn iter_enumerated(&self) -> impl '_ + DoubleEndedIterator<Item = (I, (&K, &V))> {\n-        self.items.iter_enumerated().map(|(i, (ref k, ref v))| (i, (k, v)))\n+        self.items.iter_enumerated().map(|(i, (k, v))| (i, (k, v)))\n     }\n \n     /// Returns the item in the map with the given index."}, {"sha": "3cc250862df42bb39b28688d564a929d400a7cc7", "filename": "compiler/rustc_data_structures/src/sorted_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -6,7 +6,7 @@ fn test_sorted_index_multi_map() {\n     let set: SortedIndexMultiMap<usize, _, _> = entries.iter().copied().collect();\n \n     // Insertion order is preserved.\n-    assert!(entries.iter().map(|(ref k, ref v)| (k, v)).eq(set.iter()));\n+    assert!(entries.iter().map(|(k, v)| (k, v)).eq(set.iter()));\n \n     // Indexing\n     for (i, expect) in entries.iter().enumerate() {"}, {"sha": "11a408f216a1465ca4335fa7879a342a82ff61ae", "filename": "compiler/rustc_data_structures/src/tiny_list.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -37,9 +37,9 @@ impl<T: PartialEq> TinyList<T> {\n \n     #[inline]\n     pub fn remove(&mut self, data: &T) -> bool {\n-        self.head = match self.head {\n-            Some(ref mut head) if head.data == *data => head.next.take().map(|x| *x),\n-            Some(ref mut head) => return head.remove_next(data),\n+        self.head = match &mut self.head {\n+            Some(head) if head.data == *data => head.next.take().map(|x| *x),\n+            Some(head) => return head.remove_next(data),\n             None => return false,\n         };\n         true\n@@ -48,7 +48,7 @@ impl<T: PartialEq> TinyList<T> {\n     #[inline]\n     pub fn contains(&self, data: &T) -> bool {\n         let mut elem = self.head.as_ref();\n-        while let Some(ref e) = elem {\n+        while let Some(e) = elem {\n             if &e.data == data {\n                 return true;\n             }\n@@ -65,15 +65,14 @@ struct Element<T> {\n }\n \n impl<T: PartialEq> Element<T> {\n-    fn remove_next(&mut self, data: &T) -> bool {\n-        let mut n = self;\n+    fn remove_next(mut self: &mut Self, data: &T) -> bool {\n         loop {\n-            match n.next {\n+            match self.next {\n                 Some(ref mut next) if next.data == *data => {\n-                    n.next = next.next.take();\n+                    self.next = next.next.take();\n                     return true;\n                 }\n-                Some(ref mut next) => n = next,\n+                Some(ref mut next) => self = next,\n                 None => return false,\n             }\n         }"}, {"sha": "4b95e62bef02b1391af37c41a4e9823bec5b3983", "filename": "compiler/rustc_data_structures/src/tiny_list/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6cda860345b734f7c5e39b7801e3fa4cbaaba0/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list%2Ftests.rs?ref=fc6cda860345b734f7c5e39b7801e3fa4cbaaba0", "patch": "@@ -6,7 +6,7 @@ use test::{black_box, Bencher};\n impl<T> TinyList<T> {\n     fn len(&self) -> usize {\n         let (mut elem, mut count) = (self.head.as_ref(), 0);\n-        while let Some(ref e) = elem {\n+        while let Some(e) = elem {\n             count += 1;\n             elem = e.next.as_deref();\n         }"}]}