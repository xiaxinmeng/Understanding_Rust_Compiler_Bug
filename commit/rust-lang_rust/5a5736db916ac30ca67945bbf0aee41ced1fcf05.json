{"sha": "5a5736db916ac30ca67945bbf0aee41ced1fcf05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTczNmRiOTE2YWMzMGNhNjc5NDViYmYwYWVlNDFjZWQxZmNmMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-14T15:28:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-14T15:28:05Z"}, "message": "Auto merge of #36472 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #36334, #36335, #36363, #36374, #36467\n- Failed merges:", "tree": {"sha": "d681ded3fcaea851b72f01b8e1d0b08bba9597bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d681ded3fcaea851b72f01b8e1d0b08bba9597bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5736db916ac30ca67945bbf0aee41ced1fcf05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5736db916ac30ca67945bbf0aee41ced1fcf05", "html_url": "https://github.com/rust-lang/rust/commit/5a5736db916ac30ca67945bbf0aee41ced1fcf05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5736db916ac30ca67945bbf0aee41ced1fcf05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b561a0944141a02a0cebe577c3c69e436abcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b561a0944141a02a0cebe577c3c69e436abcf4", "html_url": "https://github.com/rust-lang/rust/commit/97b561a0944141a02a0cebe577c3c69e436abcf4"}, {"sha": "e368cdd2d5fc2ceff4c4745600fda29dba9fd81f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e368cdd2d5fc2ceff4c4745600fda29dba9fd81f", "html_url": "https://github.com/rust-lang/rust/commit/e368cdd2d5fc2ceff4c4745600fda29dba9fd81f"}], "stats": {"total": 346, "additions": 235, "deletions": 111}, "files": [{"sha": "d07fb6b7c45bfb06a6beafa89f0f767499dee733", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -275,7 +275,7 @@ won\u2019t have its methods:\n [write]: ../std/io/trait.Write.html\n \n ```rust,ignore\n-let mut f = std::fs::File::open(\"foo.txt\").expect(\"Couldn\u2019t open foo.txt\");\n+let mut f = std::fs::File::create(\"foo.txt\").expect(\"Couldn\u2019t create foo.txt\");\n let buf = b\"whatever\"; // byte string literal. buf: &[u8; 8]\n let result = f.write(buf);\n # result.unwrap(); // ignore the error\n@@ -294,7 +294,7 @@ We need to `use` the `Write` trait first:\n ```rust,ignore\n use std::io::Write;\n \n-let mut f = std::fs::File::open(\"foo.txt\").expect(\"Couldn\u2019t open foo.txt\");\n+let mut f = std::fs::File::create(\"foo.txt\").expect(\"Couldn\u2019t create foo.txt\");\n let buf = b\"whatever\";\n let result = f.write(buf);\n # result.unwrap(); // ignore the error"}, {"sha": "3d579641b96583961f48466c346e1c23d355ca84", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -718,6 +718,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n     fn default() -> Weak<T> {\n         Weak::new()\n     }\n@@ -923,6 +924,7 @@ impl<T: ?Sized> fmt::Pointer for Arc<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Arc<T> {\n+    /// Creates a new `Arc<T>`, with the `Default` value for T.\n     fn default() -> Arc<T> {\n         Arc::new(Default::default())\n     }"}, {"sha": "bc9b6e805efc91ee5107229de22de8d01ec78148", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -290,6 +290,7 @@ impl<T: ?Sized> Box<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n+    /// Creates a `Box<T>`, with the `Default` value for T.\n     fn default() -> Box<T> {\n         box Default::default()\n     }"}, {"sha": "dadddbc2cb3e523af14c2d055f456cc8ddc8d34a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -870,6 +870,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n+    /// Creates a new `Weak<T>`.\n     fn default() -> Weak<T> {\n         Weak::new()\n     }"}, {"sha": "1fe921543bd4ed681f0ff359afd4f24c1e0273ca", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -263,6 +263,7 @@ impl<T: Clone> Clone for BinaryHeap<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BinaryHeap<T> {\n+    /// Creates an empty `BinaryHeap<T>`.\n     #[inline]\n     fn default() -> BinaryHeap<T> {\n         BinaryHeap::new()"}, {"sha": "700f88dc0f267688bb91e057616256fc84c00e1c", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -249,6 +249,7 @@ impl<'a, B: ?Sized> Default for Cow<'a, B>\n     where B: ToOwned,\n           <B as ToOwned>::Owned: Default\n {\n+    /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n     fn default() -> Cow<'a, B> {\n         Owned(<B as ToOwned>::Owned::default())\n     }"}, {"sha": "36cb5a1fd9f6d6150a6e6d262d60e933205b3cf1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -1667,6 +1667,7 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n }\n \n impl<K: Ord, V> Default for BTreeMap<K, V> {\n+    /// Creates an empty `BTreeMap<K, V>`.\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }"}, {"sha": "fc2a7f825474d607deaaab737ccb86aced888812", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -674,6 +674,7 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BTreeSet<T> {\n+    /// Makes an empty `BTreeSet<T>` with a reasonable choice of B.\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "690c4f4af35896df5b24cb5be112bfbf279b34e4", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -164,6 +164,7 @@ impl<T> LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for LinkedList<T> {\n+    /// Creates an empty `LinkedList<T>`.\n     #[inline]\n     fn default() -> Self {\n         Self::new()"}, {"sha": "773e94f1b414e140fac6a735ff157ef0e00e88b9", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -1567,6 +1567,7 @@ impl_eq! { Cow<'a, str>, String }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for String {\n+    /// Creates an empty `String`.\n     #[inline]\n     fn default() -> String {\n         String::new()"}, {"sha": "f8b4a92df2c5dca5dc25317e7fc6ac23d8a9fb8e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -1652,6 +1652,7 @@ impl<T> Drop for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Vec<T> {\n+    /// Creates an empty `Vec<T>`.\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}, {"sha": "2e561dabb479451bef0aae4621d8f8243180e219", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -84,6 +84,7 @@ impl<T> Drop for VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for VecDeque<T> {\n+    /// Creates an empty `VecDeque<T>`.\n     #[inline]\n     fn default() -> VecDeque<T> {\n         VecDeque::new()"}, {"sha": "51221f1b9b9e94a009b599e6d1d4399cf5b3e192", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -317,6 +317,7 @@ impl<T:Copy> Clone for Cell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default + Copy> Default for Cell<T> {\n+    /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n@@ -758,6 +759,7 @@ impl<T: Clone> Clone for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default> Default for RefCell<T> {\n+    /// Creates a `RefCell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())\n@@ -1139,6 +1141,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n \n #[stable(feature = \"unsafe_cell_default\", since = \"1.9.0\")]\n impl<T: Default> Default for UnsafeCell<T> {\n+    /// Creates an `UnsafeCell`, with the `Default` value for T.\n     fn default() -> UnsafeCell<T> {\n         UnsafeCell::new(Default::default())\n     }"}, {"sha": "69355c6c6cc0bcdf6be87c0ef9b33c1f239f6ba6", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -14,10 +14,14 @@\n //! assign them or pass them as arguments, the receiver will get a copy,\n //! leaving the original value in place. These types do not require\n //! allocation to copy and do not have finalizers (i.e. they do not\n-//! contain owned boxes or implement `Drop`), so the compiler considers\n+//! contain owned boxes or implement [`Drop`]), so the compiler considers\n //! them cheap and safe to copy. For other types copies must be made\n-//! explicitly, by convention implementing the `Clone` trait and calling\n-//! the `clone` method.\n+//! explicitly, by convention implementing the [`Clone`] trait and calling\n+//! the [`clone`][clone] method.\n+//!\n+//! [`Clone`]: trait.Clone.html\n+//! [clone]: trait.Clone.html#tymethod.clone\n+//! [`Drop`]: ../../std/ops/trait.Drop.html\n //!\n //! Basic usage example:\n //!\n@@ -46,22 +50,22 @@\n \n /// A common trait for the ability to explicitly duplicate an object.\n ///\n-/// Differs from `Copy` in that `Copy` is implicit and extremely inexpensive, while\n+/// Differs from [`Copy`] in that [`Copy`] is implicit and extremely inexpensive, while\n /// `Clone` is always explicit and may or may not be expensive. In order to enforce\n-/// these characteristics, Rust does not allow you to reimplement `Copy`, but you\n+/// these characteristics, Rust does not allow you to reimplement [`Copy`], but you\n /// may reimplement `Clone` and run arbitrary code.\n ///\n-/// Since `Clone` is more general than `Copy`, you can automatically make anything\n-/// `Copy` be `Clone` as well.\n+/// Since `Clone` is more general than [`Copy`], you can automatically make anything\n+/// [`Copy`] be `Clone` as well.\n ///\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n-/// implementation of `clone()` calls `clone()` on each field.\n+/// implementation of [`clone()`] calls [`clone()`] on each field.\n ///\n /// ## How can I implement `Clone`?\n ///\n-/// Types that are `Copy` should have a trivial implementation of `Clone`. More formally:\n+/// Types that are [`Copy`] should have a trivial implementation of `Clone`. More formally:\n /// if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`.\n /// Manual implementations should be careful to uphold this invariant; however, unsafe code\n /// must not rely on it to ensure memory safety.\n@@ -70,6 +74,9 @@\n /// library only implements `Clone` up until arrays of size 32. In this case, the implementation of\n /// `Clone` cannot be `derive`d, but can be implemented as:\n ///\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+/// [`clone()`]: trait.Clone.html#tymethod.clone\n+///\n /// ```\n /// #[derive(Copy)]\n /// struct Stats {"}, {"sha": "dc53683d6337cd9c2dec11676056c4e3da8f002c", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -333,6 +333,7 @@ impl<S: Sip> Clone for Hasher<S> {\n }\n \n impl<S: Sip> Default for Hasher<S> {\n+    /// Creates a `Hasher<S>` with the two initial keys set to 0.\n     #[inline]\n     fn default() -> Hasher<S> {\n         Hasher::new_with_keys(0, 0)"}, {"sha": "c22c9f0d1c717fbd4ed03d693d0cd27d7055d19c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -126,7 +126,7 @@ pub trait Unsize<T: ?Sized> {\n /// }\n /// ```\n ///\n-/// The `PointList` `struct` cannot implement `Copy`, because `Vec<T>` is not `Copy`. If we\n+/// The `PointList` `struct` cannot implement `Copy`, because [`Vec<T>`] is not `Copy`. If we\n /// attempt to derive a `Copy` implementation, we'll get an error:\n ///\n /// ```text\n@@ -136,10 +136,10 @@ pub trait Unsize<T: ?Sized> {\n /// ## When can my type _not_ be `Copy`?\n ///\n /// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n-/// mutable reference, and copying `String` would result in two attempts to free the same buffer.\n+/// mutable reference, and copying [`String`] would result in two attempts to free the same buffer.\n ///\n-/// Generalizing the latter case, any type implementing `Drop` can't be `Copy`, because it's\n-/// managing some resource besides its own `size_of::<T>()` bytes.\n+/// Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's\n+/// managing some resource besides its own [`size_of::<T>()`] bytes.\n ///\n /// ## What if I derive `Copy` on a type that can't?\n ///\n@@ -156,8 +156,7 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]` if all of its components implement `Copy` and the type\n-/// implements `Clone`. The implementation will copy the bytes of each field using `memcpy`.\n+/// This trait can be used with `#[derive]` if all of its components implement `Copy` and the type.\n ///\n /// ## How can I implement `Copy`?\n ///\n@@ -178,6 +177,11 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n /// bound on type parameters, which isn't always desired.\n+///\n+/// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n+/// [`String`]: ../../std/string/struct.String.html\n+/// [`Drop`]: ../../std/ops/trait.Drop.html\n+/// [`size_of::<T>()`]: ../../std/mem/fn.size_of.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {\n@@ -190,11 +194,11 @@ pub trait Copy : Clone {\n /// thread-safe. In other words, there is no possibility of data races\n /// when passing `&T` references between threads.\n ///\n-/// As one would expect, primitive types like `u8` and `f64` are all\n+/// As one would expect, primitive types like [`u8`] and [`f64`] are all\n /// `Sync`, and so are simple aggregate types containing them (like\n /// tuples, structs and enums). More instances of basic `Sync` types\n /// include \"immutable\" types like `&T` and those with simple\n-/// inherited mutability, such as `Box<T>`, `Vec<T>` and most other\n+/// inherited mutability, such as [`Box<T>`], [`Vec<T>`] and most other\n /// collection types. (Generic parameters need to be `Sync` for their\n /// container to be `Sync`.)\n ///\n@@ -206,27 +210,42 @@ pub trait Copy : Clone {\n /// race.\n ///\n /// Types that are not `Sync` are those that have \"interior\n-/// mutability\" in a non-thread-safe way, such as `Cell` and `RefCell`\n-/// in `std::cell`. These types allow for mutation of their contents\n+/// mutability\" in a non-thread-safe way, such as [`Cell`] and [`RefCell`]\n+/// in [`std::cell`]. These types allow for mutation of their contents\n /// even when in an immutable, aliasable slot, e.g. the contents of\n-/// `&Cell<T>` can be `.set`, and do not ensure data races are\n+/// [`&Cell<T>`][`Cell`] can be [`.set`], and do not ensure data races are\n /// impossible, hence they cannot be `Sync`. A higher level example\n /// of a non-`Sync` type is the reference counted pointer\n-/// `std::rc::Rc`, because any reference `&Rc<T>` can clone a new\n+/// [`std::rc::Rc`][`Rc`], because any reference [`&Rc<T>`][`Rc`] can clone a new\n /// reference, which modifies the reference counts in a non-atomic\n /// way.\n ///\n /// For cases when one does need thread-safe interior mutability,\n-/// types like the atomics in `std::sync` and `Mutex` & `RWLock` in\n-/// the `sync` crate do ensure that any mutation cannot cause data\n+/// types like the atomics in [`std::sync`][`sync`] and [`Mutex`] / [`RwLock`] in\n+/// the [`sync`] crate do ensure that any mutation cannot cause data\n /// races.  Hence these types are `Sync`.\n ///\n-/// Any types with interior mutability must also use the `std::cell::UnsafeCell`\n+/// Any types with interior mutability must also use the [`std::cell::UnsafeCell`]\n /// wrapper around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behavior (for example,\n-/// `transmute`-ing from `&T` to `&mut T` is invalid).\n+/// [`transmute`]-ing from `&T` to `&mut T` is invalid).\n ///\n /// This trait is automatically derived when the compiler determines it's appropriate.\n+///\n+/// [`u8`]: ../../std/primitive.u8.html\n+/// [`f64`]: ../../std/primitive.f64.html\n+/// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n+/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n+/// [`Cell`]: ../../std/cell/struct.Cell.html\n+/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n+/// [`std::cell`]: ../../std/cell/index.html\n+/// [`.set`]: ../../std/cell/struct.Cell.html#method.set\n+/// [`Rc`]: ../../std/rc/struct.Rc.html\n+/// [`sync`]: ../../std/sync/index.html\n+/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n+/// [`RwLock`]: ../../std/sync/struct.RwLock.html\n+/// [`std::cell::UnsafeCell`]: ../../std/cell/struct.UnsafeCell.html\n+/// [`transmute`]: ../../std/mem/fn.transmute.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]"}, {"sha": "b9fb2dc90c728054c0deb7f786abfc8b69ca5bd9", "filename": "src/libcore/option.rs", "status": "modified", "additions": 51, "deletions": 28, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -10,9 +10,9 @@\n \n //! Optional values.\n //!\n-//! Type `Option` represents an optional value: every `Option`\n-//! is either `Some` and contains a value, or `None`, and\n-//! does not. `Option` types are very common in Rust code, as\n+//! Type [`Option`] represents an optional value: every [`Option`]\n+//! is either [`Some`] and contains a value, or [`None`], and\n+//! does not. [`Option`] types are very common in Rust code, as\n //! they have a number of uses:\n //!\n //! * Initial values\n@@ -26,8 +26,8 @@\n //! * Nullable pointers\n //! * Swapping things out of difficult situations\n //!\n-//! Options are commonly paired with pattern matching to query the presence\n-//! of a value and take action, always accounting for the `None` case.\n+//! [`Option`]s are commonly paired with pattern matching to query the presence\n+//! of a value and take action, always accounting for the [`None`] case.\n //!\n //! ```\n //! fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n@@ -57,13 +57,13 @@\n //!\n //! Rust's pointer types must always point to a valid location; there are\n //! no \"null\" pointers. Instead, Rust has *optional* pointers, like\n-//! the optional owned box, `Option<Box<T>>`.\n+//! the optional owned box, [`Option`]`<`[`Box<T>`]`>`.\n //!\n-//! The following example uses `Option` to create an optional box of\n-//! `i32`. Notice that in order to use the inner `i32` value first the\n+//! The following example uses [`Option`] to create an optional box of\n+//! [`i32`]. Notice that in order to use the inner [`i32`] value first the\n //! `check_optional` function needs to use pattern matching to\n-//! determine whether the box has a value (i.e. it is `Some(...)`) or\n-//! not (`None`).\n+//! determine whether the box has a value (i.e. it is [`Some(...)`][`Some`]) or\n+//! not ([`None`]).\n //!\n //! ```\n //! let optional: Option<Box<i32>> = None;\n@@ -80,14 +80,14 @@\n //! }\n //! ```\n //!\n-//! This usage of `Option` to create safe nullable pointers is so\n+//! This usage of [`Option`] to create safe nullable pointers is so\n //! common that Rust does special optimizations to make the\n-//! representation of `Option<Box<T>>` a single pointer. Optional pointers\n+//! representation of [`Option`]`<`[`Box<T>`]`>` a single pointer. Optional pointers\n //! in Rust are stored as efficiently as any other pointer type.\n //!\n //! # Examples\n //!\n-//! Basic pattern matching on `Option`:\n+//! Basic pattern matching on [`Option`]:\n //!\n //! ```\n //! let msg = Some(\"howdy\");\n@@ -101,7 +101,7 @@\n //! let unwrapped_msg = msg.unwrap_or(\"default message\");\n //! ```\n //!\n-//! Initialize a result to `None` before a loop:\n+//! Initialize a result to [`None`] before a loop:\n //!\n //! ```\n //! enum Kingdom { Plant(u32, &'static str), Animal(u32, &'static str) }\n@@ -136,6 +136,12 @@\n //!     None => println!(\"there are no animals :(\"),\n //! }\n //! ```\n+//!\n+//! [`Option`]: enum.Option.html\n+//! [`Some`]: enum.Option.html#variant.Some\n+//! [`None`]: enum.Option.html#variant.None\n+//! [`Box<T>`]: ../../std/boxed/struct.Box.html\n+//! [`i32`]: ../../std/primitive.i32.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -156,7 +162,7 @@ pub enum Option<T> {\n     None,\n     /// Some value `T`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T)\n+    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n }\n \n /////////////////////////////////////////////////////////////////////////////\n@@ -168,7 +174,7 @@ impl<T> Option<T> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the option is a `Some` value\n+    /// Returns `true` if the option is a `Some` value.\n     ///\n     /// # Examples\n     ///\n@@ -188,7 +194,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `true` if the option is a `None` value\n+    /// Returns `true` if the option is a `None` value.\n     ///\n     /// # Examples\n     ///\n@@ -209,15 +215,17 @@ impl<T> Option<T> {\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Converts from `Option<T>` to `Option<&T>`\n+    /// Converts from `Option<T>` to `Option<&T>`.\n     ///\n     /// # Examples\n     ///\n     /// Convert an `Option<String>` into an `Option<usize>`, preserving the original.\n-    /// The `map` method takes the `self` argument by value, consuming the original,\n+    /// The [`map`] method takes the `self` argument by value, consuming the original,\n     /// so this technique uses `as_ref` to first take an `Option` to a reference\n     /// to the value inside the original.\n     ///\n+    /// [`map`]: enum.Option.html#method.map\n+    ///\n     /// ```\n     /// let num_as_str: Option<String> = Some(\"10\".to_string());\n     /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,\n@@ -234,7 +242,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Converts from `Option<T>` to `Option<&mut T>`\n+    /// Converts from `Option<T>` to `Option<&mut T>`.\n     ///\n     /// # Examples\n     ///\n@@ -357,7 +365,7 @@ impl<T> Option<T> {\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value\n+    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.\n     ///\n     /// # Examples\n     ///\n@@ -423,8 +431,12 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n-    /// `Ok(v)` and `None` to `Err(err)`.\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n+    /// [`Ok(v)`] and `None` to [`Err(err)`][Err].\n+    ///\n+    /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+    /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -444,8 +456,12 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n-    /// `Ok(v)` and `None` to `Err(err())`.\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n+    /// [`Ok(v)`] and `None` to [`Err(err())`][Err].\n+    ///\n+    /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+    /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -698,6 +714,7 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n+    /// Returns None.\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -789,7 +806,9 @@ impl<A> DoubleEndedIterator for Item<A> {\n impl<A> ExactSizeIterator for Item<A> {}\n impl<A> FusedIterator for Item<A> {}\n \n-/// An iterator over a reference of the contained item in an Option.\n+/// An iterator over a reference of the contained item in an [`Option`].\n+///\n+/// [`Option`]: enum.Option.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Iter<'a, A: 'a> { inner: Item<&'a A> }\n@@ -823,7 +842,9 @@ impl<'a, A> Clone for Iter<'a, A> {\n     }\n }\n \n-/// An iterator over a mutable reference of the contained item in an Option.\n+/// An iterator over a mutable reference of the contained item in an [`Option`].\n+///\n+/// [`Option`]: enum.Option.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, A: 'a> { inner: Item<&'a mut A> }\n@@ -850,7 +871,9 @@ impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, A> FusedIterator for IterMut<'a, A> {}\n \n-/// An iterator over the item contained inside an Option.\n+/// An iterator over the item contained inside an [`Option`].\n+///\n+/// [`Option`]: enum.Option.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<A> { inner: Item<A> }"}, {"sha": "96845259299be29b52f4c597e6c780eed0e48375", "filename": "src/libcore/result.rs", "status": "modified", "additions": 59, "deletions": 36, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -10,9 +10,9 @@\n \n //! Error handling with the `Result` type.\n //!\n-//! `Result<T, E>` is the type used for returning and propagating\n-//! errors. It is an enum with the variants, `Ok(T)`, representing\n-//! success and containing a value, and `Err(E)`, representing error\n+//! [`Result<T, E>`][`Result`] is the type used for returning and propagating\n+//! errors. It is an enum with the variants, [`Ok(T)`], representing\n+//! success and containing a value, and [`Err(E)`], representing error\n //! and containing an error value.\n //!\n //! ```\n@@ -23,11 +23,11 @@\n //! }\n //! ```\n //!\n-//! Functions return `Result` whenever errors are expected and\n-//! recoverable. In the `std` crate `Result` is most prominently used\n+//! Functions return [`Result`] whenever errors are expected and\n+//! recoverable. In the `std` crate, [`Result`] is most prominently used\n //! for [I/O](../../std/io/index.html).\n //!\n-//! A simple function returning `Result` might be\n+//! A simple function returning [`Result`] might be\n //! defined and used like so:\n //!\n //! ```\n@@ -50,8 +50,8 @@\n //! }\n //! ```\n //!\n-//! Pattern matching on `Result`s is clear and straightforward for\n-//! simple cases, but `Result` comes with some convenience methods\n+//! Pattern matching on [`Result`]s is clear and straightforward for\n+//! simple cases, but [`Result`] comes with some convenience methods\n //! that make working with it more succinct.\n //!\n //! ```\n@@ -80,14 +80,14 @@\n //!\n //! A common problem with using return values to indicate errors is\n //! that it is easy to ignore the return value, thus failing to handle\n-//! the error. Result is annotated with the #[must_use] attribute,\n+//! the error. [`Result`] is annotated with the `#[must_use]` attribute,\n //! which will cause the compiler to issue a warning when a Result\n-//! value is ignored. This makes `Result` especially useful with\n+//! value is ignored. This makes [`Result`] especially useful with\n //! functions that may encounter errors but don't otherwise return a\n //! useful value.\n //!\n-//! Consider the `write_all` method defined for I/O types\n-//! by the [`Write`](../../std/io/trait.Write.html) trait:\n+//! Consider the [`write_all`] method defined for I/O types\n+//! by the [`Write`] trait:\n //!\n //! ```\n //! use std::io;\n@@ -97,8 +97,8 @@\n //! }\n //! ```\n //!\n-//! *Note: The actual definition of `Write` uses `io::Result`, which\n-//! is just a synonym for `Result<T, io::Error>`.*\n+//! *Note: The actual definition of [`Write`] uses [`io::Result`], which\n+//! is just a synonym for [`Result`]`<T, `[`io::Error`]`>`.*\n //!\n //! This method doesn't produce a value, but the write may\n //! fail. It's crucial to handle the error case, and *not* write\n@@ -119,7 +119,7 @@\n //! warning (by default, controlled by the `unused_must_use` lint).\n //!\n //! You might instead, if you don't want to handle the error, simply\n-//! assert success with `expect`. This will panic if the\n+//! assert success with [`expect`]. This will panic if the\n //! write fails, providing a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n@@ -139,7 +139,7 @@\n //! assert!(file.write_all(b\"important message\").is_ok());\n //! ```\n //!\n-//! Or propagate the error up the call stack with `try!`:\n+//! Or propagate the error up the call stack with [`try!`]:\n //!\n //! ```\n //! # use std::fs::File;\n@@ -156,7 +156,7 @@\n //! # The `try!` macro\n //!\n //! When writing code that calls many functions that return the\n-//! `Result` type, the error handling can be tedious.  The `try!`\n+//! [`Result`] type, the error handling can be tedious. The [`try!`]\n //! macro hides some of the boilerplate of propagating errors up the\n //! call stack.\n //!\n@@ -219,9 +219,9 @@\n //!\n //! *It's much nicer!*\n //!\n-//! Wrapping an expression in `try!` will result in the unwrapped\n-//! success (`Ok`) value, unless the result is `Err`, in which case\n-//! `Err` is returned early from the enclosing function. Its simple definition\n+//! Wrapping an expression in [`try!`] will result in the unwrapped\n+//! success ([`Ok`]) value, unless the result is [`Err`], in which case\n+//! [`Err`] is returned early from the enclosing function. Its simple definition\n //! makes it clear:\n //!\n //! ```\n@@ -230,9 +230,21 @@\n //! }\n //! ```\n //!\n-//! `try!` is imported by the prelude and is available everywhere, but it can only\n-//! be used in functions that return `Result` because of the early return of\n-//! `Err` that it provides.\n+//! [`try!`] is imported by the prelude and is available everywhere, but it can only\n+//! be used in functions that return [`Result`] because of the early return of\n+//! [`Err`] that it provides.\n+//!\n+//! [`expect`]: enum.Result.html#method.expect\n+//! [`Write`]: ../../std/io/trait.Write.html\n+//! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n+//! [`io::Result`]: ../../std/io/type.Result.html\n+//! [`try!`]: ../../std/macro.try.html\n+//! [`Result`]: enum.Result.html\n+//! [`Ok(T)`]: enum.Result.html#variant.Ok\n+//! [`Err(E)`]: enum.Result.html#variant.Err\n+//! [`io::Error`]: ../../std/io/struct.Error.html\n+//! [`Ok`]: enum.Result.html#variant.Ok\n+//! [`Err`]: enum.Result.html#variant.Err\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -264,7 +276,7 @@ impl<T, E> Result<T, E> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns true if the result is `Ok`\n+    /// Returns true if the result is `Ok`.\n     ///\n     /// # Examples\n     ///\n@@ -286,7 +298,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns true if the result is `Err`\n+    /// Returns true if the result is `Err`.\n     ///\n     /// # Examples\n     ///\n@@ -309,11 +321,13 @@ impl<T, E> Result<T, E> {\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Converts from `Result<T, E>` to `Option<T>`\n+    /// Converts from `Result<T, E>` to [`Option<T>`].\n     ///\n-    /// Converts `self` into an `Option<T>`, consuming `self`,\n+    /// Converts `self` into an [`Option<T>`], consuming `self`,\n     /// and discarding the error, if any.\n     ///\n+    /// [`Option<T>`]: ../../std/option/enum.Option.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -334,11 +348,13 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Converts from `Result<T, E>` to `Option<E>`\n+    /// Converts from `Result<T, E>` to [`Option<E>`].\n     ///\n-    /// Converts `self` into an `Option<E>`, consuming `self`,\n+    /// Converts `self` into an [`Option<E>`], consuming `self`,\n     /// and discarding the success value, if any.\n     ///\n+    /// [`Option<E>`]: ../../std/option/enum.Option.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -363,7 +379,7 @@ impl<T, E> Result<T, E> {\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Converts from `Result<T, E>` to `Result<&T, &E>`\n+    /// Converts from `Result<T, E>` to `Result<&T, &E>`.\n     ///\n     /// Produces a new `Result`, containing a reference\n     /// into the original, leaving the original in place.\n@@ -388,7 +404,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`\n+    /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.\n     ///\n     /// # Examples\n     ///\n@@ -563,7 +579,7 @@ impl<T, E> Result<T, E> {\n \n     /// Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n     ///\n-    /// This function can be used for control flow based on result values.\n+    /// This function can be used for control flow based on `Result` values.\n     ///\n     /// # Examples\n     ///\n@@ -646,7 +662,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Else it returns `optb`.\n+    /// Else, it returns `optb`.\n     ///\n     /// # Examples\n     ///\n@@ -837,7 +853,10 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////\n \n-/// An iterator over a reference to the `Ok` variant of a `Result`.\n+/// An iterator over a reference to the [`Ok`] variant of a [`Result`].\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Result`]: enum.Result.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> { inner: Option<&'a T> }\n@@ -872,7 +891,10 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n }\n \n-/// An iterator over a mutable reference to the `Ok` variant of a `Result`.\n+/// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Result`]: enum.Result.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> { inner: Option<&'a mut T> }\n@@ -902,10 +924,11 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n-/// An iterator over the value in a `Ok` variant of a `Result`. This struct is\n+/// An iterator over the value in a [`Ok`] variant of a [`Result`]. This struct is\n /// created by the [`into_iter`] method on [`Result`][`Result`] (provided by\n /// the [`IntoIterator`] trait).\n ///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html\n /// [`into_iter`]: ../iter/trait.IntoIterator.html#tymethod.into_iter\n /// [`IntoIterator`]: ../iter/trait.IntoIterator.html"}, {"sha": "7b147faccd20fbaa16079ef095f77aaeb7d730be", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -755,11 +755,13 @@ impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Default for &'a [T] {\n+    /// Creates an empty slice.\n     fn default() -> &'a [T] { &[] }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n impl<'a, T> Default for &'a mut [T] {\n+    /// Creates a mutable empty slice.\n     fn default() -> &'a mut [T] { &mut [] }\n }\n "}, {"sha": "1f1ae6f12ab457e1d38342fa46854c9184db572d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -1987,5 +1987,6 @@ impl AsRef<[u8]> for str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Default for &'a str {\n+    /// Creates an empty str\n     fn default() -> &'a str { \"\" }\n }"}, {"sha": "f5f37be52de6ec7ea82258933d38cbf62a545507", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -95,6 +95,7 @@ pub struct AtomicBool {\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n+    /// Creates an `AtomicBool` initialised as false.\n     fn default() -> Self {\n         Self::new(false)\n     }\n@@ -117,6 +118,7 @@ pub struct AtomicPtr<T> {\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n+    /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(::ptr::null_mut())\n     }"}, {"sha": "48395c12fafebde6d55cfc315edd9939ce390070", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -113,6 +113,7 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for ReseedWithDefault {\n+    /// Creates an instance of `ReseedWithDefault`.\n     fn default() -> ReseedWithDefault {\n         ReseedWithDefault\n     }\n@@ -137,6 +138,7 @@ mod tests {\n         }\n     }\n     impl Default for Counter {\n+    /// Constructs a `Counter` with initial value zero.\n         fn default() -> Counter {\n             Counter { i: 0 }\n         }"}, {"sha": "6fec698cfac9b969f3e61ce7644100942c08f10e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -45,6 +45,7 @@ pub struct TargetDataLayout {\n }\n \n impl Default for TargetDataLayout {\n+    /// Creates an instance of `TargetDataLayout`.\n     fn default() -> TargetDataLayout {\n         TargetDataLayout {\n             endian: Endian::Big,"}, {"sha": "ae90c2fac83218c21c27574ec88959d82f4596fd", "filename": "src/librustc_data_structures/fnv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc_data_structures%2Ffnv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc_data_structures%2Ffnv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffnv.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -35,6 +35,7 @@ pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> {\n pub struct FnvHasher(u64);\n \n impl Default for FnvHasher {\n+    /// Creates a `FnvHasher`, with a 64-bit hex initial value.\n     #[inline]\n     fn default() -> FnvHasher {\n         FnvHasher(0xcbf29ce484222325)"}, {"sha": "29add1f9b9d4972b2329426593b0909c43d49002", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -109,6 +109,7 @@ enum SingleImports<'a> {\n }\n \n impl<'a> Default for SingleImports<'a> {\n+    /// Creates a `SingleImports<'a>` of None type.\n     fn default() -> Self {\n         SingleImports::None\n     }"}, {"sha": "855588a4c3a4b9e69818da5af12db1ba318b74c9", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -33,7 +33,8 @@ use syntax::parse;\n use syntax_pos::Span;\n \n /// Highlights `src`, returning the HTML output.\n-pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n+pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>,\n+                                extension: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new();\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), None, src.to_string());\n@@ -47,6 +48,9 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>\n         return format!(\"<pre>{}</pre>\", src);\n     }\n \n+    if let Some(extension) = extension {\n+        write!(out, \"{}\", extension).unwrap();\n+    }\n     write_footer(&mut out).unwrap();\n     String::from_utf8_lossy(&out[..]).into_owned()\n }"}, {"sha": "aff5a964f75cc297053b69a0213b43ff48bc21e0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -262,9 +262,11 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                                               &Default::default());\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n-                s.push_str(&highlight::render_with_highlighting(&text,\n-                                                                Some(\"rust-example-rendered\"),\n-                                                                None));\n+                s.push_str(&highlight::render_with_highlighting(\n+                               &text,\n+                               Some(\"rust-example-rendered\"),\n+                               None,\n+                               Some(\"<a class='test-arrow' target='_blank' href=''>Run</a>\")));\n                 let output = CString::new(s).unwrap();\n                 hoedown_buffer_puts(ob, output.as_ptr());\n             })"}, {"sha": "82ef68745a1be78bc214cf120dd900c2884ffad5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -2963,7 +2963,7 @@ impl<'a> fmt::Display for Source<'a> {\n             write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols)?;\n         }\n         write!(fmt, \"</pre>\")?;\n-        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None))?;\n+        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None, None))?;\n         Ok(())\n     }\n }\n@@ -2972,6 +2972,7 @@ fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Macro) -> fmt::Result {\n     w.write_str(&highlight::render_with_highlighting(&t.source,\n                                                      Some(\"macro\"),\n+                                                     None,\n                                                      None))?;\n     render_stability_since_raw(w, it.stable_since(), None)?;\n     document(w, cx, it)"}, {"sha": "cad97c04e1ac066a8b2243ad0eeebc8267f2afcc", "filename": "src/librustdoc/html/static/playpen.js", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -27,9 +27,7 @@ document.addEventListener('DOMContentLoaded', function() {\n                 return;\n             }\n \n-            var a = document.createElement('a');\n-            a.setAttribute('class', 'test-arrow');\n-            a.textContent = 'Run';\n+            var a = el.querySelectorAll('a.test-arrow')[0];\n \n             var code = el.previousElementSibling.textContent;\n \n@@ -40,17 +38,6 @@ document.addEventListener('DOMContentLoaded', function() {\n \n             a.setAttribute('href', window.playgroundUrl + '?code=' +\n                            encodeURIComponent(code) + channel);\n-            a.setAttribute('target', '_blank');\n-\n-            el.appendChild(a);\n-        };\n-\n-        el.onmouseout = function(e) {\n-            if (el.contains(e.relatedTarget)) {\n-                return;\n-            }\n-\n-            el.removeChild(el.querySelectorAll('a.test-arrow')[0]);\n         };\n     });\n });"}, {"sha": "2884320b82ebddecfa4434487e916658040c3b5e", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -568,15 +568,18 @@ pre.rust .lifetime { color: #B76514; }\n .rusttest { display: none; }\n pre.rust { position: relative; }\n a.test-arrow {\n+    background-color: rgba(78, 139, 202, 0.2);\n     display: inline-block;\n     position: absolute;\n-    background-color: #4e8bca;\n     padding: 5px 10px 5px 10px;\n     border-radius: 5px;\n     font-size: 130%;\n     top: 5px;\n     right: 5px;\n }\n+a.test-arrow:hover{\n+    background-color: #4e8bca;\n+}\n \n .section-header:hover a:after {\n     content: '\\2002\\00a7\\2002';"}, {"sha": "eb1653f18cba18001d6ad0628345f3407766bc9e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -1218,6 +1218,7 @@ impl<K, V, S> Default for HashMap<K, V, S>\n     where K: Eq + Hash,\n           S: BuildHasher + Default,\n {\n+    /// Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n     fn default() -> HashMap<K, V, S> {\n         HashMap::with_hasher(Default::default())\n     }\n@@ -2026,6 +2027,7 @@ impl Hasher for DefaultHasher {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for RandomState {\n+    /// Constructs a new `RandomState`.\n     #[inline]\n     fn default() -> RandomState {\n         RandomState::new()"}, {"sha": "ff56747fee6af42069f084cffb52be2bf15e26cc", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -665,6 +665,7 @@ impl<T, S> Default for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher + Default,\n {\n+    /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     fn default() -> HashSet<T, S> {\n         HashSet::with_hasher(Default::default())\n     }"}, {"sha": "1c449712e1f7aac8e37424cb1d902f32df5a873f", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -361,6 +361,7 @@ impl<'a> Default for &'a CStr {\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl Default for CString {\n+    /// Creates an empty `CString`.\n     fn default() -> CString {\n         let a: &CStr = Default::default();\n         a.to_owned()"}, {"sha": "d93d3c7362261223d2b678450372b04837c3c9b1", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -170,6 +170,7 @@ impl ops::Deref for OsString {\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl Default for OsString {\n+    /// Constructs an empty `OsString`.\n     #[inline]\n     fn default() -> OsString {\n         OsString::new()\n@@ -342,6 +343,7 @@ impl OsStr {\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl<'a> Default for &'a OsStr {\n+    /// Creates an empty `OsStr`.\n     #[inline]\n     fn default() -> &'a OsStr {\n         OsStr::new(\"\")"}, {"sha": "05ef559422f33187707e1894c56eef67800945cf", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -22,6 +22,24 @@ use sys::net::netc as c;\n use sys_common::{AsInner, FromInner};\n \n /// An IP address, either an IPv4 or IPv6 address.\n+///\n+/// # Examples\n+///\n+/// Constructing an IPv4 address:\n+///\n+/// ```\n+/// use std::net::{IpAddr, Ipv4Addr};\n+///\n+/// IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1));\n+/// ```\n+///\n+/// Constructing an IPv6 address:\n+///\n+/// ```\n+/// use std::net::{IpAddr, Ipv6Addr};\n+///\n+/// IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+/// ```\n #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n pub enum IpAddr {"}, {"sha": "3db8b05b954c3dacf4b157a8edc73f9d83118613", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -241,6 +241,7 @@ impl Condvar {\n \n #[stable(feature = \"condvar_default\", since = \"1.9.0\")]\n impl Default for Condvar {\n+    /// Creates a `Condvar` which is ready to be waited on and notified.\n     fn default() -> Condvar {\n         Condvar::new()\n     }"}, {"sha": "098a3e44258c77f2d116826b5dffe71560d355e5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -287,6 +287,7 @@ impl<T: ?Sized> Drop for Mutex<T> {\n \n #[stable(feature = \"mutex_default\", since = \"1.9.0\")]\n impl<T: ?Sized + Default> Default for Mutex<T> {\n+    /// Creates a `Mutex<T>`, with the `Default` value for T.\n     fn default() -> Mutex<T> {\n         Mutex::new(Default::default())\n     }"}, {"sha": "7f053c6704b56dffb09b5b32bf135fbc07345ef9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -311,6 +311,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n \n #[stable(feature = \"rw_lock_default\", since = \"1.9.0\")]\n impl<T: Default> Default for RwLock<T> {\n+    /// Creates a new `RwLock<T>`, with the `Default` value for T.\n     fn default() -> RwLock<T> {\n         RwLock::new(Default::default())\n     }"}, {"sha": "40c8ba93bd5d92fbf1ef6426ece268379a4daa40", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -362,6 +362,7 @@ impl Generics {\n }\n \n impl Default for Generics {\n+    /// Creates an instance of `Generics`.\n     fn default() ->  Generics {\n         Generics {\n             lifetimes: Vec::new(),"}, {"sha": "5875015893144db01dc58244a4f110a43774ebc9", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5736db916ac30ca67945bbf0aee41ced1fcf05/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=5a5736db916ac30ca67945bbf0aee41ced1fcf05", "patch": "@@ -154,6 +154,7 @@ impl<T> P<[T]> {\n }\n \n impl<T> Default for P<[T]> {\n+    /// Creates an empty `P<[T]>`.\n     fn default() -> P<[T]> {\n         P::new()\n     }"}]}