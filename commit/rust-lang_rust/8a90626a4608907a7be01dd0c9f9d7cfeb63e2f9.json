{"sha": "8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTA2MjZhNDYwODkwN2E3YmUwMWRkMGM5ZjlkN2NmZWI2M2UyZjk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-02T19:09:17Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-02T19:09:17Z"}, "message": "reduce borrowing and (de)referencing around match patterns (clippy::match_ref_pats)", "tree": {"sha": "24487a0744e7067e455bbb997418c925ef7bf553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24487a0744e7067e455bbb997418c925ef7bf553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "html_url": "https://github.com/rust-lang/rust/commit/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90ccf4f5adfb2562fc95c996b97faac7775a34bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/90ccf4f5adfb2562fc95c996b97faac7775a34bb", "html_url": "https://github.com/rust-lang/rust/commit/90ccf4f5adfb2562fc95c996b97faac7775a34bb"}], "stats": {"total": 180, "additions": 89, "deletions": 91}, "files": [{"sha": "6c70b3e5596aa5b91e81c3e2d7f5994361cb9554", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -433,9 +433,9 @@ pub enum WherePredicate {\n impl WherePredicate {\n     pub fn span(&self) -> Span {\n         match self {\n-            &WherePredicate::BoundPredicate(ref p) => p.span,\n-            &WherePredicate::RegionPredicate(ref p) => p.span,\n-            &WherePredicate::EqPredicate(ref p) => p.span,\n+            WherePredicate::BoundPredicate(p) => p.span,\n+            WherePredicate::RegionPredicate(p) => p.span,\n+            WherePredicate::EqPredicate(p) => p.span,\n         }\n     }\n }"}, {"sha": "b6f980f9177f853cbba3e2c4aca25bac452e6612", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -1212,11 +1212,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_pat(&mut self, pat: &'a Pat) {\n-        match pat.kind {\n-            PatKind::Lit(ref expr) => {\n+        match &pat.kind {\n+            PatKind::Lit(expr) => {\n                 self.check_expr_within_pat(expr, false);\n             }\n-            PatKind::Range(ref start, ref end, _) => {\n+            PatKind::Range(start, end, _) => {\n                 if let Some(expr) = start {\n                     self.check_expr_within_pat(expr, true);\n                 }"}, {"sha": "7114b9876809163ed0673d388b1b1472788fa1b8", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -48,8 +48,8 @@ pub fn expand_deriving_hash(\n }\n \n fn hash_substructure(cx: &mut ExtCtxt<'_>, trait_span: Span, substr: &Substructure<'_>) -> P<Expr> {\n-    let state_expr = match &substr.nonself_args {\n-        &[o_f] => o_f,\n+    let state_expr = match substr.nonself_args {\n+        [o_f] => o_f,\n         _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(Hash)`\"),\n     };\n     let call_hash = |span, thing_expr| {\n@@ -64,9 +64,9 @@ fn hash_substructure(cx: &mut ExtCtxt<'_>, trait_span: Span, substr: &Substructu\n     };\n     let mut stmts = Vec::new();\n \n-    let fields = match *substr.fields {\n-        Struct(_, ref fs) | EnumMatching(_, 1, .., ref fs) => fs,\n-        EnumMatching(.., ref fs) => {\n+    let fields = match substr.fields {\n+        Struct(_, fs) | EnumMatching(_, 1, .., fs) => fs,\n+        EnumMatching(.., fs) => {\n             let variant_value = deriving::call_intrinsic(\n                 cx,\n                 trait_span,"}, {"sha": "ead39d702635afb51edb36efbba6cf028563ac0b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -378,9 +378,9 @@ impl GenericBound<'_> {\n \n     pub fn span(&self) -> Span {\n         match self {\n-            &GenericBound::Trait(ref t, ..) => t.span,\n-            &GenericBound::LangItemTrait(_, span, ..) => span,\n-            &GenericBound::Outlives(ref l) => l.span,\n+            GenericBound::Trait(t, ..) => t.span,\n+            GenericBound::LangItemTrait(_, span, ..) => *span,\n+            GenericBound::Outlives(l) => l.span,\n         }\n     }\n }\n@@ -538,9 +538,9 @@ pub enum WherePredicate<'hir> {\n impl WherePredicate<'_> {\n     pub fn span(&self) -> Span {\n         match self {\n-            &WherePredicate::BoundPredicate(ref p) => p.span,\n-            &WherePredicate::RegionPredicate(ref p) => p.span,\n-            &WherePredicate::EqPredicate(ref p) => p.span,\n+            WherePredicate::BoundPredicate(p) => p.span,\n+            WherePredicate::RegionPredicate(p) => p.span,\n+            WherePredicate::EqPredicate(p) => p.span,\n         }\n     }\n }"}, {"sha": "b0e82214cf95f7af789a7b71fec7d05a46d37ef0", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -896,8 +896,8 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     predicate: &'v WherePredicate<'v>,\n ) {\n-    match predicate {\n-        &WherePredicate::BoundPredicate(WhereBoundPredicate {\n+    match *predicate {\n+        WherePredicate::BoundPredicate(WhereBoundPredicate {\n             ref bounded_ty,\n             bounds,\n             bound_generic_params,\n@@ -907,11 +907,11 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n-        &WherePredicate::RegionPredicate(WhereRegionPredicate { ref lifetime, bounds, .. }) => {\n+        WherePredicate::RegionPredicate(WhereRegionPredicate { ref lifetime, bounds, .. }) => {\n             visitor.visit_lifetime(lifetime);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        &WherePredicate::EqPredicate(WhereEqPredicate {\n+        WherePredicate::EqPredicate(WhereEqPredicate {\n             hir_id, ref lhs_ty, ref rhs_ty, ..\n         }) => {\n             visitor.visit_id(hir_id);"}, {"sha": "ddd3827c81df60f22895f586732ca0766d7e112a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -2233,19 +2233,19 @@ impl<'a> State<'a> {\n             }\n \n             match predicate {\n-                &hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                    ref bound_generic_params,\n-                    ref bounded_ty,\n+                hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                    bound_generic_params,\n+                    bounded_ty,\n                     bounds,\n                     ..\n                 }) => {\n                     self.print_formal_generic_params(bound_generic_params);\n                     self.print_type(&bounded_ty);\n-                    self.print_bounds(\":\", bounds);\n+                    self.print_bounds(\":\", *bounds);\n                 }\n-                &hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n-                    ref lifetime,\n-                    ref bounds,\n+                hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n+                    lifetime,\n+                    bounds,\n                     ..\n                 }) => {\n                     self.print_lifetime(lifetime);\n@@ -2264,10 +2264,8 @@ impl<'a> State<'a> {\n                         }\n                     }\n                 }\n-                &hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    ref lhs_ty,\n-                    ref rhs_ty,\n-                    ..\n+                hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n+                    lhs_ty, rhs_ty, ..\n                 }) => {\n                     self.print_type(lhs_ty);\n                     self.s.space();"}, {"sha": "f39a92b9a32ba569a52dd8e223a598e05cc78614", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -310,13 +310,13 @@ fn filter_nodes<'q>(\n     sources: &Option<FxHashSet<&'q DepNode>>,\n     targets: &Option<FxHashSet<&'q DepNode>>,\n ) -> FxHashSet<&'q DepNode> {\n-    if let &Some(ref sources) = sources {\n-        if let &Some(ref targets) = targets {\n+    if let Some(sources) = sources {\n+        if let Some(targets) = targets {\n             walk_between(query, sources, targets)\n         } else {\n             walk_nodes(query, sources, OUTGOING)\n         }\n-    } else if let &Some(ref targets) = targets {\n+    } else if let Some(targets) = targets {\n         walk_nodes(query, targets, INCOMING)\n     } else {\n         query.nodes().into_iter().collect()"}, {"sha": "d1d6cb43fc74c2eeb5aa0bed3bfdeb7042fb8fbd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -915,7 +915,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n                 return Some(());\n             }\n-            if let &ty::Adt(def, _) = ta.kind() {\n+            if let ty::Adt(def, _) = ta.kind() {\n                 let path_ = self.tcx.def_path_str(def.did);\n                 if path_ == other_path {\n                     self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);"}, {"sha": "374bd6d0d791fd96213efa9cc2dfd7c5b70d83f5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -938,8 +938,8 @@ impl EarlyLintPass for DeprecatedAttr {\n             if attr.ident().map(|ident| ident.name) == Some(n) {\n                 if let &AttributeGate::Gated(\n                     Stability::Deprecated(link, suggestion),\n-                    ref name,\n-                    ref reason,\n+                    name,\n+                    reason,\n                     _,\n                 ) = g\n                 {"}, {"sha": "e9a507874af2e634cd26ec1b17d0839748c34dba", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -397,7 +397,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n-        if let &PatKind::Binding(_, hid, ident, _) = &p.kind {\n+        if let PatKind::Binding(_, hid, ident, _) = p.kind {\n             if let hir::Node::Pat(parent_pat) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n             {\n                 if let PatKind::Struct(_, field_pats, _) = &parent_pat.kind {"}, {"sha": "35915dc7a9753b521a12dcabcb979ecfa3620bd6", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -862,11 +862,11 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let &ast::TyKind::Paren(ref r) = &ty.kind {\n+        if let ast::TyKind::Paren(r) = &ty.kind {\n             match &r.kind {\n-                &ast::TyKind::TraitObject(..) => {}\n-                &ast::TyKind::ImplTrait(_, ref bounds) if bounds.len() > 1 => {}\n-                &ast::TyKind::Array(_, ref len) => {\n+                ast::TyKind::TraitObject(..) => {}\n+                ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n+                ast::TyKind::Array(_, len) => {\n                     self.check_unused_delims_expr(\n                         cx,\n                         &len.value,"}, {"sha": "5b33678b25ae232f270c95af5cb33ad635555238", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -192,13 +192,13 @@ impl Collector<'tcx> {\n     fn process_command_line(&mut self) {\n         // First, check for errors\n         let mut renames = FxHashSet::default();\n-        for &(ref name, ref new_name, _) in &self.tcx.sess.opts.libs {\n-            if let &Some(ref new_name) = new_name {\n+        for (name, new_name, _) in &self.tcx.sess.opts.libs {\n+            if let Some(ref new_name) = new_name {\n                 let any_duplicate = self\n                     .libs\n                     .iter()\n                     .filter_map(|lib| lib.name.as_ref())\n-                    .any(|n| n.as_str() == *name);\n+                    .any(|n| &n.as_str() == name);\n                 if new_name.is_empty() {\n                     self.tcx.sess.err(&format!(\n                         \"an empty renaming target was specified for library `{}`\",\n@@ -240,7 +240,7 @@ impl Collector<'tcx> {\n                             if kind != NativeLibKind::Unspecified {\n                                 lib.kind = kind;\n                             }\n-                            if let &Some(ref new_name) = new_name {\n+                            if let Some(new_name) = new_name {\n                                 lib.name = Some(Symbol::intern(new_name));\n                             }\n                             return true;"}, {"sha": "3adcdbe591fc3da3b66eaa30b0468f6faf198802", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -245,8 +245,8 @@ pub fn suggest_constraining_type_param(\n                 }\n             }\n \n-            match &param_spans[..] {\n-                &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n+            match param_spans[..] {\n+                [&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n                 _ => {\n                     err.span_suggestion_verbose(\n                         generics.where_clause.tail_span_for_suggestion(),"}, {"sha": "350e0d045fa35b4f72aad4ca15a1f057b902cfe8", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n         let deref_base = match deref_target_place.projection.as_ref() {\n-            &[ref proj_base @ .., ProjectionElem::Deref] => {\n+            [proj_base @ .., ProjectionElem::Deref] => {\n                 PlaceRef { local: deref_target_place.local, projection: &proj_base }\n             }\n             _ => bug!(\"deref_target_place is not a deref projection\"),"}, {"sha": "5aad7523c8903c404c3e4f026bb2854839d736d1", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -1855,8 +1855,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n-            TerminatorKind::InlineAsm { ref destination, .. } => {\n-                if let &Some(target) = destination {\n+            TerminatorKind::InlineAsm { destination, .. } => {\n+                if let Some(target) = destination {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n             }"}, {"sha": "788f1df328cc4068241884f1257288d10553172e", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n-    if let &[(ItemKind::Asm, _)] = &this.items[..] {\n+    if let [(ItemKind::Asm, _)] = this.items[..] {\n         // Ok.\n     } else {\n         tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_span, |lint| {"}, {"sha": "617a28ed5193802b3018276cb434b59f0d25ffe7", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -582,7 +582,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 }\n                 ref v => {\n                     let mut value = format!(\"{}::{}\", enum_data.name, name);\n-                    if let &hir::VariantData::Tuple(ref fields, _) = v {\n+                    if let hir::VariantData::Tuple(fields, _) = v {\n                         value.push('(');\n                         value.push_str(\n                             &fields\n@@ -653,7 +653,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         let map = &self.tcx.hir();\n         self.nest_typeck_results(map.local_def_id(item.hir_id), |v| {\n             v.visit_ty(&typ);\n-            if let &Some(ref trait_ref) = trait_ref {\n+            if let Some(trait_ref) = trait_ref {\n                 v.process_path(trait_ref.hir_ref_id, &hir::QPath::Resolved(None, &trait_ref.path));\n             }\n             v.process_generic_params(generics, \"\", item.hir_id);\n@@ -1082,7 +1082,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     );\n                 }\n \n-                if let &Some(ref default_ty) = default_ty {\n+                if let Some(default_ty) = default_ty {\n                     self.visit_ty(default_ty)\n                 }\n             }"}, {"sha": "d677103df1f58059dc5865d0ebbb853954a1f408", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -305,8 +305,8 @@ impl AutoTraitFinder<'tcx> {\n                 infcx.resolve_vars_if_possible(Obligation::new(dummy_cause.clone(), new_env, pred));\n             let result = select.select(&obligation);\n \n-            match &result {\n-                &Ok(Some(ref impl_source)) => {\n+            match result {\n+                Ok(Some(ref impl_source)) => {\n                     // If we see an explicit negative impl (e.g., `impl !Send for MyStruct`),\n                     // we immediately bail out, since it's impossible for us to continue.\n \n@@ -339,8 +339,8 @@ impl AutoTraitFinder<'tcx> {\n                         return None;\n                     }\n                 }\n-                &Ok(None) => {}\n-                &Err(SelectionError::Unimplemented) => {\n+                Ok(None) => {}\n+                Err(SelectionError::Unimplemented) => {\n                     if self.is_param_no_infer(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n                         self.add_user_pred(\n@@ -863,7 +863,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         (match r {\n-            &ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned(),\n+            ty::ReVar(vid) => self.vid_to_region.get(vid).cloned(),\n             _ => None,\n         })\n         .unwrap_or_else(|| r.super_fold_with(self))"}, {"sha": "a439bb892f8e7d4de7a7cd03dcb9f382ed318efe", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -1368,7 +1368,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         code: &ObligationCauseCode<'tcx>,\n     ) -> Option<(String, Option<Span>)> {\n         match code {\n-            &ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n+            ObligationCauseCode::BuiltinDerivedObligation(data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_ref);\n                 match self.get_parent_trait_ref(&data.parent_code) {\n                     Some(t) => Some(t),"}, {"sha": "8ca540fc8933c6a6c7713f5cb275994c6a31cfa2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -69,16 +69,16 @@ impl IntercrateAmbiguityCause {\n \n     pub fn intercrate_ambiguity_hint(&self) -> String {\n         match self {\n-            &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n+            IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc } => {\n+                let self_desc = if let Some(ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n                 } else {\n                     String::new()\n                 };\n                 format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n             }\n-            &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n+            IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc } => {\n+                let self_desc = if let Some(ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n                 } else {\n                     String::new()\n@@ -89,7 +89,7 @@ impl IntercrateAmbiguityCause {\n                     trait_desc, self_desc\n                 )\n             }\n-            &IntercrateAmbiguityCause::ReservationImpl { ref message } => message.clone(),\n+            IntercrateAmbiguityCause::ReservationImpl { message } => message.clone(),\n         }\n     }\n }"}, {"sha": "878993d512ceea6d2818af19c6eb3df63840a38c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -770,7 +770,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Try to find an unbound in bounds.\n         let mut unbound = None;\n         for ab in ast_bounds {\n-            if let &hir::GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = ab {\n+            if let hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::Maybe) = ab {\n                 if unbound.is_none() {\n                     unbound = Some(&ptr.trait_ref);\n                 } else {"}, {"sha": "116b079e7425a06d2dd43c2334eeae3b72f8c95c", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -290,16 +290,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::FnPtr(sig) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;\n-                if let &ty::Adt(adt_def, ..) = t {\n+                if let ty::Adt(adt_def, ..) = t {\n                     if adt_def.is_enum() {\n-                        if let hir::ExprKind::Call(ref expr, _) = call_expr.kind {\n+                        if let hir::ExprKind::Call(expr, _) = call_expr.kind {\n                             unit_variant =\n                                 self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n                         }\n                     }\n                 }\n \n-                if let hir::ExprKind::Call(ref callee, _) = call_expr.kind {\n+                if let hir::ExprKind::Call(callee, _) = call_expr.kind {\n                     let mut err = type_error_struct!(\n                         self.tcx.sess,\n                         callee.span,"}, {"sha": "67ec739d8614d0195fbb65246cfe096a35128cf3", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -926,11 +926,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     false\n                 }\n             };\n-            if is_capturing_closure(&prev_ty.kind()) || is_capturing_closure(&new_ty.kind()) {\n+            if is_capturing_closure(prev_ty.kind()) || is_capturing_closure(new_ty.kind()) {\n                 (None, None)\n             } else {\n-                match (&prev_ty.kind(), &new_ty.kind()) {\n-                    (&ty::FnDef(..), &ty::FnDef(..)) => {\n+                match (prev_ty.kind(), new_ty.kind()) {\n+                    (ty::FnDef(..), ty::FnDef(..)) => {\n                         // Don't reify if the function types have a LUB, i.e., they\n                         // are the same function and their parameters have a LUB.\n                         match self\n@@ -943,21 +943,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    (&ty::Closure(_, substs), &ty::FnDef(..)) => {\n+                    (ty::Closure(_, substs), ty::FnDef(..)) => {\n                         let b_sig = new_ty.fn_sig(self.tcx);\n                         let a_sig = self\n                             .tcx\n                             .signature_unclosure(substs.as_closure().sig(), b_sig.unsafety());\n                         (Some(a_sig), Some(b_sig))\n                     }\n-                    (&ty::FnDef(..), &ty::Closure(_, substs)) => {\n+                    (ty::FnDef(..), ty::Closure(_, substs)) => {\n                         let a_sig = prev_ty.fn_sig(self.tcx);\n                         let b_sig = self\n                             .tcx\n                             .signature_unclosure(substs.as_closure().sig(), a_sig.unsafety());\n                         (Some(a_sig), Some(b_sig))\n                     }\n-                    (&ty::Closure(_, substs_a), &ty::Closure(_, substs_b)) => (\n+                    (ty::Closure(_, substs_a), ty::Closure(_, substs_b)) => (\n                         Some(self.tcx.signature_unclosure(\n                             substs_a.as_closure().sig(),\n                             hir::Unsafety::Normal,"}, {"sha": "d76a80d5a3990d6ea6980459603c7ef7c0e701b2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -1125,7 +1125,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             fields,\n             base_expr.is_none(),\n         );\n-        if let &Some(ref base_expr) = base_expr {\n+        if let Some(base_expr) = base_expr {\n             // If check_expr_struct_fields hit an error, do not attempt to populate\n             // the fields with the base_expr. This could cause us to hit errors later\n             // when certain fields are assumed to exist that in fact do not.\n@@ -1182,8 +1182,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // re-link the regions that EIfEO can erase.\n         self.demand_eqtype(span, adt_ty_hint, adt_ty);\n \n-        let (substs, adt_kind, kind_name) = match &adt_ty.kind() {\n-            &ty::Adt(adt, substs) => (substs, adt.adt_kind(), adt.variant_descr()),\n+        let (substs, adt_kind, kind_name) = match adt_ty.kind() {\n+            ty::Adt(adt, substs) => (substs, adt.adt_kind(), adt.variant_descr()),\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\"),\n         };\n "}, {"sha": "5cfd78ebeacad42dfaa8ce21fb63b33b9ae38b83", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             ExprKind::Path(ref qpath) => {\n                                 // local binding\n-                                if let &QPath::Resolved(_, ref path) = &qpath {\n+                                if let QPath::Resolved(_, path) = qpath {\n                                     if let hir::def::Res::Local(hir_id) = path.res {\n                                         let span = tcx.hir().span(hir_id);\n                                         let snippet = tcx.sess.source_map().span_to_snippet(span);"}, {"sha": "ae97fa3f7e4235e174a64f2ebb6606661f6e3eba", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -1920,7 +1920,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     let where_clause = &ast_generics.where_clause;\n     for predicate in where_clause.predicates {\n         match predicate {\n-            &hir::WherePredicate::BoundPredicate(ref bound_pred) => {\n+            hir::WherePredicate::BoundPredicate(bound_pred) => {\n                 let ty = icx.to_ty(&bound_pred.bounded_ty);\n \n                 // Keep the type around in a dummy predicate, in case of no bounds.\n@@ -1949,7 +1949,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &hir::GenericBound::Trait(ref poly_trait_ref, modifier) => {\n+                        hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n                                 hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                                 hir::TraitBoundModifier::None => constness,\n@@ -1959,7 +1959,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             let mut bounds = Bounds::default();\n                             let _ = AstConv::instantiate_poly_trait_ref(\n                                 &icx,\n-                                poly_trait_ref,\n+                                &poly_trait_ref,\n                                 constness,\n                                 ty,\n                                 &mut bounds,\n@@ -1981,7 +1981,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             predicates.extend(bounds.predicates(tcx, ty));\n                         }\n \n-                        &hir::GenericBound::Outlives(ref lifetime) => {\n+                        hir::GenericBound::Outlives(lifetime) => {\n                             let region = AstConv::ast_region_to_region(&icx, lifetime, None);\n                             predicates.insert((\n                                 ty::Binder::bind(ty::PredicateAtom::TypeOutlives(\n@@ -1995,7 +1995,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 }\n             }\n \n-            &hir::WherePredicate::RegionPredicate(ref region_pred) => {\n+            hir::WherePredicate::RegionPredicate(region_pred) => {\n                 let r1 = AstConv::ast_region_to_region(&icx, &region_pred.lifetime, None);\n                 predicates.extend(region_pred.bounds.iter().map(|bound| {\n                     let (r2, span) = match bound {\n@@ -2011,7 +2011,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 }))\n             }\n \n-            &hir::WherePredicate::EqPredicate(..) => {\n+            hir::WherePredicate::EqPredicate(..) => {\n                 // FIXME(#20041)\n             }\n         }"}, {"sha": "3b13cb9e98c0c14564213863ab4499ae7836806d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -351,8 +351,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 if let Some(data) = ty_to_fn.get(&ty) {\n                     let (poly_trait, output) =\n                         (data.0.as_ref().expect(\"as_ref failed\").clone(), data.1.as_ref().cloned());\n-                    let new_ty = match &poly_trait.trait_ {\n-                        &Type::ResolvedPath {\n+                    let new_ty = match poly_trait.trait_ {\n+                        Type::ResolvedPath {\n                             ref path,\n                             ref param_names,\n                             ref did,"}, {"sha": "3b2f50db8c7c216b5f52533f69114270e33162fc", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=8a90626a4608907a7be01dd0c9f9d7cfeb63e2f9", "patch": "@@ -179,12 +179,12 @@ crate fn get_real_types(\n     if arg.is_full_generic() {\n         let arg_s = Symbol::intern(&arg.print().to_string());\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            &WherePredicate::BoundPredicate { ref ty, .. } => ty.def_id() == arg.def_id(),\n+            WherePredicate::BoundPredicate { ty, .. } => ty.def_id() == arg.def_id(),\n             _ => false,\n         }) {\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n             for bound in bounds.iter() {\n-                if let GenericBound::TraitBound(ref poly_trait, _) = *bound {\n+                if let GenericBound::TraitBound(poly_trait, _) = bound {\n                     for x in poly_trait.generic_params.iter() {\n                         if !x.is_type() {\n                             continue;"}]}