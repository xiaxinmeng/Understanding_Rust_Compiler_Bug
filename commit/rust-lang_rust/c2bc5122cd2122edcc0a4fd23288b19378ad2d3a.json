{"sha": "c2bc5122cd2122edcc0a4fd23288b19378ad2d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmM1MTIyY2QyMTIyZWRjYzBhNGZkMjMyODhiMTkzNzhhZDJkM2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T00:57:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T00:59:49Z"}, "message": "tutorial: Make the intro more concise\n\nTalk more about the features of the language, less comparisons to\nother languages. Don't introduce the language using the worst possible\nexample.", "tree": {"sha": "7fb655f9e4d8501cbfb568bb92f3e63ed0e2a199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb655f9e4d8501cbfb568bb92f3e63ed0e2a199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a", "html_url": "https://github.com/rust-lang/rust/commit/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0de8bfd70b01dd01ca541bfdfb52703fa44d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0de8bfd70b01dd01ca541bfdfb52703fa44d9c", "html_url": "https://github.com/rust-lang/rust/commit/fd0de8bfd70b01dd01ca541bfdfb52703fa44d9c"}], "stats": {"total": 93, "additions": 33, "deletions": 60}, "files": [{"sha": "3108fddefb4850b7af73421bb26c25e593278db4", "filename": "doc/tutorial.md", "status": "modified", "additions": 33, "deletions": 60, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc5122cd2122edcc0a4fd23288b19378ad2d3a/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c2bc5122cd2122edcc0a4fd23288b19378ad2d3a", "patch": "@@ -2,79 +2,52 @@\n \n # Introduction\n \n-## Scope\n-\n-This is a tutorial for the Rust programming language. It assumes the\n-reader is familiar with the basic concepts of programming, and has\n-programmed in one or more other languages before. It will often make\n-comparisons to other languages in the C family. This tutorial covers\n-the fundamentals of the language, including the syntax, the type\n-system and memory model, and generics.\n-[Additional tutorials](#what-next) cover specific language features in\n-greater depth.\n-\n-## Language overview\n-\n-Rust is a systems programming language with a focus on type safety,\n-memory safety, concurrency and performance. It is intended for writing\n-large, high-performance applications while preventing several classes\n-of errors commonly found in languages like C++. Rust has a\n-sophisticated memory model that makes possible many of the efficient\n-data structures used in C++, while disallowing invalid memory accesses\n-that would otherwise cause segmentation faults. Like other systems\n-languages, it is statically typed and compiled ahead of time.\n+Rust is a programming language with a focus on type safety, memory\n+safety, concurrency and performance. It is intended for writing\n+large-scale, high-performance software while preventing several\n+classes of common errors. Rust has a sophisticated memory model that\n+encourages efficient data structures and safe concurrency patterns,\n+forbidding invalid memory accesses that would otherwise cause\n+segmentation faults. It is statically typed and compiled ahead of\n+time.\n \n As a multi-paradigm language, Rust supports writing code in\n-procedural, functional and object-oriented styles. Some of its nice\n-high-level features include:\n+procedural, functional and object-oriented styles. Some of its\n+pleasant high-level features include:\n \n-* **Pattern matching and algebraic data types (enums).** Common in\n-  functional languages, pattern matching on ADTs provides a compact\n-  and expressive way to encode program logic.\n+* **Pattern matching and algebraic data types (enums).** As\n+  popularized by functional languages, pattern matching on ADTs\n+  provides a compact and expressive way to encode program logic.\n+* **Type inference.** Type annotations on local variable\n+  declarations are optional.\n * **Task-based concurrency.** Rust uses lightweight tasks that do\n   not share memory.\n-* **Higher-order functions.** Rust functions may take closures as\n-  arguments or return closures as return values.  Closures in Rust are\n-  very powerful and used pervasively.\n-* **Trait polymorphism.** Rust's type system features a unique\n-  combination of Java-style interfaces and Haskell-style typeclasses\n-  called _traits_.\n+* **Higher-order functions.** Rust's efficient and flexible closures\n+  are heavily relied on to provide iteration and other control\n+  structures\n * **Parametric polymorphism (generics).** Functions and types can be\n-  parameterized over type variables with optional type constraints.\n-* **Type inference.** Type annotations on local variable\n-  declarations can be omitted.\n-\n-## First impressions\n-\n-As a curly-brace language in the tradition of C, C++, and JavaScript,\n-Rust looks a lot like other languages you may be familiar with.\n+  parameterized over type variables with optional trait-based type\n+  constraints.\n+* **Trait polymorphism.** Rust's type system features a unique\n+  combination of type classes and object-oriented interfaces.\n \n-~~~~\n-fn boring_old_factorial(n: int) -> int {\n-    let mut result = 1, i = 1;\n-    while i <= n {\n-        result *= i;\n-        i += 1;\n-    }\n-    return result;\n-}\n-~~~~\n+## Scope\n \n-Several differences from C stand out. Types do not come before, but\n-after variable names (preceded by a colon). For local variables\n-(introduced with `let`), types are optional, and will be inferred when\n-left off. Constructs like `while` and `if` do not require parentheses\n-around the condition (though they allow them).\n+This is an introductory tutorial for the Rust programming language. It\n+covers the fundamentals of the language, including the syntax, the\n+type system and memory model, and generics.  [Additional\n+tutorials](#what-next) cover specific language features in greater\n+depth.\n \n-You should, however, not conclude that Rust is simply an evolution of\n-C. As will become clear in the rest of this tutorial, it goes in quite\n-a different direction, with efficient, strongly-typed and memory-safe\n-support for many high-level idioms.\n+It assumes the reader is familiar with the basic concepts of\n+programming, and has programmed in one or more other languages\n+before. It will often make comparisons to other languages,\n+particularly those in the C family.\n \n ## Conventions\n \n Throughout the tutorial, words that indicate language keywords or\n-identifiers defined in the example code are displayed in `code font`.\n+identifiers defined in example code are displayed in `code font`.\n \n Code snippets are indented, and also shown in a monospaced font. Not\n all snippets constitute whole programs. For brevity, we'll often show"}]}