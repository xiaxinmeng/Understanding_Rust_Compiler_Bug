{"sha": "054b1ff989e278ad1ea278c87beda25a8587d367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGIxZmY5ODllMjc4YWQxZWEyNzhjODdiZWRhMjVhODU4N2QzNjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T21:45:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:17Z"}, "message": "Remove kludgy imports from vec! macro", "tree": {"sha": "b9850468cfff88171576ad5e77d39309d6389040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9850468cfff88171576ad5e77d39309d6389040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054b1ff989e278ad1ea278c87beda25a8587d367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054b1ff989e278ad1ea278c87beda25a8587d367", "html_url": "https://github.com/rust-lang/rust/commit/054b1ff989e278ad1ea278c87beda25a8587d367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054b1ff989e278ad1ea278c87beda25a8587d367/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db1d356878aa6384df10c75c08f21dc1540495a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db1d356878aa6384df10c75c08f21dc1540495a", "html_url": "https://github.com/rust-lang/rust/commit/9db1d356878aa6384df10c75c08f21dc1540495a"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "44af3d52db982393c6e66d7fd2a00311eab24dde", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -1574,7 +1574,7 @@ mod tests {\n     use std::rand::Rng;\n     use test::Bencher;\n \n-    use {Set, Mutable, MutableSet};\n+    use {Set, Mutable, MutableSet, MutableSeq};\n     use bitv::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n     use vec::Vec;"}, {"sha": "947c87daa846021dcd9d896984ba6d0c15ccea63", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -782,6 +782,8 @@ mod test_btree {\n \n     use super::{BTree, Node, LeafElt};\n \n+    use MutableSeq;\n+\n     //Tests the functionality of the insert methods (which are unfinished).\n     #[test]\n     fn insert_test_one() {"}, {"sha": "ca3f6a746f3354dd5ed2328f235840ad0e18e51a", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -141,6 +141,8 @@ mod test {\n \n     use enum_set::{EnumSet, CLike};\n \n+    use MutableSeq;\n+\n     #[deriving(PartialEq, Show)]\n     #[repr(uint)]\n     enum Foo {"}, {"sha": "db062a70bbb677fdbe03199c9057145a694129e4", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -11,26 +11,8 @@\n #![macro_escape]\n \n /// Create a `std::vec::Vec` containing the arguments.\n-#[cfg(not(test))]\n macro_rules! vec(\n     ($($e:expr),*) => ({\n-        #[allow(unused_imports)]\n-        use std::collections::MutableSeq;\n-\n-        // leading _ to allow empty construction without a warning.\n-        let mut _temp = ::vec::Vec::new();\n-        $(_temp.push($e);)*\n-        _temp\n-    });\n-    ($($e:expr),+,) => (vec!($($e),+))\n-)\n-\n-#[cfg(test)]\n-macro_rules! vec(\n-    ($($e:expr),*) => ({\n-        #[allow(unused_imports)]\n-        use MutableSeq;\n-\n         // leading _ to allow empty construction without a warning.\n         let mut _temp = ::vec::Vec::new();\n         $(_temp.push($e);)*"}, {"sha": "3a4e66b38ae3f17cc033478cb7c7cc244f18b911", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -422,7 +422,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use {Deque, Mutable};\n+    use {Deque, Mutable, MutableSeq};\n     use super::RingBuf;\n     use vec::Vec;\n "}, {"sha": "eb97215c721bc2b38f3345ed05fabfdd04ab4223", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -22,7 +22,7 @@ use core::fmt;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n-use {Collection, Mutable, Map, MutableMap};\n+use {Collection, Mutable, Map, MutableMap, MutableSeq};\n use {vec, slice};\n use vec::Vec;\n "}, {"sha": "c0e903677de354a2155fc23e1d82105e52910c09", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -562,6 +562,8 @@ pub mod raw {\n     use string::String;\n     use vec::Vec;\n \n+    use MutableSeq;\n+\n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};\n     pub use core::str::raw::{slice_unchecked};\n \n@@ -818,7 +820,7 @@ mod tests {\n     use std::option::{Some, None};\n     use std::ptr::RawPtr;\n     use std::iter::{Iterator, DoubleEndedIterator};\n-    use Collection;\n+    use {Collection, MutableSeq};\n \n     use super::*;\n     use std::slice::{Vector, ImmutableVector};"}, {"sha": "5658d07a1d175dc3daee504a2033d36ecb6e79c7", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -1659,7 +1659,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::hash;\n \n-    use {Set, MutableSet, Mutable, MutableMap};\n+    use {Set, MutableSet, Mutable, MutableMap, MutableSeq};\n     use super::{TreeMap, TreeSet};\n \n     #[test]"}, {"sha": "5a00c4b85daface8f1407c5f6c846d0fabeb9d2a", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -682,7 +682,7 @@ mod test_map {\n     use std::uint;\n     use std::hash;\n \n-    use {MutableMap, Map};\n+    use {MutableMap, Map, MutableSeq};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n \n     fn check_integrity<T>(trie: &TrieNode<T>) {\n@@ -1105,7 +1105,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::uint;\n \n-    use {MutableSet, Set};\n+    use {MutableSet, Set, MutableSeq};\n     use super::TrieSet;\n \n     #[test]"}, {"sha": "cb754135bc152d8cf6fa48fd13e94e008ef3d7b1", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -18,6 +18,7 @@\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n use clone::Clone;\n+use collections::MutableSeq;\n use io::IoResult;\n use iter::Iterator;\n use slice::ImmutableVector;"}, {"sha": "3c6c860f516bb63c8c5cd4724a02af5285fc60a0", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054b1ff989e278ad1ea278c87beda25a8587d367/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=054b1ff989e278ad1ea278c87beda25a8587d367", "patch": "@@ -315,9 +315,6 @@ macro_rules! try(\n #[macro_export]\n macro_rules! vec(\n     ($($e:expr),*) => ({\n-        #[allow(unused_imports)]\n-        use std::collections::MutableSeq;\n-\n         // leading _ to allow empty construction without a warning.\n         let mut _temp = ::std::vec::Vec::new();\n         $(_temp.push($e);)*"}]}