{"sha": "fe78b546ed6764cae5d793bf75ff756d94007489", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzhiNTQ2ZWQ2NzY0Y2FlNWQ3OTNiZjc1ZmY3NTZkOTQwMDc0ODk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T16:38:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:33:09Z"}, "message": "merge the \"predeclare\" and \"declare\" phases so we run them per-CGU", "tree": {"sha": "b8d3c5800f5d75bfbd809821e0775072c11c3cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d3c5800f5d75bfbd809821e0775072c11c3cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe78b546ed6764cae5d793bf75ff756d94007489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe78b546ed6764cae5d793bf75ff756d94007489", "html_url": "https://github.com/rust-lang/rust/commit/fe78b546ed6764cae5d793bf75ff756d94007489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe78b546ed6764cae5d793bf75ff756d94007489/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33875055f0f3c1c9c8c697b374f111377f35d8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/33875055f0f3c1c9c8c697b374f111377f35d8e2", "html_url": "https://github.com/rust-lang/rust/commit/33875055f0f3c1c9c8c697b374f111377f35d8e2"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "0a08f49d818dacc71054ab15b1ad162269358b9f", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe78b546ed6764cae5d793bf75ff756d94007489/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe78b546ed6764cae5d793bf75ff756d94007489/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=fe78b546ed6764cae5d793bf75ff756d94007489", "patch": "@@ -1142,43 +1142,29 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     assert_module_sources::assert_module_sources(tcx, &modules);\n \n-    // Instantiate translation items without filling out definitions yet...\n     for ccx in crate_context_list.iter_need_trans() {\n         let dep_node = ccx.codegen_unit().work_product_dep_node();\n         tcx.dep_graph.with_task(dep_node,\n                                 ccx,\n                                 AssertDepGraphSafe(symbol_map.clone()),\n                                 trans_decl_task);\n \n+\n         fn trans_decl_task<'a, 'tcx>(ccx: CrateContext<'a, 'tcx>,\n                                      symbol_map: AssertDepGraphSafe<Rc<SymbolMap<'tcx>>>) {\n+            // Instantiate translation items without filling out definitions yet...\n+\n             // FIXME(#40304): Instead of this, the symbol-map should be an\n             // on-demand thing that we compute.\n             let AssertDepGraphSafe(symbol_map) = symbol_map;\n             let cgu = ccx.codegen_unit();\n             let trans_items = cgu.items_in_deterministic_order(ccx.tcx(), &symbol_map);\n-            for (trans_item, linkage) in trans_items {\n+            for &(trans_item, linkage) in &trans_items {\n                 trans_item.predefine(&ccx, linkage);\n             }\n-        }\n-    }\n \n-    // ... and now that we have everything pre-defined, fill out those definitions.\n-    for ccx in crate_context_list.iter_need_trans() {\n-        let dep_node = ccx.codegen_unit().work_product_dep_node();\n-        tcx.dep_graph.with_task(dep_node,\n-                                ccx,\n-                                AssertDepGraphSafe(symbol_map.clone()),\n-                                trans_def_task);\n-\n-        fn trans_def_task<'a, 'tcx>(ccx: CrateContext<'a, 'tcx>,\n-                                    symbol_map: AssertDepGraphSafe<Rc<SymbolMap<'tcx>>>) {\n-            // FIXME(#40304): Instead of this, the symbol-map should be an\n-            // on-demand thing that we compute.\n-            let AssertDepGraphSafe(symbol_map) = symbol_map;\n-            let cgu = ccx.codegen_unit();\n-            let trans_items = cgu.items_in_deterministic_order(ccx.tcx(), &symbol_map);\n-            for (trans_item, _) in trans_items {\n+            // ... and now that we have everything pre-defined, fill out those definitions.\n+            for &(trans_item, _) in &trans_items {\n                 trans_item.define(&ccx);\n             }\n "}]}