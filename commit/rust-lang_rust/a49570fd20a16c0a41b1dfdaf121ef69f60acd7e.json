{"sha": "a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "node_id": "C_kwDOAAsO6NoAKGE0OTU3MGZkMjBhMTZjMGE0MWIxZGZkYWYxMjFlZjY5ZjYwYWNkN2U", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-06T07:42:04Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-05-02T10:32:07Z"}, "message": "fix TODO comments", "tree": {"sha": "4fe0c783a16760e3636a5177e0dc661eadc590aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe0c783a16760e3636a5177e0dc661eadc590aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "html_url": "https://github.com/rust-lang/rust/commit/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d1f93896fb642cd27cbe8ef481b66e974dbdf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d1f93896fb642cd27cbe8ef481b66e974dbdf9", "html_url": "https://github.com/rust-lang/rust/commit/76d1f93896fb642cd27cbe8ef481b66e974dbdf9"}], "stats": {"total": 149, "additions": 82, "deletions": 67}, "files": [{"sha": "cd3b163e3ac970671a4be3fa45bd90df52d086e4", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -240,8 +240,14 @@ impl fmt::Display for LitKind {\n                     string = symbol\n                 )?;\n             }\n-            // TODO need to reescape\n-            LitKind::CStr(..) => todo!(),\n+            LitKind::CStr(ref bytes, StrStyle::Cooked) => {\n+                write!(f, \"c\\\"{}\\\"\", escape_byte_str_symbol(bytes))?\n+            }\n+            LitKind::CStr(ref bytes, StrStyle::Raw(n)) => {\n+                // This can only be valid UTF-8.\n+                let symbol = str::from_utf8(bytes).unwrap();\n+                write!(f, \"cr{delim}\\\"{symbol}\\\"{delim}\", delim = \"#\".repeat(n as usize),)?;\n+            }\n             LitKind::Int(n, ty) => {\n                 write!(f, \"{n}\")?;\n                 match ty {"}, {"sha": "61b7863c686cf3f2490f972ac846931c1b68a3bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -210,8 +210,10 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n         token::ByteStrRaw(n) => {\n             format!(\"br{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = symbol)\n         }\n-        // TODO\n-        token::CStr | token::CStrRaw(_) => todo!(),\n+        token::CStr => format!(\"c\\\"{symbol}\\\"\"),\n+        token::CStrRaw(n) => {\n+            format!(\"cr{delim}\\\"{symbol}\\\"{delim}\", delim = \"#\".repeat(n as usize))\n+        }\n         token::Integer | token::Float | token::Bool | token::Err => symbol.to_string(),\n     };\n "}, {"sha": "5ef35af0a059ad4cd12a7b6e71cde3dcc2bfea6f", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -19,8 +19,9 @@ fn invalid_type_err(\n     let snippet = cx.sess.source_map().span_to_snippet(span).ok();\n     match ast::LitKind::from_token_lit(token_lit) {\n         Ok(ast::LitKind::CStr(_, _)) => {\n-            // TODO\n-            cx.span_err(span, \"cannot concatenate C string litearls\");\n+            // FIXME(c_str_literals): should concatenation of C string literals\n+            // include the null bytes in the end?\n+            cx.span_err(span, \"cannot concatenate C string literals\");\n         }\n         Ok(ast::LitKind::Char(_)) => {\n             let sugg ="}, {"sha": "891e84a2f3071d8cdbf26f2425f18f19d069b5b3", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -61,8 +61,8 @@ impl FromInternal<token::LitKind> for LitKind {\n             token::StrRaw(n) => LitKind::StrRaw(n),\n             token::ByteStr => LitKind::ByteStr,\n             token::ByteStrRaw(n) => LitKind::ByteStrRaw(n),\n-            // TODO\n-            token::CStr | token::CStrRaw(_) => todo!(),\n+            token::CStr => LitKind::CStr,\n+            token::CStrRaw(n) => LitKind::CStrRaw(n),\n             token::Err => LitKind::Err,\n             token::Bool => unreachable!(),\n         }\n@@ -80,6 +80,8 @@ impl ToInternal<token::LitKind> for LitKind {\n             LitKind::StrRaw(n) => token::StrRaw(n),\n             LitKind::ByteStr => token::ByteStr,\n             LitKind::ByteStrRaw(n) => token::ByteStrRaw(n),\n+            LitKind::CStr => token::CStr,\n+            LitKind::CStrRaw(n) => token::CStrRaw(n),\n             LitKind::Err => token::Err,\n         }\n     }"}, {"sha": "4e5eebd285bbb3acbe058acf61dc770c47488a52", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -311,10 +311,10 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n-    /// Treat `extern \"C\"` function as nounwind.\n-    (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows `c\"foo\"` literals.\n     (active, c_str_literals, \"CURRENT_RUSTC_VERSION\", Some(105723), None),\n+    /// Treat `extern \"C\"` function as nounwind.\n+    (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used."}, {"sha": "ce8c9ebe7ce77aa47999aa41f472efa76e692661", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 51, "deletions": 57, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -361,65 +361,18 @@ impl Cursor<'_> {\n             },\n \n             // Byte literal, byte string literal, raw byte string literal or identifier.\n-            'b' => match (self.first(), self.second()) {\n-                ('\\'', _) => {\n-                    self.bump();\n-                    let terminated = self.single_quoted_string();\n-                    let suffix_start = self.pos_within_token();\n-                    if terminated {\n-                        self.eat_literal_suffix();\n-                    }\n-                    let kind = Byte { terminated };\n-                    Literal { kind, suffix_start }\n-                }\n-                ('\"', _) => {\n-                    self.bump();\n-                    let terminated = self.double_quoted_string();\n-                    let suffix_start = self.pos_within_token();\n-                    if terminated {\n-                        self.eat_literal_suffix();\n-                    }\n-                    let kind = ByteStr { terminated };\n-                    Literal { kind, suffix_start }\n-                }\n-                ('r', '\"') | ('r', '#') => {\n-                    self.bump();\n-                    let res = self.raw_double_quoted_string(2);\n-                    let suffix_start = self.pos_within_token();\n-                    if res.is_ok() {\n-                        self.eat_literal_suffix();\n-                    }\n-                    let kind = RawByteStr { n_hashes: res.ok() };\n-                    Literal { kind, suffix_start }\n-                }\n-                _ => self.ident_or_unknown_prefix(),\n-            },\n+            'b' => self.c_or_byte_string(\n+                |terminated| ByteStr { terminated },\n+                |n_hashes| RawByteStr { n_hashes },\n+                Some(|terminated| Byte { terminated }),\n+            ),\n \n-            // TODO deduplicate this code\n             // c-string literal, raw c-string literal or identifier.\n-            'c' => match (self.first(), self.second()) {\n-                ('\"', _) => {\n-                    self.bump();\n-                    let terminated = self.double_quoted_string();\n-                    let suffix_start = self.pos_within_token();\n-                    if terminated {\n-                        self.eat_literal_suffix();\n-                    }\n-                    let kind = CStr { terminated };\n-                    Literal { kind, suffix_start }\n-                }\n-                ('r', '\"') | ('r', '#') => {\n-                    self.bump();\n-                    let res = self.raw_double_quoted_string(2);\n-                    let suffix_start = self.pos_within_token();\n-                    if res.is_ok() {\n-                        self.eat_literal_suffix();\n-                    }\n-                    let kind = RawCStr { n_hashes: res.ok() };\n-                    Literal { kind, suffix_start }\n-                }\n-                _ => self.ident_or_unknown_prefix(),\n-            },\n+            'c' => self.c_or_byte_string(\n+                |terminated| CStr { terminated },\n+                |n_hashes| RawCStr { n_hashes },\n+                None,\n+            ),\n \n             // Identifier (this should be checked after other variant that can\n             // start as identifier).\n@@ -583,6 +536,47 @@ impl Cursor<'_> {\n         }\n     }\n \n+    fn c_or_byte_string(\n+        &mut self,\n+        mk_kind: impl FnOnce(bool) -> LiteralKind,\n+        mk_kind_raw: impl FnOnce(Option<u8>) -> LiteralKind,\n+        single_quoted: Option<fn(bool) -> LiteralKind>,\n+    ) -> TokenKind {\n+        match (self.first(), self.second(), single_quoted) {\n+            ('\\'', _, Some(mk_kind)) => {\n+                self.bump();\n+                let terminated = self.single_quoted_string();\n+                let suffix_start = self.pos_within_token();\n+                if terminated {\n+                    self.eat_literal_suffix();\n+                }\n+                let kind = mk_kind(terminated);\n+                Literal { kind, suffix_start }\n+            }\n+            ('\"', _, _) => {\n+                self.bump();\n+                let terminated = self.double_quoted_string();\n+                let suffix_start = self.pos_within_token();\n+                if terminated {\n+                    self.eat_literal_suffix();\n+                }\n+                let kind = mk_kind(terminated);\n+                Literal { kind, suffix_start }\n+            }\n+            ('r', '\"', _) | ('r', '#', _) => {\n+                self.bump();\n+                let res = self.raw_double_quoted_string(2);\n+                let suffix_start = self.pos_within_token();\n+                if res.is_ok() {\n+                    self.eat_literal_suffix();\n+                }\n+                let kind = mk_kind_raw(res.ok());\n+                Literal { kind, suffix_start }\n+            }\n+            _ => self.ident_or_unknown_prefix(),\n+        }\n+    }\n+\n     fn number(&mut self, first_digit: char) -> LiteralKind {\n         debug_assert!('0' <= self.prev() && self.prev() <= '9');\n         let mut base = Base::Decimal;"}, {"sha": "caecda1bc63fdcb132d4ad040dc485858dfa5487", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -337,6 +337,8 @@ pub enum LitKind {\n     StrRaw(u8),\n     ByteStr,\n     ByteStrRaw(u8),\n+    CStr,\n+    CStrRaw(u8),\n     Err,\n }\n \n@@ -350,6 +352,8 @@ rpc_encode_decode!(\n         StrRaw(n),\n         ByteStr,\n         ByteStrRaw(n),\n+        CStr,\n+        CStrRaw(n),\n         Err,\n     }\n );"}, {"sha": "b27da26ed23bbb776e79c53706ab0280ce20e1b3", "filename": "tests/ui/rfcs/rfc-3348-c-string-literals/gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49570fd20a16c0a41b1dfdaf121ef69f60acd7e/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fgate.rs?ref=a49570fd20a16c0a41b1dfdaf121ef69f60acd7e", "patch": "@@ -1,3 +1,9 @@\n+// gate-test-c_str_literals\n+\n+macro_rules! m {\n+    ($t:tt) => {}\n+}\n+\n fn main() {\n     c\"foo\";\n     //~^ ERROR: `c\"..\"` literals are experimental"}]}