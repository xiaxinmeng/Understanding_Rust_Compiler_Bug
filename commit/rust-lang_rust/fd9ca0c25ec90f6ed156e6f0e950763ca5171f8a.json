{"sha": "fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "node_id": "C_kwDOAAsO6NoAKGZkOWNhMGMyNWVjOTBmNmVkMTU2ZTZmMGU5NTA3NjNjYTUxNzFmOGE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:33Z"}, "message": "Rollup merge of #93080 - SkiFire13:itermut-as_mut_slice, r=m-ou-se\n\nImplement `core::slice::IterMut::as_mut_slice` and `impl<T> AsMut<[T]> for IterMut<'_, T>`\n\nAs per [the zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60std.3A.3Aslice.3A.3AIterMut.3A.3Aas_mut_slice.60), the `AsMut` impl has been commented out, with a comment near the `#[unstable(...)]` to uncomment it when `as_mut_slice` gets stabilized.", "tree": {"sha": "3deb4bb4d277c39d6ed4a1a5d2b2677ba78a9804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3deb4bb4d277c39d6ed4a1a5d2b2677ba78a9804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6CCRBK7hj4Ov3rIwAAmjsIAKNdtRM80p+qeCKUJwXDuehP\ntOHFcq/VeKcfk0W8j98oOkA5kNOcbtB1YzlJkvxGFA1Sw+waTWXZlaY2MxCuogEM\nYE2DUr5c408fZ96BDxzQcMqI0Y53rFkDpGjcOGnsj6osYs/EYQJKuf7G63ra4D5J\n35jGvTpGlqoRzHlRp3Mo5gunChB3D1zD7MHWyPCZm6K+5JIgdUQQyHIvBgNFQI3j\nEq3Ir/ds2Fc8areWcEP7lUp2noIKaGOHVp+5fNUjspd9lncX4Jt8Kd5ULJIVDtgz\nmMxBmpfOfyTmP+N4LAlq3vtSO2ZubrjioqCn/PQuNiDcIFvbOQilTTVUqG3Ja/U=\n=S443\n-----END PGP SIGNATURE-----\n", "payload": "tree 3deb4bb4d277c39d6ed4a1a5d2b2677ba78a9804\nparent 4104596251818f4f588051c7a8172ca9f5a195bf\nparent c867529461427bfb38e5a17461495b6a451ee374\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729793 +0200\ncommitter GitHub <noreply@github.com> 1655729793 +0200\n\nRollup merge of #93080 - SkiFire13:itermut-as_mut_slice, r=m-ou-se\n\nImplement `core::slice::IterMut::as_mut_slice` and `impl<T> AsMut<[T]> for IterMut<'_, T>`\n\nAs per [the zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60std.3A.3Aslice.3A.3AIterMut.3A.3Aas_mut_slice.60), the `AsMut` impl has been commented out, with a comment near the `#[unstable(...)]` to uncomment it when `as_mut_slice` gets stabilized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "html_url": "https://github.com/rust-lang/rust/commit/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4104596251818f4f588051c7a8172ca9f5a195bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4104596251818f4f588051c7a8172ca9f5a195bf", "html_url": "https://github.com/rust-lang/rust/commit/4104596251818f4f588051c7a8172ca9f5a195bf"}, {"sha": "c867529461427bfb38e5a17461495b6a451ee374", "url": "https://api.github.com/repos/rust-lang/rust/commits/c867529461427bfb38e5a17461495b6a451ee374", "html_url": "https://github.com/rust-lang/rust/commit/c867529461427bfb38e5a17461495b6a451ee374"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "35d00b9dda6639aa4335ab3a654db29595828182", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "patch": "@@ -306,6 +306,47 @@ impl<'a, T> IterMut<'a, T> {\n     pub fn as_slice(&self) -> &[T] {\n         self.make_slice()\n     }\n+\n+    /// Views the underlying data as a mutable subslice of the original data.\n+    ///\n+    /// To avoid creating `&mut [T]` references that alias, the returned slice\n+    /// borrows its lifetime from the iterator the method is applied on.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(slice_iter_mut_as_mut_slice)]\n+    ///\n+    /// let mut slice: &mut [usize] = &mut [1, 2, 3];\n+    ///\n+    /// // First, we get the iterator:\n+    /// let mut iter = slice.iter_mut();\n+    /// // Then, we get a mutable slice from it:\n+    /// let mut_slice = iter.as_mut_slice();\n+    /// // So if we check what the `as_mut_slice` method returned, we have \"[1, 2, 3]\":\n+    /// assert_eq!(mut_slice, &mut [1, 2, 3]);\n+    ///\n+    /// // We can use it to mutate the slice:\n+    /// mut_slice[0] = 4;\n+    /// mut_slice[2] = 5;\n+    ///\n+    /// // Next, we can move to the second element of the slice, checking that\n+    /// // it yields the value we just wrote:\n+    /// assert_eq!(iter.next(), Some(&mut 4));\n+    /// // Now `as_mut_slice` returns \"[2, 5]\":\n+    /// assert_eq!(iter.as_mut_slice(), &mut [2, 5]);\n+    /// ```\n+    #[must_use]\n+    // FIXME: Uncomment the `AsMut<[T]>` impl when this gets stabilized.\n+    #[unstable(feature = \"slice_iter_mut_as_mut_slice\", issue = \"93079\")]\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n+        // SAFETY: the iterator was created from a mutable slice with pointer\n+        // `self.ptr` and length `len!(self)`. This guarantees that all the prerequisites\n+        // for `from_raw_parts_mut` are fulfilled.\n+        unsafe { from_raw_parts_mut(self.ptr.as_ptr(), len!(self)) }\n+    }\n }\n \n #[stable(feature = \"slice_iter_mut_as_slice\", since = \"1.53.0\")]\n@@ -315,6 +356,13 @@ impl<T> AsRef<[T]> for IterMut<'_, T> {\n     }\n }\n \n+// #[stable(feature = \"slice_iter_mut_as_mut_slice\", since = \"FIXME\")]\n+// impl<T> AsMut<[T]> for IterMut<'_, T> {\n+//     fn as_mut(&mut self) -> &mut [T] {\n+//         self.as_mut_slice()\n+//     }\n+// }\n+\n iterator! {struct IterMut -> *mut T, &'a mut T, mut, {mut}, {}}\n \n /// An internal abstraction over the splitting iterators, so that"}]}