{"sha": "5da76eeaad7b57eaee81fc28067952f96abf8377", "node_id": "C_kwDOAAsO6NoAKDVkYTc2ZWVhYWQ3YjU3ZWFlZTgxZmMyODA2Nzk1MmY5NmFiZjgzNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T03:45:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T03:45:36Z"}, "message": "Auto merge of #95711 - Dylan-DPC:rollup-ujss3oi, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95659 (Rely on #[link] attribute for unwind on Fuchsia.)\n - #95684 (rustdoc: Fix item info display overflow)\n - #95693 (interp: pass TyCtxt to Machine methods that do not take InterpCx)\n - #95699 (fix: Vec leak when capacity is 0)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c2cc39f826782ce19f6001d93e0f430810aea709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2cc39f826782ce19f6001d93e0f430810aea709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da76eeaad7b57eaee81fc28067952f96abf8377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da76eeaad7b57eaee81fc28067952f96abf8377", "html_url": "https://github.com/rust-lang/rust/commit/5da76eeaad7b57eaee81fc28067952f96abf8377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da76eeaad7b57eaee81fc28067952f96abf8377/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b5e0cbb95ce5b1cbf91d49fb45d122479e3363", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b5e0cbb95ce5b1cbf91d49fb45d122479e3363", "html_url": "https://github.com/rust-lang/rust/commit/26b5e0cbb95ce5b1cbf91d49fb45d122479e3363"}, {"sha": "b4527492b1630c18deb7206ec703d71a372da664", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4527492b1630c18deb7206ec703d71a372da664", "html_url": "https://github.com/rust-lang/rust/commit/b4527492b1630c18deb7206ec703d71a372da664"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "c44e27fc4a098bfee17adf1c52c14cb7ad2fb371", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::hash::Hash;\n@@ -471,6 +471,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         machine: &Self,\n         alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx>,"}, {"sha": "ddfbcbdd22e162495e2621d8ab67184c11ed4d68", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -7,7 +7,7 @@ use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_middle::mir;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -246,6 +246,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// `def_id` is `Some` if this is the \"lazy\" allocation of a static.\n     #[inline]\n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         _allocation: ConstAllocation<'tcx>,\n@@ -317,6 +318,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// need to mutate.\n     #[inline(always)]\n     fn memory_read(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_extra: &Self::AllocExtra,\n         _tag: Self::PointerTag,\n@@ -328,6 +330,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Hook for performing extra checks on a memory write access.\n     #[inline(always)]\n     fn memory_written(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n         _tag: Self::PointerTag,\n@@ -339,6 +342,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Hook for performing extra operations on a memory deallocation.\n     #[inline(always)]\n     fn memory_deallocated(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n         _tag: Self::PointerTag,"}, {"sha": "a02115a110b7b734d1ba6cf0f4ceb64e22612c56", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -327,6 +327,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Let the machine take some extra action\n         let size = alloc.size();\n         M::memory_deallocated(\n+            *self.tcx,\n             &mut self.machine,\n             &mut alloc.extra,\n             ptr.provenance,\n@@ -509,7 +510,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (self.tcx.eval_static_initializer(def_id)?, Some(def_id))\n             }\n         };\n-        M::before_access_global(&self.machine, id, alloc, def_id, is_write)?;\n+        M::before_access_global(*self.tcx, &self.machine, id, alloc, def_id, is_write)?;\n         // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n         let alloc = M::init_allocation_extra(\n             self,\n@@ -575,7 +576,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         if let Some((alloc_id, offset, ptr, alloc)) = ptr_and_alloc {\n             let range = alloc_range(offset, size);\n-            M::memory_read(&self.machine, &alloc.extra, ptr.provenance, range)?;\n+            M::memory_read(*self.tcx, &self.machine, &alloc.extra, ptr.provenance, range)?;\n             Ok(Some(AllocRef { alloc, range, tcx: *self.tcx, alloc_id }))\n         } else {\n             // Even in this branch we have to be sure that we actually access the allocation, in\n@@ -636,7 +637,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.\n             let (alloc, machine) = self.get_alloc_raw_mut(alloc_id)?;\n             let range = alloc_range(offset, size);\n-            M::memory_written(machine, &mut alloc.extra, ptr.provenance, range)?;\n+            M::memory_written(tcx, machine, &mut alloc.extra, ptr.provenance, range)?;\n             Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))\n         } else {\n             Ok(None)\n@@ -1009,7 +1010,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let src_alloc = self.get_alloc_raw(src_alloc_id)?;\n         let src_range = alloc_range(src_offset, size);\n-        M::memory_read(&self.machine, &src_alloc.extra, src.provenance, src_range)?;\n+        M::memory_read(*tcx, &self.machine, &src_alloc.extra, src.provenance, src_range)?;\n         // We need the `dest` ptr for the next operation, so we get it now.\n         // We already did the source checks and called the hooks so we are good to return early.\n         let Some((dest_alloc_id, dest_offset, dest)) = dest_parts else {\n@@ -1034,7 +1035,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_alloc_raw_mut(dest_alloc_id)?;\n         let dest_range = alloc_range(dest_offset, size * num_copies);\n-        M::memory_written(extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;\n+        M::memory_written(*tcx, extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;\n         let dest_bytes = dest_alloc\n             .get_bytes_mut_ptr(&tcx, dest_range)\n             .map_err(|e| e.to_interp_error(dest_alloc_id))?"}, {"sha": "a342aeed905e9ba17f097f5f03d0026e35f2da1e", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -265,6 +265,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx, Self::PointerTag, Self::AllocExtra>,"}, {"sha": "159503ad2d3f7c11878634a76ee90583b5c264e5", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -261,6 +261,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx, Self::PointerTag, Self::AllocExtra>,"}, {"sha": "9dbac3c36ffb2871ce5e93f30dc3aef1fa94b9c3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -168,7 +168,8 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n     #[cfg(not(no_global_oom_handling))]\n     fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {\n-        if mem::size_of::<T>() == 0 {\n+        // Don't allocate here because `Drop` will not deallocate when `capacity` is 0.\n+        if mem::size_of::<T>() == 0 || capacity == 0 {\n             Self::new_in(alloc)\n         } else {\n             // We avoid `unwrap_or_else` here because it bloats the amount of"}, {"sha": "61d3f45ca6523bd003cd97a391cbe6072034daf1", "filename": "library/unwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -40,8 +40,6 @@ fn main() {\n         // This is handled in the target spec with late_link_args_[static|dynamic]\n     } else if target.contains(\"uwp-windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=unwind\");\n-    } else if target.contains(\"fuchsia\") {\n-        println!(\"cargo:rustc-link-lib=unwind\");\n     } else if target.contains(\"haiku\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"redox\") {"}, {"sha": "bbde4bee23f26c58aac827c8ca1b38719f9f2729", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -1 +1 @@\n-0.8.4\n\\ No newline at end of file\n+0.8.5\n\\ No newline at end of file"}, {"sha": "e223b30650541cd049ab850856880d7baad0e157", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -1772,7 +1772,7 @@ pub(crate) fn render_impl_summary(\n     let is_trait = i.inner_impl().trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-            write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);\n+            write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n         }\n     }\n "}, {"sha": "4ff719bfb7ddcf6257b1f8109efb3d38b90d6a7d", "filename": "src/test/rustdoc-gui/item-info-overflow.goml", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -0,0 +1,28 @@\n+// This test ensures that the \"item-info\" elements don't overflow.\n+goto: file://|DOC_PATH|/lib2/struct.LongItemInfo.html\n+// We set a fixed size so there is no chance of \"random\" resize.\n+size: (1200, 870)\n+// Logically, the \"item-decl\" and the \"item-info\" should have the same scroll width.\n+compare-elements-property: (\".docblock.item-decl\", \".item-info\", [\"scrollWidth\"])\n+assert-property: (\".item-info\", {\"scrollWidth\": \"890\"})\n+// Just to be sure we're comparing the correct \"item-info\":\n+assert-text: (\n+    \".item-info\",\n+    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    STARTS_WITH,\n+)\n+\n+// Checking the \"item-info\" on an impl block as well:\n+goto: file://|DOC_PATH|/lib2/struct.LongItemInfo2.html\n+compare-elements-property: (\n+    \"#impl-SimpleTrait .item-info\",\n+    \"#impl-SimpleTrait + .docblock\",\n+    [\"scrollWidth\"],\n+)\n+assert-property: (\"#impl-SimpleTrait .item-info\", {\"scrollWidth\": \"866\"})\n+// Just to be sure we're comparing the correct \"item-info\":\n+assert-text: (\n+    \"#impl-SimpleTrait .item-info\",\n+    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    STARTS_WITH,\n+)"}, {"sha": "83e86c439344a08c90331587e300fc10e02fb477", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da76eeaad7b57eaee81fc28067952f96abf8377/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=5da76eeaad7b57eaee81fc28067952f96abf8377", "patch": "@@ -120,3 +120,13 @@ pub struct HasALongTraitWithParams {}\n pub trait LongTraitWithParamsBananaBananaBanana<T> {}\n \n impl LongTraitWithParamsBananaBananaBanana<usize> for HasALongTraitWithParams {}\n+\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"emscripten\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\")))]\n+pub struct LongItemInfo;\n+\n+pub trait SimpleTrait {}\n+pub struct LongItemInfo2;\n+\n+/// Some docs.\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"emscripten\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\")))]\n+impl SimpleTrait for LongItemInfo2 {}"}]}