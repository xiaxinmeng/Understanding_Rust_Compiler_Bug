{"sha": "0ac532686f0134d28602fdb01d7fe128bc2f498e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzUzMjY4NmYwMTM0ZDI4NjAyZmRiMDFkN2ZlMTI4YmMyZjQ5OGU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-09T12:33:42Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-11T15:01:34Z"}, "message": "syntax: remove ast::Sigil.", "tree": {"sha": "923febef6cf5dbe55cff5aa98f38ec0b7e4760bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/923febef6cf5dbe55cff5aa98f38ec0b7e4760bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac532686f0134d28602fdb01d7fe128bc2f498e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac532686f0134d28602fdb01d7fe128bc2f498e", "html_url": "https://github.com/rust-lang/rust/commit/0ac532686f0134d28602fdb01d7fe128bc2f498e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac532686f0134d28602fdb01d7fe128bc2f498e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "html_url": "https://github.com/rust-lang/rust/commit/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e"}], "stats": {"total": 130, "additions": 52, "deletions": 78}, "files": [{"sha": "a27a419e7bec80ad4deb6add49445966b032a57d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0ac532686f0134d28602fdb01d7fe128bc2f498e", "patch": "@@ -359,23 +359,6 @@ pub enum Mutability {\n     MutImmutable,\n }\n \n-#[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n-pub enum Sigil {\n-    BorrowedSigil,\n-    OwnedSigil,\n-    ManagedSigil\n-}\n-\n-impl fmt::Show for Sigil {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            BorrowedSigil => \"&\".fmt(f),\n-            OwnedSigil => \"~\".fmt(f),\n-            ManagedSigil => \"@\".fmt(f),\n-         }\n-    }\n-}\n-\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum ExprVstore {\n     ExprVstoreUniq,                 // ~[1,2,3,4]\n@@ -791,8 +774,6 @@ impl fmt::Show for Onceness {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ClosureTy {\n-    pub sigil: Sigil,\n-    pub region: Option<Lifetime>,\n     pub lifetimes: Vec<Lifetime>,\n     pub fn_style: FnStyle,\n     pub onceness: Onceness,\n@@ -822,7 +803,8 @@ pub enum Ty_ {\n     TyFixedLengthVec(P<Ty>, @Expr),\n     TyPtr(MutTy),\n     TyRptr(Option<Lifetime>, MutTy),\n-    TyClosure(@ClosureTy),\n+    TyClosure(@ClosureTy, Option<Lifetime>),\n+    TyProc(@ClosureTy),\n     TyBareFn(@BareFnTy),\n     TyTup(Vec<P<Ty>> ),\n     TyPath(Path, Option<OwnedSlice<TyParamBound>>, NodeId), // for #7264; see above"}, {"sha": "63df5566fa5df27803e92ddd1fa884eb5ecd3980", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0ac532686f0134d28602fdb01d7fe128bc2f498e", "patch": "@@ -155,11 +155,18 @@ pub trait Folder {\n             TyRptr(ref region, ref mt) => {\n                 TyRptr(fold_opt_lifetime(region, self), fold_mt(mt, self))\n             }\n-            TyClosure(ref f) => {\n+            TyClosure(ref f, ref region) => {\n                 TyClosure(@ClosureTy {\n-                    sigil: f.sigil,\n                     fn_style: f.fn_style,\n-                    region: fold_opt_lifetime(&f.region, self),\n+                    onceness: f.onceness,\n+                    bounds: fold_opt_bounds(&f.bounds, self),\n+                    decl: self.fold_fn_decl(f.decl),\n+                    lifetimes: f.lifetimes.iter().map(|l| fold_lifetime(l, self)).collect(),\n+                }, fold_opt_lifetime(region, self))\n+            }\n+            TyProc(ref f) => {\n+                TyProc(@ClosureTy {\n+                    fn_style: f.fn_style,\n                     onceness: f.onceness,\n                     bounds: fold_opt_bounds(&f.bounds, self),\n                     decl: self.fold_fn_decl(f.decl),"}, {"sha": "88480c1b336a4a6d3cf3543bf80bc18382a721ae", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ac532686f0134d28602fdb01d7fe128bc2f498e", "patch": "@@ -11,7 +11,6 @@\n #![macro_escape]\n \n use abi;\n-use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n use ast::{BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{Provided, Public, FnStyle};\n@@ -49,8 +48,8 @@ use ast::StrStyle;\n use ast::{SelfRegion, SelfStatic, SelfUniq, SelfValue};\n use ast::{TokenTree, TraitMethod, TraitRef, TTDelim, TTSeq, TTTok};\n use ast::{TTNonterminal, TupleVariantKind, Ty, Ty_, TyBot, TyBox};\n-use ast::{TypeField, TyFixedLengthVec, TyClosure, TyBareFn, TyTypeof};\n-use ast::{TyInfer, TypeMethod};\n+use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n+use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyPath, TyPtr, TyRptr};\n use ast::{TyTup, TyU32, TyUniq, TyVec, UnUniq};\n use ast::{UnnamedField, UnsafeBlock, UnsafeFn, ViewItem};\n@@ -923,9 +922,7 @@ impl<'a> Parser<'a> {\n             cf: ret_style,\n             variadic: variadic\n         });\n-        TyClosure(@ClosureTy {\n-            sigil: OwnedSigil,\n-            region: None,\n+        TyProc(@ClosureTy {\n             fn_style: NormalFn,\n             onceness: Once,\n             bounds: bounds,\n@@ -984,14 +981,12 @@ impl<'a> Parser<'a> {\n         });\n \n         TyClosure(@ClosureTy {\n-            sigil: BorrowedSigil,\n-            region: region,\n             fn_style: fn_style,\n             onceness: onceness,\n             bounds: bounds,\n             decl: decl,\n             lifetimes: lifetimes,\n-        })\n+        }, region)\n     }\n \n     pub fn parse_unsafety(&mut self) -> FnStyle {\n@@ -1201,11 +1196,11 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::AT {\n             // MANAGED POINTER\n             self.bump();\n-            self.parse_box_or_uniq_pointee(ManagedSigil)\n+            TyBox(self.parse_ty(false))\n         } else if self.token == token::TILDE {\n             // OWNED POINTER\n             self.bump();\n-            self.parse_box_or_uniq_pointee(OwnedSigil)\n+            TyUniq(self.parse_ty(false))\n         } else if self.token == token::BINOP(token::STAR) {\n             // STAR POINTER (bare pointer?)\n             self.bump();\n@@ -1271,21 +1266,6 @@ impl<'a> Parser<'a> {\n         P(Ty {id: ast::DUMMY_NODE_ID, node: t, span: sp})\n     }\n \n-    // parse the type following a @ or a ~\n-    pub fn parse_box_or_uniq_pointee(&mut self,\n-                                     sigil: ast::Sigil)\n-                                     -> Ty_ {\n-        // other things are parsed as @/~ + a type.  Note that constructs like\n-        // ~[] and ~str will be resolved during typeck to slices and so forth,\n-        // rather than boxed ptrs.  But the special casing of str/vec is not\n-        // reflected in the AST type.\n-        if sigil == OwnedSigil {\n-            TyUniq(self.parse_ty(false))\n-        } else {\n-            TyBox(self.parse_ty(false))\n-        }\n-    }\n-\n     pub fn parse_borrowed_pointee(&mut self) -> Ty_ {\n         // look for `&'lt` or `&'foo ` and interpret `foo` as the region name:\n         let opt_lifetime = self.parse_opt_lifetime();"}, {"sha": "4d911f6a89bdf54fcb15b04897c24f1e1f7e5db7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0ac532686f0134d28602fdb01d7fe128bc2f498e", "patch": "@@ -483,14 +483,23 @@ impl<'a> State<'a> {\n                                    f.fn_style, ast::Many, f.decl, None, &None,\n                                    Some(&generics), None));\n             }\n-            ast::TyClosure(f) => {\n+            ast::TyClosure(f, ref region) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n                     ty_params: OwnedSlice::empty()\n                 };\n-                try!(self.print_ty_fn(None, Some(f.sigil), &f.region,\n-                                   f.fn_style, f.onceness, f.decl, None, &f.bounds,\n-                                   Some(&generics), None));\n+                try!(self.print_ty_fn(None, Some('&'), region, f.fn_style,\n+                                      f.onceness, f.decl, None, &f.bounds,\n+                                      Some(&generics), None));\n+            }\n+            ast::TyProc(f) => {\n+                let generics = ast::Generics {\n+                    lifetimes: f.lifetimes.clone(),\n+                    ty_params: OwnedSlice::empty()\n+                };\n+                try!(self.print_ty_fn(None, Some('~'), &None, f.fn_style,\n+                                      f.onceness, f.decl, None, &f.bounds,\n+                                      Some(&generics), None));\n             }\n             ast::TyPath(ref path, ref bounds, _) => {\n                 try!(self.print_bounded_path(path, bounds));\n@@ -1716,8 +1725,7 @@ impl<'a> State<'a> {\n                     opt_explicit_self: Option<ast::ExplicitSelf_>,\n                     vis: ast::Visibility) -> IoResult<()> {\n         try!(self.head(\"\"));\n-        try!(self.print_fn_header_info(opt_explicit_self, fn_style, abi,\n-                                       ast::Many, None, vis));\n+        try!(self.print_fn_header_info(opt_explicit_self, fn_style, abi, vis));\n         try!(self.nbsp());\n         try!(self.print_ident(name));\n         try!(self.print_generics(generics));\n@@ -2023,7 +2031,7 @@ impl<'a> State<'a> {\n \n     pub fn print_ty_fn(&mut self,\n                        opt_abi: Option<abi::Abi>,\n-                       opt_sigil: Option<ast::Sigil>,\n+                       opt_sigil: Option<char>,\n                        opt_region: &Option<ast::Lifetime>,\n                        fn_style: ast::FnStyle,\n                        onceness: ast::Onceness,\n@@ -2037,15 +2045,15 @@ impl<'a> State<'a> {\n \n         // Duplicates the logic in `print_fn_header_info()`.  This is because that\n         // function prints the sigil in the wrong place.  That should be fixed.\n-        if opt_sigil == Some(ast::OwnedSigil) && onceness == ast::Once {\n+        if opt_sigil == Some('~') && onceness == ast::Once {\n             try!(word(&mut self.s, \"proc\"));\n-        } else if opt_sigil == Some(ast::BorrowedSigil) {\n+        } else if opt_sigil == Some('&') {\n             try!(self.print_extern_opt_abi(opt_abi));\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_onceness(onceness));\n         } else {\n+            assert!(opt_sigil.is_none());\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n-            try!(self.print_opt_sigil(opt_sigil));\n             try!(self.print_fn_style(fn_style));\n             try!(self.print_onceness(onceness));\n             try!(word(&mut self.s, \"fn\"));\n@@ -2062,15 +2070,15 @@ impl<'a> State<'a> {\n         match generics { Some(g) => try!(self.print_generics(g)), _ => () }\n         try!(zerobreak(&mut self.s));\n \n-        if opt_sigil == Some(ast::BorrowedSigil) {\n+        if opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             try!(self.popen());\n         }\n \n         try!(self.print_fn_args(decl, opt_explicit_self));\n \n-        if opt_sigil == Some(ast::BorrowedSigil) {\n+        if opt_sigil == Some('&') {\n             try!(word(&mut self.s, \"|\"));\n         } else {\n             if decl.variadic {\n@@ -2327,22 +2335,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_opt_sigil(&mut self,\n-                           opt_sigil: Option<ast::Sigil>) -> IoResult<()> {\n-        match opt_sigil {\n-            Some(ast::BorrowedSigil) => word(&mut self.s, \"&\"),\n-            Some(ast::OwnedSigil) => word(&mut self.s, \"~\"),\n-            Some(ast::ManagedSigil) => word(&mut self.s, \"@\"),\n-            None => Ok(())\n-        }\n-    }\n-\n     pub fn print_fn_header_info(&mut self,\n                                 _opt_explicit_self: Option<ast::ExplicitSelf_>,\n                                 opt_fn_style: Option<ast::FnStyle>,\n                                 abi: abi::Abi,\n-                                onceness: ast::Onceness,\n-                                opt_sigil: Option<ast::Sigil>,\n                                 vis: ast::Visibility) -> IoResult<()> {\n         try!(word(&mut self.s, visibility_qualified(vis, \"\")));\n \n@@ -2357,9 +2353,7 @@ impl<'a> State<'a> {\n             try!(self.print_opt_fn_style(opt_fn_style));\n         }\n \n-        try!(self.print_onceness(onceness));\n-        try!(word(&mut self.s, \"fn\"));\n-        self.print_opt_sigil(opt_sigil)\n+        word(&mut self.s, \"fn\")\n     }\n \n     pub fn print_fn_style(&mut self, s: ast::FnStyle) -> IoResult<()> {"}, {"sha": "266de67b81d7e0295d1716613935bc38705cf765", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac532686f0134d28602fdb01d7fe128bc2f498e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0ac532686f0134d28602fdb01d7fe128bc2f498e", "patch": "@@ -328,7 +328,7 @@ pub fn walk_ty<E: Clone, V: Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n                 visitor.visit_ty(tuple_element_type, env.clone())\n             }\n         }\n-        TyClosure(ref function_declaration) => {\n+        TyClosure(ref function_declaration, ref region) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(argument.ty, env.clone())\n             }\n@@ -338,11 +338,22 @@ pub fn walk_ty<E: Clone, V: Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n             }\n             visitor.visit_opt_lifetime_ref(\n                 typ.span,\n-                &function_declaration.region,\n+                region,\n                 env.clone());\n             walk_lifetime_decls(visitor, &function_declaration.lifetimes,\n                                 env.clone());\n         }\n+        TyProc(ref function_declaration) => {\n+            for argument in function_declaration.decl.inputs.iter() {\n+                visitor.visit_ty(argument.ty, env.clone())\n+            }\n+            visitor.visit_ty(function_declaration.decl.output, env.clone());\n+            for bounds in function_declaration.bounds.iter() {\n+                walk_ty_param_bounds(visitor, bounds, env.clone())\n+            }\n+            walk_lifetime_decls(visitor, &function_declaration.lifetimes,\n+                                env.clone());\n+        }\n         TyBareFn(ref function_declaration) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(argument.ty, env.clone())"}]}