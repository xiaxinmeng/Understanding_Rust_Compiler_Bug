{"sha": "d46c3e3411b4971e31c9ead8126cc95114388b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmMzZTM0MTFiNDk3MWUzMWM5ZWFkODEyNmNjOTUxMTQzODhiM2I=", "commit": {"author": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2021-01-03T00:10:52Z"}, "committer": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2021-01-11T00:48:11Z"}, "message": "Tweak `?` inference error messages", "tree": {"sha": "a1a167688697bcd9f678116b98cf1f70b1546836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a167688697bcd9f678116b98cf1f70b1546836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46c3e3411b4971e31c9ead8126cc95114388b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46c3e3411b4971e31c9ead8126cc95114388b3b", "html_url": "https://github.com/rust-lang/rust/commit/d46c3e3411b4971e31c9ead8126cc95114388b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46c3e3411b4971e31c9ead8126cc95114388b3b/comments", "author": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a39ed526e2d0a4d191903d4a9efc69c587335a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a39ed526e2d0a4d191903d4a9efc69c587335a", "html_url": "https://github.com/rust-lang/rust/commit/62a39ed526e2d0a4d191903d4a9efc69c587335a"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "aaab89ace0ad9c84afa4633f6b95b171c8481638", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d46c3e3411b4971e31c9ead8126cc95114388b3b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46c3e3411b4971e31c9ead8126cc95114388b3b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=d46c3e3411b4971e31c9ead8126cc95114388b3b", "patch": "@@ -166,14 +166,14 @@ impl UseDiagnostic<'_> {\n     /// Return a descriptor of the value at the use site\n     fn descr(&self) -> &'static str {\n         match self {\n-            Self::TryConversion { .. } => \"`?` error\",\n+            Self::TryConversion { .. } => \"error for `?` operator\",\n         }\n     }\n \n     /// Return a descriptor of the type at the use site\n     fn type_descr(&self) -> &'static str {\n         match self {\n-            Self::TryConversion { .. } => \"`?` error type\",\n+            Self::TryConversion { .. } => \"error type for `?` operator\",\n         }\n     }\n \n@@ -188,20 +188,17 @@ impl UseDiagnostic<'_> {\n     fn attach_note(&self, err: &mut DiagnosticBuilder<'_>) {\n         match *self {\n             Self::TryConversion { pre_ty, post_ty, .. } => {\n-                let pre_ty = pre_ty.to_string();\n-                let post_ty = post_ty.to_string();\n+                let intro = \"`?` implicitly converts the error value\";\n \n-                let intro = \"the `?` operation implicitly converts the error value\";\n-\n-                let msg = match (pre_ty.as_str(), post_ty.as_str()) {\n-                    (\"_\", \"_\") => format!(\"{} using the `From` trait\", intro),\n-                    (_, \"_\") => {\n+                let msg = match (pre_ty.is_ty_infer(), post_ty.is_ty_infer()) {\n+                    (true, true) => format!(\"{} using the `From` trait\", intro),\n+                    (false, true) => {\n                         format!(\"{} into a type implementing `From<{}>`\", intro, pre_ty)\n                     }\n-                    (\"_\", _) => {\n+                    (true, false) => {\n                         format!(\"{} into `{}` using the `From` trait\", intro, post_ty)\n                     }\n-                    (_, _) => {\n+                    (false, false) => {\n                         format!(\n                             \"{} into `{}` using its implementation of `From<{}>`\",\n                             intro, post_ty, pre_ty"}, {"sha": "2875cef680117215236af8f365ebb5e6f3d31937", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=d46c3e3411b4971e31c9ead8126cc95114388b3b", "patch": "@@ -13,9 +13,9 @@ error[E0282]: type annotations needed for `impl Future`\n LL |     let fut = async {\n    |         --- consider giving `fut` the explicit type `impl Future`, with the type parameters specified\n LL |         make_unit()?;\n-   |                    ^ cannot infer type of `?` error\n+   |                    ^ cannot infer type of error for `?` operator\n    |\n-   = note: the `?` operation implicitly converts the error value into a type implementing `From<std::io::Error>`\n+   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "282bc13e9e7809afb33daec3acaf86a5caf3d2d7", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=d46c3e3411b4971e31c9ead8126cc95114388b3b", "patch": "@@ -4,9 +4,9 @@ error[E0282]: type annotations needed\n LL |     let fut = async {\n    |         --- consider giving `fut` a type\n LL |         make_unit()?;\n-   |                    ^ cannot infer type of `?` error\n+   |                    ^ cannot infer type of error for `?` operator\n    |\n-   = note: the `?` operation implicitly converts the error value into a type implementing `From<std::io::Error>`\n+   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n \n error: aborting due to previous error\n "}, {"sha": "475ed00d10752c5b6643498a94e5189d3221bb61", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=d46c3e3411b4971e31c9ead8126cc95114388b3b", "patch": "@@ -2,9 +2,9 @@ error[E0282]: type annotations needed for the closure `fn((), ()) -> std::result\n   --> $DIR/cannot-infer-closure.rs:3:15\n    |\n LL |         Err(a)?;\n-   |               ^ cannot infer type of `?` error\n+   |               ^ cannot infer type of error for `?` operator\n    |\n-   = note: the `?` operation implicitly converts the error value into a type implementing `From<()>`\n+   = note: `?` implicitly converts the error value into a type implementing `From<()>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = |a: (), b: ()| -> std::result::Result<(), _> {"}, {"sha": "a64503fa667c73f5ff7d88c021753bcb7d222269", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d46c3e3411b4971e31c9ead8126cc95114388b3b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=d46c3e3411b4971e31c9ead8126cc95114388b3b", "patch": "@@ -2,9 +2,9 @@ error[E0282]: type annotations needed for the closure `fn() -> std::result::Resu\n   --> $DIR/cannot-infer-partial-try-return.rs:19:9\n    |\n LL |         infallible()?;\n-   |         ^^^^^^^^^^^^^ cannot infer type of `?` error\n+   |         ^^^^^^^^^^^^^ cannot infer type of error for `?` operator\n    |\n-   = note: the `?` operation implicitly converts the error value into `QualifiedError<_>` using its implementation of `From<Infallible>`\n+   = note: `?` implicitly converts the error value into `QualifiedError<_>` using its implementation of `From<Infallible>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = || -> std::result::Result<(), QualifiedError<_>> {"}]}