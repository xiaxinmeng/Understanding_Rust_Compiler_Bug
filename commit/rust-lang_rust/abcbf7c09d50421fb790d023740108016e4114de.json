{"sha": "abcbf7c09d50421fb790d023740108016e4114de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiY2JmN2MwOWQ1MDQyMWZiNzkwZDAyMzc0MDEwODAxNmU0MTE0ZGU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-30T21:45:00Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-11T21:08:20Z"}, "message": "Document stable versions of `f32` and `f64` intrinsics\n\nFix links", "tree": {"sha": "4e8a1285a6adc73548d00b9e59536e1f0ce84253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8a1285a6adc73548d00b9e59536e1f0ce84253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abcbf7c09d50421fb790d023740108016e4114de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abcbf7c09d50421fb790d023740108016e4114de", "html_url": "https://github.com/rust-lang/rust/commit/abcbf7c09d50421fb790d023740108016e4114de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abcbf7c09d50421fb790d023740108016e4114de/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e0a2c50d063bd7eb79aa55d16cd5fee715c280", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e0a2c50d063bd7eb79aa55d16cd5fee715c280", "html_url": "https://github.com/rust-lang/rust/commit/95e0a2c50d063bd7eb79aa55d16cd5fee715c280"}], "stats": {"total": 242, "additions": 240, "deletions": 2}, "files": [{"sha": "0aae613681158dbe6958c07060f5d189d319ca42", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/abcbf7c09d50421fb790d023740108016e4114de/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbf7c09d50421fb790d023740108016e4114de/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=abcbf7c09d50421fb790d023740108016e4114de", "patch": "@@ -553,28 +553,148 @@ extern \"rust-intrinsic\" {\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Maximum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Minimum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using a sized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// as the `order`. For example,\n+    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Minimum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Minimum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Maximum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Maximum with the current value using an unsized comparison.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// as the `order`. For example,\n+    /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n@@ -613,9 +733,33 @@ extern \"rust-intrinsic\" {\n \n extern \"rust-intrinsic\" {\n \n+    /// An atomic fence.\n+    /// The stabilized version of this intrinsic is available in\n+    /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n+    /// by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// as the `order`.\n     pub fn atomic_fence();\n+    /// An atomic fence.\n+    /// The stabilized version of this intrinsic is available in\n+    /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n+    /// by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// as the `order`.\n     pub fn atomic_fence_acq();\n+    /// An atomic fence.\n+    /// The stabilized version of this intrinsic is available in\n+    /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n+    /// by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// as the `order`.\n     pub fn atomic_fence_rel();\n+    /// An atomic fence.\n+    /// The stabilized version of this intrinsic is available in\n+    /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n+    /// by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// as the `order`.\n     pub fn atomic_fence_acqrel();\n \n     /// A compiler-only memory barrier.\n@@ -625,8 +769,26 @@ extern \"rust-intrinsic\" {\n     /// appropriate for operations on the same thread that may be preempted,\n     /// such as when interacting with signal handlers.\n     pub fn atomic_singlethreadfence();\n+    /// A compiler-only memory barrier.\n+    ///\n+    /// Memory accesses will never be reordered across this barrier by the\n+    /// compiler, but no instructions will be emitted for it. This is\n+    /// appropriate for operations on the same thread that may be preempted,\n+    /// such as when interacting with signal handlers.\n     pub fn atomic_singlethreadfence_acq();\n+    /// A compiler-only memory barrier.\n+    ///\n+    /// Memory accesses will never be reordered across this barrier by the\n+    /// compiler, but no instructions will be emitted for it. This is\n+    /// appropriate for operations on the same thread that may be preempted,\n+    /// such as when interacting with signal handlers.\n     pub fn atomic_singlethreadfence_rel();\n+    /// A compiler-only memory barrier.\n+    ///\n+    /// Memory accesses will never be reordered across this barrier by the\n+    /// compiler, but no instructions will be emitted for it. This is\n+    /// appropriate for operations on the same thread that may be preempted,\n+    /// such as when interacting with signal handlers.\n     pub fn atomic_singlethreadfence_acqrel();\n \n     /// Magic intrinsic that derives its meaning from attributes\n@@ -1047,92 +1209,164 @@ extern \"rust-intrinsic\" {\n     pub fn unaligned_volatile_store<T>(dst: *mut T, val: T);\n \n     /// Returns the square root of an `f32`\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n     pub fn sqrtf32(x: f32) -> f32;\n     /// Returns the square root of an `f64`\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n     pub fn sqrtf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an integer power.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::powi`](../../std/primitive.f32.html#method.powi)\n     pub fn powif32(a: f32, x: i32) -> f32;\n     /// Raises an `f64` to an integer power.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::powi`](../../std/primitive.f64.html#method.powi)\n     pub fn powif64(a: f64, x: i32) -> f64;\n \n     /// Returns the sine of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::sin`](../../std/primitive.f32.html#method.sin)\n     pub fn sinf32(x: f32) -> f32;\n     /// Returns the sine of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::sin`](../../std/primitive.f64.html#method.sin)\n     pub fn sinf64(x: f64) -> f64;\n \n     /// Returns the cosine of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::cos`](../../std/primitive.f32.html#method.cos)\n     pub fn cosf32(x: f32) -> f32;\n     /// Returns the cosine of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::cos`](../../std/primitive.f64.html#method.cos)\n     pub fn cosf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an `f32` power.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::powf`](../../std/primitive.f32.html#method.powf)\n     pub fn powf32(a: f32, x: f32) -> f32;\n     /// Raises an `f64` to an `f64` power.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::powf`](../../std/primitive.f64.html#method.powf)\n     pub fn powf64(a: f64, x: f64) -> f64;\n \n     /// Returns the exponential of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::exp`](../../std/primitive.f32.html#method.exp)\n     pub fn expf32(x: f32) -> f32;\n     /// Returns the exponential of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::exp`](../../std/primitive.f64.html#method.exp)\n     pub fn expf64(x: f64) -> f64;\n \n     /// Returns 2 raised to the power of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::exp2`](../../std/primitive.f32.html#method.exp2)\n     pub fn exp2f32(x: f32) -> f32;\n     /// Returns 2 raised to the power of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::exp2`](../../std/primitive.f64.html#method.exp2)\n     pub fn exp2f64(x: f64) -> f64;\n \n     /// Returns the natural logarithm of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::ln`](../../std/primitive.f32.html#method.ln)\n     pub fn logf32(x: f32) -> f32;\n     /// Returns the natural logarithm of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::ln`](../../std/primitive.f64.html#method.ln)\n     pub fn logf64(x: f64) -> f64;\n \n     /// Returns the base 10 logarithm of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::log10`](../../std/primitive.f32.html#method.log10)\n     pub fn log10f32(x: f32) -> f32;\n     /// Returns the base 10 logarithm of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::log10`](../../std/primitive.f64.html#method.log10)\n     pub fn log10f64(x: f64) -> f64;\n \n     /// Returns the base 2 logarithm of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::log2`](../../std/primitive.f32.html#method.log2)\n     pub fn log2f32(x: f32) -> f32;\n     /// Returns the base 2 logarithm of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::log2`](../../std/primitive.f64.html#method.log2)\n     pub fn log2f64(x: f64) -> f64;\n \n     /// Returns `a * b + c` for `f32` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n     pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n     /// Returns `a * b + c` for `f64` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n     pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n \n     /// Returns the absolute value of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::abs`](../../std/primitive.f32.html#method.abs)\n     pub fn fabsf32(x: f32) -> f32;\n     /// Returns the absolute value of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::abs`](../../std/primitive.f64.html#method.abs)\n     pub fn fabsf64(x: f64) -> f64;\n \n     /// Returns the minimum of two `f32` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::min`](../../std/primitive.f32.html#method.min)\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::min`](../../std/primitive.f64.html#method.min)\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::max`](../../std/primitive.f32.html#method.max)\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::max`](../../std/primitive.f64.html#method.max)\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::copysign`](../../std/primitive.f32.html#method.copysign)\n     pub fn copysignf32(x: f32, y: f32) -> f32;\n     /// Copies the sign from `y` to `x` for `f64` values.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::copysign`](../../std/primitive.f64.html#method.copysign)\n     pub fn copysignf64(x: f64, y: f64) -> f64;\n \n     /// Returns the largest integer less than or equal to an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::floor`](../../std/primitive.f32.html#method.floor)\n     pub fn floorf32(x: f32) -> f32;\n     /// Returns the largest integer less than or equal to an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::floor`](../../std/primitive.f64.html#method.floor)\n     pub fn floorf64(x: f64) -> f64;\n \n     /// Returns the smallest integer greater than or equal to an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::ceil`](../../std/primitive.f32.html#method.ceil)\n     pub fn ceilf32(x: f32) -> f32;\n     /// Returns the smallest integer greater than or equal to an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::ceil`](../../std/primitive.f64.html#method.ceil)\n     pub fn ceilf64(x: f64) -> f64;\n \n     /// Returns the integer part of an `f32`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::trunc`](../../std/primitive.f32.html#method.trunc)\n     pub fn truncf32(x: f32) -> f32;\n     /// Returns the integer part of an `f64`.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::trunc`](../../std/primitive.f64.html#method.trunc)\n     pub fn truncf64(x: f64) -> f64;\n \n     /// Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n@@ -1148,8 +1382,12 @@ extern \"rust-intrinsic\" {\n     pub fn nearbyintf64(x: f64) -> f64;\n \n     /// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f32::round`](../../std/primitive.f32.html#method.round)\n     pub fn roundf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::f64::round`](../../std/primitive.f64.html#method.round)\n     pub fn roundf64(x: f64) -> f64;\n \n     /// Float addition that allows optimizations based on algebraic rules."}, {"sha": "3ba15968f893300b68fc884c6b4cf05394e2b9c1", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbf7c09d50421fb790d023740108016e4114de/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbf7c09d50421fb790d023740108016e4114de/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=abcbf7c09d50421fb790d023740108016e4114de", "patch": "@@ -2444,7 +2444,7 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-/// returns the max value (signed comparison)\n+/// returns the max value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n@@ -2457,7 +2457,7 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-/// returns the min value (signed comparison)\n+/// returns the min value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {"}]}