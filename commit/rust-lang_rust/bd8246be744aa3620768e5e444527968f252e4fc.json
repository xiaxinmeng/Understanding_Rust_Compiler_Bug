{"sha": "bd8246be744aa3620768e5e444527968f252e4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODI0NmJlNzQ0YWEzNjIwNzY4ZTVlNDQ0NTI3OTY4ZjI1MmU0ZmM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-07T13:22:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T14:42:59Z"}, "message": "rustc: uniformly compute ParameterEnvironment's \"free outlive scope\".", "tree": {"sha": "41138a7959dd81fdb335979a970f07b746c1d308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41138a7959dd81fdb335979a970f07b746c1d308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8246be744aa3620768e5e444527968f252e4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8246be744aa3620768e5e444527968f252e4fc", "html_url": "https://github.com/rust-lang/rust/commit/bd8246be744aa3620768e5e444527968f252e4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8246be744aa3620768e5e444527968f252e4fc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5", "html_url": "https://github.com/rust-lang/rust/commit/ef3ec5ece5bdf8950810225a9a3bc3cd1926e3d5"}], "stats": {"total": 257, "additions": 70, "deletions": 187}, "files": [{"sha": "7959a38f26e20bd6b733ef9a90a611f27c6287a3", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -450,10 +450,10 @@ impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n-        let item_id = tcx.hir.body_owner(self);\n-        (Some(tcx.typeck_tables_of(tcx.hir.local_def_id(item_id))),\n+        let def_id = tcx.hir.body_owner_def_id(self);\n+        (Some(tcx.typeck_tables_of(def_id)),\n          None,\n-         Some(ty::ParameterEnvironment::for_item(tcx, item_id)))\n+         Some(tcx.parameter_environment(def_id)))\n     }\n }\n "}, {"sha": "3acbc15f331019f596a67d3e16d2277c6fe4b6c7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -110,7 +110,7 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use hir::def::*;\n-use ty::{self, TyCtxt, ParameterEnvironment};\n+use ty::{self, TyCtxt};\n use traits::{self, Reveal};\n use ty::subst::Subst;\n use lint;\n@@ -382,7 +382,7 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n \n     // check for various error conditions\n     lsets.visit_body(body);\n-    lsets.check_ret(id, sp, entry_ln, body);\n+    lsets.check_ret(id, sp, entry_ln);\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n@@ -1423,10 +1423,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_ret(&self,\n                  id: NodeId,\n                  sp: Span,\n-                 entry_ln: LiveNode,\n-                 body: &hir::Body)\n+                 entry_ln: LiveNode)\n     {\n-        let fn_ty = self.ir.tcx.type_of(self.ir.tcx.hir.local_def_id(id));\n+        let def_id = self.ir.tcx.hir.local_def_id(id);\n+        let fn_ty = self.ir.tcx.type_of(def_id);\n         let fn_sig = match fn_ty.sty {\n             ty::TyClosure(closure_def_id, substs) => {\n                 self.ir.tcx.closure_type(closure_def_id)\n@@ -1441,11 +1441,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // and must outlive the *call-site* of the function.\n         let fn_ret =\n             self.ir.tcx.liberate_late_bound_regions(\n-                Some(self.ir.tcx.call_site_extent(id, body.value.id)),\n+                Some(self.ir.tcx.call_site_extent(id)),\n                 &fn_ret);\n \n         if !fn_ret.is_never() && self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n-            let param_env = ParameterEnvironment::for_item(self.ir.tcx, id);\n+            let param_env = self.ir.tcx.parameter_environment(def_id);\n             let t_ret_subst = fn_ret.subst(self.ir.tcx, &param_env.free_substs);\n             let is_nil = self.ir.tcx.infer_ctxt(param_env, Reveal::All).enter(|infcx| {\n                 let cause = traits::ObligationCause::dummy();"}, {"sha": "f8d8f3962b8cfb55140f09b4b867a9145dc051cf", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -179,9 +179,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // create a parameter environment corresponding to a (skolemized) instantiation of impl1\n-    let penv = tcx.construct_parameter_environment(DUMMY_SP,\n-                                                   impl1_def_id,\n-                                                   None);\n+    let penv = tcx.parameter_environment(impl1_def_id);\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id)\n                              .unwrap()\n                              .subst(tcx, &penv.free_substs);"}, {"sha": "54081c613cbc349cddc469fe95f3a27a87694e41", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -660,9 +660,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.intern_code_extent(CodeExtentData::DestructionScope(n))\n     }\n \n-    pub fn call_site_extent(self, fn_id: ast::NodeId, body_id: ast::NodeId) -> CodeExtent<'gcx> {\n-        assert!(fn_id != body_id);\n-        self.intern_code_extent(CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body_id })\n+    pub fn call_site_extent(self, fn_id: ast::NodeId) -> CodeExtent<'gcx> {\n+        self.intern_code_extent(CodeExtentData::CallSiteScope {\n+            fn_id,\n+            body_id: self.hir.body_owned_by(fn_id).node_id\n+        })\n+    }\n+\n+    pub fn parameter_extent(self, fn_id: ast::NodeId) -> CodeExtent<'gcx> {\n+        self.intern_code_extent(CodeExtentData::ParameterScope {\n+            fn_id,\n+            body_id: self.hir.body_owned_by(fn_id).node_id\n+        })\n     }\n \n     pub fn intern_code_extent(self, data: CodeExtentData) -> CodeExtent<'gcx> {"}, {"sha": "c3208e1dbfeb1b27ffa59878ae57fe414f816c9a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -1268,8 +1268,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     let kind = if def.is_enum() || def.variants[0].fields.len() == 0{\n                         StructKind::AlwaysSizedUnivariant\n                     } else {\n-                        let param_env = tcx.construct_parameter_environment(DUMMY_SP,\n-                          def.did, None);\n+                        let param_env = tcx.parameter_environment(def.did);\n                         let fields = &def.variants[0].fields;\n                         let last_field = &fields[fields.len()-1];\n                         let always_sized = last_field.ty(tcx, param_env.free_substs)"}, {"sha": "0f20d2361c60fba3deb6f93ae20bfb4627872400", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 115, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -1291,111 +1291,6 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             is_freeze_cache: RefCell::new(FxHashMap()),\n         }\n     }\n-\n-    /// Construct a parameter environment given an item, impl item, or trait item\n-    pub fn for_item(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId)\n-                    -> ParameterEnvironment<'tcx> {\n-        match tcx.hir.find(id) {\n-            Some(hir_map::NodeImplItem(ref impl_item)) => {\n-                match impl_item.node {\n-                    hir::ImplItemKind::Type(_) => {\n-                        // associated types don't have their own entry (for some reason),\n-                        // so for now just grab environment for the impl\n-                        let impl_id = tcx.hir.get_parent(id);\n-                        let impl_def_id = tcx.hir.local_def_id(impl_id);\n-                        tcx.construct_parameter_environment(impl_item.span,\n-                                                            impl_def_id,\n-                                                            Some(tcx.item_extent(id)))\n-                    }\n-                    hir::ImplItemKind::Const(_, body) |\n-                    hir::ImplItemKind::Method(_, body) => {\n-                        tcx.construct_parameter_environment(\n-                            impl_item.span,\n-                            tcx.hir.local_def_id(id),\n-                            Some(tcx.call_site_extent(id, body.node_id)))\n-                    }\n-                }\n-            }\n-            Some(hir_map::NodeTraitItem(trait_item)) => {\n-                match trait_item.node {\n-                    hir::TraitItemKind::Type(..) |\n-                    hir::TraitItemKind::Const(_, None) |\n-                    hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))=> {\n-                        tcx.construct_parameter_environment(trait_item.span,\n-                                                            tcx.hir.local_def_id(id),\n-                                                            Some(tcx.item_extent(id)))\n-                    }\n-                    hir::TraitItemKind::Const(_, Some(body)) |\n-                    hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body)) => {\n-                        tcx.construct_parameter_environment(\n-                            trait_item.span,\n-                            tcx.hir.local_def_id(id),\n-                            Some(tcx.call_site_extent(id, body.node_id)))\n-                    }\n-                }\n-            }\n-            Some(hir_map::NodeItem(item)) => {\n-                match item.node {\n-                    hir::ItemConst(_, body) |\n-                    hir::ItemStatic(.., body) |\n-                    hir::ItemFn(.., body) => {\n-                        tcx.construct_parameter_environment(\n-                            item.span,\n-                            tcx.hir.local_def_id(id),\n-                            Some(tcx.call_site_extent(id, body.node_id)))\n-                    }\n-                    hir::ItemEnum(..) |\n-                    hir::ItemStruct(..) |\n-                    hir::ItemUnion(..) |\n-                    hir::ItemTy(..) |\n-                    hir::ItemImpl(..) |\n-                    hir::ItemTrait(..) => {\n-                        let def_id = tcx.hir.local_def_id(id);\n-                        tcx.construct_parameter_environment(item.span,\n-                                                            def_id,\n-                                                            Some(tcx.item_extent(id)))\n-                    }\n-                    _ => {\n-                        span_bug!(item.span,\n-                                  \"ParameterEnvironment::for_item():\n-                                   can't create a parameter \\\n-                                   environment for this kind of item\")\n-                    }\n-                }\n-            }\n-            Some(hir_map::NodeExpr(expr)) => {\n-                // This is a convenience to allow closures to work.\n-                if let hir::ExprClosure(.., body, _) = expr.node {\n-                    let def_id = tcx.hir.local_def_id(id);\n-                    let base_def_id = tcx.closure_base_def_id(def_id);\n-                    tcx.construct_parameter_environment(\n-                        expr.span,\n-                        base_def_id,\n-                        Some(tcx.call_site_extent(id, body.node_id)))\n-                } else {\n-                    tcx.empty_parameter_environment()\n-                }\n-            }\n-            Some(hir_map::NodeForeignItem(item)) => {\n-                let def_id = tcx.hir.local_def_id(id);\n-                tcx.construct_parameter_environment(item.span,\n-                                                    def_id,\n-                                                    None)\n-            }\n-            Some(hir_map::NodeStructCtor(..)) |\n-            Some(hir_map::NodeVariant(..)) => {\n-                let def_id = tcx.hir.local_def_id(id);\n-                tcx.construct_parameter_environment(tcx.hir.span(id),\n-                                                    def_id,\n-                                                    None)\n-            }\n-            it => {\n-                bug!(\"ParameterEnvironment::from_item(): \\\n-                      `{}` = {:?} is unsupported\",\n-                     tcx.hir.node_to_string(id), it)\n-            }\n-        }\n-    }\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -2528,23 +2423,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.global_tcx().mk_param_from_def(def)\n         });\n \n-        debug!(\"construct_parameter_environment: {:?}\", substs);\n+        debug!(\"parameter_environment: {:?}\", substs);\n         substs\n     }\n \n     /// See `ParameterEnvironment` struct def'n for details.\n-    /// If you were using `free_id: NodeId`, you might try `self.region_maps().item_extent(free_id)`\n-    /// for the `free_id_outlive` parameter. (But note that this is not always quite right.)\n-    pub fn construct_parameter_environment(self,\n-                                           span: Span,\n-                                           def_id: DefId,\n-                                           free_id_outlive: Option<CodeExtent<'gcx>>)\n-                                           -> ParameterEnvironment<'gcx>\n-    {\n+    pub fn parameter_environment(self, def_id: DefId) -> ParameterEnvironment<'gcx> {\n         //\n         // Construct the free substs.\n         //\n \n+        let free_id_outlive = self.hir.as_local_node_id(def_id).map(|id| {\n+            if self.hir.maybe_body_owned_by(id).is_some() {\n+                self.call_site_extent(id)\n+            } else {\n+                self.item_extent(id)\n+            }\n+        });\n         let free_substs = self.construct_free_substs(def_id, free_id_outlive);\n \n         //\n@@ -2582,7 +2477,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let body_id = free_id_outlive.map(|f| f.node_id())\n                                      .unwrap_or(DUMMY_NODE_ID);\n-        let cause = traits::ObligationCause::misc(span, body_id);\n+        let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n         traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n     }\n "}, {"sha": "520a90d940b3912d292448891e569244063cefef", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -44,7 +44,7 @@ impl MirPass for ElaborateDrops {\n             _ => return\n         }\n         let id = src.item_id();\n-        let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+        let param_env = tcx.parameter_environment(tcx.hir.local_def_id(id));\n         let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n         let elaborate_patch = {\n             let mir = &*mir;"}, {"sha": "fbaa60f84450b26f4596bb99728af967f47344ba", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -65,7 +65,7 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n     // steals it, but it forces the `borrowck` query.\n     let mir = &tcx.mir_validated(def_id).borrow();\n \n-    let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+    let param_env = tcx.parameter_environment(def_id);\n     let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());"}, {"sha": "a3dab6a938deaac1f483641a1c8ab100f4938bd6", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -46,14 +46,13 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n                 b: hir::BodyId, s: Span, id: ast::NodeId) {\n         intravisit::walk_fn(self, fk, fd, b, s, id);\n \n-        let region_context = self.tcx.hir.local_def_id(id);\n-        let region_maps = self.tcx.region_maps(region_context);\n+        let def_id = self.tcx.hir.local_def_id(id);\n \n         MatchVisitor {\n             tcx: self.tcx,\n             tables: self.tcx.body_tables(b),\n-            region_maps: &region_maps,\n-            param_env: &ty::ParameterEnvironment::for_item(self.tcx, id)\n+            region_maps: &self.tcx.region_maps(def_id),\n+            param_env: &self.tcx.parameter_environment(def_id)\n         }.visit_body(self.tcx.hir.body(b));\n     }\n }"}, {"sha": "6423d65a4c23fc7175ee598ef365ae7ed90c3ce1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -990,12 +990,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                         traits::Obligation::new(traits::ObligationCause::misc(span, expr_id),\n                                                 trait_ref.to_poly_trait_predicate());\n \n-                    // unwrap() is ok here b/c `method` is the method\n-                    // defined in this crate whose body we are\n-                    // checking, so it's always local\n-                    let node_id = tcx.hir.as_local_node_id(method.def_id).unwrap();\n-\n-                    let param_env = ty::ParameterEnvironment::for_item(tcx, node_id);\n+                    let param_env = tcx.parameter_environment(method.def_id);\n                     tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n                         let mut selcx = traits::SelectionContext::new(&infcx);\n                         match selcx.select(&obligation) {\n@@ -1263,7 +1258,7 @@ impl LintPass for UnionsWithDropFields {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUnion(ref vdata, _) = item.node {\n-            let param_env = &ty::ParameterEnvironment::for_item(ctx.tcx, item.id);\n+            let param_env = &ctx.tcx.parameter_environment(ctx.tcx.hir.local_def_id(item.id));\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(ctx.tcx.hir.local_def_id(field.id));\n                 if field_ty.needs_drop(ctx.tcx, param_env) {"}, {"sha": "1634aade0bcf8e5419740afa950696722865fd8f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -14,7 +14,7 @@ use hair::cx::Cx;\n use hair::Pattern;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::region::{CodeExtent, CodeExtentData};\n+use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n@@ -172,7 +172,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n-        let pe = ty::ParameterEnvironment::for_item(tcx, ctor_id);\n+        let pe = tcx.parameter_environment(tcx.hir.local_def_id(ctor_id));\n         tcx.infer_ctxt(pe, Reveal::UserFacing).enter(|infcx| {\n             let (mut mir, src) =\n                 shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n@@ -337,12 +337,8 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let span = tcx.hir.span(fn_id);\n     let mut builder = Builder::new(hir.clone(), span, arguments.len(), return_ty);\n \n-    let call_site_extent =\n-        tcx.intern_code_extent(\n-            CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body.value.id });\n-    let arg_extent =\n-        tcx.intern_code_extent(\n-            CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body.value.id });\n+    let call_site_extent = tcx.call_site_extent(fn_id);\n+    let arg_extent = tcx.parameter_extent(fn_id);\n     let mut block = START_BLOCK;\n     unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n         unpack!(block = builder.in_scope(arg_extent, block, |builder| {"}, {"sha": "587cc27f4b86e2c25ca9aa3b5fe08d0a1f1e8050", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -41,8 +41,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n {\n     debug!(\"make_shim({:?})\", instance);\n     let did = instance.def_id();\n-    let span = tcx.def_span(did);\n-    let param_env = tcx.construct_parameter_environment(span, did, None);\n+    let param_env = tcx.parameter_environment(did);\n \n     let mut result = match instance {\n         ty::InstanceDef::Item(..) =>"}, {"sha": "e6d62dc6460726365dc560edb3492f74964f5f44", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -219,7 +219,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n-        let param_env = ty::ParameterEnvironment::for_item(tcx, self.source.item_id());\n+        let def_id = tcx.hir.local_def_id(self.source.item_id());\n+        let param_env = tcx.parameter_environment(def_id);\n \n         let mut first_block = true;\n         let mut cost = 0;"}, {"sha": "72edf68f4034c47121332cf54b57d7647115ed56", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -937,8 +937,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Qualif::NOT_CONST.bits();\n     }\n \n-    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let param_env = ty::ParameterEnvironment::for_item(tcx, node_id);\n+    let param_env = tcx.parameter_environment(def_id);\n \n     let mut qualifier = Qualifier::new(tcx, param_env, def_id, mir, Mode::Const);\n     qualifier.qualify_const().bits()\n@@ -966,7 +965,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             MirSource::Const(_) |\n             MirSource::Promoted(..) => return\n         };\n-        let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+        let param_env = tcx.parameter_environment(def_id);\n \n         if mode == Mode::Fn || mode == Mode::ConstFn {\n             // This is ugly because Qualifier holds onto mir,"}, {"sha": "82c0d2c1b01c6ab3f52f688538c4e87b9d7476f1", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -751,7 +751,7 @@ impl MirPass for TypeckMir {\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n-        let param_env = ty::ParameterEnvironment::for_item(tcx, item_id);\n+        let param_env = tcx.parameter_environment(def_id);\n         tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n             let mut checker = TypeChecker::new(&infcx, item_id);\n             {"}, {"sha": "c234629e528da5ef1356f72577325d02b28f2c76", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"check_closure: expr.id={:?} closure_type={:?}\", expr.id, closure_type);\n \n-        let extent = self.tcx.call_site_extent(expr.id, body.value.id);\n+        let extent = self.tcx.call_site_extent(expr.id);\n         let fn_sig = self.tcx.liberate_late_bound_regions(Some(extent), &sig);\n         let fn_sig = self.inh.normalize_associated_types_in(body.value.span,\n                                                             body.value.id, &fn_sig);"}, {"sha": "034d718723dc5a2255f6df48ad36ecc52c4d4b55", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -167,7 +167,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Create a parameter environment that represents the implementation's\n     // method.\n-    let impl_param_env = ty::ParameterEnvironment::for_item(tcx, impl_m_node_id);\n+    let impl_param_env = tcx.parameter_environment(impl_m.def_id);\n \n     // Create mapping from impl to skolemized.\n     let impl_to_skol_substs = &impl_param_env.free_substs;\n@@ -739,7 +739,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Create a parameter environment that represents the implementation's\n         // method.\n         let impl_c_node_id = tcx.hir.as_local_node_id(impl_c.def_id).unwrap();\n-        let impl_param_env = ty::ParameterEnvironment::for_item(tcx, impl_c_node_id);\n+        let impl_param_env = tcx.parameter_environment(impl_c.def_id);\n \n         // Create mapping from impl to skolemized.\n         let impl_to_skol_substs = &impl_param_env.free_substs;"}, {"sha": "f6ffb3c013548480a08bc3a658ce562831d0c5a0", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -76,11 +76,10 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     -> Result<(), ErrorReported>\n {\n     let drop_impl_node_id = tcx.hir.as_local_node_id(drop_impl_did).unwrap();\n-    let self_type_node_id = tcx.hir.as_local_node_id(self_type_did).unwrap();\n \n     // check that the impl type can be made to match the trait type.\n \n-    let impl_param_env = ty::ParameterEnvironment::for_item(tcx, self_type_node_id);\n+    let impl_param_env = tcx.parameter_environment(self_type_did);\n     tcx.infer_ctxt(impl_param_env, Reveal::UserFacing).enter(|ref infcx| {\n         let tcx = infcx.tcx;\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n@@ -99,7 +98,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n                 fulfillment_cx.register_predicate_obligations(infcx, obligations);\n             }\n             Err(_) => {\n-                let item_span = tcx.hir.span(self_type_node_id);\n+                let item_span = tcx.def_span(self_type_did);\n                 struct_span_err!(tcx.sess, drop_impl_span, E0366,\n                                  \"Implementations of Drop cannot be specialized\")\n                     .span_note(item_span,"}, {"sha": "f632d090b41f5a2c5fa27f3c8e4aac836bd85e2b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -90,8 +90,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n-use rustc::ty::{ParamTy, ParameterEnvironment};\n-use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n+use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::ty::{self, Ty, TyCtxt, Visibility};\n use rustc::ty::{MethodCall, MethodCallee};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n@@ -527,10 +526,10 @@ pub struct InheritedBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n-    pub fn build(tcx: TyCtxt<'a, 'gcx, 'gcx>, id: ast::NodeId)\n+    pub fn build(tcx: TyCtxt<'a, 'gcx, 'gcx>, def_id: DefId)\n                  -> InheritedBuilder<'a, 'gcx, 'tcx> {\n         let tables = ty::TypeckTables::empty();\n-        let param_env = ParameterEnvironment::for_item(tcx, id);\n+        let param_env = tcx.parameter_environment(def_id);\n         InheritedBuilder {\n             infcx: tcx.infer_ctxt((tables, param_env), Reveal::UserFacing)\n         }\n@@ -772,14 +771,14 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n     let body = tcx.hir.body(body_id);\n \n-    Inherited::build(tcx, id).enter(|inh| {\n+    Inherited::build(tcx, def_id).enter(|inh| {\n         let fcx = if let Some(decl) = fn_decl {\n             let fn_sig = tcx.type_of(def_id).fn_sig();\n \n             check_abi(tcx, span, fn_sig.abi());\n \n             // Compute the fty from point of view of inside fn.\n-            let fn_scope = inh.tcx.call_site_extent(id, body_id.node_id);\n+            let fn_scope = inh.tcx.call_site_extent(id);\n             let fn_sig =\n                 fn_sig.subst(inh.tcx, &inh.parameter_environment.free_substs);\n             let fn_sig ="}, {"sha": "261845c793c8e3e2a3fa745ae505b7a32b3175b4", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -87,7 +87,7 @@ use check::FnCtxt;\n use middle::free_region::FreeRegionMap;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use middle::region::{self, CodeExtent, RegionMaps};\n+use middle::region::{CodeExtent, RegionMaps};\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n@@ -286,8 +286,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let body_id = body.id();\n \n-        let call_site = self.tcx.intern_code_extent(\n-            region::CodeExtentData::CallSiteScope { fn_id: id, body_id: body_id.node_id });\n+        let call_site = self.tcx.call_site_extent(id);\n         let old_call_site_scope = self.set_call_site_scope(Some(call_site));\n \n         let fn_sig = {"}, {"sha": "5d8ac32e09eedec7952b9b50e6b09daad851d73b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -117,8 +117,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                     error_192(tcx, item.span);\n                 }\n             }\n-            hir::ItemFn(.., body_id) => {\n-                self.check_item_fn(item, body_id);\n+            hir::ItemFn(..) => {\n+                self.check_item_fn(item);\n             }\n             hir::ItemStatic(..) => {\n                 self.check_item_type(item);\n@@ -210,7 +210,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     fn for_id<'tcx>(&self, id: ast::NodeId, span: Span)\n                     -> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         CheckWfFcxBuilder {\n-            inherited: Inherited::build(self.tcx, id),\n+            inherited: Inherited::build(self.tcx, self.tcx.hir.local_def_id(id)),\n             code: self.code.clone(),\n             id: id,\n             span: span\n@@ -327,10 +327,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         });\n     }\n \n-    fn check_item_fn(&mut self,\n-                     item: &hir::Item,\n-                     body_id: hir::BodyId)\n-    {\n+    fn check_item_fn(&mut self, item: &hir::Item) {\n         self.for_item(item).with_fcx(|fcx, this| {\n             let free_substs = &fcx.parameter_environment.free_substs;\n             let def_id = fcx.tcx.hir.local_def_id(item.id);\n@@ -341,7 +338,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             let predicates = fcx.instantiate_bounds(item.span, def_id, free_substs);\n \n             let mut implied_bounds = vec![];\n-            let free_id_outlive = fcx.tcx.call_site_extent(item.id, body_id.node_id);\n+            let free_id_outlive = fcx.tcx.call_site_extent(item.id);\n             this.check_fn_or_method(fcx, item.span, sig, &predicates,\n                                     Some(free_id_outlive), &mut implied_bounds);\n             implied_bounds"}, {"sha": "4764279861758e042b726d1e5173745676485ae2", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8246be744aa3620768e5e444527968f252e4fc/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=bd8246be744aa3620768e5e444527968f252e4fc", "patch": "@@ -17,7 +17,6 @@ use rustc::middle::lang_items::UnsizeTraitLangItem;\n \n use rustc::traits::{self, ObligationCause, Reveal};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::ParameterEnvironment;\n use rustc::ty::TypeFoldable;\n use rustc::ty::adjustment::CoerceUnsizedInfo;\n use rustc::ty::subst::Subst;\n@@ -107,7 +106,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            self_type);\n \n     let span = tcx.hir.span(impl_node_id);\n-    let param_env = ParameterEnvironment::for_item(tcx, impl_node_id);\n+    let param_env = tcx.parameter_environment(impl_did);\n     let self_type = self_type.subst(tcx, &param_env.free_substs);\n     assert!(!self_type.has_escaping_regions());\n \n@@ -202,7 +201,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            target);\n \n     let span = tcx.hir.span(impl_node_id);\n-    let param_env = ParameterEnvironment::for_item(tcx, impl_node_id);\n+    let param_env = tcx.parameter_environment(impl_did);\n     let source = source.subst(tcx, &param_env.free_substs);\n     let target = target.subst(tcx, &param_env.free_substs);\n     assert!(!source.has_escaping_regions());"}]}