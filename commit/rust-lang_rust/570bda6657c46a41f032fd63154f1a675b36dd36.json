{"sha": "570bda6657c46a41f032fd63154f1a675b36dd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MGJkYTY2NTdjNDZhNDFmMDMyZmQ2MzE1NGYxYTY3NWIzNmRkMzY=", "commit": {"author": {"name": "Alexander Light", "email": "scialexlight@gmail.com", "date": "2015-01-06T17:15:41Z"}, "committer": {"name": "Alexander Light", "email": "scialexlight@gmail.com", "date": "2015-01-06T17:15:41Z"}, "message": "update zsh rust completions", "tree": {"sha": "879367be157c80b5fb51bbe73fe96a555603f6e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879367be157c80b5fb51bbe73fe96a555603f6e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/570bda6657c46a41f032fd63154f1a675b36dd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/570bda6657c46a41f032fd63154f1a675b36dd36", "html_url": "https://github.com/rust-lang/rust/commit/570bda6657c46a41f032fd63154f1a675b36dd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/570bda6657c46a41f032fd63154f1a675b36dd36/comments", "author": {"login": "scialex", "id": 726053, "node_id": "MDQ6VXNlcjcyNjA1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/726053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scialex", "html_url": "https://github.com/scialex", "followers_url": "https://api.github.com/users/scialex/followers", "following_url": "https://api.github.com/users/scialex/following{/other_user}", "gists_url": "https://api.github.com/users/scialex/gists{/gist_id}", "starred_url": "https://api.github.com/users/scialex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scialex/subscriptions", "organizations_url": "https://api.github.com/users/scialex/orgs", "repos_url": "https://api.github.com/users/scialex/repos", "events_url": "https://api.github.com/users/scialex/events{/privacy}", "received_events_url": "https://api.github.com/users/scialex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scialex", "id": 726053, "node_id": "MDQ6VXNlcjcyNjA1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/726053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scialex", "html_url": "https://github.com/scialex", "followers_url": "https://api.github.com/users/scialex/followers", "following_url": "https://api.github.com/users/scialex/following{/other_user}", "gists_url": "https://api.github.com/users/scialex/gists{/gist_id}", "starred_url": "https://api.github.com/users/scialex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scialex/subscriptions", "organizations_url": "https://api.github.com/users/scialex/orgs", "repos_url": "https://api.github.com/users/scialex/repos", "events_url": "https://api.github.com/users/scialex/events{/privacy}", "received_events_url": "https://api.github.com/users/scialex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340ac040f7603e169a3739c65956ed2213622be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/340ac040f7603e169a3739c65956ed2213622be5", "html_url": "https://github.com/rust-lang/rust/commit/340ac040f7603e169a3739c65956ed2213622be5"}], "stats": {"total": 162, "additions": 93, "deletions": 69}, "files": [{"sha": "404f622f970c37f237bed5fd51a79964889b192b", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 93, "deletions": 69, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/570bda6657c46a41f032fd63154f1a675b36dd36/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/570bda6657c46a41f032fd63154f1a675b36dd36/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=570bda6657c46a41f032fd63154f1a675b36dd36", "patch": "@@ -20,63 +20,71 @@ _rustc_crate_types=(\n \n _rustc_emit_types=(\n     'asm'\n-    'bc'\n-    'ir'\n+    'llvm-bc'\n+    'llvm-ir'\n     'obj'\n     'link'\n+    'dep-info'\n )\n _rustc_pretty_types=(\n     'normal[un-annotated source]'\n     'expanded[crates expanded]'\n     'typed[crates  expanded,  with  type  annotations]'\n     'identified[fully parenthesized, AST nodes and blocks with IDs]'\n-    'flowgraph=[graphviz formatted flowgraph for node]:NODEID:'\n+    'flowgraph[graphviz formatted flowgraph for node]:NODEID:'\n )\n _rustc_color_types=(\n     'auto[colorize, if output goes to a tty (default)]'\n     'always[always colorize output]'\n     'never[never colorize output]'\n )\n+_rustc_info_types=(\n+    'crate-name[Output the crate name and exit]'\n+    'file-names[Output the file(s) that would be written if compilation continued and exited]'\n+    'sysroot[Output the sysroot and exit]'\n+)\n \n _rustc_opts_vals=(\n     --crate-name='[Specify the name of the crate being built]'\n     --crate-type='[Comma separated list of types of crates for the compiler to emit]:TYPES:_values -s \",\" \"Crate types\"  \"$_rustc_crate_types[@]\"'\n     --emit='[Comma separated list of types of output for the compiler to emit]:TYPES:_values -s \",\" \"Emit Targets\" \"$_rustc_emit_types[@]\"'\n-    --debuginfo='[Emit DWARF debug info to the objects created]:LEVEL:_values \"Debug Levels\" \"$_rustc_debuginfo_levels[@]\"'\n-    --dep-info='[Output dependency info to <filename> after compiling]::FILE:_files -/'\n-    --sysroot='[Override the system root]:PATH:_files -/'\n     --cfg='[Configure the compilation environment]:SPEC:'\n     --out-dir='[Write output to compiler-chosen filename in <dir>.  Ignored  if  -o  is  specified. (default the current directory)]:DIR:_files -/'\n     -o'[Write output to <filename>. Ignored if more than one --emit is specified.]:FILENAME:_files'\n-    --opt-level='[Optimize with possible levels 0-3]:LEVEL:(0 1 2 3)'\n     --pretty='[Pretty-print the input instead of compiling]::TYPE:_values \"TYPES\" \"$_rustc_pretty_types[@]\"'\n     -L'[Add a directory to the library search path]:DIR:_files -/'\n     --target='[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]:TRIPLE:'\n     --color='[Configure coloring of output]:CONF:_values \"COLORS\" \"$_rustc_color_types[@]\"'\n     {-v,--version}'[Print version info and exit]::VERBOSE:(verbose)'\n     --explain='[Provide a detailed explanation of an error message]:OPT:'\n     --extern'[Specify where an external rust library is located]:ARG:'\n+    --print='[Comma separated list of compiler information to print on stdout]:TYPES:_values -s \",\" \"Compiler Information\" \"$_rustc_info_types[@]\"'\n )\n \n _rustc_opts_switches=(\n-    -g'[Equivalent to --debuginfo=2]'\n-    {-h,--help}'[Display this message]'\n-    --no-analysis'[Parse and expand the output, but run no analysis or produce output]'\n-    --no-trans'[Run all passes except translation; no output]'\n-    -O'[Equivalent to --opt-level=2]'\n-    --parse-only'[Parse only; do not compile, assemble, or link]'\n-    --print-crate-name'[Output the crate name and exit]'\n-    --print-file-name'[Output the file(s) that would be written if compilation continued and exit]'\n+    -g'[Equivalent to -C debuginfo=2]'\n+    {-h,--help}'[Display the help message]'\n+    {-V,--verbose}'[use verbose output]'\n+    -O'[Equivalent to -C opt-level=2]'\n     --test'[Build a test harness]'\n )\n+\n+\n+_rustc_opts_link=(\n+    'static[Path to the library to link statically]:PATH:_files -/'\n+    'dylib[Path to the library to link dynamically]:PATH:_files -/'\n+    'framework[Path to the library to link as a framework]:PATH:_files -/'\n+)\n+\n _rustc_opts_codegen=(\n-    'ar=[Path to the archive utility to use when assembling archives.]:BIN:_path_files'\n-    'linker=[Path to the linker utility to use when linking libraries, executables, and objects.]:BIN:_path_files'\n-    'link-args=[A space-separated list of extra arguments to pass to the linker when the linker is invoked.]:ARGS:'\n-    'target-cpu=[Selects a target processor. If the value is \"help\", then a list of  available  CPUs is printed.]:CPU:'\n-    'target-feature=[A space-separated list of features to enable or disable for the target. A preceding \"+\" enables a feature while a preceding \"-\" disables it. Available features can be discovered through target-cpu=help.]:FEATURE:'\n-    'passes=[A space-separated list of extra LLVM passes to run. A value of \"list\" will cause rustc to print all known passes and exit. The passes specified are appended at the end of the normal pass manager.]:LIST:'\n-    'llvm-args=[A space-separated list of arguments to pass through to LLVM.]:ARGS:'\n+    'ar[Path to the archive utility to use when assembling archives.]:BIN:_path_files'\n+    'linker[Path to the linker utility to use when linking libraries, executables, and objects.]:BIN:_path_files'\n+    'link-args[A space-separated list of extra arguments to pass to the linker when the linker is invoked.]:ARGS:'\n+    'lto[Perform LLVM link-time optimizations]'\n+    'target-cpu[Selects a target processor. If the value is \"help\", then a list of  available  CPUs is printed.]:CPU:'\n+    'target-feature[A space-separated list of features to enable or disable for the target. A preceding \"+\" enables a feature while a preceding \"-\" disables it. Available features can be discovered through target-cpu=help.]:FEATURE:'\n+    'passes[A space-separated list of extra LLVM passes to run. A value of \"list\" will cause rustc to print all known passes and exit. The passes specified are appended at the end of the normal pass manager.]:LIST:'\n+    'llvm-args[A space-separated list of arguments to pass through to LLVM.]:ARGS:'\n     'save-temps[If specified, the compiler will save more files (.bc, .o, .no-opt.bc) generated throughout compilation in the output directory.]'\n     'rpath[If specified, then the rpath value for dynamic libraries will be set in either dynamic library or executable outputs.]'\n     'no-prepopulate-passes[Suppresses pre-population of the LLVM pass manager that is run over the module.]'\n@@ -86,55 +94,62 @@ _rustc_opts_codegen=(\n     'prefer-dynamic[Prefers dynamic linking to static linking.]'\n     \"no-integrated-as[Force usage of an external assembler rather than LLVM's integrated one.]\"\n     'no-redzone[disable the use of the redzone]'\n-    'relocation-model=[The relocation model to use. (default: pic)]:MODEL:(pic static dynamic-no-pic)'\n-    'code-model=[choose the code model to use (llc -code-model for details)]:MODEL:'\n-    'metadata=[metadata to mangle symbol names with]:VAL:'\n-    'extra-filenames=[extra data to put in each output filename]:VAL:'\n-    'codegen-units=[divide crate into N units to optimize in parallel]:N:'\n+    'relocation-model[The relocation model to use. (default: pic)]:MODEL:(pic static dynamic-no-pic)'\n+    'code-model[choose the code model to use (llc -code-model for details)]:MODEL:'\n+    'metadata[metadata to mangle symbol names with]:VAL:'\n+    'extra-filenames[extra data to put in each output filename]:VAL:'\n+    'codegen-units[divide crate into N units to optimize in parallel]:N:'\n+    'remark[print remarks for these optimization passes (space separated, or \"all\")]:TYPE:'\n+    'debuginfo[debug info emission level, 0 = no debug info, 1 = line tables only, 2 = full debug info with variable and type information]:LEVEL:_values \"Debug Levels\" \"$_rustc_debuginfo_levels[@]\"'\n+    'opt-level[Optimize with possible levels 0-3]:LEVEL:(0 1 2 3)'\n     'help[Show all codegen options]'\n )\n \n _rustc_opts_lint=(\n     'help[Show a list of all lints]'\n-    'experimental[detects use of #\\[experimental\\] items]'\n-    'heap-memory[use of any (Box type or @ type) heap memory]'\n-    'managed-heap-memory[use of managed (@ type) heap memory]'\n-    'missing-doc[detects missing documentation for public members]'\n-    'non-uppercase-statics[static constants should have uppercase identifiers]'\n-    'owned-heap-memory[use of owned (~ type) heap memory]'\n-    'unnecessary-qualification[detects unnecessarily qualified names]'\n-    'unsafe-block[usage of an `unsafe` block]'\n-    'unstable[detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n-    'unused-result[unused result of an expression in a statement]'\n-    'variant-size-difference[detects enums with widely varying variant sizes]'\n-    'ctypes[proper use of libc types in foreign modules]'\n-    'dead-assignment[detect assignments that will never be read]'\n-    'dead-code[detect piece of code that will never be used]'\n-    'deprecated[detects use of #\\[deprecated\\] items]'\n-    'non-camel-case-types[types, variants and traits should have camel case names]'\n-    'non-snake-case[methods, functions, lifetime parameters and modules should have snake case names]'\n-    'path-statement[path statements with no effect]'\n-    'raw-pointer-deriving[uses of #\\[deriving\\] with raw pointers are rarely correct]'\n-    'type-limits[comparisons made useless by limits of the types involved]'\n-    'type-overflow[literal out of range for its type]'\n-    'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'\n-    'unnecessary-parens[`if`, `match`, `while` and `return` do not need parentheses]'\n-    'unreachable-code[detects unreachable code]'\n-    'unrecognized-lint[unrecognized lint attribute]'\n-    'unsigned-negate[using an unary minus operator on unsigned type]'\n-    'unused-attribute[detects attributes that were not used by the compiler]'\n-    'unused-imports[imports that are never used]'\n-    'unused-must-use[unused result of a type flagged as #\\[must_use\\]]'\n-    \"unused-mut[detect mut variables which don't need to be mutable]\"\n-    'unused-unsafe[unnecessary use of an `unsafe` block]'\n-    'unused-variable[detect variables which are not used in any way]'\n-    'visible-private-types[detect use of private types in exported type signatures]'\n-    'warnings[mass-change the level for lints which produce warnings]'\n-    'while-true[suggest using `loop { }` instead of `while true { }`]'\n-    'unknown-crate-type[unknown crate type found in #\\[crate_type\\] directive]'\n-    'unknown-features[unknown features found in crate-level #\\[feature\\] directives]'\n-    'bad-style[group of non_camel_case_types, non_snake_case, non_uppercase_statics]'\n-    'unused[group of unused_imports, unused_variable, dead_assignment, dead_code, unused_mut, unreachable_code]'\n+    'box-pointers[(default: allow) use of owned (Box type) heap memory]'\n+    'experimental[(default: allow) detects use of #\\[experimental\\] items]'\n+    'fat-ptr-transmutes[(default: allow) detects transmutes of fat pointers]'\n+    'missing-docs[(default: allow) detects missing documentation for public members]'\n+    'unsafe-blocks[(default: allow) usage of an \"unsafe\" block]'\n+    'unstable[(default: allow) detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n+    'unused-extern-crates[(default: allow) extern crates that are never used]'\n+    'unused-import-braces[(default: allow) unnecessary braces around an imported item]'\n+    'unused-qualifications[(default: allow) detects unnecessarily qualified names]'\n+    'unused-results[(default: allow) unused result of an expression in a statement]'\n+    'unused-typecasts[(default: allow) detects unnecessary type casts that can be removed]'\n+    'variant-size-differences[(default: allow) detects enums with widely varying variant sizes]'\n+    'dead-code[(default: warn) detect unused, unexported items]'\n+    'deprecated[(default: warn) detects use of #\\[deprecated\\] items]'\n+    'improper-ctypes[(default: warn) proper use of libc types in foreign modules]'\n+    'missing-copy-implementations[(default: warn) detects potentially-forgotten implementations of \"Copy\"]'\n+    'non-camel-case-types[(default: warn) types, variants, traits and type parameters should have camel case names]'\n+    'non-shorthand-field-patterns[(default: warn) using \"Struct { x: x }\" instead of \"Struct { x }\"]'\n+    'non-snake-case[(default: warn) methods, functions, lifetime parameters and modules should have snake case names]'\n+    'non-upper-case-globals[(default: warn) static constants should have uppercase identifiers]'\n+    'overflowing-literals[(default: warn) literal out of range for its type]'\n+    'path-statements[(default: warn) path statements with no effect]'\n+    'raw-pointer-deriving[(default: warn) uses of #\\[derive\\] with raw pointers are rarely correct]'\n+    'unknown-lints[(default: warn) unrecognized lint attribute]'\n+    'unreachable-code[(default: warn) detects unreachable code paths]'\n+    'unsigned-negation[(default: warn) using an unary minus operator on unsigned type]'\n+    'unused-allocation[(default: warn) detects unnecessary allocations that can be eliminated]'\n+    'unused-assignments[(default: warn) detect assignments that will never be read]'\n+    'unused-attributes[(default: warn) detects attributes that were not used by the compiler]'\n+    'unused-comparisons[(default: warn) comparisons made useless by limits of the types involved]'\n+    'unused-imports[(default: warn) imports that are never used]'\n+    'unused-must-use[(default: warn) unused result of a type flagged as must_use]'\n+    \"unused-mut[(default: warn) detect mut variables which don't need to be mutable]\"\n+    'unused-parens[(default: warn) \"if\", \"match\", \"while\" and \"return\" do not need parentheses]'\n+    'unused-unsafe[(default: warn) unnecessary use of an \"unsafe\" block]'\n+    'unused-variables[(default: warn) detect variables which are not used in any way]'\n+    'warnings[(default: warn) mass-change the level for lints which produce warnings]'\n+    'while-true[(default: warn) suggest using \"loop { }\" instead of \"while true { }\"]'\n+    \"exceeding-bitshifts[(default: deny) shift exceeds the type's number of bits]\"\n+    'unknown-crate-types[(default: deny) unknown crate type found in #\\[crate_type\\] directive]'\n+    'unknown-features[(default: deny) unknown features found in crate-level #\\[feature\\] directives]'\n+    'bad-style[non-camel-case-types, non-snake-case, non-upper-case-globals]'\n+    'unused[unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unused-must-use, unused-unsafe, path-statements]'\n )\n \n _rustc_opts_debug=(\n@@ -151,11 +166,9 @@ _rustc_opts_debug=(\n     'show-span[show spans for compiler debugging]'\n     'count-type-sizes[count the sizes of aggregate types]'\n     'meta-stats[gather metadata statistics]'\n-    'no-opt[do not optimize, even if -O is passed]'\n     'print-link-args[Print the arguments passed to the linker]'\n     'gc[Garbage collect shared data (experimental)]'\n     'print-llvm-passes[Prints the llvm optimization passes being run]'\n-    'lto[Perform LLVM link-time optimizations]'\n     'ast-json[Print the AST as JSON and halt]'\n     'ast-json-noexpand[Print the pre-expansion AST as JSON and halt]'\n     'ls[List the symbols defined by a library crate]'\n@@ -164,6 +177,12 @@ _rustc_opts_debug=(\n     'flowgraph-print-moves[Include move analysis data in --pretty flowgraph output]'\n     'flowgraph-print-assigns[Include assignment analysis data in --pretty flowgraph output]'\n     'flowgraph-print-all[Include all dataflow analysis data in --pretty flowgraph output]'\n+    'print-regiion-graph[Prints region inference graph. Use with RUST_REGION_GRAPH=help for more info]'\n+    'parse-only[Parse only; do not compile, assemble, or link]'\n+    'no-trans[Run all passes except translation; no output]'\n+    'no-analysis[Parse and expand the source, but run no analysis]'\n+    'unstable-options[Adds unstable command line options to rustc interface]'\n+    'print-enum-sizes[Print the size of enums and their variants]'\n )\n \n _rustc_opts_fun_lint(){\n@@ -179,13 +198,18 @@ _rustc_opts_fun_codegen(){\n     _values 'options' \"$_rustc_opts_codegen[@]\"\n }\n \n+_rustc_opts_fun_link(){\n+    _values 'options' \"$_rustc_opts_link[@]\"\n+}\n+\n _arguments -s :  \\\n     '(-W --warn)'{-W,--warn=}'[Set lint warnings]:lint options:_rustc_opts_fun_lint' \\\n     '(-A --allow)'{-A,--allow=}'[Set lint allowed]:lint options:_rustc_opts_fun_lint' \\\n     '(-D --deny)'{-D,--deny=}'[Set lint denied]:lint options:_rustc_opts_fun_lint' \\\n     '(-F --forbid)'{-F,--forbid=}'[Set lint forbidden]:lint options:_rustc_opts_fun_lint' \\\n     '*-Z[Set internal debugging options]:debug options:_rustc_opts_fun_debug' \\\n-    '*-C[Set internal Codegen options]:codegen options:_rustc_opts_fun_codegen' \\\n+    '(-C --codegen)'{-C,--codegen}'[Set internal Codegen options]:codegen options:_rustc_opts_fun_codegen' \\\n+    '*-l[Link the generated crates to the specified native library NAME. the optional KIND can be one of, static, dylib, or framework. If omitted, dylib is assumed.]:ARG:_rustc_opts_fun_link' \\\n     \"$_rustc_opts_switches[@]\" \\\n     \"$_rustc_opts_vals[@]\" \\\n     '::files:_files -g \"*.rs\"'"}]}