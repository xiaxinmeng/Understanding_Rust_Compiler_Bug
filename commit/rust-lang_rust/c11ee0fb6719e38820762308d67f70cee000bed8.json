{"sha": "c11ee0fb6719e38820762308d67f70cee000bed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMWVlMGZiNjcxOWUzODgyMDc2MjMwOGQ2N2Y3MGNlZTAwMGJlZDg=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-10T03:50:11Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-10T03:50:11Z"}, "message": "std::at_vec and vec: Unify build_sized, build_sized_opt into build\n\nThese functions have very few users since they are mostly replaced by\niterator-based constructions.\n\nConvert a few remaining users in-tree, and reduce the number of\nfunctions by basically renaming build_sized_opt to build, and removing\nthe other two. This for both the vec and the at_vec versions.", "tree": {"sha": "256b9032dc36f372e00882660c1ee221ee5129e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256b9032dc36f372e00882660c1ee221ee5129e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11ee0fb6719e38820762308d67f70cee000bed8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11ee0fb6719e38820762308d67f70cee000bed8", "html_url": "https://github.com/rust-lang/rust/commit/c11ee0fb6719e38820762308d67f70cee000bed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11ee0fb6719e38820762308d67f70cee000bed8/comments", "author": null, "committer": null, "parents": [{"sha": "5f69a58e0ccf3d85b5f12f26ecf78ee7e7fec270", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f69a58e0ccf3d85b5f12f26ecf78ee7e7fec270", "html_url": "https://github.com/rust-lang/rust/commit/5f69a58e0ccf3d85b5f12f26ecf78ee7e7fec270"}], "stats": {"total": 124, "additions": 27, "deletions": 97}, "files": [{"sha": "f50108d4eae78e8d5592162c00bb308daa3ab472", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -315,11 +315,8 @@ mod test {\n         use std::vec;\n \n         do 1000.times {\n-            let v: ~[u8] = do vec::build |push| {\n-                do task_rng().gen_uint_range(1, 100).times {\n-                    push(random());\n-                }\n-            };\n+            let times = task_rng().gen_uint_range(1, 100);\n+            let v = vec::from_fn(times, |_| random::<u8>());\n             assert_eq!(v.to_base64(STANDARD).from_base64().unwrap(), v);\n         }\n     }"}, {"sha": "9fc29250ed052f79f8ffa53aacded07236d875cd", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -61,7 +61,6 @@ use middle::typeck::infer::{TypeTrace};\n use util::common::indent;\n \n use std::result;\n-use std::vec;\n use syntax::ast::{Onceness, purity};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "c14e49f37e5bf0c436e6aa3ed93d07674b287846", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -373,14 +373,12 @@ impl RegionVarBindings {\n \n     pub fn vars_created_since_snapshot(&mut self, snapshot: uint)\n                                        -> ~[RegionVid] {\n-        do vec::build |push| {\n-            for &elt in self.undo_log.slice_from(snapshot).iter() {\n-                match elt {\n-                    AddVar(vid) => push(vid),\n-                    _ => ()\n-                }\n-            }\n-        }\n+        self.undo_log.slice_from(snapshot).iter()\n+            .filter_map(|&elt| match elt {\n+                AddVar(vid) => Some(vid),\n+                _ => None\n+            })\n+            .collect()\n     }\n \n     pub fn tainted(&mut self, snapshot: uint, r0: Region) -> ~[Region] {"}, {"sha": "27bef1214b21aefa7765fc82aecf1bdb6ed45f2d", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -33,62 +33,30 @@ pub fn capacity<T>(v: @[T]) -> uint {\n /**\n  * Builds a vector by calling a provided function with an argument\n  * function that pushes an element to the back of a vector.\n- * This version takes an initial size for the vector.\n+ * The initial size for the vector may optionally be specified\n  *\n  * # Arguments\n  *\n- * * size - An initial size of the vector to reserve\n+ * * size - An option, maybe containing initial size of the vector to reserve\n  * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */\n #[inline]\n-pub fn build_sized<A>(size: uint, builder: &fn(push: &fn(v: A))) -> @[A] {\n+pub fn build<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> @[A] {\n     let mut vec = @[];\n-    unsafe { raw::reserve(&mut vec, size); }\n+    unsafe { raw::reserve(&mut vec, size.unwrap_or_default(4)); }\n     builder(|x| unsafe { raw::push(&mut vec, x) });\n     vec\n }\n \n-/**\n- * Builds a vector by calling a provided function with an argument\n- * function that pushes an element to the back of a vector.\n- *\n- * # Arguments\n- *\n- * * builder - A function that will construct the vector. It receives\n- *             as an argument a function that will push an element\n- *             onto the vector being constructed.\n- */\n-#[inline]\n-pub fn build<A>(builder: &fn(push: &fn(v: A))) -> @[A] {\n-    build_sized(4, builder)\n-}\n-\n-/**\n- * Builds a vector by calling a provided function with an argument\n- * function that pushes an element to the back of a vector.\n- * This version takes an initial size for the vector.\n- *\n- * # Arguments\n- *\n- * * size - An option, maybe containing initial size of the vector to reserve\n- * * builder - A function that will construct the vector. It receives\n- *             as an argument a function that will push an element\n- *             onto the vector being constructed.\n- */\n-#[inline]\n-pub fn build_sized_opt<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> @[A] {\n-    build_sized(size.unwrap_or_default(4), builder)\n-}\n-\n // Appending\n \n /// Iterates over the `rhs` vector, copying each element and appending it to the\n /// `lhs`. Afterwards, the `lhs` is then returned for use again.\n #[inline]\n pub fn append<T:Clone>(lhs: @[T], rhs: &[T]) -> @[T] {\n-    do build_sized(lhs.len() + rhs.len()) |push| {\n+    do build(Some(lhs.len() + rhs.len())) |push| {\n         for x in lhs.iter() {\n             push((*x).clone());\n         }\n@@ -101,7 +69,7 @@ pub fn append<T:Clone>(lhs: @[T], rhs: &[T]) -> @[T] {\n \n /// Apply a function to each element of a vector and return the results\n pub fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n-    do build_sized(v.len()) |push| {\n+    do build(Some(v.len())) |push| {\n         for elem in v.iter() {\n             push(f(elem));\n         }\n@@ -115,7 +83,7 @@ pub fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n  * to the value returned by the function `op`.\n  */\n pub fn from_fn<T>(n_elts: uint, op: &fn(uint) -> T) -> @[T] {\n-    do build_sized(n_elts) |push| {\n+    do build(Some(n_elts)) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(op(i)); i += 1u; }\n     }\n@@ -128,7 +96,7 @@ pub fn from_fn<T>(n_elts: uint, op: &fn(uint) -> T) -> @[T] {\n  * to the value `t`.\n  */\n pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> @[T] {\n-    do build_sized(n_elts) |push| {\n+    do build(Some(n_elts)) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts {\n             push(t.clone());\n@@ -312,7 +280,7 @@ mod test {\n     fn test() {\n         // Some code that could use that, then:\n         fn seq_range(lo: uint, hi: uint) -> @[uint] {\n-            do build |push| {\n+            do build(None) |push| {\n                 for i in range(lo, hi) {\n                     push(i);\n                 }\n@@ -359,15 +327,15 @@ mod test {\n     fn bench_build_sized(b: &mut bh) {\n         let len = 64;\n         do b.iter {\n-            build_sized(len, |push| for i in range(0, 1024) { push(i) });\n+            build(Some(len), |push| for i in range(0, 1024) { push(i) });\n         }\n     }\n \n     #[bench]\n     fn bench_build(b: &mut bh) {\n         do b.iter {\n             for i in range(0, 95) {\n-                build(|push| push(i));\n+                build(None, |push| push(i));\n             }\n         }\n     }"}, {"sha": "ee4100f1ec9b3c3f0928223b6b420b12fd3b3fb4", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -777,7 +777,7 @@ impl<T:Reader> ReaderUtil for T {\n     }\n \n     fn read_lines(&self) -> ~[~str] {\n-        do vec::build |push| {\n+        do vec::build(None) |push| {\n             do self.each_line |line| {\n                 push(line.to_owned());\n                 true"}, {"sha": "c45e37477ce1cf483a2d914575ebbf565e6c8c2d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -194,54 +194,22 @@ pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n /**\n  * Builds a vector by calling a provided function with an argument\n  * function that pushes an element to the back of a vector.\n- * This version takes an initial capacity for the vector.\n+ * The initial capacity for the vector may optionally be specified.\n  *\n  * # Arguments\n  *\n- * * size - An initial size of the vector to reserve\n+ * * size - An option, maybe containing initial size of the vector to reserve\n  * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */\n #[inline]\n-pub fn build_sized<A>(size: uint, builder: &fn(push: &fn(v: A))) -> ~[A] {\n-    let mut vec = with_capacity(size);\n+pub fn build<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> ~[A] {\n+    let mut vec = with_capacity(size.unwrap_or_default(4));\n     builder(|x| vec.push(x));\n     vec\n }\n \n-/**\n- * Builds a vector by calling a provided function with an argument\n- * function that pushes an element to the back of a vector.\n- *\n- * # Arguments\n- *\n- * * builder - A function that will construct the vector. It receives\n- *             as an argument a function that will push an element\n- *             onto the vector being constructed.\n- */\n-#[inline]\n-pub fn build<A>(builder: &fn(push: &fn(v: A))) -> ~[A] {\n-    build_sized(4, builder)\n-}\n-\n-/**\n- * Builds a vector by calling a provided function with an argument\n- * function that pushes an element to the back of a vector.\n- * This version takes an initial size for the vector.\n- *\n- * # Arguments\n- *\n- * * size - An option, maybe containing initial size of the vector to reserve\n- * * builder - A function that will construct the vector. It receives\n- *             as an argument a function that will push an element\n- *             onto the vector being constructed.\n- */\n-#[inline]\n-pub fn build_sized_opt<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> ~[A] {\n-    build_sized(size.unwrap_or_default(4), builder)\n-}\n-\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function.\n pub struct SplitIterator<'self, T> {\n@@ -3248,7 +3216,7 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_build_fail() {\n-        do build |push| {\n+        do build(None) |push| {\n             push((~0, @0));\n             push((~0, @0));\n             push((~0, @0));"}, {"sha": "8221be1bbcb62110bb3ba753e18171f614403318", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -958,7 +958,7 @@ fn create_struct_pattern(cx: @ExtCtxt,\n     // struct_type is definitely not Unknown, since struct_def.fields\n     // must be nonempty to reach here\n     let pattern = if struct_type == Record {\n-        let field_pats = do vec::build |push| {\n+        let field_pats = do vec::build(None) |push| {\n             for (&pat, &(id, _)) in subpats.iter().zip(ident_expr.iter()) {\n                 // id is guaranteed to be Some\n                 push(ast::FieldPat { ident: id.unwrap(), pat: pat })"}, {"sha": "3c4c4889ba2f81c6a6f1c100a7ad405797dea275", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11ee0fb6719e38820762308d67f70cee000bed8/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=c11ee0fb6719e38820762308d67f70cee000bed8", "patch": "@@ -66,7 +66,7 @@ impl Drop for AsciiArt {\n fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n-    let lines = do vec::build_sized(height) |push| {\n+    let lines = do vec::build(Some(height)) |push| {\n             do height.times {\n                 push(vec::from_elem(width, '.'));\n             }"}]}