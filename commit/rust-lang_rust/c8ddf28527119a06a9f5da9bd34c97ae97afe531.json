{"sha": "c8ddf28527119a06a9f5da9bd34c97ae97afe531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGRmMjg1MjcxMTlhMDZhOWY1ZGE5YmQzNGM5N2FlOTdhZmU1MzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-07T21:05:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-07T21:05:49Z"}, "message": "Auto merge of #46497 - AgustinCB:issue-46311, r=petrochenkov\n\nModify message for keyword as identifier name\n\nThis is a temporary solution to #46311.\n\nThe message is generic enough to cover both cases and is probably a fine enough solution to the specific problem described in the task. However, the underlying reason for this to be wrong is that `next_token_inner` returns `Lifetime` even if the token is a label. That's not simple, as the syntax for both can be quite similar and it may need to take a look to the next token to make a decision. I'm not sure I have enough knowledge about the project to be able to solve that (yet!), so I thought I'll fix the immediate problem first.", "tree": {"sha": "458cdc07ce837e57058f2613e8e92e036d5251da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/458cdc07ce837e57058f2613e8e92e036d5251da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ddf28527119a06a9f5da9bd34c97ae97afe531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ddf28527119a06a9f5da9bd34c97ae97afe531", "html_url": "https://github.com/rust-lang/rust/commit/c8ddf28527119a06a9f5da9bd34c97ae97afe531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ddf28527119a06a9f5da9bd34c97ae97afe531/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c49f401fecd8c5ef42a33a070a61daa2b911b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c49f401fecd8c5ef42a33a070a61daa2b911b47", "html_url": "https://github.com/rust-lang/rust/commit/9c49f401fecd8c5ef42a33a070a61daa2b911b47"}, {"sha": "29e268060209765e5a9efb4c0941765d064e13ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e268060209765e5a9efb4c0941765d064e13ea", "html_url": "https://github.com/rust-lang/rust/commit/29e268060209765e5a9efb4c0941765d064e13ea"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "05ad1643619058e363c73418755f8873c5472529", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -21,6 +21,7 @@ use rustc::session::Session;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::Spanned;\n+use syntax::parse::token;\n use syntax::symbol::keywords;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n@@ -35,8 +36,16 @@ impl<'a> AstValidator<'a> {\n         &self.session.parse_sess.span_diagnostic\n     }\n \n+    fn check_lifetime(&self, lifetime: &Lifetime) {\n+        let valid_names = [keywords::StaticLifetime.name(), keywords::Invalid.name()];\n+        if !valid_names.contains(&lifetime.ident.name) &&\n+            token::Ident(lifetime.ident.without_first_quote()).is_reserved_ident() {\n+            self.err_handler().span_err(lifetime.span, \"lifetimes cannot use keyword names\");\n+        }\n+    }\n+\n     fn check_label(&self, label: Ident, span: Span) {\n-        if label.name == keywords::StaticLifetime.name() || label.name == \"'_\" {\n+        if token::Ident(label.without_first_quote()).is_reserved_ident() || label.name == \"'_\" {\n             self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n         }\n     }\n@@ -200,6 +209,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_use_tree(self, use_tree, id);\n     }\n \n+    fn visit_lifetime(&mut self, lifetime: &'a Lifetime) {\n+        self.check_lifetime(lifetime);\n+        visit::walk_lifetime(self, lifetime);\n+    }\n+\n     fn visit_item(&mut self, item: &'a Item) {\n         match item.node {\n             ItemKind::Impl(.., Some(..), _, ref impl_items) => {"}, {"sha": "d9c33fa50bd89ab8f0180b6884ec26399f0c48dd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -14,7 +14,7 @@ use codemap::{CodeMap, FilePathMapping};\n use errors::{FatalError, DiagnosticBuilder};\n use parse::{token, ParseSess};\n use str::char_at;\n-use symbol::{Symbol, keywords};\n+use symbol::Symbol;\n use std_unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n@@ -1296,18 +1296,6 @@ impl<'a> StringReader<'a> {\n                         self.mk_ident(&format!(\"'{}\", lifetime_name))\n                     });\n \n-                    // Conjure up a \"keyword checking ident\" to make sure that\n-                    // the lifetime name is not a keyword.\n-                    let keyword_checking_ident = self.with_str_from(start, |lifetime_name| {\n-                        self.mk_ident(lifetime_name)\n-                    });\n-                    let keyword_checking_token = &token::Ident(keyword_checking_ident);\n-                    let last_bpos = self.pos;\n-                    if keyword_checking_token.is_reserved_ident() &&\n-                       !keyword_checking_token.is_keyword(keywords::Static) {\n-                        self.err_span_(start, last_bpos, \"lifetimes cannot use keyword names\");\n-                    }\n-\n                     return Ok(token::Lifetime(ident));\n                 }\n "}, {"sha": "aafdd696b747df8567c5fae8baf6a67baca1cdee", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -35,6 +35,10 @@ impl Ident {\n         Ident::with_empty_ctxt(Symbol::intern(string))\n     }\n \n+    pub fn without_first_quote(&self) -> Ident {\n+        Ident { name: Symbol::from(self.name.as_str().trim_left_matches('\\'')), ctxt: self.ctxt }\n+    }\n+\n     pub fn modern(self) -> Ident {\n         Ident { name: self.name, ctxt: self.ctxt.modern() }\n     }\n@@ -437,4 +441,10 @@ mod tests {\n         // gensym of *existing* string gets new number:\n         assert_eq!(i.gensym(\"dog\"), Symbol(4294967293));\n     }\n+\n+    #[test]\n+    fn without_first_quote_test() {\n+        let i = Ident::from_str(\"'break\");\n+        assert_eq!(i.without_first_quote().name, keywords::Break.name());\n+    }\n }"}, {"sha": "ee553730a35bc4ebca62138b8664b677394e1c36", "filename": "src/test/compile-fail/issue-10412.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n-\n-\n trait Serializable<'self, T> { //~ ERROR lifetimes cannot use keyword names\n-    fn serialize(val : &'self T) -> Vec<u8> ; //~ ERROR lifetimes cannot use keyword names\n+    fn serialize(val : &'self T) -> Vec<u8>; //~ ERROR lifetimes cannot use keyword names\n     fn deserialize(repr : &[u8]) -> &'self T; //~ ERROR lifetimes cannot use keyword names\n }\n \n impl<'self> Serializable<str> for &'self str { //~ ERROR lifetimes cannot use keyword names\n     //~^ ERROR lifetimes cannot use keyword names\n+    //~| ERROR missing lifetime specifier\n     fn serialize(val : &'self str) -> Vec<u8> { //~ ERROR lifetimes cannot use keyword names\n         vec![1]\n     }", "previous_filename": "src/test/parse-fail/issue-10412.rs"}, {"sha": "82f55f2c14241b6f8e613a6273735266b7ff1611", "filename": "src/test/compile-fail/issue-46311.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Fissue-46311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Fissue-46311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46311.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    'break: loop { //~ ERROR invalid label name `'break`\n+    }\n+}"}, {"sha": "d583c4fc6c6b8461c5ef4d3ce89d4f7a3c5ab359", "filename": "src/test/compile-fail/lifetime-no-keyword.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ddf28527119a06a9f5da9bd34c97ae97afe531/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-no-keyword.rs?ref=c8ddf28527119a06a9f5da9bd34c97ae97afe531", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n-\n fn foo<'a>(a: &'a isize) { }\n fn bar(a: &'static isize) { }\n-fn baz(a: &'let isize) { } //~ ERROR lifetimes cannot use keyword names\n-fn zab(a: &'self isize) { } //~ ERROR lifetimes cannot use keyword names\n-\n+fn baz<'let>(a: &'let isize) { } //~ ERROR lifetimes cannot use keyword names\n+//~^ ERROR lifetimes cannot use keyword names\n+fn zab<'self>(a: &'self isize) { } //~ ERROR lifetimes cannot use keyword names\n+//~^ ERROR lifetimes cannot use keyword names\n fn main() { }", "previous_filename": "src/test/parse-fail/lifetime-no-keyword.rs"}]}