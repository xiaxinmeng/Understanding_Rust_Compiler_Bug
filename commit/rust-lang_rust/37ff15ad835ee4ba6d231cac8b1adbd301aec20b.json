{"sha": "37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmYxNWFkODM1ZWU0YmE2ZDIzMWNhYzhiMWFkYmQzMDFhZWMyMGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T19:15:01Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T20:49:10Z"}, "message": "Cleanup", "tree": {"sha": "d33b6ca6fc37c3eaf19980926fa2dd0d59e66b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33b6ca6fc37c3eaf19980926fa2dd0d59e66b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "html_url": "https://github.com/rust-lang/rust/commit/37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ff15ad835ee4ba6d231cac8b1adbd301aec20b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417473aa3d53fb1a094031251af37ecd71e0cc09", "url": "https://api.github.com/repos/rust-lang/rust/commits/417473aa3d53fb1a094031251af37ecd71e0cc09", "html_url": "https://github.com/rust-lang/rust/commit/417473aa3d53fb1a094031251af37ecd71e0cc09"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "7961f4a5299beace91e36b5db9049270ad2267a4", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ff15ad835ee4ba6d231cac8b1adbd301aec20b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff15ad835ee4ba6d231cac8b1adbd301aec20b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "patch": "@@ -462,7 +462,11 @@ impl<'a> InferenceContext<'a> {\n                     };\n                     match canonicalized.decanonicalize_ty(derefed_ty.value).kind(&Interner) {\n                         TyKind::Tuple(_, substs) => name.as_tuple_index().and_then(|idx| {\n-                            substs.as_slice(&Interner).get(idx).map(|a| a.assert_ty_ref(&Interner)).cloned()\n+                            substs\n+                                .as_slice(&Interner)\n+                                .get(idx)\n+                                .map(|a| a.assert_ty_ref(&Interner))\n+                                .cloned()\n                         }),\n                         TyKind::Adt(AdtId(hir_def::AdtId::StructId(s)), parameters) => {\n                             let local_id = self.db.struct_data(*s).variant_data.field(name)?;"}, {"sha": "b6a3cec6d562ed41b0da358911b1ea0d890224de", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/37ff15ad835ee4ba6d231cac8b1adbd301aec20b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff15ad835ee4ba6d231cac8b1adbd301aec20b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "patch": "@@ -2,13 +2,13 @@\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n use super::tls;\n+use crate::GenericArg;\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n     intern::{impl_internable, InternStorage, Internable, Interned},\n     TypeAliasId,\n };\n-use crate::GenericArg;\n use smallvec::SmallVec;\n use std::{fmt, sync::Arc};\n \n@@ -30,15 +30,6 @@ pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub struct InternedVariableKindsInner(Vec<chalk_ir::VariableKind<Interner>>);\n-\n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub struct InternedSubstitutionInner(SmallVec<[GenericArg; 2]>);\n-\n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub struct InternedTypeInner(chalk_ir::TyData<Interner>);\n-\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct InternedWrapper<T>(T);\n \n@@ -51,9 +42,9 @@ impl<T> std::ops::Deref for InternedWrapper<T> {\n }\n \n impl_internable!(\n-    InternedVariableKindsInner,\n-    InternedSubstitutionInner,\n-    InternedTypeInner,\n+    InternedWrapper<Vec<chalk_ir::VariableKind<Interner>>>,\n+    InternedWrapper<SmallVec<[GenericArg; 2]>>,\n+    InternedWrapper<chalk_ir::TyData<Interner>>,\n     InternedWrapper<chalk_ir::LifetimeData<Interner>>,\n     InternedWrapper<chalk_ir::ConstData<Interner>>,\n     InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Interner>>>,\n@@ -63,19 +54,21 @@ impl_internable!(\n );\n \n impl chalk_ir::interner::Interner for Interner {\n-    type InternedType = Interned<InternedTypeInner>;\n+    type InternedType = Interned<InternedWrapper<chalk_ir::TyData<Interner>>>;\n     type InternedLifetime = Interned<InternedWrapper<chalk_ir::LifetimeData<Self>>>;\n     type InternedConst = Interned<InternedWrapper<chalk_ir::ConstData<Self>>>;\n     type InternedConcreteConst = ();\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n-    type InternedSubstitution = Interned<InternedSubstitutionInner>;\n+    type InternedSubstitution = Interned<InternedWrapper<SmallVec<[GenericArg; 2]>>>;\n     type InternedProgramClause = chalk_ir::ProgramClauseData<Self>;\n     type InternedProgramClauses = Interned<InternedWrapper<Vec<chalk_ir::ProgramClause<Self>>>>;\n-    type InternedQuantifiedWhereClauses = Interned<InternedWrapper<Vec<chalk_ir::QuantifiedWhereClause<Self>>>>;\n-    type InternedVariableKinds = Interned<InternedVariableKindsInner>;\n-    type InternedCanonicalVarKinds = Interned<InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Self>>>>;\n+    type InternedQuantifiedWhereClauses =\n+        Interned<InternedWrapper<Vec<chalk_ir::QuantifiedWhereClause<Self>>>>;\n+    type InternedVariableKinds = Interned<InternedWrapper<Vec<chalk_ir::VariableKind<Interner>>>>;\n+    type InternedCanonicalVarKinds =\n+        Interned<InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Self>>>>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type InternedVariances = Interned<InternedWrapper<Vec<chalk_ir::Variance>>>;\n     type DefId = InternId;\n@@ -230,7 +223,7 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn intern_ty(&self, kind: chalk_ir::TyKind<Self>) -> Self::InternedType {\n         let flags = kind.compute_flags(self);\n-        Interned::new(InternedTypeInner(chalk_ir::TyData { kind, flags }))\n+        Interned::new(InternedWrapper(chalk_ir::TyData { kind, flags }))\n     }\n \n     fn ty_data<'a>(&self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n@@ -302,7 +295,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<GenericArg, E>>,\n     ) -> Result<Self::InternedSubstitution, E> {\n-        Ok(Interned::new(InternedSubstitutionInner(data.into_iter().collect::<Result<SmallVec<_>, _>>()?)))\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn substitution_data<'a>(\n@@ -358,9 +351,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n     ) -> Result<Self::InternedVariableKinds, E> {\n-        Ok(Interned::new(InternedVariableKindsInner(\n-            data.into_iter().collect::<Result<Vec<_>, E>>()?,\n-        )))\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn variable_kinds_data<'a>("}]}