{"sha": "3388028776ef606335d0b04373323c02248e6c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODgwMjg3NzZlZjYwNjMzNWQwYjA0MzczMzIzYzAyMjQ4ZTZjN2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-23T23:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-23T23:30:24Z"}, "message": "Rollup merge of #61086 - RalfJung:box, r=alexcrichton\n\nBox::into_unique: do the reborrow-to-raw *after* destroying the Box\n\nCurrently we first \"reborrow\" the box to a raw pointer, and then `forget` it. When tracking raw pointers more strictly (something I am experimenting with locally in Miri), the \"use\" induced by passing the box to `forget` invalidates the previously created raw pointer.\n\nSo adjust my hack from https://github.com/rust-lang/rust/pull/58429 to reorder the two operations.", "tree": {"sha": "929cb9a97af24eba9d05ca8226b620cf6a25c9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929cb9a97af24eba9d05ca8226b620cf6a25c9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3388028776ef606335d0b04373323c02248e6c7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5y0QCRBK7hj4Ov3rIwAAdHIIAE89dFSQEkUTt1lApswX7c1S\nfWC0E31d6nXUlt4XDv3c9te5Ehjnaaac2sYNIt8yjs7Fb8XN/CzKAdbNh0pybbX0\n2iyYuRuP3Y5fZ9gLmXLtdBmLNJXbHuL5oTbT0E5odOFob5MHuwJ0D9HBTXw/XR5b\nWN63sO5U+jdjp9wG/pNFSXsCH5T4gQbgGQCZ4HfKiT5sSL7jR7jQKShQY1a3Wgxf\ngz5BqqobpfcSRumDxhk02mF8d6Jrk+hpXWmdP2n4BGyrC1bEF44CkH7N45/gpk0P\nLjPW/7x/ao/1vhw1f6E3CwgBu20eW6gbShDB6DYW4OiuGUJHHGNu29miTw86Nt8=\n=T4XZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 929cb9a97af24eba9d05ca8226b620cf6a25c9f9\nparent ee972100b2b2a504057e6b6c37e44633f5bbcc73\nparent 8d4e7fde479e018d3caf37d1d12f47710183252e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558654224 +0200\ncommitter GitHub <noreply@github.com> 1558654224 +0200\n\nRollup merge of #61086 - RalfJung:box, r=alexcrichton\n\nBox::into_unique: do the reborrow-to-raw *after* destroying the Box\n\nCurrently we first \"reborrow\" the box to a raw pointer, and then `forget` it. When tracking raw pointers more strictly (something I am experimenting with locally in Miri), the \"use\" induced by passing the box to `forget` invalidates the previously created raw pointer.\n\nSo adjust my hack from https://github.com/rust-lang/rust/pull/58429 to reorder the two operations.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3388028776ef606335d0b04373323c02248e6c7e", "html_url": "https://github.com/rust-lang/rust/commit/3388028776ef606335d0b04373323c02248e6c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3388028776ef606335d0b04373323c02248e6c7e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee972100b2b2a504057e6b6c37e44633f5bbcc73", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee972100b2b2a504057e6b6c37e44633f5bbcc73", "html_url": "https://github.com/rust-lang/rust/commit/ee972100b2b2a504057e6b6c37e44633f5bbcc73"}, {"sha": "8d4e7fde479e018d3caf37d1d12f47710183252e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4e7fde479e018d3caf37d1d12f47710183252e", "html_url": "https://github.com/rust-lang/rust/commit/8d4e7fde479e018d3caf37d1d12f47710183252e"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "97c2d8e7a8e796010dc0f5126c599b52c386de57", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3388028776ef606335d0b04373323c02248e6c7e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3388028776ef606335d0b04373323c02248e6c7e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=3388028776ef606335d0b04373323c02248e6c7e", "patch": "@@ -253,15 +253,16 @@ impl<T: ?Sized> Box<T> {\n     #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub fn into_unique(mut b: Box<T>) -> Unique<T> {\n+    pub fn into_unique(b: Box<T>) -> Unique<T> {\n+        let mut unique = b.0;\n+        mem::forget(b);\n         // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n         // Stacked Borrows.  This function here corresponds to \"reborrowing to\n         // a raw pointer\", but there is no actual reborrow here -- so\n         // without some care, the pointer we are returning here still carries\n-        // the `Uniq` tag.  We round-trip through a mutable reference to avoid that.\n-        let unique = unsafe { b.0.as_mut() as *mut T };\n-        mem::forget(b);\n-        unsafe { Unique::new_unchecked(unique) }\n+        // the tag of `b`, with `Unique` permission.\n+        // We round-trip through a mutable reference to avoid that.\n+        unsafe { Unique::new_unchecked(unique.as_mut() as *mut T) }\n     }\n \n     /// Consumes and leaks the `Box`, returning a mutable reference,"}]}