{"sha": "336f31432df03e4dbd635dddedad1c9e67271a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNmYzMTQzMmRmMDNlNGRiZDYzNWRkZGVkYWQxYzllNjcyNzFhMGM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T19:19:24Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T19:27:31Z"}, "message": "Warn when [T; N].into_iter() is ambiguous in the new edition.", "tree": {"sha": "ffe9b0b86da9d9276cbfb57cf7f77f4268d87660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe9b0b86da9d9276cbfb57cf7f77f4268d87660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336f31432df03e4dbd635dddedad1c9e67271a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336f31432df03e4dbd635dddedad1c9e67271a0c", "html_url": "https://github.com/rust-lang/rust/commit/336f31432df03e4dbd635dddedad1c9e67271a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336f31432df03e4dbd635dddedad1c9e67271a0c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13edc17f65bcad7fe9046720a16fc192e810970e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13edc17f65bcad7fe9046720a16fc192e810970e", "html_url": "https://github.com/rust-lang/rust/commit/13edc17f65bcad7fe9046720a16fc192e810970e"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "f47704bbf6841c9f1283729b4d54fc676179c4cd", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/336f31432df03e4dbd635dddedad1c9e67271a0c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/336f31432df03e4dbd635dddedad1c9e67271a0c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=336f31432df03e4dbd635dddedad1c9e67271a0c", "patch": "@@ -4405,6 +4405,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_lint\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\","}, {"sha": "ef4bda666ba062c7bb033084109649cda82bab23", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=336f31432df03e4dbd635dddedad1c9e67271a0c", "patch": "@@ -62,6 +62,8 @@ mod traits;\n mod types;\n mod unused;\n \n+pub use array_into_iter::ARRAY_INTO_ITER;\n+\n use rustc_ast as ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;"}, {"sha": "dd76a5e4b99b235b0ba395fa38e95776b3029f3e", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=336f31432df03e4dbd635dddedad1c9e67271a0c", "patch": "@@ -26,3 +26,4 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n+rustc_lint = { path = \"../rustc_lint\" }"}, {"sha": "d5881ad8a51267372f85b3e1a86aaa3f64ba0b7c", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336f31432df03e4dbd635dddedad1c9e67271a0c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=336f31432df03e4dbd635dddedad1c9e67271a0c", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{Adt, Ref, Ty};\n+use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n@@ -38,11 +38,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // These are the method names that were added to prelude in Rust 2021\n-        if !matches!(segment.ident.name, sym::try_into) {\n+        // `try_into` was added to the prelude in Rust 2021.\n+        // `into_iter` wasn't, but `[T; N].into_iter()` doesn't resolve to\n+        // IntoIterator::into_iter before Rust 2021, which results in the same\n+        // problem.\n+        if !matches!(segment.ident.name, sym::try_into | sym::into_iter) {\n             return;\n         }\n \n+        let prelude_or_array_lint = if segment.ident.name == sym::into_iter {\n+            // The `into_iter` problem is only a thing for arrays.\n+            if let Array(..) = self_ty.kind() {\n+                // In this case, it wasn't really a prelude addition that was the problem.\n+                // Instead, the problem is that the array-into_iter hack will no longer apply in Rust 2021.\n+                rustc_lint::ARRAY_INTO_ITER\n+            } else {\n+                // No problem in this case.\n+                return;\n+            }\n+        } else {\n+            RUST_2021_PRELUDE_COLLISIONS\n+        };\n+\n         // No need to lint if method came from std/core, as that will now be in the prelude\n         if matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n             return;\n@@ -69,7 +86,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Inherent impls only require not relying on autoref and autoderef in order to\n             // ensure that the trait implementation won't be used\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 self_expr.hir_id,\n                 self_expr.span,\n                 |lint| {\n@@ -130,7 +147,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // trait implementations require full disambiguation to not clash with the new prelude\n             // additions (i.e. convert from dot-call to fully-qualified call)\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 call_expr.hir_id,\n                 call_expr.span,\n                 |lint| {"}]}