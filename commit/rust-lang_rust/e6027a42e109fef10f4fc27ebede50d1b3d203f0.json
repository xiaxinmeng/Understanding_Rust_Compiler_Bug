{"sha": "e6027a42e109fef10f4fc27ebede50d1b3d203f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MDI3YTQyZTEwOWZlZjEwZjRmYzI3ZWJlZGU1MGQxYjNkMjAzZjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-23T18:25:56Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-03T12:16:23Z"}, "message": "Add `unclosed_html_tags` lint", "tree": {"sha": "c4b918f40dcd4d015415d445b53f176cc60a0f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b918f40dcd4d015415d445b53f176cc60a0f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6027a42e109fef10f4fc27ebede50d1b3d203f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6027a42e109fef10f4fc27ebede50d1b3d203f0", "html_url": "https://github.com/rust-lang/rust/commit/e6027a42e109fef10f4fc27ebede50d1b3d203f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6027a42e109fef10f4fc27ebede50d1b3d203f0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782013564efc06ef02614ba35a4e67dee4fcb8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/782013564efc06ef02614ba35a4e67dee4fcb8e7", "html_url": "https://github.com/rust-lang/rust/commit/782013564efc06ef02614ba35a4e67dee4fcb8e7"}], "stats": {"total": 222, "additions": 213, "deletions": 9}, "files": [{"sha": "591be4171619623b2a3a6ccc6679b605e20ffcbd", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -63,8 +63,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n-    EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, MISSING_DOC_CODE_EXAMPLES,\n-    PRIVATE_DOC_TESTS,\n+    EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, INVALID_HTML_TAGS,\n+    MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -308,7 +308,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_DOC_CODE_EXAMPLES,\n-        PRIVATE_DOC_TESTS\n+        PRIVATE_DOC_TESTS,\n+        INVALID_HTML_TAGS\n     );\n \n     // Register renamed and removed lints."}, {"sha": "ce2a14b448149dd856cd646675a5cce8714d7427", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -1881,6 +1881,16 @@ declare_lint! {\n     \"detects code samples in docs of private items not documented by rustdoc\"\n }\n \n+declare_lint! {\n+    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n+    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n+    pub INVALID_HTML_TAGS,\n+    Warn,\n+    \"detects invalid HTML tags in doc comments\"\n+}\n+\n declare_lint! {\n     /// The `where_clauses_object_safety` lint detects for [object safety] of\n     /// [where clauses].\n@@ -2699,6 +2709,7 @@ declare_lint_pass! {\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_CRATE_LEVEL_DOCS,\n         MISSING_DOC_CODE_EXAMPLES,\n+        INVALID_HTML_TAGS,\n         PRIVATE_DOC_TESTS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,"}, {"sha": "45a84c4fb30d3e89f43dc9d9f3a520aed5654d22", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -328,6 +328,7 @@ pub fn run_core(\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n     let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_html_tags = rustc_lint::builtin::INVALID_HTML_TAGS.name;\n     let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n     let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n \n@@ -340,6 +341,7 @@ pub fn run_core(\n         private_doc_tests.to_owned(),\n         no_crate_level_docs.to_owned(),\n         invalid_codeblock_attributes_name.to_owned(),\n+        invalid_html_tags.to_owned(),\n         renamed_and_removed_lints.to_owned(),\n         unknown_lints.to_owned(),\n     ];"}, {"sha": "2fd06d7e5730fded3a810e3b40e4c9b35d43cce1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -43,7 +43,7 @@ use pulldown_cmark::{html, BrokenLink, CodeBlockKind, CowStr, Event, Options, Pa\n #[cfg(test)]\n mod tests;\n \n-fn opts() -> Options {\n+pub(crate) fn opts() -> Options {\n     Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES | Options::ENABLE_STRIKETHROUGH\n }\n "}, {"sha": "b177eaeeb732071835005999409a3ce6503f6dd0", "filename": "src/librustdoc/passes/html_tags.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -0,0 +1,135 @@\n+use super::{span_of_attrs, Pass};\n+use crate::clean::*;\n+use crate::core::DocContext;\n+use crate::fold::DocFolder;\n+use crate::html::markdown::opts;\n+use pulldown_cmark::{Event, Parser};\n+use rustc_hir::hir_id::HirId;\n+use rustc_session::lint;\n+use rustc_span::Span;\n+\n+pub const CHECK_INVALID_HTML_TAGS: Pass = Pass {\n+    name: \"check-invalid-html-tags\",\n+    run: check_invalid_html_tags,\n+    description: \"detects invalid HTML tags in doc comments\",\n+};\n+\n+struct InvalidHtmlTagsLinter<'a, 'tcx> {\n+    cx: &'a DocContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> InvalidHtmlTagsLinter<'a, 'tcx> {\n+    fn new(cx: &'a DocContext<'tcx>) -> Self {\n+        InvalidHtmlTagsLinter { cx }\n+    }\n+}\n+\n+pub fn check_invalid_html_tags(krate: Crate, cx: &DocContext<'_>) -> Crate {\n+    let mut coll = InvalidHtmlTagsLinter::new(cx);\n+\n+    coll.fold_crate(krate)\n+}\n+\n+const ALLOWED_UNCLOSED: &[&str] = &[\n+    \"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n+    \"source\", \"track\", \"wbr\",\n+];\n+\n+fn drop_tag(\n+    cx: &DocContext<'_>,\n+    tags: &mut Vec<String>,\n+    tag_name: String,\n+    hir_id: HirId,\n+    sp: Span,\n+) {\n+    if let Some(pos) = tags.iter().position(|t| *t == tag_name) {\n+        for _ in pos + 1..tags.len() {\n+            if ALLOWED_UNCLOSED.iter().find(|&at| at == &tags[pos + 1]).is_some() {\n+                continue;\n+            }\n+            // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n+            // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n+            // have `h3`, meaning the tag wasn't closed as it should have.\n+            cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                lint.build(&format!(\"unclosed HTML tag `{}`\", tags[pos + 1])).emit()\n+            });\n+            tags.remove(pos + 1);\n+        }\n+        tags.remove(pos);\n+    } else {\n+        // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n+        // but it helps for the visualization).\n+        cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+            lint.build(&format!(\"unopened HTML tag `{}`\", tag_name)).emit()\n+        });\n+    }\n+}\n+\n+fn extract_tag(cx: &DocContext<'_>, tags: &mut Vec<String>, text: &str, hir_id: HirId, sp: Span) {\n+    let mut iter = text.chars().peekable();\n+\n+    while let Some(c) = iter.next() {\n+        if c == '<' {\n+            let mut tag_name = String::new();\n+            let mut is_closing = false;\n+            while let Some(&c) = iter.peek() {\n+                // </tag>\n+                if c == '/' && tag_name.is_empty() {\n+                    is_closing = true;\n+                } else if c.is_ascii_alphanumeric() && !c.is_ascii_uppercase() {\n+                    tag_name.push(c);\n+                } else {\n+                    break;\n+                }\n+                iter.next();\n+            }\n+            if tag_name.is_empty() {\n+                // Not an HTML tag presumably...\n+                continue;\n+            }\n+            if is_closing {\n+                drop_tag(cx, tags, tag_name, hir_id, sp);\n+            } else {\n+                tags.push(tag_name);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+            Some(hir_id) => hir_id,\n+            None => {\n+                // If non-local, no need to check anything.\n+                return None;\n+            }\n+        };\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+        if !dox.is_empty() {\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let mut tags = Vec::new();\n+\n+            let p = Parser::new_ext(&dox, opts());\n+\n+            for event in p {\n+                match event {\n+                    Event::Html(text) => extract_tag(self.cx, &mut tags, &text, hir_id, sp),\n+                    _ => {}\n+                }\n+            }\n+\n+            for tag in tags.iter().filter(|t| ALLOWED_UNCLOSED.iter().find(|at| at == t).is_none())\n+            {\n+                self.cx.tcx.struct_span_lint_hir(\n+                    lint::builtin::INVALID_HTML_TAGS,\n+                    hir_id,\n+                    sp,\n+                    |lint| lint.build(&format!(\"unclosed HTML tag `{}`\", tag)).emit(),\n+                );\n+            }\n+        }\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "3819aaee56000ef44f773d8bfabf198bdfc7232d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -45,6 +45,9 @@ pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n mod calculate_doc_coverage;\n pub use self::calculate_doc_coverage::CALCULATE_DOC_COVERAGE;\n \n+mod html_tags;\n+pub use self::html_tags::CHECK_INVALID_HTML_TAGS;\n+\n /// A single pass over the cleaned documentation.\n ///\n /// Runs in the compiler context, so it has access to types and traits and the like.\n@@ -87,6 +90,7 @@ pub const PASSES: &[Pass] = &[\n     CHECK_CODE_BLOCK_SYNTAX,\n     COLLECT_TRAIT_IMPLS,\n     CALCULATE_DOC_COVERAGE,\n+    CHECK_INVALID_HTML_TAGS,\n ];\n \n /// The list of passes run by default.\n@@ -101,6 +105,7 @@ pub const DEFAULT_PASSES: &[ConditionalPass] = &[\n     ConditionalPass::always(COLLECT_INTRA_DOC_LINKS),\n     ConditionalPass::always(CHECK_CODE_BLOCK_SYNTAX),\n     ConditionalPass::always(PROPAGATE_DOC_CFG),\n+    ConditionalPass::always(CHECK_INVALID_HTML_TAGS),\n ];\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc."}, {"sha": "bd4db6ad6175711bb55c3f9c2264488ee28be0f6", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -1,3 +1,4 @@\n+#![allow(unclosed_html_tags)]\n #![deny(broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n "}, {"sha": "13ed978d61380e4df58b0eed27ce3986edcf56dd", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6027a42e109fef10f4fc27ebede50d1b3d203f0/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=e6027a42e109fef10f4fc27ebede50d1b3d203f0", "patch": "@@ -1,35 +1,40 @@\n error: unresolved link to `path::to::nonexistent::module`\n-  --> $DIR/intra-link-errors.rs:7:6\n+  --> $DIR/intra-link-errors.rs:8:6\n    |\n LL | /// [path::to::nonexistent::module]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-link-errors.rs:1:9\n+  --> $DIR/intra-link-errors.rs:2:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unresolved link to `path::to::nonexistent::macro`\n-  --> $DIR/intra-link-errors.rs:11:6\n+  --> $DIR/intra-link-errors.rs:12:6\n    |\n LL | /// [path::to::nonexistent::macro!]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n \n error: unresolved link to `path::to::nonexistent::type`\n-  --> $DIR/intra-link-errors.rs:15:6\n+  --> $DIR/intra-link-errors.rs:16:6\n    |\n LL | /// [type@path::to::nonexistent::type]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n \n error: unresolved link to `std::io::not::here`\n-  --> $DIR/intra-link-errors.rs:19:6\n+  --> $DIR/intra-link-errors.rs:20:6\n    |\n LL | /// [std::io::not::here]\n    |      ^^^^^^^^^^^^^^^^^^ the module `io` contains no item named `not`\n \n+<<<<<<< HEAD\n error: unresolved link to `std::io::not::here`\n   --> $DIR/intra-link-errors.rs:23:6\n+=======\n+error: unresolved link to `std::io::Error::x`\n+  --> $DIR/intra-link-errors.rs:24:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [type@std::io::not::here]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^ the module `io` contains no item named `not`\n@@ -41,13 +46,21 @@ LL | /// [std::io::Error::x]\n    |      ^^^^^^^^^^^^^^^^^ the struct `Error` has no field or associated item named `x`\n \n error: unresolved link to `std::io::ErrorKind::x`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:31:6\n+=======\n+  --> $DIR/intra-link-errors.rs:28:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [std::io::ErrorKind::x]\n    |      ^^^^^^^^^^^^^^^^^^^^^ the enum `ErrorKind` has no variant or associated item named `x`\n \n error: unresolved link to `f::A`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:35:6\n+=======\n+  --> $DIR/intra-link-errors.rs:32:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [f::A]\n    |      ^^^^ `f` is a function, not a module or type, and cannot have associated items\n@@ -59,25 +72,41 @@ LL | /// [f::A!]\n    |      ^^^^^ `f` is a function, not a module or type, and cannot have associated items\n \n error: unresolved link to `S::A`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:43:6\n+=======\n+  --> $DIR/intra-link-errors.rs:36:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [S::A]\n    |      ^^^^ the struct `S` has no field or associated item named `A`\n \n error: unresolved link to `S::fmt`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:47:6\n+=======\n+  --> $DIR/intra-link-errors.rs:40:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [S::fmt]\n    |      ^^^^^^ the struct `S` has no field or associated item named `fmt`\n \n error: unresolved link to `E::D`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:51:6\n+=======\n+  --> $DIR/intra-link-errors.rs:44:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [E::D]\n    |      ^^^^ the enum `E` has no variant or associated item named `D`\n \n error: unresolved link to `u8::not_found`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:55:6\n+=======\n+  --> $DIR/intra-link-errors.rs:48:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [u8::not_found]\n    |      ^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n@@ -98,7 +127,11 @@ LL | /// [type@Vec::into_iter]\n    |      help: to link to the associated function, add parentheses: `Vec::into_iter()`\n \n error: unresolved link to `S`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:68:6\n+=======\n+  --> $DIR/intra-link-errors.rs:52:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [S!]\n    |      ^^\n@@ -107,7 +140,11 @@ LL | /// [S!]\n    |      help: to link to the struct, prefix with `struct@`: `struct@S`\n \n error: unresolved link to `T::g`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:86:6\n+=======\n+  --> $DIR/intra-link-errors.rs:70:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [type@T::g]\n    |      ^^^^^^^^^\n@@ -116,13 +153,21 @@ LL | /// [type@T::g]\n    |      help: to link to the associated function, add parentheses: `T::g()`\n \n error: unresolved link to `T::h`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:91:6\n+=======\n+  --> $DIR/intra-link-errors.rs:75:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [T::h!]\n    |      ^^^^^ the trait `T` has no macro named `h`\n \n error: unresolved link to `S::h`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:78:6\n+=======\n+  --> $DIR/intra-link-errors.rs:62:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [type@S::h]\n    |      ^^^^^^^^^\n@@ -131,7 +176,11 @@ LL | /// [type@S::h]\n    |      help: to link to the associated function, add parentheses: `S::h()`\n \n error: unresolved link to `m`\n+<<<<<<< HEAD\n   --> $DIR/intra-link-errors.rs:98:6\n+=======\n+  --> $DIR/intra-link-errors.rs:82:6\n+>>>>>>> Add `unclosed_html_tags` lint\n    |\n LL | /// [m()]\n    |      ^^^"}]}