{"sha": "4f32a2d8540cc7534270be3a0aa33b830534a67b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzJhMmQ4NTQwY2M3NTM0MjcwYmUzYTBhYTMzYjgzMDUzNGE2N2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-20T00:24:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:47:57Z"}, "message": "librustc: Fix merge fallout.", "tree": {"sha": "5eb9fcf39e8d43b19ab1ee030fb4802800d62d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb9fcf39e8d43b19ab1ee030fb4802800d62d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f32a2d8540cc7534270be3a0aa33b830534a67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f32a2d8540cc7534270be3a0aa33b830534a67b", "html_url": "https://github.com/rust-lang/rust/commit/4f32a2d8540cc7534270be3a0aa33b830534a67b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f32a2d8540cc7534270be3a0aa33b830534a67b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9f5ec3975d54b59d3d4813063f87fb3f41d3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9f5ec3975d54b59d3d4813063f87fb3f41d3f6", "html_url": "https://github.com/rust-lang/rust/commit/5c9f5ec3975d54b59d3d4813063f87fb3f41d3f6"}], "stats": {"total": 70, "additions": 18, "deletions": 52}, "files": [{"sha": "9516517d9f7bebdc361378b5ae77b6aa8dcb62a8", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -420,6 +420,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_add_bytes_to_bits_tuple_overflow2() {\n-        add_bytes_to_bits_tuple::<u64>((Bounded::max_value::<u64>() - 1, 0), 0x8000000000000000);\n+        let value: u64 = Bounded::max_value();\n+        add_bytes_to_bits_tuple::<u64>((value - 1, 0), 0x8000000000000000);\n     }\n }"}, {"sha": "b8b1928ae5f7d4bf6dfbb5d00993ef342aaf88b4", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -68,7 +68,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    body: &ast::Block) {\n     debug!(\"check_loans(body id=%?)\", body.id);\n \n-    let mut clcx = CheckLoanCtxt {\n+    let clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n         move_data: @move_data,"}, {"sha": "706d6871f8639c69d54ec9309aab268fd4c17344", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -377,7 +377,7 @@ impl Visitor<()> for GatherLocalsVisitor {\n                   if pat_util::pat_is_binding(self.fcx.ccx.tcx.def_map, p) => {\n                 self.assign(p.id, None);\n                 debug!(\"Pattern binding %s is assigned to %s\",\n-                       self.tcx.sess.str_of(path.idents[0]),\n+                       self.tcx.sess.str_of(path.segments[0].identifier),\n                        self.fcx.infcx().ty_to_str(\n                            self.fcx.inh.locals.get_copy(&p.id)));\n               }\n@@ -3299,7 +3299,7 @@ pub fn instantiate_path(fcx: @mut FnCtxt,\n                         node_id: ast::NodeId) {\n     debug!(\">>> instantiate_path\");\n \n-    let mut ty_param_count = tpt.generics.type_param_defs.len();\n+    let ty_param_count = tpt.generics.type_param_defs.len();\n     let mut ty_substs_len = 0;\n     for segment in pth.segments.iter() {\n         ty_substs_len += segment.types.len()"}, {"sha": "cdce69f7cd760a05a9c684b6621607a81aef3845", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -930,8 +930,12 @@ delegate!(float to Float)\n delegate!(f32 to Float)\n delegate!(f64 to Float)\n \n-impl<T> Default for *const T {\n-    fn fmt(me: &*const T, f: &mut Formatter) { Pointer::fmt(me, f) }\n+impl<T> Default for *T {\n+    fn fmt(me: &*T, f: &mut Formatter) { Pointer::fmt(me, f) }\n+}\n+\n+impl<T> Default for *mut T {\n+    fn fmt(me: &*mut T, f: &mut Formatter) { Pointer::fmt(me, f) }\n }\n \n // If you expected tests to be here, look instead at the run-pass/ifmt.rs test,"}, {"sha": "b8cf3de635f04673de303bd8f31829989b143651", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -76,7 +76,6 @@ fn rand_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n \n             let variant_count = cx.expr_uint(span, variants.len());\n \n-            let r_ty = cx.ty_ident(span, cx.ident_of(\"R\"));\n             let rand_name = cx.path_all(span,\n                                         true,\n                                         rand_ident.clone(),"}, {"sha": "81113f2432923c6089cf37e932a07806c2a821c8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -372,7 +372,7 @@ mod test {\n                             ast::PathSegment {\n                                 identifier: str_to_ident(\"a\"),\n                                 lifetime: None,\n-                                types: ~[],\n+                                types: opt_vec::Empty,\n                             }\n                         ],\n                     }),\n@@ -391,12 +391,12 @@ mod test {\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"a\"),\n                                     lifetime: None,\n-                                    types: ~[],\n+                                    types: opt_vec::Empty,\n                                 },\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"b\"),\n                                     lifetime: None,\n-                                    types: ~[],\n+                                    types: opt_vec::Empty,\n                                 }\n                             ]\n                         }),\n@@ -509,48 +509,6 @@ mod test {\n         parser_done(parser);\n     }\n \n-    #[test] fn parse_arg () {\n-        let parser = string_to_parser(@\"b : int\");\n-        assert_eq!(parser.parse_arg_general(true),\n-                   ast::arg{\n-                       is_mutbl: false,\n-                       ty: ast::Ty{id:3, // fixme\n-                                    node: ast::ty_path(ast::Path{\n-                                        span:sp(4,4), // this is bizarre...\n-                                        // check this in the original parser?\n-                                        global:false,\n-                                        segments: ~[\n-                                            ast::PathSegment {\n-                                                identifier:\n-                                                    str_to_ident(\"int\"),\n-                                                lifetime: None,\n-                                                types: opt_vec::Empty,\n-                                            }\n-                                        ],\n-                                    }, None, 2),\n-                                    span:sp(4,7)},\n-                       pat: @ast::pat{id:1,\n-                                      node: ast::pat_ident(\n-                                        ast::bind_infer,\n-                                        ast::Path {\n-                                            span:sp(0,1),\n-                                            global:false,\n-                                            segments: ~[\n-                                                ast::PathSegment {\n-                                                    identifier:\n-                                                        str_to_ident(\"b\"),\n-                                                    lifetime: None,\n-                                                    types: opt_vec::Empty,\n-                                                }\n-                                            ],\n-                                        },\n-                                        None // no idea\n-                                      ),\n-                                      span: sp(0,1)},\n-                       id: 4 // fixme\n-                   })\n-    }\n-\n     // check the contents of the tt manually:\n     #[test] fn parse_fundecl () {\n         // this test depends on the intern order of \"fn\" and \"int\", and on the"}, {"sha": "9dd6d1ef173df35359aa17cc1612d95fe65edca7", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "2d666bf4cf5aa7d483c879144b234f209e67735c", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f32a2d8540cc7534270be3a0aa33b830534a67b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=4f32a2d8540cc7534270be3a0aa33b830534a67b", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}