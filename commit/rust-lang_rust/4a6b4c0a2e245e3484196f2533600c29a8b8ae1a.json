{"sha": "4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmI0YzBhMmUyNDVlMzQ4NDE5NmYyNTMzNjAwYzI5YThiOGFlMWE=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-03-29T01:44:16Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-03-31T00:42:05Z"}, "message": "Introduce saturating math", "tree": {"sha": "00c2e9770a46baec9084ed51e3cb15920d4d4b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c2e9770a46baec9084ed51e3cb15920d4d4b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "html_url": "https://github.com/rust-lang/rust/commit/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa77b196c8f4cca27009c334f09466b80aca2f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa77b196c8f4cca27009c334f09466b80aca2f8a", "html_url": "https://github.com/rust-lang/rust/commit/fa77b196c8f4cca27009c334f09466b80aca2f8a"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "93c97cfed8ece5113e46548d7bdea4e7d547475d", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "patch": "@@ -62,4 +62,10 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n     pub(crate) fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n     pub(crate) fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;\n+\n+    // {s,u}add.sat\n+    pub(crate) fn simd_saturating_add<T>(x: T, y: T) -> T;\n+\n+    // {s,u}sub.sat\n+    pub(crate) fn simd_saturating_sub<T>(x: T, y: T) -> T;\n }"}, {"sha": "8ff08223598afc6c9ce0d7650069144268f1eeef", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "patch": "@@ -1,6 +1,7 @@\n #![no_std]\n #![allow(incomplete_features)]\n #![feature(repr_simd, platform_intrinsics, simd_ffi, const_generics)]\n+#![feature(extended_key_value_attributes)]\n #![warn(missing_docs)]\n //! Portable SIMD module.\n \n@@ -16,6 +17,8 @@ mod intrinsics;\n mod ops;\n mod round;\n \n+mod math;\n+\n mod lanes_at_most_64;\n pub use lanes_at_most_64::LanesAtMost64;\n "}, {"sha": "6fabf35e3da3c176f8c671a9c441a508e757058a", "filename": "crates/core_simd/src/math.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6b4c0a2e245e3484196f2533600c29a8b8ae1a/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=4a6b4c0a2e245e3484196f2533600c29a8b8ae1a", "patch": "@@ -0,0 +1,88 @@\n+macro_rules! impl_uint_arith {\n+    ($(($name:ident, $n:ty)),+) => {\n+        $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost64 {\n+\n+            /// Lanewise saturating add.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::MAX;\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([2, 1, 0, MAX]);\")]\n+            #[doc = concat!(\"let max = \", stringify!($name), \"::splat(MAX);\")]\n+            /// let unsat = x + max;\n+            /// let sat = x.saturating_add(max);\n+            /// assert_eq!(x - 1, unsat);\n+            /// assert_eq!(sat, max);\n+            /// ```\n+            #[inline]\n+            pub fn saturating_add(self, second: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_saturating_add(self, second) }\n+            }\n+\n+            /// Lanewise saturating subtract.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::MAX;\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([2, 1, 0, MAX]);\")]\n+            #[doc = concat!(\"let max = \", stringify!($name), \"::splat(MAX);\")]\n+            /// let unsat = x - max;\n+            /// let sat = x.saturating_sub(max);\n+            /// assert_eq!(unsat, x + 1);\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::splat(0));\")]\n+            #[inline]\n+            pub fn saturating_sub(self, second: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+            }\n+        })+\n+    }\n+}\n+\n+macro_rules! impl_int_arith {\n+    ($(($name:ident, $n:ty)),+) => {\n+        $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost64 {\n+\n+            /// Lanewise saturating add.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, 0, 1, MAX]);\")]\n+            #[doc = concat!(\"let max = \", stringify!($name), \"::splat(MAX);\")]\n+            /// let unsat = x + max;\n+            /// let sat = x.saturating_add(max);\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([-1, MAX, MIN, -2]));\")]\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([-1, MAX, MAX, MAX]));\")]\n+            /// ```\n+            #[inline]\n+            pub fn saturating_add(self, second: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_saturating_add(self, second) }\n+            }\n+\n+            /// Lanewise saturating subtract.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, -1, MAX]);\")]\n+            #[doc = concat!(\"let max = \", stringify!($name), \"::splat(MAX);\")]\n+            /// let unsat = x - max;\n+            /// let sat = x.saturating_sub(max);\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([1, MAX, MIN, 0]));\")]\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MIN, MIN, MIN, 0]));\")]\n+            #[inline]\n+            pub fn saturating_sub(self, second: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+            }\n+        })+\n+    }\n+}\n+\n+use crate::vector::*;\n+\n+impl_uint_arith! { (SimdU8, u8), (SimdU16, u16), (SimdU32, u32), (SimdU64, u64), (SimdUsize, usize) }\n+impl_int_arith! { (SimdI8, i8), (SimdI16, i16), (SimdI32, i32), (SimdI64, i64), (SimdIsize, isize) }"}]}