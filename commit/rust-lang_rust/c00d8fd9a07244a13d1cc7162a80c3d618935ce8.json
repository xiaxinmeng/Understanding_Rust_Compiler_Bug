{"sha": "c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMGQ4ZmQ5YTA3MjQ0YTEzZDFjYzcxNjJhODBjM2Q2MTg5MzVjZTg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-02T17:41:07Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-05T22:24:36Z"}, "message": "Add (unsafe) coercion from bits to std::bitflags\n\nThe intent of `std::bitflags` is to allow building type-safe wrappers\naround C-style flags APIs. But in addition to construction these flags\nfrom the Rust side, we need a way to convert them from the C\nside. This patch adds a `from_bits` function, which is unsafe since\nthe bits in question may not represent a valid combination of flags.", "tree": {"sha": "377273474798d8fae7931491ccddab89b81efd2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377273474798d8fae7931491ccddab89b81efd2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "html_url": "https://github.com/rust-lang/rust/commit/c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8fd9a07244a13d1cc7162a80c3d618935ce8/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "html_url": "https://github.com/rust-lang/rust/commit/b733df0fc7942aea205d8fc451d2a4d17d47dfe9"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "5737bc772df02ec7d569a780bf0bc95f211727a9", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c00d8fd9a07244a13d1cc7162a80c3d618935ce8/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00d8fd9a07244a13d1cc7162a80c3d618935ce8/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "patch": "@@ -127,6 +127,12 @@ macro_rules! bitflags(\n                 self.bits\n             }\n \n+            /// Convert from underlying bit representation. Unsafe because the\n+            /// bits are not guaranteed to represent valid flags.\n+            pub unsafe fn from_bits(bits: $T) -> $BitFlags {\n+                $BitFlags { bits: bits }\n+            }\n+\n             /// Returns `true` if no flags are currently stored.\n             pub fn is_empty(&self) -> bool {\n                 *self == $BitFlags::empty()"}]}