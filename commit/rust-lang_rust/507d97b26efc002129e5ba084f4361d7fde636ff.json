{"sha": "507d97b26efc002129e5ba084f4361d7fde636ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2Q5N2IyNmVmYzAwMjEyOWU1YmEwODRmNDM2MWQ3ZmRlNjM2ZmY=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2021-06-02T10:06:34Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2021-06-02T10:09:04Z"}, "message": "Update expressions where we can use array's IntoIterator implementation", "tree": {"sha": "dba7146c16d7c79ed80166cf3277b4bba1367cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba7146c16d7c79ed80166cf3277b4bba1367cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507d97b26efc002129e5ba084f4361d7fde636ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507d97b26efc002129e5ba084f4361d7fde636ff", "html_url": "https://github.com/rust-lang/rust/commit/507d97b26efc002129e5ba084f4361d7fde636ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507d97b26efc002129e5ba084f4361d7fde636ff/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d4d46f66929122cc890279cde4765df7a0a90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d4d46f66929122cc890279cde4765df7a0a90f", "html_url": "https://github.com/rust-lang/rust/commit/01d4d46f66929122cc890279cde4765df7a0a90f"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "91eec10d575935ab95bf69ac22962c13e5394988", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -551,19 +551,13 @@ const LEN: usize = 16384;\n #[bench]\n fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| data.iter().cloned().chain([1].iter().cloned()).collect::<Vec<_>>());\n+    b.iter(|| data.iter().cloned().chain([1]).collect::<Vec<_>>());\n }\n \n #[bench]\n fn bench_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| {\n-        data.iter()\n-            .cloned()\n-            .chain([1].iter().cloned())\n-            .chain([2].iter().cloned())\n-            .collect::<Vec<_>>()\n-    });\n+    b.iter(|| data.iter().cloned().chain([1]).chain([2]).collect::<Vec<_>>());\n }\n \n #[bench]"}, {"sha": "4a1d564e2ab879547f8036133d7c0dc296c34c70", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -921,7 +921,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n@@ -950,7 +950,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// #![feature(shrink_to)]\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n@@ -984,7 +984,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     ///\n     /// assert_eq!(vec.capacity(), 10);\n     /// let slice = vec.into_boxed_slice();\n@@ -2586,7 +2586,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut v = vec![1, 2, 3];\n     /// let new = [7, 8];\n-    /// let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();\n+    /// let u: Vec<_> = v.splice(..2, new).collect();\n     /// assert_eq!(v, &[7, 8, 3]);\n     /// assert_eq!(u, &[1, 2]);\n     /// ```"}, {"sha": "bad765c7f51fab944b3de89a3a956de2dd42f158", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -14,7 +14,7 @@ use super::{Drain, Vec};\n /// ```\n /// let mut v = vec![0, 1, 2];\n /// let new = [7, 8];\n-/// let iter: std::vec::Splice<_> = v.splice(1.., new.iter().cloned());\n+/// let iter: std::vec::Splice<_> = v.splice(1.., new);\n /// ```\n #[derive(Debug)]\n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "c203cdafecb03dd27be6f502965adffb715b6491", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -793,7 +793,7 @@ fn test_drain_leak() {\n fn test_splice() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(2..4, a.iter().cloned());\n+    v.splice(2..4, a);\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     v.splice(1..3, Some(20));\n     assert_eq!(v, &[1, 20, 11, 12, 5]);\n@@ -803,7 +803,7 @@ fn test_splice() {\n fn test_splice_inclusive_range() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    let t1: Vec<_> = v.splice(2..=3, a.iter().cloned()).collect();\n+    let t1: Vec<_> = v.splice(2..=3, a).collect();\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     assert_eq!(t1, &[3, 4]);\n     let t2: Vec<_> = v.splice(1..=2, Some(20)).collect();\n@@ -816,15 +816,15 @@ fn test_splice_inclusive_range() {\n fn test_splice_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..6, a.iter().cloned());\n+    v.splice(5..6, a);\n }\n \n #[test]\n #[should_panic]\n fn test_splice_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..=5, a.iter().cloned());\n+    v.splice(5..=5, a);\n }\n \n #[test]\n@@ -848,7 +848,7 @@ fn test_splice_unbounded() {\n fn test_splice_forget() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    std::mem::forget(v.splice(2..4, a.iter().cloned()));\n+    std::mem::forget(v.splice(2..4, a));\n     assert_eq!(v, &[1, 2]);\n }\n "}, {"sha": "2da3d6a72fb6f18049028616880ff5f137a10a0d", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -58,7 +58,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///         .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n     ///         .collect::<Vec<_>>(),\n     ///     vec![\n@@ -82,7 +82,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///        .map(|r| r.unwrap_or(REPLACEMENT_CHARACTER))\n     ///        .collect::<String>(),\n     ///     \"\ud834\udd1emus\ufffdic\ufffd\""}, {"sha": "0ae625bdb68c6244f20b7a65c5e6154d6594afd4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -1,4 +1,4 @@\n-use core::array::{self, IntoIter};\n+use core::array;\n use core::convert::TryFrom;\n \n #[test]"}, {"sha": "797bfd957f906ec2cc4c28632cc621e0b3f1fcc2", "filename": "library/core/tests/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507d97b26efc002129e5ba084f4361d7fde636ff/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs?ref=507d97b26efc002129e5ba084f4361d7fde636ff", "patch": "@@ -236,9 +236,7 @@ fn test_zip_trusted_random_access_composition() {\n fn test_double_ended_zip() {\n     let xs = [1, 2, 3, 4, 5, 6];\n     let ys = [1, 2, 3, 7];\n-    let a = xs.iter().cloned();\n-    let b = ys.iter().cloned();\n-    let mut it = a.zip(b);\n+    let mut it = xs.iter().cloned().zip(ys);\n     assert_eq!(it.next(), Some((1, 1)));\n     assert_eq!(it.next(), Some((2, 2)));\n     assert_eq!(it.next_back(), Some((4, 7)));"}]}