{"sha": "7210e46dc69a4b197a313d093fe145722c248b7d", "node_id": "C_kwDOAAsO6NoAKDcyMTBlNDZkYzY5YTRiMTk3YTMxM2QwOTNmZTE0NTcyMmMyNDhiN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T16:30:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T16:30:25Z"}, "message": "Auto merge of #99315 - JohnTitor:rollup-77wzoc1, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #98387 (Add new unstable API `downcast` to `std::io::Error`)\n - #98662 (Add std::fs::write documentation precision)\n - #99253 (Remove FIXME from MIR `always_storage_live_locals`)\n - #99264 (Fix typo in mod.rs)\n - #99270 (Add `#[must_use]` to `Box::from_raw`)\n - #99277 (Stabilize `core::ffi::CStr`, `alloc::ffi::CString`, and friends)\n - #99307 (Add regression test for #64401)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "76a8c46c94a6839994d2e811e293e94f7b4d0ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a8c46c94a6839994d2e811e293e94f7b4d0ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7210e46dc69a4b197a313d093fe145722c248b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7210e46dc69a4b197a313d093fe145722c248b7d", "html_url": "https://github.com/rust-lang/rust/commit/7210e46dc69a4b197a313d093fe145722c248b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7210e46dc69a4b197a313d093fe145722c248b7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56351589f8c5afe07a9151dd4a75976aebd1a709", "url": "https://api.github.com/repos/rust-lang/rust/commits/56351589f8c5afe07a9151dd4a75976aebd1a709", "html_url": "https://github.com/rust-lang/rust/commit/56351589f8c5afe07a9151dd4a75976aebd1a709"}, {"sha": "202c11bac047c065c13ad78967b334f5f46b4ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/202c11bac047c065c13ad78967b334f5f46b4ac4", "html_url": "https://github.com/rust-lang/rust/commit/202c11bac047c065c13ad78967b334f5f46b4ac4"}], "stats": {"total": 265, "additions": 226, "deletions": 39}, "files": [{"sha": "c909648ea017ebbb49b4f06ccf5cb0c9fe286bfe", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -4,9 +4,6 @@ use rustc_middle::mir::{self, Local};\n /// The set of locals in a MIR body that do not have `StorageLive`/`StorageDead` annotations.\n ///\n /// These locals have fixed storage for the duration of the body.\n-//\n-// FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n-// as a field in the `LocalDecl` for each `Local`.\n pub fn always_storage_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n     let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n "}, {"sha": "c1ceeb0deb837100e2b77cccfc7312a7889c5f00", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -949,6 +949,7 @@ impl<T: ?Sized> Box<T> {\n     /// [`Layout`]: crate::Layout\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n+    #[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `Box`\"]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n         unsafe { Self::from_raw_in(raw, Global) }\n     }"}, {"sha": "ae61b1f1e8ed5f43496f959fb52108231dff61dd", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -108,7 +108,7 @@ use crate::sync::Arc;\n /// and other memory errors.\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cstring_type\")]\n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub struct CString {\n     // Invariant 1: the slice ends with a zero byte and has a length of at least one.\n     // Invariant 2: the slice contains only one zero byte.\n@@ -132,7 +132,7 @@ pub struct CString {\n /// let _: NulError = CString::new(b\"f\\0oo\".to_vec()).unwrap_err();\n /// ```\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -157,7 +157,7 @@ enum FromBytesWithNulErrorKind {\n /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n /// ```\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub struct FromVecWithNulError {\n     error_kind: FromBytesWithNulErrorKind,\n     bytes: Vec<u8>,\n@@ -223,7 +223,7 @@ impl FromVecWithNulError {\n /// This `struct` is created by [`CString::into_string()`]. See\n /// its documentation for more.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub struct IntoStringError {\n     inner: CString,\n     error: Utf8Error,"}, {"sha": "e8530fbc1f08f506bc1852b1a9537d3f980e74b3", "filename": "library/alloc/src/ffi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fmod.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -78,11 +78,11 @@\n //! [`String`]: crate::string::String\n //! [`CStr`]: core::ffi::CStr\n \n-#![unstable(feature = \"alloc_ffi\", issue = \"94079\")]\n+#![stable(feature = \"alloc_ffi\", since = \"1.64.0\")]\n \n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub use self::c_str::FromVecWithNulError;\n-#[unstable(feature = \"alloc_c_string\", issue = \"94079\")]\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n pub use self::c_str::{CString, IntoStringError, NulError};\n \n mod c_str;"}, {"sha": "315469387e5ae86a6499b90931382794df4f3d04", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -86,7 +86,6 @@\n #![allow(explicit_outlives_requirements)]\n //\n // Library features:\n-#![cfg_attr(not(no_global_oom_handling), feature(alloc_c_string))]\n #![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n@@ -106,7 +105,6 @@\n #![feature(const_maybe_uninit_write)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_refs_to_cell)]\n-#![feature(core_c_str)]\n #![feature(core_intrinsics)]\n #![feature(const_eval_select)]\n #![feature(const_pin)]"}, {"sha": "c29e7b9c81efb0d985887809ccadaec3ff0d4092", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -11,7 +11,6 @@\n #![feature(const_nonnull_slice_from_raw_parts)]\n #![feature(const_ptr_write)]\n #![feature(const_try)]\n-#![feature(core_c_str)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]"}, {"sha": "ee9baf811e29c099c70d18323978f655a98e65a6", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -76,7 +76,7 @@ use crate::str;\n /// [str]: prim@str \"str\"\n #[derive(Hash)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"CStr\")]\n-#[unstable(feature = \"core_c_str\", issue = \"94079\")]\n+#[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n #[rustc_has_incoherent_inherent_impls]\n // FIXME:\n // `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n@@ -108,7 +108,7 @@ pub struct CStr {\n /// let _: FromBytesWithNulError = CStr::from_bytes_with_nul(b\"f\\0oo\").unwrap_err();\n /// ```\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"core_c_str\", issue = \"94079\")]\n+#[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n pub struct FromBytesWithNulError {\n     kind: FromBytesWithNulErrorKind,\n }"}, {"sha": "ec1eaa99f0b8e756cb4c7c713180a6368dfac458", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -14,7 +14,7 @@ use crate::marker::PhantomData;\n use crate::num::*;\n use crate::ops::{Deref, DerefMut};\n \n-#[unstable(feature = \"core_c_str\", issue = \"94079\")]\n+#[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n pub use self::c_str::{CStr, FromBytesUntilNulError, FromBytesWithNulError};\n \n mod c_str;"}, {"sha": "d987bf69b25768919536407fde46130fec1005d4", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -146,24 +146,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-/// See [alloc::ffi::FromVecWithNulError].\n-#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]\n-pub type FromVecWithNulError = alloc::ffi::FromVecWithNulError;\n-/// See [alloc::ffi::CString].\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type CString = alloc::ffi::CString;\n-/// See [alloc::ffi::IntoStringError].\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type IntoStringError = alloc::ffi::IntoStringError;\n-/// See [alloc::ffi::NulError].\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type NulError = alloc::ffi::NulError;\n-/// See [core::ffi::CStr].\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type CStr = core::ffi::CStr;\n-/// See [core::ffi::FromBytesWithNulError].\n-#[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-pub type FromBytesWithNulError = core::ffi::FromBytesWithNulError;\n+#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]\n+pub use alloc::ffi::{CString, FromVecWithNulError, IntoStringError, NulError};\n+#[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n+pub use core::ffi::{CStr, FromBytesWithNulError};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::{OsStr, OsString};"}, {"sha": "d799776548a65b9d3e069c687d8ab143857d7a7c", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -295,6 +295,9 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n /// This function will create a file if it does not exist,\n /// and will entirely replace its contents if it does.\n ///\n+/// Depending on the platform, this function may fail if the\n+/// full directory path does not exist.\n+///\n /// This is a convenience function for using [`File::create`] and [`write_all`]\n /// with fewer imports.\n ///\n@@ -349,6 +352,9 @@ impl File {\n     /// This function will create a file if it does not exist,\n     /// and will truncate it if it does.\n     ///\n+    /// Depending on the platform, this function may fail if the\n+    /// full directory path does not exist.\n+    ///\n     /// See the [`OpenOptions::open`] function for more details.\n     ///\n     /// # Examples"}, {"sha": "ff7fdcae16f535450124a904da0ecc2d36fc15f4", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -795,6 +795,68 @@ impl Error {\n         }\n     }\n \n+    /// Attempt to downgrade the inner error to `E` if any.\n+    ///\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// attempt to perform downgrade on it, otherwise it will return [`Err`].\n+    ///\n+    /// If downgrade succeeds, it will return [`Ok`], otherwise it will also\n+    /// return [`Err`].\n+    ///\n+    /// [`new`]: Error::new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_error_downcast)]\n+    ///\n+    /// use std::fmt;\n+    /// use std::io;\n+    /// use std::error::Error;\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum E {\n+    ///     Io(io::Error),\n+    ///     SomeOtherVariant,\n+    /// }\n+    ///\n+    /// impl fmt::Display for E {\n+    ///    // ...\n+    /// #    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #        todo!()\n+    /// #    }\n+    /// }\n+    /// impl Error for E {}\n+    ///\n+    /// impl From<io::Error> for E {\n+    ///     fn from(err: io::Error) -> E {\n+    ///         err.downcast::<E>()\n+    ///             .map(|b| *b)\n+    ///             .unwrap_or_else(E::Io)\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"io_error_downcast\", issue = \"99262\")]\n+    pub fn downcast<E>(self) -> result::Result<Box<E>, Self>\n+    where\n+        E: error::Error + Send + Sync + 'static,\n+    {\n+        match self.repr.into_data() {\n+            ErrorData::Custom(b) if b.error.is::<E>() => {\n+                let res = (*b).error.downcast::<E>();\n+\n+                // downcast is a really trivial and is marked as inline, so\n+                // it's likely be inlined here.\n+                //\n+                // And the compiler should be able to eliminate the branch\n+                // that produces `Err` here since b.error.is::<E>()\n+                // returns true.\n+                Ok(res.unwrap())\n+            }\n+            repr_data => Err(Self { repr: Repr::new(repr_data) }),\n+        }\n+    }\n+\n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n     /// # Examples"}, {"sha": "292bf4826fd237a3d9dafe63b3d9ae1b5deac1d5", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -132,6 +132,15 @@ unsafe impl Send for Repr {}\n unsafe impl Sync for Repr {}\n \n impl Repr {\n+    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {\n+        match dat {\n+            ErrorData::Os(code) => Self::new_os(code),\n+            ErrorData::Simple(kind) => Self::new_simple(kind),\n+            ErrorData::SimpleMessage(simple_message) => Self::new_simple_message(simple_message),\n+            ErrorData::Custom(b) => Self::new_custom(b),\n+        }\n+    }\n+\n     pub(super) fn new_custom(b: Box<Custom>) -> Self {\n         let p = Box::into_raw(b).cast::<u8>();\n         // Should only be possible if an allocator handed out a pointer with"}, {"sha": "d6ad55b99f5c0aef5abe2d413084b1e2a84d0033", "filename": "library/std/src/io/error/repr_unpacked.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -10,6 +10,10 @@ type Inner = ErrorData<Box<Custom>>;\n pub(super) struct Repr(Inner);\n \n impl Repr {\n+    #[inline]\n+    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {\n+        Self(dat)\n+    }\n     pub(super) fn new_custom(b: Box<Custom>) -> Self {\n         Self(Inner::Custom(b))\n     }"}, {"sha": "c897a5e8701c45ebad019aa86eb679e7660b71a5", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -1,4 +1,4 @@\n-use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr};\n+use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr, SimpleMessage};\n use crate::assert_matches::assert_matches;\n use crate::error;\n use crate::fmt;\n@@ -141,3 +141,54 @@ fn test_custom_error_packing() {\n         }) if error.downcast_ref::<Bojji>().as_deref() == Some(&Bojji(true)),\n     );\n }\n+\n+#[derive(Debug)]\n+struct E;\n+\n+impl fmt::Display for E {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+impl error::Error for E {}\n+\n+#[test]\n+fn test_std_io_error_downcast() {\n+    // Case 1: custom error, downcast succeeds\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n+    assert!(e.0);\n+\n+    // Case 2: custom error, downcast fails\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    //   ensures that the custom error is intact\n+    assert_eq!(ErrorKind::Other, io_error.kind());\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n+    assert!(e.0);\n+\n+    // Case 3: os error\n+    let errno = 20;\n+    let io_error = Error::from_raw_os_error(errno);\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(errno, io_error.raw_os_error().unwrap());\n+\n+    // Case 4: simple\n+    let kind = ErrorKind::OutOfMemory;\n+    let io_error: Error = kind.into();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(kind, io_error.kind());\n+\n+    // Case 5: simple message\n+    const SIMPLE_MESSAGE: SimpleMessage =\n+        SimpleMessage { kind: ErrorKind::Other, message: \"simple message error test\" };\n+    let io_error = Error::from_static_message(&SIMPLE_MESSAGE);\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n+\n+    assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n+    assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));\n+}"}, {"sha": "ab50845e2b208f17e6a34f541ec183a473bf5990", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -264,7 +264,6 @@\n #![feature(atomic_mut_ptr)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n-#![feature(core_c_str)]\n #![feature(core_intrinsics)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(cstr_internals)]\n@@ -297,8 +296,6 @@\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]\n-#![feature(alloc_c_string)]\n-#![feature(alloc_ffi)]\n #![feature(allocator_api)]\n #![feature(get_mut_unchecked)]\n #![feature(map_try_insert)]"}, {"sha": "d28c7b58b20ba95ed83dacd5e4a3bf5fbdb3af74", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -1114,7 +1114,7 @@ impl Thread {\n     // Used only internally to construct a thread object without spawning\n     // Panics if the name contains nuls.\n     pub(crate) fn new(name: Option<CString>) -> Thread {\n-        // We have to use `unsafe` here to constuct the `Parker` in-place,\n+        // We have to use `unsafe` here to construct the `Parker` in-place,\n         // which is required for the UNIX implementation.\n         //\n         // SAFETY: We pin the Arc immediately after creation, so its address never"}, {"sha": "53f85c63b5336a086da3601316e1eb44635debe0", "filename": "src/test/ui/codegen/issue-64401.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Fcodegen%2Fissue-64401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Fcodegen%2Fissue-64401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-64401.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -0,0 +1,51 @@\n+// build-pass\n+// The ICE didn't happen with `cargo check` but `cargo build`.\n+\n+use std::marker::PhantomData;\n+\n+trait Owned<'a> {\n+    type Reader;\n+}\n+\n+impl<'a> Owned<'a> for () {\n+    type Reader = ();\n+}\n+\n+trait Handler {\n+    fn handle(&self);\n+}\n+\n+struct CtxHandlerWithoutState<M, F> {\n+    message_type: PhantomData<M>,\n+    _function: F,\n+}\n+\n+impl<M, F> CtxHandlerWithoutState<M, F> {\n+    pub fn new(_function: F) -> Self {\n+        Self {\n+            message_type: PhantomData,\n+            _function,\n+        }\n+    }\n+}\n+\n+impl<'a, M, F> Handler for CtxHandlerWithoutState<M, F>\n+where\n+    F: Fn(<M as Owned<'a>>::Reader),\n+    M: Owned<'a>,\n+{\n+    fn handle(&self) {}\n+}\n+\n+fn e_to_i<M: for<'a> Owned<'a>>(_: <M as Owned<'_>>::Reader) {}\n+\n+fn send_external_to_internal<M>()\n+where\n+    M: for<'a> Owned<'a>,\n+{\n+    let _: Box<dyn Handler> = Box::new(CtxHandlerWithoutState::<M, _>::new(e_to_i::<M>));\n+}\n+\n+fn main() {\n+    send_external_to_internal::<()>()\n+}"}, {"sha": "9ea7726894cbcccb3b27b00307561642427fbbfa", "filename": "src/test/ui/lint/unused/must-use-box-from-raw.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.rs?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -0,0 +1,11 @@\n+// #99269\n+\n+// check-pass\n+\n+#![warn(unused_must_use)]\n+\n+unsafe fn free<T>(ptr: *mut T) {\n+    Box::from_raw(ptr); //~ WARNING unused return value\n+}\n+\n+fn main() {}"}, {"sha": "7769f09aa5203b3cebfb9d18f810f38e91ec0aff", "filename": "src/test/ui/lint/unused/must-use-box-from-raw.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7210e46dc69a4b197a313d093fe145722c248b7d/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr?ref=7210e46dc69a4b197a313d093fe145722c248b7d", "patch": "@@ -0,0 +1,15 @@\n+warning: unused return value of `Box::<T>::from_raw` that must be used\n+  --> $DIR/must-use-box-from-raw.rs:8:5\n+   |\n+LL |     Box::from_raw(ptr);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/must-use-box-from-raw.rs:5:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: call `drop(from_raw(ptr))` if you intend to drop the `Box`\n+\n+warning: 1 warning emitted\n+"}]}