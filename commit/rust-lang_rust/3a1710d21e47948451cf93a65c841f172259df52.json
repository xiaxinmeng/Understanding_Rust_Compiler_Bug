{"sha": "3a1710d21e47948451cf93a65c841f172259df52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTcxMGQyMWU0Nzk0ODQ1MWNmOTNhNjVjODQxZjE3MjI1OWRmNTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T11:13:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T14:15:27Z"}, "message": "Key tcx.ty_param_bounds on node_ids, not def_ids\n\nThis makes it clearer that it's only valid for local nodes.", "tree": {"sha": "8342d6e5f1a65ac5d08a21b2d2bb65ba636bb5cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8342d6e5f1a65ac5d08a21b2d2bb65ba636bb5cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1710d21e47948451cf93a65c841f172259df52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1710d21e47948451cf93a65c841f172259df52", "html_url": "https://github.com/rust-lang/rust/commit/3a1710d21e47948451cf93a65c841f172259df52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1710d21e47948451cf93a65c841f172259df52/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "html_url": "https://github.com/rust-lang/rust/commit/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "4776b8af34d37558d9b4e57d9b9740cef129d03f", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=3a1710d21e47948451cf93a65c841f172259df52", "patch": "@@ -190,7 +190,7 @@ fn encode_type_param_bounds(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                         abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n     for param in params {\n         ebml::start_tag(ebml_w, tag_items_data_item_ty_param_bounds);\n-        let bs = ecx.ccx.tcx.ty_param_bounds.get(local_def(param.id));\n+        let bs = ecx.ccx.tcx.ty_param_bounds.get(param.id);\n         tyencode::enc_bounds(io::new_writer(ebml_w.writer), ty_str_ctxt, bs);\n         ebml::end_tag(ebml_w);\n     }"}, {"sha": "c0204028abf05e3427306700bb71568022bb1e7f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3a1710d21e47948451cf93a65c841f172259df52", "patch": "@@ -5093,7 +5093,7 @@ fn register_fn(ccx: @crate_ctxt, sp: span, path: [str], flav: str,\n }\n \n fn param_bounds(ccx: @crate_ctxt, tp: ast::ty_param) -> ty::param_bounds {\n-    ccx.tcx.ty_param_bounds.get(ast_util::local_def(tp.id))\n+    ccx.tcx.ty_param_bounds.get(tp.id)\n }\n \n fn register_fn_full(ccx: @crate_ctxt, sp: span, path: [str], _flav: str,"}, {"sha": "dd20be6105779af058f76f82a3cbade9a9b33098", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3a1710d21e47948451cf93a65c841f172259df52", "patch": "@@ -222,7 +222,7 @@ type ctxt =\n       ast_ty_to_ty_cache: hashmap<@ast::ty, option::t<t>>,\n       tag_var_cache: hashmap<def_id, @[variant_info]>,\n       iface_method_cache: hashmap<def_id, @[method]>,\n-      ty_param_bounds: hashmap<def_id, param_bounds>};\n+      ty_param_bounds: hashmap<ast::node_id, param_bounds>};\n \n type ty_ctxt = ctxt;\n \n@@ -441,7 +441,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n               map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty),\n           tag_var_cache: new_def_hash(),\n           iface_method_cache: new_def_hash(),\n-          ty_param_bounds: new_def_hash()};\n+          ty_param_bounds: map::new_int_hash()};\n     populate_type_store(cx);\n     ret cx;\n }\n@@ -1085,7 +1085,9 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       }\n       // Resources are always noncopyable.\n       ty_res(did, inner, tps) { kind_noncopyable }\n-      ty_param(_, did) { param_bounds_to_kind(cx.ty_param_bounds.get(did)) }\n+      ty_param(_, did) {\n+          param_bounds_to_kind(cx.ty_param_bounds.get(did.node))\n+      }\n       ty_constr(t, _) { type_kind(cx, t) }\n     };\n "}, {"sha": "db177b54bbbdca6dbca93779258dd4692fba30c7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1710d21e47948451cf93a65c841f172259df52/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3a1710d21e47948451cf93a65c841f172259df52", "patch": "@@ -507,7 +507,7 @@ fn ty_param_bounds(tcx: ty::ctxt, mode: mode, params: [ast::ty_param])\n     -> @[ty::param_bounds] {\n     let result = [];\n     for param in params {\n-        result += [alt tcx.ty_param_bounds.find(local_def(param.id)) {\n+        result += [alt tcx.ty_param_bounds.find(param.id) {\n           some(bs) { bs }\n           none. {\n             let bounds = [];\n@@ -521,7 +521,7 @@ fn ty_param_bounds(tcx: ty::ctxt, mode: mode, params: [ast::ty_param])\n                 }];\n             }\n             let boxed = @bounds;\n-            tcx.ty_param_bounds.insert(local_def(param.id), boxed);\n+            tcx.ty_param_bounds.insert(param.id, boxed);\n             boxed\n           }\n         }];\n@@ -1493,7 +1493,7 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n     // First, see whether this is an interface-bounded parameter\n     alt ty::struct(tcx, ty) {\n       ty::ty_param(n, did) {\n-        for bound in *tcx.ty_param_bounds.get(did) {\n+        for bound in *tcx.ty_param_bounds.get(did.node) {\n             alt bound {\n               ty::bound_iface(t) {\n                 let (iid, _tps) = alt ty::struct(tcx, t) {\n@@ -2789,7 +2789,7 @@ fn check_ty_params(ccx: @crate_ctxt, tps: [ast::ty_param]) {\n         for bound in *tp.bounds {\n             alt bound {\n               ast::bound_iface(at) {\n-                let tbound = ccx.tcx.ty_param_bounds.get(local_def(tp.id))[i];\n+                let tbound = ccx.tcx.ty_param_bounds.get(tp.id)[i];\n                 let bound_ty = alt tbound { ty::bound_iface(t) { t } };\n                 alt ty::struct(ccx.tcx, bound_ty) {\n                   ty::ty_iface(_, _) {}"}]}