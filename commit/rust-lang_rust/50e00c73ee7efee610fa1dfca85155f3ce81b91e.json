{"sha": "50e00c73ee7efee610fa1dfca85155f3ce81b91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTAwYzczZWU3ZWZlZTYxMGZhMWRmY2E4NTE1NWYzY2U4MWI5MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T10:19:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_generic_ty_bound", "tree": {"sha": "c9d7d5ddd807bb94bcdcffe513840f780d627e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d7d5ddd807bb94bcdcffe513840f780d627e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e00c73ee7efee610fa1dfca85155f3ce81b91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e00c73ee7efee610fa1dfca85155f3ce81b91e", "html_url": "https://github.com/rust-lang/rust/commit/50e00c73ee7efee610fa1dfca85155f3ce81b91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e00c73ee7efee610fa1dfca85155f3ce81b91e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cfeb567735a0a6c6ec9a32cbaa1ea672db637b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfeb567735a0a6c6ec9a32cbaa1ea672db637b1", "html_url": "https://github.com/rust-lang/rust/commit/1cfeb567735a0a6c6ec9a32cbaa1ea672db637b1"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "a5ce46e9700f9e16324ae49768bb6f41002129df", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50e00c73ee7efee610fa1dfca85155f3ce81b91e/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e00c73ee7efee610fa1dfca85155f3ce81b91e/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=50e00c73ee7efee610fa1dfca85155f3ce81b91e", "patch": "@@ -431,8 +431,6 @@ impl<'a> Parser<'a> {\n     /// ```\n     /// BOUND = TY_BOUND | LT_BOUND\n     /// LT_BOUND = LIFETIME (e.g., `'a`)\n-    /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n-    /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n     /// ```\n     fn parse_generic_bound(\n         &mut self,\n@@ -454,22 +452,11 @@ impl<'a> Parser<'a> {\n             }\n             Ok(Ok(bound))\n         } else {\n-            let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-            let path = self.parse_path(PathStyle::Type)?;\n-            if has_parens {\n-                self.expect(&token::CloseDelim(token::Paren))?;\n-            }\n-            let poly_span = lo.to(self.prev_span);\n+            let (poly_span, bound) = self.parse_generic_ty_bound(lo, has_parens, question)?;\n             if is_negative {\n                 Ok(Err(last_plus_span.or(colon_span).map(|sp| sp.to(poly_span))))\n             } else {\n-                let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n-                let modifier = if question.is_some() {\n-                    TraitBoundModifier::Maybe\n-                } else {\n-                    TraitBoundModifier::None\n-                };\n-                Ok(Ok(GenericBound::Trait(poly_trait, modifier)))\n+                Ok(Ok(bound))\n             }\n         }\n     }\n@@ -501,6 +488,28 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Parses a type bound according to:\n+    /// ```\n+    /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n+    /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n+    /// ```\n+    fn parse_generic_ty_bound(\n+        &mut self,\n+        lo: Span,\n+        has_parens: bool,\n+        question: Option<Span>,\n+    ) -> PResult<'a, (Span, GenericBound)> {\n+        let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+        let path = self.parse_path(PathStyle::Type)?;\n+        if has_parens {\n+            self.expect(&token::CloseDelim(token::Paren))?;\n+        }\n+        let poly_span = lo.to(self.prev_span);\n+        let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n+        let modifier = question.map_or(TraitBoundModifier::None, |_| TraitBoundModifier::Maybe);\n+        Ok((poly_span, GenericBound::Trait(poly_trait, modifier)))\n+    }\n+\n     pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n         if self.eat_keyword(kw::For) {\n             self.expect_lt()?;"}]}