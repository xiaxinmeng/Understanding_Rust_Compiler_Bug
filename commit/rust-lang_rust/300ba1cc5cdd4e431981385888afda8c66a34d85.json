{"sha": "300ba1cc5cdd4e431981385888afda8c66a34d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMGJhMWNjNWNkZDRlNDMxOTgxMzg1ODg4YWZkYThjNjZhMzRkODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-27T04:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-27T04:43:38Z"}, "message": "auto merge of #8050 : msullivan/rust/cleanup, r=graydon\n\nAnd a couple other things. Fix up some unused variable warnings, and improve the camel case lint message a little.", "tree": {"sha": "ee6ed9c8a200c33646fa1e6aa781de20b11ca176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6ed9c8a200c33646fa1e6aa781de20b11ca176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/300ba1cc5cdd4e431981385888afda8c66a34d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/300ba1cc5cdd4e431981385888afda8c66a34d85", "html_url": "https://github.com/rust-lang/rust/commit/300ba1cc5cdd4e431981385888afda8c66a34d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/300ba1cc5cdd4e431981385888afda8c66a34d85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4989799799df1fb7c23fc0bf017be8faa356387f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4989799799df1fb7c23fc0bf017be8faa356387f", "html_url": "https://github.com/rust-lang/rust/commit/4989799799df1fb7c23fc0bf017be8faa356387f"}, {"sha": "07361802a22ade7fa2a52c5261817b3cf8ce597d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07361802a22ade7fa2a52c5261817b3cf8ce597d", "html_url": "https://github.com/rust-lang/rust/commit/07361802a22ade7fa2a52c5261817b3cf8ce597d"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "89b30e46ac06d1a5f00c5ad70ea507db90ccd216", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=300ba1cc5cdd4e431981385888afda8c66a34d85", "patch": "@@ -186,7 +186,7 @@ fn parse_trait_store(st: &mut PState) -> ty::TraitStore {\n }\n \n fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n-    let regions = parse_region_substs(st, |x,y| conv(x,y));\n+    let regions = parse_region_substs(st);\n \n     let self_ty = parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)) );\n \n@@ -202,7 +202,7 @@ fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n     };\n }\n \n-fn parse_region_substs(st: &mut PState, conv: conv_did) -> ty::RegionSubsts {\n+fn parse_region_substs(st: &mut PState) -> ty::RegionSubsts {\n     match next(st) {\n         'e' => ty::ErasedRegions,\n         'n' => {"}, {"sha": "aaf0460a4e1a35a97d231a5b9f50b77e09f7fa03", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=300ba1cc5cdd4e431981385888afda8c66a34d85", "patch": "@@ -827,23 +827,26 @@ fn check_item_non_camel_case_types(cx: &Context, it: &ast::item) {\n             !ident.contains_char('_')\n     }\n \n-    fn check_case(cx: &Context, ident: ast::ident, span: span) {\n+    fn check_case(cx: &Context, sort: &str, ident: ast::ident, span: span) {\n         if !is_camel_case(cx.tcx, ident) {\n-            cx.span_lint(non_camel_case_types, span,\n-                         \"type, variant, or trait should have \\\n-                          a camel case identifier\");\n+            cx.span_lint(\n+                non_camel_case_types, span,\n+                fmt!(\"%s `%s` should have a camel case identifier\",\n+                    sort, cx.tcx.sess.str_of(ident)));\n         }\n     }\n \n     match it.node {\n-        ast::item_ty(*) | ast::item_struct(*) |\n+        ast::item_ty(*) | ast::item_struct(*) => {\n+            check_case(cx, \"type\", it.ident, it.span)\n+        }\n         ast::item_trait(*) => {\n-            check_case(cx, it.ident, it.span)\n+            check_case(cx, \"trait\", it.ident, it.span)\n         }\n         ast::item_enum(ref enum_definition, _) => {\n-            check_case(cx, it.ident, it.span);\n+            check_case(cx, \"type\", it.ident, it.span);\n             for enum_definition.variants.iter().advance |variant| {\n-                check_case(cx, variant.node.name, variant.span);\n+                check_case(cx, \"variant\", variant.node.name, variant.span);\n             }\n         }\n         _ => ()"}, {"sha": "4298f043e935d0569a7f0a21ae48b4fd3cc1bee8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=300ba1cc5cdd4e431981385888afda8c66a34d85", "patch": "@@ -439,7 +439,7 @@ impl CoherenceChecker {\n                                          -> UniversalQuantificationResult {\n         let regions = match polytype.generics.region_param {\n             None => opt_vec::Empty,\n-            Some(r) => {\n+            Some(_) => {\n                 opt_vec::with(\n                     self.inference_context.next_region_var(\n                         infer::BoundRegionInCoherence))"}, {"sha": "495d58f06f3d7d23b0d7ce29ee7f67f4a22c00b6", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=300ba1cc5cdd4e431981385888afda8c66a34d85", "patch": "@@ -1,3 +1,11 @@\n+S 2013-07-25 4cf3072\n+  macos-i386 f682d6e9ca0d56768bd36a0c05b7e58e12694dff\n+  macos-x86_64 2f4e85c9756ba31a04fa8dd1c999fbaf8e1d3d1a\n+  winnt-i386 6360e61fb5c432ad1511cb28af8e44cc0106f1aa\n+  freebsd-x86_64 5e76c40a64b76e0a065d5b8d51c85dfe38ea833a\n+  linux-i386 46961cef9d4efccf5df23a8389d63cf35d35c1d6\n+  linux-x86_64 b416ca2644b14403818f0219673f6f8fe189e8b4\n+\n S 2013-07-21 e336cbf\n   macos-i386 d9666dccc1040ebe298a54acb378902a7472ad0f\n   macos-x86_64 808f68916444e3857ef2aab20f8db9db8f4b0b4a"}, {"sha": "2cabdfe5bb0981be0fd6ff0fa3d6850da5598a76", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300ba1cc5cdd4e431981385888afda8c66a34d85/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=300ba1cc5cdd4e431981385888afda8c66a34d85", "patch": "@@ -10,25 +10,25 @@\n \n #[forbid(non_camel_case_types)];\n \n-struct foo { //~ ERROR type, variant, or trait should have a camel case identifier\n+struct foo { //~ ERROR type `foo` should have a camel case identifier\n     bar: int,\n }\n \n-enum foo2 { //~ ERROR type, variant, or trait should have a camel case identifier\n+enum foo2 { //~ ERROR type `foo2` should have a camel case identifier\n     Bar\n }\n \n-struct foo3 { //~ ERROR type, variant, or trait should have a camel case identifier\n+struct foo3 { //~ ERROR type `foo3` should have a camel case identifier\n     bar: int\n }\n \n-type foo4 = int; //~ ERROR type, variant, or trait should have a camel case identifier\n+type foo4 = int; //~ ERROR type `foo4` should have a camel case identifier\n \n enum Foo5 {\n-    bar //~ ERROR type, variant, or trait should have a camel case identifier\n+    bar //~ ERROR variant `bar` should have a camel case identifier\n }\n \n-trait foo6 { //~ ERROR type, variant, or trait should have a camel case identifier\n+trait foo6 { //~ ERROR trait `foo6` should have a camel case identifier\n }\n \n fn main() { }"}]}