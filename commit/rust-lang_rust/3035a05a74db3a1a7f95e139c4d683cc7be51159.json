{"sha": "3035a05a74db3a1a7f95e139c4d683cc7be51159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzVhMDVhNzRkYjNhMWE3Zjk1ZTEzOWM0ZDY4M2NjN2JlNTExNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-03T12:09:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-04T06:12:33Z"}, "message": "remove unused mk_sp_and_raw", "tree": {"sha": "a705dabfdff052598e206d0af2a1d9ab312801fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a705dabfdff052598e206d0af2a1d9ab312801fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3035a05a74db3a1a7f95e139c4d683cc7be51159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3035a05a74db3a1a7f95e139c4d683cc7be51159", "html_url": "https://github.com/rust-lang/rust/commit/3035a05a74db3a1a7f95e139c4d683cc7be51159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3035a05a74db3a1a7f95e139c4d683cc7be51159/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bea334a266dcf439ca2f61f448a15770a3766b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bea334a266dcf439ca2f61f448a15770a3766b7", "html_url": "https://github.com/rust-lang/rust/commit/8bea334a266dcf439ca2f61f448a15770a3766b7"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "a56a4ce097e205d48f57f25acc1bab47ad9cc876", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3035a05a74db3a1a7f95e139c4d683cc7be51159/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3035a05a74db3a1a7f95e139c4d683cc7be51159/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=3035a05a74db3a1a7f95e139c4d683cc7be51159", "patch": "@@ -98,14 +98,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {\n-        self.mk_sp_and_raw(lo, hi).0\n-    }\n-\n-    fn mk_sp_and_raw(&self, lo: BytePos, hi: BytePos) -> (Span, Span) {\n-        let raw = Span::new(lo, hi, NO_EXPANSION);\n-        let real = self.override_span.unwrap_or(raw);\n-\n-        (real, raw)\n+        self.override_span.unwrap_or_else(|| Span::new(lo, hi, NO_EXPANSION))\n     }\n \n     fn unwrap_or_abort<T>(&mut self, res: Result<T, ()>) -> T {\n@@ -133,8 +126,8 @@ impl<'a> StringReader<'a> {\n                     let start_pos = self.pos;\n                     (self.next_token_inner()?, start_pos, self.pos)\n                 };\n-                let (real, _raw) = self.mk_sp_and_raw(start_pos, end_pos);\n-                Ok(Token::new(kind, real))\n+                let span = self.mk_sp(start_pos, end_pos);\n+                Ok(Token::new(kind, span))\n             }\n         }\n     }"}]}