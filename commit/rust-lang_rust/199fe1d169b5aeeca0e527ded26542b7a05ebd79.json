{"sha": "199fe1d169b5aeeca0e527ded26542b7a05ebd79", "node_id": "C_kwDOAAsO6NoAKDE5OWZlMWQxNjliNWFlZWNhMGU1MjdkZWQyNjU0MmI3YTA1ZWJkNzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T06:55:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T06:55:32Z"}, "message": "Auto merge of #102223 - matthiaskrgr:rollup-wb1qdhk, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #101780 (Add a platform support document for Android)\n - #102044 (Remove `RtlGenRandom` (take two))\n - #102081 (Adding ignore fuchsia tests for execvp (pre_exec))\n - #102082 (Adding ignore fuchsia non-applicable commands)\n - #102146 (rustdoc: CSS prevent sidebar width change jank)\n - #102152 (Calculate `ProjectionTy::trait_def_id` for return-position `impl Trait` in trait correctly)\n - #102175 (Also require other subtrees to always build successfully)\n - #102176 (Add `llvm-dis` to the set of tools in `ci-llvm`)\n - #102188 (Update doc after renaming `fn is_zero`)\n - #102199 (Improve rustdoc GUI tests)\n - #102218 (Document some missing command-line arguments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cbceca07ab554de81a565d98cc69b500d3aef4f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbceca07ab554de81a565d98cc69b500d3aef4f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199fe1d169b5aeeca0e527ded26542b7a05ebd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199fe1d169b5aeeca0e527ded26542b7a05ebd79", "html_url": "https://github.com/rust-lang/rust/commit/199fe1d169b5aeeca0e527ded26542b7a05ebd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199fe1d169b5aeeca0e527ded26542b7a05ebd79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06968954f7e11454d49377629bb57d13253384b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/06968954f7e11454d49377629bb57d13253384b9", "html_url": "https://github.com/rust-lang/rust/commit/06968954f7e11454d49377629bb57d13253384b9"}, {"sha": "4fc33e94430d5cab7310d2dc4269137a50e0b783", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc33e94430d5cab7310d2dc4269137a50e0b783", "html_url": "https://github.com/rust-lang/rust/commit/4fc33e94430d5cab7310d2dc4269137a50e0b783"}], "stats": {"total": 332, "additions": 226, "deletions": 106}, "files": [{"sha": "258fb2e2f9f1134f3d0f26a4110634e0703ee0e3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -1133,9 +1133,13 @@ pub struct ProjectionTy<'tcx> {\n \n impl<'tcx> ProjectionTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n-        let parent = tcx.parent(self.item_def_id);\n-        assert_eq!(tcx.def_kind(parent), DefKind::Trait);\n-        parent\n+        match tcx.def_kind(self.item_def_id) {\n+            DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.item_def_id),\n+            DefKind::ImplTraitPlaceholder => {\n+                tcx.parent(tcx.impl_trait_in_trait_parent(self.item_def_id))\n+            }\n+            kind => bug!(\"unexpected DefKind in ProjectionTy: {kind:?}\"),\n+        }\n     }\n \n     /// Extracts the underlying trait reference and own substs from this projection."}, {"sha": "4b07b393a2f5a84dde1a19985af7d533131fa1d1", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -300,7 +300,7 @@ pub mod panic_count {\n     thread_local! { static LOCAL_PANIC_COUNT: Cell<usize> = const { Cell::new(0) } }\n \n     // Sum of panic counts from all threads. The purpose of this is to have\n-    // a fast path in `is_zero` (which is used by `panicking`). In any particular\n+    // a fast path in `count_is_zero` (which is used by `panicking`). In any particular\n     // thread, if that thread currently views `GLOBAL_PANIC_COUNT` as being zero,\n     // then `LOCAL_PANIC_COUNT` in that thread is zero. This invariant holds before\n     // and after increase and decrease, but not necessarily during their execution.\n@@ -369,7 +369,7 @@ pub mod panic_count {\n     }\n \n     // Slow path is in a separate function to reduce the amount of code\n-    // inlined from `is_zero`.\n+    // inlined from `count_is_zero`.\n     #[inline(never)]\n     #[cold]\n     fn is_zero_slow_path() -> bool {"}, {"sha": "c61a7e7d1e4abf38c21b00827000f810f8a2e633", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -279,7 +279,6 @@ pub const STATUS_INVALID_PARAMETER: NTSTATUS = 0xc000000d_u32 as _;\n pub const STATUS_PENDING: NTSTATUS = 0x103 as _;\n pub const STATUS_END_OF_FILE: NTSTATUS = 0xC0000011_u32 as _;\n pub const STATUS_NOT_IMPLEMENTED: NTSTATUS = 0xC0000002_u32 as _;\n-pub const STATUS_NOT_SUPPORTED: NTSTATUS = 0xC00000BB_u32 as _;\n \n // Equivalent to the `NT_SUCCESS` C preprocessor macro.\n // See: https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/using-ntstatus-values\n@@ -289,6 +288,7 @@ pub fn nt_success(status: NTSTATUS) -> bool {\n \n // \"RNG\\0\"\n pub const BCRYPT_RNG_ALGORITHM: &[u16] = &[b'R' as u16, b'N' as u16, b'G' as u16, 0];\n+pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: DWORD = 0x00000002;\n \n #[repr(C)]\n pub struct UNICODE_STRING {\n@@ -817,10 +817,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     #[link(name = \"advapi32\")]\n     extern \"system\" {\n-        // Forbidden when targeting UWP\n-        #[link_name = \"SystemFunction036\"]\n-        pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n-\n         // Allowed but unused by UWP\n         pub fn OpenProcessToken(\n             ProcessHandle: HANDLE,"}, {"sha": "b5a49489d3fb839cded5cb55d6c61524ba5b5d1c", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 28, "deletions": 48, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -13,15 +13,12 @@\n //! but significant number of users to experience panics caused by a failure of\n //! this function. See [#94098].\n //!\n-//! The current version changes this to use the `BCRYPT_RNG_ALG_HANDLE`\n-//! [Pseudo-handle], which gets the default RNG algorithm without querying the\n-//! system preference thus hopefully avoiding the previous issue.\n-//! This is only supported on Windows 10+ so a fallback is used for older versions.\n+//! The current version falls back to using `BCryptOpenAlgorithmProvider` if\n+//! `BCRYPT_USE_SYSTEM_PREFERRED_RNG` fails for any reason.\n //!\n //! [#94098]: https://github.com/rust-lang/rust/issues/94098\n //! [`RtlGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom\n //! [`BCryptGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n-//! [Pseudo-handle]: https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-pseudo-handles\n use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n@@ -33,37 +30,35 @@ use crate::sys::c;\n /// [`HashMap`]: crate::collections::HashMap\n /// [`RandomState`]: crate::collections::hash_map::RandomState\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    Rng::open().and_then(|rng| rng.gen_random_keys()).unwrap_or_else(fallback_rng)\n+    Rng::SYSTEM.gen_random_keys().unwrap_or_else(fallback_rng)\n }\n \n-struct Rng(c::BCRYPT_ALG_HANDLE);\n+struct Rng {\n+    algorithm: c::BCRYPT_ALG_HANDLE,\n+    flags: u32,\n+}\n impl Rng {\n-    #[cfg(miri)]\n-    fn open() -> Result<Self, c::NTSTATUS> {\n-        const BCRYPT_RNG_ALG_HANDLE: c::BCRYPT_ALG_HANDLE = ptr::invalid_mut(0x81);\n-        let _ = (\n-            c::BCryptOpenAlgorithmProvider,\n-            c::BCryptCloseAlgorithmProvider,\n-            c::BCRYPT_RNG_ALGORITHM,\n-            c::STATUS_NOT_SUPPORTED,\n-        );\n-        Ok(Self(BCRYPT_RNG_ALG_HANDLE))\n+    const SYSTEM: Self = unsafe { Self::new(ptr::null_mut(), c::BCRYPT_USE_SYSTEM_PREFERRED_RNG) };\n+\n+    /// Create the RNG from an existing algorithm handle.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The handle must either be null or a valid algorithm handle.\n+    const unsafe fn new(algorithm: c::BCRYPT_ALG_HANDLE, flags: u32) -> Self {\n+        Self { algorithm, flags }\n     }\n-    #[cfg(not(miri))]\n-    // Open a handle to the RNG algorithm.\n+\n+    /// Open a handle to the RNG algorithm.\n     fn open() -> Result<Self, c::NTSTATUS> {\n         use crate::sync::atomic::AtomicPtr;\n         use crate::sync::atomic::Ordering::{Acquire, Release};\n-        const ERROR_VALUE: c::LPVOID = ptr::invalid_mut(usize::MAX);\n \n         // An atomic is used so we don't need to reopen the handle every time.\n         static HANDLE: AtomicPtr<crate::ffi::c_void> = AtomicPtr::new(ptr::null_mut());\n \n         let mut handle = HANDLE.load(Acquire);\n-        // We use a sentinel value to designate an error occurred last time.\n-        if handle == ERROR_VALUE {\n-            Err(c::STATUS_NOT_SUPPORTED)\n-        } else if handle.is_null() {\n+        if handle.is_null() {\n             let status = unsafe {\n                 c::BCryptOpenAlgorithmProvider(\n                     &mut handle,\n@@ -80,47 +75,32 @@ impl Rng {\n                     unsafe { c::BCryptCloseAlgorithmProvider(handle, 0) };\n                     handle = previous_handle;\n                 }\n-                Ok(Self(handle))\n+                Ok(unsafe { Self::new(handle, 0) })\n             } else {\n-                HANDLE.store(ERROR_VALUE, Release);\n                 Err(status)\n             }\n         } else {\n-            Ok(Self(handle))\n+            Ok(unsafe { Self::new(handle, 0) })\n         }\n     }\n \n     fn gen_random_keys(self) -> Result<(u64, u64), c::NTSTATUS> {\n         let mut v = (0, 0);\n         let status = unsafe {\n             let size = mem::size_of_val(&v).try_into().unwrap();\n-            c::BCryptGenRandom(self.0, ptr::addr_of_mut!(v).cast(), size, 0)\n+            c::BCryptGenRandom(self.algorithm, ptr::addr_of_mut!(v).cast(), size, self.flags)\n         };\n         if c::nt_success(status) { Ok(v) } else { Err(status) }\n     }\n }\n \n-/// Generate random numbers using the fallback RNG function (RtlGenRandom)\n-#[cfg(not(target_vendor = \"uwp\"))]\n+/// Generate random numbers using the fallback RNG function\n #[inline(never)]\n fn fallback_rng(rng_status: c::NTSTATUS) -> (u64, u64) {\n-    let mut v = (0, 0);\n-    let ret =\n-        unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n-\n-    if ret != 0 {\n-        v\n-    } else {\n-        panic!(\n-            \"RNG broken: {rng_status:#x}, fallback RNG broken: {}\",\n-            crate::io::Error::last_os_error()\n-        )\n+    match Rng::open().and_then(|rng| rng.gen_random_keys()) {\n+        Ok(keys) => keys,\n+        Err(status) => {\n+            panic!(\"RNG broken: {rng_status:#x}, fallback RNG broken: {status:#x}\")\n+        }\n     }\n }\n-\n-/// We can't use RtlGenRandom with UWP, so there is no fallback\n-#[cfg(target_vendor = \"uwp\")]\n-#[inline(never)]\n-fn fallback_rng(rng_status: c::NTSTATUS) -> (u64, u64) {\n-    panic!(\"RNG broken: {rng_status:#x} fallback RNG broken: RtlGenRandom() not supported on UWP\");\n-}"}, {"sha": "563e67a326f192a719993fc6fed9522b72a8441a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -1424,7 +1424,7 @@ impl Step for Extended {\n \n         let xform = |p: &Path| {\n             let mut contents = t!(fs::read_to_string(p));\n-            for tool in &[\"rust-demangler\", \"rust-analyzer\", \"rustfmt\"] {\n+            for tool in &[\"rust-demangler\"] {\n                 if !built_tools.contains(tool) {\n                     contents = filter(&contents, tool);\n                 }\n@@ -1465,7 +1465,8 @@ impl Step for Extended {\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n             prepare(\"miri\");\n-            for tool in &[\"rust-docs\", \"rust-demangler\", \"rust-analyzer\"] {\n+            prepare(\"rust-analyzer\");\n+            for tool in &[\"rust-docs\", \"rust-demangler\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1525,7 +1526,8 @@ impl Step for Extended {\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n             prepare(\"miri\");\n-            for tool in &[\"rust-demangler\", \"rust-analyzer\"] {\n+            prepare(\"rust-analyzer\");\n+            for tool in &[\"rust-demangler\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1609,25 +1611,23 @@ impl Step for Extended {\n                     .arg(\"-out\")\n                     .arg(exe.join(\"StdGroup.wxs\")),\n             );\n-            if built_tools.contains(\"rust-analyzer\") {\n-                builder.run(\n-                    Command::new(&heat)\n-                        .current_dir(&exe)\n-                        .arg(\"dir\")\n-                        .arg(\"rust-analyzer\")\n-                        .args(&heat_flags)\n-                        .arg(\"-cg\")\n-                        .arg(\"RustAnalyzerGroup\")\n-                        .arg(\"-dr\")\n-                        .arg(\"RustAnalyzer\")\n-                        .arg(\"-var\")\n-                        .arg(\"var.RustAnalyzerDir\")\n-                        .arg(\"-out\")\n-                        .arg(exe.join(\"RustAnalyzerGroup.wxs\"))\n-                        .arg(\"-t\")\n-                        .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n-                );\n-            }\n+            builder.run(\n+                Command::new(&heat)\n+                    .current_dir(&exe)\n+                    .arg(\"dir\")\n+                    .arg(\"rust-analyzer\")\n+                    .args(&heat_flags)\n+                    .arg(\"-cg\")\n+                    .arg(\"RustAnalyzerGroup\")\n+                    .arg(\"-dr\")\n+                    .arg(\"RustAnalyzer\")\n+                    .arg(\"-var\")\n+                    .arg(\"var.RustAnalyzerDir\")\n+                    .arg(\"-out\")\n+                    .arg(exe.join(\"RustAnalyzerGroup.wxs\"))\n+                    .arg(\"-t\")\n+                    .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+            );\n             builder.run(\n                 Command::new(&heat)\n                     .current_dir(&exe)\n@@ -2026,6 +2026,7 @@ impl Step for RustDev {\n             \"llvm-dwp\",\n             \"llvm-nm\",\n             \"llvm-dwarfdump\",\n+            \"llvm-dis\",\n         ] {\n             tarball.add_file(src_bindir.join(exe(bin, target)), \"bin\", 0o755);\n         }"}, {"sha": "2e11cf19c3f6a1c9ee8d66e7e4d57368c1bff10d", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/96867\n+Last change is for: https://github.com/rust-lang/rust/pull/97550"}, {"sha": "142464bf22b4244f5f1f5fcf1d502a1521ea1615", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -1 +1 @@\n-0.10.0\n\\ No newline at end of file\n+0.11.0\n\\ No newline at end of file"}, {"sha": "06883ddd58bcf0831f6047c6ca54b5b2fab8a64e", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -24,6 +24,7 @@\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n+    - [\\*-android and \\*-androideabi](platform-support/android.md)\n     - [\\*-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)"}, {"sha": "79cdfb82e417efceb97eae01c2648c14956a348d", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -270,6 +270,11 @@ This flag will set which lints should be set to the [warn level](lints/levels.md\n \n _Note:_ The order of these lint level arguments is taken into account, see [lint level via compiler flag](lints/levels.md#via-compiler-flag) for more information.\n \n+<a id=\"option-force-warn\"></a>\n+## `--force-warn`: force a lint to warn\n+\n+This flag sets the given lint to the [forced warn level](lints/levels.md#force-warn) and the level cannot be overridden, even ignoring the [lint caps](lints/levels.md#capping-lints).\n+\n <a id=\"option-a-allow\"></a>\n ## `-A`: set lint allowed\n \n@@ -381,6 +386,12 @@ are:\n - `always` \u2014\u00a0Always use colors.\n - `never` \u2014\u00a0Never colorize output.\n \n+<a id=\"option-diagnostic-width\"></a>\n+## `--diagnostic-width`: specify the terminal width for diagnostics\n+\n+This flag takes a number that specifies the width of the terminal in characters.\n+Formatting of diagnostics will take the width into consideration to make them better fit on the screen.\n+\n <a id=\"option-remap-path-prefix\"></a>\n ## `--remap-path-prefix`: remap source names in output\n "}, {"sha": "ea2792c218bbf5e542d37d89590f87c04ecab140", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -125,17 +125,17 @@ target | std | notes\n `aarch64-apple-ios` | \u2713 | ARM64 iOS\n [`aarch64-apple-ios-sim`](platform-support/aarch64-apple-ios-sim.md) | \u2713 | Apple iOS Simulator on ARM64\n `aarch64-fuchsia` | \u2713 | ARM64 Fuchsia\n-`aarch64-linux-android` | \u2713 | ARM64 Android\n+[`aarch64-linux-android`](platform-support/android.md) | \u2713 | ARM64 Android\n `aarch64-unknown-none-softfloat` | * | Bare ARM64, softfloat\n `aarch64-unknown-none` | * | Bare ARM64, hardfloat\n-`arm-linux-androideabi` | \u2713 | ARMv7 Android\n+[`arm-linux-androideabi`](platform-support/android.md) | \u2713 | ARMv7 Android\n `arm-unknown-linux-musleabi` | \u2713 | ARMv6 Linux with MUSL\n `arm-unknown-linux-musleabihf` | \u2713 | ARMv6 Linux with MUSL, hardfloat\n `armebv7r-none-eabi` | * | Bare ARMv7-R, Big Endian\n `armebv7r-none-eabihf` | * | Bare ARMv7-R, Big Endian, hardfloat\n `armv5te-unknown-linux-gnueabi` | \u2713 | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n `armv5te-unknown-linux-musleabi` | \u2713 | ARMv5TE Linux with MUSL\n-`armv7-linux-androideabi` | \u2713 | ARMv7a Android\n+[`armv7-linux-androideabi`](platform-support/android.md) | \u2713 | ARMv7a Android\n `armv7-unknown-linux-gnueabi` | \u2713 |ARMv7 Linux (kernel 4.15, glibc 2.27)\n `armv7-unknown-linux-musleabi` | \u2713 |ARMv7 Linux with MUSL\n `armv7-unknown-linux-musleabihf` | \u2713 | ARMv7 Linux with MUSL, hardfloat\n@@ -146,7 +146,7 @@ target | std | notes\n `i586-pc-windows-msvc` | * | 32-bit Windows w/o SSE\n `i586-unknown-linux-gnu` | \u2713 | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n `i586-unknown-linux-musl` | \u2713 | 32-bit Linux w/o SSE, MUSL\n-`i686-linux-android` | \u2713 | 32-bit x86 Android\n+[`i686-linux-android`](platform-support/android.md) | \u2713 | 32-bit x86 Android\n `i686-unknown-freebsd` | \u2713 | 32-bit FreeBSD\n `i686-unknown-linux-musl` | \u2713 | 32-bit Linux with MUSL\n `mips-unknown-linux-musl` | \u2713 | MIPS Linux with MUSL\n@@ -165,7 +165,7 @@ target | std | notes\n `thumbv7em-none-eabi` | * | Bare Cortex-M4, M7\n `thumbv7em-none-eabihf` | * | Bare Cortex-M4F, M7F, FPU, hardfloat\n `thumbv7m-none-eabi` | * | Bare Cortex-M3\n-`thumbv7neon-linux-androideabi` | \u2713 | Thumb2-mode ARMv7a Android with NEON\n+[`thumbv7neon-linux-androideabi`](platform-support/android.md) | \u2713 | Thumb2-mode ARMv7a Android with NEON\n `thumbv7neon-unknown-linux-gnueabihf` | \u2713 | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n `thumbv8m.base-none-eabi` | * | ARMv8-M Baseline\n `thumbv8m.main-none-eabi` | * | ARMv8-M Mainline\n@@ -176,7 +176,7 @@ target | std | notes\n `x86_64-apple-ios` | \u2713 | 64-bit x86 iOS\n [`x86_64-fortanix-unknown-sgx`](platform-support/x86_64-fortanix-unknown-sgx.md) | \u2713 | [Fortanix ABI] for 64-bit Intel SGX\n `x86_64-fuchsia` | \u2713 | 64-bit Fuchsia\n-`x86_64-linux-android` | \u2713 | 64-bit x86 Android\n+[`x86_64-linux-android`](platform-support/android.md) | \u2713 | 64-bit x86 Android\n `x86_64-pc-solaris` | \u2713 | 64-bit Solaris 10/11, illumos\n `x86_64-unknown-linux-gnux32` | \u2713 | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n [`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * | Freestanding/bare-metal x86_64, softfloat"}, {"sha": "b2c8e5d4df73601d1113e88c15e8ad41f5d3595b", "filename": "src/doc/rustc/src/platform-support/android.md", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -0,0 +1,45 @@\n+# *-linux-android and *-linux-androideabi\n+\n+**Tier: 2**\n+\n+[Android] is a mobile operating system built on top of the Linux kernel.\n+\n+[Android]: https://source.android.com/\n+\n+## Target maintainers\n+\n+- Chris Wailes ([@chriswailes](https://github.com/chriswailes))\n+- Matthew Maurer ([@maurer](https://github.com/maurer))\n+- Martin Geisler ([@mgeisler](https://github.com/mgeisler))\n+\n+## Requirements\n+\n+This target is cross-compiled from a host environment. Development may be done\n+from the [source tree] or using the Android NDK.\n+\n+[source tree]: https://source.android.com/docs/setup/build/downloading\n+\n+Android targets support std. Generated binaries use the ELF file format.\n+\n+## NDK/API Update Policy\n+\n+Rust will support the most recent Long Term Support (LTS) Android Native\n+Development Kit (NDK).  By default Rust will support all API levels supported\n+by the NDK, but a higher minimum API level may be required if deemed necessary.\n+\n+## Building the target\n+\n+To build Rust binaries for Android you'll need a copy of the most recent LTS\n+edition of the [Android NDK].  Supported Android targets are:\n+\n+* aarch64-linux-android\n+* arm-linux-androideabi\n+* armv7-linux-androideabi\n+* i686-linux-android\n+* thumbv7neon-linux-androideabi\n+* x86_64-linux-android\n+\n+[Android NDK]: https://developer.android.com/ndk/downloads\n+\n+A list of all supported targets can be found\n+[here](https://doc.rust-lang.org/rustc/platform-support.html)"}, {"sha": "593c1c436b861eac489d9b8d0f3a31041513f301", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -411,7 +411,7 @@ img {\n \n .sidebar {\n \tfont-size: 0.875rem;\n-\twidth: 250px;\n+\twidth: 200px;\n \tmin-width: 200px;\n \toverflow-y: scroll;\n \tposition: sticky;"}, {"sha": "afe25195100c5e63d4baed0f3853149c352ad2ec", "filename": "src/test/rustdoc-gui/check-stab-in-docblock.goml", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -7,15 +7,21 @@ size: (786, 600)\n // Confirms that there 3 paragraphs.\n assert-count: (\".top-doc .docblock p\", 3)\n // Checking that there is no scrollable content.\n+store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(1)\", \"clientHeight\")\n+store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(1)\", \"clientWidth\")\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(1)\",\n-    {\"scrollHeight\": \"120\", \"clientHeight\": \"120\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+    {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},\n )\n+store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(2)\", \"clientHeight\")\n+store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(2)\", \"clientWidth\")\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(2)\",\n-    {\"scrollHeight\": \"48\", \"clientHeight\": \"48\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+    {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},\n )\n+store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(3)\", \"clientHeight\")\n+store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(3)\", \"clientWidth\")\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(3)\",\n-    {\"scrollHeight\": \"48\", \"clientHeight\": \"48\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+    {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},\n )"}, {"sha": "ee4dad444e93219861026e24eb4ed7cabd970b44", "filename": "src/test/rustdoc-gui/code-blocks-overflow.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -5,4 +5,4 @@ size: (1080, 600)\n assert-count: (\".docblock > .example-wrap\", 2)\n assert: \".docblock > .example-wrap > .language-txt\"\n assert: \".docblock > .example-wrap > .rust-example-rendered\"\n-assert-css: (\".docblock > .example-wrap > pre\", {\"width\": \"785.25px\", \"overflow-x\": \"auto\"}, ALL)\n+assert-css: (\".docblock > .example-wrap > pre\", {\"width\": \"796px\", \"overflow-x\": \"auto\"}, ALL)"}, {"sha": "ef0d37c902e090273fc9d324842b1e4e5ca1285f", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -4,7 +4,7 @@ goto: file://|DOC_PATH|/lib2/long_table/struct.Foo.html\n size: (1100, 800)\n // Logically, the \".docblock\" and the \"<p>\" should have the same scroll width.\n compare-elements-property: (\".top-doc .docblock\", \".top-doc .docblock > p\", [\"scrollWidth\"])\n-assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"801\"})\n+assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"816\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1572\"})\n \n@@ -16,6 +16,6 @@ compare-elements-property: (\n     \"#implementations-list > details .docblock > p\",\n     [\"scrollWidth\"],\n )\n-assert-property: (\"#implementations-list > details .docblock\", {\"scrollWidth\": \"801\"})\n+assert-property: (\"#implementations-list > details .docblock\", {\"scrollWidth\": \"816\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\"#implementations-list > details .docblock table\", {\"scrollWidth\": \"1572\"})"}, {"sha": "bc3addd33dd384e3e6b8981939b75e4e81de3a01", "filename": "src/test/rustdoc-gui/item-info-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -4,7 +4,7 @@ goto: file://|DOC_PATH|/lib2/struct.LongItemInfo.html\n size: (1200, 870)\n // Logically, the \"item-decl\" and the \"item-info\" should have the same scroll width.\n compare-elements-property: (\".item-decl\", \".item-info\", [\"scrollWidth\"])\n-assert-property: (\".item-info\", {\"scrollWidth\": \"890\"})\n+assert-property: (\".item-info\", {\"scrollWidth\": \"940\"})\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: (\n     \".item-info\",\n@@ -21,7 +21,7 @@ compare-elements-property: (\n )\n assert-property: (\n     \"#impl-SimpleTrait-for-LongItemInfo2 .item-info\",\n-    {\"scrollWidth\": \"866\"},\n+    {\"scrollWidth\": \"916\"},\n )\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: ("}, {"sha": "8750d5c53606f4229007d9feff5f4b237969e3f4", "filename": "src/test/rustdoc-gui/item-info.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -4,9 +4,9 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n-assert-css: (\".item-info\", {\"width\": \"790px\"})\n+assert-css: (\".item-info\", {\"width\": \"840px\"})\n assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n-assert-position: (\".item-info .stab\", {\"x\": 295})\n+assert-position: (\".item-info .stab\", {\"x\": 245})\n \n // Now we ensure that they're not rendered on the same line.\n goto: file://|DOC_PATH|/lib2/trait.Trait.html"}, {"sha": "20a129f9d9da6e181f233d0790ba79fe8dacab25", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -18,11 +18,11 @@ compare-elements-position-false: (\n // The `i` should be *after* the type.\n assert-position: (\n     \"//*[@id='method.create_an_iterator_from_read']//a[text()='NotableStructWithLongName']\",\n-    {\"x\": 692},\n+    {\"x\": 677},\n )\n assert-position: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n-    {\"x\": 966},\n+    {\"x\": 951},\n )\n \n "}, {"sha": "e33693e27eaf6b6e2243550155604216f0354e53", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -7,7 +7,7 @@ press-key: 'Enter'\n wait-for: \"#crate-search\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n-assert-css: (\".search-results div.desc\", {\"width\": \"293px\"})\n+assert-css: (\".search-results div.desc\", {\"width\": \"318px\"})\n size: (600, 100)\n // As counter-intuitive as it may seem, in this width, the width is \"100%\", which is why\n // when computed it's larger."}, {"sha": "ea7bcc669945abd13536eba19a29cbb3c787f37e", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -1,5 +1,6 @@\n // Checks multiple things on the sidebar display (width of its elements, colors, etc).\n goto: file://|DOC_PATH|/test_docs/index.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n show-text: true\n local-storage: {\"rustdoc-theme\": \"light\"}\n // We reload the page so the local storage settings are being used.\n@@ -39,11 +40,13 @@ assert-property: (\"html\", {\"scrollTop\": \"0\"})\n \n // We now go back to the crate page to click on the \"lib2\" crate link.\n goto: file://|DOC_PATH|/test_docs/index.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-css: (\".sidebar-elems .crate > ul > li:first-child > a\", {\"color\": \"rgb(53, 109, 164)\"})\n click: \".sidebar-elems .crate > ul > li:first-child > a\"\n \n // PAGE: lib2/index.html\n goto: file://|DOC_PATH|/lib2/index.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"lib2\")\n@@ -65,11 +68,13 @@ assert-text: (\".sidebar .sidebar-elems .location\", \"In lib2\")\n assert-false: \".sidebar-elems > .crate\"\n \n goto: ./module/index.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Module module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems > .crate\"\n \n goto: ./sub_module/sub_sub_module/index.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems .crate\"\n@@ -78,11 +83,21 @@ assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-property: (\".sidebar-elems section .block li > a\", {\"offsetHeight\": 29})\n \n // Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n // appropriate anchor in index.html.\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n click: \".block.mod h3 a\"\n // PAGE: index.html\n assert-css: (\"#modules\", {\"background-color\": \"rgb(253, 255, 211)\"})\n+\n+// Finally, assert that the `[+]/[\u2212]` toggle doesn't affect sidebar width.\n+click: \"#toggle-all-docs\"\n+assert-text: (\"#toggle-all-docs\", \"[+]\")\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n+click: \"#toggle-all-docs\"\n+assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n\\ No newline at end of file"}, {"sha": "505874fa010708ebc43247e2d27d54321f290bb0", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -15,7 +15,7 @@ assert-property: (\".item-table .struct\", {\"offsetWidth\": \"684\"})\n goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n-assert-property: (\"#main-content\", {\"scrollWidth\": \"825\"})\n+assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n \n@@ -24,14 +24,14 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n goto: file://|DOC_PATH|/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n-assert-property: (\"#main-content\", {\"scrollWidth\": \"825\"})\n+assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n \n // On mobile:\n size: (600, 600)\n goto: file://|DOC_PATH|/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\n // It shouldn't have an overflow in the topbar either.\n-assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"500\"})\n-assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"500\"})\n+store-property: (scrollWidth, \".mobile-topbar .location\", \"scrollWidth\")\n+assert-property: (\".mobile-topbar .location\", {\"clientWidth\": |scrollWidth|})\n assert-css: (\".mobile-topbar .location\", {\"overflow-x\": \"hidden\"})"}, {"sha": "d366c5ffbfd8cde8cbd912a8ff3ef5d9b0b22dd5", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -6,6 +6,7 @@\n // ignore-windows - this is a unix-specific test\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia no execvp syscall\n #![feature(process_exec, rustc_private)]\n \n extern crate libc;"}, {"sha": "aa4e2f5b893646718a1cb9b958c94a5a3ebfb95f", "filename": "src/test/ui/command/command-uid-gid.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -2,6 +2,7 @@\n // ignore-android\n // ignore-emscripten\n // ignore-sgx\n+// ignore-fuchsia no '/bin/sh', '/bin/ls'\n \n #![feature(rustc_private)]\n "}, {"sha": "be1e012acb185b756c8efdfe0834db9af299b290", "filename": "src/test/ui/impl-trait/in-trait/issue-102140.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.rs?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -0,0 +1,30 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Marker {}\n+impl Marker for u32 {}\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Marker\n+    where\n+        Self: Sized;\n+}\n+\n+struct Outer;\n+\n+impl MyTrait for Outer {\n+    fn foo(&self) -> impl Marker {\n+        42\n+    }\n+}\n+\n+impl dyn MyTrait {\n+    fn other(&self) -> impl Marker {\n+        MyTrait::foo(&self)\n+        //~^ ERROR the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+        //~| ERROR the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+        //~| ERROR the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "08602185f50cacb887f5d7d326e9103d47a0358f", "filename": "src/test/ui/impl-trait/in-trait/issue-102140.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199fe1d169b5aeeca0e527ded26542b7a05ebd79/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr?ref=199fe1d169b5aeeca0e527ded26542b7a05ebd79", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:23:22\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ------------ -^^^^\n+   |         |            |\n+   |         |            the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |         |            help: consider removing the leading `&`-reference\n+   |         required by a bound introduced by this call\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:23:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n+  --> $DIR/issue-102140.rs:23:9\n+   |\n+LL |         MyTrait::foo(&self)\n+   |         ^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |\n+   = help: the trait `MyTrait` is implemented for `Outer`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}