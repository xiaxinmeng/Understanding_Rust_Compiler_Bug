{"sha": "c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MjI5ZTVkMmVhNjE2OGVjODBhN2ZlZWVhMWE1MTNiMmIzMTc2YzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T05:00:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:15:58Z"}, "message": "core: Inhert ~/@/& cmp traits, remove old modules\n\nThis commit removes the std::{managed, reference} modules. The modules serve\nessentially no purpose, and the only free function removed was `managed::ptr_eq`\nwhich can be achieved by comparing references.\n\n[breaking-change]", "tree": {"sha": "479726fbafd85d1dd0549e3707882d44ea4dfd74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479726fbafd85d1dd0549e3707882d44ea4dfd74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "html_url": "https://github.com/rust-lang/rust/commit/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5592a8f5db52a11b63547b661b3a635655b16980", "url": "https://api.github.com/repos/rust-lang/rust/commits/5592a8f5db52a11b63547b661b3a635655b16980", "html_url": "https://github.com/rust-lang/rust/commit/5592a8f5db52a11b63547b661b3a635655b16980"}], "stats": {"total": 226, "additions": 76, "deletions": 150}, "files": [{"sha": "0ad2a465522a24269ca113107f919e83e32ad428", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "patch": "@@ -189,6 +189,81 @@ pub fn max<T: TotalOrd>(v1: T, v2: T) -> T {\n     if v1 > v2 { v1 } else { v2 }\n }\n \n+// Implementation of Eq/TotalEq for some primitive types\n+#[cfg(not(test))]\n+mod impls {\n+    use cmp::{Ord, TotalOrd, Eq, TotalEq, Ordering};\n+\n+    // & pointers\n+    impl<'a, T: Eq> Eq for &'a T {\n+        #[inline]\n+        fn eq(&self, other: & &'a T) -> bool { *(*self) == *(*other) }\n+        #[inline]\n+        fn ne(&self, other: & &'a T) -> bool { *(*self) != *(*other) }\n+    }\n+    impl<'a, T: Ord> Ord for &'a T {\n+        #[inline]\n+        fn lt(&self, other: & &'a T) -> bool { *(*self) < *(*other) }\n+        #[inline]\n+        fn le(&self, other: & &'a T) -> bool { *(*self) <= *(*other) }\n+        #[inline]\n+        fn ge(&self, other: & &'a T) -> bool { *(*self) >= *(*other) }\n+        #[inline]\n+        fn gt(&self, other: & &'a T) -> bool { *(*self) > *(*other) }\n+    }\n+    impl<'a, T: TotalOrd> TotalOrd for &'a T {\n+        #[inline]\n+        fn cmp(&self, other: & &'a T) -> Ordering { (**self).cmp(*other) }\n+    }\n+    impl<'a, T: TotalEq> TotalEq for &'a T {}\n+\n+    // @ pointers\n+    impl<T:Eq> Eq for @T {\n+        #[inline]\n+        fn eq(&self, other: &@T) -> bool { *(*self) == *(*other) }\n+        #[inline]\n+        fn ne(&self, other: &@T) -> bool { *(*self) != *(*other) }\n+    }\n+    impl<T:Ord> Ord for @T {\n+        #[inline]\n+        fn lt(&self, other: &@T) -> bool { *(*self) < *(*other) }\n+        #[inline]\n+        fn le(&self, other: &@T) -> bool { *(*self) <= *(*other) }\n+        #[inline]\n+        fn ge(&self, other: &@T) -> bool { *(*self) >= *(*other) }\n+        #[inline]\n+        fn gt(&self, other: &@T) -> bool { *(*self) > *(*other) }\n+    }\n+    impl<T: TotalOrd> TotalOrd for @T {\n+        #[inline]\n+        fn cmp(&self, other: &@T) -> Ordering { (**self).cmp(*other) }\n+    }\n+    impl<T: TotalEq> TotalEq for @T {}\n+\n+    // ~ pointers\n+    impl<T:Eq> Eq for ~T {\n+        #[inline]\n+        fn eq(&self, other: &~T) -> bool { *(*self) == *(*other) }\n+        #[inline]\n+        fn ne(&self, other: &~T) -> bool { *(*self) != *(*other) }\n+    }\n+    impl<T:Ord> Ord for ~T {\n+        #[inline]\n+        fn lt(&self, other: &~T) -> bool { *(*self) < *(*other) }\n+        #[inline]\n+        fn le(&self, other: &~T) -> bool { *(*self) <= *(*other) }\n+        #[inline]\n+        fn ge(&self, other: &~T) -> bool { *(*self) >= *(*other) }\n+        #[inline]\n+        fn gt(&self, other: &~T) -> bool { *(*self) > *(*other) }\n+    }\n+    impl<T: TotalOrd> TotalOrd for ~T {\n+        #[inline]\n+        fn cmp(&self, other: &~T) -> Ordering { (**self).cmp(*other) }\n+    }\n+    impl<T: TotalEq> TotalEq for ~T {}\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::lexical_ordering;"}, {"sha": "9260d8d7ab2be2ad07827ef5cb8a6e0e8b34bc79", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "patch": "@@ -20,7 +20,6 @@ collector is task-local so `Gc<T>` is not sendable.\n \n use kinds::marker;\n use clone::Clone;\n-use managed;\n \n /// Immutable garbage-collected pointer type\n #[lang=\"gc\"]\n@@ -55,7 +54,7 @@ impl<T: 'static> Gc<T> {\n     /// Determine if two garbage-collected boxes point to the same object\n     #[inline]\n     pub fn ptr_eq(&self, other: &Gc<T>) -> bool {\n-        managed::ptr_eq(self.ptr, other.ptr)\n+        self.borrow() as *T == other.borrow() as *T\n     }\n }\n "}, {"sha": "95d67eb77d14df7a7d973961e83dc5fcf73934ed", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "patch": "@@ -203,8 +203,6 @@ pub mod strbuf;\n \n pub mod ascii;\n \n-mod managed;\n-mod reference;\n pub mod rc;\n pub mod gc;\n "}, {"sha": "bf73c05440c14bf3a388df72444f01ac6ae4324f", "filename": "src/libstd/managed.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Operations on managed box types\n-\n-#[cfg(not(test))] use cmp::*;\n-\n-/// Determine if two shared boxes point to the same object\n-#[inline]\n-pub fn ptr_eq<T>(a: @T, b: @T) -> bool {\n-    &*a as *T == &*b as *T\n-}\n-\n-#[cfg(not(test))]\n-impl<T:Eq> Eq for @T {\n-    #[inline]\n-    fn eq(&self, other: &@T) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &@T) -> bool { *(*self) != *(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T:Ord> Ord for @T {\n-    #[inline]\n-    fn lt(&self, other: &@T) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &@T) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &@T) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &@T) -> bool { *(*self) > *(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T: TotalOrd> TotalOrd for @T {\n-    #[inline]\n-    fn cmp(&self, other: &@T) -> Ordering { (**self).cmp(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T: TotalEq> TotalEq for @T {}\n-\n-#[test]\n-fn test() {\n-    let x = @3;\n-    let y = @3;\n-    assert!((ptr_eq::<int>(x, x)));\n-    assert!((ptr_eq::<int>(y, y)));\n-    assert!((!ptr_eq::<int>(x, y)));\n-    assert!((!ptr_eq::<int>(y, x)));\n-}"}, {"sha": "4f282c5c9e9a9eb37e21d45c69fbd37ab9fd80bb", "filename": "src/libstd/owned.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5229e5d2ea6168ec80a7feeea1a513b2b3176c0/src%2Flibstd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fowned.rs?ref=c5229e5d2ea6168ec80a7feeea1a513b2b3176c0", "patch": "@@ -10,8 +10,6 @@\n \n //! Operations on unique pointer types\n \n-#[cfg(not(test))] use cmp::*;\n-\n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied.\n ///\n@@ -33,32 +31,3 @@ pub struct Box<T>(*T);\n \n #[cfg(test)]\n pub struct Box<T>(*T);\n-\n-#[cfg(not(test))]\n-impl<T:Eq> Eq for Box<T> {\n-    #[inline]\n-    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T:Ord> Ord for Box<T> {\n-    #[inline]\n-    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T: TotalOrd> TotalOrd for Box<T> {\n-    #[inline]\n-    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<T: TotalEq> TotalEq for Box<T> {}"}, {"sha": "eb615afd85f9a2192599a0081324fc48ba80d579", "filename": "src/libstd/reference.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5592a8f5db52a11b63547b661b3a635655b16980/src%2Flibstd%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freference.rs?ref=5592a8f5db52a11b63547b661b3a635655b16980", "patch": "@@ -1,57 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Utilities for references\n-\n-#[cfg(not(test))]\n-use cmp::{Eq, Ord, Ordering, TotalEq, TotalOrd};\n-\n-// Equality for region pointers\n-#[cfg(not(test))]\n-impl<'a, T: Eq> Eq for &'a T {\n-    #[inline]\n-    fn eq(&self, other: & &'a T) -> bool {\n-        *(*self) == *(*other)\n-    }\n-    #[inline]\n-    fn ne(&self, other: & &'a T) -> bool {\n-        *(*self) != *(*other)\n-    }\n-}\n-\n-// Comparison for region pointers\n-#[cfg(not(test))]\n-impl<'a, T: Ord> Ord for &'a T {\n-    #[inline]\n-    fn lt(&self, other: & &'a T) -> bool {\n-        *(*self) < *(*other)\n-    }\n-    #[inline]\n-    fn le(&self, other: & &'a T) -> bool {\n-        *(*self) <= *(*other)\n-    }\n-    #[inline]\n-    fn ge(&self, other: & &'a T) -> bool {\n-        *(*self) >= *(*other)\n-    }\n-    #[inline]\n-    fn gt(&self, other: & &'a T) -> bool {\n-        *(*self) > *(*other)\n-    }\n-}\n-\n-#[cfg(not(test))]\n-impl<'a, T: TotalOrd> TotalOrd for &'a T {\n-    #[inline]\n-    fn cmp(&self, other: & &'a T) -> Ordering { (**self).cmp(*other) }\n-}\n-\n-#[cfg(not(test))]\n-impl<'a, T: TotalEq> TotalEq for &'a T {}"}]}