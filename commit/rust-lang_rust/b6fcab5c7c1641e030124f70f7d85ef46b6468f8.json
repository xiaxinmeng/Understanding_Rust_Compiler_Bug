{"sha": "b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZmNhYjVjN2MxNjQxZTAzMDEyNGY3MGY3ZDg1ZWY0NmI2NDY4Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-20T04:15:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-20T04:15:23Z"}, "message": "Auto merge of #32358 - Manishearth:pr-32053, r=Manishearth\n\nAdd note if method is called on a function object\n\nrebase of #32053", "tree": {"sha": "e70ac60f5e15dde507a2418cae56a1d52cee74b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70ac60f5e15dde507a2418cae56a1d52cee74b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "html_url": "https://github.com/rust-lang/rust/commit/b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6fcab5c7c1641e030124f70f7d85ef46b6468f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e8a00514052bf812af0677dde8710336d77cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e8a00514052bf812af0677dde8710336d77cbb", "html_url": "https://github.com/rust-lang/rust/commit/78e8a00514052bf812af0677dde8710336d77cbb"}, {"sha": "88ad22998bc3cf22c28273756f48c169910bfad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ad22998bc3cf22c28273756f48c169910bfad5", "html_url": "https://github.com/rust-lang/rust/commit/88ad22998bc3cf22c28273756f48c169910bfad5"}], "stats": {"total": 154, "additions": 104, "deletions": 50}, "files": [{"sha": "44724ca26b1648be3f2f76737023a755ff38890b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 69, "deletions": 50, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/b6fcab5c7c1641e030124f70f7d85ef46b6468f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fcab5c7c1641e030124f70f7d85ef46b6468f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "patch": "@@ -25,18 +25,56 @@ use middle::subst::Substs;\n use middle::traits::{Obligation, SelectionContext};\n use util::nodemap::{FnvHashSet};\n \n+\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n use rustc_front::print::pprust;\n use rustc_front::hir;\n+use rustc_front::hir::Expr_;\n \n use std::cell;\n use std::cmp::Ordering;\n \n use super::{MethodError, NoMatchData, CandidateSource, impl_item, trait_item};\n use super::probe::Mode;\n \n+fn is_fn_ty<'a, 'tcx>(ty: &Ty<'tcx>, fcx: &FnCtxt<'a, 'tcx>, span: Span) -> bool {\n+    let cx = fcx.tcx();\n+    println!(\"{:?}\", ty);\n+    match ty.sty {\n+        // Not all of these (e.g. unsafe fns) implement FnOnce\n+        // so we look for these beforehand\n+        ty::TyClosure(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => true,\n+        // If it's not a simple function, look for things which implement FnOnce\n+        _ => {\n+            if let Ok(fn_once_trait_did) =\n+                    cx.lang_items.require(FnOnceTraitLangItem) {\n+                let infcx = fcx.infcx();\n+                infcx.probe(|_| {\n+                    let fn_once_substs =\n+                        Substs::new_trait(vec![infcx.next_ty_var()],\n+                                          Vec::new(),\n+                                          ty);\n+                    let trait_ref =\n+                      ty::TraitRef::new(fn_once_trait_did,\n+                                        cx.mk_substs(fn_once_substs));\n+                    let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                    let obligation = Obligation::misc(span,\n+                                                      fcx.body_id,\n+                                                      poly_trait_ref\n+                                                         .to_predicate());\n+                    let mut selcx = SelectionContext::new(infcx);\n+\n+                    return selcx.evaluate_obligation(&obligation)\n+                })\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}\n+\n pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                               span: Span,\n                               rcvr_ty: Ty<'tcx>,\n@@ -79,60 +117,41 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                         // snippet\n                     };\n \n-                    macro_rules! span_stored_function {\n-                        () => {\n-                            err.span_note(span,\n-                                          &format!(\"use `({0}.{1})(...)` if you meant to call \\\n-                                                    the function stored in the `{1}` field\",\n-                                                   expr_string, item_name));\n-                        }\n-                    }\n+                    let field_ty = field.ty(cx, substs);\n \n-                    macro_rules! span_did_you_mean {\n-                        () => {\n-                            err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n-                                                         expr_string, item_name));\n-                        }\n+                    if is_fn_ty(&field_ty, &fcx, span) {\n+                        err.span_note(span,\n+                                      &format!(\"use `({0}.{1})(...)` if you meant to call \\\n+                                               the function stored in the `{1}` field\",\n+                                               expr_string, item_name));\n+                    } else {\n+                        err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n+                                                     expr_string, item_name));\n                     }\n+                }\n+            }\n \n-                    // Determine if the field can be used as a function in some way\n-                    let field_ty = field.ty(cx, substs);\n+            if is_fn_ty(&rcvr_ty, &fcx, span) {\n+                macro_rules! report_function {\n+                    ($span:expr, $name:expr) => {\n+                        err.fileline_note(\n+                            $span,\n+                            &format!(\"{} is a function, perhaps you wish to call it\",\n+                                     $name));\n+                    }\n+                }\n \n-                    match field_ty.sty {\n-                        // Not all of these (e.g. unsafe fns) implement FnOnce\n-                        // so we look for these beforehand\n-                        ty::TyClosure(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n-                            span_stored_function!();\n-                        }\n-                        // If it's not a simple function, look for things which implement FnOnce\n-                        _ => {\n-                            if let Ok(fn_once_trait_did) =\n-                                    cx.lang_items.require(FnOnceTraitLangItem) {\n-                                let infcx = fcx.infcx();\n-                                infcx.probe(|_| {\n-                                    let fn_once_substs =\n-                                        Substs::new_trait(vec![infcx.next_ty_var()],\n-                                                          Vec::new(),\n-                                                          field_ty);\n-                                    let trait_ref =\n-                                      ty::TraitRef::new(fn_once_trait_did,\n-                                                        cx.mk_substs(fn_once_substs));\n-                                    let poly_trait_ref = trait_ref.to_poly_trait_ref();\n-                                    let obligation = Obligation::misc(span,\n-                                                                      fcx.body_id,\n-                                                                      poly_trait_ref\n-                                                                         .to_predicate());\n-                                    let mut selcx = SelectionContext::new(infcx);\n-\n-                                    if selcx.evaluate_obligation(&obligation) {\n-                                        span_stored_function!();\n-                                    } else {\n-                                        span_did_you_mean!();\n-                                    }\n-                                });\n-                            } else {\n-                                span_did_you_mean!();\n-                            }\n+                if let Some(expr) = rcvr_expr {\n+                    if let Ok (expr_string) = cx.sess.codemap().span_to_snippet(expr.span) {\n+                        report_function!(expr.span, expr_string);\n+                        err.span_suggestion(expr.span,\n+                                            \"try calling the base function:\",\n+                                            format!(\"{}()\",\n+                                                    expr_string));\n+                    }\n+                    else if let Expr_::ExprPath(_, path) = expr.node.clone() {\n+                        if let Some(segment) = path.segments.last() {\n+                            report_function!(expr.span, segment.identifier.name);\n                         }\n                     }\n                 }"}, {"sha": "b3dc043f502fcfa1e02e033d29b99629190c972e", "filename": "src/test/compile-fail/issue-29124.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b6fcab5c7c1641e030124f70f7d85ef46b6468f8/src%2Ftest%2Fcompile-fail%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fcab5c7c1641e030124f70f7d85ef46b6468f8/src%2Ftest%2Fcompile-fail%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29124.rs?ref=b6fcab5c7c1641e030124f70f7d85ef46b6468f8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct ret;\n+struct obj;\n+\n+impl obj {\n+    fn func() -> ret {\n+        ret\n+    }\n+}\n+\n+fn func() -> ret {\n+    ret\n+}\n+\n+fn main() {\n+    obj::func.x();\n+    //~^ ERROR no method named `x` found for type `fn() -> ret {obj::func}` in the current scope\n+    //~^^ NOTE obj::func is a function, perhaps you wish to call it\n+    //~^^^ HELP try calling the base function:\n+    //~| SUGGESTION obj::func().x();\n+    func.x();\n+    //~^ ERROR no method named `x` found for type `fn() -> ret {func}` in the current scope\n+    //~^^ NOTE func is a function, perhaps you wish to call it\n+    //~^^^ HELP try calling the base function:\n+    //~| SUGGESTION func().x();\n+}"}]}