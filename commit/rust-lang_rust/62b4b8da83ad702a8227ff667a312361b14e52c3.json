{"sha": "62b4b8da83ad702a8227ff667a312361b14e52c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjRiOGRhODNhZDcwMmE4MjI3ZmY2NjdhMzEyMzYxYjE0ZTUyYzM=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2021-02-27T12:25:06Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2021-02-27T12:25:06Z"}, "message": "Enable report_in_external_macro in unaligned_references", "tree": {"sha": "2ae4b8126ddd9708962cdfbec56a4dcce6018898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae4b8126ddd9708962cdfbec56a4dcce6018898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b4b8da83ad702a8227ff667a312361b14e52c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b4b8da83ad702a8227ff667a312361b14e52c3", "html_url": "https://github.com/rust-lang/rust/commit/62b4b8da83ad702a8227ff667a312361b14e52c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b4b8da83ad702a8227ff667a312361b14e52c3/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "html_url": "https://github.com/rust-lang/rust/commit/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "46138df07bf69e0441d3c159584f0bbd536d794f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62b4b8da83ad702a8227ff667a312361b14e52c3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b4b8da83ad702a8227ff667a312361b14e52c3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=62b4b8da83ad702a8227ff667a312361b14e52c3", "patch": "@@ -1080,6 +1080,7 @@ declare_lint! {\n     pub UNALIGNED_REFERENCES,\n     Allow,\n     \"detects unaligned references to fields of packed structs\",\n+    report_in_external_macro\n }\n \n declare_lint! {"}, {"sha": "fb486c6b59ae045dcf0609b39784603ccbe54ffe", "filename": "src/test/ui/lint/auxiliary/unaligned_references_external_crate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Funaligned_references_external_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Funaligned_references_external_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Funaligned_references_external_crate.rs?ref=62b4b8da83ad702a8227ff667a312361b14e52c3", "patch": "@@ -0,0 +1,28 @@\n+#[macro_export]\n+macro_rules! mac {\n+    (\n+        $(#[$attrs:meta])*\n+        pub struct $ident:ident {\n+            $(\n+                $(#[$pin:ident])?\n+                $field_vis:vis $field:ident: $field_ty:ty\n+            ),+ $(,)?\n+        }\n+    ) => {\n+        $(#[$attrs])*\n+        pub struct $ident {\n+            $(\n+                $field_vis $field: $field_ty\n+            ),+\n+        }\n+\n+        const _: () = {\n+            #[deny(unaligned_references)]\n+            fn __f(this: &$ident) {\n+                $(\n+                    let _ = &this.$field;\n+                )+\n+            }\n+        };\n+    };\n+}"}, {"sha": "6ac501fb0e0dba1618e4b720cb1395b7ea647403", "filename": "src/test/ui/lint/unaligned_references_external_macro.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.rs?ref=62b4b8da83ad702a8227ff667a312361b14e52c3", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:unaligned_references_external_crate.rs\n+\n+#![allow(safe_packed_borrows)]\n+\n+extern crate unaligned_references_external_crate;\n+\n+unaligned_references_external_crate::mac! { //~ERROR reference to packed field is unaligned\n+    #[repr(packed)]\n+    pub struct X {\n+        pub field: u16\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "140294b65ccd88116491f78f22868fa3a5870ccf", "filename": "src/test/ui/lint/unaligned_references_external_macro.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62b4b8da83ad702a8227ff667a312361b14e52c3/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=62b4b8da83ad702a8227ff667a312361b14e52c3", "patch": "@@ -0,0 +1,26 @@\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references_external_macro.rs:7:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references_external_macro.rs:7:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}