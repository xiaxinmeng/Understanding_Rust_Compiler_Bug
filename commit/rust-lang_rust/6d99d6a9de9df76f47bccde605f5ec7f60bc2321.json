{"sha": "6d99d6a9de9df76f47bccde605f5ec7f60bc2321", "node_id": "C_kwDOAAsO6NoAKDZkOTlkNmE5ZGU5ZGY3NmY0N2JjY2RlNjA1ZjVlYzdmNjBiYzIzMjE", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-20T13:41:33Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-20T21:35:50Z"}, "message": "ship clippy, miri and rustfmt with sysroot\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "c8b0d1aa6bf5677db563c7d0771fb7427f2ef396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b0d1aa6bf5677db563c7d0771fb7427f2ef396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d99d6a9de9df76f47bccde605f5ec7f60bc2321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d99d6a9de9df76f47bccde605f5ec7f60bc2321", "html_url": "https://github.com/rust-lang/rust/commit/6d99d6a9de9df76f47bccde605f5ec7f60bc2321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d99d6a9de9df76f47bccde605f5ec7f60bc2321/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e23d180c1db42941b3bd32542a899e9eee7cbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e23d180c1db42941b3bd32542a899e9eee7cbcb", "html_url": "https://github.com/rust-lang/rust/commit/7e23d180c1db42941b3bd32542a899e9eee7cbcb"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "f8da6df0c7ccd0e7a841d1480b85fb3030f494fc", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6d99d6a9de9df76f47bccde605f5ec7f60bc2321/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99d6a9de9df76f47bccde605f5ec7f60bc2321/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=6d99d6a9de9df76f47bccde605f5ec7f60bc2321", "patch": "@@ -748,6 +748,7 @@ macro_rules! tool_extended {\n        stable = $stable:expr\n        $(,tool_std = $tool_std:literal)?\n        $(,allow_features = $allow_features:expr)?\n+       $(,add_bins_to_sysroot = $add_bins_to_sysroot:expr)?\n        ;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -790,7 +791,7 @@ macro_rules! tool_extended {\n \n             #[allow(unused_mut)]\n             fn run(mut $sel, $builder: &Builder<'_>) -> Option<PathBuf> {\n-                $builder.ensure(ToolBuild {\n+                let tool = $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n@@ -800,7 +801,27 @@ macro_rules! tool_extended {\n                     is_optional_tool: true,\n                     source_type: SourceType::InTree,\n                     allow_features: concat!($($allow_features)*),\n-                })\n+                })?;\n+\n+                if (false $(|| !$add_bins_to_sysroot.is_empty())?) && $sel.compiler.stage > 0 {\n+                    let bindir = $builder.sysroot($sel.compiler).join(\"bin\");\n+                    t!(fs::create_dir_all(&bindir));\n+\n+                    #[allow(unused_variables)]\n+                    let tools_out = $builder\n+                        .cargo_out($sel.compiler, Mode::ToolRustc, $sel.target);\n+\n+                    $(for add_bin in $add_bins_to_sysroot {\n+                        let bin_source = tools_out.join(exe(add_bin, $sel.target));\n+                        let bin_destination = bindir.join(exe(add_bin, $sel.compiler.host));\n+                        $builder.copy(&bin_source, &bin_destination);\n+                    })?\n+\n+                    let tool = bindir.join(exe($tool_name, $sel.compiler.host));\n+                    Some(tool)\n+                } else {\n+                    Some(tool)\n+                }\n             }\n         }\n         )+\n@@ -814,15 +835,15 @@ macro_rules! tool_extended {\n tool_extended!((self, builder),\n     Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true;\n     CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true;\n-    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true;\n-    Miri, \"src/tools/miri\", \"miri\", stable=false;\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true;\n+    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, add_bins_to_sysroot = [\"clippy-driver\", \"cargo-clippy\"];\n+    Miri, \"src/tools/miri\", \"miri\", stable=false, add_bins_to_sysroot = [\"miri\"];\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true, add_bins_to_sysroot = [\"cargo-miri\"];\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n     Rls, \"src/tools/rls\", \"rls\", stable=true, tool_std=true;\n     RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, tool_std=true;\n-    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true;\n+    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, add_bins_to_sysroot = [\"rustfmt\", \"cargo-fmt\"];\n );\n \n impl<'a> Builder<'a> {"}]}