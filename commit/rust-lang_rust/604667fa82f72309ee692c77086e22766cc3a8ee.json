{"sha": "604667fa82f72309ee692c77086e22766cc3a8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDY2N2ZhODJmNzIzMDllZTY5MmM3NzA4NmUyMjc2NmNjM2E4ZWU=", "commit": {"author": {"name": "Daniel Rosenwasser", "email": "DanielRosenwasser@gmail.com", "date": "2013-09-17T02:38:53Z"}, "committer": {"name": "Daniel Rosenwasser", "email": "DanielRosenwasser@gmail.com", "date": "2013-09-18T03:52:29Z"}, "message": "Added support for a `\\0` escape sequence.\n\nThis commit adds support for `\\0` escapes in character and string literals.\n\nSince `\\0` is equivalent to `\\x00`, this is a direct translation to the latter\nescape sequence. Future builds will be able to compile using `\\0` directly.\n\nAlso updated the grammar specification and added a test for NUL characters.", "tree": {"sha": "e8b95da46456c3deba9eb584a45d891ec8b38f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b95da46456c3deba9eb584a45d891ec8b38f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604667fa82f72309ee692c77086e22766cc3a8ee", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604667fa82f72309ee692c77086e22766cc3a8ee", "html_url": "https://github.com/rust-lang/rust/commit/604667fa82f72309ee692c77086e22766cc3a8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604667fa82f72309ee692c77086e22766cc3a8ee/comments", "author": {"login": "DanielRosenwasser", "id": 972891, "node_id": "MDQ6VXNlcjk3Mjg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/972891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielRosenwasser", "html_url": "https://github.com/DanielRosenwasser", "followers_url": "https://api.github.com/users/DanielRosenwasser/followers", "following_url": "https://api.github.com/users/DanielRosenwasser/following{/other_user}", "gists_url": "https://api.github.com/users/DanielRosenwasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielRosenwasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielRosenwasser/subscriptions", "organizations_url": "https://api.github.com/users/DanielRosenwasser/orgs", "repos_url": "https://api.github.com/users/DanielRosenwasser/repos", "events_url": "https://api.github.com/users/DanielRosenwasser/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielRosenwasser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DanielRosenwasser", "id": 972891, "node_id": "MDQ6VXNlcjk3Mjg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/972891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielRosenwasser", "html_url": "https://github.com/DanielRosenwasser", "followers_url": "https://api.github.com/users/DanielRosenwasser/followers", "following_url": "https://api.github.com/users/DanielRosenwasser/following{/other_user}", "gists_url": "https://api.github.com/users/DanielRosenwasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielRosenwasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielRosenwasser/subscriptions", "organizations_url": "https://api.github.com/users/DanielRosenwasser/orgs", "repos_url": "https://api.github.com/users/DanielRosenwasser/repos", "events_url": "https://api.github.com/users/DanielRosenwasser/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielRosenwasser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc3a97698d393e16c9519a9f42bb72de167a217", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc3a97698d393e16c9519a9f42bb72de167a217", "html_url": "https://github.com/rust-lang/rust/commit/4dc3a97698d393e16c9519a9f42bb72de167a217"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "d10238c1483377c382c6af22122418ad39853803", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604667fa82f72309ee692c77086e22766cc3a8ee/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/604667fa82f72309ee692c77086e22766cc3a8ee/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=604667fa82f72309ee692c77086e22766cc3a8ee", "patch": "@@ -248,7 +248,7 @@ string_body : non_double_quote\n             | '\\x5c' [ '\\x22' | common_escape ] ;\n \n common_escape : '\\x5c'\n-              | 'n' | 'r' | 't'\n+              | 'n' | 'r' | 't' | '0'\n               | 'x' hex_digit 2\n               | 'u' hex_digit 4\n               | 'U' hex_digit 8 ;"}, {"sha": "0bc9e6192743654c0d1a912d65339951159ad9e7", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604667fa82f72309ee692c77086e22766cc3a8ee/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604667fa82f72309ee692c77086e22766cc3a8ee/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=604667fa82f72309ee692c77086e22766cc3a8ee", "patch": "@@ -699,6 +699,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n               '\\\\' => { c2 = '\\\\'; }\n               '\\'' => { c2 = '\\''; }\n               '\"' => { c2 = '\"'; }\n+              '0' => { c2 = '\\x00'; }\n               'x' => { c2 = scan_numeric_escape(rdr, 2u); }\n               'u' => { c2 = scan_numeric_escape(rdr, 4u); }\n               'U' => { c2 = scan_numeric_escape(rdr, 8u); }\n@@ -738,6 +739,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n                   '\\'' => accum_str.push_char('\\''),\n                   '\"' => accum_str.push_char('\"'),\n                   '\\n' => consume_whitespace(rdr),\n+                  '0' => accum_str.push_char('\\x00'),\n                   'x' => {\n                     accum_str.push_char(scan_numeric_escape(rdr, 2u));\n                   }"}, {"sha": "2a301d0b0fd9e517bc6d818bd2ab230e4449c86d", "filename": "src/test/run-pass/nul-characters.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/604667fa82f72309ee692c77086e22766cc3a8ee/src%2Ftest%2Frun-pass%2Fnul-characters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604667fa82f72309ee692c77086e22766cc3a8ee/src%2Ftest%2Frun-pass%2Fnul-characters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnul-characters.rs?ref=604667fa82f72309ee692c77086e22766cc3a8ee", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main()\n+{\n+    let all_nuls1 = \"\\0\\x00\\u0000\\U00000000\";\n+    let all_nuls2 = \"\\U00000000\\u0000\\x00\\0\";\n+    let all_nuls3 = \"\\u0000\\U00000000\\x00\\0\";\n+    let all_nuls4 = \"\\x00\\u0000\\0\\U00000000\";\n+\n+    // sizes for two should suffice\n+    assert_eq!(all_nuls1.len(), 4); \n+    assert_eq!(all_nuls2.len(), 4);\n+\n+    // string equality should pass between the strings\n+    assert_eq!(all_nuls1, all_nuls2);\n+    assert_eq!(all_nuls2, all_nuls3);\n+    assert_eq!(all_nuls3, all_nuls4);\n+    \n+    // all extracted characters in all_nuls are equivalent to each other\n+    for c1 in all_nuls1.iter()\n+    {\n+        for c2 in all_nuls1.iter()\n+        {\n+            assert_eq!(c1,c2);\n+        }\n+    }\n+    \n+    // testing equality between explicit character literals\n+    assert_eq!('\\0', '\\x00');\n+    assert_eq!('\\u0000', '\\x00');\n+    assert_eq!('\\u0000', '\\U00000000');\n+\n+    // NUL characters should make a difference\n+    assert!(\"Hello World\" != \"Hello \\0World\");\n+    assert!(\"Hello World\" != \"Hello World\\0\");\n+}"}]}