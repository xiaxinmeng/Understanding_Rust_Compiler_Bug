{"sha": "fd629c0cde26d727fbc19580455a4efd04a84828", "node_id": "C_kwDOAAsO6NoAKGZkNjI5YzBjZGUyNmQ3MjdmYmMxOTU4MDQ1NWE0ZWZkMDRhODQ4Mjg", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-09T13:34:16Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-26T23:11:58Z"}, "message": "check  method", "tree": {"sha": "c2ce2350710d35fdb302b2f777d71d05ef87944f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ce2350710d35fdb302b2f777d71d05ef87944f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd629c0cde26d727fbc19580455a4efd04a84828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd629c0cde26d727fbc19580455a4efd04a84828", "html_url": "https://github.com/rust-lang/rust/commit/fd629c0cde26d727fbc19580455a4efd04a84828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd629c0cde26d727fbc19580455a4efd04a84828/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3953c530f4b2cfbe00864ae824fe4a543066a7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3953c530f4b2cfbe00864ae824fe4a543066a7f4", "html_url": "https://github.com/rust-lang/rust/commit/3953c530f4b2cfbe00864ae824fe4a543066a7f4"}], "stats": {"total": 115, "additions": 98, "deletions": 17}, "files": [{"sha": "b6b6dc572c1e00dbbf0b3aea98fcd5d2df1296cc", "filename": "clippy_lints/src/use_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd629c0cde26d727fbc19580455a4efd04a84828/clippy_lints%2Fsrc%2Fuse_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd629c0cde26d727fbc19580455a4efd04a84828/clippy_lints%2Fsrc%2Fuse_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_retain.rs?ref=fd629c0cde26d727fbc19580455a4efd04a84828", "patch": "@@ -102,7 +102,7 @@ fn check_iter(\n     if_chain! {\n         if let hir::ExprKind::MethodCall(_, [filter_expr], _) = &target_expr.kind;\n         if let Some(copied_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id);\n-        if match_def_path(cx, copied_def_id, &paths::CORE_ITER_COPIED);\n+        if match_def_path(cx, copied_def_id, &paths::CORE_ITER_COPIED) || match_def_path(cx, copied_def_id, &paths::CORE_ITER_CLONED);\n \n         if let hir::ExprKind::MethodCall(_, [iter_expr, _], _) = &filter_expr.kind;\n         if let Some(filter_def_id) = cx.typeck_results().type_dependent_def_id(filter_expr.hir_id);"}, {"sha": "a2d5279e397cb3af677e39b893b8937252ac9f93", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd629c0cde26d727fbc19580455a4efd04a84828/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd629c0cde26d727fbc19580455a4efd04a84828/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=fd629c0cde26d727fbc19580455a4efd04a84828", "patch": "@@ -25,6 +25,7 @@ pub const BTREESET_ITER: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"B\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CORE_ITER_COLLECT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"collect\"];\n+pub const CORE_ITER_CLONED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"cloned\"];\n pub const CORE_ITER_COPIED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"copied\"];\n pub const CORE_ITER_FILTER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"filter\"];\n pub const CORE_ITER_INTO_ITER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\", \"into_iter\"];"}, {"sha": "0c80d0e204ad6bc15a561839fb4092efa1633481", "filename": "tests/ui/use_retain.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.fixed?ref=fd629c0cde26d727fbc19580455a4efd04a84828", "patch": "@@ -25,10 +25,12 @@ fn binary_heap_retain() {\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();\n     heap = heap.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    heap = heap.iter().filter(|&x| x % 2 == 0).cloned().collect();\n \n     // Do not lint, because type conversion is performed\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect::<BinaryHeap<i8>>();\n     heap = heap.iter().filter(|&x| x % 2 == 0).copied().collect::<BinaryHeap<i8>>();\n+    heap = heap.iter().filter(|&x| x % 2 == 0).cloned().collect::<BinaryHeap<i8>>();\n \n     // Do not lint, because this expression is not assign.\n     let mut bar: BinaryHeap<i8> = heap.iter().filter(|&x| x % 2 == 0).copied().collect();\n@@ -65,6 +67,7 @@ fn btree_set_retain() {\n     // Do lint.\n     btree_set.retain(|x| x % 2 == 0);\n     btree_set.retain(|x| x % 2 == 0);\n+    btree_set.retain(|x| x % 2 == 0);\n \n     // Do not lint, because type conversion is performed\n     btree_set = btree_set\n@@ -73,6 +76,12 @@ fn btree_set_retain() {\n         .copied()\n         .collect::<BTreeSet<i8>>();\n \n+    btree_set = btree_set\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<BTreeSet<i8>>();\n+\n     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect::<BTreeSet<i8>>();\n \n     // Do not lint, because this expression is not assign.\n@@ -81,6 +90,7 @@ fn btree_set_retain() {\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n@@ -109,6 +119,7 @@ fn hash_set_retain() {\n     // Do lint.\n     hash_set.retain(|x| x % 2 == 0);\n     hash_set.retain(|x| x % 2 == 0);\n+    hash_set.retain(|x| x % 2 == 0);\n \n     // Do not lint, because type conversion is performed\n     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect::<HashSet<i8>>();\n@@ -118,12 +129,19 @@ fn hash_set_retain() {\n         .copied()\n         .collect::<HashSet<i8>>();\n \n+    hash_set = hash_set\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<HashSet<i8>>();\n+\n     // Do not lint, because this expression is not assign.\n     let mut bar: HashSet<i8> = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n     let mut foobar: HashSet<i8> = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|&x| x % 2 == 0).collect();\n }\n \n@@ -144,17 +162,20 @@ fn vec_retain() {\n     // Do lint.\n     vec.retain(|x| x % 2 == 0);\n     vec.retain(|x| x % 2 == 0);\n+    vec.retain(|x| x % 2 == 0);\n \n     // Do not lint, because type conversion is performed\n     vec = vec.into_iter().filter(|x| x % 2 == 0).collect::<Vec<i8>>();\n     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect::<Vec<i8>>();\n+    vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect::<Vec<i8>>();\n \n     // Do not lint, because this expression is not assign.\n     let mut bar: Vec<i8> = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n     let mut foobar: Vec<i8> = vec.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n@@ -165,13 +186,19 @@ fn vec_queue_retain() {\n     // Do lint.\n     vec_deque.retain(|x| x % 2 == 0);\n     vec_deque.retain(|x| x % 2 == 0);\n+    vec_deque.retain(|x| x % 2 == 0);\n \n     // Do not lint, because type conversion is performed\n     vec_deque = vec_deque\n         .iter()\n         .filter(|&x| x % 2 == 0)\n         .copied()\n         .collect::<VecDeque<i8>>();\n+    vec_deque = vec_deque\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<VecDeque<i8>>();\n     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect::<VecDeque<i8>>();\n \n     // Do not lint, because this expression is not assign.\n@@ -180,5 +207,6 @@ fn vec_queue_retain() {\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }"}, {"sha": "08c184486f95b4eb80dacded8ab6c25657ef9c24", "filename": "tests/ui/use_retain.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.rs?ref=fd629c0cde26d727fbc19580455a4efd04a84828", "patch": "@@ -25,10 +25,12 @@ fn binary_heap_retain() {\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();\n     heap = heap.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    heap = heap.iter().filter(|&x| x % 2 == 0).cloned().collect();\n \n     // Do not lint, because type conversion is performed\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect::<BinaryHeap<i8>>();\n     heap = heap.iter().filter(|&x| x % 2 == 0).copied().collect::<BinaryHeap<i8>>();\n+    heap = heap.iter().filter(|&x| x % 2 == 0).cloned().collect::<BinaryHeap<i8>>();\n \n     // Do not lint, because this expression is not assign.\n     let mut bar: BinaryHeap<i8> = heap.iter().filter(|&x| x % 2 == 0).copied().collect();\n@@ -67,6 +69,7 @@ fn btree_set_retain() {\n \n     // Do lint.\n     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    btree_set = btree_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because type conversion is performed\n@@ -76,6 +79,12 @@ fn btree_set_retain() {\n         .copied()\n         .collect::<BTreeSet<i8>>();\n \n+    btree_set = btree_set\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<BTreeSet<i8>>();\n+\n     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect::<BTreeSet<i8>>();\n \n     // Do not lint, because this expression is not assign.\n@@ -84,6 +93,7 @@ fn btree_set_retain() {\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n@@ -115,6 +125,7 @@ fn hash_set_retain() {\n     // Do lint.\n     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    hash_set = hash_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n \n     // Do not lint, because type conversion is performed\n     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect::<HashSet<i8>>();\n@@ -124,12 +135,19 @@ fn hash_set_retain() {\n         .copied()\n         .collect::<HashSet<i8>>();\n \n+    hash_set = hash_set\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<HashSet<i8>>();\n+\n     // Do not lint, because this expression is not assign.\n     let mut bar: HashSet<i8> = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n     let mut foobar: HashSet<i8> = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|&x| x % 2 == 0).collect();\n }\n \n@@ -149,18 +167,21 @@ fn vec_retain() {\n     let mut vec = vec![0, 1, 2];\n     // Do lint.\n     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     vec = vec.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because type conversion is performed\n     vec = vec.into_iter().filter(|x| x % 2 == 0).collect::<Vec<i8>>();\n     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect::<Vec<i8>>();\n+    vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect::<Vec<i8>>();\n \n     // Do not lint, because this expression is not assign.\n     let mut bar: Vec<i8> = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n     let mut foobar: Vec<i8> = vec.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n@@ -170,6 +191,7 @@ fn vec_queue_retain() {\n \n     // Do lint.\n     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect();\n \n     // Do not lint, because type conversion is performed\n@@ -178,6 +200,11 @@ fn vec_queue_retain() {\n         .filter(|&x| x % 2 == 0)\n         .copied()\n         .collect::<VecDeque<i8>>();\n+    vec_deque = vec_deque\n+        .iter()\n+        .filter(|&x| x % 2 == 0)\n+        .cloned()\n+        .collect::<VecDeque<i8>>();\n     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect::<VecDeque<i8>>();\n \n     // Do not lint, because this expression is not assign.\n@@ -186,5 +213,6 @@ fn vec_queue_retain() {\n \n     // Do not lint, because it is an assignment to a different variable.\n     bar = foobar.iter().filter(|&x| x % 2 == 0).copied().collect();\n+    bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }"}, {"sha": "e29d40a2e39ea923266e6b41fc812da6ef1d4c98", "filename": "tests/ui/use_retain.stderr", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd629c0cde26d727fbc19580455a4efd04a84828/tests%2Fui%2Fuse_retain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.stderr?ref=fd629c0cde26d727fbc19580455a4efd04a84828", "patch": "@@ -1,19 +1,19 @@\n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:45:5\n+  --> $DIR/use_retain.rs:47:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|k, _| k % 2 == 0)`\n    |\n    = note: `-D clippy::use-retain` implied by `-D warnings`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:46:5\n+  --> $DIR/use_retain.rs:48:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:47:5\n+  --> $DIR/use_retain.rs:49:5\n    |\n LL | /     btree_map = btree_map\n LL | |         .into_iter()\n@@ -22,31 +22,37 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `btree_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:69:5\n+  --> $DIR/use_retain.rs:71:5\n    |\n LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:70:5\n+  --> $DIR/use_retain.rs:72:5\n+   |\n+LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n+\n+error: this expression can be written more simply using `.retain()`\n+  --> $DIR/use_retain.rs:73:5\n    |\n LL |     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:93:5\n+  --> $DIR/use_retain.rs:103:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|k, _| k % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:94:5\n+  --> $DIR/use_retain.rs:104:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:95:5\n+  --> $DIR/use_retain.rs:105:5\n    |\n LL | /     hash_map = hash_map\n LL | |         .into_iter()\n@@ -55,46 +61,64 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `hash_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:116:5\n+  --> $DIR/use_retain.rs:126:5\n    |\n LL |     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:117:5\n+  --> $DIR/use_retain.rs:127:5\n    |\n LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:139:5\n+  --> $DIR/use_retain.rs:128:5\n+   |\n+LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n+\n+error: this expression can be written more simply using `.retain()`\n+  --> $DIR/use_retain.rs:157:5\n    |\n LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `s.retain(|c| c != 'o')`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:151:5\n+  --> $DIR/use_retain.rs:169:5\n    |\n LL |     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:152:5\n+  --> $DIR/use_retain.rs:170:5\n+   |\n+LL |     vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n+\n+error: this expression can be written more simply using `.retain()`\n+  --> $DIR/use_retain.rs:171:5\n    |\n LL |     vec = vec.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:172:5\n+  --> $DIR/use_retain.rs:193:5\n    |\n LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:173:5\n+  --> $DIR/use_retain.rs:194:5\n+   |\n+LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).cloned().collect();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n+\n+error: this expression can be written more simply using `.retain()`\n+  --> $DIR/use_retain.rs:195:5\n    |\n LL |     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 19 previous errors\n "}]}