{"sha": "28794e956e2c344094d0dab1f1551eac9cb2f6d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Nzk0ZTk1NmUyYzM0NDA5NGQwZGFiMWYxNTUxZWFjOWNiMmY2ZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T15:37:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T15:37:24Z"}, "message": "Auto merge of #6523 - brightly-salty:missing-panic-doc, r=flip1995\n\nAdd new lint \"missing_panics_doc\"\n\nfixes #1974\nchangelog: Added the \"missing_panics_doc\" lint which lints when public functions that may panic are missing \"# Panics\" in their doc comment", "tree": {"sha": "6b66300b6471c6cbacd87cdbe82e33a42d557be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b66300b6471c6cbacd87cdbe82e33a42d557be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28794e956e2c344094d0dab1f1551eac9cb2f6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28794e956e2c344094d0dab1f1551eac9cb2f6d6", "html_url": "https://github.com/rust-lang/rust/commit/28794e956e2c344094d0dab1f1551eac9cb2f6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28794e956e2c344094d0dab1f1551eac9cb2f6d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f870876d925b5dd115c9d792783dc6208e33d913", "url": "https://api.github.com/repos/rust-lang/rust/commits/f870876d925b5dd115c9d792783dc6208e33d913", "html_url": "https://github.com/rust-lang/rust/commit/f870876d925b5dd115c9d792783dc6208e33d913"}, {"sha": "bde667af7e7d512978daff3bc2b540bb913bd6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde667af7e7d512978daff3bc2b540bb913bd6a1", "html_url": "https://github.com/rust-lang/rust/commit/bde667af7e7d512978daff3bc2b540bb913bd6a1"}], "stats": {"total": 384, "additions": 346, "deletions": 38}, "files": [{"sha": "c1032204a22cb8b618f4609fdd713acd64c94ec8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -2079,6 +2079,7 @@ Released 2018-09-13\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n+[`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals"}, {"sha": "2a869e9d4491b6805a332495fd753b886a1c821e", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -24,6 +24,9 @@ static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::ne\n     fs::metadata(path).ok()?.modified().ok()\n });\n \n+/// # Panics\n+///\n+/// Panics if the path to a test file is broken\n pub fn bless(ignore_timestamp: bool) {\n     let test_suite_dirs = [\n         clippy_project_root().join(\"tests\").join(\"ui\"),"}, {"sha": "01d1fc9211a94fc2576f26786df87e64485824df", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -236,6 +236,10 @@ pub struct FileChange {\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n+///\n+/// # Panics\n+///\n+/// Panics if the path could not read or then written\n pub fn replace_region_in_file<F>(\n     path: &Path,\n     start: &str,\n@@ -283,6 +287,10 @@ where\n ///     .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n+///\n+/// # Panics\n+///\n+/// Panics if start or end is not valid regex\n pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n where\n     F: FnOnce() -> Vec<String>,\n@@ -329,6 +337,11 @@ where\n }\n \n /// Returns the path to the Clippy project directory\n+///\n+/// # Panics\n+///\n+/// Panics if the current directory could not be retrieved, there was an error reading any of the\n+/// Cargo.toml files or ancestor directory is the clippy root directory\n #[must_use]\n pub fn clippy_project_root() -> PathBuf {\n     let current_dir = std::env::current_dir().unwrap();"}, {"sha": "a3c329b578b2050d411c9ee0d010354a5c176699", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -8,6 +8,9 @@ use std::path::{Path, PathBuf};\n // This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n+/// # Panics\n+///\n+/// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n pub fn run(rustc_path: Option<&str>) {\n     // we can unwrap here because the arg is required by clap\n     let rustc_path = PathBuf::from(rustc_path.unwrap());"}, {"sha": "faa94859601e3a3e010af89a223956caba8b520a", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -4,6 +4,9 @@ use std::process::Command;\n use std::thread;\n use std::time::{Duration, SystemTime};\n \n+/// # Panics\n+///\n+/// Panics if the python commands could not be spawned\n pub fn run(port: u16, lint: Option<&str>) -> ! {\n     let mut url = Some(match lint {\n         None => format!(\"http://localhost:{}\", port),"}, {"sha": "b3e3635c1c16f70c25cdfbc36cdcda4337d3c102", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 120, "deletions": 5, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n+use crate::utils::{\n+    implements_trait, is_entrypoint_fn, is_type_diagnostic_item, match_panic_def_id, method_chain_args, return_ty,\n+    span_lint, span_lint_and_note,\n+};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{Async, AttrKind, Attribute, FnRetTy, ItemKind};\n@@ -8,7 +11,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n use rustc_errors::Handler;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -122,6 +128,37 @@ declare_clippy_lint! {\n     \"`pub fn` returns `Result` without `# Errors` in doc comment\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// may panic and warns if there is no `# Panics` section.\n+    ///\n+    /// **Why is this bad?** Documenting the scenarios in which panicking occurs\n+    /// can help callers who do not want to panic to avoid those situations.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples:**\n+    ///\n+    /// Since the following function may panic it has a `# Panics` section in\n+    /// its doc comment:\n+    ///\n+    /// ```rust\n+    /// /// # Panics\n+    /// ///\n+    /// /// Will panic if y is 0\n+    /// pub fn divide_by(x: i32, y: i32) -> i32 {\n+    ///     if y == 0 {\n+    ///         panic!(\"Cannot divide by 0\")\n+    ///     } else {\n+    ///         x / y\n+    ///     }\n+    /// }\n+    /// ```\n+    pub MISSING_PANICS_DOC,\n+    pedantic,\n+    \"`pub fn` may panic without `# Panics` in doc comment\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `fn main() { .. }` in doctests\n     ///\n@@ -166,7 +203,9 @@ impl DocMarkdown {\n     }\n }\n \n-impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, NEEDLESS_DOCTEST_MAIN]);\n+impl_lint_pass!(DocMarkdown =>\n+    [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, MISSING_PANICS_DOC, NEEDLESS_DOCTEST_MAIN]\n+);\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n@@ -180,7 +219,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+                    let body = cx.tcx.hir().body(body_id);\n+                    let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+                    let mut fpu = FindPanicUnwrap {\n+                        cx,\n+                        typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                        panic_span: None,\n+                    };\n+                    fpu.visit_expr(&body.value);\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(ref impl_) => {\n@@ -200,7 +247,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -211,7 +258,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             return;\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+            let body = cx.tcx.hir().body(body_id);\n+            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+            let mut fpu = FindPanicUnwrap {\n+                cx,\n+                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                panic_span: None,\n+            };\n+            fpu.visit_expr(&body.value);\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }\n@@ -223,6 +278,7 @@ fn lint_for_missing_headers<'tcx>(\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n+    panic_span: Option<Span>,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {\n         return; // Private functions do not require doc comments\n@@ -235,6 +291,16 @@ fn lint_for_missing_headers<'tcx>(\n             \"unsafe function's docs miss `# Safety` section\",\n         );\n     }\n+    if !headers.panics && panic_span.is_some() {\n+        span_lint_and_note(\n+            cx,\n+            MISSING_PANICS_DOC,\n+            span,\n+            \"docs for function which may panic missing `# Panics` section\",\n+            panic_span,\n+            \"first possible panic found here\",\n+        );\n+    }\n     if !headers.errors {\n         if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             span_lint(\n@@ -321,6 +387,7 @@ pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span:\n struct DocHeaders {\n     safety: bool,\n     errors: bool,\n+    panics: bool,\n }\n \n fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n@@ -338,6 +405,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n             return DocHeaders {\n                 safety: true,\n                 errors: true,\n+                panics: true,\n             };\n         }\n     }\n@@ -353,6 +421,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n         return DocHeaders {\n             safety: false,\n             errors: false,\n+            panics: false,\n         };\n     }\n \n@@ -394,6 +463,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     let mut headers = DocHeaders {\n         safety: false,\n         errors: false,\n+        panics: false,\n     };\n     let mut in_code = false;\n     let mut in_link = None;\n@@ -439,6 +509,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 }\n                 headers.safety |= in_heading && text.trim() == \"Safety\";\n                 headers.errors |= in_heading && text.trim() == \"Errors\";\n+                headers.panics |= in_heading && text.trim() == \"Panics\";\n                 let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                     Ok(o) => o,\n                     Err(e) => e - 1,\n@@ -607,3 +678,47 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n         );\n     }\n }\n+\n+struct FindPanicUnwrap<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    panic_span: Option<Span>,\n+    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.panic_span.is_some() {\n+            return;\n+        }\n+\n+        // check for `begin_panic`\n+        if_chain! {\n+            if let ExprKind::Call(ref func_expr, _) = expr.kind;\n+            if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.kind;\n+            if let Some(path_def_id) = path.res.opt_def_id();\n+            if match_panic_def_id(self.cx, path_def_id);\n+            then {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // check for `unwrap`\n+        if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n+            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.cx, reciever_ty, sym::option_type)\n+                || is_type_diagnostic_item(self.cx, reciever_ty, sym::result_type)\n+            {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "5a40c00bd673a6223ed7a3e2508a0f87fdbe591b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -592,6 +592,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n+        &doc::MISSING_PANICS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n@@ -1317,6 +1318,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n+        LintId::of(&doc::MISSING_PANICS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),\n         LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),\n         LintId::of(&enum_variants::PUB_ENUM_VARIANT_NAMES),"}, {"sha": "269be217c2d875bf3db450a39940705666154459", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -110,7 +110,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n pub fn span_lint_and_note<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n-    span: Span,\n+    span: impl Into<MultiSpan>,\n     msg: &str,\n     note_span: Option<Span>,\n     note: &str,"}, {"sha": "2b793589049ba7b7d16dffb9156115d2cdd52ced", "filename": "mini-macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/mini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/mini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-macro%2Fsrc%2Flib.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -7,6 +7,9 @@ extern crate proc_macro;\n use proc_macro::{quote, TokenStream};\n \n #[proc_macro_derive(ClippyMiniMacroTest)]\n+/// # Panics\n+///\n+/// Panics if the macro derivation fails\n pub fn mini_macro(_: TokenStream) -> TokenStream {\n     quote!(\n         #[allow(unused)]"}, {"sha": "7ef932f367b101a61e47375f0b580482a42ab4e2", "filename": "tests/ui/doc_panics.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fdoc_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fdoc_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_panics.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -0,0 +1,95 @@\n+#![warn(clippy::missing_panics_doc)]\n+#![allow(clippy::option_map_unit_fn)]\n+\n+fn main() {}\n+\n+/// This needs to be documented\n+pub fn unwrap() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This needs to be documented\n+pub fn panic() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This needs to be documented\n+pub fn todo() {\n+    todo!()\n+}\n+\n+/// This needs to be documented\n+pub fn inner_body(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `result` if an error\n+pub fn unwrap_documented() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics just because\n+pub fn panic_documented() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `opt` is Just(10)\n+pub fn inner_body_documented(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// We still need to do this part\n+pub fn todo_documented() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn unwrap_private() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is okay because it is private\n+fn panic_private() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is okay because it is private\n+fn todo_private() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn inner_body_private(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}"}, {"sha": "c0c4e9e4fa7eec6d682eddd4f7b214cfeded6712", "filename": "tests/ui/doc_panics.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fdoc_panics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fdoc_panics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_panics.stderr?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -0,0 +1,67 @@\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:7:1\n+   |\n+LL | / pub fn unwrap() {\n+LL | |     let result = Err(\"Hi\");\n+LL | |     result.unwrap()\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:9:5\n+   |\n+LL |     result.unwrap()\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:13:1\n+   |\n+LL | / pub fn panic() {\n+LL | |     panic!(\"This function panics\")\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:14:5\n+   |\n+LL |     panic!(\"This function panics\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:18:1\n+   |\n+LL | / pub fn todo() {\n+LL | |     todo!()\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:19:5\n+   |\n+LL |     todo!()\n+   |     ^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:23:1\n+   |\n+LL | / pub fn inner_body(opt: Option<u32>) {\n+LL | |     opt.map(|x| {\n+LL | |         if x == 10 {\n+LL | |             panic!()\n+LL | |         }\n+LL | |     });\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:26:13\n+   |\n+LL |             panic!()\n+   |             ^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a7f8f54f2be04cb98667127b87d3db75c50e1301", "filename": "tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "69a3390b03b0b2cac0988e1f35dc1796e0bcd41d", "filename": "tests/ui/should_impl_trait/method_list_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "86c63946516ce84453725eff5a31b58cb1ac246c", "filename": "tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -1,5 +1,5 @@\n error: method `add` can be confused for the standard trait method `std::ops::Add::add`\n-  --> $DIR/method_list_1.rs:25:5\n+  --> $DIR/method_list_1.rs:26:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n-  --> $DIR/method_list_1.rs:29:5\n+  --> $DIR/method_list_1.rs:30:5\n    |\n LL | /     pub fn as_mut(&mut self) -> &mut T {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsMut` or choosing a less ambiguous method name\n \n error: method `as_ref` can be confused for the standard trait method `std::convert::AsRef::as_ref`\n-  --> $DIR/method_list_1.rs:33:5\n+  --> $DIR/method_list_1.rs:34:5\n    |\n LL | /     pub fn as_ref(&self) -> &T {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsRef` or choosing a less ambiguous method name\n \n error: method `bitand` can be confused for the standard trait method `std::ops::BitAnd::bitand`\n-  --> $DIR/method_list_1.rs:37:5\n+  --> $DIR/method_list_1.rs:38:5\n    |\n LL | /     pub fn bitand(self, rhs: T) -> T {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitAnd` or choosing a less ambiguous method name\n \n error: method `bitor` can be confused for the standard trait method `std::ops::BitOr::bitor`\n-  --> $DIR/method_list_1.rs:41:5\n+  --> $DIR/method_list_1.rs:42:5\n    |\n LL | /     pub fn bitor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitOr` or choosing a less ambiguous method name\n \n error: method `bitxor` can be confused for the standard trait method `std::ops::BitXor::bitxor`\n-  --> $DIR/method_list_1.rs:45:5\n+  --> $DIR/method_list_1.rs:46:5\n    |\n LL | /     pub fn bitxor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitXor` or choosing a less ambiguous method name\n \n error: method `borrow` can be confused for the standard trait method `std::borrow::Borrow::borrow`\n-  --> $DIR/method_list_1.rs:49:5\n+  --> $DIR/method_list_1.rs:50:5\n    |\n LL | /     pub fn borrow(&self) -> &str {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::Borrow` or choosing a less ambiguous method name\n \n error: method `borrow_mut` can be confused for the standard trait method `std::borrow::BorrowMut::borrow_mut`\n-  --> $DIR/method_list_1.rs:53:5\n+  --> $DIR/method_list_1.rs:54:5\n    |\n LL | /     pub fn borrow_mut(&mut self) -> &mut str {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::BorrowMut` or choosing a less ambiguous method name\n \n error: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\n-  --> $DIR/method_list_1.rs:57:5\n+  --> $DIR/method_list_1.rs:58:5\n    |\n LL | /     pub fn clone(&self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\n \n error: method `cmp` can be confused for the standard trait method `std::cmp::Ord::cmp`\n-  --> $DIR/method_list_1.rs:61:5\n+  --> $DIR/method_list_1.rs:62:5\n    |\n LL | /     pub fn cmp(&self, other: &Self) -> Self {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::Ord` or choosing a less ambiguous method name\n \n error: method `deref` can be confused for the standard trait method `std::ops::Deref::deref`\n-  --> $DIR/method_list_1.rs:69:5\n+  --> $DIR/method_list_1.rs:70:5\n    |\n LL | /     pub fn deref(&self) -> &Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Deref` or choosing a less ambiguous method name\n \n error: method `deref_mut` can be confused for the standard trait method `std::ops::DerefMut::deref_mut`\n-  --> $DIR/method_list_1.rs:73:5\n+  --> $DIR/method_list_1.rs:74:5\n    |\n LL | /     pub fn deref_mut(&mut self) -> &mut Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::DerefMut` or choosing a less ambiguous method name\n \n error: method `div` can be confused for the standard trait method `std::ops::Div::div`\n-  --> $DIR/method_list_1.rs:77:5\n+  --> $DIR/method_list_1.rs:78:5\n    |\n LL | /     pub fn div(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Div` or choosing a less ambiguous method name\n \n error: method `drop` can be confused for the standard trait method `std::ops::Drop::drop`\n-  --> $DIR/method_list_1.rs:81:5\n+  --> $DIR/method_list_1.rs:82:5\n    |\n LL | /     pub fn drop(&mut self) {\n LL | |         unimplemented!()"}, {"sha": "2cdc1a06fe689dab34e495eee9466253e7836c8d", "filename": "tests/ui/should_impl_trait/method_list_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "0142e2991081c79ae4099788ea6c85ed02535428", "filename": "tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28794e956e2c344094d0dab1f1551eac9cb2f6d6/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=28794e956e2c344094d0dab1f1551eac9cb2f6d6", "patch": "@@ -1,5 +1,5 @@\n error: method `eq` can be confused for the standard trait method `std::cmp::PartialEq::eq`\n-  --> $DIR/method_list_2.rs:26:5\n+  --> $DIR/method_list_2.rs:27:5\n    |\n LL | /     pub fn eq(&self, other: &Self) -> bool {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n-  --> $DIR/method_list_2.rs:30:5\n+  --> $DIR/method_list_2.rs:31:5\n    |\n LL | /     pub fn from_iter<T>(iter: T) -> Self {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::FromIterator` or choosing a less ambiguous method name\n \n error: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`\n-  --> $DIR/method_list_2.rs:34:5\n+  --> $DIR/method_list_2.rs:35:5\n    |\n LL | /     pub fn from_str(s: &str) -> Result<Self, Self> {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name\n \n error: method `hash` can be confused for the standard trait method `std::hash::Hash::hash`\n-  --> $DIR/method_list_2.rs:38:5\n+  --> $DIR/method_list_2.rs:39:5\n    |\n LL | /     pub fn hash(&self, state: &mut T) {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::hash::Hash` or choosing a less ambiguous method name\n \n error: method `index` can be confused for the standard trait method `std::ops::Index::index`\n-  --> $DIR/method_list_2.rs:42:5\n+  --> $DIR/method_list_2.rs:43:5\n    |\n LL | /     pub fn index(&self, index: usize) -> &Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Index` or choosing a less ambiguous method name\n \n error: method `index_mut` can be confused for the standard trait method `std::ops::IndexMut::index_mut`\n-  --> $DIR/method_list_2.rs:46:5\n+  --> $DIR/method_list_2.rs:47:5\n    |\n LL | /     pub fn index_mut(&mut self, index: usize) -> &mut Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::IndexMut` or choosing a less ambiguous method name\n \n error: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`\n-  --> $DIR/method_list_2.rs:50:5\n+  --> $DIR/method_list_2.rs:51:5\n    |\n LL | /     pub fn into_iter(self) -> Self {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::IntoIterator` or choosing a less ambiguous method name\n \n error: method `mul` can be confused for the standard trait method `std::ops::Mul::mul`\n-  --> $DIR/method_list_2.rs:54:5\n+  --> $DIR/method_list_2.rs:55:5\n    |\n LL | /     pub fn mul(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Mul` or choosing a less ambiguous method name\n \n error: method `neg` can be confused for the standard trait method `std::ops::Neg::neg`\n-  --> $DIR/method_list_2.rs:58:5\n+  --> $DIR/method_list_2.rs:59:5\n    |\n LL | /     pub fn neg(self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Neg` or choosing a less ambiguous method name\n \n error: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\n-  --> $DIR/method_list_2.rs:62:5\n+  --> $DIR/method_list_2.rs:63:5\n    |\n LL | /     pub fn next(&mut self) -> Option<Self> {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n \n error: method `not` can be confused for the standard trait method `std::ops::Not::not`\n-  --> $DIR/method_list_2.rs:66:5\n+  --> $DIR/method_list_2.rs:67:5\n    |\n LL | /     pub fn not(self) -> Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Not` or choosing a less ambiguous method name\n \n error: method `rem` can be confused for the standard trait method `std::ops::Rem::rem`\n-  --> $DIR/method_list_2.rs:70:5\n+  --> $DIR/method_list_2.rs:71:5\n    |\n LL | /     pub fn rem(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Rem` or choosing a less ambiguous method name\n \n error: method `shl` can be confused for the standard trait method `std::ops::Shl::shl`\n-  --> $DIR/method_list_2.rs:74:5\n+  --> $DIR/method_list_2.rs:75:5\n    |\n LL | /     pub fn shl(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shl` or choosing a less ambiguous method name\n \n error: method `shr` can be confused for the standard trait method `std::ops::Shr::shr`\n-  --> $DIR/method_list_2.rs:78:5\n+  --> $DIR/method_list_2.rs:79:5\n    |\n LL | /     pub fn shr(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -140,7 +140,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shr` or choosing a less ambiguous method name\n \n error: method `sub` can be confused for the standard trait method `std::ops::Sub::sub`\n-  --> $DIR/method_list_2.rs:82:5\n+  --> $DIR/method_list_2.rs:83:5\n    |\n LL | /     pub fn sub(self, rhs: Self) -> Self {\n LL | |         unimplemented!()"}]}