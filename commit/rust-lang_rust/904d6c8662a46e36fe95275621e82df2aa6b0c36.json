{"sha": "904d6c8662a46e36fe95275621e82df2aa6b0c36", "node_id": "C_kwDOAAsO6NoAKDkwNGQ2Yzg2NjJhNDZlMzZmZTk1Mjc1NjIxZTgyZGYyYWE2YjBjMzY", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-04T20:46:21Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-04T20:46:21Z"}, "message": "destroy temp at the end and avoid ICE", "tree": {"sha": "4616b499c6c3e4a3ee8b7b0cf84416b3aeccdab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4616b499c6c3e4a3ee8b7b0cf84416b3aeccdab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904d6c8662a46e36fe95275621e82df2aa6b0c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904d6c8662a46e36fe95275621e82df2aa6b0c36", "html_url": "https://github.com/rust-lang/rust/commit/904d6c8662a46e36fe95275621e82df2aa6b0c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904d6c8662a46e36fe95275621e82df2aa6b0c36/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105e90f8365e37df5c79b1a69db2f43ea420740f", "url": "https://api.github.com/repos/rust-lang/rust/commits/105e90f8365e37df5c79b1a69db2f43ea420740f", "html_url": "https://github.com/rust-lang/rust/commit/105e90f8365e37df5c79b1a69db2f43ea420740f"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "17e58a3bb8965e719abfa23b55a24d8791260fb9", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/904d6c8662a46e36fe95275621e82df2aa6b0c36/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904d6c8662a46e36fe95275621e82df2aa6b0c36/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=904d6c8662a46e36fe95275621e82df2aa6b0c36", "patch": "@@ -8,11 +8,15 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let mut patch = MirPatch::new(body);\n     let (basic_blocks, local_decl) = body.basic_blocks_and_local_decls_mut();\n     for (block, data) in basic_blocks.iter_enumerated_mut() {\n+        let statement_len = data.statements.len();\n         for (i, stmt) in data.statements.iter_mut().enumerate() {\n             match stmt.kind {\n                 StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n                     for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n-                        if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n+                        if p_elem == ProjectionElem::Deref\n+                            && !p_ref.projection.is_empty()\n+                            && region.is_erased()\n+                        {\n                             // The type that we are derefing\n                             let ty = p_ref.ty(local_decl, tcx).ty;\n                             let temp = patch.new_temp(ty, stmt.source_info.span);\n@@ -36,21 +40,20 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n                             // and copying derefed values which we need to create new statement\n                             let temp_place =\n                                 Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n-                            patch.add_assign(\n-                                loc,\n-                                og_place,\n-                                Rvalue::Ref(region, borrow_knd, temp_place),\n-                            );\n-\n                             let new_stmt = Statement {\n                                 source_info: stmt.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n                                     og_place,\n                                     Rvalue::Ref(region, borrow_knd, temp_place),\n                                 ))),\n                             };\n+\n                             // Replace current statement with newly created one\n                             *stmt = new_stmt;\n+\n+                            // Since our job with the temp is done it should be gone\n+                            let loc = Location { block: block, statement_index: statement_len };\n+                            patch.add_statement(loc, StatementKind::StorageDead(temp));\n                         }\n                     }\n                 }"}, {"sha": "b9b2f70518a36fbcf18e8a4a128246faae9bf0fe", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=904d6c8662a46e36fe95275621e82df2aa6b0c36", "patch": "@@ -37,19 +37,19 @@\n -         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         _6 = move (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n           StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n -         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         _7 = move (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n           _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n           StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:7:1: 7:2\n           StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:7:1: 7:2\n           StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:7:1: 7:2\n           StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:7:1: 7:2\n++         StorageDead(_6);                 // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n++         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n           return;                          // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n +     }\n + "}, {"sha": "1312f1a155639d93e51b2887ea4955cdec58b403", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=904d6c8662a46e36fe95275621e82df2aa6b0c36", "patch": "@@ -23,11 +23,11 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _7 = move (*_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "d079ba59ffc3d5ecd9ed677bb018aeb9f0ad12cd", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/904d6c8662a46e36fe95275621e82df2aa6b0c36/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=904d6c8662a46e36fe95275621e82df2aa6b0c36", "patch": "@@ -17,7 +17,7 @@ fn d(_1: &Box<T>) -> &T {\n         StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _4 = move (*_3);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}]}