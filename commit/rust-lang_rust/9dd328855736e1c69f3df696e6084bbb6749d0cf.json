{"sha": "9dd328855736e1c69f3df696e6084bbb6749d0cf", "node_id": "C_kwDOAAsO6NoAKDlkZDMyODg1NTczNmUxYzY5ZjNkZjY5NmU2MDg0YmJiNjc0OWQwY2Y", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-01T14:49:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-01T14:49:17Z"}, "message": "Rollup merge of #98585 - cuviper:covariant-thinbox, r=thomcc\n\nMake `ThinBox<T>` covariant in `T`\n\nJust like `Box<T>`, we want `ThinBox<T>` to be covariant in `T`, but the\nprojection in `WithHeader<<T as Pointee>::Metadata>` was making it\ninvariant. This is now hidden as `WithOpaqueHeader`, which we type-cast\nwhenever the real `WithHeader<H>` type is needed.\n\nFixes the problem noted in <https://github.com/rust-lang/rust/issues/92791#issuecomment-1104636249>.", "tree": {"sha": "9b0744a6a7769344d6bcad9f6ef41028b5cad4a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0744a6a7769344d6bcad9f6ef41028b5cad4a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dd328855736e1c69f3df696e6084bbb6749d0cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivwluCRBK7hj4Ov3rIwAAsH0IAHpwK/9puAicU3Zu2qcGCg0s\nihLT3l0+/Ozw+I8v+JBpBKZUbhKZHbExZXj/KewNV1NoMOXFYbOTIqs//BXsyVD2\nEmkAGmjHkt+ch2lkxAIWLj+d6HDVVdtZ/p3B5ug5lgWA8nTYVgOqHpYXxClKC7hm\npef3LfEcrCAFAXL5T3vDJi58Vdxq5RUVx93g4Gj/e1jxwkTTz1q/0BnzewBgjTcv\neZU+qSQ5d0dH4OI5tzwm7VopCqxLzNzQQHWE40C67p0V5NqJec+9HkervQanN2gm\ne1Eb8O8Ar5RjC4QaMpz0wrMigTDMns6YVplYUa3BpA9XSGTkSvzq51BjxpMyFgk=\n=FGhW\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b0744a6a7769344d6bcad9f6ef41028b5cad4a4\nparent e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46\nparent e67e1655854b8f2c94dff80f4da2e595bd1ceaa8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656686957 +0530\ncommitter GitHub <noreply@github.com> 1656686957 +0530\n\nRollup merge of #98585 - cuviper:covariant-thinbox, r=thomcc\n\nMake `ThinBox<T>` covariant in `T`\n\nJust like `Box<T>`, we want `ThinBox<T>` to be covariant in `T`, but the\nprojection in `WithHeader<<T as Pointee>::Metadata>` was making it\ninvariant. This is now hidden as `WithOpaqueHeader`, which we type-cast\nwhenever the real `WithHeader<H>` type is needed.\n\nFixes the problem noted in <https://github.com/rust-lang/rust/issues/92791#issuecomment-1104636249>.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd328855736e1c69f3df696e6084bbb6749d0cf", "html_url": "https://github.com/rust-lang/rust/commit/9dd328855736e1c69f3df696e6084bbb6749d0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dd328855736e1c69f3df696e6084bbb6749d0cf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "html_url": "https://github.com/rust-lang/rust/commit/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46"}, {"sha": "e67e1655854b8f2c94dff80f4da2e595bd1ceaa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67e1655854b8f2c94dff80f4da2e595bd1ceaa8", "html_url": "https://github.com/rust-lang/rust/commit/e67e1655854b8f2c94dff80f4da2e595bd1ceaa8"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "649ccfcaa9ed85f2b7cdd2b5e4b0b3429e6c26ad", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9dd328855736e1c69f3df696e6084bbb6749d0cf/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd328855736e1c69f3df696e6084bbb6749d0cf/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=9dd328855736e1c69f3df696e6084bbb6749d0cf", "patch": "@@ -31,7 +31,9 @@ use core::ptr::{self, NonNull};\n /// ```\n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n pub struct ThinBox<T: ?Sized> {\n-    ptr: WithHeader<<T as Pointee>::Metadata>,\n+    // This is essentially `WithHeader<<T as Pointee>::Metadata>`,\n+    // but that would be invariant in `T`, and we want covariance.\n+    ptr: WithOpaqueHeader,\n     _marker: PhantomData<T>,\n }\n \n@@ -59,7 +61,7 @@ impl<T> ThinBox<T> {\n     #[cfg(not(no_global_oom_handling))]\n     pub fn new(value: T) -> Self {\n         let meta = ptr::metadata(&value);\n-        let ptr = WithHeader::new(meta, value);\n+        let ptr = WithOpaqueHeader::new(meta, value);\n         ThinBox { ptr, _marker: PhantomData }\n     }\n }\n@@ -83,7 +85,7 @@ impl<Dyn: ?Sized> ThinBox<Dyn> {\n         T: Unsize<Dyn>,\n     {\n         let meta = ptr::metadata(&value as &Dyn);\n-        let ptr = WithHeader::new(meta, value);\n+        let ptr = WithOpaqueHeader::new(meta, value);\n         ThinBox { ptr, _marker: PhantomData }\n     }\n }\n@@ -130,7 +132,7 @@ impl<T: ?Sized> Drop for ThinBox<T> {\n         unsafe {\n             let value = self.deref_mut();\n             let value = value as *mut T;\n-            self.ptr.drop::<T>(value);\n+            self.with_header().drop::<T>(value);\n         }\n     }\n }\n@@ -140,11 +142,16 @@ impl<T: ?Sized> ThinBox<T> {\n     fn meta(&self) -> <T as Pointee>::Metadata {\n         //  Safety:\n         //  -   NonNull and valid.\n-        unsafe { *self.ptr.header() }\n+        unsafe { *self.with_header().header() }\n     }\n \n     fn data(&self) -> *mut u8 {\n-        self.ptr.value()\n+        self.with_header().value()\n+    }\n+\n+    fn with_header(&self) -> &WithHeader<<T as Pointee>::Metadata> {\n+        // SAFETY: both types are transparent to `NonNull<u8>`\n+        unsafe { &*((&self.ptr) as *const WithOpaqueHeader as *const WithHeader<_>) }\n     }\n }\n \n@@ -153,8 +160,22 @@ impl<T: ?Sized> ThinBox<T> {\n ///    metadata (`H`) are ZSTs.\n /// 2. A pointer to a valid `T` that has a header `H` directly before the\n ///    pointed-to location.\n+#[repr(transparent)]\n struct WithHeader<H>(NonNull<u8>, PhantomData<H>);\n \n+/// An opaque representation of `WithHeader<H>` to avoid the\n+/// projection invariance of `<T as Pointee>::Metadata`.\n+#[repr(transparent)]\n+struct WithOpaqueHeader(NonNull<u8>);\n+\n+impl WithOpaqueHeader {\n+    #[cfg(not(no_global_oom_handling))]\n+    fn new<H, T>(header: H, value: T) -> Self {\n+        let ptr = WithHeader::new(header, value);\n+        Self(ptr.0)\n+    }\n+}\n+\n impl<H> WithHeader<H> {\n     #[cfg(not(no_global_oom_handling))]\n     fn new<T>(header: H, value: T) -> WithHeader<H> {"}, {"sha": "368aa564f94367ed564c0c70e421d523aa7cbbdd", "filename": "library/alloc/tests/thin_box.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dd328855736e1c69f3df696e6084bbb6749d0cf/library%2Falloc%2Ftests%2Fthin_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd328855736e1c69f3df696e6084bbb6749d0cf/library%2Falloc%2Ftests%2Fthin_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fthin_box.rs?ref=9dd328855736e1c69f3df696e6084bbb6749d0cf", "patch": "@@ -26,6 +26,13 @@ fn want_thin() {\n     assert!(is_thin::<i32>());\n }\n \n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn thin_box<'new>(b: ThinBox<[&'static str]>) -> ThinBox<[&'new str]> {\n+        b\n+    }\n+}\n+\n #[track_caller]\n fn verify_aligned<T>(ptr: *const T) {\n     // Use `black_box` to attempt to obscure the fact that we're calling this"}]}