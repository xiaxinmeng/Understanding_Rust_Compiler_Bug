{"sha": "fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlODhmYzAzYzUwYmU1N2UxZGMxMmNmMzA4YzQ1ZGM5YzhkNjQ3M2E=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-29T21:31:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:34Z"}, "message": "Fix up intrinsic implementation", "tree": {"sha": "eff576f45f27f9afa4c17e7736bc83128e4a7a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff576f45f27f9afa4c17e7736bc83128e4a7a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwSoACgkQtAh+UQ6Y\nsWT5dhAApX94xiWdRb0dI9hERPHwMJRLQMyU1nV5RfCx4faN1gLN19swawR4+mQ/\nrvGe54kyI0fv4nm0NOl10JHOWe0jM0HOPEMRy9xv6dVtLE/+l5tTvt1hck4o7PVh\nvfkhtK5Di4MUha8e4jSGxjBGITKjuq1BM3fE9J7doghEMVPBeXsn36fUBpuZag2W\nfy5oAamvCcrEg3CWTQHDp5+QZOw4EajZFbQX7ANcnq1/rTBtQYCswOo4eIHLSEJB\nGR7FyUGJ0M7NwAWA8KlnZmZNrJKr4fg3EM1UYbV4Cxeb255AV+QEZwogf2teocnl\nQVTFlolA3iVtqGG0C6tpsv/lFzFjZuZvkp4I/e8oiAU5l9SPMouKAJR2iDIQ7jVp\n5Vf7/TLYFyDivoL75FkXM7eCBbT5iPz1RWKdRUouTqD2GfVXEenycVpjl0BbLmqn\nyRnDW1YMX/MvAPZOoCfizx1vYGFwO9KWpQrKOnEKUlvtDm3tGuMd7xF46RbsZc3c\n5Rp9g9nKGwmpeQCa1w2XmRHVuvWNd7l+Fg30yI5jX2OFezw4KDZ6pRfZfzgnhBEJ\nuc0YPulLhM+uHAW9IiUjXaEgqYhTOcxafIPvqDTk+8LPT5BWD2H9qj8XpyUGDyZ2\nRA/baSI7NC7z8KOamqQrLvmsMT35FS/hkqpIAaGCyYBiUJzwXb0=\n=QlQQ\n-----END PGP SIGNATURE-----", "payload": "tree eff576f45f27f9afa4c17e7736bc83128e4a7a42\nparent caf3cc1fc88430caa61a8f1ae0262c3489a6481a\nauthor Aaron Hill <aa1ronham@gmail.com> 1572384714 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503274 -0500\n\nFix up intrinsic implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "html_url": "https://github.com/rust-lang/rust/commit/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf3cc1fc88430caa61a8f1ae0262c3489a6481a", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf3cc1fc88430caa61a8f1ae0262c3489a6481a", "html_url": "https://github.com/rust-lang/rust/commit/caf3cc1fc88430caa61a8f1ae0262c3489a6481a"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "0cfe5595af5780b92c6a36ca2553ea7349de2349", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "patch": "@@ -1352,7 +1352,7 @@ extern \"rust-intrinsic\" {\n     /// Internal hook used by Miri to implement unwinding.\n     /// Perma-unstable: do not use\n     #[cfg(not(bootstrap))]\n-    pub fn miri_start_panic(data: *mut (dyn crate::any::Any + Send)) -> !;\n+    pub fn miri_start_panic(data: u128) -> !;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "3b4203c3c6d9b7b092b54228ac2fec683f15c5cb", "filename": "src/libpanic_unwind/miri.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "patch": "@@ -1,9 +1,13 @@\n+use core::any::Any;\n+use alloc::boxed::Box;\n+\n pub fn payload() -> *mut u8 {\n     core::ptr::null_mut()\n }\n \n-pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n-    core::intrinsics::miri_start_panic(Box::into_raw(data))\n+pub unsafe fn panic(data: Box<dyn Any + Send>) -> ! {\n+    let raw_val = core::mem::transmute::<_, u128>(Box::into_raw(data));\n+    core::intrinsics::miri_start_panic(raw_val)\n }\n \n pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {"}, {"sha": "9361a7c3ea452573791f46911d95d626c4c1e272", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "patch": "@@ -528,6 +528,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             _ => FnAbi::new(&bx, sig, &extra_args)\n         };\n \n+        // This should never be reachable at runtime:\n+        // We should only emit a call to this intrinsic in #[cfg(miri)] mode,\n+        // which means that we will never actually use the generate object files\n+        // (we will just be interpreting the MIR)\n+        if intrinsic == Some(\"miri_start_panic\") {\n+            bx.abort();\n+            bx.unreachable();\n+            return;\n+        }\n+\n         // Emit a panic or a no-op for `panic_if_uninhabited`.\n         if intrinsic == Some(\"panic_if_uninhabited\") {\n             let ty = instance.unwrap().substs.type_at(0);"}, {"sha": "24b589df63a77101d218ff0be5670cea95b79b24", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe88fc03c50be57e1dc12cf308c45dc9c8d6473a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fe88fc03c50be57e1dc12cf308c45dc9c8d6473a", "patch": "@@ -384,6 +384,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_unit())\n             }\n \n+            \"miri_start_panic\" => {\n+                (0, vec![tcx.types.u128], tcx.types.never)\n+            }\n+\n             ref other => {\n                 struct_span_err!(tcx.sess, it.span, E0093,\n                                  \"unrecognized intrinsic function: `{}`\","}]}