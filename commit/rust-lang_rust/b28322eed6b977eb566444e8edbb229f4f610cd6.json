{"sha": "b28322eed6b977eb566444e8edbb229f4f610cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODMyMmVlZDZiOTc3ZWI1NjY0NDRlOGVkYmIyMjlmNGY2MTBjZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-22T16:15:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-22T16:15:20Z"}, "message": "Merge #7005\n\n7005: Improve extract_module_to_file assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2a50821100048c752267530f5c7ee437dd596164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a50821100048c752267530f5c7ee437dd596164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28322eed6b977eb566444e8edbb229f4f610cd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4huYCRBK7hj4Ov3rIwAAdHIIAG5rZycInVYeyZmURsmq3O8Q\nL+tJzMTnIA4iXVGkalZ3E4hAiPleUjGP7OB4B8RhRPXgadT5jJIpdPWd1FfY1i87\npg6KclFvVfypWQOUVLoTxHpfcsrrGwUItblryeXMWfF99BKlO6bQimTUbMKjrovY\nsSGNpE7QfAQu3YKU33NRiQFiauJqF8SfvygtCHqFMiJcWpj3CwRiWp2iII5n+M0n\nGivznw98dSJeB/ci3uHbAJt6EfQjJJbsdX6YjSzsk3oBghSUSzHAgzAApHe6MJ6a\nv2/NXzUKuTyg8Q9qCYrtIVIciIwVcfN3vL8I3Vo02cL9/A6Q2lrU4z0h6GW+Hl4=\n=LDxg\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a50821100048c752267530f5c7ee437dd596164\nparent 5506933a936b52668482e1728c97661f52766936\nparent 41bc32368e907f939bffb25e73bce08ae912674c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608653720 +0000\ncommitter GitHub <noreply@github.com> 1608653720 +0000\n\nMerge #7005\n\n7005: Improve extract_module_to_file assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28322eed6b977eb566444e8edbb229f4f610cd6", "html_url": "https://github.com/rust-lang/rust/commit/b28322eed6b977eb566444e8edbb229f4f610cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28322eed6b977eb566444e8edbb229f4f610cd6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5506933a936b52668482e1728c97661f52766936", "url": "https://api.github.com/repos/rust-lang/rust/commits/5506933a936b52668482e1728c97661f52766936", "html_url": "https://github.com/rust-lang/rust/commit/5506933a936b52668482e1728c97661f52766936"}, {"sha": "41bc32368e907f939bffb25e73bce08ae912674c", "url": "https://api.github.com/repos/rust-lang/rust/commits/41bc32368e907f939bffb25e73bce08ae912674c", "html_url": "https://github.com/rust-lang/rust/commit/41bc32368e907f939bffb25e73bce08ae912674c"}], "stats": {"total": 169, "additions": 66, "deletions": 103}, "files": [{"sha": "3e67fdca2f1a3dfad90c3937f5b6c86be34cd4d6", "filename": "crates/assists/src/handlers/extract_module_to_file.rs", "status": "modified", "additions": 66, "deletions": 103, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28322eed6b977eb566444e8edbb229f4f610cd6/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs?ref=b28322eed6b977eb566444e8edbb229f4f610cd6", "patch": "@@ -1,5 +1,5 @@\n use ast::edit::IndentLevel;\n-use ide_db::base_db::{AnchoredPathBuf, SourceDatabaseExt};\n+use ide_db::base_db::AnchoredPathBuf;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, NameOwner},\n     AstNode,\n@@ -21,43 +21,44 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // mod foo;\n // ```\n pub(crate) fn extract_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let assist_id = AssistId(\"extract_module_to_file\", AssistKind::RefactorExtract);\n-    let assist_label = \"Extract module to file\";\n-    let db = ctx.db();\n     let module_ast = ctx.find_node_at_offset::<ast::Module>()?;\n-    let module_items = module_ast.item_list()?;\n-    let dedent_module_items_text = module_items.dedent(IndentLevel(1)).to_string();\n     let module_name = module_ast.name()?;\n+\n+    let module_def = ctx.sema.to_def(&module_ast)?;\n+    let parent_module = module_def.parent(ctx.db())?;\n+\n+    let module_items = module_ast.item_list()?;\n     let target = module_ast.syntax().text_range();\n     let anchor_file_id = ctx.frange.file_id;\n-    let sr = db.file_source_root(anchor_file_id);\n-    let sr = db.source_root(sr);\n-    let file_path = sr.path_for_file(&anchor_file_id)?;\n-    let (file_name, file_ext) = file_path.name_and_extension()?;\n-    acc.add(assist_id, assist_label, target, |builder| {\n-        builder.replace(target, format!(\"mod {};\", module_name));\n-        let path = if is_main_or_lib(file_name) {\n-            format!(\"./{}.{}\", module_name, file_ext.unwrap())\n-        } else {\n-            format!(\"./{}/{}.{}\", file_name, module_name, file_ext.unwrap())\n-        };\n-        let dst = AnchoredPathBuf { anchor: anchor_file_id, path };\n-        let contents = update_module_items_string(dedent_module_items_text);\n-        builder.create_file(dst, contents);\n-    })\n-}\n-fn is_main_or_lib(file_name: &str) -> bool {\n-    file_name == \"main\".to_string() || file_name == \"lib\".to_string()\n-}\n-fn update_module_items_string(items_str: String) -> String {\n-    let mut items_string_lines: Vec<&str> = items_str.lines().collect();\n-    items_string_lines.pop(); // Delete last line\n-    items_string_lines.reverse();\n-    items_string_lines.pop(); // Delete first line\n-    items_string_lines.reverse();\n \n-    let string = items_string_lines.join(\"\\n\");\n-    format!(\"{}\", string)\n+    acc.add(\n+        AssistId(\"extract_module_to_file\", AssistKind::RefactorExtract),\n+        \"Extract module to file\",\n+        target,\n+        |builder| {\n+            let path = {\n+                let dir = match parent_module.name(ctx.db()) {\n+                    Some(name) if !parent_module.is_mod_rs(ctx.db()) => format!(\"{}/\", name),\n+                    _ => String::new(),\n+                };\n+                format!(\"./{}{}.rs\", dir, module_name)\n+            };\n+            let contents = {\n+                let items = module_items.dedent(IndentLevel(1)).to_string();\n+                let mut items =\n+                    items.trim_start_matches('{').trim_end_matches('}').trim().to_string();\n+                if !items.is_empty() {\n+                    items.push('\\n');\n+                }\n+                items\n+            };\n+\n+            builder.replace(target, format!(\"mod {};\", module_name));\n+\n+            let dst = AnchoredPathBuf { anchor: anchor_file_id, path };\n+            builder.create_file(dst, contents);\n+        },\n+    )\n }\n \n #[cfg(test)]\n@@ -67,104 +68,66 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn extract_module_to_file_with_basic_module() {\n+    fn extract_from_root() {\n         check_assist(\n             extract_module_to_file,\n             r#\"\n-//- /foo.rs crate:foo\n mod tests {<|>\n     #[test] fn t() {}\n }\n \"#,\n             r#\"\n-//- /foo.rs\n+//- /main.rs\n mod tests;\n-//- /foo/tests.rs\n-#[test] fn t() {}\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn extract_module_to_file_with_file_path() {\n-        check_assist(\n-            extract_module_to_file,\n-            r#\"\n-//- /src/foo.rs crate:foo\n-mod bar {<|>\n-    fn f() {\n-\n-    }\n-}\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n+//- /tests.rs\n+#[test] fn t() {}\n \"#,\n-            r#\"\n-//- /src/foo.rs\n-mod bar;\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-//- /src/foo/bar.rs\n-fn f() {\n-\n-}\"#,\n-        )\n+        );\n     }\n \n     #[test]\n-    fn extract_module_to_file_with_main_filw() {\n+    fn extract_from_submodule() {\n         check_assist(\n             extract_module_to_file,\n             r#\"\n //- /main.rs\n-mod foo {<|>\n-    fn f() {\n-\n-    }\n-}\n-fn main() {\n-    println!(\"Hello, world!\");\n+mod submodule;\n+//- /submodule.rs\n+mod inner<|> {\n+    fn f() {}\n }\n+fn g() {}\n \"#,\n             r#\"\n-//- /main.rs\n-mod foo;\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-//- /foo.rs\n-fn f() {\n-\n-}\"#,\n-        )\n+//- /submodule.rs\n+mod inner;\n+fn g() {}\n+//- /submodule/inner.rs\n+fn f() {}\n+\"#,\n+        );\n     }\n \n     #[test]\n-    fn extract_module_to_file_with_lib_file() {\n+    fn extract_from_mod_rs() {\n         check_assist(\n             extract_module_to_file,\n             r#\"\n-//- /lib.rs\n-mod foo {<|>\n-    fn f() {\n-\n-    }\n-}\n-fn main() {\n-    println!(\"Hello, world!\");\n+//- /main.rs\n+mod submodule;\n+//- /submodule/mod.rs\n+mod inner<|> {\n+    fn f() {}\n }\n+fn g() {}\n \"#,\n             r#\"\n-//- /lib.rs\n-mod foo;\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-//- /foo.rs\n-fn f() {\n-\n-}\"#,\n-        )\n+//- /submodule/mod.rs\n+mod inner;\n+fn g() {}\n+//- /submodule/inner.rs\n+fn f() {}\n+\"#,\n+        );\n     }\n }"}]}