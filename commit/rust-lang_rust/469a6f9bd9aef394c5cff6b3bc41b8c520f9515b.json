{"sha": "469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWE2ZjliZDlhZWYzOTRjNWNmZjZiM2JjNDFiOGM1MjBmOTUxNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T19:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T19:14:12Z"}, "message": "Auto merge of #44013 - arielb1:coerce-snapshot, r=eddyb\n\nRegister fn-ptr coercion obligations out of a snapshot\n\nFixes #43923.\n\nbeta-nominating because regression.\nr? @eddyb", "tree": {"sha": "083c126d954bf1d5e8b583587a6853b0ffb0065d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083c126d954bf1d5e8b583587a6853b0ffb0065d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "html_url": "https://github.com/rust-lang/rust/commit/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "html_url": "https://github.com/rust-lang/rust/commit/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97"}, {"sha": "b47bcc2ee86debf37ff61b14d9b57361c7dd0ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b47bcc2ee86debf37ff61b14d9b57361c7dd0ab8", "html_url": "https://github.com/rust-lang/rust/commit/b47bcc2ee86debf37ff61b14d9b57361c7dd0ab8"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "e406ce845a6d11d4770dfca6483acfb26712fe20", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "patch": "@@ -807,8 +807,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let lub_ty = self.commit_if_ok(|_| {\n                 self.at(cause, self.param_env)\n                     .lub(prev_ty, new_ty)\n-                    .map(|ok| self.register_infer_ok_obligations(ok))\n-            });\n+            }).map(|ok| self.register_infer_ok_obligations(ok));\n \n             if lub_ty.is_ok() {\n                 // We have a LUB of prev_ty and new_ty, just return it.\n@@ -884,8 +883,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 return self.commit_if_ok(|_| {\n                     self.at(cause, self.param_env)\n                         .lub(prev_ty, new_ty)\n-                        .map(|ok| self.register_infer_ok_obligations(ok))\n-                });\n+                }).map(|ok| self.register_infer_ok_obligations(ok));\n             }\n         }\n \n@@ -898,8 +896,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     self.commit_if_ok(|_| {\n                         self.at(cause, self.param_env)\n                             .lub(prev_ty, new_ty)\n-                            .map(|ok| self.register_infer_ok_obligations(ok))\n-                    })\n+                    }).map(|ok| self.register_infer_ok_obligations(ok))\n                 }\n             }\n             Ok(ok) => {"}, {"sha": "fdbdf925e4cfee70edabdbed0a7e4f44a86effe6", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "patch": "@@ -1814,12 +1814,12 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     // check whether this predicate applies to our current projection\n                     let cause = self.fcx.misc(span);\n                     match self.at(&cause, self.fcx.param_env).eq(outlives.0, ty) {\n-                        Ok(ok) => {\n-                            self.register_infer_ok_obligations(ok);\n-                            Ok(outlives.1)\n-                        }\n-                        Err(_) => { Err(()) }\n+                        Ok(ok) => Ok((ok, outlives.1)),\n+                        Err(_) => Err(())\n                     }\n+                }).map(|(ok, result)| {\n+                    self.register_infer_ok_obligations(ok);\n+                    result\n                 });\n \n                 debug!(\"projection_bounds: region_result={:?}\","}, {"sha": "e1992e4fc5032f5d13bd43360311403fe418fbb1", "filename": "src/test/run-pass/issue-43923.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Ftest%2Frun-pass%2Fissue-43923.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b/src%2Ftest%2Frun-pass%2Fissue-43923.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43923.rs?ref=469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A<T: ?Sized> { ptr: T }\n+\n+fn foo<T>(x: &A<[T]>) {}\n+\n+fn main() {\n+    let a = foo;\n+    let b = A { ptr: [a, a, a] };\n+    a(&A { ptr: [()] });\n+}"}]}