{"sha": "c9e1aab8803264a40023aa09600b0a8fab8e00ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTFhYWI4ODAzMjY0YTQwMDIzYWEwOTYwMGIwYThmYWI4ZTAwZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-04T16:12:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-04T16:12:05Z"}, "message": "Merge #2948\n\n2948: Allow add_explicit_type to replace a placeholder type r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "943771d4c202ba8f6eddde04ed90e63166439f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943771d4c202ba8f6eddde04ed90e63166439f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e1aab8803264a40023aa09600b0a8fab8e00ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOZfVCRBK7hj4Ov3rIwAAdHIIAHsCmWQMYtoLp/GplsDo8P1Q\nmHieFFbysF4UJD8X8gUsoADEccAQieAO+V3maeSoCxujhQxclZik20PAe/GdBIj2\nXP80sOdVEFZrUo0vqnYvgg8K6QF/yCMiF3TPJRzPDL/0HMKldOCVoG0sa302a1Th\ngyiJe8xKyx/74Q6y6k4Kc9iCFkQ9zDLBMp4ieUNqOc/9ujk/fWnfbqgY6JjU2nAl\nnv2KUJ6LgfJ+LWJGNGwUrwWs370sEwrY34NelD5PzRh5FhhA2vzZM5TRF/4fbw4C\nYLQi8UUsiuvopi/JF3rk16Pinx6Up9y3oHGExGI4KXUpjernKW+xU5NNTMGzVC0=\n=RREE\n-----END PGP SIGNATURE-----\n", "payload": "tree 943771d4c202ba8f6eddde04ed90e63166439f47\nparent 9f580825b8f1838ec622416202baf6501a083afa\nparent e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580832725 +0000\ncommitter GitHub <noreply@github.com> 1580832725 +0000\n\nMerge #2948\n\n2948: Allow add_explicit_type to replace a placeholder type r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1aab8803264a40023aa09600b0a8fab8e00ff", "html_url": "https://github.com/rust-lang/rust/commit/c9e1aab8803264a40023aa09600b0a8fab8e00ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1aab8803264a40023aa09600b0a8fab8e00ff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f580825b8f1838ec622416202baf6501a083afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f580825b8f1838ec622416202baf6501a083afa", "html_url": "https://github.com/rust-lang/rust/commit/9f580825b8f1838ec622416202baf6501a083afa"}, {"sha": "e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8", "html_url": "https://github.com/rust-lang/rust/commit/e0c7ce8417d9c6b5b7aaa0a3337d8872ce9ea7e8"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "2443d55415979ffb7d4884d5d98524fe243d1e8d", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c9e1aab8803264a40023aa09600b0a8fab8e00ff/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e1aab8803264a40023aa09600b0a8fab8e00ff/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=c9e1aab8803264a40023aa09600b0a8fab8e00ff", "patch": "@@ -1,7 +1,7 @@\n use hir::{db::HirDatabase, HirDisplay};\n use ra_syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner},\n-    TextRange, T,\n+    ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n+    TextRange,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -34,17 +34,21 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n-    // Assist should only be applicable if cursor is between 'let' and '='\n     let stmt_range = stmt.syntax().text_range();\n     let eq_range = stmt.eq_token()?.text_range();\n+    // Assist should only be applicable if cursor is between 'let' and '='\n     let let_range = TextRange::from_to(stmt_range.start(), eq_range.start());\n     let cursor_in_range = ctx.frange.range.is_subrange(&let_range);\n     if !cursor_in_range {\n         return None;\n     }\n     // Assist not applicable if the type has already been specified\n-    if stmt.syntax().children_with_tokens().any(|child| child.kind() == T![:]) {\n-        return None;\n+    // and it has no placeholders\n+    let ascribed_ty = stmt.ascribed_type();\n+    if let Some(ref ty) = ascribed_ty {\n+        if ty.syntax().descendants().find_map(ast::PlaceholderType::cast).is_none() {\n+            return None;\n+        }\n     }\n     // Infer type\n     let db = ctx.db;\n@@ -60,7 +64,11 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n         format!(\"Insert explicit type '{}'\", ty.display(db)),\n         |edit| {\n             edit.target(pat_range);\n-            edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+            if let Some(ascribed_ty) = ascribed_ty {\n+                edit.replace(ascribed_ty.syntax().text_range(), format!(\"{}\", ty.display(db)));\n+            } else {\n+                edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+            }\n         },\n     )\n }\n@@ -85,6 +93,40 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn add_explicit_type_works_for_underscore() {\n+        check_assist(\n+            add_explicit_type,\n+            \"fn f() { let a<|>: _ = 1; }\",\n+            \"fn f() { let a<|>: i32 = 1; }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_nested_underscore() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+            enum Option<T> {\n+                Some(T),\n+                None\n+            }\n+\n+            fn f() {\n+                let a<|>: Option<_> = Option::Some(1);\n+            }\"#,\n+            r#\"\n+            enum Option<T> {\n+                Some(T),\n+                None\n+            }\n+\n+            fn f() {\n+                let a<|>: Option<i32> = Option::Some(1);\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_works_for_macro_call() {\n         check_assist("}]}