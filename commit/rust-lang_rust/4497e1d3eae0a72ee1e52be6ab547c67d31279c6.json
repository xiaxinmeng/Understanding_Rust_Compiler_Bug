{"sha": "4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTdlMWQzZWFlMGE3MmVlMWU1MmJlNmFiNTQ3YzY3ZDMxMjc5YzY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-14T09:15:11Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-14T09:28:53Z"}, "message": "Add Container enum to handle both kinds of container (impl/trait)", "tree": {"sha": "88191878e2d35edd261829830012e5df003258ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88191878e2d35edd261829830012e5df003258ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "html_url": "https://github.com/rust-lang/rust/commit/4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7650a44640a373e28f9eecc4623256ce6b9bbaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7650a44640a373e28f9eecc4623256ce6b9bbaa0", "html_url": "https://github.com/rust-lang/rust/commit/7650a44640a373e28f9eecc4623256ce6b9bbaa0"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "28de9e76a2697b8b83172cf226d32ed835ca8cf5", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "patch": "@@ -189,7 +189,7 @@ impl Module {\n         }\n     }\n \n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let def_map = db.crate_def_map(self.krate);\n         Resolver::default().push_module_scope(def_map, self.module_id)\n     }\n@@ -552,16 +552,21 @@ impl Function {\n         db.trait_items_index(self.module(db)).get_parent_trait((*self).into())\n     }\n \n+    pub fn container(&self, db: &impl DefDatabase) -> Option<Container> {\n+        if let Some(impl_block) = self.impl_block(db) {\n+            Some(impl_block.into())\n+        } else if let Some(trait_) = self.parent_trait(db) {\n+            Some(trait_.into())\n+        } else {\n+            None\n+        }\n+    }\n+\n     // FIXME: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n     pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n-        // FIXME abstract over containers (trait/impl)\n-        let r = self\n-            .impl_block(db)\n-            .map(|ib| ib.resolver(db))\n-            .or_else(|| self.parent_trait(db).map(|tr| tr.resolver(db)))\n-            .unwrap_or_else(|| self.module(db).resolver(db));\n+        let r = self.container(db).map_or_else(|| self.module(db).resolver(db), |c| c.resolver(db));\n         // ...and add generic params, if present\n         let p = self.generic_params(db);\n         let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n@@ -707,7 +712,7 @@ impl Trait {\n         db.trait_data(self)\n     }\n \n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present\n         let p = self.generic_params(db);\n@@ -746,6 +751,21 @@ impl TypeAlias {\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n \n+    /// The containing trait, if this is a trait method definition.\n+    pub fn parent_trait(&self, db: &impl DefDatabase) -> Option<Trait> {\n+        db.trait_items_index(self.module(db)).get_parent_trait((*self).into())\n+    }\n+\n+    pub fn container(&self, db: &impl DefDatabase) -> Option<Container> {\n+        if let Some(impl_block) = self.impl_block(db) {\n+            Some(impl_block.into())\n+        } else if let Some(trait_) = self.parent_trait(db) {\n+            Some(trait_.into())\n+        } else {\n+            None\n+        }\n+    }\n+\n     pub fn type_ref(self, db: &impl DefDatabase) -> Arc<TypeRef> {\n         db.type_alias_ref(self)\n     }\n@@ -769,3 +789,18 @@ impl Docs for TypeAlias {\n         docs_from_ast(&*self.source(db).1)\n     }\n }\n+\n+pub enum Container {\n+    Trait(Trait),\n+    ImplBlock(ImplBlock),\n+}\n+impl_froms!(Container: Trait, ImplBlock);\n+\n+impl Container {\n+    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n+        match self {\n+            Container::Trait(trait_) => trait_.resolver(db),\n+            Container::ImplBlock(impl_block) => impl_block.resolver(db),\n+        }\n+    }\n+}"}, {"sha": "f92b146ef06be05fc7fba2c0774a0b1240d94579", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::ast::{self, NameOwner, TypeParamsOwner};\n \n use crate::{\n     db::DefDatabase,\n-    Name, AsName, Function, Struct, Enum, Trait, TypeAlias, ImplBlock\n+    Name, AsName, Function, Struct, Enum, Trait, TypeAlias, ImplBlock, Container\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -27,6 +27,7 @@ pub struct GenericParams {\n     pub(crate) params: Vec<GenericParam>,\n }\n \n+// FIXME: consts can have type parameters from their parents (i.e. associated consts of traits)\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDef {\n     Function(Function),\n@@ -45,12 +46,8 @@ impl GenericParams {\n     ) -> Arc<GenericParams> {\n         let mut generics = GenericParams::default();\n         let parent = match def {\n-            // FIXME abstract over containers (trait/impl)\n-            GenericDef::Function(it) => it\n-                .impl_block(db)\n-                .map(GenericDef::from)\n-                .or_else(|| it.parent_trait(db).map(GenericDef::from)),\n-            GenericDef::TypeAlias(it) => it.impl_block(db).map(GenericDef::from),\n+            GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n+            GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n             GenericDef::Struct(_) | GenericDef::Enum(_) | GenericDef::Trait(_) => None,\n             GenericDef::ImplBlock(_) => None,\n         };\n@@ -112,3 +109,12 @@ impl GenericParams {\n         vec\n     }\n }\n+\n+impl From<Container> for GenericDef {\n+    fn from(c: Container) -> Self {\n+        match c {\n+            Container::Trait(trait_) => trait_.into(),\n+            Container::ImplBlock(impl_block) => impl_block.into(),\n+        }\n+    }\n+}"}, {"sha": "71486aa2d76f6deaad7c804871f248460984d6d9", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "patch": "@@ -96,7 +96,7 @@ impl ImplBlock {\n         db.generic_params((*self).into())\n     }\n \n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module().resolver(db);\n         // add generic params, if present\n         let p = self.generic_params(db);"}, {"sha": "24e08f8ccd9da0261869843f64a26f8c8d784525", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4497e1d3eae0a72ee1e52be6ab547c67d31279c6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "patch": "@@ -78,5 +78,5 @@ pub use self::code_model_api::{\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n-    Trait, TypeAlias,\n+    Trait, TypeAlias, Container,\n };"}]}