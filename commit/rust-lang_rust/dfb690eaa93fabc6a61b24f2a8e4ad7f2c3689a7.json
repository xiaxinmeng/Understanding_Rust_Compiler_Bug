{"sha": "dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjY5MGVhYTkzZmFiYzZhNjFiMjRmMmE4ZTRhZDdmMmMzNjg5YTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:50:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "resolve/expand: Misc cleanup", "tree": {"sha": "c1bb78e5d866601fcda93d0246a1c576b9886e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bb78e5d866601fcda93d0246a1c576b9886e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "html_url": "https://github.com/rust-lang/rust/commit/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f94e94ed3d80d768d0d107049f02fb99716dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f94e94ed3d80d768d0d107049f02fb99716dbe", "html_url": "https://github.com/rust-lang/rust/commit/68f94e94ed3d80d768d0d107049f02fb99716dbe"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "1c76c31e1a7ff9131311928e181e41bbef1679b0", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "patch": "@@ -888,8 +888,10 @@ pub trait ResolverExpand {\n     /// Some parent node that is close enough to the given macro call.\n     fn lint_node_id(&mut self, expn_id: ExpnId) -> NodeId;\n \n+    // Resolver interfaces for specific built-in macros.\n+    /// Does `#[derive(...)]` attribute with the given `ExpnId` have built-in `Copy` inside it?\n     fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n-    fn add_derive_copy(&mut self, expn_id: ExpnId);\n+    /// Path resolution logic for `#[cfg_accessible(path)]`.\n     fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate>;\n }\n "}, {"sha": "f4b66b354208a83f26e178d1197e5b73a8e89be3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "patch": "@@ -1797,7 +1797,4 @@ impl<'feat> ExpansionConfig<'feat> {\n     fn proc_macro_hygiene(&self) -> bool {\n         self.features.map_or(false, |features| features.proc_macro_hygiene)\n     }\n-    fn custom_inner_attributes(&self) -> bool {\n-        self.features.map_or(false, |features| features.custom_inner_attributes)\n-    }\n }"}, {"sha": "41985757b57af4906812c7682b8774f31cd2c63b", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "patch": "@@ -312,14 +312,13 @@ impl<'a> Parser<'a> {\n }\n \n pub fn maybe_needs_tokens(attrs: &[ast::Attribute]) -> bool {\n+    // One of the attributes may either itself be a macro, or apply derive macros (`derive`),\n+    // or expand to macro attributes (`cfg_attr`).\n     attrs.iter().any(|attr| {\n-        if let Some(ident) = attr.ident() {\n+        attr.ident().map_or(true, |ident| {\n             ident.name == sym::derive\n-            // This might apply a custom attribute/derive\n-            || ident.name == sym::cfg_attr\n-            || !rustc_feature::is_builtin_attr_name(ident.name)\n-        } else {\n-            true\n-        }\n+                || ident.name == sym::cfg_attr\n+                || !rustc_feature::is_builtin_attr_name(ident.name)\n+        })\n     })\n }"}, {"sha": "1ee96f81e4fabcb2e6c0495f61a19c6b36aa2400", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=dfb690eaa93fabc6a61b24f2a8e4ad7f2c3689a7", "patch": "@@ -286,7 +286,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                                     ext.helper_attrs.iter().map(|name| Ident::new(*name, span)),\n                                 );\n                                 if ext.is_derive_copy {\n-                                    self.add_derive_copy(invoc_id);\n+                                    self.containers_deriving_copy.insert(invoc_id);\n                                 }\n                                 ext\n                             }\n@@ -351,10 +351,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         self.containers_deriving_copy.contains(&expn_id)\n     }\n \n-    fn add_derive_copy(&mut self, expn_id: ExpnId) {\n-        self.containers_deriving_copy.insert(expn_id);\n-    }\n-\n     // The function that implements the resolution logic of `#[cfg_accessible(path)]`.\n     // Returns true if the path can certainly be resolved in one of three namespaces,\n     // returns false if the path certainly cannot be resolved in any of the three namespaces."}]}