{"sha": "112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "node_id": "C_kwDOAAsO6NoAKDExMjQ2NGZkNmI5N2Q3YTc1MjRmOGZmMmE2NDJiZmUyNjdlOGZhNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T14:34:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T14:34:44Z"}, "message": "Auto merge of #14604 - HKalbasi:dev3, r=Veykril\n\ninternal: Add minicore smoke test\n\nfix #14501", "tree": {"sha": "a5f2bae479353fcd819770007f0ebf3bc22b5900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f2bae479353fcd819770007f0ebf3bc22b5900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "html_url": "https://github.com/rust-lang/rust/commit/112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "html_url": "https://github.com/rust-lang/rust/commit/e84781ad58a798c37a11b598417ecb7ca7ebb6a7"}, {"sha": "f05f7ab082c29edd182b25c27eafd21a6d9f6862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05f7ab082c29edd182b25c27eafd21a6d9f6862", "html_url": "https://github.com/rust-lang/rust/commit/f05f7ab082c29edd182b25c27eafd21a6d9f6862"}], "stats": {"total": 121, "additions": 97, "deletions": 24}, "files": [{"sha": "413689561bc1c9c97545717db852a3dc23bc4e39", "filename": "crates/ide-diagnostics/src/tests.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs?ref=112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "patch": "@@ -8,7 +8,7 @@ use ide_db::{\n     RootDatabase,\n };\n use stdx::trim_indent;\n-use test_utils::{assert_eq_text, extract_annotations};\n+use test_utils::{assert_eq_text, extract_annotations, MiniCore};\n \n use crate::{DiagnosticsConfig, ExprFillDefaultMode, Severity};\n \n@@ -143,3 +143,23 @@ fn test_disabled_diagnostics() {\n     );\n     assert!(!diagnostics.is_empty());\n }\n+\n+#[test]\n+fn minicore_smoke_test() {\n+    fn check(minicore: MiniCore) {\n+        let source = minicore.source_code();\n+        let mut config = DiagnosticsConfig::test_sample();\n+        // This should be ignored since we conditionaly remove code which creates single item use with braces\n+        config.disabled.insert(\"unnecessary-braces\".to_string());\n+        check_diagnostics_with_config(config, &source);\n+    }\n+\n+    // Checks that there is no diagnostic in minicore for each flag.\n+    for flag in MiniCore::available_flags() {\n+        eprintln!(\"Checking minicore flag {flag}\");\n+        check(MiniCore::from_flags([flag]));\n+    }\n+    // And one time for all flags, to check codes which are behind multiple flags + prevent name collisions\n+    eprintln!(\"Checking all minicore flags\");\n+    check(MiniCore::from_flags(MiniCore::available_flags()))\n+}"}, {"sha": "069edaed665923c96aabe0a6dce17d1b8088c6fd", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "patch": "@@ -444,7 +444,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5805..5813,\n+                                        range: 5768..5776,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -457,7 +457,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5837..5841,\n+                                        range: 5800..5804,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -478,7 +478,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5805..5813,\n+                                        range: 5768..5776,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -491,7 +491,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5837..5841,\n+                                        range: 5800..5804,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -512,7 +512,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5805..5813,\n+                                        range: 5768..5776,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -525,7 +525,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5837..5841,\n+                                        range: 5800..5804,\n                                     },\n                                 ),\n                                 tooltip: \"\","}, {"sha": "05f32f8e51ea4ae1107401ab064765df83e6e825", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "patch": "@@ -254,10 +254,19 @@ impl FixtureWithProjectMeta {\n }\n \n impl MiniCore {\n+    const RAW_SOURCE: &str = include_str!(\"./minicore.rs\");\n+\n     fn has_flag(&self, flag: &str) -> bool {\n         self.activated_flags.iter().any(|it| it == flag)\n     }\n \n+    pub fn from_flags<'a>(flags: impl IntoIterator<Item = &'a str>) -> Self {\n+        MiniCore {\n+            activated_flags: flags.into_iter().map(|x| x.to_owned()).collect(),\n+            valid_flags: Vec::new(),\n+        }\n+    }\n+\n     #[track_caller]\n     fn assert_valid_flag(&self, flag: &str) {\n         if !self.valid_flags.iter().any(|it| it == flag) {\n@@ -278,13 +287,21 @@ impl MiniCore {\n         res\n     }\n \n+    pub fn available_flags() -> impl Iterator<Item = &'static str> {\n+        let lines = MiniCore::RAW_SOURCE.split_inclusive('\\n');\n+        lines\n+            .map_while(|x| x.strip_prefix(\"//!\"))\n+            .skip_while(|line| !line.contains(\"Available flags:\"))\n+            .skip(1)\n+            .map(|x| x.split_once(':').unwrap().0.trim())\n+    }\n+\n     /// Strips parts of minicore.rs which are flagged by inactive flags.\n     ///\n     /// This is probably over-engineered to support flags dependencies.\n     pub fn source_code(mut self) -> String {\n         let mut buf = String::new();\n-        let raw_mini_core = include_str!(\"./minicore.rs\");\n-        let mut lines = raw_mini_core.split_inclusive('\\n');\n+        let mut lines = MiniCore::RAW_SOURCE.split_inclusive('\\n');\n \n         let mut implications = Vec::new();\n "}, {"sha": "2f0c086092edec424495be55e0d59ad2c886baa9", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112464fd6b97d7a7524f8ff2a642bfe267e8fa75/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=112464fd6b97d7a7524f8ff2a642bfe267e8fa75", "patch": "@@ -32,8 +32,9 @@\n //!     iterator: option\n //!     iterators: iterator, fn\n //!     non_zero:\n-//!     option:\n+//!     option: panic\n //!     ord: eq, option\n+//!     panic:\n //!     pin:\n //!     range:\n //!     result:\n@@ -191,6 +192,12 @@ pub mod convert {\n     // endregion:infallible\n }\n \n+// region:drop\n+pub mod mem {\n+    pub fn drop<T>(_x: T) {}\n+}\n+// endregion:drop\n+\n pub mod ops {\n     // region:coerce_unsized\n     mod unsize {\n@@ -315,12 +322,6 @@ pub mod ops {\n     pub use self::index::{Index, IndexMut};\n     // endregion:index\n \n-    // region:drop\n-    pub mod mem {\n-        pub fn drop<T>(_x: T) {}\n-    }\n-    // endregion:drop\n-\n     // region:range\n     mod range {\n         #[lang = \"RangeFull\"]\n@@ -473,12 +474,24 @@ pub mod ops {\n         impl<B, C> Try for ControlFlow<B, C> {\n             type Output = C;\n             type Residual = ControlFlow<B, Infallible>;\n-            fn from_output(output: Self::Output) -> Self {}\n-            fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {}\n+            fn from_output(output: Self::Output) -> Self {\n+                ControlFlow::Continue(output)\n+            }\n+            fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+                match self {\n+                    ControlFlow::Continue(x) => ControlFlow::Continue(x),\n+                    ControlFlow::Break(x) => ControlFlow::Break(ControlFlow::Break(x)),\n+                }\n+            }\n         }\n \n         impl<B, C> FromResidual for ControlFlow<B, C> {\n-            fn from_residual(residual: ControlFlow<B, Infallible>) -> Self {}\n+            fn from_residual(residual: ControlFlow<B, Infallible>) -> Self {\n+                match residual {\n+                    ControlFlow::Break(b) => ControlFlow::Break(b),\n+                    ControlFlow::Continue(_) => loop {},\n+                }\n+            }\n         }\n         // region:option\n         impl<T> Try for Option<T> {\n@@ -499,6 +512,7 @@ pub mod ops {\n             fn from_residual(x: Option<Infallible>) -> Self {\n                 match x {\n                     None => None,\n+                    Some(_) => loop {},\n                 }\n             }\n         }\n@@ -527,6 +541,7 @@ pub mod ops {\n             fn from_residual(residual: Result<Infallible, E>) -> Self {\n                 match residual {\n                     Err(e) => Err(From::from(e)),\n+                    Ok(_) => loop {},\n                 }\n             }\n         }\n@@ -840,8 +855,6 @@ pub mod iter {\n \n     mod traits {\n         mod iterator {\n-            use super::super::Take;\n-\n             pub trait Iterator {\n                 type Item;\n                 #[lang = \"next\"]\n@@ -903,7 +916,7 @@ pub mod iter {\n                 type Item = T;\n                 type IntoIter = IntoIter<T, N>;\n                 fn into_iter(self) -> I {\n-                    IntoIter { data: self, range: IndexRange { start: 0, end: self.len() } }\n+                    IntoIter { data: self, range: IndexRange { start: 0, end: loop {} } }\n                 }\n             }\n             impl<T, const N: usize> Iterator for IntoIter<T, N> {\n@@ -919,16 +932,38 @@ pub mod iter {\n }\n // endregion:iterator\n \n-// region:derive\n+// region:panic\n+mod panic {\n+    pub macro panic_2021 {\n+        ($($t:tt)+) => (\n+            /* Nothing yet */\n+        ),\n+    }\n+}\n+// endregion:panic\n+\n mod macros {\n+    // region:panic\n+    #[macro_export]\n+    #[rustc_builtin_macro(std_panic)]\n+    macro_rules! panic {\n+        ($($arg:tt)*) => {\n+            /* compiler built-in */\n+        };\n+    }\n+\n+    pub(crate) use panic;\n+    // endregion:panic\n+\n+    // region:derive\n     pub(crate) mod builtin {\n         #[rustc_builtin_macro]\n         pub macro derive($item:item) {\n             /* compiler built-in */\n         }\n     }\n+    // endregion:derive\n }\n-// endregion:derive\n \n // region:non_zero\n pub mod num {\n@@ -983,6 +1018,7 @@ pub mod prelude {\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option\n             result::Result::{self, Err, Ok},    // :result\n+            panic,                              // :panic\n         };\n     }\n "}]}