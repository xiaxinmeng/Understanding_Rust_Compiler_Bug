{"sha": "1681f43b91e6d09469e6bddf5d99b1b8e5227911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODFmNDNiOTFlNmQwOTQ2OWU2YmRkZjVkOTliMWI4ZTUyMjc5MTE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-07T19:19:46Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-20T18:42:27Z"}, "message": "Guide: macros", "tree": {"sha": "dbafc544a82503a23c77ec6ba51791a024cc1d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbafc544a82503a23c77ec6ba51791a024cc1d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1681f43b91e6d09469e6bddf5d99b1b8e5227911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1681f43b91e6d09469e6bddf5d99b1b8e5227911", "html_url": "https://github.com/rust-lang/rust/commit/1681f43b91e6d09469e6bddf5d99b1b8e5227911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1681f43b91e6d09469e6bddf5d99b1b8e5227911/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655600b01b88c2fb2f91965e2b505068db7d808f", "url": "https://api.github.com/repos/rust-lang/rust/commits/655600b01b88c2fb2f91965e2b505068db7d808f", "html_url": "https://github.com/rust-lang/rust/commit/655600b01b88c2fb2f91965e2b505068db7d808f"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "c855b6831d87ef0c2af94b83d5e9edc4992f1eea", "filename": "src/doc/guide.md", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1681f43b91e6d09469e6bddf5d99b1b8e5227911/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1681f43b91e6d09469e6bddf5d99b1b8e5227911/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1681f43b91e6d09469e6bddf5d99b1b8e5227911", "patch": "@@ -4711,4 +4711,75 @@ fail.\n \n # Macros\n \n+One of Rust's most advanced features is is system of **macro**s. While\n+functions allow you to provide abstractions over values and operations, macros\n+allow you to provide abstractions over syntax. Do you wish Rust had the ability\n+to do something that it can't currently do? You may be able to write a macro\n+to extend Rust's capabilities.\n+\n+You've already used one macro extensively: `println!`.  When we invoke\n+a Rust macro, we need to use the exclamation mark (`!`). There's two reasons\n+that this is true: the first is that it makes it clear when you're using a\n+macro. The second is that macros allow for flexible syntax, and so Rust must\n+be able to tell where a macro starts and ends. The `!(...)` helps with this.\n+\n+An example of even more advanced macro usage is in Rust's `regex` crate.  This\n+implements **regular expressions* for Rust. Regular expressions provide a\n+powerful way to determine if a string matches a certain pattern, but they also\n+have their own syntax. Therefore, they're a perfect fit for Rust's macros.\n+\n+Here's an example of using a regular expression in Rust:\n+\n+```{rust}\n+#![feature(phase)]\n+#[phase(plugin)]\n+extern crate regex_macros;\n+extern crate regex;\n+\n+fn main() {\n+    let re = regex!(r\"^\\d{4}-\\d{2}-\\d{2}$\");\n+    println!(\"Does our expression match? {}\", re.is_match(\"2014-01-01\"));\n+}\n+```\n+\n+This will print \"Does our expression match? true\". Now, we won't learn\n+everything there is to know about regular expressions in this tutorial. We can\n+consult [the regex crate's documentation](/regex/index.html) for more on that\n+later. For now, here's the important parts:\n+\n+```{rust}\n+#![feature(phase)]\n+#[phase(plugin)]\n+extern crate regex_macros;\n+# fn main() {}\n+```\n+\n+These attributes allow the `regex_macros` crate to actually hook in to the\n+compiler itself and extend it with the regular expression syntax. Macros\n+are serious business!\n+\n+Next, let's look at the actual invocation:\n+\n+```{rust}\n+# #![feature(phase)]\n+# #[phase(plugin)]\n+# extern crate regex_macros;\n+# extern crate regex;\n+# fn main() {\n+let re = regex!(r\"^\\d{4}-\\d{2}-\\d{2}$\");\n+# }\n+```\n+\n+The `regex!` macro allows us to define a macro. inside of the `()`s, we have a\n+`r\"\"` construct. This is a 'raw' string literal, that does no escaping of its\n+contents.  This is a Rust feature, not a macros feature. Finally, the rest of\n+the insides, which is the regular expression itself. This regular expression\n+roughly translates to \"four digits, followed by a hypen, followed by two\n+digits, followed by a hypen, followed by two digits.\"\n+\n+For more on macros, please consult [the Macros Guide](/guide-macros.html).\n+Macros are a very advanced and still slightly experimental feature, and don't\n+require a deep understanding to use. The Guide can help you if you want to\n+write your own.\n+\n # Unsafe"}]}