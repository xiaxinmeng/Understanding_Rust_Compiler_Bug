{"sha": "39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDljMzBhMTU0OWNhMGI2OTMyNWJiN2U0ZDljOTkzZDNiYzlhNzE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-15T02:02:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-15T02:09:02Z"}, "message": "Remove code from parser that was awaiting snapshot\n\nRemove old parser functions as well as support for old-style capture\nclauses. Remove remaining old-style capture clauses.", "tree": {"sha": "673b3ed3c75c4e40e4d753d19c026de43af69e52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673b3ed3c75c4e40e4d753d19c026de43af69e52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "html_url": "https://github.com/rust-lang/rust/commit/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc507c4ef5a5e4da95e95c080239dbe10ffcd376", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc507c4ef5a5e4da95e95c080239dbe10ffcd376", "html_url": "https://github.com/rust-lang/rust/commit/bc507c4ef5a5e4da95e95c080239dbe10ffcd376"}], "stats": {"total": 78, "additions": 9, "deletions": 69}, "files": [{"sha": "5f31b5090f0580f675bee86658b8536d4d49099c", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -879,7 +879,7 @@ fn test_avoid_copying_the_body_spawn() {\n #[test]\n fn test_avoid_copying_the_body_spawn_listener() {\n     avoid_copying_the_body {|f|\n-        spawn_listener(fn~[move f](_po: comm::port<int>) {\n+        spawn_listener(fn~(move f, _po: comm::port<int>) {\n             f();\n         });\n     }\n@@ -899,7 +899,7 @@ fn test_avoid_copying_the_body_run() {\n fn test_avoid_copying_the_body_run_listener() {\n     avoid_copying_the_body {|f|\n         let buildr = builder();\n-        run_listener(buildr, fn~[move f](_po: comm::port<int>) {\n+        run_listener(buildr, fn~(move f, _po: comm::port<int>) {\n             f();\n         });\n     }"}, {"sha": "ae76cbafef795e736865c4485eb8db65f50ea307", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -59,7 +59,7 @@ fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     let p = parse::new_parser_from_file(cx.parse_sess(), cx.cfg(),\n                                         res_rel_file(cx, sp, file),\n                                         parse::parser::SOURCE_FILE);\n-    ret parse::parser::parse_expr(p)\n+    ret p.parse_expr();\n }\n \n fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,"}, {"sha": "20452cd8724a0930ec0247916be59ade3ad90715", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -16,8 +16,6 @@ import dvec::{dvec, extensions};\n \n export file_type;\n export parser;\n-export parse_expr;\n-export parse_pat;\n \n // FIXME: #ast expects to find this here but it's actually defined in `parse`\n // Fixing this will be easier when we have export decls on individual items --\n@@ -26,12 +24,6 @@ export parse_pat;\n import parse_from_source_str;\n export parse_from_source_str;\n \n-// TODO: remove these once we go around a snapshot cycle.\n-// These are here for the old way that #ast (qquote.rs) worked\n-fn parse_expr(p: parser) -> @ast::expr { p.parse_expr() }\n-fn parse_pat(p: parser) -> @ast::pat { p.parse_pat() }\n-\n-\n enum restriction {\n     UNRESTRICTED,\n     RESTRICT_STMT_EXPR,\n@@ -1231,8 +1223,6 @@ class parser {\n     fn parse_fn_expr(proto: proto) -> @expr {\n         let lo = self.last_span.lo;\n \n-        let cc_old = self.parse_old_skool_capture_clause();\n-\n         // if we want to allow fn expression argument types to be inferred in\n         // the future, just have to change parse_arg to parse_fn_block_arg.\n         let (decl, capture_clause) =\n@@ -1241,8 +1231,7 @@ class parser {\n \n         let body = self.parse_block();\n         ret self.mk_expr(lo, body.span.hi,\n-                         expr_fn(proto, decl, body,\n-                                 @(*capture_clause + cc_old)));\n+                         expr_fn(proto, decl, body, capture_clause));\n     }\n \n     fn parse_fn_block_expr() -> @expr {\n@@ -1731,55 +1720,6 @@ class parser {\n         } else { [] }\n     }\n \n-    // FIXME Remove after snapshot\n-    fn parse_old_skool_capture_clause() -> [capture_item] {\n-        fn expect_opt_trailing_semi(p: parser) {\n-            if !p.eat(token::SEMI) {\n-                if p.token != token::RBRACKET {\n-                    p.fatal(\"expecting ; or ]\");\n-                }\n-            }\n-        }\n-\n-        fn eat_ident_list(p: parser, is_move: bool) -> [capture_item] {\n-            let mut res = [];\n-            loop {\n-                alt p.token {\n-                  token::IDENT(_, _) {\n-                    let id = p.get_id();\n-                    let sp = mk_sp(p.span.lo, p.span.hi);\n-                    let ident = p.parse_ident();\n-                    res += [@{id:id, is_move: is_move, name:ident, span:sp}];\n-                    if !p.eat(token::COMMA) {\n-                        ret res;\n-                    }\n-                  }\n-\n-                  _ { ret res; }\n-                }\n-            };\n-        }\n-\n-        let mut cap_items = [];\n-\n-        if self.eat(token::LBRACKET) {\n-            while !self.eat(token::RBRACKET) {\n-                if self.eat_keyword(\"copy\") {\n-                    cap_items += eat_ident_list(self, false);\n-                    expect_opt_trailing_semi(self);\n-                } else if self.eat_keyword(\"move\") {\n-                    cap_items += eat_ident_list(self, true);\n-                    expect_opt_trailing_semi(self);\n-                } else {\n-                    let s: str = \"expecting send, copy, or move clause\";\n-                    self.fatal(s);\n-                }\n-            }\n-        }\n-\n-        ret cap_items;\n-    }\n-\n     fn parse_fn_decl(purity: purity,\n                      parse_arg_fn: fn(parser) -> arg_or_capture_item)\n         -> (fn_decl, capture_clause) {"}, {"sha": "7d8b5e1f7d58824ae1913f4b573fc8a5daff200d", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -97,7 +97,7 @@ fn exec<T:send>(\n ) -> T {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let msg = handle_request(fn~[move f](ctxt: ctxt) {\n+    let msg = handle_request(fn~(move f, ctxt: ctxt) {\n         comm::send(ch, f(ctxt))\n     });\n     comm::send(srv.ch, msg);"}, {"sha": "21938a9594a06979b5a164970e5298943634e1bd", "filename": "src/test/run-pass/issue-1895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1895.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n   let x = 1;\n-  let y = fn@[move x]() -> int {\n+  let y = fn@(move x) -> int {\n              x\n           }();\n }"}, {"sha": "6272b20163cbcfa6cb8e7c30abc2641aa54ac8bb", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -15,7 +15,7 @@ fn test05() {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(fn~[move fn_to_send]() {\n+    task::spawn(fn~(move fn_to_send) {\n         test05_start(fn_to_send);\n     });\n }"}, {"sha": "cf98be6effb9ab446a0e87e02fd88e67b4a1f0f5", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let y = ~2;\n     let y_in_parent = ptr::addr_of(*y) as uint;\n \n-    task::spawn(fn~[copy ch, y; move x]() {\n+    task::spawn(fn~(copy ch, copy y, move x) {\n         let x_in_child = ptr::addr_of(*x) as uint;\n         comm::send(ch, x_in_child);\n "}, {"sha": "8e81e5277bf420eed241087561bf122bbedbce3f", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = ~1;\n-    let lam_move = fn@[move x]() { };\n+    let lam_move = fn@(move x) { };\n     lam_move();\n }"}]}