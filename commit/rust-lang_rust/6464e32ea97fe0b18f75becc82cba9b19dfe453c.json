{"sha": "6464e32ea97fe0b18f75becc82cba9b19dfe453c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjRlMzJlYTk3ZmUwYjE4Zjc1YmVjYzgyY2JhOWIxOWRmZTQ1M2M=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-20T07:18:29Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-20T18:27:03Z"}, "message": "Use standard Read/Write traits in sys::stdio", "tree": {"sha": "51fd2b3c7c2b6a1101419114a37839bb28ed7bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51fd2b3c7c2b6a1101419114a37839bb28ed7bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6464e32ea97fe0b18f75becc82cba9b19dfe453c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6464e32ea97fe0b18f75becc82cba9b19dfe453c", "html_url": "https://github.com/rust-lang/rust/commit/6464e32ea97fe0b18f75becc82cba9b19dfe453c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6464e32ea97fe0b18f75becc82cba9b19dfe453c/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09803e8694b3ad83f988e30b4f0a3903ebe2632", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09803e8694b3ad83f988e30b4f0a3903ebe2632", "html_url": "https://github.com/rust-lang/rust/commit/b09803e8694b3ad83f988e30b4f0a3903ebe2632"}], "stats": {"total": 189, "additions": 114, "deletions": 75}, "files": [{"sha": "81d79213f615cd583abf1392541a43158dc0b7cc", "filename": "src/libstd/sys/cloudabi/stdio.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -9,8 +9,10 @@ impl Stdin {\n     pub fn new() -> io::Result<Stdin> {\n         Ok(Stdin(()))\n     }\n+}\n \n-    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {\n         Ok(0)\n     }\n }\n@@ -19,15 +21,17 @@ impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout(()))\n     }\n+}\n \n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stdout {\n+    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n         Err(io::Error::new(\n             io::ErrorKind::BrokenPipe,\n             \"Stdout is not connected to any output in this environment\",\n         ))\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -36,15 +40,17 @@ impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr(()))\n     }\n+}\n \n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stderr {\n+    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n         Err(io::Error::new(\n             io::ErrorKind::BrokenPipe,\n             \"Stderr is not connected to any output in this environment\",\n         ))\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }"}, {"sha": "b4eb01fd6cc527c28ac3b5bfa81764687bcf6d1a", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -8,41 +8,47 @@ pub struct Stderr(());\n \n impl Stdin {\n     pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(0);\n-        let ret = fd.read(data);\n+        let ret = fd.read(buf);\n         fd.into_raw();\n         ret\n     }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(1);\n-        let ret = fd.write(data);\n+        let ret = fd.write(buf);\n         fd.into_raw();\n         ret\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         cvt(syscall::fsync(1)).and(Ok(()))\n     }\n }\n \n impl Stderr {\n     pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(2);\n-        let ret = fd.write(data);\n+        let ret = fd.write(buf);\n         fd.into_raw();\n         ret\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         cvt(syscall::fsync(2)).and(Ok(()))\n     }\n }"}, {"sha": "57d66ed9a853c7dc3690b0e708af347221de4bbe", "filename": "src/libstd/sys/sgx/stdio.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -16,32 +16,38 @@ fn with_std_fd<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R {\n \n impl Stdin {\n     pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n-        with_std_fd(abi::FD_STDIN, |fd| fd.read(data))\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDIN, |fd| fd.read(buf))\n     }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        with_std_fd(abi::FD_STDOUT, |fd| fd.write(data))\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDOUT, |fd| fd.write(buf))\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         with_std_fd(abi::FD_STDOUT, |fd| fd.flush())\n     }\n }\n \n impl Stderr {\n     pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        with_std_fd(abi::FD_STDERR, |fd| fd.write(data))\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        with_std_fd(abi::FD_STDERR, |fd| fd.write(buf))\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         with_std_fd(abi::FD_STDERR, |fd| fd.flush())\n     }\n }"}, {"sha": "82bd2fbf776123ef1eafd3a7f57643b486697bf6", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -8,41 +8,47 @@ pub struct Stderr(());\n \n impl Stdin {\n     pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDIN_FILENO);\n-        let ret = fd.read(data);\n+        let ret = fd.read(buf);\n         fd.into_raw(); // do not close this FD\n         ret\n     }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDOUT_FILENO);\n-        let ret = fd.write(data);\n+        let ret = fd.write(buf);\n         fd.into_raw(); // do not close this FD\n         ret\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n \n impl Stderr {\n     pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         let fd = FileDesc::new(libc::STDERR_FILENO);\n-        let ret = fd.write(data);\n+        let ret = fd.write(buf);\n         fd.into_raw(); // do not close this FD\n         ret\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }"}, {"sha": "657655004e9bf97d05f485316abbb77f7e611f2e", "filename": "src/libstd/sys/wasm/stdio.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -9,23 +9,27 @@ impl Stdin {\n     pub fn new() -> io::Result<Stdin> {\n         Ok(Stdin)\n     }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n-        Ok(ReadSysCall::perform(0, data))\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        Ok(ReadSysCall::perform(0, buf))\n     }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        WriteSysCall::perform(1, data);\n-        Ok(data.len())\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        WriteSysCall::perform(1, buf);\n+        Ok(buf.len())\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -34,13 +38,15 @@ impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        WriteSysCall::perform(2, data);\n-        Ok(data.len())\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        WriteSysCall::perform(2, buf);\n+        Ok(buf.len())\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }"}, {"sha": "5963541a8933894dfcf38e08a6a7ba07b1524bb3", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6464e32ea97fe0b18f75becc82cba9b19dfe453c/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=6464e32ea97fe0b18f75becc82cba9b19dfe453c", "patch": "@@ -1,6 +1,5 @@\n #![unstable(issue = \"0\", feature = \"windows_stdio\")]\n \n-use cell::Cell;\n use char::decode_utf16;\n use cmp;\n use io;\n@@ -13,7 +12,7 @@ use sys::handle::Handle;\n // Don't cache handles but get them fresh for every read/write. This allows us to track changes to\n // the value over time (such as if a process calls `SetStdHandle` while it's running). See #40490.\n pub struct Stdin {\n-    high_surrogate: Cell<u16>,\n+    surrogate: u16,\n }\n pub struct Stdout;\n pub struct Stderr;\n@@ -128,10 +127,12 @@ fn write_u16s(handle: c::HANDLE, data: &[u16]) -> io::Result<usize> {\n \n impl Stdin {\n     pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin { high_surrogate: Cell::new(0) })\n+        Ok(Stdin { surrogate: 0 })\n     }\n+}\n \n-    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let handle = get_handle(c::STD_INPUT_HANDLE)?;\n         if !is_console(handle) {\n             let handle = Handle::new(handle);\n@@ -153,40 +154,44 @@ impl Stdin {\n         // we can read at most a third of `buf.len()` chars and uphold the guarantee no data gets\n         // lost.\n         let amount = cmp::min(buf.len() / 3, utf16_buf.len());\n-        let read = self.read_u16s_fixup_surrogates(handle, &mut utf16_buf, amount)?;\n+        let read = read_u16s_fixup_surrogates(handle, &mut utf16_buf, amount, &mut self.surrogate)?;\n \n         utf16_to_utf8(&utf16_buf[..read], buf)\n     }\n+}\n \n-    // We assume that if the last `u16` is an unpaired surrogate they got sliced apart by our\n-    // buffer size, and keep it around for the next read hoping to put them together.\n-    // This is a best effort, and may not work if we are not the only reader on Stdin.\n-    fn read_u16s_fixup_surrogates(&self, handle: c::HANDLE, buf: &mut [u16], mut amount: usize)\n-        -> io::Result<usize>\n-    {\n-        // Insert possibly remaining unpaired surrogate from last read.\n-        let mut start = 0;\n-        if self.high_surrogate.get() != 0 {\n-            buf[0] = self.high_surrogate.replace(0);\n-            start = 1;\n-            if amount == 1 {\n-                // Special case: `Stdin::read` guarantees we can always read at least one new `u16`\n-                // and combine it with an unpaired surrogate, because the UTF-8 buffer is at least\n-                // 4 bytes.\n-                amount = 2;\n-            }\n+\n+// We assume that if the last `u16` is an unpaired surrogate they got sliced apart by our\n+// buffer size, and keep it around for the next read hoping to put them together.\n+// This is a best effort, and may not work if we are not the only reader on Stdin.\n+fn read_u16s_fixup_surrogates(handle: c::HANDLE,\n+                              buf: &mut [u16],\n+                              mut amount: usize,\n+                              surrogate: &mut u16) -> io::Result<usize>\n+{\n+    // Insert possibly remaining unpaired surrogate from last read.\n+    let mut start = 0;\n+    if *surrogate != 0 {\n+        buf[0] = *surrogate;\n+        *surrogate = 0;\n+        start = 1;\n+        if amount == 1 {\n+            // Special case: `Stdin::read` guarantees we can always read at least one new `u16`\n+            // and combine it with an unpaired surrogate, because the UTF-8 buffer is at least\n+            // 4 bytes.\n+            amount = 2;\n         }\n-        let mut amount = read_u16s(handle, &mut buf[start..amount])? + start;\n+    }\n+    let mut amount = read_u16s(handle, &mut buf[start..amount])? + start;\n \n-        if amount > 0 {\n-            let last_char = buf[amount - 1];\n-            if last_char >= 0xD800 && last_char <= 0xDBFF { // high surrogate\n-                self.high_surrogate.set(last_char);\n-                amount -= 1;\n-            }\n+    if amount > 0 {\n+        let last_char = buf[amount - 1];\n+        if last_char >= 0xD800 && last_char <= 0xDBFF { // high surrogate\n+            *surrogate = last_char;\n+            amount -= 1;\n         }\n-        Ok(amount)\n     }\n+    Ok(amount)\n }\n \n fn read_u16s(handle: c::HANDLE, buf: &mut [u16]) -> io::Result<usize> {\n@@ -241,12 +246,14 @@ impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        write(c::STD_OUTPUT_HANDLE, data)\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        write(c::STD_OUTPUT_HANDLE, buf)\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -255,12 +262,14 @@ impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        write(c::STD_ERROR_HANDLE, data)\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        write(c::STD_ERROR_HANDLE, buf)\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }"}]}