{"sha": "8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDVlZTcwMjhlMDAwMDNlN2UxM2MwZjE1YmE5YzJjZjc4N2Y2N2M=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-01-10T04:42:07Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-01-11T17:03:46Z"}, "message": "Add lint to replace `const`s with `const fn`s", "tree": {"sha": "1adeb156a3efd4ae640165cd1791fd034ee9dbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1adeb156a3efd4ae640165cd1791fd034ee9dbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "html_url": "https://github.com/rust-lang/rust/commit/8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1245de1e468761b123fad5d5214c37cb12c66f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/1245de1e468761b123fad5d5214c37cb12c66f94", "html_url": "https://github.com/rust-lang/rust/commit/1245de1e468761b123fad5d5214c37cb12c66f94"}], "stats": {"total": 417, "additions": 417, "deletions": 0}, "files": [{"sha": "13760e8c0fb31834d32e70a11fa91cdd5d8cdcef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "patch": "@@ -150,6 +150,7 @@ pub mod ptr;\n pub mod ranges;\n pub mod reference;\n pub mod regex;\n+pub mod replace_consts;\n pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n@@ -361,6 +362,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n+    reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -399,6 +401,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         print::PRINT_STDOUT,\n         print::USE_DEBUG,\n         ranges::RANGE_PLUS_ONE,\n+        replace_consts::REPLACE_CONSTS,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,"}, {"sha": "511dbf7a40f98729ef155a598f4da7a359250183", "filename": "clippy_lints/src/replace_consts.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "patch": "@@ -0,0 +1,102 @@\n+use rustc::lint::*;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use utils::{match_def_path, span_lint_and_sugg};\n+\n+/// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and\n+/// `uX/iX::MIN/MAX`.\n+///\n+/// **Why is this bad?** `const fn`s exist\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// static FOO: AtomicIsize = AtomicIsize::new(0);\n+/// ```\n+declare_lint! {\n+    pub REPLACE_CONSTS,\n+    Allow,\n+    \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n+}\n+\n+pub struct ReplaceConsts;\n+\n+impl LintPass for ReplaceConsts {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REPLACE_CONSTS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        if_chain! {\n+            if let hir::ExprPath(ref qp) = expr.node;\n+            if let Def::Const(def_id) = cx.tables.qpath_def(qp, expr.hir_id);\n+            then {\n+                for &(const_path, repl_snip) in REPLACEMENTS {\n+                    if match_def_path(cx.tcx, def_id, const_path) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            REPLACE_CONSTS,\n+                            expr.span,\n+                            &format!(\"using `{}`\", const_path.last().expect(\"empty path\")),\n+                            \"try this\",\n+                            repl_snip.to_string(),\n+                        );\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+const REPLACEMENTS: &[(&[&str], &str)] = &[\n+    // Once\n+    (&[\"core\", \"sync\",  \"ONCE_INIT\"], \"Once::new()\"),\n+    // Atomic\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_BOOL_INIT\"],  \"AtomicBool::new(false)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_ISIZE_INIT\"], \"AtomicIsize::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I8_INIT\"],    \"AtomicI8::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I16_INIT\"],   \"AtomicI16::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I32_INIT\"],   \"AtomicI32::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I64_INIT\"],   \"AtomicI64::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_USIZE_INIT\"], \"AtomicUsize::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U8_INIT\"],    \"AtomicU8::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U16_INIT\"],   \"AtomicU16::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U32_INIT\"],   \"AtomicU32::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U64_INIT\"],   \"AtomicU64::new(0)\"),\n+    // Min\n+    (&[\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n+    (&[\"core\", \"i8\",    \"MIN\"], \"i8::min_value()\"),\n+    (&[\"core\", \"i16\",   \"MIN\"], \"i16::min_value()\"),\n+    (&[\"core\", \"i32\",   \"MIN\"], \"i32::min_value()\"),\n+    (&[\"core\", \"i64\",   \"MIN\"], \"i64::min_value()\"),\n+    (&[\"core\", \"i128\",  \"MIN\"], \"i128::min_value()\"),\n+    (&[\"core\", \"usize\", \"MIN\"], \"usize::min_value()\"),\n+    (&[\"core\", \"u8\",    \"MIN\"], \"u8::min_value()\"),\n+    (&[\"core\", \"u16\",   \"MIN\"], \"u16::min_value()\"),\n+    (&[\"core\", \"u32\",   \"MIN\"], \"u32::min_value()\"),\n+    (&[\"core\", \"u64\",   \"MIN\"], \"u64::min_value()\"),\n+    (&[\"core\", \"u128\",  \"MIN\"], \"u128::min_value()\"),\n+    // Max\n+    (&[\"core\", \"isize\", \"MAX\"], \"isize::max_value()\"),\n+    (&[\"core\", \"i8\",    \"MAX\"], \"i8::max_value()\"),\n+    (&[\"core\", \"i16\",   \"MAX\"], \"i16::max_value()\"),\n+    (&[\"core\", \"i32\",   \"MAX\"], \"i32::max_value()\"),\n+    (&[\"core\", \"i64\",   \"MAX\"], \"i64::max_value()\"),\n+    (&[\"core\", \"i128\",  \"MAX\"], \"i128::max_value()\"),\n+    (&[\"core\", \"usize\", \"MAX\"], \"usize::max_value()\"),\n+    (&[\"core\", \"u8\",    \"MAX\"], \"u8::max_value()\"),\n+    (&[\"core\", \"u16\",   \"MAX\"], \"u16::max_value()\"),\n+    (&[\"core\", \"u32\",   \"MAX\"], \"u32::max_value()\"),\n+    (&[\"core\", \"u64\",   \"MAX\"], \"u64::max_value()\"),\n+    (&[\"core\", \"u128\",  \"MAX\"], \"u128::max_value()\"),\n+];"}, {"sha": "31c58b4bb4e78aabd136cd873b8a20385878b61a", "filename": "tests/ui/replace_consts.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "patch": "@@ -0,0 +1,96 @@\n+#![feature(integer_atomics, i128, i128_type)]\n+#![allow(blacklisted_name)]\n+#![deny(replace_consts)]\n+use std::sync::atomic::*;\n+use std::sync::{ONCE_INIT, Once};\n+\n+fn bad() {\n+    // Once\n+    { let foo = ONCE_INIT; };\n+    // Atomic\n+    { let foo = ATOMIC_BOOL_INIT; };\n+    { let foo = ATOMIC_ISIZE_INIT; };\n+    { let foo = ATOMIC_I8_INIT; };\n+    { let foo = ATOMIC_I16_INIT; };\n+    { let foo = ATOMIC_I32_INIT; };\n+    { let foo = ATOMIC_I64_INIT; };\n+    { let foo = ATOMIC_USIZE_INIT; };\n+    { let foo = ATOMIC_U8_INIT; };\n+    { let foo = ATOMIC_U16_INIT; };\n+    { let foo = ATOMIC_U32_INIT; };\n+    { let foo = ATOMIC_U64_INIT; };\n+    // Min\n+    { let foo = std::isize::MIN; };\n+    { let foo = std::i8::MIN; };\n+    { let foo = std::i16::MIN; };\n+    { let foo = std::i32::MIN; };\n+    { let foo = std::i64::MIN; };\n+    { let foo = std::i128::MIN; };\n+    { let foo = std::usize::MIN; };\n+    { let foo = std::u8::MIN; };\n+    { let foo = std::u16::MIN; };\n+    { let foo = std::u32::MIN; };\n+    { let foo = std::u64::MIN; };\n+    { let foo = std::u128::MIN; };\n+    // Max\n+    { let foo = std::isize::MAX; };\n+    { let foo = std::i8::MAX; };\n+    { let foo = std::i16::MAX; };\n+    { let foo = std::i32::MAX; };\n+    { let foo = std::i64::MAX; };\n+    { let foo = std::i128::MAX; };\n+    { let foo = std::usize::MAX; };\n+    { let foo = std::u8::MAX; };\n+    { let foo = std::u16::MAX; };\n+    { let foo = std::u32::MAX; };\n+    { let foo = std::u64::MAX; };\n+    { let foo = std::u128::MAX; };\n+}\n+\n+fn good() {\n+    // Once\n+    { let foo = Once::new(); };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+fn main() {\n+    bad();\n+    good();\n+}"}, {"sha": "a8e3dd2d00eba1a49181a3e556a2d8d763491c4e", "filename": "tests/ui/replace_consts.stderr", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8505ee7028e00003e7e13c0f15ba9c2cf787f67c/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=8505ee7028e00003e7e13c0f15ba9c2cf787f67c", "patch": "@@ -0,0 +1,216 @@\n+error: using `ATOMIC_BOOL_INIT`\n+  --> $DIR/replace_consts.rs:11:17\n+   |\n+11 |     { let foo = ATOMIC_BOOL_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n+   |\n+note: lint level defined here\n+  --> $DIR/replace_consts.rs:3:9\n+   |\n+3  | #![deny(replace_consts)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: using `ATOMIC_ISIZE_INIT`\n+  --> $DIR/replace_consts.rs:12:17\n+   |\n+12 |     { let foo = ATOMIC_ISIZE_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n+\n+error: using `ATOMIC_I8_INIT`\n+  --> $DIR/replace_consts.rs:13:17\n+   |\n+13 |     { let foo = ATOMIC_I8_INIT; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n+\n+error: using `ATOMIC_I16_INIT`\n+  --> $DIR/replace_consts.rs:14:17\n+   |\n+14 |     { let foo = ATOMIC_I16_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n+\n+error: using `ATOMIC_I32_INIT`\n+  --> $DIR/replace_consts.rs:15:17\n+   |\n+15 |     { let foo = ATOMIC_I32_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n+\n+error: using `ATOMIC_I64_INIT`\n+  --> $DIR/replace_consts.rs:16:17\n+   |\n+16 |     { let foo = ATOMIC_I64_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n+\n+error: using `ATOMIC_USIZE_INIT`\n+  --> $DIR/replace_consts.rs:17:17\n+   |\n+17 |     { let foo = ATOMIC_USIZE_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n+\n+error: using `ATOMIC_U8_INIT`\n+  --> $DIR/replace_consts.rs:18:17\n+   |\n+18 |     { let foo = ATOMIC_U8_INIT; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n+\n+error: using `ATOMIC_U16_INIT`\n+  --> $DIR/replace_consts.rs:19:17\n+   |\n+19 |     { let foo = ATOMIC_U16_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n+\n+error: using `ATOMIC_U32_INIT`\n+  --> $DIR/replace_consts.rs:20:17\n+   |\n+20 |     { let foo = ATOMIC_U32_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n+\n+error: using `ATOMIC_U64_INIT`\n+  --> $DIR/replace_consts.rs:21:17\n+   |\n+21 |     { let foo = ATOMIC_U64_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:23:17\n+   |\n+23 |     { let foo = std::isize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:24:17\n+   |\n+24 |     { let foo = std::i8::MIN; };\n+   |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:25:17\n+   |\n+25 |     { let foo = std::i16::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:26:17\n+   |\n+26 |     { let foo = std::i32::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:27:17\n+   |\n+27 |     { let foo = std::i64::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:28:17\n+   |\n+28 |     { let foo = std::i128::MIN; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:29:17\n+   |\n+29 |     { let foo = std::usize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:30:17\n+   |\n+30 |     { let foo = std::u8::MIN; };\n+   |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:31:17\n+   |\n+31 |     { let foo = std::u16::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:32:17\n+   |\n+32 |     { let foo = std::u32::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:33:17\n+   |\n+33 |     { let foo = std::u64::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:34:17\n+   |\n+34 |     { let foo = std::u128::MIN; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:36:17\n+   |\n+36 |     { let foo = std::isize::MAX; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:37:17\n+   |\n+37 |     { let foo = std::i8::MAX; };\n+   |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:38:17\n+   |\n+38 |     { let foo = std::i16::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:39:17\n+   |\n+39 |     { let foo = std::i32::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:40:17\n+   |\n+40 |     { let foo = std::i64::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:41:17\n+   |\n+41 |     { let foo = std::i128::MAX; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:42:17\n+   |\n+42 |     { let foo = std::usize::MAX; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:43:17\n+   |\n+43 |     { let foo = std::u8::MAX; };\n+   |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:44:17\n+   |\n+44 |     { let foo = std::u16::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:45:17\n+   |\n+45 |     { let foo = std::u32::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:46:17\n+   |\n+46 |     { let foo = std::u64::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:47:17\n+   |\n+47 |     { let foo = std::u128::MAX; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n+"}]}