{"sha": "7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNWU5NWM5YWMzZmEyZWFiNGIyNDEzYmRmNWY1Yjg2NzJlOTRhODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T18:16:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T18:16:13Z"}, "message": "Auto merge of #1276 - RalfJung:scalar-precise-sizes, r=RalfJung\n\nConstruct Scalar with precise sizes", "tree": {"sha": "db99c86f12e83d8d09c395928070bcfb9e5bda18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db99c86f12e83d8d09c395928070bcfb9e5bda18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "html_url": "https://github.com/rust-lang/rust/commit/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad14b684cc0a2aa9d9519786deec7475b78d4878", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad14b684cc0a2aa9d9519786deec7475b78d4878", "html_url": "https://github.com/rust-lang/rust/commit/ad14b684cc0a2aa9d9519786deec7475b78d4878"}, {"sha": "d6795a77b4d18c96c3c967a0d05d90f20b49d0d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6795a77b4d18c96c3c967a0d05d90f20b49d0d2", "html_url": "https://github.com/rust-lang/rust/commit/d6795a77b4d18c96c3c967a0d05d90f20b49d0d2"}], "stats": {"total": 137, "additions": 66, "deletions": 71}, "files": [{"sha": "9838bd1e8cc24d4f6b7e14f36ec197a8804ee246", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -6,7 +6,7 @@ use std::convert::TryFrom;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n-use rustc::ty::layout::{LayoutOf, Size};\n+use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, TyCtxt};\n use rustc_hir::def_id::DefId;\n \n@@ -96,7 +96,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // First argument: pointer to `main()`.\n     let main_ptr = ecx.memory.create_fn_alloc(FnVal::Instance(main_instance));\n     // Second argument (argc): length of `config.args`.\n-    let argc = Scalar::from_uint(u64::try_from(config.args.len()).unwrap(), ecx.pointer_size());\n+    let argc = Scalar::from_machine_usize(u64::try_from(config.args.len()).unwrap(), &ecx);\n     // Third argument (`argv`): created from `config.args`.\n     let argv = {\n         // Put each argument in memory, collect pointers.\n@@ -152,10 +152,9 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into());\n             ecx.machine.cmd_line = Some(cmd_place.ptr);\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n-            let char_size = Size::from_bytes(2);\n             for (idx, &c) in cmd_utf16.iter().enumerate() {\n                 let place = ecx.mplace_field(cmd_place, idx)?;\n-                ecx.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n+                ecx.write_scalar(Scalar::from_u16(c), place.into())?;\n             }\n         }\n         argv"}, {"sha": "f7bc4d195caba9caf24a5b34650b3a458b0cc191", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -92,7 +92,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Test if this immediate equals 0.\n     fn is_null(&self, val: Scalar<Tag>) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_ref();\n-        let null = Scalar::from_int(0, this.memory.pointer_size());\n+        let null = Scalar::ptr_null(this);\n         this.ptr_eq(val, null)\n     }\n "}, {"sha": "84329b8fd3cd6a5c10a15db89b16f8f9b9e060f4", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -130,7 +130,7 @@ impl MemoryExtra {\n                 // This should be all-zero, pointer-sized.\n                 let layout = this.layout_of(this.tcx.types.usize)?;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n-                this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n+                this.write_scalar(Scalar::from_machine_usize(0, this), place.into())?;\n                 Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n                 // \"environ\"\n                 Self::add_extern_static(this, \"environ\", this.machine.env_vars.environ.unwrap().ptr);\n@@ -316,10 +316,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let layout = ecx.layout_of(dest.layout.ty.builtin_deref(false).unwrap().ty)?;\n         // First argument: `size`.\n         // (`0` is allowed here -- this is expected to be handled by the lang item).\n-        let size = Scalar::from_uint(layout.size.bytes(), ecx.pointer_size());\n+        let size = Scalar::from_machine_usize(layout.size.bytes(), ecx);\n \n         // Second argument: `align`.\n-        let align = Scalar::from_uint(layout.align.abi.bytes(), ecx.pointer_size());\n+        let align = Scalar::from_machine_usize(layout.align.abi.bytes(), ecx);\n \n         // Call the `exchange_malloc` lang item.\n         let malloc = ecx.tcx.lang_items().exchange_malloc_fn().unwrap();"}, {"sha": "98f1e7e3cfa32040dd7089c9f78b72cc96b7c967", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         name_op: OpTy<'tcx, Tag>, // LPCWSTR\n         buf_op: OpTy<'tcx, Tag>,  // LPWSTR\n         size_op: OpTy<'tcx, Tag>, // DWORD\n-    ) -> InterpResult<'tcx, u64> {\n+    ) -> InterpResult<'tcx, u32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n \n@@ -124,17 +124,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n                 // `buf_size` represents the size in characters.\n-                let buf_size = u64::try_from(this.read_scalar(size_op)?.to_u32()?).unwrap();\n+                let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n                 let (success, len) = this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?;\n \n                 if success {\n                     // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n                     // not including the terminating null character.\n-                    len\n+                    u32::try_from(len).unwrap()\n                 } else {\n                     // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n                     // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n-                    len + 1\n+                    u32::try_from(len).unwrap().checked_add(1).unwrap()\n                 }\n             }\n             None => {\n@@ -337,14 +337,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // This is memory backing an extern static, hence `Machine`, not `Env`.\n             let layout = this.layout_of(this.tcx.types.usize)?;\n             let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n-            this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n             this.machine.env_vars.environ = Some(place);\n         }\n \n         // Collect all the pointers to each variable in a vector.\n         let mut vars: Vec<Scalar<Tag>> = this.machine.env_vars.map.values().map(|&ptr| ptr.into()).collect();\n         // Add the trailing null pointer.\n-        vars.push(Scalar::from_int(0, this.pointer_size()));\n+        vars.push(Scalar::ptr_null(this));\n         // Make an array with all these pointers inside Miri.\n         let tcx = this.tcx;\n         let vars_layout ="}, {"sha": "3e21e1d453fcf90f1825cf64e0fb031d8ed06406", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn malloc(&mut self, size: u64, zero_init: bool, kind: MiriMemoryKind) -> Scalar<Tag> {\n         let this = self.eval_context_mut();\n         if size == 0 {\n-            Scalar::from_int(0, this.pointer_size())\n+            Scalar::ptr_null(this)\n         } else {\n             let align = this.min_align(size, kind);\n             let ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into());\n@@ -78,7 +78,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let new_align = this.min_align(new_size, kind);\n         if this.is_null(old_ptr)? {\n             if new_size == 0 {\n-                Ok(Scalar::from_int(0, this.pointer_size()))\n+                Ok(Scalar::ptr_null(this))\n             } else {\n                 let new_ptr =\n                     this.memory.allocate(Size::from_bytes(new_size), new_align, kind.into());\n@@ -88,7 +88,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let old_ptr = this.force_ptr(old_ptr)?;\n             if new_size == 0 {\n                 this.memory.deallocate(old_ptr, None, kind.into())?;\n-                Ok(Scalar::from_int(0, this.pointer_size()))\n+                Ok(Scalar::ptr_null(this))\n             } else {\n                 let new_ptr = this.memory.reallocate(\n                     old_ptr,\n@@ -296,7 +296,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 };\n \n-                this.write_scalar(Scalar::from_int(result, Size::from_bits(32)), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n@@ -334,7 +334,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n-                this.write_scalar(Scalar::from_uint(u64::try_from(n).unwrap(), dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n             }\n \n             // math functions"}, {"sha": "1a9e91eded7fea000c1c5532fc38283203380820", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -26,33 +26,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"unsetenv\" => {\n                 let result = this.unsetenv(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"setenv\" => {\n                 let result = this.setenv(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"getcwd\" => {\n                 let result = this.getcwd(args[0], args[1])?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"chdir\" => {\n                 let result = this.chdir(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims\n             \"open\" | \"open64\" => {\n                 let result = this.open(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fcntl\" => {\n                 let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"read\" => {\n                 let result = this.read(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n@@ -85,35 +85,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.write(args[0], args[1], args[2])?\n                 };\n                 // Now, `result` is the value we return back to the program.\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"unlink\" => {\n                 let result = this.unlink(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"symlink\" => {\n                 let result = this.symlink(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rename\" => {\n                 let result = this.rename(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mkdir\" => {\n                 let result = this.mkdir(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rmdir\" => {\n                 let result = this.rmdir(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"closedir\" => {\n                 let result = this.closedir(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lseek\" | \"lseek64\" => {\n                 let result = this.lseek64(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n+                this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n \n             // Allocation\n@@ -165,8 +166,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name = this.read_scalar(args[0])?.to_i32()?;\n \n                 let sysconfs = &[\n-                    (\"_SC_PAGESIZE\", Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n-                    (\"_SC_NPROCESSORS_ONLN\", Scalar::from_int(NUM_CPUS, dest.layout.size)),\n+                    (\"_SC_PAGESIZE\", Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_ONLN\", Scalar::from_int(NUM_CPUS, this.pointer_size())),\n                 ];\n                 let mut result = None;\n                 for &(sysconf_name, value) in sysconfs {"}, {"sha": "f56d5b3959c75c621cdf27b0cc7de84a438c1b9a", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -24,15 +24,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // in the `posix` module.\n             \"close\" => {\n                 let result = this.close(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir\" => {\n                 let result = this.opendir(args[0])?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir64_r\" => {\n                 let result = this.linux_readdir64_r(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             // Linux-only\n             \"posix_fadvise\" => {\n@@ -48,7 +48,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"clock_gettime\" => {\n                 // This is a POSIX function but it has only been tested on linux.\n                 let result = this.clock_gettime(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Querying system information\n@@ -59,11 +59,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let size_place = this.deref_operand(args[2])?;\n \n                 this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, addr_place.layout.size),\n+                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n                     addr_place.into(),\n                 )?;\n                 this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, size_place.layout.size),\n+                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n                     size_place.into(),\n                 )?;\n \n@@ -93,7 +93,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     id if id == sys_statx => {\n                         // The first argument is the syscall id, so skip over it.\n                         let result = this.linux_statx(args[1], args[2], args[3], args[4], args[5])?;\n-                        this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                        this.write_scalar(Scalar::from_machine_isize(result.into(), this), dest)?;\n                     }\n                     id => throw_unsup_format!(\"miri does not support syscall ID {}\", id),\n                 }\n@@ -110,7 +110,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: we just return an error; `num_cpus` then falls back to `sysconf`.\n                 let einval = this.eval_libc(\"EINVAL\")?;\n                 this.set_last_error(einval)?;\n-                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(-1), dest)?;\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialziation code to work.\n@@ -140,6 +140,6 @@ fn getrandom<'tcx>(\n     let _flags = this.read_scalar(args[2])?.to_i32()?;\n \n     this.gen_random(ptr, len)?;\n-    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+    this.write_scalar(Scalar::from_machine_usize(len, this), dest)?;\n     Ok(())\n }"}, {"sha": "cc58924a54abcac4e25de4d285eef76630a80538", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -22,27 +22,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // File related shims\n             \"close$NOCANCEL\" => {\n                 let result = this.close(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"stat$INODE64\" => {\n                 let result = this.macos_stat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lstat$INODE64\" => {\n                 let result = this.macos_lstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fstat$INODE64\" => {\n                 let result = this.macos_fstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir$INODE64\" => {\n                 let result = this.opendir(args[0])?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir_r$INODE64\" => {\n                 let result = this.macos_readdir_r(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Environment related shims\n@@ -53,11 +53,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Time related shims\n             \"gettimeofday\" => {\n                 let result = this.gettimeofday(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mach_absolute_time\" => {\n                 let result = this.mach_absolute_time()?;\n-                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_u64(result), dest)?;\n             }\n \n             // Access to command-line arguments\n@@ -79,12 +79,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n                 let _thread = this.read_scalar(args[0])?.not_undef()?;\n-                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let _thread = this.read_scalar(args[0])?.not_undef()?;\n-                let stack_size = Scalar::from_uint(STACK_SIZE, dest.layout.size);\n+                let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }\n "}, {"sha": "7f3f1d0c2d2ec3232ebdcc1883aa5e2d02253b89", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -22,12 +22,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n                 let result = this.GetEnvironmentVariableW(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n \n             \"SetEnvironmentVariableW\" => {\n                 let result = this.SetEnvironmentVariableW(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"GetEnvironmentStringsW\" => {\n@@ -45,7 +45,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let which = this.read_scalar(args[0])?.to_i32()?;\n                 // We just make this the identity function, so we know later in `WriteFile`\n                 // which one it is.\n-                this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(which.into(), this), dest)?;\n             }\n             \"WriteFile\" => {\n                 let handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n@@ -74,7 +74,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n                 // Return whether this was a success.\n                 this.write_scalar(\n-                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n+                    Scalar::from_i32(if written.is_some() { 1 } else { 0 }),\n                     dest,\n                 )?;\n             }\n@@ -93,7 +93,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let _flags = this.read_scalar(args[1])?.to_u32()?;\n                 let ptr = this.read_scalar(args[2])?.not_undef()?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n-                this.write_scalar(Scalar::from_int(1, Size::from_bytes(4)), dest)?;\n+                this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n             \"HeapReAlloc\" => {\n                 let _handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n@@ -146,7 +146,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n \n                 // Return success (`1`).\n-                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n \n             // Access to command-line arguments\n@@ -191,7 +191,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These shims are enabled only when the caller is in the standard library.\n             \"GetProcessHeap\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 // Just fake a HANDLE\n-                this.write_scalar(Scalar::from_int(1, this.pointer_size()), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n             | \"GetModuleHandleW\"\n             | \"GetProcAddress\"\n@@ -202,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"AddVectoredExceptionHandler\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n-                this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n             | \"InitializeCriticalSection\"\n             | \"EnterCriticalSection\""}, {"sha": "debf412bdd413bbad2854e53f66c3e20bb4c268b", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -860,7 +860,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e)?;\n-                Ok(Scalar::from_machine_usize(0, this))\n+                Ok(Scalar::ptr_null(this))\n             }\n         }\n     }"}, {"sha": "fda52429e515a46163666460f0eec8b11163f3ef", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -2,7 +2,6 @@ use std::iter;\n use std::convert::TryFrom;\n \n use rustc::mir;\n-use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n use rustc::ty;\n use rustc::ty::layout::{Align, LayoutOf};\n use rustc_apfloat::Float;\n@@ -388,8 +387,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 let align = layout.align.pref.bytes();\n-                let ptr_size = this.pointer_size();\n-                let align_val = Scalar::from_uint(align, ptr_size);\n+                let align_val = Scalar::from_machine_usize(align, this);\n                 this.write_scalar(align_val, dest)?;\n             }\n \n@@ -471,8 +469,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let (size, _) = this\n                     .size_and_align_of_mplace(mplace)?\n                     .expect(\"size_of_val called on extern type\");\n-                let ptr_size = this.pointer_size();\n-                this.write_scalar(Scalar::from_uint(size.bytes(), ptr_size), dest)?;\n+                this.write_scalar(Scalar::from_machine_usize(size.bytes(), this), dest)?;\n             }\n \n             #[rustfmt::skip]\n@@ -483,8 +480,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let (_, align) = this\n                     .size_and_align_of_mplace(mplace)?\n                     .expect(\"size_of_val called on extern type\");\n-                let ptr_size = this.pointer_size();\n-                this.write_scalar(Scalar::from_uint(align.bytes(), ptr_size), dest)?;\n+                this.write_scalar(Scalar::from_machine_usize(align.bytes(), this), dest)?;\n             }\n \n             \"write_bytes\" => {"}, {"sha": "1926cf93b6872c795c1f6029143e17025f4c1ce4", "filename": "src/shims/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "patch": "@@ -76,7 +76,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n \n         // Default: no result.\n-        let mut result = this.truncate(u128::MAX, dest.layout);\n+        let mut result = this.usize_max();\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             // Only do anything if we can identify the allocation this goes to.\n             let cur_align =\n@@ -85,15 +85,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // If the allocation alignment is at least the required alignment we use the\n                 // libcore implementation.\n                 // FIXME: is this correct in case of truncation?\n-                result = u128::try_from(\n+                result = u64::try_from(\n                     (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n                         .align_offset(usize::try_from(req_align).unwrap())\n                 ).unwrap();\n             }\n         }\n \n         // Return result, and jump to caller.\n-        this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+        this.write_scalar(Scalar::from_machine_usize(result, this), dest)?;\n         this.go_to_block(ret);\n         Ok(())\n     }"}]}