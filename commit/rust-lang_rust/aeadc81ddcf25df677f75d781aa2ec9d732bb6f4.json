{"sha": "aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYWRjODFkZGNmMjVkZjY3N2Y3NWQ3ODFhYTJlYzlkNzMyYmI2ZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-02T23:15:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-04T18:38:26Z"}, "message": "Build compiler-rt and sanitizers only once", "tree": {"sha": "d209490ee1c2b510925e19c754ce4b521653c240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d209490ee1c2b510925e19c754ce4b521653c240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "html_url": "https://github.com/rust-lang/rust/commit/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c8afd28d45018f3c3af9dec569c36bd4dea10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c8afd28d45018f3c3af9dec569c36bd4dea10a", "html_url": "https://github.com/rust-lang/rust/commit/a7c8afd28d45018f3c3af9dec569c36bd4dea10a"}], "stats": {"total": 209, "additions": 123, "deletions": 86}, "files": [{"sha": "2aac5ba6a1092af0d7845314828d62aadee77b60", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -12,7 +12,7 @@\n \n extern crate filetime;\n \n-use std::fs;\n+use std::{fs, env};\n use std::process::{Command, Stdio};\n use std::path::{Path, PathBuf};\n \n@@ -166,6 +166,41 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     }\n }\n \n+pub struct NativeLibBoilerplate {\n+    pub skip_build: bool,\n+    pub src_dir: PathBuf,\n+    pub out_dir: PathBuf,\n+    pub timestamp: PathBuf,\n+}\n+\n+pub fn native_lib_boilerplate(src_name: &str,\n+                              out_name: &str,\n+                              link_name: &str,\n+                              timestamp_name: &str,\n+                              search_subdir: &str)\n+                              -> NativeLibBoilerplate {\n+    let current_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+    let src_dir = current_dir.join(\"..\").join(src_name);\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+\n+    let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n+    let out_dir = PathBuf::from(out_dir).join(out_name);\n+    let _ = fs::create_dir_all(&out_dir);\n+    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n+\n+    let timestamp = out_dir.join(timestamp_name);\n+    let skip_build = up_to_date(Path::new(\"build.rs\"), &timestamp) &&\n+                     up_to_date(&src_dir, &timestamp);\n+\n+    NativeLibBoilerplate {\n+        skip_build: skip_build,\n+        src_dir: src_dir,\n+        out_dir: out_dir,\n+        timestamp: timestamp,\n+    }\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "cc1e74ccbbf669ce2d1643013b9548d3b34b57b2", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -15,10 +15,10 @@ extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::{self, File};\n-use std::path::{Path, PathBuf};\n+use std::fs::File;\n+use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     // FIXME: This is a hack to support building targets that don't\n@@ -59,20 +59,10 @@ fn main() {\n         return;\n     }\n \n-    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n-    let build_dir = PathBuf::from(build_dir).join(\"jemalloc\");\n-    let _ = fs::create_dir_all(&build_dir);\n-\n-    if target.contains(\"windows\") {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc\");\n-    } else {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc_pic\");\n-    }\n-    println!(\"cargo:rustc-link-search=native={}/lib\", build_dir.display());\n-    let src_dir = env::current_dir().unwrap().join(\"../jemalloc\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n-    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n-    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n+    let link_name = if target.contains(\"windows\") { \"jemalloc\" } else { \"jemalloc_pic\" };\n+    let native = native_lib_boilerplate(\"jemalloc\", \"jemalloc\", link_name,\n+                                        \"rustbuild.timestamp\", \"lib\");\n+    if native.skip_build {\n         return\n     }\n \n@@ -86,12 +76,12 @@ fn main() {\n         .join(\" \");\n \n     let mut cmd = Command::new(\"sh\");\n-    cmd.arg(src_dir.join(\"configure\")\n-                   .to_str()\n-                   .unwrap()\n-                   .replace(\"C:\\\\\", \"/c/\")\n-                   .replace(\"\\\\\", \"/\"))\n-       .current_dir(&build_dir)\n+    cmd.arg(native.src_dir.join(\"configure\")\n+                          .to_str()\n+                          .unwrap()\n+                          .replace(\"C:\\\\\", \"/c/\")\n+                          .replace(\"\\\\\", \"/\"))\n+       .current_dir(&native.out_dir)\n        .env(\"CC\", compiler.path())\n        .env(\"EXTRA_CFLAGS\", cflags.clone())\n        // jemalloc generates Makefile deps using GCC's \"-MM\" flag. This means\n@@ -164,7 +154,7 @@ fn main() {\n     run(&mut cmd);\n \n     let mut make = Command::new(build_helper::make(&host));\n-    make.current_dir(&build_dir)\n+    make.current_dir(&native.out_dir)\n         .arg(\"build_lib_static\");\n \n     // mingw make seems... buggy? unclear...\n@@ -186,5 +176,5 @@ fn main() {\n             .compile(\"libpthread_atfork_dummy.a\");\n     }\n \n-    t!(File::create(&timestamp));\n+    t!(File::create(&native.timestamp));\n }"}, {"sha": "ff5111a15be1fced5adda5429e789e141c05db65", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -39,6 +39,7 @@ extern crate gcc;\n use std::collections::BTreeMap;\n use std::env;\n use std::path::Path;\n+use build_helper::native_lib_boilerplate;\n \n struct Sources {\n     // SYMBOL -> PATH TO SOURCE\n@@ -80,7 +81,17 @@ fn main() {\n         return;\n     }\n \n+    // Can't reuse `sources` list for the freshness check becuse it doesn't contain header files.\n+    // Use the produced library itself as a timestamp.\n+    let out_name = \"libcompiler-rt.a\";\n+    let native = native_lib_boilerplate(\"compiler-rt\", \"compiler-rt\", \"compiler-rt\",\n+                                        out_name, \".\");\n+    if native.skip_build {\n+        return\n+    }\n+\n     let cfg = &mut gcc::Config::new();\n+    cfg.out_dir(native.out_dir);\n \n     if target.contains(\"msvc\") {\n         // Don't pull in extra libraries on MSVC\n@@ -405,8 +416,5 @@ fn main() {\n         cfg.file(Path::new(\"../compiler-rt/lib/builtins\").join(src));\n     }\n \n-    // Can't reuse `sources` list becuse it doesn't contain header files.\n-    build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../compiler-rt\"));\n-\n-    cfg.compile(\"libcompiler-rt.a\");\n+    cfg.compile(out_name);\n }"}, {"sha": "4772d1457750da1139cd03c5acb9018cd5078e4c", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -8,30 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use std::fs::File;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = native_lib_boilerplate(\"compiler-rt\", \"asan\", \"clang_rt.asan-x86_64\",\n+                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n+        if native.skip_build {\n+            return\n+        }\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"asan\")\n             .build();\n \n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.asan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n+        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "b71493db49ac939f282e0d968fa44244de56e142", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -8,30 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use std::fs::File;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = native_lib_boilerplate(\"compiler-rt\", \"lsan\", \"clang_rt.lsan-x86_64\",\n+                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n+        if native.skip_build {\n+            return\n+        }\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"lsan\")\n             .build();\n \n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.lsan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n+        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "07c4e807e7b0839caf5eaec3bcb196f980e20fc2", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -8,30 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use std::fs::File;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = native_lib_boilerplate(\"compiler-rt\", \"msan\", \"clang_rt.msan-x86_64\",\n+                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n+        if native.skip_build {\n+            return\n+        }\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"msan\")\n             .build();\n \n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.msan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n+        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "3bd30fd203c8c64d50df8460960beca5e4f5cd7f", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -8,30 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use std::fs::File;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = native_lib_boilerplate(\"compiler-rt\", \"tsan\", \"clang_rt.tsan-x86_64\",\n+                                            \"rustbuild.timestamp\", \"build/lib/linux\");\n+        if native.skip_build {\n+            return\n+        }\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"tsan\")\n             .build();\n \n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.tsan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n+        t!(File::create(&native.timestamp));\n     }\n }"}, {"sha": "ef1d3c84f2a8d8e591dfef81148811f6a4e49ed9", "filename": "src/libstd/build.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeadc81ddcf25df677f75d781aa2ec9d732bb6f4/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=aeadc81ddcf25df677f75d781aa2ec9d732bb6f4", "patch": "@@ -15,10 +15,9 @@ extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::{self, File};\n-use std::path::{Path, PathBuf};\n+use std::fs::File;\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -68,16 +67,9 @@ fn main() {\n }\n \n fn build_libbacktrace(host: &str, target: &str) {\n-    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n-    let build_dir = PathBuf::from(build_dir).join(\"libbacktrace\");\n-    let _ = fs::create_dir_all(&build_dir);\n-\n-    println!(\"cargo:rustc-link-lib=static=backtrace\");\n-    println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n-    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n-    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n-    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n+    let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\",\n+                                        \"rustbuild.timestamp\", \".libs\");\n+    if native.skip_build {\n         return\n     }\n \n@@ -88,10 +80,10 @@ fn build_libbacktrace(host: &str, target: &str) {\n                              .collect::<Vec<_>>().join(\" \");\n     cflags.push_str(\" -fvisibility=hidden\");\n     run(Command::new(\"sh\")\n-                .current_dir(&build_dir)\n-                .arg(src_dir.join(\"configure\").to_str().unwrap()\n-                            .replace(\"C:\\\\\", \"/c/\")\n-                            .replace(\"\\\\\", \"/\"))\n+                .current_dir(&native.out_dir)\n+                .arg(native.src_dir.join(\"configure\").to_str().unwrap()\n+                                   .replace(\"C:\\\\\", \"/c/\")\n+                                   .replace(\"\\\\\", \"/\"))\n                 .arg(\"--with-pic\")\n                 .arg(\"--disable-multilib\")\n                 .arg(\"--disable-shared\")\n@@ -104,9 +96,9 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .env(\"CFLAGS\", cflags));\n \n     run(Command::new(build_helper::make(host))\n-                .current_dir(&build_dir)\n-                .arg(format!(\"INCDIR={}\", src_dir.display()))\n+                .current_dir(&native.out_dir)\n+                .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n \n-    t!(File::create(&timestamp));\n+    t!(File::create(&native.timestamp));\n }"}]}