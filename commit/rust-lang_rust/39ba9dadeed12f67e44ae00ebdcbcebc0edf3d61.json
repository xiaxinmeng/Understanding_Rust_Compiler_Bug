{"sha": "39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "node_id": "C_kwDOAAsO6NoAKDM5YmE5ZGFkZWVkMTJmNjdlNDRhZTAwZWJkY2JjZWJjMGVkZjNkNjE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-28T18:13:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-19T18:55:04Z"}, "message": "Support `--print native-static-libs` with rust dylibs", "tree": {"sha": "5b69d439dcab1bbc81f1ae21212065e49096f319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b69d439dcab1bbc81f1ae21212065e49096f319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "html_url": "https://github.com/rust-lang/rust/commit/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e1fae118bce2530ef34e50f666b46cc2070e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e1fae118bce2530ef34e50f666b46cc2070e41", "html_url": "https://github.com/rust-lang/rust/commit/09e1fae118bce2530ef34e50f666b46cc2070e41"}], "stats": {"total": 100, "additions": 76, "deletions": 24}, "files": [{"sha": "5144319752a4c3d3c506fdf8b881ce081789e8ed", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "patch": "@@ -544,12 +544,38 @@ fn link_staticlib<'a>(\n \n     ab.build(out_filename);\n \n-    if !all_native_libs.is_empty() {\n-        if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n-            print_native_static_libs(sess, &all_native_libs);\n+    let crates = codegen_results.crate_info.used_crates.iter();\n+\n+    let fmts = codegen_results\n+        .crate_info\n+        .dependency_formats\n+        .iter()\n+        .find_map(|&(ty, ref list)| if ty == CrateType::Staticlib { Some(list) } else { None })\n+        .expect(\"no dependency formats for staticlib\");\n+\n+    let mut all_rust_dylibs = vec![];\n+    for &cnum in crates {\n+        match fmts.get(cnum.as_usize() - 1) {\n+            Some(&Linkage::Dynamic) => {}\n+            _ => continue,\n+        }\n+        let crate_name = codegen_results.crate_info.crate_name[&cnum];\n+        let used_crate_source = &codegen_results.crate_info.used_crate_source[&cnum];\n+        if let Some((path, _)) = &used_crate_source.dylib {\n+            all_rust_dylibs.push(&**path);\n+        } else {\n+            if used_crate_source.rmeta.is_some() {\n+                sess.emit_fatal(errors::LinkRlibError::OnlyRmetaFound { crate_name });\n+            } else {\n+                sess.emit_fatal(errors::LinkRlibError::NotFound { crate_name });\n+            }\n         }\n     }\n \n+    if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n+        print_native_static_libs(sess, &all_native_libs, &all_rust_dylibs);\n+    }\n+\n     Ok(())\n }\n \n@@ -1291,8 +1317,12 @@ enum RlibFlavor {\n     StaticlibBase,\n }\n \n-fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n-    let lib_args: Vec<_> = all_native_libs\n+fn print_native_static_libs(\n+    sess: &Session,\n+    all_native_libs: &[NativeLib],\n+    all_rust_dylibs: &[&Path],\n+) {\n+    let mut lib_args: Vec<_> = all_native_libs\n         .iter()\n         .filter(|l| relevant_lib(sess, l))\n         .filter_map(|lib| {\n@@ -1322,6 +1352,41 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n             }\n         })\n         .collect();\n+    for path in all_rust_dylibs {\n+        // FIXME deduplicate with add_dynamic_crate\n+\n+        // Just need to tell the linker about where the library lives and\n+        // what its name is\n+        let parent = path.parent();\n+        if let Some(dir) = parent {\n+            let dir = fix_windows_verbatim_for_gcc(dir);\n+            if sess.target.is_like_msvc {\n+                let mut arg = String::from(\"/LIBPATH:\");\n+                arg.push_str(&dir.display().to_string());\n+                lib_args.push(arg);\n+            } else {\n+                lib_args.push(\"-L\".to_owned());\n+                lib_args.push(dir.display().to_string());\n+            }\n+        }\n+        let stem = path.file_stem().unwrap().to_str().unwrap();\n+        // Convert library file-stem into a cc -l argument.\n+        let prefix = if stem.starts_with(\"lib\") && !sess.target.is_like_windows { 3 } else { 0 };\n+        let lib = &stem[prefix..];\n+        let path = parent.unwrap_or_else(|| Path::new(\"\"));\n+        if sess.target.is_like_msvc {\n+            // When producing a dll, the MSVC linker may not actually emit a\n+            // `foo.lib` file if the dll doesn't actually export any symbols, so we\n+            // check to see if the file is there and just omit linking to it if it's\n+            // not present.\n+            let name = format!(\"{}.dll.lib\", lib);\n+            if path.join(&name).exists() {\n+                lib_args.push(name);\n+            }\n+        } else {\n+            lib_args.push(format!(\"-l{}\", lib));\n+        }\n+    }\n     if !lib_args.is_empty() {\n         sess.emit_note(errors::StaticLibraryNativeArtifacts);\n         // Prefix for greppability"}, {"sha": "faa45243104780c640dbcfee36816601790e4efb", "filename": "tests/run-make/staticlib-dylib-linkage/Makefile", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile?ref=39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "patch": "@@ -1,27 +1,14 @@\n include ../tools.mk\n \n-TARGET_SYSROOT := $(shell $(RUSTC) --print sysroot)/lib/rustlib/$(TARGET)/lib\n+all:\n+\t$(RUSTC) -C prefer-dynamic bar.rs\n+\t$(RUSTC) foo.rs --crate-type staticlib --print native-static-libs 2>&1 | grep 'note: native-static-libs: ' | sed 's/note: native-static-libs: \\(.*\\)/\\1/' > $(TMPDIR)/libs.txt\n+\tcat $(TMPDIR)/libs.txt\n \n ifdef IS_MSVC\n-LIBSTD := $(wildcard $(TARGET_SYSROOT)/libstd-*.dll.lib)\n+\t$(CC) $(CFLAGS) foo.c $(TMPDIR)/foo.lib $$(cat $(TMPDIR)/libs.txt) $(call OUT_EXE,foo)\n else\n-LIBSTD := $(wildcard $(TARGET_SYSROOT)/$(call DYLIB_GLOB,std))\n-STD := $(basename $(patsubst lib%,%, $(notdir $(LIBSTD))))\n+\t$(CC) $(CFLAGS) foo.c -L $(TMPDIR) -lfoo $$(cat $(TMPDIR)/libs.txt) -o $(call RUN_BINFILE,foo)\n endif\n \n-all: $(call RUN_BINFILE,foo)\n \t$(call RUN,foo)\n-\n-ifdef IS_MSVC\n-CLIBS := $(TMPDIR)/foo.lib $(TMPDIR)/bar.dll.lib $(LIBSTD)\n-$(call RUN_BINFILE,foo): $(call STATICLIB,foo)\n-\t$(CC) $(CFLAGS) foo.c $(CLIBS) $(call OUT_EXE,foo)\n-else\n-CLIBS := $(TMPDIR)/libfoo.a -lbar -l$(STD) -L $(TMPDIR) -L $(TARGET_SYSROOT)\n-$(call RUN_BINFILE,foo): $(call STATICLIB,foo)\n-\t$(CC) $(CFLAGS) foo.c $(CLIBS) -o $(call RUN_BINFILE,foo)\n-endif\n-\n-$(call STATICLIB,foo):\n-\t$(RUSTC) -C prefer-dynamic bar.rs\n-\t$(RUSTC) foo.rs"}]}