{"sha": "a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "node_id": "C_kwDOAAsO6NoAKGE5YjJiZmI1ZWRiZTg3OWIzYmQyMTk4NmMzZGE5OTdjMjE3MzdhYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T03:08:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T03:08:47Z"}, "message": "Auto merge of #89937 - JohnTitor:fix-89875, r=Amanieu\n\nProperly check `target_features` not to trigger an assertion\n\nFixes #89875\nI think it should be a condition instead of an assertion to check if it's a register as it's possible that `reg` is a register class.\nAlso, this isn't related to the issue directly, but `is_target_supported` doesn't check `target_features` attributes. Is there any way to check it on rustc_codegen_llvm?\n\nr? `@Amanieu`", "tree": {"sha": "641c403918e18a5cbec0c17cf4b40c7eb14c4acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641c403918e18a5cbec0c17cf4b40c7eb14c4acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "html_url": "https://github.com/rust-lang/rust/commit/a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e269e6bf47f40c9046cd44ab787881d700099252", "url": "https://api.github.com/repos/rust-lang/rust/commits/e269e6bf47f40c9046cd44ab787881d700099252", "html_url": "https://github.com/rust-lang/rust/commit/e269e6bf47f40c9046cd44ab787881d700099252"}, {"sha": "12647eab7945df1ceddd4d191cdb489abfb05276", "url": "https://api.github.com/repos/rust-lang/rust/commits/12647eab7945df1ceddd4d191cdb489abfb05276", "html_url": "https://github.com/rust-lang/rust/commit/12647eab7945df1ceddd4d191cdb489abfb05276"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "d0da88f1cc095163e82ebef41dd2df9a95eea2e3", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -11,8 +11,8 @@ use std::fmt::Write;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     crate fn lower_inline_asm(&mut self, sp: Span, asm: &InlineAsm) -> &'hir hir::InlineAsm<'hir> {\n-        // Rustdoc needs to support asm! from foriegn architectures: don't try\n-        // lowering the register contraints in this case.\n+        // Rustdoc needs to support asm! from foreign architectures: don't try\n+        // lowering the register constraints in this case.\n         let asm_arch = if self.sess.opts.actually_rustdoc { None } else { self.sess.asm_arch };\n         if asm_arch.is_none() && !self.sess.opts.actually_rustdoc {\n             struct_span_err!(self.sess, sp, E0472, \"inline assembly is unsupported on this target\")\n@@ -214,9 +214,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // means that we disallow passing a value in/out of the asm and\n                 // require that the operand name an explicit register, not a\n                 // register class.\n-                if reg_class.is_clobber_only(asm_arch.unwrap())\n-                    && !(op.is_clobber() && matches!(reg, asm::InlineAsmRegOrRegClass::Reg(_)))\n-                {\n+                if reg_class.is_clobber_only(asm_arch.unwrap()) && !op.is_clobber() {\n                     let msg = format!(\n                         \"register class `{}` can only be used as a clobber, \\\n                              not as an input or output\","}, {"sha": "7c3ed3c5ee9db8d68b0aea669111bd1e9216ad8f", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         true\n     }\n \n-    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span]) {\n+    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span], _instance: Instance<'_>) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);"}, {"sha": "f128f76958092214e70afad072253c0aff55054e", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -13,7 +13,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_middle::{bug, span_bug};\n+use rustc_middle::{bug, span_bug, ty::Instance};\n use rustc_span::{Pos, Span, Symbol};\n use rustc_target::abi::*;\n use rustc_target::asm::*;\n@@ -120,6 +120,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         operands: &[InlineAsmOperandRef<'tcx, Self>],\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n+        instance: Instance<'_>,\n     ) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n@@ -135,7 +136,10 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     let is_target_supported = |reg_class: InlineAsmRegClass| {\n                         for &(_, feature) in reg_class.supported_types(asm_arch) {\n                             if let Some(feature) = feature {\n-                                if self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                let codegen_fn_attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n+                                let feature_name = Symbol::intern(feature);\n+                                if self.tcx.sess.target_features.contains(&feature_name)\n+                                    || codegen_fn_attrs.target_features.contains(&feature_name)\n                                 {\n                                     return true;\n                                 }"}, {"sha": "7c25438380a10efa3f80e5a3d8ce79b83dfd3a6f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -845,6 +845,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         options: ast::InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n+        instance: Instance<'_>,\n     ) {\n         let span = terminator.source_info.span;\n \n@@ -898,7 +899,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             })\n             .collect();\n \n-        bx.codegen_inline_asm(template, &operands, options, line_spans);\n+        bx.codegen_inline_asm(template, &operands, options, line_spans, instance);\n \n         if let Some(target) = destination {\n             helper.funclet_br(self, &mut bx, target);\n@@ -1029,6 +1030,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     options,\n                     line_spans,\n                     destination,\n+                    self.instance,\n                 );\n             }\n         }"}, {"sha": "31f539e1b03dba8f3cdeb548e3f91ca2dff0c477", "filename": "compiler/rustc_codegen_ssa/src/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -58,6 +58,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         operands: &[InlineAsmOperandRef<'tcx, Self>],\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n+        instance: Instance<'_>,\n     );\n }\n "}, {"sha": "9b2b21bbda6619fa7f93d04a3900cb82a8a54ae7", "filename": "src/test/ui/asm/x86_64/issue-89875.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b2bfb5edbe879b3bd21986c3da997c21737ab1/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs?ref=a9b2bfb5edbe879b3bd21986c3da997c21737ab1", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+// only-x86_64\n+\n+#![feature(asm, target_feature_11)]\n+\n+#[target_feature(enable = \"avx\")]\n+fn main() {\n+    unsafe {\n+        asm!(\n+            \"/* {} */\",\n+            out(ymm_reg) _,\n+        );\n+    }\n+}"}]}