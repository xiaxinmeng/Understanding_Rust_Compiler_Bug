{"sha": "b820cc79a93a8867b1fe51ab628663671843a4ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjBjYzc5YTkzYTg4NjdiMWZlNTFhYjYyODY2MzY3MTg0M2E0ZWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-14T10:45:10Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:32Z"}, "message": "Clean up array/slice of primitive validation", "tree": {"sha": "29df696a6685d903bd4777d8df5235413be09942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29df696a6685d903bd4777d8df5235413be09942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b820cc79a93a8867b1fe51ab628663671843a4ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b820cc79a93a8867b1fe51ab628663671843a4ed", "html_url": "https://github.com/rust-lang/rust/commit/b820cc79a93a8867b1fe51ab628663671843a4ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b820cc79a93a8867b1fe51ab628663671843a4ed/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b702c6b108dfa5e2c3fa891d4f96755293ddb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b702c6b108dfa5e2c3fa891d4f96755293ddb3", "html_url": "https://github.com/rust-lang/rust/commit/65b702c6b108dfa5e2c3fa891d4f96755293ddb3"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "4b9ded4c17ee91b708aeca4d0d3603754cbd983f", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b820cc79a93a8867b1fe51ab628663671843a4ed", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, MPlaceTy, Machine, EvalContext, ValueVisitor, Operand,\n+    OpTy, Machine, EvalContext, ValueVisitor,\n };\n \n macro_rules! validation_failure {\n@@ -522,25 +522,22 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     _ => false,\n                 }\n             } => {\n-                let mplace = match *op {\n-                    // it's a ZST, the memory content cannot matter\n-                    Operand::Immediate(_) if op.layout.is_zst() =>\n-                        // invent an aligned mplace\n-                        MPlaceTy::dangling(op.layout, self.ecx),\n-                    // FIXME: what about single element arrays? They can be Scalar layout I think\n-                    Operand::Immediate(_) => bug!(\"non-ZST array/slice cannot be immediate\"),\n-                    Operand::Indirect(_) => op.to_mem_place(),\n-                };\n+                if op.layout.is_zst() {\n+                    return Ok(());\n+                }\n+                // non-ZST array cannot be immediate, slices are never immediate\n+                let mplace = op.to_mem_place();\n                 // This is the length of the array/slice.\n                 let len = mplace.len(self.ecx)?;\n+                // zero length slices have nothing to be checked\n+                if len == 0 {\n+                    return Ok(());\n+                }\n                 // This is the element type size.\n                 let ty_size = self.ecx.layout_of(tys)?.size;\n                 // This is the size in bytes of the whole array.\n                 let size = ty_size * len;\n \n-                if op.layout.is_zst() {\n-                    return self.ecx.memory.check_align(mplace.ptr, op.layout.align);\n-                }\n                 let ptr = mplace.ptr.to_ptr()?;\n \n                 // NOTE: Keep this in sync with the handling of integer and float"}, {"sha": "9610b7b22f161a843833a1f6bf708e5fe1e6a30a", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=b820cc79a93a8867b1fe51ab628663671843a4ed", "patch": "@@ -0,0 +1,5 @@\n+#![feature(const_raw_ptr_deref, never_type)]\n+\n+const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+\n+fn main() {}"}, {"sha": "0b639240bb3483dd4e87c25c7387d29076d13c02", "filename": "src/test/ui/consts/validate_never_arrays.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b820cc79a93a8867b1fe51ab628663671843a4ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr?ref=b820cc79a93a8867b1fe51ab628663671843a4ed", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_never_arrays.rs:3:1\n+   |\n+LL | const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}