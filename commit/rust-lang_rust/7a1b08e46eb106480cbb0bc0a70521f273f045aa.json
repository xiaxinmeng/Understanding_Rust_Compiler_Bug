{"sha": "7a1b08e46eb106480cbb0bc0a70521f273f045aa", "node_id": "C_kwDOAAsO6NoAKDdhMWIwOGU0NmViMTA2NDgwY2JiMGJjMGE3MDUyMWYyNzNmMDQ1YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T04:27:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T04:27:04Z"}, "message": "Auto merge of #2251 - dtolnay-contrib:rustfmt4, r=RalfJung\n\nFormat tests with rustfmt (201-224 of 300)\n\nExtracted from #2097. Last of the easy cases which do not involve moving around a comment.", "tree": {"sha": "1c7519530f9d1bdae37d8bd24b701baeca00cf07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7519530f9d1bdae37d8bd24b701baeca00cf07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1b08e46eb106480cbb0bc0a70521f273f045aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1b08e46eb106480cbb0bc0a70521f273f045aa", "html_url": "https://github.com/rust-lang/rust/commit/7a1b08e46eb106480cbb0bc0a70521f273f045aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1b08e46eb106480cbb0bc0a70521f273f045aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0d4b68ba23d1607c956677595a84e787060898", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d4b68ba23d1607c956677595a84e787060898", "html_url": "https://github.com/rust-lang/rust/commit/db0d4b68ba23d1607c956677595a84e787060898"}, {"sha": "7d40530c523bc5c39a0ceb264bada529f4fcb086", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d40530c523bc5c39a0ceb264bada529f4fcb086", "html_url": "https://github.com/rust-lang/rust/commit/7d40530c523bc5c39a0ceb264bada529f4fcb086"}], "stats": {"total": 382, "additions": 210, "deletions": 172}, "files": [{"sha": "d5a4bf27f8973e240fa13fb5be84c52059be90ce", "filename": "tests/fail/concurrency/thread_local_static_dealloc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -7,7 +7,9 @@\n #[thread_local]\n static mut TLS: u8 = 0;\n \n-fn main() { unsafe {\n-    let dangling_ptr = std::thread::spawn(|| &TLS as *const u8 as usize).join().unwrap();\n-    let _val = *(dangling_ptr as *const u8); //~ ERROR dereferenced after this allocation got freed\n-} }\n+fn main() {\n+    unsafe {\n+        let dangling_ptr = std::thread::spawn(|| &TLS as *const u8 as usize).join().unwrap();\n+        let _val = *(dangling_ptr as *const u8); //~ ERROR dereferenced after this allocation got freed\n+    }\n+}"}, {"sha": "2a3a8f0f55c3b62264bf9e49c3950ebe5233b70a", "filename": "tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n   --> $DIR/thread_local_static_dealloc.rs:LL:CC\n    |\n-LL |     let _val = *(dangling_ptr as *const u8);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+LL |         let _val = *(dangling_ptr as *const u8);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "4433f28e3459a81de51db54776896776862bac3a", "filename": "tests/fail/stacked_borrows/interior_mut2.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -7,22 +7,24 @@ unsafe fn unsafe_cell_get<T>(x: &UnsafeCell<T>) -> &'static mut T {\n     mem::transmute(x)\n }\n \n-fn main() { unsafe {\n-    let c = &UnsafeCell::new(UnsafeCell::new(0));\n-    let inner_uniq = &mut *c.get();\n-    let inner_shr = &*inner_uniq;\n-    // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n+fn main() {\n+    unsafe {\n+        let c = &UnsafeCell::new(UnsafeCell::new(0));\n+        let inner_uniq = &mut *c.get();\n+        let inner_shr = &*inner_uniq;\n+        // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n \n-    let _val = c.get().read(); // invalidates inner_uniq\n-    // stack: [c: SharedReadWrite, inner_uniq: Disabled, inner_shr: SharedReadWrite]\n+        let _val = c.get().read(); // invalidates inner_uniq\n+        // stack: [c: SharedReadWrite, inner_uniq: Disabled, inner_shr: SharedReadWrite]\n \n-    // We have to be careful not to add any raw pointers above inner_uniq in\n-    // the stack, hence the use of unsafe_cell_get.\n-    let _val = *unsafe_cell_get(inner_shr); // this still works\n+        // We have to be careful not to add any raw pointers above inner_uniq in\n+        // the stack, hence the use of unsafe_cell_get.\n+        let _val = *unsafe_cell_get(inner_shr); // this still works\n \n-    *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n-    // stack: [c: SharedReadWrite]\n+        *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+        // stack: [c: SharedReadWrite]\n \n-    // now this does not work any more\n-    let _val = *inner_shr.get(); //~ ERROR borrow stack\n-} }\n+        // now this does not work any more\n+        let _val = *inner_shr.get(); //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "33060a7818ff07df3f69fc30f45dd1ce978acdb3", "filename": "tests/fail/stacked_borrows/interior_mut2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     let _val = *inner_shr.get();\n-   |                 ^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         let _val = *inner_shr.get();\n+   |                     ^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     let inner_shr = &*inner_uniq;\n-   |                     ^^^^^^^^^^^^\n+LL |         let inner_shr = &*inner_uniq;\n+   |                         ^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c1fc695e0d651eb46bfdc5ca3505c379b4c1a762", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,6 +1,8 @@\n // error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u16));\n-    Box::from_raw(ptr as *mut u32);\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u16));\n+        Box::from_raw(ptr as *mut u32);\n+    }\n+}"}, {"sha": "c2c471fba88109fcf9a269d66718b40807392a46", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -12,8 +12,8 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC\n   --> $DIR/issue-miri-1050-1.rs:LL:CC\n    |\n-LL |     Box::from_raw(ptr as *mut u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Box::from_raw(ptr as *mut u32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7d8809cedcd79a4478084c4a860ff93c8cb73651", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: is not a valid pointer\n use std::ptr::NonNull;\n \n-fn main() { unsafe {\n-    let ptr = NonNull::<i32>::dangling();\n-    Box::from_raw(ptr.as_ptr());\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = NonNull::<i32>::dangling();\n+        Box::from_raw(ptr.as_ptr());\n+    }\n+}"}, {"sha": "c49852cb7f4f8a5b4f4af3248ceef9018eacb73f", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -12,8 +12,8 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC\n   --> $DIR/issue-miri-1050-2.rs:LL:CC\n    |\n-LL |     Box::from_raw(ptr.as_ptr());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Box::from_raw(ptr.as_ptr());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a1cb7107eee0d432d6d36e0bdacd347881c485e0", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,28 +1,32 @@\n fn demo_mut_advanced_unique(our: &mut i32) -> i32 {\n-  unknown_code_1(&*our);\n+    unknown_code_1(&*our);\n \n-  // This \"re-asserts\" uniqueness of the reference: After writing, we know\n-  // our tag is at the top of the stack.\n-  *our = 5;\n+    // This \"re-asserts\" uniqueness of the reference: After writing, we know\n+    // our tag is at the top of the stack.\n+    *our = 5;\n \n-  unknown_code_2();\n+    unknown_code_2();\n \n-  // We know this will return 5\n-  *our\n+    // We know this will return 5\n+    *our\n }\n \n // Now comes the evil context\n use std::ptr;\n \n static mut LEAK: *mut i32 = ptr::null_mut();\n \n-fn unknown_code_1(x: &i32) { unsafe {\n-    LEAK = x as *const _ as *mut _;\n-} }\n+fn unknown_code_1(x: &i32) {\n+    unsafe {\n+        LEAK = x as *const _ as *mut _;\n+    }\n+}\n \n-fn unknown_code_2() { unsafe {\n-    *LEAK = 7; //~ ERROR borrow stack\n-} }\n+fn unknown_code_2() {\n+    unsafe {\n+        *LEAK = 7; //~ ERROR borrow stack\n+    }\n+}\n \n fn main() {\n     demo_mut_advanced_unique(&mut 0);"}, {"sha": "ea14536a399053d112bc283565d441f0dc2aa63e", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,30 +1,30 @@\n error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |     *LEAK = 7;\n-   |     ^^^^^^^^^\n-   |     |\n-   |     attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |     this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         *LEAK = 7;\n+   |         ^^^^^^^^^\n+   |         |\n+   |         attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: tag was most recently created at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |     LEAK = x as *const _ as *mut _;\n-   |            ^\n+LL |         LEAK = x as *const _ as *mut _;\n+   |                ^\n help: tag was later invalidated at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |   *our = 5;\n-   |   ^^^^^^^^\n+LL |     *our = 5;\n+   |     ^^^^^^^^\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |   unknown_code_2();\n-   |   ^^^^^^^^^^^^^^^^\n+LL |     unknown_code_2();\n+   |     ^^^^^^^^^^^^^^^^\n note: inside `main` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |"}, {"sha": "a5bf8353bae8c4cea12383252c9cdb78aa8ba9a5", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,10 +1,12 @@\n use std::ptr::NonNull;\n \n-fn main() { unsafe {\n-    let x = &mut 0;\n-    let mut ptr1 = NonNull::from(x);\n-    let mut ptr2 = ptr1.clone();\n-    let raw1 = ptr1.as_mut();\n-    let _raw2 = ptr2.as_mut();\n-    let _val = *raw1; //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut 0;\n+        let mut ptr1 = NonNull::from(x);\n+        let mut ptr2 = ptr1.clone();\n+        let raw1 = ptr1.as_mut();\n+        let _raw2 = ptr2.as_mut();\n+        let _val = *raw1; //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "85baf93613a209bff67ca55dd9a4e6cb2501c08b", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let _val = *raw1;\n-   |                ^^^^^\n-   |                |\n-   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         let _val = *raw1;\n+   |                    ^^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let raw1 = ptr1.as_mut();\n-   |                ^^^^^^^^^^^^^\n+LL |         let raw1 = ptr1.as_mut();\n+   |                    ^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let _raw2 = ptr2.as_mut();\n-   |                 ^^^^^^^^^^^^^\n+LL |         let _raw2 = ptr2.as_mut();\n+   |                     ^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ccdb3dc50579054f3d7d485abaf52a43668fd34f", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -10,7 +10,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {}, //~ ERROR borrow stack\n-        None => {},\n+        Some(_x) => {} //~ ERROR borrow stack\n+        None => {}\n     }\n }"}, {"sha": "4bee128d68a40a7d9c353f50d19201bf2d683d1c", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n   --> $DIR/return_invalid_mut_option.rs:LL:CC\n    |\n-LL |         Some(_x) => {},\n+LL |         Some(_x) => {}\n    |              ^^\n    |              |\n    |              trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location"}, {"sha": "42b4871c46747593f5c9a8ab53e00bb7e5748ad4", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -9,7 +9,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {}, //~ ERROR borrow stack\n-        None => {},\n+        Some(_x) => {} //~ ERROR borrow stack\n+        None => {}\n     }\n }"}, {"sha": "a23c69d12db16ce4c82563d9f294654425b47e41", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n   --> $DIR/return_invalid_shr_option.rs:LL:CC\n    |\n-LL |         Some(_x) => {},\n+LL |         Some(_x) => {}\n    |              ^^\n    |              |\n    |              trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location"}, {"sha": "a08d2b716ee73de15c1d2a90fd018134c3948ffe", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -2,13 +2,15 @@\n // *below* an already granted Unique -- so writing to\n // the SharedReadWrite will invalidate the Unique.\n \n-use std::mem;\n use std::cell::Cell;\n+use std::mem;\n \n-fn main() { unsafe {\n-    let x = &mut Cell::new(0);\n-    let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n-    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n-    shr_rw.set(1);\n-    y.get_mut(); //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut Cell::new(0);\n+        let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+        let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+        shr_rw.set(1);\n+        y.get_mut(); //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "151654bad5cfeab1b7a21135da30f59fb7c83e41", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     y.get_mut();\n-   |     ^^^^^^^^^^^\n-   |     |\n-   |     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         y.get_mut();\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     shr_rw.set(1);\n-   |     ^^^^^^^^^^^^^\n+LL |         shr_rw.set(1);\n+   |         ^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "07163456cebe724c948763f2967f4a8708dcf9b8", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -3,13 +3,15 @@\n // the SharedReadWrite will invalidate the SharedReadWrite.\n // normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n-use std::mem;\n use std::cell::RefCell;\n+use std::mem;\n \n-fn main() { unsafe {\n-    let x = &mut RefCell::new(0);\n-    let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n-    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n-    shr_rw.replace(1);\n-    let _val = *y; //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut RefCell::new(0);\n+        let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+        let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+        shr_rw.replace(1);\n+        let _val = *y; //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "c0bf809356bd6d14fe321152bcbd20382f7e2021", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     let _val = *y;\n-   |                ^^\n-   |                |\n-   |                attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n-   |                this error occurs as part of an access at ALLOC[$HEX..$HEX]\n+LL |         let _val = *y;\n+   |                    ^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[$HEX..$HEX]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [$HEX..$HEX]\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     shr_rw.replace(1);\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |         shr_rw.replace(1);\n+   |         ^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "85a37db341fab74e54ad222ed78d73ed5333a6a8", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0,\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "7e29a41920ea69a973fb58de27ae066368e72bae", "filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0,\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "1f1a2ef34b72e94aef728f3efecc8aa106ede739", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0,\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "0835287b9e4ff3e63917f9de0df7fd3bc767dafd", "filename": "tests/fail/transmute-pair-uninit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -10,13 +10,15 @@ fn main() {\n     let y = &x;\n     // Now read this bytewise. There should be (`ptr_size + 1`) def bytes followed by\n     // (`ptr_size - 1`) undef bytes (the padding after the bool) in there.\n-    let z : *const u8 = y as *const _ as *const _;\n+    let z: *const u8 = y as *const _ as *const _;\n     let first_undef = mem::size_of::<usize>() as isize + 1;\n     for i in 0..first_undef {\n         let byte = unsafe { *z.offset(i) };\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n     //~^ ERROR uninitialized\n-    if v == 0 { println!(\"it is zero\"); }\n+    if v == 0 {\n+        println!(\"it is zero\");\n+    }\n }"}, {"sha": "f9fa2ace757004880ed9beb3b9606c6342262e54", "filename": "tests/fail/transmute_fat1.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -2,13 +2,9 @@\n // normalize-stderr-test: \"\\[u8; (08|16)\\]\" -> \"$$ARRAY\"\n \n fn main() {\n-    #[cfg(target_pointer_width=\"64\")]\n-    let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; 16]>(&[1u8])\n-    };\n-    #[cfg(target_pointer_width=\"32\")]\n-    let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; 08]>(&[1u8])\n-    };\n-    let _val = bad[0] + bad[bad.len()-1];\n+    #[cfg(target_pointer_width = \"64\")]\n+    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 16]>(&[1u8]) };\n+    #[cfg(target_pointer_width = \"32\")]\n+    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 08]>(&[1u8]) };\n+    let _val = bad[0] + bad[bad.len() - 1];\n }"}, {"sha": "2b095dc3c1c02660226f5145c776ed2cbf0d0580", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n   --> $DIR/transmute_fat1.rs:LL:CC\n    |\n-LL |         std::mem::transmute::<&[u8], $ARRAY>(&[1u8])\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n+LL |     let bad = unsafe { std::mem::transmute::<&[u8], $ARRAY>(&[1u8]) };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "e99d8c967cdddb55fea0eb816bbd406822cedebe", "filename": "tests/fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n     // At least one of these is definitely unaligned.\n     unsafe {\n-        *(x_ptr        as *mut u32) = 42;\n+        *(x_ptr as *mut u32) = 42;\n         *(x_ptr.add(1) as *mut u32) = 42;\n     }\n }"}, {"sha": "0e6ca83366ad2cf7d83264a0021c6dd7f998ff4e", "filename": "tests/fail/unaligned_pointers/alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/alignment.rs:LL:CC\n    |\n-LL |         *(x_ptr        as *mut u32) = 42;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         *(x_ptr as *mut u32) = 42;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "020e7be34f70661c93a18f34c99fc1bdece67d41", "filename": "tests/fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Cast a function pointer such that on a call, the argument gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n-    fn f(_x: &i32) { }\n+    fn f(_x: &i32) {}\n \n     let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n "}, {"sha": "10fc39f56fae3cd745a2229cb27fe746371e61e1", "filename": "tests/fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -2,7 +2,9 @@ fn main() {\n     // Cast a function pointer such that when returning, the return value gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n-    fn f() -> *const i32 { 0usize as *const i32 }\n+    fn f() -> *const i32 {\n+        0usize as *const i32\n+    }\n \n     let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n "}, {"sha": "9722e6492c8297e7d395126057aaa7cb3ef4a102", "filename": "tests/fail/validity/invalid_enum_tag.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,6 +1,9 @@\n #[repr(C)]\n pub enum Foo {\n-    A, B, C, D\n+    A,\n+    B,\n+    C,\n+    D,\n }\n \n fn main() {"}, {"sha": "0a2f6f5b152c5f5fb08d704cd771caae52acc899", "filename": "tests/fail/validity/invalid_wide_raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,11 +1,11 @@\n #![allow(invalid_value)]\n \n fn main() {\n-    trait T { }\n+    trait T {}\n     #[derive(Debug)]\n     struct S {\n         #[allow(dead_code)]\n-        x: * mut dyn T\n+        x: *mut dyn T,\n     }\n     dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered dangling vtable pointer in wide pointer\n }"}, {"sha": "a46ce017c5a0f3db0098a68904f83bd41be3977e", "filename": "tests/fail/validity/ref_to_uninhabited1.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,7 +1,9 @@\n #![feature(never_type)]\n-use std::mem::{transmute, forget};\n+use std::mem::{forget, transmute};\n \n-fn main() { unsafe {\n-    let x: Box<!> = transmute(&mut 42); //~ERROR encountered a box pointing to uninhabited type !\n-    forget(x);\n-} }\n+fn main() {\n+    unsafe {\n+        let x: Box<!> = transmute(&mut 42); //~ERROR encountered a box pointing to uninhabited type !\n+        forget(x);\n+    }\n+}"}, {"sha": "dbaee46a93b8fd549e9c847125ac01e702cb81bc", "filename": "tests/fail/validity/ref_to_uninhabited1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a box pointing to uninhabited type !\n   --> $DIR/ref_to_uninhabited1.rs:LL:CC\n    |\n-LL |     let x: Box<!> = transmute(&mut 42);\n-   |                     ^^^^^^^^^^^^^^^^^^ type validation failed: encountered a box pointing to uninhabited type !\n+LL |         let x: Box<!> = transmute(&mut 42);\n+   |                         ^^^^^^^^^^^^^^^^^^ type validation failed: encountered a box pointing to uninhabited type !\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "0a791d1e7fee89820aabef1e8ff37244af9b6b06", "filename": "tests/fail/validity/ref_to_uninhabited2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -2,6 +2,8 @@ use std::mem::transmute;\n \n enum Void {}\n \n-fn main() { unsafe {\n-    let _x: &(i32, Void) = transmute(&42); //~ERROR encountered a reference pointing to uninhabited type (i32, Void)\n-} }\n+fn main() {\n+    unsafe {\n+        let _x: &(i32, Void) = transmute(&42); //~ERROR encountered a reference pointing to uninhabited type (i32, Void)\n+    }\n+}"}, {"sha": "115cdfedf7775ffd91a92baa9a9cb62bc48225bc", "filename": "tests/fail/validity/ref_to_uninhabited2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n   --> $DIR/ref_to_uninhabited2.rs:LL:CC\n    |\n-LL |     let _x: &(i32, Void) = transmute(&42);\n-   |                            ^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n+LL |         let _x: &(i32, Void) = transmute(&42);\n+   |                                ^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "61d903220758580e8b0d8d0401c9f4bec66ff23c", "filename": "tests/fail/validity/too-big-slice.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,6 +1,8 @@\n use std::mem;\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u8));\n-    let _x: &[u8] = mem::transmute((ptr, usize::MAX)); //~ ERROR: invalid reference metadata: slice is bigger than largest supported object\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u8));\n+        let _x: &[u8] = mem::transmute((ptr, usize::MAX)); //~ ERROR: invalid reference metadata: slice is bigger than largest supported object\n+    }\n+}"}, {"sha": "9c8d2929bda00cf767eed4190e0d8384714387b7", "filename": "tests/fail/validity/too-big-slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n   --> $DIR/too-big-slice.rs:LL:CC\n    |\n-LL |     let _x: &[u8] = mem::transmute((ptr, usize::MAX));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n+LL |         let _x: &[u8] = mem::transmute((ptr, usize::MAX));\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "280205dccbf238a744c0137a014d9a7f842eb48a", "filename": "tests/fail/validity/too-big-unsized.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -6,8 +6,10 @@ struct MySlice {\n     tail: [u8],\n }\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u8));\n-    // The slice part is actually not \"too big\", but together with the `prefix` field it is.\n-    let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize)); //~ ERROR: invalid reference metadata: total size is bigger than largest supported object\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u8));\n+        // The slice part is actually not \"too big\", but together with the `prefix` field it is.\n+        let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize)); //~ ERROR: invalid reference metadata: total size is bigger than largest supported object\n+    }\n+}"}, {"sha": "18dc5d8b9c18e32557fc9d8a8cc921184fc2b691", "filename": "tests/fail/validity/too-big-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a1b08e46eb106480cbb0bc0a70521f273f045aa/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr?ref=7a1b08e46eb106480cbb0bc0a70521f273f045aa", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n   --> $DIR/too-big-unsized.rs:LL:CC\n    |\n-LL |     let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n+LL |         let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}]}