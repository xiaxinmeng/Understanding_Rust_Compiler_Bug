{"sha": "240f28832978235d18c0b3ade44814784a20d2fc", "node_id": "C_kwDOAAsO6NoAKDI0MGYyODgzMjk3ODIzNWQxOGMwYjNhZGU0NDgxNDc4NGEyMGQyZmM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2021-12-24T19:03:02Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-03-07T22:06:11Z"}, "message": "Move some more bootstrap logic from python to rust\n\nSame rationale as https://github.com/rust-lang/rust/pull/76544;\nit would be nice to make python entirely optional at some point.\n\nThis also removes $ROOT as an option for the build directory; I haven't been using it, and like Alex\nsaid in https://github.com/rust-lang/rust/pull/76544#discussion_r488248930 it seems like a\nmisfeature.\n\nThis allows running `cargo run` from src/bootstrap, although that still gives\nlots of compile errors if you don't use the beta toolchain.", "tree": {"sha": "96d0643600e0382dde02568663c51fd21e96e7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d0643600e0382dde02568663c51fd21e96e7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240f28832978235d18c0b3ade44814784a20d2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240f28832978235d18c0b3ade44814784a20d2fc", "html_url": "https://github.com/rust-lang/rust/commit/240f28832978235d18c0b3ade44814784a20d2fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240f28832978235d18c0b3ade44814784a20d2fc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03918badd33d255de806b4a9a8aa75b031ed0738", "url": "https://api.github.com/repos/rust-lang/rust/commits/03918badd33d255de806b4a9a8aa75b031ed0738", "html_url": "https://github.com/rust-lang/rust/commit/03918badd33d255de806b4a9a8aa75b031ed0738"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "4c32547f0590b6178241808a0cd70440fab63598", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=240f28832978235d18c0b3ade44814784a20d2fc", "patch": "@@ -3,6 +3,7 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n edition = \"2021\"\n build = \"build.rs\"\n+default-run = \"bootstrap\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "532e072bc7e86db9805d8eb9835f5898df014111", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=240f28832978235d18c0b3ade44814784a20d2fc", "patch": "@@ -1267,7 +1267,7 @@ def bootstrap(help_triggered):\n     build.check_vendored_status()\n \n     build_dir = build.get_toml('build-dir', 'build') or 'build'\n-    build.build_dir = os.path.abspath(build_dir.replace(\"$ROOT\", build.rust_root))\n+    build.build_dir = os.path.abspath(build_dir)\n \n     with open(os.path.join(build.rust_root, \"src\", \"stage0.json\")) as f:\n         data = json.load(f)\n@@ -1302,7 +1302,6 @@ def bootstrap(help_triggered):\n     env = os.environ.copy()\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n-    env[\"BUILD_DIR\"] = build.build_dir\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     if toml_path:\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path"}, {"sha": "0a5bda50687b17cbed98deba5496ad6d70a3f076", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240f28832978235d18c0b3ade44814784a20d2fc/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=240f28832978235d18c0b3ade44814784a20d2fc", "patch": "@@ -6,7 +6,6 @@\n use std::cmp;\n use std::collections::{HashMap, HashSet};\n use std::env;\n-use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -392,7 +391,6 @@ derive_merge! {\n         build: Option<String>,\n         host: Option<Vec<String>>,\n         target: Option<Vec<String>>,\n-        // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n         build_dir: Option<String>,\n         cargo: Option<String>,\n         rustc: Option<String>,\n@@ -588,18 +586,6 @@ derive_merge! {\n }\n \n impl Config {\n-    fn path_from_python(var_key: &str) -> PathBuf {\n-        match env::var_os(var_key) {\n-            Some(var_val) => Self::normalize_python_path(var_val),\n-            _ => panic!(\"expected '{}' to be set\", var_key),\n-        }\n-    }\n-\n-    /// Normalizes paths from Python slightly. We don't trust paths from Python (#49785).\n-    fn normalize_python_path(path: OsString) -> PathBuf {\n-        Path::new(&path).components().collect()\n-    }\n-\n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n@@ -625,7 +611,7 @@ impl Config {\n         let manifest_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n         // Undo `src/bootstrap`\n         config.src = manifest_dir.parent().unwrap().parent().unwrap().to_owned();\n-        config.out = Config::path_from_python(\"BUILD_DIR\");\n+        config.out = PathBuf::from(\"build\");\n \n         config.initial_cargo = PathBuf::from(env!(\"CARGO\"));\n         config.initial_rustc = PathBuf::from(env!(\"RUSTC\"));\n@@ -655,12 +641,6 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n-        if config.dry_run {\n-            let dir = config.out.join(\"tmp-dry-run\");\n-            t!(fs::create_dir_all(&dir));\n-            config.out = dir;\n-        }\n-\n         #[cfg(test)]\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n@@ -695,6 +675,19 @@ impl Config {\n \n         let build = toml.build.unwrap_or_default();\n \n+        set(&mut config.out, build.build_dir.map(String::into));\n+        t!(fs::create_dir_all(&config.out));\n+        config.out = t!(\n+            config.out.canonicalize(),\n+            format!(\"failed to canonicalize {}\", config.out.display())\n+        );\n+\n+        if config.dry_run {\n+            let dir = config.out.join(\"tmp-dry-run\");\n+            t!(fs::create_dir_all(&dir));\n+            config.out = dir;\n+        }\n+\n         config.hosts = if let Some(arg_host) = flags.host {\n             arg_host\n         } else if let Some(file_host) = build.host {"}]}