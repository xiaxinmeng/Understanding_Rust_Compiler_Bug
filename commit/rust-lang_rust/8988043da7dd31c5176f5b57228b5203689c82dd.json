{"sha": "8988043da7dd31c5176f5b57228b5203689c82dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODgwNDNkYTdkZDMxYzUxNzZmNWI1NzIyOGI1MjAzNjg5YzgyZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-27T16:34:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-27T16:34:40Z"}, "message": "Auto merge of #27284 - lastorset:default-methods, r=Gankro\n\nInstead of bar/baz, use valid/invalid as default methods. This\r\nillustrates why you might want default methods, and shows that you can\r\ncall other trait methods from a default method.\r\n\r\nr? @steveklabnik", "tree": {"sha": "393e50ab7c6b5b4785117d2664f8c3215f3aedb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393e50ab7c6b5b4785117d2664f8c3215f3aedb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8988043da7dd31c5176f5b57228b5203689c82dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8988043da7dd31c5176f5b57228b5203689c82dd", "html_url": "https://github.com/rust-lang/rust/commit/8988043da7dd31c5176f5b57228b5203689c82dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8988043da7dd31c5176f5b57228b5203689c82dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6e3bbb754c1215a4b0c19b345a74733a966715", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6e3bbb754c1215a4b0c19b345a74733a966715", "html_url": "https://github.com/rust-lang/rust/commit/dc6e3bbb754c1215a4b0c19b345a74733a966715"}, {"sha": "7bec320e6e067b9886f66f8c5d75e4bfef633f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bec320e6e067b9886f66f8c5d75e4bfef633f52", "html_url": "https://github.com/rust-lang/rust/commit/7bec320e6e067b9886f66f8c5d75e4bfef633f52"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "740e2d51c4c04c2ca875379f9aa0d0a9ec10d416", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8988043da7dd31c5176f5b57228b5203689c82dd/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/8988043da7dd31c5176f5b57228b5203689c82dd/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=8988043da7dd31c5176f5b57228b5203689c82dd", "patch": "@@ -347,40 +347,50 @@ easiest just to show an example:\n \n ```rust\n trait Foo {\n-    fn bar(&self);\n+    fn is_valid(&self) -> bool;\n \n-    fn baz(&self) { println!(\"We called baz.\"); }\n+    fn is_invalid(&self) -> bool { !self.is_valid() }\n }\n ```\n \n-Implementors of the `Foo` trait need to implement `bar()`, but they don\u2019t\n-need to implement `baz()`. They\u2019ll get this default behavior. They can\n+Implementors of the `Foo` trait need to implement `is_valid()`, but they don\u2019t\n+need to implement `is_invalid()`. They\u2019ll get this default behavior. They can\n override the default if they so choose:\n \n ```rust\n # trait Foo {\n-# fn bar(&self);\n-# fn baz(&self) { println!(\"We called baz.\"); }\n+#     fn is_valid(&self) -> bool;\n+#\n+#     fn is_invalid(&self) -> bool { !self.is_valid() }\n # }\n struct UseDefault;\n \n impl Foo for UseDefault {\n-    fn bar(&self) { println!(\"We called bar.\"); }\n+    fn is_valid(&self) -> bool {\n+        println!(\"Called UseDefault.is_valid.\");\n+        true\n+    }\n }\n \n struct OverrideDefault;\n \n impl Foo for OverrideDefault {\n-    fn bar(&self) { println!(\"We called bar.\"); }\n+    fn is_valid(&self) -> bool {\n+        println!(\"Called OverrideDefault.is_valid.\");\n+        true\n+    }\n \n-    fn baz(&self) { println!(\"Override baz!\"); }\n+    fn is_invalid(&self) -> bool {\n+        println!(\"Called OverrideDefault.is_invalid!\");\n+        true // this implementation is a self-contradiction!\n+    }\n }\n \n let default = UseDefault;\n-default.baz(); // prints \"We called baz.\"\n+assert!(!default.is_invalid()); // prints \"Called UseDefault.is_valid.\"\n \n let over = OverrideDefault;\n-over.baz(); // prints \"Override baz!\"\n+assert!(over.is_invalid()); // prints \"Called OverrideDefault.is_invalid!\"\n ```\n \n # Inheritance"}]}