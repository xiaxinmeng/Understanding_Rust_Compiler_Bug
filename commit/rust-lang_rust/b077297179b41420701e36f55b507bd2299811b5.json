{"sha": "b077297179b41420701e36f55b507bd2299811b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzcyOTcxNzliNDE0MjA3MDFlMzZmNTViNTA3YmQyMjk5ODExYjU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-10T05:55:30Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-11T22:54:12Z"}, "message": "Modify the placement of the opening brace of trait\n\nPut the opening brace on the next line if\n\n1. putting it one the current line exceeds max width.\n2. trait bounds uses multiple lines.", "tree": {"sha": "0a65b97a80f0fbd29b6c06f8a59c5ffe6d36f973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a65b97a80f0fbd29b6c06f8a59c5ffe6d36f973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b077297179b41420701e36f55b507bd2299811b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b077297179b41420701e36f55b507bd2299811b5", "html_url": "https://github.com/rust-lang/rust/commit/b077297179b41420701e36f55b507bd2299811b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b077297179b41420701e36f55b507bd2299811b5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f56039c7e584bb5b9b5453056a3f4c5197615629", "url": "https://api.github.com/repos/rust-lang/rust/commits/f56039c7e584bb5b9b5453056a3f4c5197615629", "html_url": "https://github.com/rust-lang/rust/commit/f56039c7e584bb5b9b5453056a3f4c5197615629"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "1d02ba653ce62092187423569b3c3e94049d4996", "filename": "src/items.rs", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b077297179b41420701e36f55b507bd2299811b5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b077297179b41420701e36f55b507bd2299811b5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b077297179b41420701e36f55b507bd2299811b5", "patch": "@@ -934,45 +934,45 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             )?;\n         }\n \n-        let where_density =\n-            if context.config.indent_style() == IndentStyle::Block && result.is_empty() {\n+        // Rewrite where clause.\n+        if !generics.where_clause.predicates.is_empty() {\n+            let where_density = if context.config.indent_style() == IndentStyle::Block {\n                 Density::Compressed\n             } else {\n                 Density::Tall\n             };\n \n-        let where_budget = context.budget(last_line_width(&result));\n-        let pos_before_where = if type_param_bounds.is_empty() {\n-            generics.where_clause.span.lo()\n+            let where_budget = context.budget(last_line_width(&result));\n+            let pos_before_where = if type_param_bounds.is_empty() {\n+                generics.where_clause.span.lo()\n+            } else {\n+                type_param_bounds[type_param_bounds.len() - 1].span().hi()\n+            };\n+            let option = WhereClauseOption::snuggled(&generics_str);\n+            let where_clause_str = rewrite_where_clause(\n+                context,\n+                &generics.where_clause,\n+                context.config.brace_style(),\n+                Shape::legacy(where_budget, offset.block_only()),\n+                where_density,\n+                \"{\",\n+                None,\n+                pos_before_where,\n+                option,\n+                false,\n+            )?;\n+            // If the where clause cannot fit on the same line,\n+            // put the where clause on a new line\n+            if !where_clause_str.contains('\\n')\n+                && last_line_width(&result) + where_clause_str.len() + offset.width()\n+                    > context.config.comment_width()\n+            {\n+                let width = offset.block_indent + context.config.tab_spaces() - 1;\n+                let where_indent = Indent::new(0, width);\n+                result.push_str(&where_indent.to_string_with_newline(context.config));\n+            }\n+            result.push_str(&where_clause_str);\n         } else {\n-            type_param_bounds[type_param_bounds.len() - 1].span().hi()\n-        };\n-        let option = WhereClauseOption::snuggled(&generics_str);\n-        let where_clause_str = rewrite_where_clause(\n-            context,\n-            &generics.where_clause,\n-            context.config.brace_style(),\n-            Shape::legacy(where_budget, offset.block_only()),\n-            where_density,\n-            \"{\",\n-            None,\n-            pos_before_where,\n-            option,\n-            false,\n-        )?;\n-        // If the where clause cannot fit on the same line,\n-        // put the where clause on a new line\n-        if !where_clause_str.contains('\\n')\n-            && last_line_width(&result) + where_clause_str.len() + offset.width()\n-                > context.config.comment_width()\n-        {\n-            let width = offset.block_indent + context.config.tab_spaces() - 1;\n-            let where_indent = Indent::new(0, width);\n-            result.push_str(&where_indent.to_string_with_newline(context.config));\n-        }\n-        result.push_str(&where_clause_str);\n-\n-        if generics.where_clause.predicates.is_empty() {\n             let item_snippet = context.snippet(item.span);\n             if let Some(lo) = item_snippet.chars().position(|c| c == '/') {\n                 // 1 = `{`\n@@ -995,16 +995,18 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         }\n \n         match context.config.brace_style() {\n-            _ if last_line_contains_single_line_comment(&result) => {\n+            _ if last_line_contains_single_line_comment(&result)\n+                || last_line_width(&result) + 2 > context.budget(offset.width()) =>\n+            {\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n             BraceStyle::AlwaysNextLine => {\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n-                if !where_clause_str.is_empty()\n-                    && (!trait_items.is_empty() || result.contains('\\n'))\n+                if result.contains('\\n')\n+                    || (!generics.where_clause.predicates.is_empty() && !trait_items.is_empty())\n                 {\n                     result.push_str(&offset.to_string_with_newline(context.config));\n                 } else {"}]}