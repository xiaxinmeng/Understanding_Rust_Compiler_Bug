{"sha": "63c8d000904fcb09cae22fba1768b955e354ebb8", "node_id": "C_kwDOAAsO6NoAKDYzYzhkMDAwOTA0ZmNiMDljYWUyMmZiYTE3NjhiOTU1ZTM1NGViYjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T11:36:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Use tcx queries instead of passing the values to `configure_and_expand`.", "tree": {"sha": "1127480ddd0dde6d73188c861e0a240a7d36377a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1127480ddd0dde6d73188c861e0a240a7d36377a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c8d000904fcb09cae22fba1768b955e354ebb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c8d000904fcb09cae22fba1768b955e354ebb8", "html_url": "https://github.com/rust-lang/rust/commit/63c8d000904fcb09cae22fba1768b955e354ebb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c8d000904fcb09cae22fba1768b955e354ebb8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1202fce40ea91ac26cbfefe2532aa5c5c3755991", "url": "https://api.github.com/repos/rust-lang/rust/commits/1202fce40ea91ac26cbfefe2532aa5c5c3755991", "html_url": "https://github.com/rust-lang/rust/commit/1202fce40ea91ac26cbfefe2532aa5c5c3755991"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "85f39e2aaac441620244f19745004e2d80cb9fd2", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63c8d000904fcb09cae22fba1768b955e354ebb8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c8d000904fcb09cae22fba1768b955e354ebb8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=63c8d000904fcb09cae22fba1768b955e354ebb8", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n-use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n+use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n@@ -171,14 +171,15 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n+#[instrument(level = \"trace\", skip(tcx, krate, resolver))]\n pub fn configure_and_expand(\n-    sess: &Session,\n-    lint_store: &LintStore,\n+    tcx: TyCtxt<'_>,\n     mut krate: ast::Crate,\n-    crate_name: Symbol,\n     resolver: &mut Resolver<'_, '_>,\n ) -> Result<ast::Crate> {\n-    trace!(\"configure_and_expand\");\n+    let sess = tcx.sess;\n+    let lint_store = unerased_lint_store(tcx);\n+    let crate_name = tcx.crate_name(LOCAL_CRATE);\n     pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n "}, {"sha": "e2c05350e09690b59fe57e6a8c66aabaa7e84725", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c8d000904fcb09cae22fba1768b955e354ebb8/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c8d000904fcb09cae22fba1768b955e354ebb8/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=63c8d000904fcb09cae22fba1768b955e354ebb8", "patch": "@@ -204,7 +204,7 @@ impl<'tcx> Queries<'tcx> {\n \n             let qcx = passes::create_global_ctxt(\n                 self.compiler,\n-                lint_store.clone(),\n+                lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n@@ -227,13 +227,7 @@ impl<'tcx> Queries<'tcx> {\n                         self.codegen_backend().metadata_loader(),\n                         &arenas,\n                     );\n-                    let krate = passes::configure_and_expand(\n-                        sess,\n-                        &lint_store,\n-                        krate,\n-                        crate_name,\n-                        &mut resolver,\n-                    )?;\n+                    let krate = passes::configure_and_expand(tcx, krate, &mut resolver)?;\n \n                     // Make sure we don't mutate the cstore from here on.\n                     tcx.untracked().cstore.leak();"}]}