{"sha": "a00025ab210f62949048b35db40cab924bcc1f91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMDAyNWFiMjEwZjYyOTQ5MDQ4YjM1ZGI0MGNhYjkyNGJjYzFmOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T11:56:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T11:56:16Z"}, "message": "Auto merge of #5638 - ebroto:issue_5628_add_suggestion_for_reversed_empty_ranges, r=phansch\n\nreversed_empty_ranges: add suggestion for &slice[N..N]\n\nAs discussed in the issue thread, the user accepted this solution. Let me know if this is what we want, or if changing the way we lint the N..N case is prefered.\n\nchangelog: reversed_empty_ranges: add suggestion for &slice[N..N]\n\nCloses #5628", "tree": {"sha": "c4f338698df159d911d5f42f15ad406ea71ea964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f338698df159d911d5f42f15ad406ea71ea964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00025ab210f62949048b35db40cab924bcc1f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00025ab210f62949048b35db40cab924bcc1f91", "html_url": "https://github.com/rust-lang/rust/commit/a00025ab210f62949048b35db40cab924bcc1f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00025ab210f62949048b35db40cab924bcc1f91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578692d9b0205102968032bd4a63c3b262c43b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/578692d9b0205102968032bd4a63c3b262c43b63", "html_url": "https://github.com/rust-lang/rust/commit/578692d9b0205102968032bd4a63c3b262c43b63"}, {"sha": "60d38ee1dde4344daa5fdf716eef78b45f483c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d38ee1dde4344daa5fdf716eef78b45f483c7e", "html_url": "https://github.com/rust-lang/rust/commit/60d38ee1dde4344daa5fdf716eef78b45f483c7e"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "1eb26d97ed4d275faf644f0c029e2a841859285e", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -241,14 +241,14 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n }\n \n fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-    fn inside_indexing_expr(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n-        matches!(\n-            get_parent_expr(cx, expr),\n-            Some(Expr {\n+    fn inside_indexing_expr<'a>(cx: &'a LateContext<'_, '_>, expr: &Expr<'_>) -> Option<&'a Expr<'a>> {\n+        match get_parent_expr(cx, expr) {\n+            parent_expr @ Some(Expr {\n                 kind: ExprKind::Index(..),\n                 ..\n-            })\n-        )\n+            }) => parent_expr,\n+            _ => None,\n+        }\n     }\n \n     fn is_empty_range(limits: RangeLimits, ordering: Ordering) -> bool {\n@@ -267,18 +267,32 @@ fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if let Some(ordering) = Constant::partial_cmp(cx.tcx, ty, &start_idx, &end_idx);\n         if is_empty_range(limits, ordering);\n         then {\n-            if inside_indexing_expr(cx, expr) {\n+            if let Some(parent_expr) = inside_indexing_expr(cx, expr) {\n                 let (reason, outcome) = if ordering == Ordering::Equal {\n                     (\"empty\", \"always yield an empty slice\")\n                 } else {\n                     (\"reversed\", \"panic at run-time\")\n                 };\n \n-                span_lint(\n+                span_lint_and_then(\n                     cx,\n                     REVERSED_EMPTY_RANGES,\n                     expr.span,\n                     &format!(\"this range is {} and using it to index a slice will {}\", reason, outcome),\n+                    |diag| {\n+                        if_chain! {\n+                            if ordering == Ordering::Equal;\n+                            if let ty::Slice(slice_ty) = cx.tables.expr_ty(parent_expr).kind;\n+                            then {\n+                                diag.span_suggestion(\n+                                    parent_expr.span,\n+                                    \"if you want an empty slice, use\",\n+                                    format!(\"[] as &[{}]\", slice_ty),\n+                                    Applicability::MaybeIncorrect\n+                                );\n+                            }\n+                        }\n+                    }\n                 );\n             } else {\n                 span_lint_and_then("}, {"sha": "332c0427ef65a224ffe323e5429fd08bb61bbc40", "filename": "tests/ui/reversed_empty_ranges_fixable.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.fixed?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -4,18 +4,23 @@\n const ANSWER: i32 = 42;\n \n fn main() {\n+    let arr = [1, 2, 3, 4, 5];\n+\n+    // These should be linted:\n+\n     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n     let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n \n     for _ in (-42..=-21).rev() {}\n     for _ in (21u32..42u32).rev() {}\n \n+    let _ = &[] as &[i32];\n+\n     // These should be ignored as they are not empty ranges:\n \n     (21..=42).for_each(|x| println!(\"{}\", x));\n     (21..42).for_each(|x| println!(\"{}\", x));\n \n-    let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[1..=3];\n     let _ = &arr[1..3];\n "}, {"sha": "901ec8bcc09f4e31eff5766e18959eccf4414edf", "filename": "tests/ui/reversed_empty_ranges_fixable.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.rs?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -4,18 +4,23 @@\n const ANSWER: i32 = 42;\n \n fn main() {\n+    let arr = [1, 2, 3, 4, 5];\n+\n+    // These should be linted:\n+\n     (42..=21).for_each(|x| println!(\"{}\", x));\n     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n \n     for _ in -21..=-42 {}\n     for _ in 42u32..21u32 {}\n \n+    let _ = &arr[3..3];\n+\n     // These should be ignored as they are not empty ranges:\n \n     (21..=42).for_each(|x| println!(\"{}\", x));\n     (21..42).for_each(|x| println!(\"{}\", x));\n \n-    let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[1..=3];\n     let _ = &arr[1..3];\n "}, {"sha": "9a646fd99398d5c97577ddef7cab0c70063f7372", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:7:5\n+  --> $DIR/reversed_empty_ranges_fixable.rs:11:5\n    |\n LL |     (42..=21).for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:8:13\n+  --> $DIR/reversed_empty_ranges_fixable.rs:12:13\n    |\n LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Ve\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:10:14\n+  --> $DIR/reversed_empty_ranges_fixable.rs:14:14\n    |\n LL |     for _ in -21..=-42 {}\n    |              ^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     for _ in (-42..=-21).rev() {}\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:11:14\n+  --> $DIR/reversed_empty_ranges_fixable.rs:15:14\n    |\n LL |     for _ in 42u32..21u32 {}\n    |              ^^^^^^^^^^^^\n@@ -43,5 +43,11 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for _ in (21u32..42u32).rev() {}\n    |              ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: this range is empty and using it to index a slice will always yield an empty slice\n+  --> $DIR/reversed_empty_ranges_fixable.rs:17:18\n+   |\n+LL |     let _ = &arr[3..3];\n+   |              ----^^^^- help: if you want an empty slice, use: `[] as &[i32]`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "561a35625f02ec6dcb799ced453ec9123467451f", "filename": "tests/ui/reversed_empty_ranges_unfixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.rs?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -9,7 +9,6 @@ fn main() {\n     let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[3usize..=1usize];\n     let _ = &arr[SOME_NUM..1];\n-    let _ = &arr[3..3];\n \n     for _ in ANSWER..ANSWER {}\n }"}, {"sha": "240188cbb46cb17b151748b279c6edf0433a3b29", "filename": "tests/ui/reversed_empty_ranges_unfixable.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00025ab210f62949048b35db40cab924bcc1f91/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr?ref=a00025ab210f62949048b35db40cab924bcc1f91", "patch": "@@ -18,17 +18,11 @@ error: this range is reversed and using it to index a slice will panic at run-ti\n LL |     let _ = &arr[SOME_NUM..1];\n    |                  ^^^^^^^^^^^\n \n-error: this range is empty and using it to index a slice will always yield an empty slice\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:12:18\n-   |\n-LL |     let _ = &arr[3..3];\n-   |                  ^^^^\n-\n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:14:14\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:13:14\n    |\n LL |     for _ in ANSWER..ANSWER {}\n    |              ^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}]}