{"sha": "ddee9fbc998e345e9a36f2066d51d389aa31a632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZWU5ZmJjOTk4ZTM0NWU5YTM2ZjIwNjZkNTFkMzg5YWEzMWE2MzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-09-23T02:13:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-09-24T18:50:09Z"}, "message": "Point at parameter type on E0301\n\nOn \"the parameter type `T` may not live long enough\" error, point to the\nparameter type suggesting lifetime bindings:\n\n```\nerror[E0310]: the parameter type `T` may not live long enough\n  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n   |\n27 | struct Foo<T> {\n   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n28 |     foo: &'static T\n   |     ^^^^^^^^^^^^^^^\n   |\nnote: ...so that the reference type `&'static T` does not outlive the data it points at\n  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n   |\n28 |     foo: &'static T\n   |     ^^^^^^^^^^^^^^^\n```", "tree": {"sha": "e1f19cd74de4bf44ab8a4ebfd029d7f5916b605d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f19cd74de4bf44ab8a4ebfd029d7f5916b605d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddee9fbc998e345e9a36f2066d51d389aa31a632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddee9fbc998e345e9a36f2066d51d389aa31a632", "html_url": "https://github.com/rust-lang/rust/commit/ddee9fbc998e345e9a36f2066d51d389aa31a632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddee9fbc998e345e9a36f2066d51d389aa31a632/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14039a42ac6365afc842214989613f9a688c9a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/14039a42ac6365afc842214989613f9a688c9a66", "html_url": "https://github.com/rust-lang/rust/commit/14039a42ac6365afc842214989613f9a688c9a66"}], "stats": {"total": 122, "additions": 102, "deletions": 20}, "files": [{"sha": "76c4ffe3d224ad644fefe5f87cd827ce00cb3fd2", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -774,10 +774,44 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     bound_kind: GenericKind<'tcx>,\n                                     sub: Region<'tcx>)\n     {\n-        // FIXME: it would be better to report the first error message\n-        // with the span of the parameter itself, rather than the span\n-        // where the error was detected. But that span is not readily\n-        // accessible.\n+        // Attempt to obtain the span of the parameter so we can\n+        // suggest adding an explicit lifetime bound to it.\n+        let type_param_span = match (self.in_progress_tables, bound_kind) {\n+            (Some(ref table), GenericKind::Param(ref param)) => {\n+                let table = table.borrow();\n+                table.local_id_root.and_then(|did| {\n+                    let generics = self.tcx.generics_of(did);\n+                    // Account for the case where `did` corresponds to `Self`, which doesn't have\n+                    // the expected type argument.\n+                    if generics.types.len() > 0 {\n+                        let type_param = generics.type_param(param);\n+                        let hir = &self.tcx.hir;\n+                        hir.as_local_node_id(type_param.def_id).map(|id| {\n+                            // Get the `hir::TyParam` to verify wether it already has any bounds.\n+                            // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n+                            // instead we suggest `T: 'a + 'b` in that case.\n+                            let has_lifetimes = if let hir_map::NodeTyParam(ref p) = hir.get(id) {\n+                                p.bounds.len() > 0\n+                            } else {\n+                                false\n+                            };\n+                            let sp = hir.span(id);\n+                            // `sp` only covers `T`, change it so that it covers\n+                            // `T:` when appropriate\n+                            let sp = if has_lifetimes {\n+                                sp.to(sp.next_point().next_point())\n+                            } else {\n+                                sp\n+                            };\n+                            (sp, has_lifetimes)\n+                        })\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None,\n+        };\n \n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) =>\n@@ -799,6 +833,26 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n+        fn binding_suggestion<'tcx, S: fmt::Display>(err: &mut DiagnosticBuilder<'tcx>,\n+                                                     type_param_span: Option<(Span, bool)>,\n+                                                     bound_kind: GenericKind<'tcx>,\n+                                                     sub: S) {\n+            let consider = &format!(\"consider adding an explicit lifetime bound `{}: {}`...\",\n+                                    bound_kind,\n+                                    sub);\n+            if let Some((sp, has_lifetimes)) = type_param_span {\n+                let tail = if has_lifetimes {\n+                    \" + \"\n+                } else {\n+                    \"\"\n+                };\n+                let suggestion = format!(\"{}: {}{}\", bound_kind, sub, tail);\n+                err.span_suggestion_short(sp, consider, suggestion);\n+            } else {\n+                err.help(consider);\n+            }\n+        }\n+\n         let mut err = match *sub {\n             ty::ReEarlyBound(_) |\n             ty::ReFree(ty::FreeRegion {bound_region: ty::BrNamed(..), ..}) => {\n@@ -808,9 +862,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                E0309,\n                                                \"{} may not live long enough\",\n                                                labeled_user_string);\n-                err.help(&format!(\"consider adding an explicit lifetime bound `{}: {}`...\",\n-                         bound_kind,\n-                         sub));\n+                binding_suggestion(&mut err, type_param_span, bound_kind, sub);\n                 err\n             }\n \n@@ -821,9 +873,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                E0310,\n                                                \"{} may not live long enough\",\n                                                labeled_user_string);\n-                err.help(&format!(\"consider adding an explicit lifetime \\\n-                                   bound `{}: 'static`...\",\n-                                  bound_kind));\n+                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\");\n                 err\n             }\n "}, {"sha": "49a241b86e015046eb318be88fdca0226d101f0d", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'gcx, 'tcx> RegionRelations<'a, 'gcx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     //"}, {"sha": "d66eda6564e4a5593314dd10befb8658d1c65fb5", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -201,7 +201,7 @@ impl Scope {\n }\n \n /// The region scope tree encodes information about region relationships.\n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub struct ScopeTree {\n     /// If not empty, this body is the root of this region hierarchy.\n     root_body: Option<hir::HirId>,"}, {"sha": "c27575820120a0a43516f2cac424f861443f89fb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -314,7 +314,7 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to.\n     pub local_id_root: Option<DefId>,"}, {"sha": "e8f9a6720872d5ec21374e0b8fbba97865400ee4", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -138,7 +138,7 @@ impl FromIterator<bool> for BitVector {\n /// A \"bit matrix\" is basically a matrix of booleans represented as\n /// one gigantic bitvector. In other words, it is as if you have\n /// `rows` bitvectors, each of length `columns`.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct BitMatrix {\n     columns: usize,\n     vector: Vec<u64>,"}, {"sha": "7cb386b019798d3ecce2a1f015d4a867d3fb1d79", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -18,7 +18,7 @@ use std::hash::Hash;\n use std::mem;\n \n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n     // List of elements. This is used to map from a T to a usize.\n     elements: Vec<T>,\n@@ -42,10 +42,10 @@ pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n     closure: RefCell<Option<BitMatrix>>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n struct Index(usize);\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n struct Edge {\n     source: Index,\n     target: Index,"}, {"sha": "465b42710352d2665bc56d185d03970a9f06fd1f", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -16,14 +16,16 @@ trait Collection { fn len(&self) -> usize; }\n \n struct List<'a, T: ListItem<'a>> {\n     slice: &'a [T]\n-//~^ ERROR the parameter type `T` may not live long enough\n-//~| HELP consider adding an explicit lifetime bound\n-//~| NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n }\n+\n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n     fn len(&self) -> usize {\n         0\n     }\n }\n \n+struct Foo<T> {\n+    foo: &'static T\n+}\n+\n fn main() {}", "previous_filename": "src/test/compile-fail/issue-16747.rs"}, {"sha": "e17a660c591709d88961fd7652ed988304524c85", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee9fbc998e345e9a36f2066d51d389aa31a632/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=ddee9fbc998e345e9a36f2066d51d389aa31a632", "patch": "@@ -0,0 +1,30 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:18:5\n+   |\n+17 | struct List<'a, T: ListItem<'a>> {\n+   |                 -- help: consider adding an explicit lifetime bound `T: 'a`...\n+18 |     slice: &'a [T]\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'a [T]` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:18:5\n+   |\n+18 |     slice: &'a [T]\n+   |     ^^^^^^^^^^^^^^\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+   |\n+27 | struct Foo<T> {\n+   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+28 |     foo: &'static T\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'static T` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+   |\n+28 |     foo: &'static T\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}