{"sha": "a725250806b90db15bc4f6bb239ceae989eeb302", "node_id": "C_kwDOAAsO6NoAKGE3MjUyNTA4MDZiOTBkYjE1YmM0ZjZiYjIzOWNlYWU5ODllZWIzMDI", "commit": {"author": {"name": "Mary", "email": "mary@mary.zone", "date": "2022-08-09T09:04:48Z"}, "committer": {"name": "Mary", "email": "mary@mary.zone", "date": "2022-08-09T09:04:48Z"}, "message": "Add support for link-flavor rust-lld for macOS\n\nAlso refactor iOS, watchOS and tvOS common code.", "tree": {"sha": "26d0a1d0d034579093df702071aa88cdc239a00d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d0a1d0d034579093df702071aa88cdc239a00d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a725250806b90db15bc4f6bb239ceae989eeb302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a725250806b90db15bc4f6bb239ceae989eeb302", "html_url": "https://github.com/rust-lang/rust/commit/a725250806b90db15bc4f6bb239ceae989eeb302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a725250806b90db15bc4f6bb239ceae989eeb302/comments", "author": {"login": "marysaka", "id": 1760003, "node_id": "MDQ6VXNlcjE3NjAwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1760003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marysaka", "html_url": "https://github.com/marysaka", "followers_url": "https://api.github.com/users/marysaka/followers", "following_url": "https://api.github.com/users/marysaka/following{/other_user}", "gists_url": "https://api.github.com/users/marysaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/marysaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marysaka/subscriptions", "organizations_url": "https://api.github.com/users/marysaka/orgs", "repos_url": "https://api.github.com/users/marysaka/repos", "events_url": "https://api.github.com/users/marysaka/events{/privacy}", "received_events_url": "https://api.github.com/users/marysaka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marysaka", "id": 1760003, "node_id": "MDQ6VXNlcjE3NjAwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1760003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marysaka", "html_url": "https://github.com/marysaka", "followers_url": "https://api.github.com/users/marysaka/followers", "following_url": "https://api.github.com/users/marysaka/following{/other_user}", "gists_url": "https://api.github.com/users/marysaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/marysaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marysaka/subscriptions", "organizations_url": "https://api.github.com/users/marysaka/orgs", "repos_url": "https://api.github.com/users/marysaka/repos", "events_url": "https://api.github.com/users/marysaka/events{/privacy}", "received_events_url": "https://api.github.com/users/marysaka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "html_url": "https://github.com/rust-lang/rust/commit/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03"}], "stats": {"total": 122, "additions": 66, "deletions": 56}, "files": [{"sha": "468d034e635ffc65f618d37c108cb0df68b0f5e1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -2674,11 +2674,16 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n-        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\")\n+        || !matches!(os.as_ref(), \"ios\" | \"tvos\" | \"watchos\" | \"macos\")\n         || (flavor != LinkerFlavor::Gcc && flavor != LinkerFlavor::Lld(LldFlavor::Ld64))\n     {\n         return;\n     }\n+\n+    if os == \"macos\" && flavor != LinkerFlavor::Lld(LldFlavor::Ld64) {\n+        return;\n+    }\n+\n     let sdk_name = match (arch.as_ref(), os.as_ref()) {\n         (\"aarch64\", \"tvos\") => \"appletvos\",\n         (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n@@ -2694,6 +2699,7 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         (\"aarch64\", \"watchos\") if llvm_target.ends_with(\"-simulator\") => \"watchsimulator\",\n         (\"aarch64\", \"watchos\") => \"watchos\",\n         (\"arm\", \"watchos\") => \"watchos\",\n+        (_, \"macos\") => \"macosx\",\n         _ => {\n             sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n             return;"}, {"sha": "6d919a4c2ad2e1221dd7e0bbf010f7ebfecc066f", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -1,20 +1,20 @@\n-use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, Target, TargetOptions};\n+use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    let arch = \"arm64\";\n+    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n     base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-arch\", \"arm64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(\"arm64\");\n+    let llvm_target = super::apple_base::macos_llvm_target(arch);\n \n     Target {\n         llvm_target: llvm_target.into(),"}, {"sha": "db38ff50c78786212e0a3fba879f921929f4dd80", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -1,8 +1,45 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{cvs, FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, FramePointer, SplitDebuginfo, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor};\n+\n+fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n+    let mut args = LinkArgs::new();\n+\n+    let platform_name = match abi {\n+        \"sim\" => format!(\"{}-simulator\", os),\n+        \"macabi\" => \"mac-catalyst\".to_string(),\n+        _ => os.to_string(),\n+    };\n+\n+    let platform_version = match os.as_ref() {\n+        \"ios\" => ios_lld_platform_version(),\n+        \"tvos\" => tvos_lld_platform_version(),\n+        \"watchos\" => watchos_lld_platform_version(),\n+        \"macos\" => macos_lld_platform_version(arch),\n+        _ => unreachable!(),\n+    };\n+\n+    if abi != \"macabi\" {\n+        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch.into()]);\n+    }\n+\n+    args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld64),\n+        vec![\n+            \"-arch\".into(),\n+            arch.into(),\n+            \"-platform_version\".into(),\n+            platform_name.into(),\n+            platform_version.clone().into(),\n+            platform_version.into(),\n+        ],\n+    );\n+\n+    args\n+}\n \n-pub fn opts(os: &'static str) -> TargetOptions {\n+pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n@@ -24,6 +61,7 @@ pub fn opts(os: &'static str) -> TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n+        pre_link_args: pre_link_args(os, arch, abi),\n         linker_is_gnu: false,\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n@@ -73,6 +111,11 @@ fn macos_deployment_target(arch: &str) -> (u32, u32) {\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n+fn macos_lld_platform_version(arch: &str) -> String {\n+    let (major, minor) = macos_deployment_target(arch);\n+    format!(\"{}.{}\", major, minor)\n+}\n+\n pub fn macos_llvm_target(arch: &str) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n@@ -109,7 +152,7 @@ pub fn ios_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n }\n \n-pub fn ios_lld_platform_version() -> String {\n+fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n@@ -123,7 +166,7 @@ fn tvos_deployment_target() -> (u32, u32) {\n     deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n-pub fn tvos_lld_platform_version() -> String {\n+fn tvos_lld_platform_version() -> String {\n     let (major, minor) = tvos_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n@@ -132,7 +175,7 @@ fn watchos_deployment_target() -> (u32, u32) {\n     deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n-pub fn watchos_lld_platform_version() -> String {\n+fn watchos_lld_platform_version() -> String {\n     let (major, minor) = watchos_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }"}, {"sha": "bf3ebaa2840f6810b1caf31c2466d5ec59d8cc06", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{cvs, TargetOptions};\n use std::borrow::Cow;\n \n use Arch::*;\n@@ -61,53 +61,13 @@ fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     }\n }\n \n-fn pre_link_args(os: &'static str, arch: Arch) -> LinkArgs {\n-    let mut args = LinkArgs::new();\n-\n-    let target_abi = target_abi(arch);\n-\n-    let platform_name = match target_abi {\n-        \"sim\" => format!(\"{}-simulator\", os),\n-        \"macabi\" => \"mac-catalyst\".to_string(),\n-        _ => os.to_string(),\n-    };\n-\n-    let platform_version = match os.as_ref() {\n-        \"ios\" => super::apple_base::ios_lld_platform_version(),\n-        \"tvos\" => super::apple_base::tvos_lld_platform_version(),\n-        \"watchos\" => super::apple_base::watchos_lld_platform_version(),\n-        _ => unreachable!(),\n-    };\n-\n-    let arch_str = target_arch_name(arch);\n-\n-    if target_abi != \"macabi\" {\n-        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch_str.into()]);\n-    }\n-\n-    args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Ld64),\n-        vec![\n-            \"-arch\".into(),\n-            arch_str.into(),\n-            \"-platform_version\".into(),\n-            platform_name.into(),\n-            platform_version.clone().into(),\n-            platform_version.into(),\n-        ],\n-    );\n-\n-    args\n-}\n-\n pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n-        pre_link_args: pre_link_args(os, arch),\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n-        ..super::apple_base::opts(os)\n+        ..super::apple_base::opts(os, target_arch_name(arch), target_abi(arch))\n     }\n }"}, {"sha": "5e9ceb844f73cd978c287b0c47cd4dfe23f5198e", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -1,7 +1,8 @@\n use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    // ld64 only understand i386 and not i686\n+    let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);"}, {"sha": "176c9dd6b764b8a6932a0edcfae3a0780dd7c936", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a725250806b90db15bc4f6bb239ceae989eeb302/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=a725250806b90db15bc4f6bb239ceae989eeb302", "patch": "@@ -2,11 +2,12 @@ use crate::spec::TargetOptions;\n use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts(\"macos\");\n+    let arch = \"x86_64\";\n+    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n     base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n-    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-arch\", \"x86_64\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n@@ -16,7 +17,6 @@ pub fn target() -> Target {\n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n-    let arch = \"x86_64\";\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Target {"}]}