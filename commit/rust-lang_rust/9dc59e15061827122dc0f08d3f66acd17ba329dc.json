{"sha": "9dc59e15061827122dc0f08d3f66acd17ba329dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzU5ZTE1MDYxODI3MTIyZGMwZjA4ZDNmNjZhY2QxN2JhMzI5ZGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-23T05:09:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-23T23:48:08Z"}, "message": "Export all enum variants by default; new syntax for selectively exporting variants\n\nSee issue 1426 for details. Now, the semantics of \"export t;\" where t is a tag are\nto export all of t's variants as well. \"export t{};\" exports t but not its\nvariants, while \"export t{a, b, c};\" exports only variants a, b, c of t.\n\nTo do:\n- documentation\n- there's currently no checking that a, b, c are actually variants of t in the\n above example\n- there's also no checking that t is an enum type, in the second two examples above\n- change the modules listed in issue 1426 that should have the old export\nsemantics to use the t{} syntax\n\nI deleted the test export-no-tag-variants since we're doing the opposite now,\nand other tests cover the same behavior.", "tree": {"sha": "d98b61d751f5db6d33c844d3706a9c6a4f399524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98b61d751f5db6d33c844d3706a9c6a4f399524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc59e15061827122dc0f08d3f66acd17ba329dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc59e15061827122dc0f08d3f66acd17ba329dc", "html_url": "https://github.com/rust-lang/rust/commit/9dc59e15061827122dc0f08d3f66acd17ba329dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc59e15061827122dc0f08d3f66acd17ba329dc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51599932478db1d841912a6e0a10cbc20335e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51599932478db1d841912a6e0a10cbc20335e1f", "html_url": "https://github.com/rust-lang/rust/commit/e51599932478db1d841912a6e0a10cbc20335e1f"}], "stats": {"total": 152, "additions": 89, "deletions": 63}, "files": [{"sha": "9cbf6bf74a157fb35e7f2da49c3f73120d0bddcc", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1403,6 +1403,8 @@ fn index_mod(md: ast::_mod) -> mod_index {\n           }\n           //globbed imports have to be resolved lazily.\n           ast::view_item_import_glob(_, _) | ast::view_item_export(_, _) {}\n+          // exports: ignore\n+          _ {}\n         }\n     }\n     for it: @ast::item in md.items {"}, {"sha": "661bb68309dc75bc5be5b5c652e04f8dbb4f9e1b", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -442,7 +442,7 @@ enum view_item_ {\n     // export foo::{}\n     view_item_export_tag_none(ident, node_id),\n     // export foo::{bar, baz, blat}\n-    view_item_export_tag_some(ident, [ident], node_id)\n+    view_item_export_tag_some(ident, [import_ident], node_id)\n }\n \n // Meta-data associated with an item"}, {"sha": "7a88359d26c2fa2a207c1f805de12c0718b067e0", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -113,12 +113,16 @@ fn float_ty_to_str(t: float_ty) -> str {\n \n fn is_exported(i: ident, m: _mod) -> bool {\n     let nonlocal = true;\n+    let parent_tag : option<ident> = none;\n     for it: @item in m.items {\n         if it.ident == i { nonlocal = false; }\n         alt it.node {\n           item_tag(variants, _) {\n             for v: variant in variants {\n-                if v.node.name == i { nonlocal = false; }\n+                if v.node.name == i {\n+                   nonlocal = false;\n+                   parent_tag = some(it.ident);\n+                }\n             }\n           }\n           _ { }\n@@ -129,9 +133,28 @@ fn is_exported(i: ident, m: _mod) -> bool {\n     for vi: @view_item in m.view_items {\n         alt vi.node {\n           view_item_export(ids, _) {\n-            for id in ids { if str::eq(i, id) { ret true; } }\n+              // If any of ids is a tag, we want to consider\n+              // all the variants to be exported\n+            for id in ids {\n+                if str::eq(i, id) { ret true; }\n+                alt parent_tag {\n+                    some(parent_tag_id) {\n+                        if str::eq(id, parent_tag_id) { ret true; }\n+                    }\n+                    _ { }\n+                 }\n+            }\n             count += 1u;\n           }\n+          view_item_export_tag_none(id, _) {\n+              if str::eq(i, id) { ret true; }\n+              count += 1u;\n+          }\n+          view_item_export_tag_some(id, ids, _) {\n+              if str::eq(i, id) { ret true; }\n+              for id in ids { if str::eq(i, id.node.name) { ret true; } }\n+              count += 1u;\n+          }\n           _ {/* fall through */ }\n         }\n     }"}, {"sha": "b18db178fcddc6986864aeccd0c7ea59f351663d", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -194,10 +194,18 @@ fn spanned<T: copy>(lo: uint, hi: uint, node: T) -> spanned<T> {\n fn parse_ident(p: parser) -> ast::ident {\n     alt p.token {\n       token::IDENT(i, _) { p.bump(); ret p.get_str(i); }\n-      _ { p.fatal(\"expecting ident\"); }\n+      _ { p.fatal(\"expecting ident, found \"\n+                  + token::to_str(p.reader, p.token)); }\n     }\n }\n \n+fn parse_import_ident(p: parser) -> ast::import_ident {\n+    let lo = p.span.lo;\n+    let ident = parse_ident(p);\n+    let hi = p.span.hi;\n+    ret spanned(lo, hi, {name: ident, id: p.get_id()});\n+}\n+\n fn parse_value_ident(p: parser) -> ast::ident {\n     check_bad_word(p);\n     ret parse_ident(p);\n@@ -2316,12 +2324,6 @@ fn parse_rest_import_name(p: parser, first: ast::ident,\n \n \n           token::LBRACE {\n-            fn parse_import_ident(p: parser) -> ast::import_ident {\n-                let lo = p.span.lo;\n-                let ident = parse_ident(p);\n-                let hi = p.span.hi;\n-                ret spanned(lo, hi, {name: ident, id: p.get_id()});\n-            }\n             let from_idents_ =\n                 parse_seq(token::LBRACE, token::RBRACE, seq_sep(token::COMMA),\n                           parse_import_ident, p).node;\n@@ -2392,9 +2394,9 @@ fn parse_import(p: parser) -> ast::view_item_ {\n }\n \n fn parse_tag_export(p:parser, tyname:ast::ident) -> ast::view_item_ {\n-    let tagnames:[ast::ident] =\n+    let tagnames:[ast::import_ident] =\n         parse_seq(token::LBRACE, token::RBRACE,\n-                    seq_sep(token::COMMA), {|p| parse_ident(p) }, p).node;\n+             seq_sep(token::COMMA), {|p| parse_import_ident(p) }, p).node;\n     let id = p.get_id();\n     if vec::is_empty(tagnames) {\n        ret ast::view_item_export_tag_none(tyname, id);\n@@ -2407,9 +2409,8 @@ fn parse_tag_export(p:parser, tyname:ast::ident) -> ast::view_item_ {\n fn parse_export(p: parser) -> ast::view_item_ {\n     let first = parse_ident(p);\n     alt p.token {\n-       token::COLON {\n+       token::MOD_SEP {\n            p.bump();\n-           expect(p, token::COLON);\n            ret parse_tag_export(p, first);\n        }\n        t {"}, {"sha": "2ebcaa055a7beefa282be094f47bacb3b18c437f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1303,6 +1303,19 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n         commasep(s, inconsistent, ids,\n                  fn@(s: ps, &&w: ast::ident) { word(s.s, w) });\n       }\n+      ast::view_item_export_tag_none(id, _) {\n+          head(s, \"export\");\n+          word(s.s, id);\n+          word(s.s, \"::{}\");\n+      }\n+      ast::view_item_export_tag_some(id, ids, _) {\n+          head(s, \"export\");\n+          word(s.s, id);\n+          word(s.s, \"::{\");\n+          commasep(s, inconsistent, ids, fn@(s:ps, &&w: ast::import_ident) {\n+                  word(s.s, w.node.name) });\n+          word(s.s, \"}\");\n+      }\n     }\n     word(s.s, \";\");\n     end(s); // end inner head-block"}, {"sha": "7de42bf0a0d6d9cfa944588c0abb3d2573ab45fa", "filename": "src/test/compile-fail/export-no-tag-variants.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e51599932478db1d841912a6e0a10cbc20335e1f/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51599932478db1d841912a6e0a10cbc20335e1f/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs?ref=e51599932478db1d841912a6e0a10cbc20335e1f", "patch": "@@ -1,12 +0,0 @@\n-// error-pattern: unresolved name\n-\n-// Tag variants are not exported with their tags. This allows for a\n-// simple sort of ADT.\n-\n-mod foo {\n-    export t;\n-\n-    enum t { t1, }\n-}\n-\n-fn main() { let x = foo::t1; }"}, {"sha": "9472783848846e7e20b9d642e098143d4f9a7c71", "filename": "src/test/compile-fail/tag-exports-2.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-exports-2.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1,18 +1,18 @@\n-// xfail-test\n+// error-pattern:unresolved name: lovejoy\n+import alder::*;\n+\n mod alder {\n   export burnside;\n   export everett::{flanders};\n   export irving::{johnson, kearney};\n   export marshall::{};\n \n-  tag burnside { couch, davis }\n-  tag everett { flanders, glisan, hoyt }\n-  tag irving { johnson, kearney, lovejoy }\n-  tag marshall { northrup, overton }\n+  enum burnside { couch, davis }\n+  enum everett { flanders, glisan, hoyt }\n+  enum irving { johnson, kearney, lovejoy }\n+  enum marshall { northrup, overton }\n }\n \n-import alder::*;\n-\n fn main() {\n   let raleigh: irving = lovejoy;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e51a0aca115c85876057bc2232987161fca608d8", "filename": "src/test/compile-fail/tag-exports-3.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-exports-3.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1,19 +1,18 @@\n-// xfail-test\n+// error-pattern:unresolved name: northrup\n+import alder::*;\n+\n mod alder {\n   export burnside;\n   export everett::{flanders};\n   export irving::{johnson, kearney};\n   export marshall::{};\n \n-  tag burnside { couch, davis }\n-  tag everett { flanders, glisan, hoyt }\n-  tag irving { johnson, kearney, lovejoy }\n-  tag marshall { northrup, overton }\n+  enum burnside { couch, davis }\n+  enum everett { flanders, glisan, hoyt }\n+  enum irving { johnson, kearney, lovejoy }\n+  enum marshall { northrup, overton }\n }\n \n-import alder::*;\n-\n fn main() {\n   let savier: marshall = northrup;\n-\n-}\n\\ No newline at end of file\n+}"}, {"sha": "18965c91842042ade0957288ca376606bcacf218", "filename": "src/test/compile-fail/tag-exports.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Fcompile-fail%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-exports.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1,18 +1,18 @@\n-// xfail-test\n+// error-pattern:unresolved name: glisan\n+import alder::*;\n+\n mod alder {\n   export burnside;\n   export everett::{flanders};\n   export irving::{johnson, kearney};\n   export marshall::{};\n \n-  tag burnside { couch, davis }\n-  tag everett { flanders, glisan, hoyt }\n-  tag irving { johnson, kearney, lovejoy }\n-  tag marshall { northrup, overton }\n+  enum burnside { couch, davis }\n+  enum everett { flanders, glisan, hoyt }\n+  enum irving { johnson, kearney, lovejoy }\n+  enum marshall { northrup, overton }\n }\n \n-import alder::*;\n-\n fn main() {\n   let quimby: everett = glisan;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "597bcc66f969358bd50d4480bb37ed7c77bd4afe", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc59e15061827122dc0f08d3f66acd17ba329dc/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=9dc59e15061827122dc0f08d3f66acd17ba329dc", "patch": "@@ -1,21 +1,21 @@\n-// xfail-test\n+import alder::*;\n+\n mod alder {\n   export burnside;\n   export everett::{flanders};\n   export irving::{johnson, kearney};\n   export marshall::{};\n \n-  tag burnside { couch, davis }\n-  tag everett { flanders, glisan, hoyt }\n-  tag irving { johnson, kearney, lovejoy }\n-  tag marshall { northrup, overton }\n-}\n+  enum burnside { couch, davis }\n+  enum everett { flanders, glisan, hoyt }\n+  enum irving { johnson, kearney, lovejoy }\n+  enum marshall { northrup, overton }\n \n-import alder::*;\n+}\n \n fn main() {\n-  let pettygrove: burnside = couch;\n-  let quimby: everett = flanders;\n-  let raleigh: irving = johnson;\n-  let savier: marshall;\n-}\n\\ No newline at end of file\n+  let _pettygrove: burnside = couch;\n+  let _quimby: everett = flanders;\n+  let _raleigh: irving = johnson;\n+  let _savier: marshall;\n+}"}]}