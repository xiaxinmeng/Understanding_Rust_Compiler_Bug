{"sha": "9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OTljOTZjZjFlNmExM2UwY2MxMmUxN2M1NWNhMTFkMmY5YTZiZjI=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-26T22:20:24Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-26T22:20:24Z"}, "message": "deps: bump to rustc v647", "tree": {"sha": "256efbe73f68c21fba11e331cbdec345a49eb0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256efbe73f68c21fba11e331cbdec345a49eb0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "html_url": "https://github.com/rust-lang/rust/commit/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a76ec062deeb9b99a55982deb23597973d8dc21", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a76ec062deeb9b99a55982deb23597973d8dc21", "html_url": "https://github.com/rust-lang/rust/commit/7a76ec062deeb9b99a55982deb23597973d8dc21"}], "stats": {"total": 379, "additions": 198, "deletions": 181}, "files": [{"sha": "c0f4c0e69327bc6011a9df6d4ae2df18c2d41f5e", "filename": "Cargo.lock", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -617,49 +617,65 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc-ap-rustc_ast\"\n+version = \"647.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"644.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-ap-rustc_ast_pretty 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+version = \"647.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -672,9 +688,9 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"measureme 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -685,15 +701,15 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -702,39 +718,39 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -745,97 +761,81 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_attr 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_fs_util 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_fs_util 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rustc-ap-syntax\"\n-version = \"644.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\"\n@@ -911,14 +911,14 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_parse 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.2.0\",\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1275,23 +1275,23 @@ dependencies = [\n \"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n \"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-\"checksum rustc-ap-arena 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80a4f7385e1a0bd8869b1c49738eb6a5c552d66cbea1b880d0481048588fc565\"\n-\"checksum rustc-ap-graphviz 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da134a8459132ec83aba664fbc791c5e409539534bcdeb9df3d29b6ca7c37a76\"\n-\"checksum rustc-ap-rustc_ast_pretty 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41b1280428ae4a3e6b944f2045578a4737cf367db1ac1bdcf66e6e3f886ec981\"\n-\"checksum rustc-ap-rustc_attr 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3f27b42985109679eadcf07e0b0f227b9ba3d203173766b2c1a9ee0bbda05e4\"\n-\"checksum rustc-ap-rustc_data_structures 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8d3f4519ec1dad0b704129a4f891e7c75239850fa683765a63f163ea8ffa7b9\"\n-\"checksum rustc-ap-rustc_errors 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e870484235e89654b66b10467862f3d60a698c0d5983aa51b42563733b77f71\"\n-\"checksum rustc-ap-rustc_feature 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03e3e31e687890adfbc606e8f41e460408bc5b7a94c785d36e7cebc4c9193d00\"\n-\"checksum rustc-ap-rustc_fs_util 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e0f0111c0b6ce58385784ecb4945f6b02c449591c13087dba5e82bbd900ac1\"\n-\"checksum rustc-ap-rustc_index 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"808d42ae6e32607870710ff7ac0faa89b4ce8f8a4aa0a0d875e8ea62e4911a6c\"\n-\"checksum rustc-ap-rustc_lexer 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1494650ca657dd164503e03ebe5a3172fdfe1750e427aa7e139fbda4460817e\"\n-\"checksum rustc-ap-rustc_macros 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df5ad90674b7aac5606fc923d1aa8b804a11a4e65bf2fe850447b28a2bd9a011\"\n-\"checksum rustc-ap-rustc_parse 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb47830cfbb7b05eba5d5ec7c53dfb57dd76d09977e9a78eb7798a2b606bfec6\"\n-\"checksum rustc-ap-rustc_session 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d44935089371d9e4c91eb90c9a3358b44c0b59ef1b4552f05cecb8025b1971f0\"\n-\"checksum rustc-ap-rustc_span 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ccd71ce20995448afe2af68c32d06b01ee160d55ef9e5eebe81a7ca085324dd0\"\n-\"checksum rustc-ap-rustc_target 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9bf8ba8d508f3e4e9e625566295bc1437d0327e7cd3c821e08f65e5801da6904\"\n-\"checksum rustc-ap-serialize 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7b029cc11516918c37b55230edbfc693dabbe1481013cadc506bdd345e63587\"\n-\"checksum rustc-ap-syntax 644.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"478155ef59211e934a79bd1ed4dbbbb5d1226bd8921e2aa7edb23d8f5f8d1080\"\n+\"checksum rustc-ap-arena 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a0c144addf28721384a516382f1f7b7c518ebb87a330623dc9e2427b4ed01512\"\n+\"checksum rustc-ap-graphviz 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4bdd6f563273576220a075afefae7b9e20953c70e7cfe4b664ce1c240f88841\"\n+\"checksum rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b4b7aa06b8d9d6bf02075f91cdaf027cbce34aedd6ab5a6f4759de4c05de099\"\n+\"checksum rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aeb9a73b0f1c632fd09dd02444efe753445de17da8ffb1df28adc5766a581ada\"\n+\"checksum rustc-ap-rustc_attr 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a420a672006a07f51cfc603ab394a066ccaf51323862c6b6b44bb673812df32\"\n+\"checksum rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43f224fd21a3c82b84e9914b4b1de31b0099e2083345c739285130017f5b2882\"\n+\"checksum rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"312120a27c404bae22ed957b8d4e9cca2b872998558d227130aca9f3ff4edce9\"\n+\"checksum rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7615aa561db78b1acacbedfa475e3ba5ed7071a33e5ede30d9660069be7b5e\"\n+\"checksum rustc-ap-rustc_fs_util 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ad7d6ee7fe47355214989c1638d9353344dfd2ac46eda5ac971533c543468d0\"\n+\"checksum rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a570533637a35eb7ed51de75a819a9f290fbd45b6cd4ca21e4ffe35ee2fcdf5\"\n+\"checksum rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"47a9df68feec956275dfd12cdeadc46fc55e48859417e4301f2b330d680de96e\"\n+\"checksum rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"623e619c676c376f079c4504a6047f76630bb3d23d1a6c4a4beee79158082c74\"\n+\"checksum rustc-ap-rustc_parse 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"465685a06a0a897cacd3c6bc6e0f50c79e1347cca9eb061361b5fa90ce46fb62\"\n+\"checksum rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf21db47cebe929bcac82f66da0faa1f38ace2091d6a887acdd87dcdfb7a823d\"\n+\"checksum rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7bb21edcd0e2603efee36ffb1bc4c08b7288478fe107159dbffed0ec8a894a1\"\n+\"checksum rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e8cb1a2d38583099f392c6ea8d3f77b1fc8368e4edfce1978d94c249dc9a828\"\n+\"checksum rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25317d226bf1d0243d4df231edcc9bf1c0e40c503ef0290cc7aa5658d3819915\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f32767f90d938f1b7199a174ef249ae1924f6e5bbdb9d112fea141e016f25b3a\""}, {"sha": "893e4b599db0a8cfb11db9f7089c5702c5dcff69", "filename": "Cargo.toml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -64,35 +64,35 @@ rustc-workspace-hack = \"1.0.0\"\n \n [dependencies.rustc_ast_pretty]\n package = \"rustc-ap-rustc_ast_pretty\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_data_structures]\n package = \"rustc-ap-rustc_data_structures\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_errors]\n package = \"rustc-ap-rustc_errors\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_parse]\n package = \"rustc-ap-rustc_parse\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_session]\n package = \"rustc-ap-rustc_session\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_span]\n package = \"rustc-ap-rustc_span\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.rustc_target]\n package = \"rustc-ap-rustc_target\"\n-version = \"644.0.0\"\n+version = \"647.0.0\"\n \n [dependencies.syntax]\n-package = \"rustc-ap-syntax\"\n-version = \"644.0.0\"\n+package = \"rustc-ap-rustc_ast\"\n+version = \"647.0.0\"\n \n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "b913d917b30efb9a6d2659829fbd13983511565b", "filename": "src/attr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -18,12 +18,13 @@ use crate::utils::{count_newlines, mk_sp};\n mod doc_comment;\n \n /// Returns attributes on the given statement.\n-pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n+pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> Option<&[ast::Attribute]> {\n     match stmt.kind {\n-        ast::StmtKind::Local(ref local) => &local.attrs,\n-        ast::StmtKind::Item(ref item) => &item.attrs,\n-        ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => &expr.attrs,\n-        ast::StmtKind::Mac(ref mac) => &mac.2,\n+        ast::StmtKind::Local(ref local) => Some(&local.attrs),\n+        ast::StmtKind::Item(ref item) => Some(&item.attrs),\n+        ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => Some(&expr.attrs),\n+        ast::StmtKind::Mac(ref mac) => Some(&mac.2),\n+        ast::StmtKind::Empty => None,\n     }\n }\n \n@@ -36,6 +37,7 @@ pub(crate) fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n             let (ref mac, _, _) = **mac;\n             mac.span()\n         }\n+        ast::StmtKind::Empty => stmt.span,\n     }\n }\n "}, {"sha": "396463083a8d937e15d7f7e68366abbd351e2ac1", "filename": "src/closures.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -105,9 +105,13 @@ fn get_inner_expr<'a>(\n \n // Figure out if a block is necessary.\n fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext<'_>) -> bool {\n-    let has_attributes = block.stmts.first().map_or(false, |first_stmt| {\n-        !get_attrs_from_stmt(first_stmt).is_empty()\n-    });\n+    let has_attributes = block\n+        .stmts\n+        .first()\n+        .map_or(false, |first_stmt| match get_attrs_from_stmt(first_stmt) {\n+            Some(attrs) => !attrs.is_empty(),\n+            None => false,\n+        });\n \n     is_unsafe_block(block)\n         || block.stmts.len() > 1"}, {"sha": "8c7be672cac6ca6ce1cddd711daaf9d2640079a5", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -298,7 +298,7 @@ impl<'a> FmtVisitor<'a> {\n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n         let rewrite = item.rewrite(&self.get_context(), self.shape());\n-        self.push_rewrite(item.span(), rewrite);\n+        self.push_rewrite(item.span, rewrite);\n         self.last_pos = item.span.hi();\n     }\n \n@@ -629,7 +629,7 @@ impl<'a> FmtVisitor<'a> {\n             use crate::ast::AssocItemKind::*;\n             fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n                 match (a, b) {\n-                    (TyAlias(_, ref lty), TyAlias(_, ref rty))\n+                    (TyAlias(_, _, _, ref lty), TyAlias(_, _, _, ref rty))\n                         if both_type(lty, rty) || both_opaque(lty, rty) =>\n                     {\n                         false\n@@ -640,7 +640,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n-                (TyAlias(_, ref lty), TyAlias(_, ref rty))\n+                (TyAlias(_, _, _, ref lty), TyAlias(_, _, _, ref rty))\n                     if both_type(lty, rty) || both_opaque(lty, rty) =>\n                 {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n@@ -649,8 +649,8 @@ impl<'a> FmtVisitor<'a> {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(_, ref ty), _) if is_type(ty) => Ordering::Less,\n-                (_, TyAlias(_, ref ty)) if is_type(ty) => Ordering::Greater,\n+                (TyAlias(_, _, _, ref ty), _) if is_type(ty) => Ordering::Less,\n+                (_, TyAlias(_, _, _, ref ty)) if is_type(ty) => Ordering::Greater,\n                 (TyAlias(..), _) => Ordering::Less,\n                 (_, TyAlias(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n@@ -1714,9 +1714,13 @@ pub(crate) struct StaticParts<'a> {\n \n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (prefix, ty, mutability, expr) = match item.kind {\n-            ast::ItemKind::Static(ref ty, mutability, ref expr) => (\"static\", ty, mutability, expr),\n-            ast::ItemKind::Const(ref ty, ref expr) => (\"const\", ty, ast::Mutability::Not, expr),\n+        let (defaultness, prefix, ty, mutability, expr) = match item.kind {\n+            ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n+                (None, \"static\", ty, mutability, expr)\n+            }\n+            ast::ItemKind::Const(defaultness, ref ty, ref expr) => {\n+                (Some(defaultness), \"const\", ty, ast::Mutability::Not, expr)\n+            }\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1725,15 +1729,17 @@ impl<'a> StaticParts<'a> {\n             ident: item.ident,\n             ty,\n             mutability,\n-            expr_opt: Some(expr),\n-            defaultness: None,\n+            expr_opt: expr.as_ref(),\n+            defaultness: defaultness,\n             span: item.span,\n         }\n     }\n \n     pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n-        let (ty, expr_opt) = match ti.kind {\n-            ast::AssocItemKind::Const(ref ty, ref expr_opt) => (ty, expr_opt),\n+        let (defaultness, ty, expr_opt) = match ti.kind {\n+            ast::AssocItemKind::Const(defaultness, ref ty, ref expr_opt) => {\n+                (defaultness, ty, expr_opt)\n+            }\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1743,14 +1749,14 @@ impl<'a> StaticParts<'a> {\n             ty,\n             mutability: ast::Mutability::Not,\n             expr_opt: expr_opt.as_ref(),\n-            defaultness: None,\n+            defaultness: Some(defaultness),\n             span: ti.span,\n         }\n     }\n \n     pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n-        let (ty, expr) = match ii.kind {\n-            ast::AssocItemKind::Const(ref ty, ref expr) => (ty, expr),\n+        let (defaultness, ty, expr) = match ii.kind {\n+            ast::AssocItemKind::Const(defaultness, ref ty, ref expr) => (defaultness, ty, expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1760,7 +1766,7 @@ impl<'a> StaticParts<'a> {\n             ty,\n             mutability: ast::Mutability::Not,\n             expr_opt: expr.as_ref(),\n-            defaultness: Some(ii.defaultness),\n+            defaultness: Some(defaultness),\n             span: ii.span,\n         }\n     }\n@@ -1903,7 +1909,7 @@ pub(crate) fn rewrite_associated_impl_type(\n     let result = rewrite_associated_type(ident, ty_opt, generics, None, context, indent)?;\n \n     match defaultness {\n-        ast::Defaultness::Default => Some(format!(\"default {}\", result)),\n+        ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n         _ => Some(result),\n     }\n }\n@@ -3083,7 +3089,7 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.kind {\n-            ast::ForeignItemKind::Fn(ref fn_sig, ref generics, _) => rewrite_fn_base(\n+            ast::ForeignItemKind::Fn(_, ref fn_sig, ref generics, _) => rewrite_fn_base(\n                 context,\n                 shape.indent,\n                 self.ident,\n@@ -3092,7 +3098,7 @@ impl Rewrite for ast::ForeignItem {\n                 FnBraceStyle::None,\n             )\n             .map(|(s, _)| format!(\"{};\", s)),\n-            ast::ForeignItemKind::Static(ref ty, mutability) => {\n+            ast::ForeignItemKind::Static(ref ty, mutability, _) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function kw here.\n                 let vis = format_visibility(context, &self.vis);\n@@ -3106,7 +3112,7 @@ impl Rewrite for ast::ForeignItem {\n                 // 1 = ;\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n-            ast::ForeignItemKind::Ty => {\n+            ast::ForeignItemKind::TyAlias(..) => {\n                 let vis = format_visibility(context, &self.vis);\n                 Some(format!(\n                     \"{}type {};\","}, {"sha": "858c2917aa91eb56228a4fe5bdbcd159e5ee7a90", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -231,7 +231,7 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n         {\n             parser.bump();\n             let macro_arg =\n-                MacroArg::Keyword(ast::Ident::with_dummy_span(keyword), parser.prev_span);\n+                MacroArg::Keyword(ast::Ident::with_dummy_span(keyword), parser.prev_token.span);\n             return Some(macro_arg);\n         }\n     }"}, {"sha": "99bd832997a6067dd67c718f98dd490f0ce6e0f5", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -468,7 +468,7 @@ fn parse_mod_items<'a>(parser: &mut parser::Parser<'a>, inner_lo: Span) -> PResu\n     let hi = if parser.token.span.is_dummy() {\n         inner_lo\n     } else {\n-        parser.prev_span\n+        parser.prev_token.span\n     };\n \n     Ok(ast::Mod {"}, {"sha": "324594f7760ada1f0f8a7d82afccfaa27ed69b3c", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -74,6 +74,7 @@ impl Spanned for ast::Stmt {\n                     mk_sp(attrs[0].span.lo(), self.span.hi())\n                 }\n             }\n+            ast::StmtKind::Empty => self.span,\n         }\n     }\n }"}, {"sha": "c9bfe64d59d7f9a7c61b803dbad43687ee2e8b1c", "filename": "src/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -106,7 +106,7 @@ fn format_stmt(\n             let shape = shape.sub_width(suffix.len())?;\n             format_expr(ex, expr_type, context, shape).map(|s| s + suffix)\n         }\n-        ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n+        ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) | ast::StmtKind::Empty => None,\n     };\n     result.and_then(|res| recover_comment_removed(res, stmt.span(), context))\n }"}, {"sha": "de18b8e6d5f8b3f84b37287603eb60bc0f114a17", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -104,7 +104,7 @@ pub(crate) fn format_constness(constness: ast::Const) -> &'static str {\n #[inline]\n pub(crate) fn format_defaultness(defaultness: ast::Defaultness) -> &'static str {\n     match defaultness {\n-        ast::Defaultness::Default => \"default \",\n+        ast::Defaultness::Default(..) => \"default \",\n         ast::Defaultness::Final => \"\",\n     }\n }"}, {"sha": "2073c8a1ef31b2091e59ddbd808432435efe5087", "filename": "src/visitor.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9699c96cf1e6a13e0cc12e17c55ca11d2f9a6bf2", "patch": "@@ -131,13 +131,18 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.format_missing(stmt.span().hi());\n             }\n             ast::StmtKind::Local(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n-                let attrs = get_attrs_from_stmt(stmt.as_ast_node());\n-                if contains_skip(attrs) {\n-                    self.push_skipped_with_span(\n-                        attrs,\n-                        stmt.span(),\n-                        get_span_without_attrs(stmt.as_ast_node()),\n-                    );\n+                if let Some(attrs) = get_attrs_from_stmt(stmt.as_ast_node()) {\n+                    if contains_skip(attrs) {\n+                        self.push_skipped_with_span(\n+                            attrs,\n+                            stmt.span(),\n+                            get_span_without_attrs(stmt.as_ast_node()),\n+                        );\n+                    } else {\n+                        let shape = self.shape();\n+                        let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n+                        self.push_rewrite(stmt.span(), rewrite)\n+                    }\n                 } else {\n                     let shape = self.shape();\n                     let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n@@ -157,6 +162,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n                 self.format_missing(stmt.span().hi());\n             }\n+            ast::StmtKind::Empty => (),\n         }\n     }\n \n@@ -507,7 +513,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => {\n                     self.visit_static(&StaticParts::from_item(item));\n                 }\n-                ast::ItemKind::Fn(ref fn_signature, ref generics, ref body) => {\n+                ast::ItemKind::Fn(defaultness, ref fn_signature, ref generics, ref body) => {\n                     let inner_attrs = inner_attributes(&item.attrs);\n                     let fn_ctxt = match fn_signature.header.ext {\n                         ast::Extern::None => visit::FnCtxt::Free,\n@@ -524,23 +530,23 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         generics,\n                         &fn_signature.decl,\n                         item.span,\n-                        ast::Defaultness::Final,\n+                        defaultness,\n                         Some(&inner_attrs),\n                     )\n                 }\n-                ast::ItemKind::TyAlias(ref ty, ref generics) => match ty.kind.opaque_top_hack() {\n-                    None => {\n+                ast::ItemKind::TyAlias(_, ref generics, ref generic_bounds, ref ty) => match ty {\n+                    Some(ty) => {\n                         let rewrite = rewrite_type_alias(\n                             &self.get_context(),\n                             self.block_indent,\n                             item.ident,\n-                            ty,\n+                            &*ty,\n                             generics,\n                             &item.vis,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n-                    Some(generic_bounds) => {\n+                    None => {\n                         let rewrite = rewrite_opaque_type(\n                             &self.get_context(),\n                             self.block_indent,\n@@ -583,30 +589,29 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         match ti.kind {\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n-            ast::AssocItemKind::Fn(ref sig, None) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n                 let indent = self.block_indent;\n-                let rewrite =\n-                    self.rewrite_required_fn(indent, ti.ident, sig, &ti.generics, ti.span);\n+                let rewrite = self.rewrite_required_fn(indent, ti.ident, sig, generics, ti.span);\n                 self.push_rewrite(ti.span, rewrite);\n             }\n-            ast::AssocItemKind::Fn(ref sig, Some(ref body)) => {\n+            ast::AssocItemKind::Fn(defaultness, ref sig, ref generics, Some(ref body)) => {\n                 let inner_attrs = inner_attributes(&ti.attrs);\n                 let vis = rustc_span::source_map::dummy_spanned(ast::VisibilityKind::Inherited);\n                 let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                 self.visit_fn(\n                     visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &vis, Some(body)),\n-                    &ti.generics,\n+                    generics,\n                     &sig.decl,\n                     ti.span,\n-                    ast::Defaultness::Final,\n+                    defaultness,\n                     Some(&inner_attrs),\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(ref generic_bounds, ref type_default) => {\n+            ast::AssocItemKind::TyAlias(_, ref generics, ref generic_bounds, ref type_default) => {\n                 let rewrite = rewrite_associated_type(\n                     ti.ident,\n                     type_default.as_ref(),\n-                    &ti.generics,\n+                    generics,\n                     Some(generic_bounds),\n                     &self.get_context(),\n                     self.block_indent,\n@@ -628,32 +633,31 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n \n         match ii.kind {\n-            ast::AssocItemKind::Fn(ref sig, Some(ref body)) => {\n+            ast::AssocItemKind::Fn(defaultness, ref sig, ref generics, Some(ref body)) => {\n                 let inner_attrs = inner_attributes(&ii.attrs);\n                 let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n                 self.visit_fn(\n                     visit::FnKind::Fn(fn_ctxt, ii.ident, sig, &ii.vis, Some(body)),\n-                    &ii.generics,\n+                    generics,\n                     &sig.decl,\n                     ii.span,\n-                    ii.defaultness,\n+                    defaultness,\n                     Some(&inner_attrs),\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, None) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n                 let indent = self.block_indent;\n-                let rewrite =\n-                    self.rewrite_required_fn(indent, ii.ident, sig, &ii.generics, ii.span);\n+                let rewrite = self.rewrite_required_fn(indent, ii.ident, sig, generics, ii.span);\n                 self.push_rewrite(ii.span, rewrite);\n             }\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n-            ast::AssocItemKind::TyAlias(_, ref ty) => {\n+            ast::AssocItemKind::TyAlias(defaultness, ref generics, _, ref ty) => {\n                 let rewrite_associated = || {\n                     rewrite_associated_impl_type(\n                         ii.ident,\n-                        ii.defaultness,\n+                        defaultness,\n                         ty.as_ref(),\n-                        &ii.generics,\n+                        &generics,\n                         &self.get_context(),\n                         self.block_indent,\n                     )\n@@ -664,7 +668,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         Some(generic_bounds) => rewrite_opaque_impl_type(\n                             &self.get_context(),\n                             ii.ident,\n-                            &ii.generics,\n+                            &generics,\n                             generic_bounds,\n                             self.block_indent,\n                         ),"}]}