{"sha": "0608b1d4146fc9fb76860bf71ff2363164f17326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDhiMWQ0MTQ2ZmM5ZmI3Njg2MGJmNzFmZjIzNjMxNjRmMTczMjY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-15T17:20:09Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-26T20:46:12Z"}, "message": "Fixed macro expander not folding attributes (though I'm not sure if that is actually neccessary)", "tree": {"sha": "d7fa4aceeda9b3861a4bdc233b38b71e44fa60c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7fa4aceeda9b3861a4bdc233b38b71e44fa60c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0608b1d4146fc9fb76860bf71ff2363164f17326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0608b1d4146fc9fb76860bf71ff2363164f17326", "html_url": "https://github.com/rust-lang/rust/commit/0608b1d4146fc9fb76860bf71ff2363164f17326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0608b1d4146fc9fb76860bf71ff2363164f17326/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0beba0217ad4ac748e93f7ea8d16c3b1fc4db1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0beba0217ad4ac748e93f7ea8d16c3b1fc4db1d", "html_url": "https://github.com/rust-lang/rust/commit/f0beba0217ad4ac748e93f7ea8d16c3b1fc4db1d"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "44dab257726d3b1835bd3f67378dcde452b61486", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0608b1d4146fc9fb76860bf71ff2363164f17326/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0608b1d4146fc9fb76860bf71ff2363164f17326/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0608b1d4146fc9fb76860bf71ff2363164f17326", "patch": "@@ -37,15 +37,14 @@ use std::collections::HashSet;\n \n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n     let expr_span = e.span;\n-    // FIXME: Drop attrs on the floor for now.\n     return e.and_then(|ast::Expr {id, node, span, attrs}| match node {\n \n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n         ast::ExprMac(mac) => {\n \n-            // drop attributes on the macro itself\n-            let _ = attrs;\n+            // FIXME: for now, drop attributes on the macro itself\n+            drop(attrs);\n \n             let expanded_expr = match expand_mac_invoc(mac, span,\n                                                        |r| r.make_expr(),\n@@ -79,14 +78,14 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let placer = fld.fold_expr(placer);\n             let value_expr = fld.fold_expr(value_expr);\n             fld.cx.expr(span, ast::ExprInPlace(placer, value_expr))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprWhile(cond, body, opt_ident) => {\n             let cond = fld.fold_expr(cond);\n             let (body, opt_ident) = expand_loop_block(body, opt_ident, fld);\n             fld.cx.expr(span, ast::ExprWhile(cond, body, opt_ident))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprWhileLet(pat, expr, body, opt_ident) => {\n@@ -104,13 +103,13 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             assert!(rewritten_pats.len() == 1);\n \n             fld.cx.expr(span, ast::ExprWhileLet(rewritten_pats.remove(0), expr, body, opt_ident))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprLoop(loop_block, opt_ident) => {\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n             fld.cx.expr(span, ast::ExprLoop(loop_block, opt_ident))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprForLoop(pat, head, body, opt_ident) => {\n@@ -128,7 +127,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             let head = fld.fold_expr(head);\n             fld.cx.expr(span, ast::ExprForLoop(rewritten_pats.remove(0), head, body, opt_ident))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprIfLet(pat, sub_expr, body, else_opt) => {\n@@ -147,7 +146,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let else_opt = else_opt.map(|else_opt| fld.fold_expr(else_opt));\n             let sub_expr = fld.fold_expr(sub_expr);\n             fld.cx.expr(span, ast::ExprIfLet(rewritten_pats.remove(0), sub_expr, body, else_opt))\n-                .with_attrs(attrs)\n+                .with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n         ast::ExprClosure(capture_clause, fn_decl, block) => {\n@@ -157,17 +156,16 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                                             rewritten_fn_decl,\n                                             rewritten_block);\n             P(ast::Expr{id:id, node: new_node, span: fld.new_span(span),\n-                        attrs: None})\n-                .with_attrs(attrs)\n+                        attrs: fold_thin_attrs(attrs, fld)})\n         }\n \n         _ => {\n             P(noop_fold_expr(ast::Expr {\n                 id: id,\n                 node: node,\n                 span: span,\n-                attrs: None\n-            }, fld)).with_attrs(attrs)\n+                attrs: attrs\n+            }, fld))\n         }\n     });\n }\n@@ -506,8 +504,8 @@ fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n         _ => return expand_non_macro_stmt(stmt, fld)\n     };\n \n-    // FIXME: drop attrs for macros.\n-    let _ = attrs;\n+    // FIXME: for now, drop attrs on macros.\n+    drop(attrs);\n \n     let maybe_new_items =\n         expand_mac_invoc(mac.and_then(|m| m), stmt.span,"}, {"sha": "0d5e80eab1700d389f4f1468458824ad22b5547b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0608b1d4146fc9fb76860bf71ff2363164f17326/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0608b1d4146fc9fb76860bf71ff2363164f17326/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0608b1d4146fc9fb76860bf71ff2363164f17326", "patch": "@@ -20,7 +20,7 @@\n \n use ast::*;\n use ast;\n-use attr::ThinAttributesExt;\n+use attr::{ThinAttributes, ThinAttributesExt};\n use ast_util;\n use codemap::{respan, Span, Spanned};\n use owned_slice::OwnedSlice;\n@@ -365,6 +365,10 @@ pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribut\n     attrs.into_iter().flat_map(|x| fld.fold_attribute(x)).collect()\n }\n \n+pub fn fold_thin_attrs<T: Folder>(attrs: ThinAttributes, fld: &mut T) -> ThinAttributes {\n+    attrs.map_thin_attrs(|v| fold_attrs(v, fld))\n+}\n+\n pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T) -> Arm {\n     Arm {\n         attrs: fold_attrs(attrs, fld),"}]}