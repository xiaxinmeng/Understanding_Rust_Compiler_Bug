{"sha": "3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODU3YTVhM2FhNDliM2VjMWY2OWFkMGU2MjgxMmU3YWUyNmQ3Yjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T15:26:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T15:26:40Z"}, "message": "Rollup merge of #79155 - 12101111:fix-profiler-config, r=Mark-Simulacrum\n\nfix handling the default config for profiler and sanitizers\n\n#78354 don't handle the case that user don't add any target-specific config in `[target.*]` of `config.toml`:\n```toml\nchangelog-seen = 2\n[llvm]\nlink-shared = true\n[build]\nsanitizers = true\nprofiler = true\n[install]\n[rust]\n[dist]\n```\n\nThe previes code handle the default config in `Config::prase()`:\n\n```rust\ntarget.sanitizers = cfg.sanitizers.unwrap_or(build.sanitizers.unwrap_or_default());\ntarget.profiler = cfg.profiler.unwrap_or(build.profiler.unwrap_or_default());\nconfig.target_config.insert(TargetSelection::from_user(&triple), target);\n```\n\nIn this case, `toml.target` don't contain any target, so the above code won't execute. Instead, a default `Target` is insert in https://github.com/rust-lang/rust/blob/c919f490bbcd2b29b74016101f7ec71aaa24bdbb/src/bootstrap/sanity.rs#L162-L166\n\nThe default value for `bool` is false, hence the issue in #79124\n\nThis fix change the type of `sanitizers` and `profiler` to `Option<bool>`, so the default value is `None`, and fallback config is handled in  `Config::sanitizers_enabled` and `Config::profiler_enabled`\n\nfix #79124\n\ncc `@Mark-Simulacrum` `@richkadel`", "tree": {"sha": "77813221e7ff6906dd35514e4545cf733f8ba46e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77813221e7ff6906dd35514e4545cf733f8ba46e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfto6xCRBK7hj4Ov3rIwAAdHIIABuRHLeODAF9fGpybdwZwp/O\nmvV5lD/G6Ge+/R+B9U03CKxQbphU2tnoiTgGfgKq2XmnttdYureHkBQASNPSuY1B\n8rTSzGIHuoFJNW1RHoX6Y61N92fk93+WPPzDG9jfQoRGbFqIhBjemsvsPbl+vpRb\nd4nDMGThQNipp4rZGO0wVsKBXQPtMJaBuSkfRKiCjEoHlYFhMlZqrVLFX1aGXLxs\nKEPbCvcuOxEWMqcv0y4v9jsCRZJ1Bx+zVIvmHPZtWaGgzw4aUOLu/eXCcV2z6eiw\np0XIgOzJFeCQWh+2U++SLpOlZWr1TIc815BAfScWO1evSteqpgHmnmwcc0eekl8=\n=+9//\n-----END PGP SIGNATURE-----\n", "payload": "tree 77813221e7ff6906dd35514e4545cf733f8ba46e\nparent 5c7d530b5ec520073f7388519f39033a7b342eef\nparent 36972b0d63ad4af65bb7bef6a05df4e1c726fbf0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605799600 +0100\ncommitter GitHub <noreply@github.com> 1605799600 +0100\n\nRollup merge of #79155 - 12101111:fix-profiler-config, r=Mark-Simulacrum\n\nfix handling the default config for profiler and sanitizers\n\n#78354 don't handle the case that user don't add any target-specific config in `[target.*]` of `config.toml`:\n```toml\nchangelog-seen = 2\n[llvm]\nlink-shared = true\n[build]\nsanitizers = true\nprofiler = true\n[install]\n[rust]\n[dist]\n```\n\nThe previes code handle the default config in `Config::prase()`:\n\n```rust\ntarget.sanitizers = cfg.sanitizers.unwrap_or(build.sanitizers.unwrap_or_default());\ntarget.profiler = cfg.profiler.unwrap_or(build.profiler.unwrap_or_default());\nconfig.target_config.insert(TargetSelection::from_user(&triple), target);\n```\n\nIn this case, `toml.target` don't contain any target, so the above code won't execute. Instead, a default `Target` is insert in https://github.com/rust-lang/rust/blob/c919f490bbcd2b29b74016101f7ec71aaa24bdbb/src/bootstrap/sanity.rs#L162-L166\n\nThe default value for `bool` is false, hence the issue in #79124\n\nThis fix change the type of `sanitizers` and `profiler` to `Option<bool>`, so the default value is `None`, and fallback config is handled in  `Config::sanitizers_enabled` and `Config::profiler_enabled`\n\nfix #79124\n\ncc `@Mark-Simulacrum` `@richkadel`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9", "html_url": "https://github.com/rust-lang/rust/commit/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c7d530b5ec520073f7388519f39033a7b342eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7d530b5ec520073f7388519f39033a7b342eef", "html_url": "https://github.com/rust-lang/rust/commit/5c7d530b5ec520073f7388519f39033a7b342eef"}, {"sha": "36972b0d63ad4af65bb7bef6a05df4e1c726fbf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/36972b0d63ad4af65bb7bef6a05df4e1c726fbf0", "html_url": "https://github.com/rust-lang/rust/commit/36972b0d63ad4af65bb7bef6a05df4e1c726fbf0"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "2c2efaa9eb4aa8be8bdd27959434b29ddf5fefae", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3b857a5a3aa49b3ec1f69ad0e62812e7ae26d7b9", "patch": "@@ -280,8 +280,8 @@ pub struct Target {\n     pub ranlib: Option<PathBuf>,\n     pub linker: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n-    pub sanitizers: bool,\n-    pub profiler: bool,\n+    pub sanitizers: Option<bool>,\n+    pub profiler: Option<bool>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub musl_libdir: Option<PathBuf>,\n@@ -896,8 +896,8 @@ impl Config {\n                 target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n-                target.sanitizers = cfg.sanitizers.unwrap_or(build.sanitizers.unwrap_or_default());\n-                target.profiler = cfg.profiler.unwrap_or(build.profiler.unwrap_or_default());\n+                target.sanitizers = cfg.sanitizers;\n+                target.profiler = cfg.profiler;\n \n                 config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n@@ -1008,19 +1008,19 @@ impl Config {\n     }\n \n     pub fn sanitizers_enabled(&self, target: TargetSelection) -> bool {\n-        self.target_config.get(&target).map(|t| t.sanitizers).unwrap_or(self.sanitizers)\n+        self.target_config.get(&target).map(|t| t.sanitizers).flatten().unwrap_or(self.sanitizers)\n     }\n \n     pub fn any_sanitizers_enabled(&self) -> bool {\n-        self.target_config.values().any(|t| t.sanitizers) || self.sanitizers\n+        self.target_config.values().any(|t| t.sanitizers == Some(true)) || self.sanitizers\n     }\n \n     pub fn profiler_enabled(&self, target: TargetSelection) -> bool {\n-        self.target_config.get(&target).map(|t| t.profiler).unwrap_or(self.profiler)\n+        self.target_config.get(&target).map(|t| t.profiler).flatten().unwrap_or(self.profiler)\n     }\n \n     pub fn any_profiler_enabled(&self) -> bool {\n-        self.target_config.values().any(|t| t.profiler) || self.profiler\n+        self.target_config.values().any(|t| t.profiler == Some(true)) || self.profiler\n     }\n \n     pub fn llvm_enabled(&self) -> bool {"}]}