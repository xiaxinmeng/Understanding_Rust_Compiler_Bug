{"sha": "25cd639a4b4d67d056e7a8dd3218c89b40af34f4", "node_id": "C_kwDOAAsO6NoAKDI1Y2Q2MzlhNGI0ZDY3ZDA1NmU3YThkZDMyMThjODliNDBhZjM0ZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-28T14:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-28T14:20:26Z"}, "message": "Rollup merge of #93353 - kellerkindt:saturating_int_assign_impl, r=joshtriplett\n\nUnimpl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}<$t> for Saturating<$t>\n\nTracking issue #92354\n\nAnalog to 9648b313cc8896970a12f45b3bb5c0593c3d510f #93208 reduce `saturating_int_assign_impl` (#93208) to:\n\n```rust\nlet mut value = Saturating(2u8);\nvalue += 3u8;\nvalue -= 1u8;\nvalue *= 2u8;\nvalue /= 2u8;\nvalue %= 2u8;\nvalue ^= 255u8;\nvalue |= 123u8;\nvalue &= 2u8;\n```\n\nSee https://github.com/rust-lang/rust/pull/93208#issuecomment-1022564429", "tree": {"sha": "48c38b835f9fd2541549768d46d84c506b2edf15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c38b835f9fd2541549768d46d84c506b2edf15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25cd639a4b4d67d056e7a8dd3218c89b40af34f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8/uqCRBK7hj4Ov3rIwAAIrQIAAENJRNH9P6/gNe70r+QEc+T\nOQx6UEXk4bqCzakDnW+ew31YUuRLJLwtsSvvBRwzSv8zFE9vUm/Ld9oDWTrBAkrQ\nUUct25g0aqjyVCzFP2ANpq3TnjcCaHFsQ3q5kv6zAy1wuaHwYwMLTajfe2QmWdT+\nJd7EAI0l2FdrjsA6zVQ8n3KX8D7mCLjPueiUExeG4QlLO8J/2vCzqhfcSAxCM2iV\nYpT48t+dVvx8BV6uEqC5Vmhrh9A584IkHDX3+OrHfpw/nfYL9LUrX+rz8fanTVaE\nu7EdAr9oOiStzaDxKlMEYC8pnBlLSSiPKQUKqNL1xf4hejHvLzKrDnsTeNBISaI=\n=GjiE\n-----END PGP SIGNATURE-----\n", "payload": "tree 48c38b835f9fd2541549768d46d84c506b2edf15\nparent 4f2e2ceeb7ee67e0645d68d89f20bc44340ad79d\nparent a6c0a3d9c2ff361a5f76175564b3c72e23cfcd54\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643379626 +0100\ncommitter GitHub <noreply@github.com> 1643379626 +0100\n\nRollup merge of #93353 - kellerkindt:saturating_int_assign_impl, r=joshtriplett\n\nUnimpl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}<$t> for Saturating<$t>\n\nTracking issue #92354\n\nAnalog to 9648b313cc8896970a12f45b3bb5c0593c3d510f #93208 reduce `saturating_int_assign_impl` (#93208) to:\n\n```rust\nlet mut value = Saturating(2u8);\nvalue += 3u8;\nvalue -= 1u8;\nvalue *= 2u8;\nvalue /= 2u8;\nvalue %= 2u8;\nvalue ^= 255u8;\nvalue |= 123u8;\nvalue &= 2u8;\n```\n\nSee https://github.com/rust-lang/rust/pull/93208#issuecomment-1022564429\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25cd639a4b4d67d056e7a8dd3218c89b40af34f4", "html_url": "https://github.com/rust-lang/rust/commit/25cd639a4b4d67d056e7a8dd3218c89b40af34f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25cd639a4b4d67d056e7a8dd3218c89b40af34f4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2e2ceeb7ee67e0645d68d89f20bc44340ad79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2e2ceeb7ee67e0645d68d89f20bc44340ad79d", "html_url": "https://github.com/rust-lang/rust/commit/4f2e2ceeb7ee67e0645d68d89f20bc44340ad79d"}, {"sha": "a6c0a3d9c2ff361a5f76175564b3c72e23cfcd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c0a3d9c2ff361a5f76175564b3c72e23cfcd54", "html_url": "https://github.com/rust-lang/rust/commit/a6c0a3d9c2ff361a5f76175564b3c72e23cfcd54"}], "stats": {"total": 130, "additions": 8, "deletions": 122}, "files": [{"sha": "8982473b2dc0378bed4cd2bab60feba7239037c4", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 8, "deletions": 122, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/25cd639a4b4d67d056e7a8dd3218c89b40af34f4/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cd639a4b4d67d056e7a8dd3218c89b40af34f4/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=25cd639a4b4d67d056e7a8dd3218c89b40af34f4", "patch": "@@ -217,18 +217,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Add, add for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Add<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn add(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_add(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Add, add for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl AddAssign for Saturating<$t> {\n             #[inline]\n@@ -242,7 +230,7 @@ macro_rules! saturating_impl {\n         impl AddAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn add_assign(&mut self, other: $t) {\n-                *self = *self + other;\n+                *self = *self + Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, $t }\n@@ -259,18 +247,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Sub, sub for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Sub<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn sub(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_sub(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Sub, sub for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl SubAssign for Saturating<$t> {\n             #[inline]\n@@ -284,7 +260,7 @@ macro_rules! saturating_impl {\n         impl SubAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn sub_assign(&mut self, other: $t) {\n-                *self = *self - other;\n+                *self = *self - Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, $t }\n@@ -301,18 +277,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Mul, mul for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Mul<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn mul(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_mul(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Mul, mul for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl MulAssign for Saturating<$t> {\n             #[inline]\n@@ -326,7 +290,7 @@ macro_rules! saturating_impl {\n         impl MulAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn mul_assign(&mut self, other: $t) {\n-                *self = *self * other;\n+                *self = *self * Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, $t }\n@@ -362,36 +326,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Div, div for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n-        /// use std::num::Saturating;\n-        ///\n-        #[doc = concat!(\"assert_eq!(Saturating(2\", stringify!($t), \"), Saturating(5\", stringify!($t), \") / 2);\")]\n-        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MAX), Saturating(\", stringify!($t), \"::MAX) / 1);\")]\n-        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN), Saturating(\", stringify!($t), \"::MIN) / 1);\")]\n-        /// ```\n-        ///\n-        /// ```should_panic\n-        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n-        /// use std::num::Saturating;\n-        ///\n-        #[doc = concat!(\"let _ = Saturating(0\", stringify!($t), \") / 0;\")]\n-        /// ```\n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Div<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn div(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_div(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Div, div for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n \n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl DivAssign for Saturating<$t> {\n@@ -406,7 +340,7 @@ macro_rules! saturating_impl {\n         impl DivAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn div_assign(&mut self, other: $t) {\n-                *self = *self / other;\n+                *self = *self / Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, $t }\n@@ -423,18 +357,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Rem, rem for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Rem<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn rem(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.rem(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Rem, rem for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl RemAssign for Saturating<$t> {\n             #[inline]\n@@ -448,7 +370,7 @@ macro_rules! saturating_impl {\n         impl RemAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) {\n-                *self = *self % other;\n+                *self = *self % Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, $t }\n@@ -477,18 +399,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitXor<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitxor(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 ^ other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitXorAssign for Saturating<$t> {\n             #[inline]\n@@ -502,7 +412,7 @@ macro_rules! saturating_impl {\n         impl BitXorAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) {\n-                *self = *self ^ other;\n+                *self = *self ^ Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, $t }\n@@ -519,18 +429,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitOr<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitor(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 | other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitOrAssign for Saturating<$t> {\n             #[inline]\n@@ -544,7 +442,7 @@ macro_rules! saturating_impl {\n         impl BitOrAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) {\n-                *self = *self | other;\n+                *self = *self | Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, $t }\n@@ -561,18 +459,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitAnd<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitand(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 & other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitAndAssign for Saturating<$t> {\n             #[inline]\n@@ -586,7 +472,7 @@ macro_rules! saturating_impl {\n         impl BitAndAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) {\n-                *self = *self & other;\n+                *self = *self & Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, $t }"}]}