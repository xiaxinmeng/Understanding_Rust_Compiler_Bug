{"sha": "2199d0cda9c745ecb460dd987b8da982d02bc130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTlkMGNkYTljNzQ1ZWNiNDYwZGQ5ODdiOGRhOTgyZDAyYmMxMzA=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-07T14:40:09Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:46:34Z"}, "message": "Fix type names broken by rebase, redo expected test because of rebase", "tree": {"sha": "5dae7b85010471639a219bfc16be90285f917c04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dae7b85010471639a219bfc16be90285f917c04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2199d0cda9c745ecb460dd987b8da982d02bc130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2199d0cda9c745ecb460dd987b8da982d02bc130", "html_url": "https://github.com/rust-lang/rust/commit/2199d0cda9c745ecb460dd987b8da982d02bc130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2199d0cda9c745ecb460dd987b8da982d02bc130/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61dff939f909e0c53bcd3be4c3e672c794022cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dff939f909e0c53bcd3be4c3e672c794022cde", "html_url": "https://github.com/rust-lang/rust/commit/61dff939f909e0c53bcd3be4c3e672c794022cde"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "872f5fa4c79451f86d4bb5f6748af7944a6e3736", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=2199d0cda9c745ecb460dd987b8da982d02bc130", "patch": "@@ -289,8 +289,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.is_unsafe_ref_expr(ref_expr)\n     }\n \n-    pub fn is_unsafe_bind_pat(&self, bind_pat: &ast::BindPat) -> bool {\n-        self.imp.is_unsafe_bind_pat(bind_pat)\n+    pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n+        self.imp.is_unsafe_ident_pat(ident_pat)\n     }\n }\n \n@@ -629,20 +629,24 @@ impl<'db> SemanticsImpl<'db> {\n         // more than it should with the current implementation.\n     }\n \n-    pub fn is_unsafe_bind_pat(&self, bind_pat: &ast::BindPat) -> bool {\n-        bind_pat\n+    pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n+        if !ident_pat.ref_token().is_some() {\n+            return false;\n+        }\n+\n+        ident_pat\n             .syntax()\n             .parent()\n             .and_then(|parent| {\n-                // `BindPat` can live under `RecordPat` directly under `RecordFieldPat` or\n-                // `RecordFieldPatList`. `RecordFieldPat` also lives under `RecordFieldPatList`,\n-                // so this tries to lookup the `BindPat` anywhere along that structure to the\n+                // `IdentPat` can live under `RecordPat` directly under `RecordPatField` or\n+                // `RecordPatFieldList`. `RecordPatField` also lives under `RecordPatFieldList`,\n+                // so this tries to lookup the `IdentPat` anywhere along that structure to the\n                 // `RecordPat` so we can get the containing type.\n-                let record_pat = ast::RecordFieldPat::cast(parent.clone())\n+                let record_pat = ast::RecordPatField::cast(parent.clone())\n                     .and_then(|record_pat| record_pat.syntax().parent())\n                     .or_else(|| Some(parent.clone()))\n                     .and_then(|parent| {\n-                        ast::RecordFieldPatList::cast(parent)?\n+                        ast::RecordPatFieldList::cast(parent)?\n                             .syntax()\n                             .parent()\n                             .and_then(ast::RecordPat::cast)"}, {"sha": "c62bb3f1abcca61d151a66de3184c91084189509", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=2199d0cda9c745ecb460dd987b8da982d02bc130", "patch": "@@ -662,9 +662,9 @@ fn highlight_element(\n                 }\n                 T![ref] => element\n                     .parent()\n-                    .and_then(ast::BindPat::cast)\n-                    .and_then(|bind_pat| {\n-                        if sema.is_unsafe_bind_pat(&bind_pat) {\n+                    .and_then(ast::IdentPat::cast)\n+                    .and_then(|ident_pat| {\n+                        if sema.is_unsafe_ident_pat(&ident_pat) {\n                             Some(HighlightModifier::Unsafe)\n                         } else {\n                             None"}, {"sha": "552fea668923f1f9fd9e9a17973d7575885bb90b", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/2199d0cda9c745ecb460dd987b8da982d02bc130/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=2199d0cda9c745ecb460dd987b8da982d02bc130", "patch": "@@ -54,6 +54,19 @@\n \n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"punctuation\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n \n+<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"function attribute\">repr</span><span class=\"punctuation\">(</span><span class=\"attribute\">packed</span><span class=\"punctuation\">)</span><span class=\"attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u16</span><span class=\"punctuation\">,</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n@@ -66,8 +79,21 @@\n             <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n         <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe deref</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe access to a static mut</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe ref of packed fields</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">packed</span> <span class=\"operator\">=</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">&</span><span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"keyword unsafe\">ref</span> <span class=\"field\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">_a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe auto ref of packed field</span>\n+        <span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}]}