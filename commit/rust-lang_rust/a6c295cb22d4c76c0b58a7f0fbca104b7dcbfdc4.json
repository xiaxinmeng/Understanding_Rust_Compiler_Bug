{"sha": "a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzI5NWNiMjJkNGM3NmMwYjU4YTdmMGZiY2ExMDRiN2RjYmZkYzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-11T15:29:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T18:29:51Z"}, "message": "Modify `repr()` so that when `-Z verbose` is used, at least, it does not\nfetch trait definitions. This allows is to be used early in the compiler\nwithout triggering ICEs. Also make -Z verbose less horrifyingly ugly.", "tree": {"sha": "a556c5f88ae471644a1064b37995874b2b50801b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a556c5f88ae471644a1064b37995874b2b50801b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4", "html_url": "https://github.com/rust-lang/rust/commit/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e88b5bbf907bdb7d7610d66c27504be92330030", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e88b5bbf907bdb7d7610d66c27504be92330030", "html_url": "https://github.com/rust-lang/rust/commit/3e88b5bbf907bdb7d7610d66c27504be92330030"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "0363978bada2530db3160b99b0f9ffa8443771aa", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 58, "deletions": 34, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a6c295cb22d4c76c0b58a7f0fbca104b7dcbfdc4", "patch": "@@ -395,8 +395,8 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         }\n         ty_enum(did, substs) | ty_struct(did, substs) => {\n             let base = ty::item_path_str(cx, did);\n-            let generics = ty::lookup_item_type(cx, did).generics;\n-            parameterized(cx, &base, substs, &generics, did, &[])\n+            parameterized(cx, &base, substs, did, &[],\n+                          || ty::lookup_item_type(cx, did).generics)\n         }\n         ty_trait(ref data) => {\n             data.user_string(cx)\n@@ -444,23 +444,40 @@ pub fn explicit_self_category_to_str(category: &ty::ExplicitSelfCategory)\n     }\n }\n \n-pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n-                           base: &str,\n-                           substs: &subst::Substs<'tcx>,\n-                           generics: &ty::Generics<'tcx>,\n-                           did: ast::DefId,\n-                           projections: &[ty::ProjectionPredicate<'tcx>])\n-                           -> String\n+pub fn parameterized<'tcx,GG>(cx: &ctxt<'tcx>,\n+                              base: &str,\n+                              substs: &subst::Substs<'tcx>,\n+                              did: ast::DefId,\n+                              projections: &[ty::ProjectionPredicate<'tcx>],\n+                              get_generics: GG)\n+                              -> String\n+    where GG : FnOnce() -> ty::Generics<'tcx>\n {\n     if cx.sess.verbose() {\n-        if substs.is_noop() {\n-            return format!(\"{}\", base);\n-        } else {\n-            return format!(\"{}<{},{}>\",\n-                           base,\n-                           substs.regions.repr(cx),\n-                           substs.types.repr(cx));\n+        let mut strings = vec![];\n+        match substs.regions {\n+            subst::ErasedRegions => {\n+                strings.push(format!(\"..\"));\n+            }\n+            subst::NonerasedRegions(ref regions) => {\n+                for region in regions.iter() {\n+                    strings.push(region.repr(cx));\n+                }\n+            }\n         }\n+        for ty in substs.types.iter() {\n+            strings.push(ty.repr(cx));\n+        }\n+        for projection in projections.iter() {\n+            strings.push(format!(\"{}={}\",\n+                                 projection.projection_ty.item_name.user_string(cx),\n+                                 projection.ty.user_string(cx)));\n+        }\n+        return if strings.is_empty() {\n+            format!(\"{}\", base)\n+        } else {\n+            format!(\"{}<{}>\", base, strings.connect(\",\"))\n+        };\n     }\n \n     let mut strs = Vec::new();\n@@ -484,6 +501,13 @@ pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n         }\n     }\n \n+    // It is important to execute this conditionally, only if -Z\n+    // verbose is false. Otherwise, debug logs can sometimes cause\n+    // ICEs trying to fetch the generics early in the pipeline. This\n+    // is kind of a hacky workaround in that -Z verbose is required to\n+    // avoid those ICEs.\n+    let generics = get_generics();\n+\n     let tps = substs.types.get_slice(subst::TypeSpace);\n     let ty_params = generics.types.get_slice(subst::TypeSpace);\n     let has_defaults = ty_params.last().map_or(false, |def| def.default.is_some());\n@@ -645,13 +669,12 @@ impl<'tcx> UserString<'tcx> for TraitAndProjections<'tcx> {\n     fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n         let &(ref trait_ref, ref projection_bounds) = self;\n         let base = ty::item_path_str(tcx, trait_ref.def_id);\n-        let trait_def = ty::lookup_trait_def(tcx, trait_ref.def_id);\n         parameterized(tcx,\n                       &base,\n                       trait_ref.substs,\n-                      &trait_def.generics,\n                       trait_ref.def_id,\n-                      &projection_bounds[])\n+                      &projection_bounds[],\n+                      || ty::lookup_trait_def(tcx, trait_ref.def_id).generics.clone())\n     }\n }\n \n@@ -687,10 +710,9 @@ impl<'tcx> UserString<'tcx> for ty::TyTrait<'tcx> {\n }\n \n impl<'tcx> Repr<'tcx> for ty::TypeParameterDef<'tcx> {\n-    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"TypeParameterDef({:?}, {}, {:?}/{})\",\n+    fn repr(&self, _tcx: &ctxt<'tcx>) -> String {\n+        format!(\"TypeParameterDef({:?}, {:?}/{})\",\n                 self.def_id,\n-                self.bounds.repr(tcx),\n                 self.space,\n                 self.index)\n     }\n@@ -781,11 +803,8 @@ impl<'tcx> Repr<'tcx> for ty::TraitRef<'tcx> {\n         // to enumerate the `for<...>` etc because the debruijn index\n         // tells you everything you need to know.\n         let base = ty::item_path_str(tcx, self.def_id);\n-        let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n-        format!(\"TraitRef({}, {})\",\n-                self.substs.self_ty().repr(tcx),\n-                parameterized(tcx, &base, self.substs,\n-                              &trait_def.generics, self.def_id, &[]))\n+        parameterized(tcx, &base, self.substs, self.def_id, &[],\n+                      || ty::lookup_trait_def(tcx, self.def_id).generics.clone())\n     }\n }\n \n@@ -987,16 +1006,22 @@ impl<'tcx> Repr<'tcx> for ty::TypeScheme<'tcx> {\n \n impl<'tcx> Repr<'tcx> for ty::Generics<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"Generics(types: {}, regions: {}, predicates: {})\",\n+        format!(\"Generics(types: {}, regions: {})\",\n                 self.types.repr(tcx),\n-                self.regions.repr(tcx),\n+                self.regions.repr(tcx))\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for ty::GenericPredicates<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"GenericPredicates(predicates: {})\",\n                 self.predicates.repr(tcx))\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for ty::GenericBounds<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::InstantiatedPredicates<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"GenericBounds({})\",\n+        format!(\"InstantiatedPredicates({})\",\n                 self.predicates.repr(tcx))\n     }\n }\n@@ -1249,9 +1274,8 @@ impl<'tcx, T> UserString<'tcx> for ty::Binder<T>\n impl<'tcx> UserString<'tcx> for ty::TraitRef<'tcx> {\n     fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n         let path_str = ty::item_path_str(tcx, self.def_id);\n-        let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n-        parameterized(tcx, &path_str, self.substs,\n-                      &trait_def.generics, self.def_id, &[])\n+        parameterized(tcx, &path_str, self.substs, self.def_id, &[],\n+                      || ty::lookup_trait_def(tcx, self.def_id).generics.clone())\n     }\n }\n "}]}