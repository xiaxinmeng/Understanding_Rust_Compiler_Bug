{"sha": "594f1d79da1eebb2acb674b686d98b4fc1ef165f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NGYxZDc5ZGExZWViYjJhY2I2NzRiNjg2ZDk4YjRmYzFlZjE2NWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-30T14:42:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-01T11:09:17Z"}, "message": "optimize all ZST allocations into one single allocation", "tree": {"sha": "a5a86c2546ea01e6e761c8702da6a8a0bdc4050f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a86c2546ea01e6e761c8702da6a8a0bdc4050f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594f1d79da1eebb2acb674b686d98b4fc1ef165f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXdk9dAAoJEFbW7qD8Z6xGI2YP/17NHwz1nz/npEdV478ZQLmC\nrMWNHitaQigO0Pi6lMvS530iPPHBPusjyVrQqEXebmMi+pYmm0BJxqpLvyjOa7dn\nU5J6bCdTmqiCLgD/CQ8aKnHLScKIrie7qZLa/Ap5uuovdS32nlSt0jN4IRD/kjpO\nW4CXFFIegSBi71HBiMGZ+KvI7aoPP4kGAuFN+9RWiEAnxUwo20GH0+qxPnREzYZ/\n+DEI8sDqTS9VHhLy3+LFrUhdOgyYQo+zuPFeuSEPVITUOUIKdBsXp92ljm+2TGog\nNnTgzncEZseQ7UbLLad8ogPhc9XBflhU6Sq0+rjqU7ZVpFkHpr3gCzenBUY2D6pB\n/VnOnnSqGU6mL6yF0DI1r52PVeYjAfPRHlY8PfZBUkb1vyekGaYHNbBjSsrngdTp\nF5IwMyEVyiUZhRu9YEsJEjRv/dNkiPlUsuTZh8mT+71mxVmPA11pjctblpb9TY1J\nzXw8uH/1lgPBOlJDsq02SR97ZfWRzv/7l9U5T4wqA3sS/2aSMlimBiXXTan8GYJx\naN0TYl78tJGGjA+IPsI0ACO07za7/ujlS5iPFhFu5BKNpDVelT6S8G9acnDpmMnw\nXWlbcot3TDfj3pghAnL/cG5qRcaH8uJrhbt3Y5+P8lowqVMwFRW/QMR12rfm0IGd\npmkSrwcwZ37vVw1UFGl8\n=2Ujv\n-----END PGP SIGNATURE-----", "payload": "tree a5a86c2546ea01e6e761c8702da6a8a0bdc4050f\nparent 1720b1f4af5edaf10cdc97a81d233c81a16eee0d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467297729 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467371357 +0200\n\noptimize all ZST allocations into one single allocation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594f1d79da1eebb2acb674b686d98b4fc1ef165f", "html_url": "https://github.com/rust-lang/rust/commit/594f1d79da1eebb2acb674b686d98b4fc1ef165f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594f1d79da1eebb2acb674b686d98b4fc1ef165f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1720b1f4af5edaf10cdc97a81d233c81a16eee0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1720b1f4af5edaf10cdc97a81d233c81a16eee0d", "html_url": "https://github.com/rust-lang/rust/commit/1720b1f4af5edaf10cdc97a81d233c81a16eee0d"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "8f5ec0e1b597b4c612c492e0c062bbe3b9d8c2df", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/594f1d79da1eebb2acb674b686d98b4fc1ef165f/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594f1d79da1eebb2acb674b686d98b4fc1ef165f/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=594f1d79da1eebb2acb674b686d98b4fc1ef165f", "patch": "@@ -423,8 +423,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"__rust_reallocate\" => {\n                 let ptr = self.memory.read_ptr(args[0])?;\n                 let size = self.memory.read_usize(args[2])?;\n-                self.memory.reallocate(ptr, size as usize)?;\n-                self.memory.write_ptr(dest, ptr)?;\n+                let new_ptr = self.memory.reallocate(ptr, size as usize)?;\n+                self.memory.write_ptr(dest, new_ptr)?;\n             }\n \n             \"memcmp\" => {"}, {"sha": "25612c435e2600c146747ee28d287bb99d0338d9", "filename": "src/memory.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/594f1d79da1eebb2acb674b686d98b4fc1ef165f/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594f1d79da1eebb2acb674b686d98b4fc1ef165f/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=594f1d79da1eebb2acb674b686d98b4fc1ef165f", "patch": "@@ -39,8 +39,18 @@ pub struct Pointer {\n \n impl Pointer {\n     pub fn offset(self, i: isize) -> Self {\n+        // FIXME: prevent offsetting ZST ptrs in tracing mode\n         Pointer { offset: (self.offset as isize + i) as usize, ..self }\n     }\n+    pub fn points_to_zst(&self) -> bool {\n+        self.alloc_id.0 == 0\n+    }\n+    fn zst_ptr() -> Self {\n+        Pointer {\n+            alloc_id: AllocId(0),\n+            offset: 0,\n+        }\n+    }\n }\n \n #[derive(Debug, Copy, Clone, Hash, Eq, PartialEq)]\n@@ -68,13 +78,25 @@ pub struct Memory<'a, 'tcx> {\n \n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn new(layout: &'a TargetDataLayout) -> Self {\n-        Memory {\n+        let mut mem = Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n             function_alloc_cache: HashMap::new(),\n-            next_id: AllocId(0),\n+            next_id: AllocId(1),\n             layout: layout,\n-        }\n+        };\n+        // alloc id 0 is reserved for ZSTs, this is an optimization to prevent ZST\n+        // (e.g. function pointers, (), [], ...) from requiring memory\n+        let alloc = Allocation {\n+            bytes: Vec::new(),\n+            relocations: BTreeMap::new(),\n+            undef_mask: UndefMask::new(0),\n+        };\n+        mem.alloc_map.insert(AllocId(0), alloc);\n+        // check that additional zst allocs work\n+        debug_assert!(mem.allocate(0).points_to_zst());\n+        debug_assert!(mem.get(AllocId(0)).is_ok());\n+        mem\n     }\n \n     pub fn allocations<'b>(&'b self) -> ::std::collections::hash_map::Iter<'b, AllocId, Allocation> {\n@@ -105,6 +127,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn allocate(&mut self, size: usize) -> Pointer {\n+        if size == 0 {\n+            return Pointer::zst_ptr();\n+        }\n         let alloc = Allocation {\n             bytes: vec![0; size],\n             relocations: BTreeMap::new(),\n@@ -121,7 +146,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     // TODO(solson): Track which allocations were returned from __rust_allocate and report an error\n     // when reallocating/deallocating any others.\n-    pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<'tcx, ()> {\n+    pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<'tcx, Pointer> {\n+        if ptr.points_to_zst() {\n+            if new_size != 0 {\n+                return Ok(self.allocate(new_size));\n+            } else {\n+                return Ok(ptr);\n+            }\n+        }\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n@@ -141,11 +173,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             alloc.undef_mask.truncate(new_size);\n         }\n \n-        Ok(())\n+        Ok(ptr)\n     }\n \n     // TODO(solson): See comment on `reallocate`.\n     pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<'tcx, ()> {\n+        if ptr.points_to_zst() {\n+            return Ok(());\n+        }\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));"}, {"sha": "4ebb2001e7203f3f4d0b60e55461657384741273", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/594f1d79da1eebb2acb674b686d98b4fc1ef165f/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594f1d79da1eebb2acb674b686d98b4fc1ef165f/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=594f1d79da1eebb2acb674b686d98b4fc1ef165f", "patch": "@@ -1,3 +1,9 @@\n+// the following flag prevents this test from running on the host machine\n+// this should only be run on miri, because rust doesn't (yet?) optimize ZSTs of different types\n+// into the same memory location\n+// ignore-test\n+\n+\n #[derive(PartialEq, Debug)]\n struct A;\n \n@@ -13,4 +19,6 @@ fn use_zst() -> A {\n fn main() {\n     assert_eq!(zst_ret(), A);\n     assert_eq!(use_zst(), A);\n+    assert_eq!(&A as *const A as *const (), &() as *const _);\n+    assert_eq!(&A as *const A, &A as *const A);\n }"}]}