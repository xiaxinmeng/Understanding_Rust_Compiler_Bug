{"sha": "54e7946d0fde56ea25b331df8d971bed0d232cac", "node_id": "C_kwDOAAsO6NoAKDU0ZTc5NDZkMGZkZTU2ZWEyNWIzMzFkZjhkOTcxYmVkMGQyMzJjYWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T07:16:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T07:16:25Z"}, "message": "Rollup merge of #87901 - poliorcetics:pub-pub-pub, r=jackh726\n\nFix suggestion of additional `pub` when using `pub pub fn ...`\n\nFix #87694.\n\nMarked as draft to start with because I want to explore doing the same fix for `const const fn` and other repeated-but-valid keywords.\n\n`@rustbot` label A-diagnostics D-invalid-suggestion T-compiler", "tree": {"sha": "edc8902c45141c72da3566abacd80c96f84eebbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc8902c45141c72da3566abacd80c96f84eebbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54e7946d0fde56ea25b331df8d971bed0d232cac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvYrJCRBK7hj4Ov3rIwAA3EUIAJmIlqQDFRZMgV6bzLjHzjxW\nokHoHLj+yXDBO9GdSpQck9EpIxdy03V/WrBtHaC6YfwlvZVmKQVzG/8J0PHquiQ+\nYwG3glsTFabuXbIlo8axS53VbE3R4Ym9HBS+oqEDMRTh2ETRJGeVqfRufy/9jO7A\n6TDJ54kRSVa1DwPqlnoYLmkAMlV0eis4hvFzjs0ThbXSEEImyAKze05N4MHUhkQg\npWTJLN8XEkIHJlqq+dzr7XA4GPpSctLalSMdidppLGhcAYXhEHbB1rowd2B3fyFl\nIxPi2+C+kpi5ttXRJ5C8b4i6lD2cI1emVJ05E9U0ikZbvZCmTr02R+FfOY2fDyM=\n=29In\n-----END PGP SIGNATURE-----\n", "payload": "tree edc8902c45141c72da3566abacd80c96f84eebbf\nparent dde825db464b08d6f572766579dfb629b837368c\nparent be33ca7d5b9c79a649ff4c38e0d351df326ff93c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639811785 +0100\ncommitter GitHub <noreply@github.com> 1639811785 +0100\n\nRollup merge of #87901 - poliorcetics:pub-pub-pub, r=jackh726\n\nFix suggestion of additional `pub` when using `pub pub fn ...`\n\nFix #87694.\n\nMarked as draft to start with because I want to explore doing the same fix for `const const fn` and other repeated-but-valid keywords.\n\n`@rustbot` label A-diagnostics D-invalid-suggestion T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54e7946d0fde56ea25b331df8d971bed0d232cac", "html_url": "https://github.com/rust-lang/rust/commit/54e7946d0fde56ea25b331df8d971bed0d232cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54e7946d0fde56ea25b331df8d971bed0d232cac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde825db464b08d6f572766579dfb629b837368c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde825db464b08d6f572766579dfb629b837368c", "html_url": "https://github.com/rust-lang/rust/commit/dde825db464b08d6f572766579dfb629b837368c"}, {"sha": "be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "html_url": "https://github.com/rust-lang/rust/commit/be33ca7d5b9c79a649ff4c38e0d351df326ff93c"}], "stats": {"total": 199, "additions": 154, "deletions": 45}, "files": [{"sha": "618aa3fd002a8ba8256e1752eeed2e560445d38e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 83, "deletions": 29, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, vis)?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1511,9 +1511,16 @@ impl<'a> Parser<'a> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n+                let inherited_vis = Visibility {\n+                    span: rustc_span::DUMMY_SP,\n+                    kind: VisibilityKind::Inherited,\n+                    tokens: None,\n+                };\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo) {\n+                if let Err(mut db) =\n+                    self.parse_fn(&mut Vec::new(), fn_parse_mode, lo, &inherited_vis)\n+                {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1793,8 +1800,9 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n+        vis: &Visibility,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n-        let header = self.parse_fn_front_matter()?; // `const ... fn`\n+        let header = self.parse_fn_front_matter(vis)?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl =\n@@ -1903,12 +1911,15 @@ impl<'a> Parser<'a> {\n     /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,\n     /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n-    /// ```\n+    /// ```text\n     /// Extern = \"extern\" StringLit? ;\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n     /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n-    pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n+    ///\n+    /// `vis` represents the visibility that was already parsed, if any. Use\n+    /// `Visibility::Inherited` when no visibility is known.\n+    pub(super) fn parse_fn_front_matter(&mut self, orig_vis: &Visibility) -> PResult<'a, FnHeader> {\n         let sp_start = self.token.span;\n         let constness = self.parse_constness();\n \n@@ -1934,51 +1945,94 @@ impl<'a> Parser<'a> {\n                 Ok(false) => unreachable!(),\n                 Err(mut err) => {\n                     // Qualifier keywords ordering check\n+                    enum WrongKw {\n+                        Duplicated(Span),\n+                        Misplaced(Span),\n+                    }\n \n-                    // This will allow the machine fix to directly place the keyword in the correct place\n-                    let current_qual_sp = if self.check_keyword(kw::Const) {\n-                        Some(async_start_sp)\n+                    // This will allow the machine fix to directly place the keyword in the correct place or to indicate\n+                    // that the keyword is already present and the second instance should be removed.\n+                    let wrong_kw = if self.check_keyword(kw::Const) {\n+                        match constness {\n+                            Const::Yes(sp) => Some(WrongKw::Duplicated(sp)),\n+                            Const::No => Some(WrongKw::Misplaced(async_start_sp)),\n+                        }\n                     } else if self.check_keyword(kw::Async) {\n-                        Some(unsafe_start_sp)\n+                        match asyncness {\n+                            Async::Yes { span, .. } => Some(WrongKw::Duplicated(span)),\n+                            Async::No => Some(WrongKw::Misplaced(unsafe_start_sp)),\n+                        }\n                     } else if self.check_keyword(kw::Unsafe) {\n-                        Some(ext_start_sp)\n+                        match unsafety {\n+                            Unsafe::Yes(sp) => Some(WrongKw::Duplicated(sp)),\n+                            Unsafe::No => Some(WrongKw::Misplaced(ext_start_sp)),\n+                        }\n                     } else {\n                         None\n                     };\n \n-                    if let Some(current_qual_sp) = current_qual_sp {\n-                        let current_qual_sp = current_qual_sp.to(self.prev_token.span);\n-                        if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n-                            let invalid_qual_sp = self.token.uninterpolated_span();\n-                            let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n+                    // The keyword is already present, suggest removal of the second instance\n+                    if let Some(WrongKw::Duplicated(original_sp)) = wrong_kw {\n+                        let original_kw = self\n+                            .span_to_snippet(original_sp)\n+                            .expect(\"Span extracted directly from keyword should always work\");\n+\n+                        err.span_suggestion(\n+                            self.token.uninterpolated_span(),\n+                            &format!(\"`{}` already used earlier, remove this one\", original_kw),\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .span_note(original_sp, &format!(\"`{}` first seen here\", original_kw));\n+                    }\n+                    // The keyword has not been seen yet, suggest correct placement in the function front matter\n+                    else if let Some(WrongKw::Misplaced(correct_pos_sp)) = wrong_kw {\n+                        let correct_pos_sp = correct_pos_sp.to(self.prev_token.span);\n+                        if let Ok(current_qual) = self.span_to_snippet(correct_pos_sp) {\n+                            let misplaced_qual_sp = self.token.uninterpolated_span();\n+                            let misplaced_qual = self.span_to_snippet(misplaced_qual_sp).unwrap();\n \n                             err.span_suggestion(\n-                                current_qual_sp.to(invalid_qual_sp),\n-                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n-                                format!(\"{} {}\", invalid_qual, current_qual),\n-                                Applicability::MachineApplicable,\n-                            ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                                    correct_pos_sp.to(misplaced_qual_sp),\n+                                    &format!(\"`{}` must come before `{}`\", misplaced_qual, current_qual),\n+                                    format!(\"{} {}\", misplaced_qual, current_qual),\n+                                    Applicability::MachineApplicable,\n+                                ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n                         }\n                     }\n-                    // Recover incorrect visibility order such as `async pub`.\n+                    // Recover incorrect visibility order such as `async pub`\n                     else if self.check_keyword(kw::Pub) {\n                         let sp = sp_start.to(self.prev_token.span);\n                         if let Ok(snippet) = self.span_to_snippet(sp) {\n-                            let vis = match self.parse_visibility(FollowedByType::No) {\n+                            let current_vis = match self.parse_visibility(FollowedByType::No) {\n                                 Ok(v) => v,\n                                 Err(mut d) => {\n                                     d.cancel();\n                                     return Err(err);\n                                 }\n                             };\n-                            let vs = pprust::vis_to_string(&vis);\n+                            let vs = pprust::vis_to_string(&current_vis);\n                             let vs = vs.trim_end();\n-                            err.span_suggestion(\n-                                sp_start.to(self.prev_token.span),\n-                                &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n-                                format!(\"{} {}\", vs, snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n+\n+                            // There was no explicit visibility\n+                            if matches!(orig_vis.kind, VisibilityKind::Inherited) {\n+                                err.span_suggestion(\n+                                    sp_start.to(self.prev_token.span),\n+                                    &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n+                                    format!(\"{} {}\", vs, snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            // There was an explicit visibility\n+                            else {\n+                                err.span_suggestion(\n+                                    current_vis.span,\n+                                    \"there is already a visibility modifier, remove one\",\n+                                    \"\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .span_note(orig_vis.span, \"explicit visibility first seen here\");\n+                            }\n                         }\n                     }\n                     return Err(err);"}, {"sha": "02a774ba1291cf4228441acb11a1d863bc3d53bd", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -474,7 +474,13 @@ impl<'a> Parser<'a> {\n         params: Vec<GenericParam>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n-        let ast::FnHeader { ext, unsafety, constness, asyncness } = self.parse_fn_front_matter()?;\n+        let inherited_vis = rustc_ast::Visibility {\n+            span: rustc_span::DUMMY_SP,\n+            kind: rustc_ast::VisibilityKind::Inherited,\n+            tokens: None,\n+        };\n+        let ast::FnHeader { ext, unsafety, constness, asyncness } =\n+            self.parse_fn_front_matter(&inherited_vis)?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {"}, {"sha": "32aeee294728a74b59e55cc97688824f2933fa2d", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -1,6 +1,9 @@\n fn main() {}\n \n-extern \"C\" {\n+extern \"C\" { //~ NOTE while parsing this item list starting here\n     pub pub fn foo();\n     //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n-}\n+    //~| NOTE expected one of 9 possible tokens\n+    //~| HELP there is already a visibility modifier, remove one\n+    //~| NOTE explicit visibility first seen here\n+} //~ NOTE the item list ends here"}, {"sha": "97144ac2f642d3b7672f402a9ebda101d321a9c9", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -7,10 +7,16 @@ LL |     pub pub fn foo();\n    |         ^^^\n    |         |\n    |         expected one of 9 possible tokens\n-   |         help: visibility `pub` must come before `pub pub`: `pub pub pub`\n-LL |\n+   |         help: there is already a visibility modifier, remove one\n+...\n LL | }\n    | - the item list ends here\n+   |\n+note: explicit visibility first seen here\n+  --> $DIR/duplicate-visibility.rs:4:5\n+   |\n+LL |     pub pub fn foo();\n+   |     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e3ea61dc4ada6c9d3253382e060e64bd8e43f916", "filename": "src/test/ui/parser/issue-87694-duplicated-pub.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -0,0 +1,5 @@\n+pub const pub fn test() {}\n+//~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+//~| NOTE expected one of `async`, `extern`, `fn`, or `unsafe`\n+//~| HELP there is already a visibility modifier, remove one\n+//~| NOTE explicit visibility first seen here"}, {"sha": "8d242bc9de5850d74a7b53dddb8d0cf15af63444", "filename": "src/test/ui/parser/issue-87694-duplicated-pub.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -0,0 +1,17 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-87694-duplicated-pub.rs:1:11\n+   |\n+LL | pub const pub fn test() {}\n+   |           ^^^\n+   |           |\n+   |           expected one of `async`, `extern`, `fn`, or `unsafe`\n+   |           help: there is already a visibility modifier, remove one\n+   |\n+note: explicit visibility first seen here\n+  --> $DIR/issue-87694-duplicated-pub.rs:1:1\n+   |\n+LL | pub const pub fn test() {}\n+   | ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f824617cade1288e4fd107c397a6642016fb2f5", "filename": "src/test/ui/parser/issue-87694-misplaced-pub.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -0,0 +1,5 @@\n+const pub fn test() {}\n+//~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+//~| NOTE expected one of `async`, `extern`, `fn`, or `unsafe`\n+//~| HELP visibility `pub` must come before `const`\n+//~| SUGGESTION pub const"}, {"sha": "94c6a29efcb3b7c769512ab5cd07024593187911", "filename": "src/test/ui/parser/issue-87694-misplaced-pub.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-87694-misplaced-pub.rs:1:7\n+   |\n+LL | const pub fn test() {}\n+   | ------^^^\n+   | |     |\n+   | |     expected one of `async`, `extern`, `fn`, or `unsafe`\n+   | help: visibility `pub` must come before `const`: `pub const`\n+\n+error: aborting due to previous error\n+"}, {"sha": "df0cd54399a538a4262487191e72699984db5df3", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/const-async-const.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -1,11 +1,9 @@\n // edition:2018\n \n-// Test that even when `const` is already present, the proposed fix is `const const async`,\n-// like for `pub pub`.\n+// Test that even when `const` is already present, the proposed fix is to remove the second `const`\n \n const async const fn test() {}\n //~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n //~| NOTE expected one of `extern`, `fn`, or `unsafe`\n-//~| HELP `const` must come before `async`\n-//~| SUGGESTION const async\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| HELP `const` already used earlier, remove this one\n+//~| NOTE `const` first seen here"}, {"sha": "977c6ebfef352bc6999849e679297a0c0ba89762", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/const-async-const.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54e7946d0fde56ea25b331df8d971bed0d232cac/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr?ref=54e7946d0fde56ea25b331df8d971bed0d232cac", "patch": "@@ -1,13 +1,17 @@\n error: expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n-  --> $DIR/const-async-const.rs:6:13\n+  --> $DIR/const-async-const.rs:5:13\n    |\n LL | const async const fn test() {}\n-   |       ------^^^^^\n-   |       |     |\n-   |       |     expected one of `extern`, `fn`, or `unsafe`\n-   |       help: `const` must come before `async`: `const async`\n+   |             ^^^^^\n+   |             |\n+   |             expected one of `extern`, `fn`, or `unsafe`\n+   |             help: `const` already used earlier, remove this one\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+note: `const` first seen here\n+  --> $DIR/const-async-const.rs:5:1\n+   |\n+LL | const async const fn test() {}\n+   | ^^^^^\n \n error: aborting due to previous error\n "}]}