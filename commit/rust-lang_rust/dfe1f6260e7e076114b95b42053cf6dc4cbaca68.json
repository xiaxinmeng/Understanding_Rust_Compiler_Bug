{"sha": "dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZTFmNjI2MGU3ZTA3NjExNGI5NWI0MjA1M2NmNmRjNGNiYWNhNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T18:22:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T18:22:35Z"}, "message": "rustc: Remove all fixed-length strings from our codebase", "tree": {"sha": "62494df82d25e902d11e71ae5fab63088437ef90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62494df82d25e902d11e71ae5fab63088437ef90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "html_url": "https://github.com/rust-lang/rust/commit/dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3933b88220b3a63f2a61b6769492898f718f1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3933b88220b3a63f2a61b6769492898f718f1b4", "html_url": "https://github.com/rust-lang/rust/commit/b3933b88220b3a63f2a61b6769492898f718f1b4"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "94a4f1ba9779b1a7f92099de79e3c1af0d5b1788", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -402,7 +402,7 @@ class bitv {\n  */\n      fn to_str() -> ~str {\n        let mut rs = ~\"\";\n-       for self.each() |i| { if i { rs += \"1\"; } else { rs += \"0\"; } };\n+       for self.each() |i| { if i { rs += ~\"1\"; } else { rs += ~\"0\"; } };\n        rs\n      }\n "}, {"sha": "e4d1471017fe87fc74d9cd74546d929c0db40666", "filename": "src/libstd/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -331,22 +331,22 @@ mod chained {\n     impl hashmap<K: copy to_str, V: to_str copy> of to_str for t<K, V> {\n         fn to_writer(wr: io::writer) {\n             if self.count == 0u {\n-                wr.write_str(\"{}\");\n+                wr.write_str(~\"{}\");\n                 return;\n             }\n \n-            wr.write_str(\"{ \");\n+            wr.write_str(~\"{ \");\n             let mut first = true;\n             for self.each_entry |entry| {\n                 if !first {\n-                    wr.write_str(\", \");\n+                    wr.write_str(~\", \");\n                 }\n                 first = false;\n                 wr.write_str(entry.key.to_str());\n-                wr.write_str(\": \");\n+                wr.write_str(~\": \");\n                 wr.write_str((copy entry.value).to_str());\n             };\n-            wr.write_str(\" }\");\n+            wr.write_str(~\" }\");\n         }\n \n         fn to_str() -> ~str {"}, {"sha": "81c8ba9da50219642b8ed30ed254eafd59d31e6f", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -71,13 +71,13 @@ impl compile of gen_send for message {\n \n             if this.proto.is_bounded() {\n                 let (sp, rp) = alt (this.dir, next.dir) {\n-                  (send, send) { (\"c\", \"s\") }\n-                  (send, recv) { (\"s\", \"c\") }\n-                  (recv, send) { (\"s\", \"c\") }\n-                  (recv, recv) { (\"c\", \"s\") }\n+                  (send, send) { (~\"c\", ~\"s\") }\n+                  (send, recv) { (~\"s\", ~\"c\") }\n+                  (recv, send) { (~\"s\", ~\"c\") }\n+                  (recv, recv) { (~\"c\", ~\"s\") }\n                 };\n \n-                body += \"let b = pipe.reuse_buffer();\\n\";\n+                body += ~\"let b = pipe.reuse_buffer();\\n\";\n                 body += fmt!{\"let %s = pipes::send_packet_buffered(\\\n                               ptr::addr_of(b.buffer.data.%s));\\n\",\n                              sp, *next.name};"}, {"sha": "026466144353f0a87c042af754ecde297f0a2aa9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -2164,7 +2164,7 @@ class parser {\n                 }\n                 _ => {\n                     self.fatal(~\"expected `,` or `)`, found `\" +\n-                               token_to_str(self.reader, self.token) + \"`\");\n+                               token_to_str(self.reader, self.token) + ~\"`\");\n                 }\n             }\n         } else {"}, {"sha": "3dbcef66732ae49ca7a22a7cfc56aa99bdae7d23", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -167,8 +167,8 @@ fn to_str(in: interner<@~str>, t: token) -> ~str {\n       }\n       LIT_FLOAT(s, t) {\n         let mut body = *in.get(s);\n-        if body.ends_with(\".\") {\n-            body = body + \"0\";  // `10.f` is not a float literal\n+        if body.ends_with(~\".\") {\n+            body = body + ~\"0\";  // `10.f` is not a float literal\n         }\n         body + ast_util::float_ty_to_str(t)\n       }"}, {"sha": "feea800b44cf0ded035f833598c1f864a6283c3f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -600,7 +600,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_mac({node: ast::mac_invoc_tt(pth, tts), _}) {\n-        head(s, path_to_str(pth) + \"! \" + *item.ident);\n+        head(s, path_to_str(pth) + ~\"! \" + *item.ident);\n         bopen(s);\n         for tts.each |tt| { print_tt(s, tt);  }\n         bclose(s, item.span);\n@@ -873,7 +873,7 @@ fn print_mac(s: ps, m: ast::mac) {\n         // FIXME: extension 'body' (#2339)\n       }\n       ast::mac_invoc_tt(pth, tts) {\n-        head(s, path_to_str(pth) + \"!\");\n+        head(s, path_to_str(pth) + ~\"!\");\n         bopen(s);\n         for tts.each() |tt| { print_tt(s, tt); }\n         bclose(s, m.span);"}, {"sha": "d8518303804d383021f0aa57d676962c67e797d0", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -5292,7 +5292,7 @@ fn gather_external_rtcalls(ccx: @crate_ctxt) {\n                     // like gather_local_rtcalls, but we'll need to\n                     // export attributes in metadata/encoder before we can do\n                     // that.\n-                    let sentinel = \"rt::rt_\";\n+                    let sentinel = ~\"rt::rt_\";\n                     let slen = str::len(sentinel);\n                     if str::starts_with(pathname, sentinel) {\n                         let name = str::substr(pathname,"}, {"sha": "05f53018f41c6b78827a0c803cd90da491f7b294", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -701,7 +701,10 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n \n     alt lit.node {\n-      ast::lit_str(s) { ty::mk_estr(tcx, ty::vstore_fixed(s.len())) }\n+      ast::lit_str(s) {\n+        tcx.sess.span_warn(lit.span, ~\"fixed length string\");\n+        ty::mk_estr(tcx, ty::vstore_fixed(s.len()))\n+      }\n       ast::lit_int(_, t) { ty::mk_mach_int(tcx, t) }\n       ast::lit_uint(_, t) { ty::mk_mach_uint(tcx, t) }\n       ast::lit_int_unsuffixed(_) {"}, {"sha": "c8f767bf716495db8b2ae85ac0bb4d5eaf4eb941", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1f6260e7e076114b95b42053cf6dc4cbaca68/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=dfe1f6260e7e076114b95b42053cf6dc4cbaca68", "patch": "@@ -229,7 +229,7 @@ fn header_name(doc: doc::itemtag) -> ~str {\n             if i == 0 {\n                 trait_part += ~\" of \";\n             } else {\n-                trait_part += \", \";\n+                trait_part += ~\", \";\n             }\n             trait_part += trait_type;\n         }"}]}