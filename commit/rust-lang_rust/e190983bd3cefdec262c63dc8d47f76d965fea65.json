{"sha": "e190983bd3cefdec262c63dc8d47f76d965fea65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOTA5ODNiZDNjZWZkZWMyNjJjNjNkYzhkNDdmNzZkOTY1ZmVhNjU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T05:25:54Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-22T02:47:12Z"}, "message": "Rename `rustdoc_json_types::Item.source` to `span`", "tree": {"sha": "681d8d714940e4d12bb970815aa887e7621e577d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/681d8d714940e4d12bb970815aa887e7621e577d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e190983bd3cefdec262c63dc8d47f76d965fea65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e190983bd3cefdec262c63dc8d47f76d965fea65", "html_url": "https://github.com/rust-lang/rust/commit/e190983bd3cefdec262c63dc8d47f76d965fea65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e190983bd3cefdec262c63dc8d47f76d965fea65/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd475e49882c5c6394ed05a17af39c70094e73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd475e49882c5c6394ed05a17af39c70094e73a", "html_url": "https://github.com/rust-lang/rust/commit/7dd475e49882c5c6394ed05a17af39c70094e73a"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "023f392563e884d283e4be9eeff5bd4ce416a0bc", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e190983bd3cefdec262c63dc8d47f76d965fea65", "patch": "@@ -33,7 +33,7 @@ impl JsonRenderer<'_> {\n             id: from_def_id(def_id),\n             crate_id: def_id.krate.as_u32(),\n             name: name.map(|sym| sym.to_string()),\n-            source: self.convert_span(span),\n+            span: self.convert_span(span),\n             visibility: self.convert_visibility(visibility),\n             docs: attrs.collapsed_doc_value(),\n             links: attrs"}, {"sha": "9dc2a442cff9cb88a8e7fe1f0deb772d7d0514d2", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=e190983bd3cefdec262c63dc8d47f76d965fea65", "patch": "@@ -109,7 +109,7 @@ impl JsonRenderer<'tcx> {\n                                 .map(Clone::clone),\n                             visibility: types::Visibility::Public,\n                             inner: types::ItemEnum::Trait(trait_item.clone().into()),\n-                            source: None,\n+                            span: None,\n                             docs: Default::default(),\n                             links: Default::default(),\n                             attrs: Default::default(),"}, {"sha": "82064f31f58e35150566b24054450b967ef224b2", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e190983bd3cefdec262c63dc8d47f76d965fea65/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=e190983bd3cefdec262c63dc8d47f76d965fea65", "patch": "@@ -64,7 +64,7 @@ pub struct Item {\n     pub name: Option<String>,\n     /// The source location of this item (absent if it came from a macro expansion or inline\n     /// assembly).\n-    pub source: Option<Span>,\n+    pub span: Option<Span>,\n     /// By default all documented items are public, but you can tell rustdoc to output private items\n     /// so this field is needed to differentiate.\n     pub visibility: Visibility,"}]}