{"sha": "13effcb282d6d7b02bf7965999d3d5104e75e6a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWZmY2IyODJkNmQ3YjAyYmY3OTY1OTk5ZDNkNTEwNGU3NWU2YTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-14T23:27:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-14T23:27:54Z"}, "message": "Rollup merge of #84185 - hi-rustin:rustin-patch-macro, r=nikomatsakis\n\nadd more pat2021 tests\n\nclose https://github.com/rust-lang/rust/issues/84138\n\nr? ```@nikomatsakis```", "tree": {"sha": "99e6f69ac4828850acdf44b8c4b9efbb9031be68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e6f69ac4828850acdf44b8c4b9efbb9031be68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13effcb282d6d7b02bf7965999d3d5104e75e6a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgd3p6CRBK7hj4Ov3rIwAAdHIIAGDmbs7jKQHSvik0G+Vl5+x2\n/wr3RyAu56TGp/DHtEVhHkB9MpsJ+ee8WaQWddTPR/9LHUvjUM8zyUDZbXIj4Gnr\nWn4sWFFeVzB5BIbQzdouwsO2H+bfDc5W25kUz2x6gTxbZRqapAft5gt7wAoHWbr8\nqbQOsJuxRqmYaodJi20EVLuCcIXA8FQGOVwQ0yW9HT4Uvx7olOgy4eG1pt3nRiiI\nqhY9lNwcDxYhwKIzA68JTL9bt92yaxgq9j9PnxjdBtYOmAsb8JQFteyDSYHWM/Ee\nvoCixazYno32gxZw1W32Lol8ht/kL7E985YUpgBO8m1eu4zcpxfZmM8UzFsK+0I=\n=rqeY\n-----END PGP SIGNATURE-----\n", "payload": "tree 99e6f69ac4828850acdf44b8c4b9efbb9031be68\nparent d783f399e5b9366c99eb94e81dcb339722f012d4\nparent eb944c1466c4bfac0315a0f9e7727454147100a4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618442874 +0200\ncommitter GitHub <noreply@github.com> 1618442874 +0200\n\nRollup merge of #84185 - hi-rustin:rustin-patch-macro, r=nikomatsakis\n\nadd more pat2021 tests\n\nclose https://github.com/rust-lang/rust/issues/84138\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13effcb282d6d7b02bf7965999d3d5104e75e6a8", "html_url": "https://github.com/rust-lang/rust/commit/13effcb282d6d7b02bf7965999d3d5104e75e6a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13effcb282d6d7b02bf7965999d3d5104e75e6a8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d783f399e5b9366c99eb94e81dcb339722f012d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d783f399e5b9366c99eb94e81dcb339722f012d4", "html_url": "https://github.com/rust-lang/rust/commit/d783f399e5b9366c99eb94e81dcb339722f012d4"}, {"sha": "eb944c1466c4bfac0315a0f9e7727454147100a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb944c1466c4bfac0315a0f9e7727454147100a4", "html_url": "https://github.com/rust-lang/rust/commit/eb944c1466c4bfac0315a0f9e7727454147100a4"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "f5a97eca21bdbcf36e58f12d50ced553af676ddb", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or-in-2021.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs?ref=13effcb282d6d7b02bf7965999d3d5104e75e6a8", "patch": "@@ -0,0 +1,20 @@\n+// edition:2021\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+macro_rules! qux { ($x:pat, $y:pat) => {} } // should be ok\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "a5987a25551d224940e8ba08507eec32e042b564", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or-in-2021.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr?ref=13effcb282d6d7b02bf7965999d3d5104e75e6a8", "patch": "@@ -0,0 +1,26 @@\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:3:28\n+   |\n+LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n+   |                            ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:4:32\n+   |\n+LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n+   |                                ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:7:36\n+   |\n+LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n+   |                                    ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "54bd13d7ebce87033f93748c47f4a08f63066b83", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs?ref=13effcb282d6d7b02bf7965999d3d5104e75e6a8", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat | $y:pat) => {} } // should be ok\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } // should be ok\n+macro_rules! qux { ($x:pat, $y:pat) => {} } // should be ok\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { // should be ok\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "edd3f3e7646b82bdc8b16e932c4006843455f18e", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs?ref=13effcb282d6d7b02bf7965999d3d5104e75e6a8", "patch": "@@ -0,0 +1,21 @@\n+#![feature(edition_macro_pats)]\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n+macro_rules! qux { ($x:pat2015 | $y:pat2021) => {} } // should be ok\n+macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => { //~ ERROR  `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "fe0b40cd86e12e03e29c13107283e08aa13ba193", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13effcb282d6d7b02bf7965999d3d5104e75e6a8/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr?ref=13effcb282d6d7b02bf7965999d3d5104e75e6a8", "patch": "@@ -0,0 +1,26 @@\n+error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:3:32\n+   |\n+LL | macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} }\n+   |                                ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:6:32\n+   |\n+LL | macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} }\n+   |                                ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:8:40\n+   |\n+LL |     ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => {\n+   |                                        ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: aborting due to 3 previous errors\n+"}]}