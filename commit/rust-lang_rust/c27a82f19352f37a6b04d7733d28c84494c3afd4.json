{"sha": "c27a82f19352f37a6b04d7733d28c84494c3afd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyN2E4MmYxOTM1MmYzN2E2YjA0ZDc3MzNkMjhjODQ0OTRjM2FmZDQ=", "commit": {"author": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2017-09-30T06:28:48Z"}, "committer": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2017-09-30T06:32:45Z"}, "message": "Don't use remapped path when loading modules and include files", "tree": {"sha": "d132f77d9e61fe3d4d13d6ee2bafd887e7c5b942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d132f77d9e61fe3d4d13d6ee2bafd887e7c5b942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c27a82f19352f37a6b04d7733d28c84494c3afd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c27a82f19352f37a6b04d7733d28c84494c3afd4", "html_url": "https://github.com/rust-lang/rust/commit/c27a82f19352f37a6b04d7733d28c84494c3afd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c27a82f19352f37a6b04d7733d28c84494c3afd4/comments", "author": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "html_url": "https://github.com/rust-lang/rust/commit/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "87e41d30e5dc4613255dd1e575221fee0551acb9", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -354,6 +354,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n         let FileMap {\n             ref name,\n             name_was_remapped,\n+            path: _,\n             crate_of_origin,\n             // Do not hash the source as it is not encoded\n             src: _,"}, {"sha": "bd6e5eb67c87cfd100040e6c9b726425bd52816b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -68,8 +68,7 @@ pub struct Session {\n     pub derive_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n     // The name of the root source file of the crate, in the local file system.\n-    // The path is always expected to be absolute. `None` means that there is no\n-    // source file.\n+    // `None` means that there is no source file.\n     pub local_crate_source_file: Option<String>,\n     // The directory the compiler has been executed in plus a flag indicating\n     // if the value stored here has been affected by path remapping.\n@@ -722,7 +721,6 @@ pub fn build_session_(sopts: config::Options,\n \n     let file_path_mapping = sopts.file_path_mapping();\n \n-    // Make the path absolute, if necessary\n     let local_crate_source_file = local_crate_source_file.map(|path| {\n         file_path_mapping.map_prefix(path.to_string_lossy().into_owned()).0\n     });"}, {"sha": "792625808587d63ccc788333ef22ba99a0220956", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -162,9 +162,16 @@ impl CodeMap {\n         let start_pos = self.next_start_pos();\n         let mut files = self.files.borrow_mut();\n \n+        // The path is used to determine the directory for loading submodules and\n+        // include files, so it must be before remapping.\n+        // Note that filename may not be a valid path, eg it may be `<anon>` etc,\n+        // but this is okay because the directory determined by `path.pop()` will\n+        // be empty, so the working directory will be used.\n+        let path = PathBuf::from(filename.clone());\n+\n         let (filename, was_remapped) = self.path_mapping.map_prefix(filename);\n         let filemap =\n-            Rc::new(FileMap::new(filename, was_remapped, src, Pos::from_usize(start_pos)));\n+            Rc::new(FileMap::new(filename, was_remapped, path, src, Pos::from_usize(start_pos)));\n \n         files.push(filemap.clone());\n \n@@ -216,6 +223,7 @@ impl CodeMap {\n         let filemap = Rc::new(FileMap {\n             name: filename,\n             name_was_remapped,\n+            path: PathBuf::new(),\n             crate_of_origin,\n             src: None,\n             src_hash,\n@@ -342,7 +350,11 @@ impl CodeMap {\n     }\n \n     pub fn span_to_filename(&self, sp: Span) -> FileName {\n-        self.lookup_char_pos(sp.lo()).file.name.to_string()\n+        self.lookup_char_pos(sp.lo()).file.name.clone()\n+    }\n+\n+    pub fn span_to_path(&self, sp: Span) -> PathBuf {\n+        self.lookup_char_pos(sp.lo()).file.path.clone()\n     }\n \n     pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {"}, {"sha": "c4727b6eda50f09b93e3cf878b93cbe400faadf5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -35,7 +35,6 @@ use visit::Visitor;\n \n use std::collections::HashMap;\n use std::mem;\n-use std::path::PathBuf;\n use std::rc::Rc;\n \n macro_rules! expansions {\n@@ -200,7 +199,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.crate_root = std_inject::injected_crate_name(&krate);\n         let mut module = ModuleData {\n             mod_path: vec![Ident::from_str(&self.cx.ecfg.crate_name)],\n-            directory: PathBuf::from(self.cx.codemap().span_to_filename(krate.span)),\n+            directory: self.cx.codemap().span_to_path(krate.span),\n         };\n         module.directory.pop();\n         self.cx.current_expansion.module = Rc::new(module);\n@@ -952,8 +951,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         module.directory.push(&*item.ident.name.as_str());\n                     }\n                 } else {\n-                    let mut path =\n-                        PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner));\n+                    let mut path = self.cx.parse_sess.codemap().span_to_path(inner);\n                     let directory_ownership = match path.file_name().unwrap().to_str() {\n                         Some(\"mod.rs\") => DirectoryOwnership::Owned,\n                         _ => DirectoryOwnership::UnownedViaMod(false),"}, {"sha": "8bc7f055676814b83956d15ff8e0e2a4f5ec4ab4", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -197,7 +197,7 @@ fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: &Path) -> PathBuf {\n     // after macro expansion (that is, they are unhygienic).\n     if !arg.is_absolute() {\n         let callsite = sp.source_callsite();\n-        let mut path = PathBuf::from(&cx.codemap().span_to_filename(callsite));\n+        let mut path = cx.codemap().span_to_path(callsite);\n         path.pop();\n         path.push(arg);\n         path"}, {"sha": "bd1d4241be05ee17b6574badf6fdccf79cbefa71", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -525,7 +525,7 @@ impl<'a> Parser<'a> {\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if parser.span != syntax_pos::DUMMY_SP {\n-            parser.directory.path = PathBuf::from(sess.codemap().span_to_filename(parser.span));\n+            parser.directory.path = sess.codemap().span_to_path(parser.span);\n             parser.directory.path.pop();\n         }\n "}, {"sha": "0d910cc04f6ccca6f35d56b244ec1fa0842e71c4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -32,6 +32,7 @@ use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::Hasher;\n use std::ops::{Add, Sub};\n+use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -501,6 +502,8 @@ pub struct FileMap {\n     pub name: FileName,\n     /// True if the `name` field above has been modified by -Zremap-path-prefix\n     pub name_was_remapped: bool,\n+    /// The path of the file that the source came from.\n+    pub path: PathBuf,\n     /// Indicates which crate this FileMap was imported from.\n     pub crate_of_origin: u32,\n     /// The complete source code\n@@ -626,6 +629,7 @@ impl Decodable for FileMap {\n             Ok(FileMap {\n                 name,\n                 name_was_remapped,\n+                path: PathBuf::new(),\n                 // `crate_of_origin` has to be set by the importer.\n                 // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n                 // That constant is not available here unfortunately :(\n@@ -651,6 +655,7 @@ impl fmt::Debug for FileMap {\n impl FileMap {\n     pub fn new(name: FileName,\n                name_was_remapped: bool,\n+               path: PathBuf,\n                mut src: String,\n                start_pos: BytePos) -> FileMap {\n         remove_bom(&mut src);\n@@ -664,6 +669,7 @@ impl FileMap {\n         FileMap {\n             name,\n             name_was_remapped,\n+            path,\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n             src_hash,"}, {"sha": "2a7019957af154b5fa3330387758b7c2336645f8", "filename": "src/test/codegen/remap_path_prefix/aux_mod.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Faux_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Faux_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Faux_mod.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test: this is not a test\n+\n+#[inline]\n+pub fn some_aux_mod_function() -> i32 {\n+    1234\n+}"}, {"sha": "c73739bb76543fb00cfe5ca6b29a28439308a5d0", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27a82f19352f37a6b04d7733d28c84494c3afd4/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=c27a82f19352f37a6b04d7733d28c84494c3afd4", "patch": "@@ -16,12 +16,19 @@\n \n extern crate remap_path_prefix_aux;\n \n+// Here we check that submodules and include files are found using the path without\n+// remapping. This test requires that rustc is called with an absolute path.\n+mod aux_mod;\n+include!(\"aux_mod.rs\");\n+\n // Here we check that the expansion of the file!() macro is mapped.\n // CHECK: internal constant [34 x i8] c\"/the/src/remap_path_prefix/main.rs\"\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {\n     remap_path_prefix_aux::some_aux_function();\n+    aux_mod::some_aux_mod_function();\n+    some_aux_mod_function();\n }\n \n // Here we check that local debuginfo is mapped correctly."}]}