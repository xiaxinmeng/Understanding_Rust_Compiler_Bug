{"sha": "158894464c5e4b143c7b307f932d9eb51afc24ee", "node_id": "C_kwDOAAsO6NoAKDE1ODg5NDQ2NGM1ZTRiMTQzYzdiMzA3ZjkzMmQ5ZWI1MWFmYzI0ZWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T10:10:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T10:10:19Z"}, "message": "interpret: add read_machine_[ui]size convenience methods", "tree": {"sha": "a65e5c09d001ff364dc0edcb3cbe4ac3e76301e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65e5c09d001ff364dc0edcb3cbe4ac3e76301e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/158894464c5e4b143c7b307f932d9eb51afc24ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/158894464c5e4b143c7b307f932d9eb51afc24ee", "html_url": "https://github.com/rust-lang/rust/commit/158894464c5e4b143c7b307f932d9eb51afc24ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/158894464c5e4b143c7b307f932d9eb51afc24ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd2070af7643ad88d280a4933bc4fb60451e521", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd2070af7643ad88d280a4933bc4fb60451e521", "html_url": "https://github.com/rust-lang/rust/commit/2cd2070af7643ad88d280a4933bc4fb60451e521"}], "stats": {"total": 131, "additions": 71, "deletions": 60}, "files": [{"sha": "7031a0b45d6ec5f14b6fca44077c7f516ef8c6a6", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -305,15 +305,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             sym::offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n-                let offset_count = self.read_scalar(&args[1])?.to_machine_isize(self)?;\n+                let offset_count = self.read_machine_isize(&args[1])?;\n                 let pointee_ty = substs.type_at(0);\n \n                 let offset_ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n                 self.write_pointer(offset_ptr, dest)?;\n             }\n             sym::arith_offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n-                let offset_count = self.read_scalar(&args[1])?.to_machine_isize(self)?;\n+                let offset_count = self.read_machine_isize(&args[1])?;\n                 let pointee_ty = substs.type_at(0);\n \n                 let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n@@ -670,7 +670,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::Provenance>,\n         nonoverlapping: bool,\n     ) -> InterpResult<'tcx> {\n-        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let count = self.read_machine_usize(&count)?;\n         let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n         let (size, align) = (layout.size, layout.align.abi);\n         // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n@@ -698,7 +698,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let dst = self.read_pointer(&dst)?;\n         let byte = self.read_scalar(&byte)?.to_u8()?;\n-        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let count = self.read_machine_usize(&count)?;\n \n         // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n         // but no actual allocation can be big enough for the difference to be noticeable."}, {"sha": "68a3318ab4e0b80b8f7293f86503bbb0e0e05eaa", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -407,13 +407,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(self.read_immediate(op)?.to_scalar())\n     }\n \n+    // Pointer-sized reads are fairly common and need target layout access, so we wrap them in\n+    // convenience functions.\n+\n     /// Read a pointer from a place.\n     pub fn read_pointer(\n         &self,\n         op: &OpTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx, Pointer<Option<M::Provenance>>> {\n         self.read_scalar(op)?.to_pointer(self)\n     }\n+    /// Read a pointer-sized unsigned integer from a place.\n+    pub fn read_machine_usize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, u64> {\n+        self.read_scalar(op)?.to_machine_usize(self)\n+    }\n+    /// Read a pointer-sized signed integer from a place.\n+    pub fn read_machine_isize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, i64> {\n+        self.read_scalar(op)?.to_machine_isize(self)\n+    }\n \n     /// Turn the wide MPlace into a string (must already be dereferenced!)\n     pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::Provenance>) -> InterpResult<'tcx, &str> {"}, {"sha": "291464ab58ae20da7692acaa0bc77c158c57f688", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -363,7 +363,7 @@ where\n             Index(local) => {\n                 let layout = self.layout_of(self.tcx.types.usize)?;\n                 let n = self.local_to_op(self.frame(), local, Some(layout))?;\n-                let n = self.read_scalar(&n)?.to_machine_usize(self)?;\n+                let n = self.read_machine_usize(&n)?;\n                 self.place_index(base, n)?\n             }\n             ConstantIndex { offset, min_length, from_end } => {\n@@ -392,7 +392,7 @@ where\n             Index(local) => {\n                 let layout = self.layout_of(self.tcx.types.usize)?;\n                 let n = self.local_to_op(self.frame(), local, Some(layout))?;\n-                let n = self.read_scalar(&n)?.to_machine_usize(self)?;\n+                let n = self.read_machine_usize(&n)?;\n                 self.operand_index(base, n)?\n             }\n             ConstantIndex { offset, min_length, from_end } => {"}, {"sha": "30288e5a999bbc23c0ed2f5c528f467755fdd356", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -233,7 +233,7 @@ impl MainThreadState {\n                     this.machine.main_fn_ret_place.unwrap().ptr,\n                     this.machine.layouts.isize,\n                 );\n-                let exit_code = this.read_scalar(&ret_place.into())?.to_machine_isize(this)?;\n+                let exit_code = this.read_machine_isize(&ret_place.into())?;\n                 // Need to call this ourselves since we are not going to return to the scheduler\n                 // loop, and we want the main thread TLS to not show up as memory leaks.\n                 this.terminate_active_thread()?;"}, {"sha": "218aa89b3f9b09e2a557e134fc4b94918abc3adc", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -321,7 +321,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.assert_target_os_is_unix(\"getcwd\");\n \n         let buf = this.read_pointer(buf_op)?;\n-        let size = this.read_scalar(size_op)?.to_machine_usize(&*this.tcx)?;\n+        let size = this.read_machine_usize(size_op)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`getcwd`\", reject_with)?;"}, {"sha": "b7ed63e17c5b28398f7ed9838061b7b75fa71a92", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -485,14 +485,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Standard C allocation\n             \"malloc\" => {\n                 let [size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n+                let size = this.read_machine_usize(size)?;\n                 let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n             \"calloc\" => {\n                 let [items, len] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let items = this.read_scalar(items)?.to_machine_usize(this)?;\n-                let len = this.read_scalar(len)?.to_machine_usize(this)?;\n+                let items = this.read_machine_usize(items)?;\n+                let len = this.read_machine_usize(len)?;\n                 let size =\n                     items.checked_mul(len).ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n                 let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C)?;\n@@ -506,16 +506,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"realloc\" => {\n                 let [old_ptr, new_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let old_ptr = this.read_pointer(old_ptr)?;\n-                let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n+                let new_size = this.read_machine_usize(new_size)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n \n             // Rust allocation\n             \"__rust_alloc\" | \"miri_alloc\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n-                let align = this.read_scalar(align)?.to_machine_usize(this)?;\n+                let size = this.read_machine_usize(size)?;\n+                let align = this.read_machine_usize(align)?;\n \n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n                     Self::check_alloc_request(size, align)?;\n@@ -546,8 +546,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n-                let align = this.read_scalar(align)?.to_machine_usize(this)?;\n+                let size = this.read_machine_usize(size)?;\n+                let align = this.read_machine_usize(align)?;\n \n                 return this.emulate_allocator(Symbol::intern(\"__rg_alloc_zeroed\"), |this| {\n                     Self::check_alloc_request(size, align)?;\n@@ -566,8 +566,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"__rust_dealloc\" | \"miri_dealloc\" => {\n                 let [ptr, old_size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n-                let align = this.read_scalar(align)?.to_machine_usize(this)?;\n+                let old_size = this.read_machine_usize(old_size)?;\n+                let align = this.read_machine_usize(align)?;\n \n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n                     let memory_kind = match link_name.as_str() {\n@@ -596,9 +596,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"__rust_realloc\" => {\n                 let [ptr, old_size, align, new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n-                let align = this.read_scalar(align)?.to_machine_usize(this)?;\n-                let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n+                let old_size = this.read_machine_usize(old_size)?;\n+                let align = this.read_machine_usize(align)?;\n+                let new_size = this.read_machine_usize(new_size)?;\n                 // No need to check old_size; we anyway check that they match the allocation.\n \n                 return this.emulate_allocator(Symbol::intern(\"__rg_realloc\"), |this| {\n@@ -621,7 +621,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [left, right, n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let left = this.read_pointer(left)?;\n                 let right = this.read_pointer(right)?;\n-                let n = Size::from_bytes(this.read_scalar(n)?.to_machine_usize(this)?);\n+                let n = Size::from_bytes(this.read_machine_usize(n)?);\n \n                 let result = {\n                     let left_bytes = this.read_bytes_ptr_strip_provenance(left, n)?;\n@@ -641,7 +641,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n-                let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                let num = this.read_machine_usize(num)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n                 #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;\n@@ -664,7 +664,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n-                let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                let num = this.read_machine_usize(num)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n                 #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;"}, {"sha": "1b97a9d20de0cac5fb1a77c61be819454bb92d27", "filename": "src/tools/miri/src/shims/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -111,7 +111,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ty_layout = this.layout_of(ty)?;\n                 let val_byte = this.read_scalar(val_byte)?.to_u8()?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let count = this.read_scalar(count)?.to_machine_usize(this)?;\n+                let count = this.read_machine_usize(count)?;\n                 // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n                 // but no actual allocation can be big enough for the difference to be noticeable.\n                 let byte_count = ty_layout.size.checked_mul(count, this).ok_or_else(|| {\n@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, mask] = check_arg_count(args)?;\n \n                 let ptr = this.read_pointer(ptr)?;\n-                let mask = this.read_scalar(mask)?.to_machine_usize(this)?;\n+                let mask = this.read_machine_usize(mask)?;\n \n                 let masked_addr = Size::from_bytes(ptr.addr().bytes() & mask);\n "}, {"sha": "39db97b72e2cecd29aab4654ed10b8b7cec0d6fc", "filename": "src/tools/miri/src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -80,7 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             return Ok(false);\n         }\n \n-        let req_align = this.read_scalar(align_op)?.to_machine_usize(this)?;\n+        let req_align = this.read_machine_usize(align_op)?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {"}, {"sha": "63cc132f3fc93c118beefbf492142d6398621bb5", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -78,15 +78,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [fd, buf, count] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_pointer(buf)?;\n-                let count = this.read_scalar(count)?.to_machine_usize(this)?;\n+                let count = this.read_machine_usize(count)?;\n                 let result = this.read(fd, buf, count)?;\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"write\" => {\n                 let [fd, buf, n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_pointer(buf)?;\n-                let count = this.read_scalar(n)?.to_machine_usize(this)?;\n+                let count = this.read_machine_usize(n)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, count);\n                 let result = this.write(fd, buf, count)?;\n                 // Now, `result` is the value we return back to the program.\n@@ -157,8 +157,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [fd, offset, len, advice] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n-                this.read_scalar(offset)?.to_machine_isize(this)?;\n-                this.read_scalar(len)?.to_machine_isize(this)?;\n+                this.read_machine_isize(offset)?;\n+                this.read_machine_isize(len)?;\n                 this.read_scalar(advice)?.to_i32()?;\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n@@ -191,8 +191,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"posix_memalign\" => {\n                 let [ret, align, size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ret = this.deref_operand(ret)?;\n-                let align = this.read_scalar(align)?.to_machine_usize(this)?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n+                let align = this.read_machine_usize(align)?;\n+                let size = this.read_machine_usize(size)?;\n                 // Align must be power of 2, and also at least ptr-sized (POSIX rules).\n                 // But failure to adhere to this is not UB, it's an error condition.\n                 if !align.is_power_of_two() || align < this.pointer_size().bytes() {\n@@ -216,7 +216,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Dynamic symbol loading\n             \"dlsym\" => {\n                 let [handle, symbol] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_scalar(handle)?.to_machine_usize(this)?;\n+                this.read_machine_usize(handle)?;\n                 let symbol = this.read_pointer(symbol)?;\n                 let symbol_name = this.read_c_str(symbol)?;\n                 if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.os)? {\n@@ -472,7 +472,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [errnum, buf, buflen] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let errnum = this.read_scalar(errnum)?;\n                 let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n+                let buflen = this.read_machine_usize(buflen)?;\n \n                 let error = this.try_errnum_to_io_error(errnum)?;\n                 let formatted = match error {\n@@ -565,7 +565,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let uid = this.read_scalar(uid)?.to_u32()?;\n                 let pwd = this.deref_operand(pwd)?;\n                 let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n+                let buflen = this.read_machine_usize(buflen)?;\n                 let result = this.deref_operand(result)?;\n \n                 // Must be for \"us\"."}, {"sha": "5af1b354e7bb1a0ecb815d434d6a1d58da0ad748", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -1293,7 +1293,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         this.assert_target_os(\"linux\", \"readdir64\");\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+        let dirp = this.read_machine_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1385,7 +1385,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         this.assert_target_os(\"macos\", \"readdir_r\");\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+        let dirp = this.read_machine_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1478,7 +1478,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn closedir(&mut self, dirp_op: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+        let dirp = this.read_machine_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1642,7 +1642,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let pathname = this.read_path_from_c_str(this.read_pointer(pathname_op)?)?;\n         let buf = this.read_pointer(buf_op)?;\n-        let bufsize = this.read_scalar(bufsize_op)?.to_machine_usize(this)?;\n+        let bufsize = this.read_machine_usize(bufsize_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {"}, {"sha": "acf47fe924803a26523b620e8a3dda2b13d30b63", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -99,7 +99,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         \"incorrect number of arguments for syscall: got 0, expected at least 1\"\n                     );\n                 }\n-                match this.read_scalar(&args[0])?.to_machine_usize(this)? {\n+                match this.read_machine_usize(&args[0])? {\n                     // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n                     // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                     id if id == sys_getrandom => {\n@@ -147,7 +147,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [pid, cpusetsize, mask] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(pid)?.to_i32()?;\n-                this.read_scalar(cpusetsize)?.to_machine_usize(this)?;\n+                this.read_machine_usize(cpusetsize)?;\n                 this.deref_operand(mask)?;\n                 // FIXME: we just return an error; `num_cpus` then falls back to `sysconf`.\n                 let einval = this.eval_libc(\"EINVAL\")?;\n@@ -179,7 +179,7 @@ fn getrandom<'tcx>(\n     dest: &PlaceTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx> {\n     let ptr = this.read_pointer(ptr)?;\n-    let len = this.read_scalar(len)?.to_machine_usize(this)?;\n+    let len = this.read_machine_usize(len)?;\n \n     // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n     // neither of which have any effect on our current PRNG."}, {"sha": "44b9af79005a9a98a08aad079e67f1f08c71636a", "filename": "src/tools/miri/src/shims/unix/macos/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -39,7 +39,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             Dlsym::getentropy => {\n                 let [ptr, len] = check_arg_count(args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let len = this.read_scalar(len)?.to_machine_usize(this)?;\n+                let len = this.read_machine_usize(len)?;\n                 this.gen_random(ptr, len)?;\n                 this.write_null(dest)?;\n             }"}, {"sha": "2554fc77984544ee5c93b9d29d247c67bb4912a6", "filename": "src/tools/miri/src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -161,13 +161,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_scalar(thread)?.to_machine_usize(this)?;\n+                this.read_machine_usize(thread)?;\n                 let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_scalar(thread)?.to_machine_usize(this)?;\n+                this.read_machine_usize(thread)?;\n                 let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }"}, {"sha": "2cb4858fdfdeeae0abde46ba995df55922214728", "filename": "src/tools/miri/src/shims/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -42,7 +42,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             throw_unsup_format!(\"Miri supports pthread_join only with retval==NULL\");\n         }\n \n-        let thread_id = this.read_scalar(thread)?.to_machine_usize(this)?;\n+        let thread_id = this.read_machine_usize(thread)?;\n         this.join_thread_exclusive(thread_id.try_into().expect(\"thread ID should fit in u32\"))?;\n \n         Ok(0)\n@@ -51,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn pthread_detach(&mut self, thread: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let thread_id = this.read_scalar(thread)?.to_machine_usize(this)?;\n+        let thread_id = this.read_machine_usize(thread)?;\n         this.detach_thread(\n             thread_id.try_into().expect(\"thread ID should fit in u32\"),\n             /*allow_terminated_joined*/ false,"}, {"sha": "857cf1ae7037bbf67430b4d3522362ab188c1d61", "filename": "src/tools/miri/src/shims/windows/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -67,10 +67,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     byte_offset,\n                     _key,\n                 ] = check_arg_count(args)?;\n-                let handle = this.read_scalar(handle)?.to_machine_isize(this)?;\n+                let handle = this.read_machine_isize(handle)?;\n                 let buf = this.read_pointer(buf)?;\n                 let n = this.read_scalar(n)?.to_u32()?;\n-                let byte_offset = this.read_scalar(byte_offset)?.to_machine_usize(this)?; // is actually a pointer\n+                let byte_offset = this.read_machine_usize(byte_offset)?; // is actually a pointer\n                 let io_status_block = this.deref_operand(io_status_block)?;\n \n                 if byte_offset != 0 {"}, {"sha": "656f1a4ae72237cb5cb3fe9a70922ddbfadc21a9", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -73,17 +73,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"HeapAlloc\" => {\n                 let [handle, flags, size] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(handle)?.to_machine_isize(this)?;\n+                this.read_machine_isize(handle)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n+                let size = this.read_machine_usize(size)?;\n                 let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n                 let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap)?;\n                 this.write_pointer(res, dest)?;\n             }\n             \"HeapFree\" => {\n                 let [handle, flags, ptr] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(handle)?.to_machine_isize(this)?;\n+                this.read_machine_isize(handle)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_pointer(ptr)?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n@@ -92,10 +92,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"HeapReAlloc\" => {\n                 let [handle, flags, ptr, size] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(handle)?.to_machine_isize(this)?;\n+                this.read_machine_isize(handle)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let size = this.read_scalar(size)?.to_machine_usize(this)?;\n+                let size = this.read_machine_usize(size)?;\n                 let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;\n                 this.write_pointer(res, dest)?;\n             }\n@@ -298,7 +298,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 #[allow(non_snake_case)]\n                 let [hModule, lpProcName] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(hModule)?.to_machine_isize(this)?;\n+                this.read_machine_isize(hModule)?;\n                 let name = this.read_c_str(this.read_pointer(lpProcName)?)?;\n                 if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.os)? {\n                     let ptr = this.create_fn_alloc_ptr(FnVal::Other(dlsym));\n@@ -356,7 +356,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // `term` needs this, so we fake it.\n                 let [console, buffer_info] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(console)?.to_machine_isize(this)?;\n+                this.read_machine_isize(console)?;\n                 this.deref_operand(buffer_info)?;\n                 // Indicate an error.\n                 // FIXME: we should set last_error, but to what?\n@@ -432,7 +432,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"GetConsoleMode\" if this.frame_in_std() => {\n                 let [console, mode] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(console)?.to_machine_isize(this)?;\n+                this.read_machine_isize(console)?;\n                 this.deref_operand(mode)?;\n                 // Indicate an error.\n                 this.write_null(dest)?;"}, {"sha": "7892f35f7b05c7878a45946fa247d07a77c76929", "filename": "src/tools/miri/src/shims/windows/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -273,7 +273,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let ptr = this.read_pointer(ptr_op)?;\n         let compare = this.read_pointer(compare_op)?;\n-        let size = this.read_scalar(size_op)?.to_machine_usize(this)?;\n+        let size = this.read_machine_usize(size_op)?;\n         let timeout_ms = this.read_scalar(timeout_op)?.to_u32()?;\n \n         let thread = this.get_active_thread();"}, {"sha": "1dbc848b03055e73f2f15865e006a95ad626d6fa", "filename": "src/tools/miri/src/shims/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158894464c5e4b143c7b307f932d9eb51afc24ee/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs?ref=158894464c5e4b143c7b307f932d9eb51afc24ee", "patch": "@@ -21,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let security = this.read_pointer(security_op)?;\n         // stacksize is ignored, but still needs to be a valid usize\n-        this.read_scalar(stacksize_op)?.to_machine_usize(this)?;\n+        this.read_machine_usize(stacksize_op)?;\n         let start_routine = this.read_pointer(start_op)?;\n         let func_arg = this.read_immediate(arg_op)?;\n         let flags = this.read_scalar(flags_op)?.to_u32()?;"}]}