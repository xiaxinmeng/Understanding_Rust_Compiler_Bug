{"sha": "63c748ee23ab7b6706655146f5b7c7f579811803", "node_id": "C_kwDOAAsO6NoAKDYzYzc0OGVlMjNhYjdiNjcwNjY1NTE0NmY1YjdjN2Y1Nzk4MTE4MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T10:27:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T10:27:24Z"}, "message": "Auto merge of #104481 - matthiaskrgr:rollup-hf8rev0, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #103484 (Add `rust` to `let_underscore_lock` example)\n - #103489 (Make `pointer::byte_offset_from` more generic)\n - #104193 (Shift no characters when using raw string literals)\n - #104348 (Respect visibility & stability of inherent associated types)\n - #104401 (avoid memory leak in mpsc test)\n - #104419 (Fix test/ui/issues/issue-30490.rs)\n - #104424 (rustdoc: remove no-op CSS `.popover { font-size: 1rem }`)\n - #104425 (rustdoc: remove no-op CSS `.main-header { justify-content }`)\n - #104450 (Fuchsia test suite script fix)\n - #104471 (Update PROBLEMATIC_CONSTS in style.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b8465a17ab35554f3441093f0e7632de5dd6539d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8465a17ab35554f3441093f0e7632de5dd6539d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c748ee23ab7b6706655146f5b7c7f579811803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c748ee23ab7b6706655146f5b7c7f579811803", "html_url": "https://github.com/rust-lang/rust/commit/63c748ee23ab7b6706655146f5b7c7f579811803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c748ee23ab7b6706655146f5b7c7f579811803/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e702534763599db252f2ca308739ec340d0933de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e702534763599db252f2ca308739ec340d0933de", "html_url": "https://github.com/rust-lang/rust/commit/e702534763599db252f2ca308739ec340d0933de"}, {"sha": "8bbecb9a4218f6201fc5e2de048f2a7cf0532496", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bbecb9a4218f6201fc5e2de048f2a7cf0532496", "html_url": "https://github.com/rust-lang/rust/commit/8bbecb9a4218f6201fc5e2de048f2a7cf0532496"}], "stats": {"total": 422, "additions": 279, "deletions": 143}, "files": [{"sha": "7a2d98dbe75b3138e7ea7648f904f0683b7723cc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -1917,17 +1917,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // see if we can satisfy using an inherent associated type\n-            for impl_ in tcx.inherent_impls(adt_def.did()) {\n-                let assoc_ty = tcx.associated_items(impl_).find_by_name_and_kind(\n-                    tcx,\n-                    assoc_ident,\n-                    ty::AssocKind::Type,\n-                    *impl_,\n-                );\n-                if let Some(assoc_ty) = assoc_ty {\n-                    let ty = tcx.type_of(assoc_ty.def_id);\n-                    return Ok((ty, DefKind::AssocTy, assoc_ty.def_id));\n-                }\n+            for &impl_ in tcx.inherent_impls(adt_def.did()) {\n+                let Some(assoc_ty_did) = self.lookup_assoc_ty(assoc_ident, hir_ref_id, span, impl_) else {\n+                    continue;\n+                };\n+                // FIXME(inherent_associated_types): This does not substitute parameters.\n+                let ty = tcx.type_of(assoc_ty_did);\n+                return Ok((ty, DefKind::AssocTy, assoc_ty_did));\n             }\n         }\n \n@@ -2014,37 +2010,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n \n         let trait_did = bound.def_id();\n-        let (assoc_ident, def_scope) =\n-            tcx.adjust_ident_and_get_scope(assoc_ident, trait_did, hir_ref_id);\n-\n-        // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n-        // of calling `filter_by_name_and_kind`.\n-        let item = tcx.associated_items(trait_did).in_definition_order().find(|i| {\n-            i.kind.namespace() == Namespace::TypeNS\n-                && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-        });\n-        // Assume that if it's not matched, there must be a const defined with the same name\n-        // but it was used in a type position.\n-        let Some(item) = item else {\n+        let Some(assoc_ty_did) = self.lookup_assoc_ty(assoc_ident, hir_ref_id, span, trait_did) else {\n+            // Assume that if it's not matched, there must be a const defined with the same name\n+            // but it was used in a type position.\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n             let guar = tcx.sess.struct_span_err(span, &msg).emit();\n             return Err(guar);\n         };\n \n-        let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n+        let ty = self.projected_ty_from_poly_trait_ref(span, assoc_ty_did, assoc_segment, bound);\n         let ty = self.normalize_ty(span, ty);\n \n-        let kind = DefKind::AssocTy;\n-        if !item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n-            let kind = kind.descr(item.def_id);\n-            let msg = format!(\"{} `{}` is private\", kind, assoc_ident);\n-            tcx.sess\n-                .struct_span_err(span, &msg)\n-                .span_label(span, &format!(\"private {}\", kind))\n-                .emit();\n-        }\n-        tcx.check_stability(item.def_id, Some(hir_ref_id), span, None);\n-\n         if let Some(variant_def_id) = variant_resolution {\n             tcx.struct_span_lint_hir(\n                 AMBIGUOUS_ASSOCIATED_ITEMS,\n@@ -2063,7 +2039,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     };\n \n                     could_refer_to(DefKind::Variant, variant_def_id, \"\");\n-                    could_refer_to(kind, item.def_id, \" also\");\n+                    could_refer_to(DefKind::AssocTy, assoc_ty_did, \" also\");\n \n                     lint.span_suggestion(\n                         span,\n@@ -2076,7 +2052,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 },\n             );\n         }\n-        Ok((ty, kind, item.def_id))\n+        Ok((ty, DefKind::AssocTy, assoc_ty_did))\n+    }\n+\n+    fn lookup_assoc_ty(\n+        &self,\n+        ident: Ident,\n+        block: hir::HirId,\n+        span: Span,\n+        scope: DefId,\n+    ) -> Option<DefId> {\n+        let tcx = self.tcx();\n+        let (ident, def_scope) = tcx.adjust_ident_and_get_scope(ident, scope, block);\n+\n+        // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n+        // of calling `find_by_name_and_kind`.\n+        let item = tcx.associated_items(scope).in_definition_order().find(|i| {\n+            i.kind.namespace() == Namespace::TypeNS\n+                && i.ident(tcx).normalize_to_macros_2_0() == ident\n+        })?;\n+\n+        let kind = DefKind::AssocTy;\n+        if !item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n+            let kind = kind.descr(item.def_id);\n+            let msg = format!(\"{kind} `{ident}` is private\");\n+            let def_span = self.tcx().def_span(item.def_id);\n+            tcx.sess\n+                .struct_span_err_with_code(span, &msg, rustc_errors::error_code!(E0624))\n+                .span_label(span, &format!(\"private {kind}\"))\n+                .span_label(def_span, &format!(\"{kind} defined here\"))\n+                .emit();\n+        }\n+        tcx.check_stability(item.def_id, Some(block), span, None);\n+\n+        Some(item.def_id)\n     }\n \n     fn qpath_to_ty("}, {"sha": "04d844d21dc38d9dc959218978a4ba1a13696211", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -57,7 +57,7 @@ declare_lint! {\n     /// of at end of scope, which is typically incorrect.\n     ///\n     /// ### Example\n-    /// ```compile_fail\n+    /// ```rust,compile_fail\n     /// use std::sync::{Arc, Mutex};\n     /// use std::thread;\n     /// let data = Arc::new(Mutex::new(0));"}, {"sha": "619582c0539b86dd0f3d04d6c09b4c557306f383", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -26,19 +26,23 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```\n+    /// ```rust\n+    /// trait Duh {}\n+    ///\n+    /// impl Duh for i32 {}\n+    ///\n     /// trait Trait {\n-    ///     type Assoc: Send;\n+    ///     type Assoc: Duh;\n     /// }\n     ///\n     /// struct Struct;\n     ///\n-    /// impl Trait for Struct {\n-    ///     type Assoc = i32;\n+    /// impl<F: Duh> Trait for F {\n+    ///     type Assoc = F;\n     /// }\n     ///\n     /// fn test() -> impl Trait<Assoc = impl Sized> {\n-    ///     Struct\n+    ///     42\n     /// }\n     /// ```\n     ///"}, {"sha": "b80facb1759efd502c86fe6dd5d75f6f7e5f543f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -605,7 +605,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```\n+    /// ```rust\n     /// #[warn(unused_tuple_struct_fields)]\n     /// struct S(i32, i32, i32);\n     /// let s = S(1, 2, 3);\n@@ -1154,7 +1154,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```compile_fail\n+    /// ```rust,compile_fail\n     /// #[repr(packed)]\n     /// pub struct Foo {\n     ///     field1: u64,\n@@ -2548,7 +2548,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```compile_fail\n+    /// ```rust,compile_fail\n     /// # #![allow(unused)]\n     /// enum E {\n     ///     A,\n@@ -3918,7 +3918,7 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```\n+    /// ```rust\n     /// #![allow(test_unstable_lint)]\n     /// ```\n     ///"}, {"sha": "0113eb4e3d1029911abf26519c4b742b2e62630e", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 74, "deletions": 76, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -818,96 +818,94 @@ fn find_skips_from_snippet(\n         _ => return (vec![], false),\n     };\n \n-    fn find_skips(snippet: &str, is_raw: bool) -> Vec<usize> {\n-        let mut s = snippet.char_indices();\n-        let mut skips = vec![];\n-        while let Some((pos, c)) = s.next() {\n-            match (c, s.clone().next()) {\n-                // skip whitespace and empty lines ending in '\\\\'\n-                ('\\\\', Some((next_pos, '\\n'))) if !is_raw => {\n-                    skips.push(pos);\n-                    skips.push(next_pos);\n-                    let _ = s.next();\n+    if str_style.is_some() {\n+        return (vec![], true);\n+    }\n \n-                    while let Some((pos, c)) = s.clone().next() {\n-                        if matches!(c, ' ' | '\\n' | '\\t') {\n-                            skips.push(pos);\n-                            let _ = s.next();\n-                        } else {\n-                            break;\n-                        }\n-                    }\n-                }\n-                ('\\\\', Some((next_pos, 'n' | 't' | 'r' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n-                    skips.push(next_pos);\n-                    let _ = s.next();\n-                }\n-                ('\\\\', Some((_, 'x'))) if !is_raw => {\n-                    for _ in 0..3 {\n-                        // consume `\\xAB` literal\n-                        if let Some((pos, _)) = s.next() {\n-                            skips.push(pos);\n-                        } else {\n-                            break;\n-                        }\n+    let snippet = &snippet[1..snippet.len() - 1];\n+\n+    let mut s = snippet.char_indices();\n+    let mut skips = vec![];\n+    while let Some((pos, c)) = s.next() {\n+        match (c, s.clone().next()) {\n+            // skip whitespace and empty lines ending in '\\\\'\n+            ('\\\\', Some((next_pos, '\\n'))) => {\n+                skips.push(pos);\n+                skips.push(next_pos);\n+                let _ = s.next();\n+\n+                while let Some((pos, c)) = s.clone().next() {\n+                    if matches!(c, ' ' | '\\n' | '\\t') {\n+                        skips.push(pos);\n+                        let _ = s.next();\n+                    } else {\n+                        break;\n                     }\n                 }\n-                ('\\\\', Some((_, 'u'))) if !is_raw => {\n+            }\n+            ('\\\\', Some((next_pos, 'n' | 't' | 'r' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n+                skips.push(next_pos);\n+                let _ = s.next();\n+            }\n+            ('\\\\', Some((_, 'x'))) => {\n+                for _ in 0..3 {\n+                    // consume `\\xAB` literal\n                     if let Some((pos, _)) = s.next() {\n                         skips.push(pos);\n+                    } else {\n+                        break;\n                     }\n-                    if let Some((next_pos, next_c)) = s.next() {\n-                        if next_c == '{' {\n-                            // consume up to 6 hexanumeric chars\n-                            let digits_len =\n-                                s.clone().take(6).take_while(|(_, c)| c.is_digit(16)).count();\n-\n-                            let len_utf8 = s\n-                                .as_str()\n-                                .get(..digits_len)\n-                                .and_then(|digits| u32::from_str_radix(digits, 16).ok())\n-                                .and_then(char::from_u32)\n-                                .map_or(1, char::len_utf8);\n-\n-                            // Skip the digits, for chars that encode to more than 1 utf-8 byte\n-                            // exclude as many digits as it is greater than 1 byte\n-                            //\n-                            // So for a 3 byte character, exclude 2 digits\n-                            let required_skips =\n-                                digits_len.saturating_sub(len_utf8.saturating_sub(1));\n-\n-                            // skip '{' and '}' also\n-                            for pos in (next_pos..).take(required_skips + 2) {\n-                                skips.push(pos)\n-                            }\n+                }\n+            }\n+            ('\\\\', Some((_, 'u'))) => {\n+                if let Some((pos, _)) = s.next() {\n+                    skips.push(pos);\n+                }\n+                if let Some((next_pos, next_c)) = s.next() {\n+                    if next_c == '{' {\n+                        // consume up to 6 hexanumeric chars\n+                        let digits_len =\n+                            s.clone().take(6).take_while(|(_, c)| c.is_digit(16)).count();\n+\n+                        let len_utf8 = s\n+                            .as_str()\n+                            .get(..digits_len)\n+                            .and_then(|digits| u32::from_str_radix(digits, 16).ok())\n+                            .and_then(char::from_u32)\n+                            .map_or(1, char::len_utf8);\n+\n+                        // Skip the digits, for chars that encode to more than 1 utf-8 byte\n+                        // exclude as many digits as it is greater than 1 byte\n+                        //\n+                        // So for a 3 byte character, exclude 2 digits\n+                        let required_skips = digits_len.saturating_sub(len_utf8.saturating_sub(1));\n+\n+                        // skip '{' and '}' also\n+                        for pos in (next_pos..).take(required_skips + 2) {\n+                            skips.push(pos)\n+                        }\n \n-                            s.nth(digits_len);\n-                        } else if next_c.is_digit(16) {\n-                            skips.push(next_pos);\n-                            // We suggest adding `{` and `}` when appropriate, accept it here as if\n-                            // it were correct\n-                            let mut i = 0; // consume up to 6 hexanumeric chars\n-                            while let (Some((next_pos, c)), _) = (s.next(), i < 6) {\n-                                if c.is_digit(16) {\n-                                    skips.push(next_pos);\n-                                } else {\n-                                    break;\n-                                }\n-                                i += 1;\n+                        s.nth(digits_len);\n+                    } else if next_c.is_digit(16) {\n+                        skips.push(next_pos);\n+                        // We suggest adding `{` and `}` when appropriate, accept it here as if\n+                        // it were correct\n+                        let mut i = 0; // consume up to 6 hexanumeric chars\n+                        while let (Some((next_pos, c)), _) = (s.next(), i < 6) {\n+                            if c.is_digit(16) {\n+                                skips.push(next_pos);\n+                            } else {\n+                                break;\n                             }\n+                            i += 1;\n                         }\n                     }\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n-        skips\n     }\n-\n-    let r_start = str_style.map_or(0, |r| r + 1);\n-    let r_end = str_style.unwrap_or(0);\n-    let s = &snippet[r_start + 1..snippet.len() - r_end - 1];\n-    (find_skips(s, str_style.is_some()), true)\n+    (skips, true)\n }\n \n #[cfg(test)]"}, {"sha": "e28ddf3c75ea8dfe28d0d475bae1cbc4f57fb5ec", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -709,7 +709,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+    pub const unsafe fn byte_offset_from<U: ?Sized>(self, origin: *const U) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }"}, {"sha": "ba21126dbd2ca9a0197433c4608dacd4016c07f7", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -889,7 +889,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+    pub const unsafe fn byte_offset_from<U: ?Sized>(self, origin: *const U) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }"}, {"sha": "1e52a4a705c982caade8aa8dd91f9530fee627ce", "filename": "library/std/src/sync/mpsc/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -713,10 +713,11 @@ fn issue_39364() {\n     let t = thread::spawn(move || {\n         thread::sleep(Duration::from_millis(300));\n         let _ = tx.clone();\n-        crate::mem::forget(tx);\n+        // Don't drop; hand back to caller.\n+        tx\n     });\n \n     let _ = rx.recv_timeout(Duration::from_millis(500));\n-    t.join().unwrap();\n+    let _tx = t.join().unwrap(); // delay dropping until end of test\n     let _ = rx.recv_timeout(Duration::from_millis(500));\n }"}, {"sha": "5de29b35e6b2c6d35a4f5021c92f5f19cf023073", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -675,12 +675,18 @@ run the tests on our emulator. To run the full `src/test/ui` test suite:\n     test src/test/ui                                                          \\\n     --target x86_64-fuchsia                                                   \\\n     --run=always --jobs 1                                                     \\\n-    --test-args --target-rustcflags -L                                        \\\n-    --test-args --target-rustcflags ${SDK_PATH}/arch/{x64|arm64}/sysroot/lib  \\\n-    --test-args --target-rustcflags -L                                        \\\n-    --test-args --target-rustcflags ${SDK_PATH}/arch/{x64|arm64}/lib          \\\n-    --test-args --target-rustcflags -Cpanic=abort                             \\\n-    --test-args --target-rustcflags -Zpanic_abort_tests                       \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -L                                                            \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args ${SDK_PATH}/arch/{x64|arm64}/sysroot/lib                      \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -L                                                            \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args ${SDK_PATH}/arch/{x64|arm64}/lib                              \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cpanic=abort                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Zpanic_abort_tests                                           \\\n     --test-args --remote-test-client                                          \\\n     --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \\\n )"}, {"sha": "52b90f332d3dfc118aca44e167af1d799ffcead9", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -159,7 +159,6 @@ h1.fqn {\n .main-heading {\n \tdisplay: flex;\n \tflex-wrap: wrap;\n-\tjustify-content: space-between;\n \tpadding-bottom: 6px;\n \tmargin-bottom: 15px;\n }\n@@ -920,15 +919,13 @@ so that we can apply CSS-filters to change the arrow color in themes */\n }\n \n .popover {\n-\tfont-size: 1rem;\n \tposition: absolute;\n \tright: 0;\n \tz-index: 2;\n \tdisplay: block;\n \tmargin-top: 7px;\n \tborder-radius: 3px;\n \tborder: 1px solid var(--border-color);\n-\tfont-size: 1rem;\n \t--popover-arrow-offset: 11px;\n }\n "}, {"sha": "392f17bfd47c12a52ce2a6bed3baebcb63967096", "filename": "src/test/rustdoc-gui/help-page.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -3,6 +3,7 @@ goto: \"file://\" + |DOC_PATH| + \"/help.html\"\n size: (1000, 1000) // Try desktop size first.\n wait-for: \"#help\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n+assert-css: (\"#help dd\", {\"font-size\": \"16px\"})\n click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n compare-elements-property: (\".sub\", \"#help\", [\"offsetWidth\"])\n@@ -18,6 +19,7 @@ size: (1000, 1000) // Only supported on desktop.\n assert-false: \"#help\"\n click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n+assert-css: (\"#help dd\", {\"font-size\": \"16px\"})\n click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"none\"})\n compare-elements-property-false: (\".sub\", \"#help\", [\"offsetWidth\"])"}, {"sha": "c014eb52e710030804cf955916e18ad238181ea1", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -41,3 +41,20 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLon\n store-property: (scrollWidth, \".mobile-topbar h2\", \"scrollWidth\")\n assert-property: (\".mobile-topbar h2\", {\"clientWidth\": |scrollWidth|})\n assert-css: (\".mobile-topbar h2\", {\"overflow-x\": \"hidden\"})\n+\n+// Check wrapping for top main-heading h1 and out-of-band.\n+// On desktop, they wrap when too big.\n+size: (1100, 800)\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\"\n+compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n+compare-elements-position: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n+// make sure there is a gap between them\n+compare-elements-position-near-false: (\".main-heading h1\", \".main-heading .out-of-band\", {\"x\": 550})\n+\n+// On mobile, they always wrap.\n+size: (600, 600)\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\"\n+compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n+compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))"}, {"sha": "531581954438075467790ca56f43bcf6a3f733af", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-private.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,23 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+mod m {\n+    pub struct T;\n+    impl T {\n+        type P = ();\n+    }\n+}\n+type U = m::T::P; //~ ERROR associated type `P` is private\n+\n+mod n {\n+    pub mod n {\n+        pub struct T;\n+        impl T {\n+            pub(super) type P = bool;\n+        }\n+    }\n+    type U = n::T::P;\n+}\n+type V = n::n::T::P; //~ ERROR associated type `P` is private\n+\n+fn main() {}"}, {"sha": "d67b45dae3fbe9881a4e8804c38371e58f36f3ad", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-private.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,21 @@\n+error[E0624]: associated type `P` is private\n+  --> $DIR/assoc-inherent-private.rs:10:10\n+   |\n+LL |         type P = ();\n+   |         ------ associated type defined here\n+...\n+LL | type U = m::T::P;\n+   |          ^^^^^^^ private associated type\n+\n+error[E0624]: associated type `P` is private\n+  --> $DIR/assoc-inherent-private.rs:21:10\n+   |\n+LL |             pub(super) type P = bool;\n+   |             ----------------- associated type defined here\n+...\n+LL | type V = n::n::T::P;\n+   |          ^^^^^^^^^^ private associated type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0624`."}, {"sha": "34b4e47bf462e7d8324b74587d379074f949da76", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-unstable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,6 @@\n+// aux-crate:aux=assoc-inherent-unstable.rs\n+// edition: 2021\n+\n+type Data = aux::Owner::Data; //~ ERROR use of unstable library feature 'data'\n+\n+fn main() {}"}, {"sha": "c0be8bfd79bfc09626a9058d8901140ff79344b4", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-unstable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'data'\n+  --> $DIR/assoc-inherent-unstable.rs:4:13\n+   |\n+LL | type Data = aux::Owner::Data;\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(data)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b71ffc97b57a1d479d897716e2955ab798b987c", "filename": "src/test/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+#![feature(inherent_associated_types)]\n+#![stable(feature = \"main\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"main\", since = \"1.0.0\")]\n+pub struct Owner;\n+\n+impl Owner {\n+    #[unstable(feature = \"data\", issue = \"none\")]\n+    pub type Data = ();\n+}"}, {"sha": "9f0bc01a749cf52c88b7671fcf8233d77c15fb3f", "filename": "src/test/ui/fmt/format-raw-string-error.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(r#\"\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'}\"#); //~ ERROR invalid format string: unmatched `}` found\n+}"}, {"sha": "8d61950d8c2adf0399664e5551d2f0ae8e55c287", "filename": "src/test/ui/fmt/format-raw-string-error.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-raw-string-error.stderr?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,10 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-raw-string-error.rs:2:45\n+   |\n+LL |     println!(r#\"\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'}\"#);\n+   |                                             ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d7283a7197807ceb4496dece340d7fa6e60715b", "filename": "src/test/ui/fmt/issue-104142.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    println!(\n+        r#\"\n+    \\\"\\'}\uff64\"# //~ ERROR invalid format string: unmatched `}` found\n+    );\n+}"}, {"sha": "d41644faa2827a04f9ed0e5a01333a91caf3aa73", "filename": "src/test/ui/fmt/issue-104142.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-104142.stderr?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -0,0 +1,10 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/issue-104142.rs:4:9\n+   |\n+LL |     \\\"\\'}\uff64\"#\n+   |         ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4f0eeac8f71e8b47c0092ee2f5bc0cc27881a3e1", "filename": "src/test/ui/issues/issue-30490.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -10,7 +10,7 @@\n // This test checks to avoid that regression.\n \n #![cfg_attr(unix, feature(rustc_private))]\n-#![cfg_attr(windows, allow(unused_imports))]\n+#![cfg_attr(not(unix), allow(unused_imports))]\n \n #[cfg(unix)]\n extern crate libc;"}, {"sha": "f137a298a7f41a533b69b22a9eddbd08853d73f7", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -162,9 +162,12 @@ error[E0223]: ambiguous associated type\n LL |     let _: S::C;\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::C`\n \n-error: associated type `A` is private\n+error[E0624]: associated type `A` is private\n   --> $DIR/item-privacy.rs:119:12\n    |\n+LL |         type A = u8;\n+   |         ------ associated type defined here\n+...\n LL |     let _: T::A;\n    |            ^^^^ private associated type\n "}, {"sha": "3842a649c6f96a2070859ae13ac5a84a285730fc", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -37,10 +37,8 @@ impl Lint {\n     }\n \n     fn is_ignored(&self) -> bool {\n-        self.doc\n-            .iter()\n-            .filter(|line| line.starts_with(\"```rust\"))\n-            .all(|line| line.contains(\",ignore\"))\n+        let blocks: Vec<_> = self.doc.iter().filter(|line| line.starts_with(\"```rust\")).collect();\n+        !blocks.is_empty() && blocks.iter().all(|line| line.contains(\",ignore\"))\n     }\n \n     /// Checks the doc style of the lint."}, {"sha": "e3a094caf919aaa43c2f369d923193e0891fd4fb", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c748ee23ab7b6706655146f5b7c7f579811803/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=63c748ee23ab7b6706655146f5b7c7f579811803", "patch": "@@ -60,7 +60,7 @@ const ANNOTATIONS_TO_IGNORE: &[&str] = &[\n // Intentionally written in decimal rather than hex\n const PROBLEMATIC_CONSTS: &[u32] = &[\n     184594741, 2880289470, 2881141438, 2965027518, 2976579765, 3203381950, 3405691582, 3405697037,\n-    3735927486, 4027431614, 4276992702,\n+    3735927486, 3735932941, 4027431614, 4276992702,\n ];\n \n /// Parser states for `line_is_url`."}]}