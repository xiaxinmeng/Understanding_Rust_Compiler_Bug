{"sha": "a9881f52131a2ed745c188ccdecf37a2e2430fe7", "node_id": "C_kwDOAAsO6NoAKGE5ODgxZjUyMTMxYTJlZDc0NWMxODhjY2RlY2YzN2EyZTI0MzBmZTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T00:48:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T00:48:58Z"}, "message": "Use ObligationCtxt in fully_normalize", "tree": {"sha": "5409ec498145af13f7c8d69beb55a1d02e42e7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5409ec498145af13f7c8d69beb55a1d02e42e7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9881f52131a2ed745c188ccdecf37a2e2430fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9881f52131a2ed745c188ccdecf37a2e2430fe7", "html_url": "https://github.com/rust-lang/rust/commit/a9881f52131a2ed745c188ccdecf37a2e2430fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9881f52131a2ed745c188ccdecf37a2e2430fe7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "html_url": "https://github.com/rust-lang/rust/commit/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "9ee6e0a2bf3a20337df5928b9569efd69b572c7c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9881f52131a2ed745c188ccdecf37a2e2430fe7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9881f52131a2ed745c188ccdecf37a2e2430fe7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a9881f52131a2ed745c188ccdecf37a2e2430fe7", "patch": "@@ -390,6 +390,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n }\n \n /// Normalize a type and process all resulting obligations, returning any errors\n+#[instrument(skip_all)]\n pub fn fully_normalize<'tcx, T>(\n     infcx: &InferCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -399,28 +400,18 @@ pub fn fully_normalize<'tcx, T>(\n where\n     T: TypeFoldable<'tcx>,\n {\n-    debug!(\"fully_normalize_with_fulfillcx(value={:?})\", value);\n-    let selcx = &mut SelectionContext::new(infcx);\n-    let Normalized { value: normalized_value, obligations } =\n-        project::normalize(selcx, param_env, cause, value);\n-    debug!(\n-        \"fully_normalize: normalized_value={:?} obligations={:?}\",\n-        normalized_value, obligations\n-    );\n-\n-    let mut fulfill_cx = FulfillmentContext::new();\n-    for obligation in obligations {\n-        fulfill_cx.register_predicate_obligation(infcx, obligation);\n-    }\n-\n-    debug!(\"fully_normalize: select_all_or_error start\");\n-    let errors = fulfill_cx.select_all_or_error(infcx);\n+    let ocx = ObligationCtxt::new(infcx);\n+    debug!(?value);\n+    let normalized_value = ocx.normalize(cause, param_env, value);\n+    debug!(?normalized_value);\n+    debug!(\"select_all_or_error start\");\n+    let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n         return Err(errors);\n     }\n-    debug!(\"fully_normalize: select_all_or_error complete\");\n+    debug!(\"select_all_or_error complete\");\n     let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n-    debug!(\"fully_normalize: resolved_value={:?}\", resolved_value);\n+    debug!(?resolved_value);\n     Ok(resolved_value)\n }\n "}]}