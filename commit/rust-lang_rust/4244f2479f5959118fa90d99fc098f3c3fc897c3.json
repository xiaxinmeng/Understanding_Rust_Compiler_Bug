{"sha": "4244f2479f5959118fa90d99fc098f3c3fc897c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNDRmMjQ3OWY1OTU5MTE4ZmE5MGQ5OWZjMDk4ZjNjM2ZjODk3YzM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T14:09:00Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T14:09:00Z"}, "message": "dogfooding, part 2", "tree": {"sha": "2fa49e7196317ccfc71f1a94c559a8b8be568566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa49e7196317ccfc71f1a94c559a8b8be568566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4244f2479f5959118fa90d99fc098f3c3fc897c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4244f2479f5959118fa90d99fc098f3c3fc897c3", "html_url": "https://github.com/rust-lang/rust/commit/4244f2479f5959118fa90d99fc098f3c3fc897c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4244f2479f5959118fa90d99fc098f3c3fc897c3/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0de07b28e2e9c1adcb126eea15ff4de14efb5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0de07b28e2e9c1adcb126eea15ff4de14efb5b", "html_url": "https://github.com/rust-lang/rust/commit/fe0de07b28e2e9c1adcb126eea15ff4de14efb5b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "95232cd8b73ec298b7c3bb84205a5b430d956c19", "filename": "src/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4244f2479f5959118fa90d99fc098f3c3fc897c3/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4244f2479f5959118fa90d99fc098f3c3fc897c3/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=4244f2479f5959118fa90d99fc098f3c3fc897c3", "patch": "@@ -148,7 +148,7 @@ fn lit_to_constant(lit: &Lit_) -> Constant {\n fn constant_vec<E: Deref<Target=Expr> + Sized>(cx: &Context, vec: &[E]) -> Option<Constant> {\n     let mut parts = Vec::new();\n     let mut resolved = false;\n-    for opt_part in vec.iter() {\n+    for opt_part in vec {\n         match constant(cx, opt_part) {\n             Some(p) => {\n                 resolved |= (&p).needed_resolution;\n@@ -166,7 +166,7 @@ fn constant_vec<E: Deref<Target=Expr> + Sized>(cx: &Context, vec: &[E]) -> Optio\n fn constant_tup<E: Deref<Target=Expr> + Sized>(cx: &Context, tup: &[E]) -> Option<Constant> {\n     let mut parts = Vec::new();\n     let mut resolved = false;\n-    for opt_part in tup.iter() {\n+    for opt_part in tup {\n         match constant(cx, opt_part) {\n             Some(p) => {\n                 resolved |= (&p).needed_resolution;\n@@ -224,8 +224,8 @@ fn constant_negate(o: Constant) -> Option<Constant> {\n                     UnsuffixedIntLit(sign) => UnsuffixedIntLit(neg_sign(sign)),\n                     _ => { return None; },\n                 }),\n-            ConstantFloat(ref is, ty) =>\n-                ConstantFloat(neg_float_str(is.to_string()), ty),\n+            ConstantFloat(is, ty) =>\n+                ConstantFloat(neg_float_str(is), ty),\n             _ => { return None; },\n         }\n     })\n@@ -278,7 +278,7 @@ fn constant_binop(cx: &Context, op: BinOp, left: &Expr, right: &Expr)\n         BiAdd => constant_binop_apply(cx, left, right, |l, r|\n             match (l, r) {\n                 (ConstantByte(l8), ConstantByte(r8)) =>\n-                    l8.checked_add(r8).map(|v| ConstantByte(v)),\n+                    l8.checked_add(r8).map(ConstantByte),\n                 (ConstantInt(l64, lty), ConstantInt(r64, rty)) => {\n                     let (ln, rn) = (is_negative(lty), is_negative(rty));\n                     if ln == rn {"}]}