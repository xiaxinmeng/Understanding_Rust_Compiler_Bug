{"sha": "3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMmI2MTEwZGRiOTllM2Q0YjY3YzE1MzIxYjk1N2JkZDRiMzc2NzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-21T18:42:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-21T18:42:57Z"}, "message": "rustc: Shove the address of the box annihilator into the crate map", "tree": {"sha": "e6283c89d5e82dc2e855ae51fb513637ac556121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6283c89d5e82dc2e855ae51fb513637ac556121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "html_url": "https://github.com/rust-lang/rust/commit/3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51a561852805cea58fbe106a28645e3d34b61e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51a561852805cea58fbe106a28645e3d34b61e3", "html_url": "https://github.com/rust-lang/rust/commit/a51a561852805cea58fbe106a28645e3d34b61e3"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "9f6c18d9207e7192f619bdfc9fdf73d457cfaa2d", "filename": "src/rt/rust_crate_map.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_crate_map.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_crate_map.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.cpp?ref=3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "patch": "@@ -12,13 +12,13 @@ void iter_crate_map(const cratemap* map,\n                     void (*fn)(const mod_entry* map, void *cookie),\n                     void *cookie) {\n     // First iterate this crate\n-    iter_module_map(map->entries, fn, cookie);\n+    iter_module_map(map->entries(), fn, cookie);\n     // Then recurse on linked crates\n     // FIXME (#2673) this does double work in diamond-shaped deps. could\n     //   keep a set of visited addresses, if it turns out to be actually\n     //   slow\n-    for (size_t i = 0; map->children[i]; i++) {\n-        iter_crate_map(map->children[i], fn, cookie);\n+    for (cratemap::iterator i = map->begin(), e = map->end(); i != e; ++i) {\n+        iter_crate_map(*i, fn, cookie);\n     }\n }\n "}, {"sha": "bdb0630a1afa34e8b67b47e6b03525aabbd9cca2", "filename": "src/rt/rust_crate_map.h", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_crate_map.h", "raw_url": "https://github.com/rust-lang/rust/raw/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_crate_map.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.h?ref=3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "patch": "@@ -2,15 +2,71 @@\n #define RUST_CRATE_MAP_H\n \n #include \"rust_log.h\"\n+#include <stdint.h>\n \n struct mod_entry {\n     const char* name;\n     uint32_t* state;\n };\n \n-struct cratemap {\n-    const mod_entry* entries;\n-    const cratemap* children[1];\n+class cratemap;\n+\n+class cratemap_v0 {\n+    friend class cratemap;\n+    const mod_entry *m_entries;\n+    const cratemap* m_children[1];\n+};\n+\n+class cratemap {\n+private:\n+    int32_t m_version;\n+    const void *m_annihilate_fn;\n+    const mod_entry* m_entries;\n+    const cratemap* m_children[1];\n+\n+    inline int32_t version() const {\n+        switch (m_version) {\n+        case 1:     return 1;\n+        default:    return 0;\n+        }\n+    }\n+\n+public:\n+    typedef const cratemap *const *iterator;\n+\n+    inline const void *annihilate_fn() const {\n+        switch (version()) {\n+        case 0: return NULL;\n+        case 1: return m_annihilate_fn;\n+        default: assert(false && \"Unknown crate map version!\");\n+        }\n+    }\n+\n+    inline const mod_entry *entries() const {\n+        switch (version()) {\n+        case 0: return reinterpret_cast<const cratemap_v0 *>(this)->m_entries;\n+        case 1: return m_entries;\n+        default: assert(false && \"Unknown crate map version!\");\n+        }\n+    }\n+\n+    inline const iterator begin() const {\n+        switch (version()) {\n+        case 0:\n+            return &reinterpret_cast<const cratemap_v0 *>(this)->\n+                m_children[0];\n+        case 1:\n+            return &m_children[1];\n+        default: assert(false && \"Unknown crate map version!\");\n+        }\n+    }\n+\n+    inline const iterator end() const {\n+        iterator i = begin();\n+        while (*i)\n+            i++;\n+        return i;\n+    }\n };\n \n void iter_module_map(const mod_entry* map,"}, {"sha": "11671cf03260bf70e984ba79da2acaba618f3d18", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "patch": "@@ -236,11 +236,11 @@ void update_crate_map(const cratemap* map, log_directive* dirs,\n }\n \n void print_crate_log_map(const cratemap* map) {\n-    for (const mod_entry* cur = map->entries; cur->name; cur++) {\n+    for (const mod_entry* cur = map->entries(); cur->name; cur++) {\n         printf(\"  %s\\n\", cur->name);\n     }\n-    for (size_t i = 0; map->children[i]; i++) {\n-        print_crate_log_map(map->children[i]);\n+    for (cratemap::iterator i = map->begin(), e = map->end(); i != e; ++i) {\n+        print_crate_log_map(*i);\n     }\n }\n "}, {"sha": "aaed7d35343aa8c4cccd4dfd0909dd86c2c65ef3", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2b6110ddb99e3d4b67c15321b957bdd4b37671/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "patch": "@@ -2478,7 +2478,7 @@ fn decl_crate_map(sess: session::session, mapmeta: link_meta,\n     } else { ~\"toplevel\" };\n     let sym_name = ~\"_rust_crate_map_\" + mapname;\n     let arrtype = T_array(int_type, n_subcrates as uint);\n-    let maptype = T_struct(~[int_type, arrtype]);\n+    let maptype = T_struct(~[T_i32(), T_ptr(T_i8()), int_type, arrtype]);\n     let map = str::as_c_str(sym_name, |buf| {\n         llvm::LLVMAddGlobal(llmod, maptype, buf)\n     });\n@@ -2502,9 +2502,25 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n         i += 1;\n     }\n     vec::push(subcrates, C_int(ccx, 0));\n+\n+    let llannihilatefn;\n+    let annihilate_def_id = ccx.tcx.lang_items.annihilate_fn.get();\n+    if annihilate_def_id.crate == ast::local_crate {\n+        llannihilatefn = get_item_val(ccx, annihilate_def_id.node);\n+    } else {\n+        let annihilate_fn_type = csearch::get_type(ccx.tcx,\n+                                                   annihilate_def_id).ty;\n+        llannihilatefn = trans_external_path(ccx,\n+                                             annihilate_def_id,\n+                                             annihilate_fn_type);\n+    }\n+\n     llvm::LLVMSetInitializer(map, C_struct(\n-        ~[p2i(ccx, create_module_map(ccx)),\n-         C_array(ccx.int_type, subcrates)]));\n+        ~[C_i32(1),\n+          lib::llvm::llvm::LLVMConstPointerCast(llannihilatefn,\n+                                                T_ptr(T_i8())),\n+          p2i(ccx, create_module_map(ccx)),\n+          C_array(ccx.int_type, subcrates)]));\n }\n \n fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)"}]}