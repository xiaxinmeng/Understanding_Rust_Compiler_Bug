{"sha": "e188868014da60bc266024e60c914b532445c743", "node_id": "C_kwDOAAsO6NoAKGUxODg4NjgwMTRkYTYwYmMyNjYwMjRlNjBjOTE0YjUzMjQ0NWM3NDM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-12T02:35:33Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T02:52:29Z"}, "message": "get rid of another unnecessary lifetime macro argument", "tree": {"sha": "6435ef2b74810031a24deb884f93602323e10f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6435ef2b74810031a24deb884f93602323e10f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e188868014da60bc266024e60c914b532445c743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e188868014da60bc266024e60c914b532445c743", "html_url": "https://github.com/rust-lang/rust/commit/e188868014da60bc266024e60c914b532445c743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e188868014da60bc266024e60c914b532445c743/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bedd354ca3c5438f5f5a3b0b06b3ead6ffec374", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bedd354ca3c5438f5f5a3b0b06b3ead6ffec374", "html_url": "https://github.com/rust-lang/rust/commit/0bedd354ca3c5438f5f5a3b0b06b3ead6ffec374"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5bf40f205953b28d18ba0733054c56a9ecfcd202", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e188868014da60bc266024e60c914b532445c743/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e188868014da60bc266024e60c914b532445c743/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e188868014da60bc266024e60c914b532445c743", "patch": "@@ -76,9 +76,9 @@ impl ProcessQueryValue<'_, Option<DeprecationEntry>> for Option<Deprecation> {\n }\n \n macro_rules! provide_one {\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table }) => {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table }) => {\n         provide_one! {\n-            <$lt> $tcx, $def_id, $other, $cdata, $name => {\n+            $tcx, $def_id, $other, $cdata, $name => {\n                 $cdata\n                     .root\n                     .tables\n@@ -89,9 +89,9 @@ macro_rules! provide_one {\n             }\n         }\n     };\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_direct }) => {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => { table_direct }) => {\n         provide_one! {\n-            <$lt> $tcx, $def_id, $other, $cdata, $name => {\n+            $tcx, $def_id, $other, $cdata, $name => {\n                 // We don't decode `table_direct`, since it's not a Lazy, but an actual value\n                 $cdata\n                     .root\n@@ -102,11 +102,11 @@ macro_rules! provide_one {\n             }\n         }\n     };\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n-        fn $name<$lt>(\n-            $tcx: TyCtxt<$lt>,\n-            def_id_arg: ty::query::query_keys::$name<$lt>,\n-        ) -> ty::query::query_values::$name<$lt> {\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n+        fn $name<'tcx>(\n+            $tcx: TyCtxt<'tcx>,\n+            def_id_arg: ty::query::query_keys::$name<'tcx>,\n+        ) -> ty::query::query_values::$name<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n \n@@ -130,11 +130,11 @@ macro_rules! provide_one {\n }\n \n macro_rules! provide {\n-    (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n+    ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => { $($compute:tt)* })*) => {\n         pub fn provide_extern(providers: &mut ExternProviders) {\n             $(provide_one! {\n-                <$lt> $tcx, $def_id, $other, $cdata, $name => { $($compute)* }\n+                $tcx, $def_id, $other, $cdata, $name => { $($compute)* }\n             })*\n \n             *providers = ExternProviders {\n@@ -187,7 +187,7 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n     }\n }\n \n-provide! { <'tcx> tcx, def_id, other, cdata,\n+provide! { tcx, def_id, other, cdata,\n     explicit_item_bounds => { table }\n     explicit_predicates_of => { table }\n     generics_of => { table }"}]}