{"sha": "1ee42912e1c83106082012e9c23090934be4ae69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTQyOTEyZTFjODMxMDYwODIwMTJlOWMyMzA5MDkzNGJlNGFlNjk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-07T11:51:08Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-08T11:12:58Z"}, "message": "std::rand: implement the chi-squared distribution.", "tree": {"sha": "d045ee364144dc790121cd32c52008636ab1a9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d045ee364144dc790121cd32c52008636ab1a9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee42912e1c83106082012e9c23090934be4ae69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee42912e1c83106082012e9c23090934be4ae69", "html_url": "https://github.com/rust-lang/rust/commit/1ee42912e1c83106082012e9c23090934be4ae69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee42912e1c83106082012e9c23090934be4ae69/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d986de2488249763f730ba83fd3d8235391e74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d986de2488249763f730ba83fd3d8235391e74d", "html_url": "https://github.com/rust-lang/rust/commit/1d986de2488249763f730ba83fd3d8235391e74d"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "7d583771230a90a06f50ab65e023fd07e06b351a", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/1ee42912e1c83106082012e9c23090934be4ae69/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee42912e1c83106082012e9c23090934be4ae69/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=1ee42912e1c83106082012e9c23090934be4ae69", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The Gamma distribution.\n+//! The Gamma and derived distributions.\n \n use rand::{Rng, Open01};\n use super::{IndependentSample, Sample, Exp};\n@@ -169,6 +169,103 @@ impl IndependentSample<f64> for GammaLargeShape {\n     }\n }\n \n+/// The chi-squared distribution `\u03c7\u00b2(k)`, where `k` is the degrees of\n+/// freedom.\n+///\n+/// For `k > 0` integral, this distribution is the sum of the squares\n+/// of `k` independent standard normal random variables. For other\n+/// `k`, this uses the equivalent characterisation `\u03c7\u00b2(k) = Gamma(k/2,\n+/// 2)`.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand;\n+/// use std::rand::distributions::{ChiSquared, IndependentSample};\n+///\n+/// fn main() {\n+///     let chi = ChiSquared::new(11.0);\n+///     let v = chi.ind_sample(&mut rand::task_rng());\n+///     println!(\"{} is from a \u03c7\u00b2(11) distribution\", v)\n+/// }\n+/// ```\n+pub enum ChiSquared {\n+    // k == 1, Gamma(alpha, ..) is particularly slow for alpha < 1,\n+    // e.g. when alpha = 1/2 as it would be for this case, so special-\n+    // casing and using the definition of N(0,1)^2 is faster.\n+    priv DoFExactlyOne,\n+    priv DoFAnythingElse(Gamma)\n+}\n+\n+impl ChiSquared {\n+    /// Create a new chi-squared distribution with degrees-of-freedom\n+    /// `k`. Fails if `k < 0`.\n+    pub fn new(k: f64) -> ChiSquared {\n+        if k == 1.0 {\n+            DoFExactlyOne\n+        } else {\n+            assert!(k > 0.0, \"ChiSquared::new called with `k` < 0\");\n+            DoFAnythingElse(Gamma::new(0.5 * k, 2.0))\n+        }\n+    }\n+}\n+impl Sample<f64> for ChiSquared {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+}\n+impl IndependentSample<f64> for ChiSquared {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n+        match *self {\n+            DoFExactlyOne => {\n+                // k == 1 => N(0,1)^2\n+                let norm = *rng.gen::<StandardNormal>();\n+                norm * norm\n+            }\n+            DoFAnythingElse(ref g) => g.ind_sample(rng)\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use rand::*;\n+    use super::*;\n+    use iter::range;\n+    use option::{Some, None};\n+\n+    #[test]\n+    fn test_chi_squared_one() {\n+        let mut chi = ChiSquared::new(1.0);\n+        let mut rng = task_rng();\n+        for _ in range(0, 1000) {\n+            chi.sample(&mut rng);\n+            chi.ind_sample(&mut rng);\n+        }\n+    }\n+    #[test]\n+    fn test_chi_squared_small() {\n+        let mut chi = ChiSquared::new(0.5);\n+        let mut rng = task_rng();\n+        for _ in range(0, 1000) {\n+            chi.sample(&mut rng);\n+            chi.ind_sample(&mut rng);\n+        }\n+    }\n+    #[test]\n+    fn test_chi_squared_large() {\n+        let mut chi = ChiSquared::new(30.0);\n+        let mut rng = task_rng();\n+        for _ in range(0, 1000) {\n+            chi.sample(&mut rng);\n+            chi.ind_sample(&mut rng);\n+        }\n+    }\n+    #[test]\n+    #[should_fail]\n+    fn test_log_normal_invalid_dof() {\n+        ChiSquared::new(-1.0);\n+    }\n+}\n+\n #[cfg(test)]\n mod bench {\n     use super::*;"}, {"sha": "4e789a28ad2757f896cb2b7feb9382e502efc966", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee42912e1c83106082012e9c23090934be4ae69/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee42912e1c83106082012e9c23090934be4ae69/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=1ee42912e1c83106082012e9c23090934be4ae69", "patch": "@@ -27,7 +27,7 @@ use rand::{Rng, Rand};\n use clone::Clone;\n \n pub use self::range::Range;\n-pub use self::gamma::Gamma;\n+pub use self::gamma::{Gamma, ChiSquared};\n pub use self::normal::{Normal, LogNormal};\n pub use self::exponential::Exp;\n "}]}