{"sha": "c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTI1ZmIzNmE3ZDBmMDZlMjFjYTg5MWQ5OTNjODViOWZkODg0YjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-16T15:23:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-16T15:23:26Z"}, "message": "Rollup merge of #68033 - ollie27:win_f32, r=dtolnay\n\nDon't use f64 shims for f32 cmath functions on non 32-bit x86 MSVC\n\nThese shims are only needed on 32-bit x86. Additionally since https://reviews.llvm.org/rL268875 LLVM handles adding the shims itself for the intrinsics.", "tree": {"sha": "028ce1aca0f825ddf30b2bea25e2557500253b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/028ce1aca0f825ddf30b2bea25e2557500253b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeIH/uCRBK7hj4Ov3rIwAAdHIIAI9Y6d4x8TGYG7B56SeKG9Sr\nSOYCIYqbXgSBPZ6Du5weF/1D54lxoD1/9hyR+i8oK5YrV3X6oqLq6KUl/TWjXRze\n3SS/wJhhtKdVi2pOSKolL4IhmFC0NS2To3gEkAaq3rzYjy7cZ3RZPd/3dxJKQx0a\nhqOEYWGUK17NQSEcxCofKnyqRvL7TCC8i/YGDE3vGFI+Ih/BkrIhkVdOeZ5BL4H5\ngIZcqvYea58sQ4gC5jYKeteB8wlS4YioM7vaNGwScZp58zy0ObGSGsr7GFOouAwB\nMmUF9/pQ3Zhpdy8VKrKAWJRM9J2/gzSWKKLERBRIjzLyzGVKFurUE414ZcDAD4k=\n=mJrn\n-----END PGP SIGNATURE-----\n", "payload": "tree 028ce1aca0f825ddf30b2bea25e2557500253b43\nparent 9fe05e9456b84996637c2f29b35c37960e537540\nparent 084217af65b212c3c68f66d798faa19bcef5007a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1579188206 +0530\ncommitter GitHub <noreply@github.com> 1579188206 +0530\n\nRollup merge of #68033 - ollie27:win_f32, r=dtolnay\n\nDon't use f64 shims for f32 cmath functions on non 32-bit x86 MSVC\n\nThese shims are only needed on 32-bit x86. Additionally since https://reviews.llvm.org/rL268875 LLVM handles adding the shims itself for the intrinsics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "html_url": "https://github.com/rust-lang/rust/commit/c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8125fb36a7d0f06e21ca891d993c85b9fd884b6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe05e9456b84996637c2f29b35c37960e537540", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe05e9456b84996637c2f29b35c37960e537540", "html_url": "https://github.com/rust-lang/rust/commit/9fe05e9456b84996637c2f29b35c37960e537540"}, {"sha": "084217af65b212c3c68f66d798faa19bcef5007a", "url": "https://api.github.com/repos/rust-lang/rust/commits/084217af65b212c3c68f66d798faa19bcef5007a", "html_url": "https://github.com/rust-lang/rust/commit/084217af65b212c3c68f66d798faa19bcef5007a"}], "stats": {"total": 70, "additions": 13, "deletions": 57}, "files": [{"sha": "941ea6a767c57d4a7d9621324774fcdbe8e62bb9", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 8, "deletions": 52, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c8125fb36a7d0f06e21ca891d993c85b9fd884b6/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8125fb36a7d0f06e21ca891d993c85b9fd884b6/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "patch": "@@ -44,23 +44,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn floor(self) -> f32 {\n-        // On MSVC LLVM will lower many math intrinsics to a call to the\n-        // corresponding function. On MSVC, however, many of these functions\n-        // aren't actually available as symbols to call, but rather they are all\n-        // `static inline` functions in header files. This means that from a C\n-        // perspective it's \"compatible\", but not so much from an ABI\n-        // perspective (which we're worried about).\n-        //\n-        // The inline header functions always just cast to a f64 and do their\n-        // operation, so we do that here as well, but only for MSVC targets.\n-        //\n-        // Note that there are many MSVC-specific float operations which\n-        // redirect to this comment, so `floorf` is just one case of a missing\n-        // function on MSVC, but there are many others elsewhere.\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).floor() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::floorf32(self) };\n+        unsafe { intrinsics::floorf32(self) }\n     }\n \n     /// Returns the smallest integer greater than or equal to a number.\n@@ -78,11 +62,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ceil(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).ceil() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::ceilf32(self) };\n+        unsafe { intrinsics::ceilf32(self) }\n     }\n \n     /// Returns the nearest integer to a number. Round half-way cases away from\n@@ -348,11 +328,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).powf(n as f64) as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::powf32(self, n) };\n+        unsafe { intrinsics::powf32(self, n) }\n     }\n \n     /// Returns the square root of a number.\n@@ -399,11 +375,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).exp() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::expf32(self) };\n+        unsafe { intrinsics::expf32(self) }\n     }\n \n     /// Returns `2^(self)`.\n@@ -447,11 +419,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).ln() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::logf32(self) };\n+        unsafe { intrinsics::logf32(self) }\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -521,11 +489,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).log10() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::log10f32(self) };\n+        unsafe { intrinsics::log10f32(self) }\n     }\n \n     /// The positive difference of two numbers.\n@@ -625,11 +589,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin(self) -> f32 {\n-        // see notes in `core::f32::Float::floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).sin() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::sinf32(self) };\n+        unsafe { intrinsics::sinf32(self) }\n     }\n \n     /// Computes the cosine of a number (in radians).\n@@ -649,11 +609,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cos(self) -> f32 {\n-        // see notes in `core::f32::Float::floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).cos() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::cosf32(self) };\n+        unsafe { intrinsics::cosf32(self) }\n     }\n \n     /// Computes the tangent of a number (in radians)."}, {"sha": "1a5421facd0c1aba216ebd195b0e72f4800e7560", "filename": "src/libstd/sys/windows/cmath.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8125fb36a7d0f06e21ca891d993c85b9fd884b6/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8125fb36a7d0f06e21ca891d993c85b9fd884b6/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs?ref=c8125fb36a7d0f06e21ca891d993c85b9fd884b6", "patch": "@@ -27,7 +27,7 @@ extern \"C\" {\n \n pub use self::shims::*;\n \n-#[cfg(not(target_env = \"msvc\"))]\n+#[cfg(not(all(target_env = \"msvc\", target_arch = \"x86\")))]\n mod shims {\n     use libc::c_float;\n \n@@ -43,10 +43,10 @@ mod shims {\n     }\n }\n \n-// On MSVC these functions aren't defined, so we just define shims which promote\n-// everything fo f64, perform the calculation, and then demote back to f32.\n-// While not precisely correct should be \"correct enough\" for now.\n-#[cfg(target_env = \"msvc\")]\n+// On 32-bit x86 MSVC these functions aren't defined, so we just define shims\n+// which promote everything fo f64, perform the calculation, and then demote\n+// back to f32. While not precisely correct should be \"correct enough\" for now.\n+#[cfg(all(target_env = \"msvc\", target_arch = \"x86\"))]\n mod shims {\n     use libc::c_float;\n "}]}