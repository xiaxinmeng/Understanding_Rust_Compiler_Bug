{"sha": "da850361ba22c78ed3579c33d6748735dcd2885c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODUwMzYxYmEyMmM3OGVkMzU3OWMzM2Q2NzQ4NzM1ZGNkMjg4NWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-03T06:01:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-03T06:01:09Z"}, "message": "clearer ignore", "tree": {"sha": "4186099009b716c736ec8820823eb3be6b008c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4186099009b716c736ec8820823eb3be6b008c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da850361ba22c78ed3579c33d6748735dcd2885c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da850361ba22c78ed3579c33d6748735dcd2885c", "html_url": "https://github.com/rust-lang/rust/commit/da850361ba22c78ed3579c33d6748735dcd2885c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da850361ba22c78ed3579c33d6748735dcd2885c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b218b7bf19365fd881c1a4797a49efe3661ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b218b7bf19365fd881c1a4797a49efe3661ce6", "html_url": "https://github.com/rust-lang/rust/commit/82b218b7bf19365fd881c1a4797a49efe3661ce6"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b89a40b4b2f6eb0b25bc1f928f89a3c14370ef18", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da850361ba22c78ed3579c33d6748735dcd2885c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da850361ba22c78ed3579c33d6748735dcd2885c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=da850361ba22c78ed3579c33d6748735dcd2885c", "patch": "@@ -817,7 +817,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let resolver = self.resolver.clone();\n                 self.infer_path_expr(&resolver, &path, pat.into()).unwrap_or(Ty::Unknown)\n             }\n-            Pat::Bind { mode, name: _name, subpat } => {\n+            Pat::Bind { mode, name: _, subpat } => {\n                 let mode = if mode == &BindingAnnotation::Unannotated {\n                     default_bm\n                 } else {"}]}