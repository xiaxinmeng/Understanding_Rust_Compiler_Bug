{"sha": "e36620dd9c29e39da688d87e1a6566710aa2ccc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjYyMGRkOWMyOWUzOWRhNjg4ZDg3ZTFhNjU2NjcxMGFhMmNjYzU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-11T22:47:29Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:05:15Z"}, "message": "Introduce ICE when the topmost projection restriction kicks in, as per issue #32205", "tree": {"sha": "3deafc607fa874d95a1bdce496214f595e71de27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3deafc607fa874d95a1bdce496214f595e71de27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36620dd9c29e39da688d87e1a6566710aa2ccc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36620dd9c29e39da688d87e1a6566710aa2ccc5", "html_url": "https://github.com/rust-lang/rust/commit/e36620dd9c29e39da688d87e1a6566710aa2ccc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36620dd9c29e39da688d87e1a6566710aa2ccc5/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80189d305ce24b6a1fd83a4f724d17506b64a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80189d305ce24b6a1fd83a4f724d17506b64a13", "html_url": "https://github.com/rust-lang/rust/commit/d80189d305ce24b6a1fd83a4f724d17506b64a13"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "469ce0a4d2799be9945527d2c515db5bad9dbdc8", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e36620dd9c29e39da688d87e1a6566710aa2ccc5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36620dd9c29e39da688d87e1a6566710aa2ccc5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=e36620dd9c29e39da688d87e1a6566710aa2ccc5", "patch": "@@ -38,13 +38,13 @@ use std::rc::Rc;\n /// more or less conservative.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum ProjectionMode {\n+    /// FIXME (#32205)\n     /// At coherence-checking time, we're still constructing the\n     /// specialization graph, and thus we only project project\n     /// non-`default` associated types that are defined directly in\n     /// the applicable impl. (This behavior should be improved over\n     /// time, to allow for successful projections modulo cycles\n     /// between different impls).\n-    // TODO: Add tracking issue to do better here.\n     ///\n     /// Here's an example that will fail due to the restriction:\n     ///\n@@ -66,7 +66,6 @@ pub enum ProjectionMode {\n     ///\n     /// The projection would succeed if `Output` had been defined\n     /// directly in the impl for `u8`.\n-    // TODO: Add test\n     Topmost,\n \n     /// At type-checking time, we refuse to project any associated\n@@ -91,7 +90,6 @@ pub enum ProjectionMode {\n     /// fn main() {\n     ///     let <() as Assoc>::Output = true;\n     /// }\n-    // TODO: Add test\n     AnyFinal,\n \n     /// At trans time, all projections will succeed.\n@@ -695,7 +693,34 @@ fn project_type<'cx,'tcx>(\n                     // at the topmost impl (we don't even consider the trait\n                     // itself) for the definition -- so we can fail to find a\n                     // definition of the type even if it exists.\n-                    return None;\n+\n+                    // For now, we just unconditionally ICE, because otherwise,\n+                    // examples like the following will succeed:\n+                    //\n+                    // ```\n+                    // trait Assoc {\n+                    //     type Output;\n+                    // }\n+                    //\n+                    // impl<T> Assoc for T {\n+                    //     default type Output = bool;\n+                    // }\n+                    //\n+                    // impl Assoc for u8 {}\n+                    // impl Assoc for u16 {}\n+                    //\n+                    // trait Foo {}\n+                    // impl Foo for <u8 as Assoc>::Output {}\n+                    // impl Foo for <u16 as Assoc>::Output {}\n+                    //     return None;\n+                    // }\n+                    // ```\n+                    //\n+                    // The essential problem here is that the projection fails,\n+                    // leaving two unnormalized types, which appear not to unify\n+                    // -- so the overlap check succeeds, when it should fail.\n+                    selcx.tcx().sess.bug(\"Tried to project an inherited associated type during \\\n+                                          coherence checking, which is currently not supported.\");\n                 }\n             }\n         }"}, {"sha": "b9d632a8cf07e6ce33dcbcd4271e05758769b5d0", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e36620dd9c29e39da688d87e1a6566710aa2ccc5/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36620dd9c29e39da688d87e1a6566710aa2ccc5/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=e36620dd9c29e39da688d87e1a6566710aa2ccc5", "patch": "@@ -198,9 +198,11 @@ mod aliases_pub {\n     use self::m::PubTr as PrivUseAliasTr;\n     type PrivAlias = m::Pub2;\n     trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n         type AssocAlias = m::Pub3;\n     }\n-    impl PrivTr for Priv {}\n \n     pub fn f1(arg: PrivUseAlias) {} // OK\n \n@@ -245,9 +247,11 @@ mod aliases_priv {\n     use self::PrivTr1 as PrivUseAliasTr;\n     type PrivAlias = Priv2;\n     trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n         type AssocAlias = Priv3;\n     }\n-    impl PrivTr for Priv {}\n \n     pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n         //~^ WARNING hard error"}]}