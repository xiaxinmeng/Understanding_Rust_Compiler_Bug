{"sha": "4ee2d0351a67e382f56a85eaeada0b7c773f0691", "node_id": "C_kwDOAAsO6NoAKDRlZTJkMDM1MWE2N2UzODJmNTZhODVlYWVhZGEwYjdjNzczZjA2OTE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:05:09Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:05:09Z"}, "message": "Fix FIXMEs in `rustdoc::html::sources`\n\nOne of the FIXMEs is irrelevant since that code is only run if\n`include_sources` is set. I fixed the other FIXME.", "tree": {"sha": "ea26016e4758d9b460274844f931ef3c7706db4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea26016e4758d9b460274844f931ef3c7706db4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee2d0351a67e382f56a85eaeada0b7c773f0691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee2d0351a67e382f56a85eaeada0b7c773f0691", "html_url": "https://github.com/rust-lang/rust/commit/4ee2d0351a67e382f56a85eaeada0b7c773f0691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee2d0351a67e382f56a85eaeada0b7c773f0691/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "html_url": "https://github.com/rust-lang/rust/commit/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "30ec592ba23d87fedfd87bb83cd3b321c26d495d", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2d0351a67e382f56a85eaeada0b7c773f0691/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2d0351a67e382f56a85eaeada0b7c773f0691/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=4ee2d0351a67e382f56a85eaeada0b7c773f0691", "patch": "@@ -85,8 +85,6 @@ impl DocVisitor for LocalSourcesCollector<'_, '_> {\n     fn visit_item(&mut self, item: &clean::Item) {\n         self.add_local_source(item);\n \n-        // FIXME: if `include_sources` isn't set and DocFolder didn't require consuming the crate by value,\n-        // we could return None here without having to walk the rest of the crate.\n         self.visit_item_recur(item)\n     }\n }\n@@ -102,14 +100,18 @@ struct SourceCollector<'a, 'tcx> {\n \n impl DocVisitor for SourceCollector<'_, '_> {\n     fn visit_item(&mut self, item: &clean::Item) {\n+        if !self.cx.include_sources {\n+            return;\n+        }\n+\n         let tcx = self.cx.tcx();\n         let span = item.span(tcx);\n         let sess = tcx.sess;\n \n         // If we're not rendering sources, there's nothing to do.\n         // If we're including source files, and we haven't seen this file yet,\n         // then we need to render it out to the filesystem.\n-        if self.cx.include_sources && is_real_and_local(span, sess) {\n+        if is_real_and_local(span, sess) {\n             let filename = span.filename(sess);\n             let span = span.inner();\n             let pos = sess.source_map().lookup_source_file(span.lo());\n@@ -134,8 +136,7 @@ impl DocVisitor for SourceCollector<'_, '_> {\n                 }\n             };\n         }\n-        // FIXME: if `include_sources` isn't set and DocFolder didn't require consuming the crate by value,\n-        // we could return None here without having to walk the rest of the crate.\n+\n         self.visit_item_recur(item)\n     }\n }"}]}