{"sha": "d587ca2991406bd348768b2912c3cb66c869e7e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODdjYTI5OTE0MDZiZDM0ODc2OGIyOTEyYzNjYjY2Yzg2OWU3ZTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-05T18:46:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-05T18:46:15Z"}, "message": "Replace unused hir_ty::Lifetime with chalk equivalents", "tree": {"sha": "91f0421f3ca76f846548017d8a6c5a4b142b96bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f0421f3ca76f846548017d8a6c5a4b142b96bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d587ca2991406bd348768b2912c3cb66c869e7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d587ca2991406bd348768b2912c3cb66c869e7e8", "html_url": "https://github.com/rust-lang/rust/commit/d587ca2991406bd348768b2912c3cb66c869e7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d587ca2991406bd348768b2912c3cb66c869e7e8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e56eb94ced9943977a38e7d4c6697587187ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e56eb94ced9943977a38e7d4c6697587187ce6", "html_url": "https://github.com/rust-lang/rust/commit/87e56eb94ced9943977a38e7d4c6697587187ce6"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "07510ae02b8647711cc1276b8eec9aefde375f42", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=d587ca2991406bd348768b2912c3cb66c869e7e8", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n     db::DefDatabase, expr::ExprId, ConstParamId, DefWithBodyId, FunctionId, GenericDefId, ImplId,\n-    LocalFieldId, TypeParamId, VariantId,\n+    LifetimeParamId, LocalFieldId, TypeParamId, VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -86,6 +86,8 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_type_param_id(&self, param_id: TypeParamId) -> InternedTypeParamId;\n     #[salsa::interned]\n+    fn intern_lifetime_param_id(&self, param_id: LifetimeParamId) -> InternedLifetimeParamId;\n+    #[salsa::interned]\n     fn intern_impl_trait_id(&self, id: ImplTraitId) -> InternedOpaqueTyId;\n     #[salsa::interned]\n     fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n@@ -155,6 +157,10 @@ fn hir_database_is_object_safe() {\n pub struct InternedTypeParamId(salsa::InternId);\n impl_intern_key!(InternedTypeParamId);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct InternedLifetimeParamId(salsa::InternId);\n+impl_intern_key!(InternedLifetimeParamId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct InternedOpaqueTyId(salsa::InternId);\n impl_intern_key!(InternedOpaqueTyId);"}, {"sha": "01c7ef91fe6ac5c15287d0e0cdc421a830fc0a1d", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=d587ca2991406bd348768b2912c3cb66c869e7e8", "patch": "@@ -1,8 +1,10 @@\n //! FIXME: write short doc here\n \n-use std::{array, fmt};\n+use std::{\n+    array,\n+    fmt::{self, Debug},\n+};\n \n-use chalk_ir::Mutability;\n use hir_def::{\n     db::DefDatabase,\n     find_path,\n@@ -16,9 +18,10 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n-    to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n-    CallableDefId, CallableSig, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, OpaqueTy,\n+    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx,\n+    lt_from_placeholder_idx, primitive, to_assoc_type_id, traits::chalk::from_chalk,\n+    utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, DomainGoal, GenericArg,\n+    ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives, Mutability, OpaqueTy,\n     ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n };\n \n@@ -827,15 +830,35 @@ impl HirDisplay for WhereClause {\n     }\n }\n \n+impl HirDisplay for LifetimeOutlives {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        self.a.hir_fmt(f)?;\n+        write!(f, \": \")?;\n+        self.b.hir_fmt(f)\n+    }\n+}\n+\n impl HirDisplay for Lifetime {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        self.interned().hir_fmt(f)\n+    }\n+}\n+\n+impl HirDisplay for LifetimeData {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         match self {\n-            Lifetime::Parameter(id) => {\n+            LifetimeData::BoundVar(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index),\n+            LifetimeData::InferenceVar(_) => write!(f, \"_\"),\n+            LifetimeData::Placeholder(idx) => {\n+                let id = lt_from_placeholder_idx(f.db, *idx);\n                 let generics = generics(f.db.upcast(), id.parent);\n                 let param_data = &generics.params.lifetimes[id.local_id];\n-                write!(f, \"{}\", &param_data.name)\n+                write!(f, \"{}\", param_data.name)\n             }\n-            Lifetime::Static => write!(f, \"'static\"),\n+            LifetimeData::Static => write!(f, \"'static\"),\n+            LifetimeData::Empty(_) => Ok(()),\n+            LifetimeData::Erased => Ok(()),\n+            LifetimeData::Phantom(_, _) => Ok(()),\n         }\n     }\n }"}, {"sha": "a3addc8e9996a981a5f534b8566a7e20edf73a0d", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=d587ca2991406bd348768b2912c3cb66c869e7e8", "patch": "@@ -35,8 +35,8 @@ use smallvec::SmallVec;\n \n use base_db::salsa;\n use hir_def::{\n-    expr::ExprId, type_ref::Rawness, AssocContainerId, FunctionId, GenericDefId, HasModule, Lookup,\n-    TraitId, TypeAliasId, TypeParamId,\n+    expr::ExprId, type_ref::Rawness, AssocContainerId, FunctionId, GenericDefId, HasModule,\n+    LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n \n use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n@@ -70,6 +70,10 @@ pub type VariableKind = chalk_ir::VariableKind<Interner>;\n pub type VariableKinds = chalk_ir::VariableKinds<Interner>;\n pub type CanonicalVarKinds = chalk_ir::CanonicalVarKinds<Interner>;\n \n+pub type Lifetime = chalk_ir::Lifetime<Interner>;\n+pub type LifetimeData = chalk_ir::LifetimeData<Interner>;\n+pub type LifetimeOutlives = chalk_ir::LifetimeOutlives<Interner>;\n+\n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n \n impl ProjectionTy {\n@@ -546,6 +550,12 @@ pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderI\n     }\n }\n \n+pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> LifetimeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_lifetime_param_id(interned_id)\n+}\n+\n pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n     chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n }"}, {"sha": "dc64e6e2bcf169dd654b2c39fb0ad4eedbb8fbfc", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d587ca2991406bd348768b2912c3cb66c869e7e8/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=d587ca2991406bd348768b2912c3cb66c869e7e8", "patch": "@@ -7,20 +7,13 @@ use chalk_ir::{\n     cast::{CastTo, Caster},\n     BoundVar, Mutability, Scalar, TyVariableKind,\n };\n-use hir_def::LifetimeParamId;\n use smallvec::SmallVec;\n \n use crate::{\n     AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n     InferenceVar, Interner, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKinds,\n };\n \n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum Lifetime {\n-    Parameter(LifetimeParamId),\n-    Static,\n-}\n-\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct OpaqueTy {\n     pub opaque_ty_id: OpaqueTyId,"}]}