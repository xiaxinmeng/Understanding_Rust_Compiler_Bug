{"sha": "d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2E2ZmQ3MWVkMzAwM2U1OGM2YjU4ZDdiZWIwNTA1ZDBjOGFkYzM=", "commit": {"author": {"name": "Harald Hoyer", "email": "harald@redhat.com", "date": "2020-06-15T11:23:38Z"}, "committer": {"name": "Harald Hoyer", "email": "harald@redhat.com", "date": "2020-06-15T12:04:48Z"}, "message": "Enable static-pie for the x86_64-unknown-linux-musl target\n\nFixes: https://github.com/rust-lang/rust/issues/70693", "tree": {"sha": "c3bcd8ee33b2910e161f20abb2ebc95966118303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3bcd8ee33b2910e161f20abb2ebc95966118303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "html_url": "https://github.com/rust-lang/rust/commit/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/comments", "author": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb54ed484e2239a3e9eff3be17df00d2a162be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb54ed484e2239a3e9eff3be17df00d2a162be3", "html_url": "https://github.com/rust-lang/rust/commit/4fb54ed484e2239a3e9eff3be17df00d2a162be3"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "3a22290da68583ceef070dcdfa1898d6237b42b5", "filename": "src/librustc_target/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n+    base.static_position_independent_executables = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),"}, {"sha": "1d3cc82138927a1018c97a10d2814b05814a6602", "filename": "src/test/run-make/static-pie/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile?ref=d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "patch": "@@ -0,0 +1,15 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-x86_64-unknown-linux-musl\n+\n+# How to manually run this\n+# $ ./x.py test --target x86_64-unknown-linux-musl src/test/run-make/static-pie\n+\n+all:\n+\t$(RUSTC) --target $(TARGET) -C target-feature=+crt-static test-aslr.rs\n+\t# Check that no dynamic interpreter is set\n+\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP\n+\t# Check that we have a dynamic executable\n+\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC\n+\t# Check for address space layout randomization\n+\t$(call RUN,test-aslr) --test-aslr"}, {"sha": "f28e00f7f4cf93825df45defa08944b1fee17251", "filename": "src/test/run-make/static-pie/test-aslr.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs?ref=d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "patch": "@@ -0,0 +1,43 @@\n+const NUM_RUNS: usize = 10;\n+\n+fn run_self(exe: &str) -> usize {\n+    use std::process::Command;\n+    let mut set = std::collections::HashSet::new();\n+\n+    let mut cmd = Command::new(exe);\n+    cmd.arg(\"--report\");\n+    (0..NUM_RUNS).for_each(|_| {\n+        set.insert(cmd.output().expect(\"failed to execute process\").stdout);\n+    });\n+    set.len()\n+}\n+\n+fn main() {\n+    let mut args = std::env::args();\n+    let arg0 = args.next().unwrap();\n+    match args.next() {\n+        Some(s) if s.eq(\"--report\") => {\n+            println!(\"main = {:#?}\", &main as *const _);\n+        }\n+        Some(s) if s.eq(\"--test-no-aslr\") => {\n+            let cnt = run_self(&arg0);\n+            if cnt != 1 {\n+                eprintln!(\"FAIL: {} most likely ASLR\", arg0);\n+                std::process::exit(1);\n+            }\n+            println!(\"PASS: {} does no ASLR\", arg0);\n+        }\n+        Some(s) if s.eq(\"--test-aslr\") => {\n+            let cnt = run_self(&arg0);\n+            if cnt != NUM_RUNS {\n+                eprintln!(\"FAIL: {} most likely no ASLR\", arg0);\n+                std::process::exit(1);\n+            }\n+            println!(\"PASS: {} does ASLR\", arg0);\n+        }\n+        Some(_) | None => {\n+            println!(\"Usage: {} --test-no-aslr | --test-aslr\", arg0);\n+            std::process::exit(1);\n+        }\n+    }\n+}"}]}