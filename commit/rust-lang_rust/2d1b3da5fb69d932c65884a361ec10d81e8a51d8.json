{"sha": "2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWIzZGE1ZmI2OWQ5MzJjNjU4ODRhMzYxZWMxMGQ4MWU4YTUxZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:19:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:19:25Z"}, "message": "Use anyhow", "tree": {"sha": "8bb0a64574c42deb666494e7f1c158b9cae9e8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb0a64574c42deb666494e7f1c158b9cae9e8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "html_url": "https://github.com/rust-lang/rust/commit/2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e86d12771c0d77dce82cf80671d4cf9383057c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e86d12771c0d77dce82cf80671d4cf9383057c9", "html_url": "https://github.com/rust-lang/rust/commit/8e86d12771c0d77dce82cf80671d4cf9383057c9"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "82f910c1b701ee5d5e35c275f2dc2c43b048c3a5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -945,6 +945,7 @@ dependencies = [\n name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow\",\n  \"crossbeam-channel\",\n  \"env_logger\",\n  \"itertools\","}, {"sha": "ce88a76b1d7fe49325099e4b4175742ae184df71", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -13,6 +13,7 @@ log = \"0.4.5\"\n pico-args = \"0.3.0\"\n rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n rustc-hash = \"1.0\"\n+anyhow = \"1.0\"\n \n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }"}, {"sha": "91fc55fe20003ebc68947fce5ed3780883fdb026", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -2,6 +2,7 @@\n \n use std::{path::Path, sync::Arc, time::Instant};\n \n+use anyhow::format_err;\n use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n@@ -39,7 +40,7 @@ pub(crate) fn run(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<\n                 }\n                 None\n             })\n-            .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n+            .ok_or_else(|| format_err!(\"Can't find {}\", path.display()))?\n     };\n \n     match &what {"}, {"sha": "b9a4e6abad37f916de7045f1e9bc0522b250c6b8", "filename": "crates/ra_cli/src/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -1,17 +1,16 @@\n //! FIXME: write short doc here\n \n-use std::{collections::HashSet, error::Error, path::Path};\n-\n-use rustc_hash::FxHashMap;\n+use std::{collections::HashSet, path::Path};\n \n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost, FeatureFlags};\n use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use ra_vfs_glob::RustPackageFilterBuilder;\n+use rustc_hash::FxHashMap;\n \n-type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n+use anyhow::Result;\n \n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n     FileId(f.0)"}, {"sha": "4cf062f472d88176d4282f559380ad035140ed1a", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -5,14 +5,14 @@ mod analysis_stats;\n mod analysis_bench;\n mod progress_report;\n \n-use std::{error::Error, fmt::Write, io::Read, path::PathBuf, str::FromStr};\n+use std::{fmt::Write, io::Read, path::PathBuf, str::FromStr};\n \n use pico_args::Arguments;\n use ra_ide::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n \n-type Result<T, E = Box<dyn Error + Send + Sync>> = std::result::Result<T, E>;\n+use anyhow::{bail, format_err, Result};\n \n fn main() -> Result<()> {\n     env_logger::try_init()?;\n@@ -118,7 +118,7 @@ pub(crate) struct Position {\n }\n \n impl FromStr for Position {\n-    type Err = Box<dyn std::error::Error + Send + Sync>;\n+    type Err = anyhow::Error;\n     fn from_str(s: &str) -> Result<Self> {\n         let (path_line, column) = rsplit_at_char(s, ':')?;\n         let (path, line) = rsplit_at_char(path_line, ':')?;\n@@ -127,7 +127,7 @@ impl FromStr for Position {\n }\n \n fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    let idx = s.rfind(c).ok_or_else(|| format_err!(\"no `{}` in {}\", c, s))?;\n     Ok((&s[..idx], &s[idx + 1..]))\n }\n \n@@ -143,12 +143,12 @@ impl Command {\n             matches.contains([\"-v\", \"--verbose\"]),\n             matches.contains([\"-q\", \"--quiet\"]),\n         ) {\n-            (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n+            (true, _, true) => bail!(\"Invalid flags: -q conflicts with -vv\"),\n             (true, _, false) => Verbosity::Spammy,\n             (false, false, false) => Verbosity::Normal,\n             (false, false, true) => Verbosity::Quiet,\n             (false, true, false) => Verbosity::Verbose,\n-            (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n+            (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n \n         let command = match subcommand.as_str() {\n@@ -242,7 +242,7 @@ ARGS:\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n-                        Err(\"Invalid flags\")?;\n+                        bail!(\"Invalid flags\");\n                     }\n                     trailing.pop().unwrap().into()\n                 };\n@@ -318,9 +318,9 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n             write!(&mut invalid_flags, \"{}, \", flag)?;\n         }\n         let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n-        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+        bail!(\"Invalid flags: {}\", invalid_flags);\n     } else {\n-        Err(e.to_string().into())\n+        bail!(e);\n     }\n }\n "}]}