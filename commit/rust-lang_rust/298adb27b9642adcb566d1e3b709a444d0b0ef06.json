{"sha": "298adb27b9642adcb566d1e3b709a444d0b0ef06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OGFkYjI3Yjk2NDJhZGNiNTY2ZDFlM2I3MDlhNDQ0ZDBiMGVmMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T14:01:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T14:01:03Z"}, "message": "Better account for project reload", "tree": {"sha": "3ff4c0d186d7c285a6cb0b60da96990cb9f612ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff4c0d186d7c285a6cb0b60da96990cb9f612ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298adb27b9642adcb566d1e3b709a444d0b0ef06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298adb27b9642adcb566d1e3b709a444d0b0ef06", "html_url": "https://github.com/rust-lang/rust/commit/298adb27b9642adcb566d1e3b709a444d0b0ef06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298adb27b9642adcb566d1e3b709a444d0b0ef06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f878962a7c9d1c33d5834a1dce2106c9286699", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f878962a7c9d1c33d5834a1dce2106c9286699", "html_url": "https://github.com/rust-lang/rust/commit/c9f878962a7c9d1c33d5834a1dce2106c9286699"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b7b4edf6611ff3fd78ea8f19aff728fc43f2abaf", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298adb27b9642adcb566d1e3b709a444d0b0ef06/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298adb27b9642adcb566d1e3b709a444d0b0ef06/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=298adb27b9642adcb566d1e3b709a444d0b0ef06", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     Result,\n };\n \n-#[derive(Eq, PartialEq)]\n+#[derive(Eq, PartialEq, Copy, Clone)]\n pub(crate) enum Status {\n     Loading,\n     Ready,"}, {"sha": "e03038b25827a5adc37b5e87c1a93710b108347f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/298adb27b9642adcb566d1e3b709a444d0b0ef06/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298adb27b9642adcb566d1e3b709a444d0b0ef06/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=298adb27b9642adcb566d1e3b709a444d0b0ef06", "patch": "@@ -136,7 +136,7 @@ impl GlobalState {\n             log::info!(\"queued count = {}\", queue_count);\n         }\n \n-        let mut became_ready = false;\n+        let prev_status = self.status;\n         match event {\n             Event::Lsp(msg) => match msg {\n                 lsp_server::Message::Request(req) => self.on_request(loop_start, req)?,\n@@ -168,15 +168,17 @@ impl GlobalState {\n                     }\n                 }\n                 vfs::loader::Message::Progress { n_total, n_done } => {\n-                    if n_total > 0 {\n+                    if n_total == 0 {\n+                        self.status = Status::Ready;\n+                    } else {\n                         let state = if n_done == 0 {\n+                            self.status = Status::Loading;\n                             Progress::Begin\n                         } else if n_done < n_total {\n                             Progress::Report\n                         } else {\n                             assert_eq!(n_done, n_total);\n                             self.status = Status::Ready;\n-                            became_ready = true;\n                             Progress::End\n                         };\n                         self.report_progress(\n@@ -233,13 +235,13 @@ impl GlobalState {\n         }\n \n         let state_changed = self.process_changes();\n-        if became_ready {\n+        if prev_status == Status::Loading && self.status == Status::Ready {\n             if let Some(flycheck) = &self.flycheck {\n                 flycheck.handle.update();\n             }\n         }\n \n-        if self.status == Status::Ready && (state_changed || became_ready) {\n+        if self.status == Status::Ready && (state_changed || prev_status == Status::Loading) {\n             let subscriptions = self\n                 .mem_docs\n                 .iter()"}]}