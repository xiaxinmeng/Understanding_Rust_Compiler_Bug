{"sha": "dab9b89221472d36fb5375d0c474c794706d2ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjliODkyMjE0NzJkMzZmYjUzNzVkMGM0NzRjNzk0NzA2ZDJhZTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-04T22:38:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:50Z"}, "message": "Decouple the on-disk cache from the query engine.", "tree": {"sha": "2069a2dde800729128ca1c648e29c9a16a44986e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2069a2dde800729128ca1c648e29c9a16a44986e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab9b89221472d36fb5375d0c474c794706d2ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab9b89221472d36fb5375d0c474c794706d2ae8", "html_url": "https://github.com/rust-lang/rust/commit/dab9b89221472d36fb5375d0c474c794706d2ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab9b89221472d36fb5375d0c474c794706d2ae8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c1b07a9e09af5d01150c53b50676a5bc2e402d", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c1b07a9e09af5d01150c53b50676a5bc2e402d", "html_url": "https://github.com/rust-lang/rust/commit/49c1b07a9e09af5d01150c53b50676a5bc2e402d"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "48b74bdaf1eeef1d1252441eb46dff4a75377b81", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -97,7 +97,7 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::Cache(args, block))\n         } else if modifier == \"load_cached\" {\n             // Parse a load_cached modifier like:\n-            // `load_cached(tcx, id) { tcx.queries.on_disk_cache.try_load_query_result(tcx, id) }`\n+            // `load_cached(tcx, id) { tcx.on_disk_cache.try_load_query_result(tcx, id) }`\n             let args;\n             parenthesized!(args in input);\n             let tcx = args.parse()?;\n@@ -368,7 +368,7 @@ fn add_query_description_impl(\n                     tcx: TyCtxt<'tcx>,\n                     id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n-                    tcx.queries.on_disk_cache.as_ref().and_then(|c| c.try_load_query_result(tcx, id))\n+                    tcx.on_disk_cache.as_ref()?.try_load_query_result(tcx, id)\n                 }\n             }\n         };"}, {"sha": "669d7ea8d364114831a5943323ca6e7a17daabd7", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -414,10 +414,7 @@ impl DepNodeExt for DepNode {\n     /// has been removed.\n     fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.can_reconstruct_query_key() {\n-            tcx.queries\n-                .on_disk_cache\n-                .as_ref()?\n-                .def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into()))\n+            tcx.on_disk_cache.as_ref()?.def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into()))\n         } else {\n             None\n         }\n@@ -472,7 +469,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n         // we will use the old DefIndex as an initial guess for\n         // a lookup into the crate metadata.\n         if !self.is_local() {\n-            if let Some(cache) = &tcx.queries.on_disk_cache {\n+            if let Some(cache) = &tcx.on_disk_cache {\n                 cache.store_foreign_def_id_hash(*self, hash);\n             }\n         }"}, {"sha": "4746004cfca234d847d644936989e6903427e9ac", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type StableHashingContext = StableHashingContext<'tcx>;\n \n     fn register_reused_dep_node(&self, dep_node: &DepNode) {\n-        if let Some(cache) = self.queries.on_disk_cache.as_ref() {\n+        if let Some(cache) = self.on_disk_cache.as_ref() {\n             cache.register_reused_dep_node(*self, dep_node)\n         }\n     }\n@@ -185,15 +185,14 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     }\n \n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic> {\n-        self.queries\n-            .on_disk_cache\n+        self.on_disk_cache\n             .as_ref()\n             .map(|c| c.load_diagnostics(*self, prev_dep_node_index))\n             .unwrap_or_default()\n     }\n \n     fn store_diagnostics(&self, dep_node_index: DepNodeIndex, diagnostics: ThinVec<Diagnostic>) {\n-        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+        if let Some(c) = self.on_disk_cache.as_ref() {\n             c.store_diagnostics(dep_node_index, diagnostics)\n         }\n     }\n@@ -203,7 +202,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n         dep_node_index: DepNodeIndex,\n         diagnostics: ThinVec<Diagnostic>,\n     ) {\n-        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+        if let Some(c) = self.on_disk_cache.as_ref() {\n             c.store_diagnostics_for_anon_node(dep_node_index, diagnostics)\n         }\n     }"}, {"sha": "47b77bed9065fe7a706b8aef2870d3e7311ebbee", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -125,11 +125,6 @@ rustc_queries! {\n         desc { |tcx| \"computing generics of `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n         cache_on_disk_if { key.is_local() }\n-        load_cached(tcx, id) {\n-            let generics: Option<ty::Generics> = tcx.queries.on_disk_cache.as_ref()\n-                                                    .and_then(|c| c.try_load_query_result(tcx, id));\n-            generics\n-        }\n     }\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n@@ -702,7 +697,7 @@ rustc_queries! {\n         cache_on_disk_if { true }\n         load_cached(tcx, id) {\n             let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n-                .queries.on_disk_cache.as_ref()\n+                .on_disk_cache.as_ref()\n                 .and_then(|c| c.try_load_query_result(tcx, id));\n \n             typeck_results.map(|x| &*tcx.arena.alloc(x))"}, {"sha": "fa176193a93ee81d68bd31b06c8540c793835321", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -14,7 +14,7 @@ use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::traits;\n-use crate::ty::query::{self, TyCtxtAt};\n+use crate::ty::query::{self, OnDiskCache, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n use crate::ty::{\n@@ -962,6 +962,12 @@ pub struct GlobalCtxt<'tcx> {\n     pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n     pub(crate) definitions: &'tcx Definitions,\n \n+    /// This provides access to the incremental compilation on-disk cache for query results.\n+    /// Do not access this directly. It is only meant to be used by\n+    /// `DepGraph::try_mark_green()` and the query infrastructure.\n+    /// This is `None` if we are not incremental compilation mode\n+    pub(crate) on_disk_cache: Option<OnDiskCache<'tcx>>,\n+\n     pub queries: query::Queries<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,\n \n@@ -1110,7 +1116,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         krate: &'tcx hir::Crate<'tcx>,\n         definitions: &'tcx Definitions,\n         dep_graph: DepGraph,\n-        on_disk_query_result_cache: Option<query::OnDiskCache<'tcx>>,\n+        on_disk_cache: Option<query::OnDiskCache<'tcx>>,\n         crate_name: &str,\n         output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n@@ -1154,7 +1160,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n             definitions,\n-            queries: query::Queries::new(providers, extern_providers, on_disk_query_result_cache),\n+            on_disk_cache,\n+            queries: query::Queries::new(providers, extern_providers),\n             query_caches: query::QueryCaches::default(),\n             ty_rcache: Default::default(),\n             pred_rcache: Default::default(),\n@@ -1320,7 +1327,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn serialize_query_result_cache(self, encoder: &mut FileEncoder) -> FileEncodeResult {\n-        self.queries.on_disk_cache.as_ref().map_or(Ok(()), |c| c.serialize(self, encoder))\n+        self.on_disk_cache.as_ref().map_or(Ok(()), |c| c.serialize(self, encoder))\n     }\n \n     /// If `true`, we should use the MIR-based borrowck, but also"}, {"sha": "9f9f6bc4c514f920da4b83666851933e4fca65dc", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -918,7 +918,6 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n         Ok(d.tcx()\n-            .queries\n             .on_disk_cache\n             .as_ref()\n             .unwrap()"}, {"sha": "8eb060a39a501567af01e6a397c4f2a93ebb29b6", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab9b89221472d36fb5375d0c474c794706d2ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=dab9b89221472d36fb5375d0c474c794706d2ae8", "patch": "@@ -534,12 +534,6 @@ macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Queries<$tcx> {\n-            /// This provides access to the incremental compilation on-disk cache for query results.\n-            /// Do not access this directly. It is only meant to be used by\n-            /// `DepGraph::try_mark_green()` and the query infrastructure.\n-            /// This is `None` if we are not incremental compilation mode\n-            pub(crate) on_disk_cache: Option<OnDiskCache<'tcx>>,\n-\n             providers: IndexVec<CrateNum, Providers>,\n             fallback_extern_providers: Box<Providers>,\n \n@@ -554,12 +548,10 @@ macro_rules! define_queries_struct {\n             pub(crate) fn new(\n                 providers: IndexVec<CrateNum, Providers>,\n                 fallback_extern_providers: Providers,\n-                on_disk_cache: Option<OnDiskCache<'tcx>>,\n             ) -> Self {\n                 Queries {\n                     providers,\n                     fallback_extern_providers: Box::new(fallback_extern_providers),\n-                    on_disk_cache,\n                     $($name: Default::default()),*\n                 }\n             }"}]}