{"sha": "d595884302240f07576239288c771b0e9717fc19", "node_id": "C_kwDOAAsO6NoAKGQ1OTU4ODQzMDIyNDBmMDc1NzYyMzkyODhjNzcxYjBlOTcxN2ZjMTk", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-05T19:22:35Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-05T20:47:44Z"}, "message": "Move -Z maximal-hir-to-mir-coverage implementation to new `maybe_new_source_scope` method", "tree": {"sha": "ffd13bdff5633a1b84f12dcdcb241f4ef92cad00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd13bdff5633a1b84f12dcdcb241f4ef92cad00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d595884302240f07576239288c771b0e9717fc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d595884302240f07576239288c771b0e9717fc19", "html_url": "https://github.com/rust-lang/rust/commit/d595884302240f07576239288c771b0e9717fc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d595884302240f07576239288c771b0e9717fc19/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf7d88ef138957c998bb71e048c3e03a71661b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf7d88ef138957c998bb71e048c3e03a71661b5", "html_url": "https://github.com/rust-lang/rust/commit/3bf7d88ef138957c998bb71e048c3e03a71661b5"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "51df42f6d14e06a3ddfff7346d82fa3f14a85e06", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d595884302240f07576239288c771b0e9717fc19", "patch": "@@ -173,16 +173,6 @@ impl TyCtxt<'_> {\n     /// Walks upwards from `id` to find a node which might change lint levels with attributes.\n     /// It stops at `bound` and just returns it if reached.\n     pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {\n-        // Some consumers of rustc need to map MIR locations back to HIR nodes. Currently the\n-        // the only part of rustc that tracks MIR -> HIR is the `SourceScopeLocalData::lint_root`\n-        // field that tracks lint levels for MIR locations.  Normally the number of source scopes\n-        // is limited to the set of nodes with lint  annotations. The -Zmaximal-hir-to-mir-coverage\n-        // flag changes this behavior to maximize the number of source scopes, increasing the\n-        // granularity of the MIR->HIR mapping.\n-        if self.sess.opts.unstable_opts.maximal_hir_to_mir_coverage {\n-            return id;\n-        }\n-\n         let hir = self.hir();\n         loop {\n             if id == bound {"}, {"sha": "007f3b55ec8bb156b6c53c338fdfbbfacd3641f8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d595884302240f07576239288c771b0e9717fc19", "patch": "@@ -948,20 +948,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         original_source_scope: SourceScope,\n         pattern_span: Span,\n     ) {\n-        let tcx = self.tcx;\n-        let current_root = tcx.maybe_lint_level_root_bounded(arg_hir_id, self.hir_id);\n-        let parent_root = tcx.maybe_lint_level_root_bounded(\n-            self.source_scopes[original_source_scope]\n-                .local_data\n-                .as_ref()\n-                .assert_crate_local()\n-                .lint_root,\n-            self.hir_id,\n-        );\n-        if current_root != parent_root {\n-            self.source_scope =\n-                self.new_source_scope(pattern_span, LintLevel::Explicit(current_root), None);\n-        }\n+        let parent_id = self.source_scopes[original_source_scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n+        self.maybe_new_source_scope(pattern_span, None, arg_hir_id, parent_id);\n     }\n \n     fn get_unit_temp(&mut self) -> Place<'tcx> {"}, {"sha": "33f49ffdaf6403fd4ae06a43b763e86789ab567b", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d595884302240f07576239288c771b0e9717fc19/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=d595884302240f07576239288c771b0e9717fc19", "patch": "@@ -85,6 +85,7 @@ use std::mem;\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n@@ -567,25 +568,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,\n     {\n         let source_scope = self.source_scope;\n-        let tcx = self.tcx;\n         if let LintLevel::Explicit(current_hir_id) = lint_level {\n-            // Use `maybe_lint_level_root_bounded` with `root_lint_level` as a bound\n-            // to avoid adding Hir dependencies on our parents.\n-            // We estimate the true lint roots here to avoid creating a lot of source scopes.\n-\n-            let parent_root = tcx.maybe_lint_level_root_bounded(\n-                self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root,\n-                self.hir_id,\n-            );\n-            let current_root = tcx.maybe_lint_level_root_bounded(current_hir_id, self.hir_id);\n-\n-            if parent_root != current_root {\n-                self.source_scope = self.new_source_scope(\n-                    region_scope.1.span,\n-                    LintLevel::Explicit(current_root),\n-                    None,\n-                );\n-            }\n+            let parent_id =\n+                self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root;\n+            self.maybe_new_source_scope(region_scope.1.span, None, current_hir_id, parent_id);\n         }\n         self.push_scope(region_scope);\n         let mut block;\n@@ -758,6 +744,40 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         ))\n     }\n \n+    /// Possibly creates a new source scope if `current_root` and `parent_root`\n+    /// are different, or if -Zmaximal-hir-to-mir-coverage is enabled.\n+    pub(crate) fn maybe_new_source_scope(\n+        &mut self,\n+        span: Span,\n+        safety: Option<Safety>,\n+        current_id: HirId,\n+        parent_id: HirId,\n+    ) {\n+        let (current_root, parent_root) =\n+            if self.tcx.sess.opts.unstable_opts.maximal_hir_to_mir_coverage {\n+                // Some consumers of rustc need to map MIR locations back to HIR nodes. Currently the\n+                // the only part of rustc that tracks MIR -> HIR is the `SourceScopeLocalData::lint_root`\n+                // field that tracks lint levels for MIR locations.  Normally the number of source scopes\n+                // is limited to the set of nodes with lint annotations. The -Zmaximal-hir-to-mir-coverage\n+                // flag changes this behavior to maximize the number of source scopes, increasing the\n+                // granularity of the MIR->HIR mapping.\n+                (current_id, parent_id)\n+            } else {\n+                // Use `maybe_lint_level_root_bounded` with `self.hir_id` as a bound\n+                // to avoid adding Hir dependencies on our parents.\n+                // We estimate the true lint roots here to avoid creating a lot of source scopes.\n+                (\n+                    self.tcx.maybe_lint_level_root_bounded(current_id, self.hir_id),\n+                    self.tcx.maybe_lint_level_root_bounded(parent_id, self.hir_id),\n+                )\n+            };\n+\n+        if current_root != parent_root {\n+            let lint_level = LintLevel::Explicit(current_root);\n+            self.source_scope = self.new_source_scope(span, lint_level, safety);\n+        }\n+    }\n+\n     /// Creates a new source scope, nested in the current one.\n     pub(crate) fn new_source_scope(\n         &mut self,"}]}