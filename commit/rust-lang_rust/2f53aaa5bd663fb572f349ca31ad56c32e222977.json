{"sha": "2f53aaa5bd663fb572f349ca31ad56c32e222977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTNhYWE1YmQ2NjNmYjU3MmYzNDljYTMxYWQ1NmMzMmUyMjI5Nzc=", "commit": {"author": {"name": "Jay Kickliter", "email": "jay@kickliter.com", "date": "2018-09-18T23:54:01Z"}, "committer": {"name": "Jay Kickliter", "email": "jay@kickliter.com", "date": "2018-09-19T21:41:22Z"}, "message": "mem_replace: match on path.", "tree": {"sha": "55ca40c31236bccd7392cfec61fdd9b391716025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ca40c31236bccd7392cfec61fdd9b391716025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f53aaa5bd663fb572f349ca31ad56c32e222977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f53aaa5bd663fb572f349ca31ad56c32e222977", "html_url": "https://github.com/rust-lang/rust/commit/2f53aaa5bd663fb572f349ca31ad56c32e222977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f53aaa5bd663fb572f349ca31ad56c32e222977/comments", "author": {"login": "JayKickliter", "id": 2551201, "node_id": "MDQ6VXNlcjI1NTEyMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2551201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayKickliter", "html_url": "https://github.com/JayKickliter", "followers_url": "https://api.github.com/users/JayKickliter/followers", "following_url": "https://api.github.com/users/JayKickliter/following{/other_user}", "gists_url": "https://api.github.com/users/JayKickliter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayKickliter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayKickliter/subscriptions", "organizations_url": "https://api.github.com/users/JayKickliter/orgs", "repos_url": "https://api.github.com/users/JayKickliter/repos", "events_url": "https://api.github.com/users/JayKickliter/events{/privacy}", "received_events_url": "https://api.github.com/users/JayKickliter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JayKickliter", "id": 2551201, "node_id": "MDQ6VXNlcjI1NTEyMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2551201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayKickliter", "html_url": "https://github.com/JayKickliter", "followers_url": "https://api.github.com/users/JayKickliter/followers", "following_url": "https://api.github.com/users/JayKickliter/following{/other_user}", "gists_url": "https://api.github.com/users/JayKickliter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayKickliter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayKickliter/subscriptions", "organizations_url": "https://api.github.com/users/JayKickliter/orgs", "repos_url": "https://api.github.com/users/JayKickliter/repos", "events_url": "https://api.github.com/users/JayKickliter/events{/privacy}", "received_events_url": "https://api.github.com/users/JayKickliter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c7bc1e585d0be7f9fd191dc084cd30ee344385", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c7bc1e585d0be7f9fd191dc084cd30ee344385", "html_url": "https://github.com/rust-lang/rust/commit/12c7bc1e585d0be7f9fd191dc084cd30ee344385"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "22460ccb5ea5669ff7900199616c21ba99c2fe97", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f53aaa5bd663fb572f349ca31ad56c32e222977/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f53aaa5bd663fb572f349ca31ad56c32e222977/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=2f53aaa5bd663fb572f349ca31ad56c32e222977", "patch": "@@ -1,7 +1,7 @@\n use crate::rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::utils::{match_def_path, match_qpath, match_type, opt_def_id, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_def_path, match_qpath, opt_def_id, paths, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for `mem::replace()` on an `Option` with\n@@ -40,25 +40,42 @@ impl LintPass for MemReplace {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n+            // Check that `expr` is a call to `mem::replace()`\n             if let ExprKind::Call(ref func, ref func_args) = expr.node;\n             if func_args.len() == 2;\n             if let ExprKind::Path(ref func_qpath) = func.node;\n             if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n             if match_def_path(cx.tcx, def_id, &paths::MEM_REPLACE);\n-            if let ExprKind::AddrOf(MutMutable, ref replaced) = func_args[0].node;\n-            if match_type(cx, cx.tables.expr_ty(replaced), &paths::OPTION);\n+\n+            // Check that second argument is `Option::None`\n             if let ExprKind::Path(ref replacement_qpath) = func_args[1].node;\n             if match_qpath(replacement_qpath, &paths::OPTION_NONE);\n-            if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.node;\n+\n             then {\n-                let sugg = format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\"));\n+                // Since this is a late pass (already type-checked),\n+                // and we already know that the second argument is an\n+                // `Option`, we do not need to check if the first\n+                // argument's type. All that's left is to get\n+                // replacee's path.\n+                let replaced_path = match func_args[0].node {\n+                    ExprKind::AddrOf(MutMutable, ref replaced) => {\n+                        if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.node {\n+                            replaced_path\n+                        } else {\n+                            return\n+                        }\n+                    },\n+                    ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n+                    _ => return,\n+                };\n+\n                 span_lint_and_sugg(\n                     cx,\n                     MEM_REPLACE_OPTION_WITH_NONE,\n                     expr.span,\n                     \"replacing an `Option` with `None`\",\n                     \"consider `Option::take()` instead\",\n-                    sugg\n+                    format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\"))\n                 );\n             }\n         }"}, {"sha": "62df42ef2d290786d45a905cc64e49c3f20cdeb5", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f53aaa5bd663fb572f349ca31ad56c32e222977/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f53aaa5bd663fb572f349ca31ad56c32e222977/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=2f53aaa5bd663fb572f349ca31ad56c32e222977", "patch": "@@ -6,4 +6,6 @@ use std::mem;\n fn main() {\n     let mut an_option = Some(1);\n     let _ = mem::replace(&mut an_option, None);\n+    let an_option = &mut Some(1);\n+    let _ = mem::replace(an_option, None);\n }"}, {"sha": "8385fa3cb3c804438e3322cd29b09d762f3db21a", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f53aaa5bd663fb572f349ca31ad56c32e222977/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f53aaa5bd663fb572f349ca31ad56c32e222977/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=2f53aaa5bd663fb572f349ca31ad56c32e222977", "patch": "@@ -6,5 +6,11 @@ error: replacing an `Option` with `None`\n   |\n   = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: replacing an `Option` with `None`\n+  --> $DIR/mem_replace.rs:10:13\n+   |\n+10 |     let _ = mem::replace(an_option, None);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n+\n+error: aborting due to 2 previous errors\n "}]}