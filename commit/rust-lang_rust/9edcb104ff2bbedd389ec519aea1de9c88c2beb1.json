{"sha": "9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZGNiMTA0ZmYyYmJlZGQzODllYzUxOWFlYTFkZTljODhjMmJlYjE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-26T19:47:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:56Z"}, "message": "std: addressing #2656 (ipv6 support in net::tcp)\n\n.. there are some additional FIXME nags in net_tcp (L 1012) about blocking\nbecause libuv is holding unsafe ptrs to task local data. the proposed\nfix going is not really feasible w/ the current design, IMO, but i'll\nleave it there in case someone really wants to make the case without\ncreating more hassle than it's worth.", "tree": {"sha": "173c02072d90a961305fab063d017320783bb070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/173c02072d90a961305fab063d017320783bb070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "html_url": "https://github.com/rust-lang/rust/commit/9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e097ff6398bdf08a6f5f8d6abe2ad4521ab3d09a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e097ff6398bdf08a6f5f8d6abe2ad4521ab3d09a", "html_url": "https://github.com/rust-lang/rust/commit/e097ff6398bdf08a6f5f8d6abe2ad4521ab3d09a"}], "stats": {"total": 130, "additions": 88, "deletions": 42}, "files": [{"sha": "6087def66244618b08c75e88ee90bcf312b93014", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "patch": "@@ -230,7 +230,7 @@ mod v4 {\n     fn try_parse_addr(ip: str) -> result::result<ip_addr,parse_addr_err> {\n         unsafe {\n             let INADDR_NONE = ll::get_INADDR_NONE();\n-            let ip_rep_result = parse_to_ipv4_rep(ip); \n+            let ip_rep_result = parse_to_ipv4_rep(ip);\n             if result::is_err(ip_rep_result) {\n                 let err_str = result::get_err(ip_rep_result);\n                 ret result::err({err_msg: err_str})\n@@ -243,7 +243,7 @@ mod v4 {\n             let reformatted_name = uv_ip4_name(&new_addr);\n             log(debug, #fmt(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name));\n-            let ref_ip_rep_result = parse_to_ipv4_rep(reformatted_name); \n+            let ref_ip_rep_result = parse_to_ipv4_rep(reformatted_name);\n             if result::is_err(ref_ip_rep_result) {\n                 let err_str = result::get_err(ref_ip_rep_result);\n                 ret result::err({err_msg: err_str})"}, {"sha": "585307b82661b9a1adc9f0ed5a4b4823b372c736", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "patch": "@@ -164,16 +164,35 @@ fn connect(-input_ip: ip::ip_addr, port: uint,\n             alt input_ip {\n               ipv4 {\n                 log(debug, \"dealing w/ ipv4 connection..\");\n-                let tcp_addr = ipv4_ip_addr_to_sockaddr_in(input_ip,\n-                                                           port);\n-                let tcp_addr_ptr = ptr::addr_of(tcp_addr);\n                 let connect_req_ptr =\n                     ptr::addr_of((*socket_data_ptr).connect_req);\n-                alt uv::ll::tcp_connect(\n-                    connect_req_ptr,\n-                    stream_handle_ptr,\n-                    tcp_addr_ptr,\n-                    tcp_connect_on_connect_cb) {\n+                let addr_str = ip::format_addr(input_ip);\n+                let connect_result = alt input_ip {\n+                  ip::ipv4(addr) {\n+                    // have to \"recreate\" the sockaddr_in/6\n+                    // since the ip_addr discards the port\n+                    // info.. should probably add an additional\n+                    // rust type that actually is closer to\n+                    // what the libuv API expects (ip str + port num)\n+                    log(debug, #fmt(\"addr: %?\", addr));\n+                    let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n+                    uv::ll::tcp_connect(\n+                        connect_req_ptr,\n+                        stream_handle_ptr,\n+                        ptr::addr_of(in_addr),\n+                        tcp_connect_on_connect_cb)\n+                  }\n+                  ip::ipv6(addr) {\n+                    log(debug, #fmt(\"addr: %?\", addr));\n+                    let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n+                    uv::ll::tcp_connect6(\n+                        connect_req_ptr,\n+                        stream_handle_ptr,\n+                        ptr::addr_of(in_addr),\n+                        tcp_connect_on_connect_cb)\n+                  }\n+                };\n+                alt connect_result {\n                   0i32 {\n                     log(debug, \"tcp_connect successful\");\n                     // reusable data that we'll have for the\n@@ -598,15 +617,27 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n         // nested within a comm::listen block)\n         let loc_ip = copy(host_ip);\n         iotask::interact(iotask) {|loop_ptr|\n-            let tcp_addr = ipv4_ip_addr_to_sockaddr_in(loc_ip,\n-                                                       port);\n             alt uv::ll::tcp_init(loop_ptr, server_stream_ptr) {\n               0i32 {\n                 uv::ll::set_data_for_uv_handle(\n                     server_stream_ptr,\n                     server_data_ptr);\n-                alt uv::ll::tcp_bind(server_stream_ptr,\n-                                     ptr::addr_of(tcp_addr)) {\n+                let addr_str = ip::format_addr(loc_ip);\n+                let bind_result = alt loc_ip {\n+                  ip::ipv4(addr) {\n+                    log(debug, #fmt(\"addr: %?\", addr));\n+                    let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n+                    uv::ll::tcp_bind(server_stream_ptr,\n+                                     ptr::addr_of(in_addr))\n+                  }\n+                  ip::ipv6(addr) {\n+                    log(debug, #fmt(\"addr: %?\", addr));\n+                    let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n+                    uv::ll::tcp_bind6(server_stream_ptr,\n+                                     ptr::addr_of(in_addr))\n+                  }\n+                };\n+                alt bind_result {\n                   0i32 {\n                     alt uv::ll::listen(server_stream_ptr,\n                                        backlog as libc::c_int,\n@@ -1205,19 +1236,6 @@ type tcp_buffered_socket_data = {\n     mut buf: [u8]\n };\n \n-// convert rust ip_addr to libuv's native representation\n-fn ipv4_ip_addr_to_sockaddr_in(input_ip: ip::ip_addr,\n-                               port: uint) -> uv::ll::sockaddr_in unsafe {\n-    // FIXME (#2656): ipv6\n-    let addr_str = ip::format_addr(input_ip);\n-    alt input_ip {\n-      ip::ipv4(addr) {\n-        uv::ll::ip4_addr(addr_str, port as int)\n-      }\n-      _ { fail \"only works w/ ipv4\";}\n-    }\n-}\n-\n //#[cfg(test)]\n mod test {\n     // FIXME don't run on fbsd or linux 32 bit (#2064)"}, {"sha": "7921a84175a513f6f014705220d734240f62f400", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "patch": "@@ -542,6 +542,14 @@ native mod rustrt {\n     // FIXME ref #2064\n     fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t,\n                         ++addr: *sockaddr_in) -> libc::c_int;\n+    // FIXME ref #2064\n+    fn rust_uv_tcp_connect6(connect_ptr: *uv_connect_t,\n+                           tcp_handle_ptr: *uv_tcp_t,\n+                           ++after_cb: *u8,\n+                           ++addr: *sockaddr_in6) -> libc::c_int;\n+    // FIXME ref #2064\n+    fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n+                        ++addr: *sockaddr_in6) -> libc::c_int;\n     fn rust_uv_listen(stream: *libc::c_void, backlog: libc::c_int,\n                       cb: *u8) -> libc::c_int;\n     fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n@@ -651,11 +659,26 @@ unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                                     after_connect_cb, addr_ptr);\n }\n // FIXME ref #2064\n+unsafe fn tcp_connect6(connect_ptr: *uv_connect_t,\n+                      tcp_handle_ptr: *uv_tcp_t,\n+                      addr_ptr: *sockaddr_in6,\n+                      ++after_connect_cb: *u8)\n+-> libc::c_int {\n+    ret rustrt::rust_uv_tcp_connect6(connect_ptr, tcp_handle_ptr,\n+                                    after_connect_cb, addr_ptr);\n+}\n+// FIXME ref #2064\n unsafe fn tcp_bind(tcp_server_ptr: *uv_tcp_t,\n                    addr_ptr: *sockaddr_in) -> libc::c_int {\n     ret rustrt::rust_uv_tcp_bind(tcp_server_ptr,\n                                  addr_ptr);\n }\n+// FIXME ref #2064\n+unsafe fn tcp_bind6(tcp_server_ptr: *uv_tcp_t,\n+                   addr_ptr: *sockaddr_in6) -> libc::c_int {\n+    ret rustrt::rust_uv_tcp_bind6(tcp_server_ptr,\n+                                 addr_ptr);\n+}\n \n unsafe fn listen<T>(stream: *T, backlog: libc::c_int,\n                  cb: *u8) -> libc::c_int {"}, {"sha": "e47af4e10a3429191c6c0a3ba755501e64b65724", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "patch": "@@ -238,32 +238,36 @@ rust_uv_tcp_connect(uv_connect_t* connect_ptr,\n         uv_tcp_t* tcp_ptr,\n         uv_connect_cb cb,\n         sockaddr_in* addr_ptr) {\n-    rust_task* task = rust_get_current_task();\n-    LOG(task, stdlib, \"inside rust_uv_tcp_connect\");\n     // FIXME ref #2064\n     sockaddr_in addr = *addr_ptr;\n-    LOG(task, stdlib, \"before tcp_connect .. port: %d\",\n-        addr.sin_port);\n-    LOG(task, stdlib, \"before tcp_connect.. tcp stream:\" \\\n-        \"%lu cb ptr: %lu\",\n-        (unsigned long int)tcp_ptr, (unsigned long int)cb);\n     int result = uv_tcp_connect(connect_ptr, tcp_ptr, addr, cb);\n-    LOG(task, stdlib, \"leaving rust_uv_tcp_connect..\" \\\n-        \"and result: %d\",\n-            result);\n     return result;\n }\n \n extern \"C\" int\n rust_uv_tcp_bind(uv_tcp_t* tcp_server, sockaddr_in* addr_ptr) {\n     // FIXME ref #2064\n-    rust_task* task = rust_get_current_task();\n     sockaddr_in addr = *addr_ptr;\n-    LOG(task, stdlib, \"before uv_tcp_bind .. tcp_server:\" \\\n-        \"%lu port: %d\",\n-            (unsigned long int)tcp_server, addr.sin_port);\n     return uv_tcp_bind(tcp_server, addr);\n }\n+extern \"C\" int\n+rust_uv_tcp_connect6(uv_connect_t* connect_ptr,\n+        uv_tcp_t* tcp_ptr,\n+        uv_connect_cb cb,\n+        sockaddr_in6* addr_ptr) {\n+    // FIXME ref #2064\n+    sockaddr_in6 addr = *addr_ptr;\n+    int result = uv_tcp_connect6(connect_ptr, tcp_ptr, addr, cb);\n+    return result;\n+}\n+\n+extern \"C\" int\n+rust_uv_tcp_bind6\n+(uv_tcp_t* tcp_server, sockaddr_in6* addr_ptr) {\n+    // FIXME ref #2064\n+    sockaddr_in6 addr = *addr_ptr;\n+    return uv_tcp_bind6(tcp_server, addr);\n+}\n \n extern \"C\" int\n rust_uv_listen(uv_stream_t* stream, int backlog,\n@@ -328,7 +332,6 @@ extern \"C\" unsigned int\n rust_uv_helper_get_INADDR_NONE() {\n     return INADDR_NONE;\n }\n-\n extern \"C\" uv_stream_t*\n rust_uv_get_stream_handle_from_connect_req(uv_connect_t* connect) {\n     return connect->handle;"}, {"sha": "a218782dcbe63c096e47b06ddbb28322c0260bb2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/9edcb104ff2bbedd389ec519aea1de9c88c2beb1/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "patch": "@@ -116,6 +116,8 @@ rust_uv_ip6_addr\n rust_uv_ip6_name\n rust_uv_tcp_connect\n rust_uv_tcp_bind\n+rust_uv_tcp_connect6\n+rust_uv_tcp_bind6\n rust_uv_listen\n rust_uv_accept\n rust_uv_write"}]}