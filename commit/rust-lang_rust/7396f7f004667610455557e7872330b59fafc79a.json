{"sha": "7396f7f004667610455557e7872330b59fafc79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOTZmN2YwMDQ2Njc2MTA0NTU1NTdlNzg3MjMzMGI1OWZhZmM3OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T00:13:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T00:13:34Z"}, "message": "auto merge of #6432 : thomaslee/rust/issue-4202-02, r=catamorphism\n\nMy earlier fix for #4202 would not work correctly if the trait being exported was a top-level item relative to the module from which it was being exported. An example that would not work correctly with the original patch:\r\n\r\n    // foo.rs\r\n\r\n    pub use Foo = self::Bar;\r\n\r\n    pub trait Bar {\r\n      pub fn bar() -> Self;\r\n    }\r\n\r\n    impl Bar for int {\r\n      pub fn bar() -> int { 42 }\r\n    }\r\n\r\n    // bar.rs\r\n\r\n    fn main() {\r\n      foo::Foo::bar()\r\n    }\r\n\r\nThis is now supported.\r\n\r\nI believe this change will allow the GenericPath trait to be exported from core::path as Path in such a manner, which should allow #5389 to move forward.", "tree": {"sha": "3e20c14c516aaaca6c3cc03e63079d4146e1295e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e20c14c516aaaca6c3cc03e63079d4146e1295e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7396f7f004667610455557e7872330b59fafc79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7396f7f004667610455557e7872330b59fafc79a", "html_url": "https://github.com/rust-lang/rust/commit/7396f7f004667610455557e7872330b59fafc79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7396f7f004667610455557e7872330b59fafc79a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebdb0dee272829f2410edd51acdb12f20721ce42", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebdb0dee272829f2410edd51acdb12f20721ce42", "html_url": "https://github.com/rust-lang/rust/commit/ebdb0dee272829f2410edd51acdb12f20721ce42"}, {"sha": "e3a91f60c58d537945abc4c83b1b9f6ddcbe21fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a91f60c58d537945abc4c83b1b9f6ddcbe21fe", "html_url": "https://github.com/rust-lang/rust/commit/e3a91f60c58d537945abc4c83b1b9f6ddcbe21fe"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "460da5d60b33f9efcf5d86a9f48f9e952c7e63eb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7396f7f004667610455557e7872330b59fafc79a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7396f7f004667610455557e7872330b59fafc79a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7396f7f004667610455557e7872330b59fafc79a", "patch": "@@ -386,8 +386,20 @@ fn encode_reexported_static_methods(ecx: @EncodeContext,\n     match ecx.tcx.trait_methods_cache.find(&exp.def_id) {\n         Some(methods) => {\n             match ecx.tcx.items.find(&exp.def_id.node) {\n-                Some(&ast_map::node_item(_, path)) => {\n-                    if mod_path != *path {\n+                Some(&ast_map::node_item(item, path)) => {\n+                    let original_name = ecx.tcx.sess.str_of(item.ident);\n+\n+                    //\n+                    // We don't need to reexport static methods on traits\n+                    // declared in the same module as our `pub use ...` since\n+                    // that's done when we encode the trait item.\n+                    //\n+                    // The only exception is when the reexport *changes* the\n+                    // name e.g. `pub use Foo = self::Bar` -- we have\n+                    // encoded metadata for static methods relative to Bar,\n+                    // but not yet for Foo.\n+                    //\n+                    if mod_path != *path || *exp.name != *original_name {\n                         for methods.each |&m| {\n                             if m.explicit_self == ast::sty_static {\n                                 encode_reexported_static_method(ecx,"}, {"sha": "3591ff7931855c94a77a9b7a868481f391d35ead", "filename": "src/test/auxiliary/mod_trait_with_static_methods_lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7396f7f004667610455557e7872330b59fafc79a/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7396f7f004667610455557e7872330b59fafc79a/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs?ref=7396f7f004667610455557e7872330b59fafc79a", "patch": "@@ -9,6 +9,15 @@\n // except according to those terms.\n \n pub use sub_foo::Foo;\n+pub use Baz = self::Bar;\n+\n+pub trait Bar {\n+    pub fn bar() -> Self;\n+}\n+\n+impl Bar for int {\n+    pub fn bar() -> int { 84 }\n+}\n \n pub mod sub_foo {\n     pub trait Foo {\n@@ -18,4 +27,5 @@ pub mod sub_foo {\n     impl Foo for int {\n         pub fn foo() -> int { 42 }\n     }\n+\n }"}, {"sha": "4402881c43dddfe684a15fc771bf536bcae1c127", "filename": "src/test/run-pass/trait_with_static_methods_cross_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7396f7f004667610455557e7872330b59fafc79a/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7396f7f004667610455557e7872330b59fafc79a/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs?ref=7396f7f004667610455557e7872330b59fafc79a", "patch": "@@ -13,7 +13,9 @@\n extern mod mod_trait_with_static_methods_lib;\n \n use mod_trait_with_static_methods_lib::Foo;\n+use mod_trait_with_static_methods_lib::Baz;\n \n pub fn main() {\n     assert_eq!(42, Foo::foo());\n+    assert_eq!(84, Baz::bar());\n }"}]}