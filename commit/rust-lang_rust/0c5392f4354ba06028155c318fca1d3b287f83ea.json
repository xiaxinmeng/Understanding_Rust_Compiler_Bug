{"sha": "0c5392f4354ba06028155c318fca1d3b287f83ea", "node_id": "C_kwDOAAsO6NoAKDBjNTM5MmY0MzU0YmEwNjAyODE1NWMzMThmY2ExZDNiMjg3ZjgzZWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T17:28:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T18:35:17Z"}, "message": "now test-cargo-miri will actually work even without a hot cache :D", "tree": {"sha": "2780eb92b4767a7c8e9261b805a561c5935369fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2780eb92b4767a7c8e9261b805a561c5935369fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5392f4354ba06028155c318fca1d3b287f83ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5392f4354ba06028155c318fca1d3b287f83ea", "html_url": "https://github.com/rust-lang/rust/commit/0c5392f4354ba06028155c318fca1d3b287f83ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5392f4354ba06028155c318fca1d3b287f83ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0398da7d74ec7bf16e4f48a900036aecfd714c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0398da7d74ec7bf16e4f48a900036aecfd714c", "html_url": "https://github.com/rust-lang/rust/commit/6c0398da7d74ec7bf16e4f48a900036aecfd714c"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "4c0b9e41d3bfa2ca910081df1c41d377ce390540", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c5392f4354ba06028155c318fca1d3b287f83ea/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5392f4354ba06028155c318fca1d3b287f83ea/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=0c5392f4354ba06028155c318fca1d3b287f83ea", "patch": "@@ -510,7 +510,9 @@ path = \"lib.rs\"\n         if only_setup {\n             show_error(format!(\"failed to run xargo, see error details above\"))\n         } else {\n-            show_error(format!(\"failed to run xargo; run `cargo miri setup` to see the error details\"))\n+            show_error(format!(\n+                \"failed to run xargo; run `cargo miri setup` to see the error details\"\n+            ))\n         }\n     }\n     if !only_setup {"}, {"sha": "7bd131405bd501a3c6edbc16406c75c4212ae55b", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c5392f4354ba06028155c318fca1d3b287f83ea/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c5392f4354ba06028155c318fca1d3b287f83ea/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=0c5392f4354ba06028155c318fca1d3b287f83ea", "patch": "@@ -21,6 +21,7 @@ function run_tests {\n     echo \"Testing host architecture\"\n   fi\n \n+  ## ui test suite\n   ./miri test --locked\n   if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with optimizations (`-O` is what cargo passes, but crank MIR\n@@ -30,15 +31,13 @@ function run_tests {\n     MIRIFLAGS=\"-O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test --locked -- tests/{pass,panic}\n   fi\n \n+  ## test-cargo-miri\n   # On Windows, there is always \"python\", not \"python3\" or \"python2\".\n   if command -v python3 > /dev/null; then\n     PYTHON=python3\n   else\n     PYTHON=python\n   fi\n-\n-  # \"miri test\" has built the sysroot for us, now this should pass without\n-  # any interactive questions.\n   ${PYTHON} test-cargo-miri/run-test.py\n   echo\n "}, {"sha": "3805bd19777f733c1f05ddd5253d80ed14c5ee56", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c5392f4354ba06028155c318fca1d3b287f83ea/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/0c5392f4354ba06028155c318fca1d3b287f83ea/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=0c5392f4354ba06028155c318fca1d3b287f83ea", "patch": "@@ -25,7 +25,12 @@ def cargo_miri(cmd, quiet = True):\n \n def normalize_stdout(str):\n     str = str.replace(\"src\\\\\", \"src/\") # normalize paths across platforms\n-    return re.sub(\"finished in \\d+\\.\\d\\ds\", \"finished in $TIME\", str)\n+    str = re.sub(\"finished in \\d+\\.\\d\\ds\", \"finished in $TIME\", str) # the time keeps changing, obviously\n+    return str\n+\n+def normalize_stderr(str):\n+    str = str.replace(\"Preparing a sysroot for Miri... done\\n\", \"\") # remove leading cargo-miri setup output\n+    return str\n \n def check_output(actual, path, name):\n     expected = open(path).read()\n@@ -51,9 +56,8 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n         env=p_env,\n     )\n     (stdout, stderr) = p.communicate(input=stdin)\n-    stdout = stdout.decode(\"UTF-8\")\n-    stderr = stderr.decode(\"UTF-8\")\n-    stdout = normalize_stdout(stdout)\n+    stdout = normalize_stdout(stdout.decode(\"UTF-8\"))\n+    stderr = normalize_stderr(stderr.decode(\"UTF-8\"))\n \n     stdout_matches = check_output(stdout, stdout_ref, \"stdout\")\n     stderr_matches = check_output(stderr, stderr_ref, \"stderr\")\n@@ -175,10 +179,6 @@ def test_cargo_miri_test():\n target_str = \" for target {}\".format(os.environ['MIRI_TEST_TARGET']) if 'MIRI_TEST_TARGET' in os.environ else \"\"\n print(CGREEN + CBOLD + \"## Running `cargo miri` tests{}\".format(target_str) + CEND)\n \n-if not 'MIRI_SYSROOT' in os.environ:\n-    # Make sure we got a working sysroot.\n-    # (If the sysroot gets built later when output is compared, that leads to test failures.)\n-    subprocess.run(cargo_miri(\"setup\"), check=True)\n test_cargo_miri_run()\n test_cargo_miri_test()\n # Ensure we did not create anything outside the expected target dir."}]}