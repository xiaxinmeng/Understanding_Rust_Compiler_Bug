{"sha": "d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTk0OGM2ZDM2NDcyZWU3ZjBkN2NkMmZhMDg1ZjI5NmEzNWViNzY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-12-09T21:38:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T21:38:12Z"}, "message": "Rollup merge of #79732 - matthiaskrgr:cl12ppy, r=Dylan-DPC\n\nminor stylistic clippy cleanups\n\nsimplify if let Some(_) = x  to  if x.is_some()  (clippy::redundant_pattern_matching)\ndon't create owned values for comparison (clippy::cmp_owned)\nuse .contains() or .any() instead of find(x).is_some() (clippy::search_is_some)\ndon't wrap code block in Ok()  (clipppy::unit_arg)", "tree": {"sha": "4d1ba57e9c9198781db9eb67345078420e0b5346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1ba57e9c9198781db9eb67345078420e0b5346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0UPECRBK7hj4Ov3rIwAAdHIIAJIYvccgSPHHTVPQW45LADpW\nflVuTPTL96tcoZxFGBR6eele2qrjEsHf10V5lybJWVJC9wKJEDVfcsIT8hYLzlHA\nF+kMUK+ixtk8DUloUAWlWjbrws5DT/6AAU0GgBksN1NI3gknFKPzkVQuDq9I42fg\nYfqrZPOBWkzQjz+rVe+FmO123Tm+ETux9JcbNuq9jOE2KBamvukUDFQIgqJSwNpF\nvjRHQf+L1Kjsfcx0r/wOeCxHbj1pFIACOEZ8uvvygZJWj/cDS0aEQncWxArhW5U+\n6ZvXo20qula5IMS4Pdgz8thHZKSzxHiXL4/1VSwigC2aFFhFubqYni5/GLeLAhY=\n=Difd\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d1ba57e9c9198781db9eb67345078420e0b5346\nparent c16d52db7778fba1c8b6c07b06510cfd6c32ae4f\nparent 20f8538d1fb52a7e92e1bd7c731d213ad393eec8\nauthor Tyler Mandry <tmandry@gmail.com> 1607549892 -0800\ncommitter GitHub <noreply@github.com> 1607549892 -0800\n\nRollup merge of #79732 - matthiaskrgr:cl12ppy, r=Dylan-DPC\n\nminor stylistic clippy cleanups\n\nsimplify if let Some(_) = x  to  if x.is_some()  (clippy::redundant_pattern_matching)\ndon't create owned values for comparison (clippy::cmp_owned)\nuse .contains() or .any() instead of find(x).is_some() (clippy::search_is_some)\ndon't wrap code block in Ok()  (clipppy::unit_arg)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "html_url": "https://github.com/rust-lang/rust/commit/d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "html_url": "https://github.com/rust-lang/rust/commit/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f"}, {"sha": "20f8538d1fb52a7e92e1bd7c731d213ad393eec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f8538d1fb52a7e92e1bd7c731d213ad393eec8", "html_url": "https://github.com/rust-lang/rust/commit/20f8538d1fb52a7e92e1bd7c731d213ad393eec8"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "cdd68d83f22b14fb2a2eacb57ed5886cef6daade", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                 (Some(ret_span), _) => {\n                     let sup_future = self.future_return_type(scope_def_id_sup);\n-                    let (return_type, action) = if let Some(_) = sup_future {\n+                    let (return_type, action) = if sup_future.is_some() {\n                         (\"returned future\", \"held across an await point\")\n                     } else {\n                         (\"return type\", \"returned\")\n@@ -140,7 +140,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 }\n                 (_, Some(ret_span)) => {\n                     let sub_future = self.future_return_type(scope_def_id_sub);\n-                    let (return_type, action) = if let Some(_) = sub_future {\n+                    let (return_type, action) = if sub_future.is_some() {\n                         (\"returned future\", \"held across an await point\")\n                     } else {\n                         (\"return type\", \"returned\")"}, {"sha": "6d61b86f32ef90155f131c86331cb7c0f1af1a70", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "patch": "@@ -131,7 +131,7 @@ impl NonCamelCaseTypes {\n                 let cc = to_camel_case(name);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Lowercase Letter\".\n-                if name.to_string() != cc {\n+                if *name != cc {\n                     err.span_suggestion(\n                         ident.span,\n                         \"convert the identifier to upper camel case\",\n@@ -271,7 +271,7 @@ impl NonSnakeCase {\n                 let mut err = lint.build(&msg);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Uppercase Letter\".\n-                if name.to_string() != sc {\n+                if *name != sc {\n                     // We have a valid span in almost all cases, but we don't have one when linting a crate\n                     // name provided via the command line.\n                     if !ident.span.is_dummy() {\n@@ -455,7 +455,7 @@ impl NonUpperCaseGlobals {\n                     lint.build(&format!(\"{} `{}` should have an upper case name\", sort, name));\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Lowercase Letter\".\n-                if name.to_string() != uc {\n+                if *name != uc {\n                     err.span_suggestion(\n                         ident.span,\n                         \"convert the identifier to upper case\","}, {"sha": "6211cf8a9da858839483385e094333a79931a83f", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "patch": "@@ -445,7 +445,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             \"highlight_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n             type_name, needle_fr\n         );\n-        if type_name.find(&format!(\"'{}\", counter)).is_some() {\n+        if type_name.contains(&format!(\"'{}\", counter)) {\n             // Only add a label if we can confirm that a region was labelled.\n             RegionNameHighlight::CannotMatchHirTy(span, type_name)\n         } else {"}, {"sha": "2d4484c562c40db77f9a715800d9fc31de0f9690", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "patch": "@@ -198,7 +198,7 @@ simply delete the `pre-commit` file from .git/hooks.\"\n         };\n     };\n \n-    Ok(if should_install {\n+    if should_install {\n         let src = src_path.join(\"src\").join(\"etc\").join(\"pre-commit.sh\");\n         let git = t!(Command::new(\"git\").args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(\n             |output| {\n@@ -217,5 +217,6 @@ simply delete the `pre-commit` file from .git/hooks.\"\n         };\n     } else {\n         println!(\"Ok, skipping installation!\");\n-    })\n+    }\n+    Ok(())\n }"}, {"sha": "bdbb90837c7cd7403332c2d8d7024b640c1b3b98", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95948c6d36472ee7f0d7cd2fa085f296a35eb76/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d95948c6d36472ee7f0d7cd2fa085f296a35eb76", "patch": "@@ -391,7 +391,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n                 _,\n             ))) => {\n                 debug!(\"saw end of shortcut link to {}\", dest);\n-                if self.links.iter().find(|&link| *link.href == **dest).is_some() {\n+                if self.links.iter().any(|link| *link.href == **dest) {\n                     assert!(self.shortcut_link.is_some(), \"saw closing link without opening tag\");\n                     self.shortcut_link = None;\n                 }"}]}