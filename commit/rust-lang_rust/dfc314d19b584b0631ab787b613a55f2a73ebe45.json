{"sha": "dfc314d19b584b0631ab787b613a55f2a73ebe45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYzMxNGQxOWI1ODRiMDYzMWFiNzg3YjYxM2E1NWYyYTczZWJlNDU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-10T11:42:00Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-10T11:42:00Z"}, "message": "Use lifetime elision", "tree": {"sha": "2241ceba79df957774b6fe69f25cffd9ce625f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2241ceba79df957774b6fe69f25cffd9ce625f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc314d19b584b0631ab787b613a55f2a73ebe45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc314d19b584b0631ab787b613a55f2a73ebe45", "html_url": "https://github.com/rust-lang/rust/commit/dfc314d19b584b0631ab787b613a55f2a73ebe45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc314d19b584b0631ab787b613a55f2a73ebe45/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791003ad3c014c1ca12a29d35b4f8530aa4b7b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/791003ad3c014c1ca12a29d35b4f8530aa4b7b76", "html_url": "https://github.com/rust-lang/rust/commit/791003ad3c014c1ca12a29d35b4f8530aa4b7b76"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "571f950643792012d4b37a5a6c56a243aa8c7487", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=dfc314d19b584b0631ab787b613a55f2a73ebe45", "patch": "@@ -67,7 +67,7 @@ pub trait AttrMetaMethods {\n     /// containing a string, otherwise None.\n     fn value_str(&self) -> Option<InternedString>;\n     /// Gets a list of inner meta items from a list MetaItem type.\n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [P<MetaItem>]>;\n+    fn meta_item_list(&self) -> Option<&[P<MetaItem>]>;\n \n     fn span(&self) -> Span;\n }\n@@ -84,7 +84,7 @@ impl AttrMetaMethods for Attribute {\n     fn value_str(&self) -> Option<InternedString> {\n         self.meta().value_str()\n     }\n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [P<MetaItem>]> {\n+    fn meta_item_list(&self) -> Option<&[P<MetaItem>]> {\n         self.node.value.meta_item_list()\n     }\n     fn span(&self) -> Span { self.meta().span }\n@@ -111,7 +111,7 @@ impl AttrMetaMethods for MetaItem {\n         }\n     }\n \n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [P<MetaItem>]> {\n+    fn meta_item_list(&self) -> Option<&[P<MetaItem>]> {\n         match self.node {\n             MetaList(_, ref l) => Some(&l[..]),\n             _ => None\n@@ -124,22 +124,22 @@ impl AttrMetaMethods for MetaItem {\n impl AttrMetaMethods for P<MetaItem> {\n     fn name(&self) -> InternedString { (**self).name() }\n     fn value_str(&self) -> Option<InternedString> { (**self).value_str() }\n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [P<MetaItem>]> {\n+    fn meta_item_list(&self) -> Option<&[P<MetaItem>]> {\n         (**self).meta_item_list()\n     }\n     fn span(&self) -> Span { (**self).span() }\n }\n \n \n pub trait AttributeMethods {\n-    fn meta<'a>(&'a self) -> &'a MetaItem;\n+    fn meta(&self) -> &MetaItem;\n     fn with_desugared_doc<T, F>(&self, f: F) -> T where\n         F: FnOnce(&Attribute) -> T;\n }\n \n impl AttributeMethods for Attribute {\n     /// Extract the MetaItem from inside this Attribute.\n-    fn meta<'a>(&'a self) -> &'a MetaItem {\n+    fn meta(&self) -> &MetaItem {\n         &*self.node.value\n     }\n "}, {"sha": "3f925c9d7bae699af3076a72f63d11f528565f9f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dfc314d19b584b0631ab787b613a55f2a73ebe45", "patch": "@@ -881,7 +881,7 @@ impl SyntaxEnv {\n         self.chain.pop();\n     }\n \n-    fn find_escape_frame<'a>(&'a mut self) -> &'a mut MapChainFrame {\n+    fn find_escape_frame(&mut self) -> &mut MapChainFrame {\n         for (i, frame) in self.chain.iter_mut().enumerate().rev() {\n             if !frame.info.macros_escape || i == 0 {\n                 return frame\n@@ -904,7 +904,7 @@ impl SyntaxEnv {\n         self.find_escape_frame().map.insert(k, Rc::new(v));\n     }\n \n-    pub fn info<'a>(&'a mut self) -> &'a mut BlockInfo {\n+    pub fn info(&mut self) -> &mut BlockInfo {\n         let last_chain_index = self.chain.len() - 1;\n         &mut self.chain[last_chain_index].info\n     }"}, {"sha": "9d53cb969269fa992b79bb499716ce49cbed3751", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc314d19b584b0631ab787b613a55f2a73ebe45/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=dfc314d19b584b0631ab787b613a55f2a73ebe45", "patch": "@@ -58,7 +58,7 @@ impl<T> SmallVector<T> {\n         SmallVector { repr: Many(vs) }\n     }\n \n-    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n+    pub fn as_slice(&self) -> &[T] {\n         match self.repr {\n             Zero => {\n                 let result: &[T] = &[];\n@@ -105,7 +105,7 @@ impl<T> SmallVector<T> {\n         }\n     }\n \n-    pub fn get<'a>(&'a self, idx: usize) -> &'a T {\n+    pub fn get(&self, idx: usize) -> &T {\n         match self.repr {\n             One(ref v) if idx == 0 => v,\n             Many(ref vs) => &vs[idx],"}]}