{"sha": "32da2305880765a4c76180086959a2d5da131565", "node_id": "C_kwDOAAsO6NoAKDMyZGEyMzA1ODgwNzY1YTRjNzYxODAwODY5NTlhMmQ1ZGExMzE1NjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T16:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T16:37:36Z"}, "message": "Auto merge of #105531 - matthiaskrgr:rollup-7y7zbgl, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #104460 (Migrate parts of `rustc_expand` to session diagnostics)\n - #105192 (Point at LHS on binop type err if relevant)\n - #105234 (Remove unneeded field from `SwitchTargets`)\n - #105239 (Avoid heap allocation when truncating thread names)\n - #105410 (Consider `parent_count` for const param defaults)\n - #105482 (Fix invalid codegen during debuginfo lowering)\n\nFailed merges:\n\n - #105411 (Introduce `with_forced_trimmed_paths`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e7e308e24979d511dcff466951bcfa6acec44348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e308e24979d511dcff466951bcfa6acec44348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32da2305880765a4c76180086959a2d5da131565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32da2305880765a4c76180086959a2d5da131565", "html_url": "https://github.com/rust-lang/rust/commit/32da2305880765a4c76180086959a2d5da131565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32da2305880765a4c76180086959a2d5da131565/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a161a7b654083a881b22908a475988bcc3221a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/a161a7b654083a881b22908a475988bcc3221a79", "html_url": "https://github.com/rust-lang/rust/commit/a161a7b654083a881b22908a475988bcc3221a79"}, {"sha": "ab505298ea4cf338403eeaa94c4458b5ad9530db", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab505298ea4cf338403eeaa94c4458b5ad9530db", "html_url": "https://github.com/rust-lang/rust/commit/ab505298ea4cf338403eeaa94c4458b5ad9530db"}], "stats": {"total": 2557, "additions": 1704, "deletions": 853}, "files": [{"sha": "6fd9290058c36383e1a5c155de33f467701ee93d", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -106,7 +106,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n         self.check_activations(location);\n \n         match &terminator.kind {\n-            TerminatorKind::SwitchInt { discr, switch_ty: _, targets: _ } => {\n+            TerminatorKind::SwitchInt { discr, targets: _ } => {\n                 self.consume_operand(location, discr);\n             }\n             TerminatorKind::Drop { place: drop_place, target: _, unwind: _ } => {"}, {"sha": "5289de9b0abf2ffa3d0d2d142904b392070dc2d9", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -644,7 +644,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n         self.check_activations(loc, span, flow_state);\n \n         match &term.kind {\n-            TerminatorKind::SwitchInt { discr, switch_ty: _, targets: _ } => {\n+            TerminatorKind::SwitchInt { discr, targets: _ } => {\n                 self.consume_operand(loc, (discr, span), flow_state);\n             }\n             TerminatorKind::Drop { place, target: _, unwind: _ } => {"}, {"sha": "814bc275019ca0109e4e3d265406630f2cf07398", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1360,25 +1360,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            TerminatorKind::SwitchInt { discr, switch_ty, .. } => {\n+            TerminatorKind::SwitchInt { discr, .. } => {\n                 self.check_operand(discr, term_location);\n \n-                let discr_ty = discr.ty(body, tcx);\n-                if let Err(terr) = self.sub_types(\n-                    discr_ty,\n-                    *switch_ty,\n-                    term_location.to_locations(),\n-                    ConstraintCategory::Assignment,\n-                ) {\n-                    span_mirbug!(\n-                        self,\n-                        term,\n-                        \"bad SwitchInt ({:?} on {:?}): {:?}\",\n-                        switch_ty,\n-                        discr_ty,\n-                        terr\n-                    );\n-                }\n+                let switch_ty = discr.ty(body, tcx);\n                 if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {\n                     span_mirbug!(self, term, \"bad SwitchInt discr ty {:?}\", switch_ty);\n                 }"}, {"sha": "9ae65c641fd624bb82aeeea2f05db155ac3ce7af", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -11,7 +11,7 @@ pub fn expand_concat(\n     sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n-    let Some(es) = base::get_exprs_from_tts(cx, sp, tts) else {\n+    let Some(es) = base::get_exprs_from_tts(cx, tts) else {\n         return DummyResult::any(sp);\n     };\n     let mut accumulator = String::new();"}, {"sha": "70ce5a6c41929ebc87afe228579426766ee46daf", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -137,7 +137,7 @@ pub fn expand_concat_bytes(\n     sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n-    let Some(es) = base::get_exprs_from_tts(cx, sp, tts) else {\n+    let Some(es) = base::get_exprs_from_tts(cx, tts) else {\n         return DummyResult::any(sp);\n     };\n     let mut accumulator = Vec::new();"}, {"sha": "a7283ea601b19e4c20a846beb76663562001da0f", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -52,7 +52,7 @@ pub fn expand_env<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n-    let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n+    let mut exprs = match get_exprs_from_tts(cx, tts) {\n         Some(exprs) if exprs.is_empty() => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n             return DummyResult::any(sp);"}, {"sha": "06813d7ec953f558a44eec3eb059723167e45131", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -372,8 +372,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 }\n             }\n \n-            TerminatorKind::SwitchInt { discr, switch_ty, targets } => {\n-                let discr = codegen_operand(fx, discr).load_scalar(fx);\n+            TerminatorKind::SwitchInt { discr, targets } => {\n+                let discr = codegen_operand(fx, discr);\n+                let switch_ty = discr.layout().ty;\n+                let discr = discr.load_scalar(fx);\n \n                 let use_bool_opt = switch_ty.kind() == fx.tcx.types.bool.kind()\n                     || (targets.iter().count() == 1 && targets.iter().next().unwrap().0 == 0);"}, {"sha": "f3f5ddb52d6a4a29117ee3ad4be87ccd99e4c763", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -307,12 +307,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper: TerminatorCodegenHelper<'tcx>,\n         bx: &mut Bx,\n         discr: &mir::Operand<'tcx>,\n-        switch_ty: Ty<'tcx>,\n         targets: &SwitchTargets,\n     ) {\n         let discr = self.codegen_operand(bx, &discr);\n-        // `switch_ty` is redundant, sanity-check that.\n-        assert_eq!(discr.layout.ty, switch_ty);\n+        let switch_ty = discr.layout.ty;\n         let mut target_iter = targets.iter();\n         if target_iter.len() == 1 {\n             // If there are two targets (one conditional, one fallback), emit `br` instead of\n@@ -1293,8 +1291,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 helper.funclet_br(self, bx, target, mergeable_succ())\n             }\n \n-            mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref targets } => {\n-                self.codegen_switchint_terminator(helper, bx, discr, switch_ty, targets);\n+            mir::TerminatorKind::SwitchInt { ref discr, ref targets } => {\n+                self.codegen_switchint_terminator(helper, bx, discr, targets);\n                 MergingSucc::False\n             }\n "}, {"sha": "b7982b633f57fa8b38b93983d078358152820d68", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 107, "deletions": 29, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -3,12 +3,12 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::Abi;\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Abi, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -76,6 +76,106 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n     }\n }\n \n+trait DebugInfoOffsetLocation<'tcx, Bx> {\n+    fn deref(&self, bx: &mut Bx) -> Self;\n+    fn layout(&self) -> TyAndLayout<'tcx>;\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self;\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n+}\n+\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for PlaceRef<'tcx, Bx::Value>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.load_operand(*self).deref(bx.cx())\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        PlaceRef::project_field(*self, bx, field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.project_downcast(bx, variant)\n+    }\n+}\n+\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for TyAndLayout<'tcx>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.cx().layout_of(\n+            self.ty.builtin_deref(true).unwrap_or_else(|| bug!(\"cannot deref `{}`\", self.ty)).ty,\n+        )\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        *self\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        self.field(bx.cx(), field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.for_variant(bx.cx(), variant)\n+    }\n+}\n+\n+struct DebugInfoOffset<T> {\n+    /// Offset from the `base` used to calculate the debuginfo offset.\n+    direct_offset: Size,\n+    /// Each offset in this vector indicates one level of indirection from the base or previous\n+    /// indirect offset plus a dereference.\n+    indirect_offsets: Vec<Size>,\n+    /// The final location debuginfo should point to.\n+    result: T,\n+}\n+\n+fn calculate_debuginfo_offset<\n+    'a,\n+    'tcx,\n+    Bx: BuilderMethods<'a, 'tcx>,\n+    L: DebugInfoOffsetLocation<'tcx, Bx>,\n+>(\n+    bx: &mut Bx,\n+    local: mir::Local,\n+    var: &PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n+    base: L,\n+) -> DebugInfoOffset<L> {\n+    let mut direct_offset = Size::ZERO;\n+    // FIXME(eddyb) use smallvec here.\n+    let mut indirect_offsets = vec![];\n+    let mut place = base;\n+\n+    for elem in &var.projection[..] {\n+        match *elem {\n+            mir::ProjectionElem::Deref => {\n+                indirect_offsets.push(Size::ZERO);\n+                place = place.deref(bx);\n+            }\n+            mir::ProjectionElem::Field(field, _) => {\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                *offset += place.layout().fields.offset(field.index());\n+                place = place.project_field(bx, field);\n+            }\n+            mir::ProjectionElem::Downcast(_, variant) => {\n+                place = place.downcast(bx, variant);\n+            }\n+            _ => span_bug!(\n+                var.source_info.span,\n+                \"unsupported var debuginfo place `{:?}`\",\n+                mir::Place { local, projection: var.projection },\n+            ),\n+        }\n+    }\n+\n+    DebugInfoOffset { direct_offset, indirect_offsets, result: place }\n+}\n+\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         bx.set_span(source_info.span);\n@@ -262,33 +362,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let Some(dbg_var) = var.dbg_var else { continue };\n             let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n \n-            let mut direct_offset = Size::ZERO;\n-            // FIXME(eddyb) use smallvec here.\n-            let mut indirect_offsets = vec![];\n-            let mut place = base;\n-\n-            for elem in &var.projection[..] {\n-                match *elem {\n-                    mir::ProjectionElem::Deref => {\n-                        indirect_offsets.push(Size::ZERO);\n-                        place = bx.load_operand(place).deref(bx.cx());\n-                    }\n-                    mir::ProjectionElem::Field(field, _) => {\n-                        let i = field.index();\n-                        let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n-                        *offset += place.layout.fields.offset(i);\n-                        place = place.project_field(bx, i);\n-                    }\n-                    mir::ProjectionElem::Downcast(_, variant) => {\n-                        place = place.project_downcast(bx, variant);\n-                    }\n-                    _ => span_bug!(\n-                        var.source_info.span,\n-                        \"unsupported var debuginfo place `{:?}`\",\n-                        mir::Place { local, projection: var.projection },\n-                    ),\n-                }\n-            }\n+            let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n+                calculate_debuginfo_offset(bx, local, &var, base.layout);\n \n             // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n             // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n@@ -306,6 +381,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n \n             if should_create_individual_allocas {\n+                let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n+                    calculate_debuginfo_offset(bx, local, &var, base);\n+\n                 // Create a variable which will be a pointer to the actual value\n                 let ptr_ty = bx.tcx().mk_ty(ty::RawPtr(ty::TypeAndMut {\n                     mutbl: mir::Mutability::Mut,"}, {"sha": "0e7ffcdffc97aae54f0b020282f3b61aa9dfa701", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -29,10 +29,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Goto { target } => self.go_to_block(target),\n \n-            SwitchInt { ref discr, ref targets, switch_ty } => {\n+            SwitchInt { ref discr, ref targets } => {\n                 let discr = self.read_immediate(&self.eval_operand(discr, None)?)?;\n                 trace!(\"SwitchInt({:?})\", *discr);\n-                assert_eq!(discr.layout.ty, switch_ty);\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets.otherwise();"}, {"sha": "64318f5f54d5d061c255726f800e9251d631933b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -686,17 +686,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             TerminatorKind::Goto { target } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n             }\n-            TerminatorKind::SwitchInt { targets, switch_ty, discr } => {\n-                let ty = discr.ty(&self.body.local_decls, self.tcx);\n-                if ty != *switch_ty {\n-                    self.fail(\n-                        location,\n-                        format!(\n-                            \"encountered `SwitchInt` terminator with type mismatch: {:?} != {:?}\",\n-                            ty, switch_ty,\n-                        ),\n-                    );\n-                }\n+            TerminatorKind::SwitchInt { targets, discr } => {\n+                let switch_ty = discr.ty(&self.body.local_decls, self.tcx);\n \n                 let target_width = self.tcx.sess.target.pointer_width;\n "}, {"sha": "df0e8ae5dd8f5d11bb0577d502ef388e44d132e3", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -20,3 +20,110 @@ expand_var_still_repeating =\n     variable '{$ident}' is still repeating at this depth\n \n expand_meta_var_dif_seq_matchers = {$msg}\n+\n+expand_macro_const_stability =\n+    macros cannot have const stability attributes\n+    .label = invalid const stability attribute\n+    .label2 = const stability attribute affects this macro\n+\n+expand_macro_body_stability =\n+    macros cannot have body stability attributes\n+    .label = invalid body stability attribute\n+    .label2 = body stability attribute affects this macro\n+\n+expand_resolve_relative_path =\n+    cannot resolve relative path in non-file source `{$path}`\n+\n+expand_attr_no_arguments =\n+    attribute must have either one or two arguments\n+\n+expand_not_a_meta_item =\n+    not a meta item\n+\n+expand_only_one_word =\n+    must only be one word\n+\n+expand_cannot_be_name_of_macro =\n+    `{$trait_ident}` cannot be a name of {$macro_type} macro\n+\n+expand_arg_not_attributes =\n+    second argument must be `attributes`\n+\n+expand_attributes_wrong_form =\n+    attribute must be of form: `attributes(foo, bar)`\n+\n+expand_attribute_meta_item =\n+    attribute must be a meta item, not a literal\n+\n+expand_attribute_single_word =\n+    attribute must only be a single word\n+\n+expand_helper_attribute_name_invalid =\n+    `{$name}` cannot be a name of derive helper attribute\n+\n+expand_expected_comma_in_list =\n+    expected token: `,`\n+\n+expand_only_one_argument =\n+    {$name} takes 1 argument\n+\n+expand_takes_no_arguments =\n+    {$name} takes no arguments\n+\n+expand_feature_included_in_edition =\n+    the feature `{$feature}` is included in the Rust {$edition} edition\n+\n+expand_feature_removed =\n+    feature has been removed\n+    .label = feature has been removed\n+    .reason = {$reason}\n+\n+expand_feature_not_allowed =\n+    the feature `{$name}` is not in the list of allowed features\n+\n+expand_recursion_limit_reached =\n+    recursion limit reached while expanding `{$descr}`\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+expand_malformed_feature_attribute =\n+    malformed `feature` attribute input\n+    .expected = expected just one word\n+\n+expand_remove_expr_not_supported =\n+    removing an expression is not supported in this position\n+\n+expand_invalid_cfg_no_parens = `cfg` is not followed by parentheses\n+expand_invalid_cfg_no_predicate = `cfg` predicate is not specified\n+expand_invalid_cfg_multiple_predicates = multiple `cfg` predicates are specified\n+expand_invalid_cfg_predicate_literal = `cfg` predicate key cannot be a literal\n+expand_invalid_cfg_expected_syntax = expected syntax is\n+\n+expand_wrong_fragment_kind =\n+    non-{$kind} macro in {$kind} position: {$name}\n+\n+expand_unsupported_key_value =\n+    key-value macro attributes are not supported\n+\n+expand_incomplete_parse =\n+    macro expansion ignores token `{$token}` and any following\n+    .label = caused by the macro expansion here\n+    .note = the usage of `{$macro_path}!` is likely invalid in {$kind_name} context\n+    .suggestion_add_semi = you might be missing a semicolon here\n+\n+expand_remove_node_not_supported =\n+    removing {$descr} is not supported in this position\n+\n+expand_module_circular =\n+    circular modules: {$modules}\n+\n+expand_module_in_block =\n+    cannot declare a non-inline module inside a block unless it has a path attribute\n+    .note = maybe `use` the module `{$name}` instead of redeclaring it\n+\n+expand_module_file_not_found =\n+    file not found for module `{$name}`\n+    .help = to create the module `{$name}`, create file \"{$default_path}\" or \"{$secondary_path}\"\n+\n+expand_module_multiple_candidates =\n+    file for module `{$name}` found at both \"{$default_path}\" and \"{$secondary_path}\"\n+    .help = delete or rename one of them to remove the ambiguity"}, {"sha": "cb39e997436e065948694c1536d35ac1737f3b04", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -152,6 +152,12 @@ impl IntoDiagnosticArg for ast::Path {\n     }\n }\n \n+impl IntoDiagnosticArg for &ast::Path {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(self)))\n+    }\n+}\n+\n impl IntoDiagnosticArg for ast::token::Token {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(pprust::token_to_string(&self))"}, {"sha": "6f159663e80cfffd37e1be7866b7bdca8d78a694", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 39, "deletions": 51, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,3 +1,11 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+\n+use crate::errors::{\n+    ArgumentNotAttributes, AttrNoArguments, AttributeMetaItem, AttributeSingleWord,\n+    AttributesWrongForm, CannotBeNameOfMacro, ExpectedCommaInList, HelperAttributeNameInvalid,\n+    MacroBodyStability, MacroConstStability, NotAMetaItem, OnlyOneArgument, OnlyOneWord,\n+    ResolveRelativePath, TakesNoArguments,\n+};\n use crate::expand::{self, AstFragment, Invocation};\n use crate::module::DirOwnership;\n \n@@ -789,26 +797,16 @@ impl SyntaxExtension {\n             .unwrap_or_else(|| (None, helper_attrs));\n         let (stability, const_stability, body_stability) = attr::find_stability(&sess, attrs, span);\n         if let Some((_, sp)) = const_stability {\n-            sess.parse_sess\n-                .span_diagnostic\n-                .struct_span_err(sp, \"macros cannot have const stability attributes\")\n-                .span_label(sp, \"invalid const stability attribute\")\n-                .span_label(\n-                    sess.source_map().guess_head_span(span),\n-                    \"const stability attribute affects this macro\",\n-                )\n-                .emit();\n+            sess.emit_err(MacroConstStability {\n+                span: sp,\n+                head_span: sess.source_map().guess_head_span(span),\n+            });\n         }\n         if let Some((_, sp)) = body_stability {\n-            sess.parse_sess\n-                .span_diagnostic\n-                .struct_span_err(sp, \"macros cannot have body stability attributes\")\n-                .span_label(sp, \"invalid body stability attribute\")\n-                .span_label(\n-                    sess.source_map().guess_head_span(span),\n-                    \"body stability attribute affects this macro\",\n-                )\n-                .emit();\n+            sess.emit_err(MacroBodyStability {\n+                span: sp,\n+                head_span: sess.source_map().guess_head_span(span),\n+            });\n         }\n \n         SyntaxExtension {\n@@ -1200,13 +1198,11 @@ pub fn resolve_path(\n                 .expect(\"attempting to resolve a file path in an external file\"),\n             FileName::DocTest(path, _) => path,\n             other => {\n-                return Err(parse_sess.span_diagnostic.struct_span_err(\n+                return Err(ResolveRelativePath {\n                     span,\n-                    &format!(\n-                        \"cannot resolve relative path in non-file source `{}`\",\n-                        parse_sess.source_map().filename_for_diagnostics(&other)\n-                    ),\n-                ));\n+                    path: parse_sess.source_map().filename_for_diagnostics(&other).to_string(),\n+                }\n+                .into_diagnostic(&parse_sess.span_diagnostic));\n             }\n         };\n         result.pop();\n@@ -1222,6 +1218,8 @@ pub fn resolve_path(\n /// The returned bool indicates whether an applicable suggestion has already been\n /// added to the diagnostic to avoid emitting multiple suggestions. `Err(None)`\n /// indicates that an ast error was encountered.\n+// FIXME(Nilstrieb) Make this function setup translatable\n+#[allow(rustc::untranslatable_diagnostic)]\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n@@ -1280,9 +1278,9 @@ pub fn expr_to_string(\n /// compilation should call\n /// `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\n /// done as rarely as possible).\n-pub fn check_zero_tts(cx: &ExtCtxt<'_>, sp: Span, tts: TokenStream, name: &str) {\n+pub fn check_zero_tts(cx: &ExtCtxt<'_>, span: Span, tts: TokenStream, name: &str) {\n     if !tts.is_empty() {\n-        cx.span_err(sp, &format!(\"{} takes no arguments\", name));\n+        cx.emit_err(TakesNoArguments { span, name });\n     }\n }\n \n@@ -1304,31 +1302,27 @@ pub fn parse_expr(p: &mut parser::Parser<'_>) -> Option<P<ast::Expr>> {\n /// expect exactly one string literal, or emit an error and return `None`.\n pub fn get_single_str_from_tts(\n     cx: &mut ExtCtxt<'_>,\n-    sp: Span,\n+    span: Span,\n     tts: TokenStream,\n     name: &str,\n ) -> Option<Symbol> {\n     let mut p = cx.new_parser_from_tts(tts);\n     if p.token == token::Eof {\n-        cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n+        cx.emit_err(OnlyOneArgument { span, name });\n         return None;\n     }\n     let ret = parse_expr(&mut p)?;\n     let _ = p.eat(&token::Comma);\n \n     if p.token != token::Eof {\n-        cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n+        cx.emit_err(OnlyOneArgument { span, name });\n     }\n     expr_to_string(cx, ret, \"argument must be a string literal\").map(|(s, _)| s)\n }\n \n /// Extracts comma-separated expressions from `tts`.\n /// On error, emit it, and return `None`.\n-pub fn get_exprs_from_tts(\n-    cx: &mut ExtCtxt<'_>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> Option<Vec<P<ast::Expr>>> {\n+pub fn get_exprs_from_tts(cx: &mut ExtCtxt<'_>, tts: TokenStream) -> Option<Vec<P<ast::Expr>>> {\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {\n@@ -1343,7 +1337,7 @@ pub fn get_exprs_from_tts(\n             continue;\n         }\n         if p.token != token::Eof {\n-            cx.span_err(sp, \"expected token: `,`\");\n+            cx.emit_err(ExpectedCommaInList { span: p.token.span });\n             return None;\n         }\n     }\n@@ -1353,64 +1347,58 @@ pub fn get_exprs_from_tts(\n pub fn parse_macro_name_and_helper_attrs(\n     diag: &rustc_errors::Handler,\n     attr: &Attribute,\n-    descr: &str,\n+    macro_type: &str,\n ) -> Option<(Symbol, Vec<Symbol>)> {\n     // Once we've located the `#[proc_macro_derive]` attribute, verify\n     // that it's of the form `#[proc_macro_derive(Foo)]` or\n     // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n     let list = attr.meta_item_list()?;\n     if list.len() != 1 && list.len() != 2 {\n-        diag.span_err(attr.span, \"attribute must have either one or two arguments\");\n+        diag.emit_err(AttrNoArguments { span: attr.span });\n         return None;\n     }\n     let Some(trait_attr) = list[0].meta_item() else {\n-        diag.span_err(list[0].span(), \"not a meta item\");\n+        diag.emit_err(NotAMetaItem {span: list[0].span()});\n         return None;\n     };\n     let trait_ident = match trait_attr.ident() {\n         Some(trait_ident) if trait_attr.is_word() => trait_ident,\n         _ => {\n-            diag.span_err(trait_attr.span, \"must only be one word\");\n+            diag.emit_err(OnlyOneWord { span: trait_attr.span });\n             return None;\n         }\n     };\n \n     if !trait_ident.name.can_be_raw() {\n-        diag.span_err(\n-            trait_attr.span,\n-            &format!(\"`{}` cannot be a name of {} macro\", trait_ident, descr),\n-        );\n+        diag.emit_err(CannotBeNameOfMacro { span: trait_attr.span, trait_ident, macro_type });\n     }\n \n     let attributes_attr = list.get(1);\n     let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n         if !attr.has_name(sym::attributes) {\n-            diag.span_err(attr.span(), \"second argument must be `attributes`\");\n+            diag.emit_err(ArgumentNotAttributes { span: attr.span() });\n         }\n         attr.meta_item_list()\n             .unwrap_or_else(|| {\n-                diag.span_err(attr.span(), \"attribute must be of form: `attributes(foo, bar)`\");\n+                diag.emit_err(AttributesWrongForm { span: attr.span() });\n                 &[]\n             })\n             .iter()\n             .filter_map(|attr| {\n                 let Some(attr) = attr.meta_item() else {\n-                    diag.span_err(attr.span(), \"not a meta item\");\n+                    diag.emit_err(AttributeMetaItem { span: attr.span() });\n                     return None;\n                 };\n \n                 let ident = match attr.ident() {\n                     Some(ident) if attr.is_word() => ident,\n                     _ => {\n-                        diag.span_err(attr.span, \"must only be one word\");\n+                        diag.emit_err(AttributeSingleWord { span: attr.span });\n                         return None;\n                     }\n                 };\n                 if !ident.name.can_be_raw() {\n-                    diag.span_err(\n-                        attr.span,\n-                        &format!(\"`{}` cannot be a name of derive helper attribute\", ident),\n-                    );\n+                    diag.emit_err(HelperAttributeNameInvalid { span: attr.span, name: ident });\n                 }\n \n                 Some(ident.name)"}, {"sha": "f4c6f3386ade23ce244e629ce715ce72a37d83e7", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 47, "deletions": 59, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,5 +1,9 @@\n //! Conditional compilation stripping.\n \n+use crate::errors::{\n+    FeatureIncludedInEdition, FeatureNotAllowed, FeatureRemoved, FeatureRemovedReason, InvalidCfg,\n+    MalformedFeatureAttribute, MalformedFeatureAttributeHelp, RemoveExprNotSupported,\n+};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::{AttrTokenStream, AttrTokenTree};\n@@ -10,7 +14,6 @@ use rustc_ast::{self as ast, AttrStyle, Attribute, HasAttrs, HasTokens, MetaItem\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::map_in_place::MapInPlace;\n-use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n@@ -33,18 +36,12 @@ pub struct StripUnconfigured<'a> {\n     pub lint_node_id: NodeId,\n }\n \n-fn get_features(\n-    sess: &Session,\n-    span_handler: &Handler,\n-    krate_attrs: &[ast::Attribute],\n-) -> Features {\n-    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n-        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n-        err.span_label(span, \"feature has been removed\");\n-        if let Some(reason) = reason {\n-            err.note(reason);\n-        }\n-        err.emit();\n+fn get_features(sess: &Session, krate_attrs: &[ast::Attribute]) -> Features {\n+    fn feature_removed(sess: &Session, span: Span, reason: Option<&str>) {\n+        sess.emit_err(FeatureRemoved {\n+            span,\n+            reason: reason.map(|reason| FeatureRemovedReason { reason }),\n+        });\n     }\n \n     fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {\n@@ -117,34 +114,34 @@ fn get_features(\n             continue;\n         };\n \n-        let bad_input = |span| {\n-            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n-        };\n-\n         for mi in list {\n             let name = match mi.ident() {\n                 Some(ident) if mi.is_word() => ident.name,\n                 Some(ident) => {\n-                    bad_input(mi.span())\n-                        .span_suggestion(\n-                            mi.span(),\n-                            \"expected just one word\",\n-                            ident.name,\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n+                    sess.emit_err(MalformedFeatureAttribute {\n+                        span: mi.span(),\n+                        help: MalformedFeatureAttributeHelp::Suggestion {\n+                            span: mi.span(),\n+                            suggestion: ident.name,\n+                        },\n+                    });\n                     continue;\n                 }\n                 None => {\n-                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n+                    sess.emit_err(MalformedFeatureAttribute {\n+                        span: mi.span(),\n+                        help: MalformedFeatureAttributeHelp::Label { span: mi.span() },\n+                    });\n                     continue;\n                 }\n             };\n \n-            if let Some(edition) = edition_enabled_features.get(&name) {\n-                let msg =\n-                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n-                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n+            if let Some(&edition) = edition_enabled_features.get(&name) {\n+                sess.emit_warning(FeatureIncludedInEdition {\n+                    span: mi.span(),\n+                    feature: name,\n+                    edition,\n+                });\n                 continue;\n             }\n \n@@ -159,7 +156,7 @@ fn get_features(\n                 if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =\n                     state\n                 {\n-                    feature_removed(span_handler, mi.span(), *reason);\n+                    feature_removed(sess, mi.span(), *reason);\n                     continue;\n                 }\n             }\n@@ -173,14 +170,7 @@ fn get_features(\n \n             if let Some(allowed) = sess.opts.unstable_opts.allow_features.as_ref() {\n                 if allowed.iter().all(|f| name.as_str() != f) {\n-                    struct_span_err!(\n-                        span_handler,\n-                        mi.span(),\n-                        E0725,\n-                        \"the feature `{}` is not in the list of allowed features\",\n-                        name\n-                    )\n-                    .emit();\n+                    sess.emit_err(FeatureNotAllowed { span: mi.span(), name });\n                     continue;\n                 }\n             }\n@@ -221,7 +211,7 @@ pub fn features(\n         }\n         Some(attrs) => {\n             krate.attrs = attrs;\n-            let features = get_features(sess, diag, &krate.attrs);\n+            let features = get_features(sess, &krate.attrs);\n             if err_count == diag.err_count() {\n                 // Avoid reconfiguring malformed `cfg_attr`s.\n                 strip_unconfigured.features = Some(&features);\n@@ -503,8 +493,7 @@ impl<'a> StripUnconfigured<'a> {\n         // N.B., this is intentionally not part of the visit_expr() function\n         //     in order for filter_map_expr() to be able to avoid this check\n         if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(*a)) {\n-            let msg = \"removing an expression is not supported in this position\";\n-            self.sess.parse_sess.span_diagnostic.span_err(attr.span, msg);\n+            self.sess.emit_err(RemoveExprNotSupported { span: attr.span });\n         }\n \n         self.process_cfg_attrs(expr);\n@@ -513,27 +502,26 @@ impl<'a> StripUnconfigured<'a> {\n }\n \n pub fn parse_cfg<'a>(meta_item: &'a MetaItem, sess: &Session) -> Option<&'a MetaItem> {\n-    let error = |span, msg, suggestion: &str| {\n-        let mut err = sess.parse_sess.span_diagnostic.struct_span_err(span, msg);\n-        if !suggestion.is_empty() {\n-            err.span_suggestion(\n-                span,\n-                \"expected syntax is\",\n-                suggestion,\n-                Applicability::HasPlaceholders,\n-            );\n-        }\n-        err.emit();\n-        None\n-    };\n     let span = meta_item.span;\n     match meta_item.meta_item_list() {\n-        None => error(span, \"`cfg` is not followed by parentheses\", \"cfg(/* predicate */)\"),\n-        Some([]) => error(span, \"`cfg` predicate is not specified\", \"\"),\n-        Some([_, .., l]) => error(l.span(), \"multiple `cfg` predicates are specified\", \"\"),\n+        None => {\n+            sess.emit_err(InvalidCfg::NotFollowedByParens { span });\n+            None\n+        }\n+        Some([]) => {\n+            sess.emit_err(InvalidCfg::NoPredicate { span });\n+            None\n+        }\n+        Some([_, .., l]) => {\n+            sess.emit_err(InvalidCfg::MultiplePredicates { span: l.span() });\n+            None\n+        }\n         Some([single]) => match single.meta_item() {\n             Some(meta_item) => Some(meta_item),\n-            None => error(single.span(), \"`cfg` predicate key cannot be a literal\", \"\"),\n+            None => {\n+                sess.emit_err(InvalidCfg::PredicateLiteral { span: single.span() });\n+                None\n+            }\n         },\n     }\n }"}, {"sha": "afe5169d3f5c0b616754ddf8ac7fa80ebd12b894", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 324, "deletions": 2, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,6 +1,10 @@\n+use rustc_ast::ast;\n use rustc_macros::Diagnostic;\n-use rustc_span::symbol::MacroRulesNormalizedIdent;\n-use rustc_span::Span;\n+use rustc_session::Limit;\n+use rustc_span::edition::Edition;\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent};\n+use rustc_span::{Span, Symbol};\n+use std::borrow::Cow;\n \n #[derive(Diagnostic)]\n #[diag(expand_expr_repeat_no_syntax_vars)]\n@@ -46,3 +50,321 @@ pub(crate) struct MetaVarsDifSeqMatchers {\n     pub span: Span,\n     pub msg: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_resolve_relative_path)]\n+pub(crate) struct ResolveRelativePath {\n+    #[primary_span]\n+    pub span: Span,\n+    pub path: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_macro_const_stability)]\n+pub(crate) struct MacroConstStability {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(label2)]\n+    pub head_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_macro_body_stability)]\n+pub(crate) struct MacroBodyStability {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(label2)]\n+    pub head_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_attr_no_arguments)]\n+pub(crate) struct AttrNoArguments {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_not_a_meta_item)]\n+pub(crate) struct NotAMetaItem {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_only_one_word)]\n+pub(crate) struct OnlyOneWord {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_cannot_be_name_of_macro)]\n+pub(crate) struct CannotBeNameOfMacro<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_ident: Ident,\n+    pub macro_type: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_arg_not_attributes)]\n+pub(crate) struct ArgumentNotAttributes {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_attributes_wrong_form)]\n+pub(crate) struct AttributesWrongForm {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_attribute_meta_item)]\n+pub(crate) struct AttributeMetaItem {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_attribute_single_word)]\n+pub(crate) struct AttributeSingleWord {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_helper_attribute_name_invalid)]\n+pub(crate) struct HelperAttributeNameInvalid {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Ident,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_expected_comma_in_list)]\n+pub(crate) struct ExpectedCommaInList {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_only_one_argument)]\n+pub(crate) struct OnlyOneArgument<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_takes_no_arguments)]\n+pub(crate) struct TakesNoArguments<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_feature_included_in_edition, code = \"E0705\")]\n+pub(crate) struct FeatureIncludedInEdition {\n+    #[primary_span]\n+    pub span: Span,\n+    pub feature: Symbol,\n+    pub edition: Edition,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_feature_removed, code = \"E0557\")]\n+pub(crate) struct FeatureRemoved<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub reason: Option<FeatureRemovedReason<'a>>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(reason)]\n+pub(crate) struct FeatureRemovedReason<'a> {\n+    pub reason: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_feature_not_allowed, code = \"E0725\")]\n+pub(crate) struct FeatureNotAllowed {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_recursion_limit_reached)]\n+#[help]\n+pub(crate) struct RecursionLimitReached<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub descr: String,\n+    pub suggested_limit: Limit,\n+    pub crate_name: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_malformed_feature_attribute, code = \"E0556\")]\n+pub(crate) struct MalformedFeatureAttribute {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub help: MalformedFeatureAttributeHelp,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum MalformedFeatureAttributeHelp {\n+    #[label(expected)]\n+    Label {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[suggestion(expected, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    Suggestion {\n+        #[primary_span]\n+        span: Span,\n+        suggestion: Symbol,\n+    },\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_remove_expr_not_supported)]\n+pub(crate) struct RemoveExprNotSupported {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum InvalidCfg {\n+    #[diag(expand_invalid_cfg_no_parens)]\n+    NotFollowedByParens {\n+        #[primary_span]\n+        #[suggestion(\n+            expand_invalid_cfg_expected_syntax,\n+            code = \"cfg(/* predicate */)\",\n+            applicability = \"has-placeholders\"\n+        )]\n+        span: Span,\n+    },\n+    #[diag(expand_invalid_cfg_no_predicate)]\n+    NoPredicate {\n+        #[primary_span]\n+        #[suggestion(\n+            expand_invalid_cfg_expected_syntax,\n+            code = \"cfg(/* predicate */)\",\n+            applicability = \"has-placeholders\"\n+        )]\n+        span: Span,\n+    },\n+    #[diag(expand_invalid_cfg_multiple_predicates)]\n+    MultiplePredicates {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[diag(expand_invalid_cfg_predicate_literal)]\n+    PredicateLiteral {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_wrong_fragment_kind)]\n+pub(crate) struct WrongFragmentKind<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: &'a str,\n+    pub name: &'a ast::Path,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_unsupported_key_value)]\n+pub(crate) struct UnsupportedKeyValue {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_incomplete_parse)]\n+#[note]\n+pub(crate) struct IncompleteParse<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub token: Cow<'a, str>,\n+    #[label]\n+    pub label_span: Span,\n+    pub macro_path: &'a ast::Path,\n+    pub kind_name: &'a str,\n+\n+    #[suggestion(\n+        suggestion_add_semi,\n+        style = \"verbose\",\n+        code = \";\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    pub add_semicolon: Option<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_remove_node_not_supported)]\n+pub(crate) struct RemoveNodeNotSupported {\n+    #[primary_span]\n+    pub span: Span,\n+    pub descr: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_module_circular)]\n+pub(crate) struct ModuleCircular {\n+    #[primary_span]\n+    pub span: Span,\n+    pub modules: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_module_in_block)]\n+pub(crate) struct ModuleInBlock {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub name: Option<ModuleInBlockName>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(note)]\n+pub(crate) struct ModuleInBlockName {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Ident,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_module_file_not_found, code = \"E0583\")]\n+#[help]\n+pub(crate) struct ModuleFileNotFound {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Ident,\n+    pub default_path: String,\n+    pub secondary_path: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_module_multiple_candidates, code = \"E0761\")]\n+#[help]\n+pub(crate) struct ModuleMultipleCandidates {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Ident,\n+    pub default_path: String,\n+    pub secondary_path: String,\n+}"}, {"sha": "e26c16dcd7ee7784e4597cddbb6f073c9ea56657", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 37, "deletions": 49, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,5 +1,9 @@\n use crate::base::*;\n use crate::config::StripUnconfigured;\n+use crate::errors::{\n+    IncompleteParse, RecursionLimitReached, RemoveExprNotSupported, RemoveNodeNotSupported,\n+    UnsupportedKeyValue, WrongFragmentKind,\n+};\n use crate::hygiene::SyntaxContext;\n use crate::mbe::diagnostics::annotate_err_with_kind;\n use crate::module::{mod_dir_path, parse_external_mod, DirOwnership, ParsedExternalMod};\n@@ -18,7 +22,7 @@ use rustc_ast::{NestedMetaItem, NodeId, PatKind, StmtKind, TyKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::PResult;\n use rustc_feature::Features;\n use rustc_parse::parser::{\n     AttemptLocalParseRecovery, CommaRecoveryMode, ForceCollect, Parser, RecoverColon, RecoverComma,\n@@ -606,29 +610,22 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Limit(0) => Limit(2),\n             limit => limit * 2,\n         };\n-        self.cx\n-            .struct_span_err(\n-                expn_data.call_site,\n-                &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n-            )\n-            .help(&format!(\n-                \"consider increasing the recursion limit by adding a \\\n-                 `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n-                suggested_limit, self.cx.ecfg.crate_name,\n-            ))\n-            .emit();\n+\n+        self.cx.emit_err(RecursionLimitReached {\n+            span: expn_data.call_site,\n+            descr: expn_data.kind.descr(),\n+            suggested_limit,\n+            crate_name: &self.cx.ecfg.crate_name,\n+        });\n+\n         self.cx.trace_macros_diag();\n     }\n \n     /// A macro's expansion does not fit in this fragment kind.\n     /// For example, a non-type macro in a type position.\n     fn error_wrong_fragment_kind(&mut self, kind: AstFragmentKind, mac: &ast::MacCall, span: Span) {\n-        let msg = format!(\n-            \"non-{kind} macro in {kind} position: {path}\",\n-            kind = kind.name(),\n-            path = pprust::path_to_string(&mac.path),\n-        );\n-        self.cx.span_err(span, &msg);\n+        self.cx.emit_err(WrongFragmentKind { span, kind: kind.name(), name: &mac.path });\n+\n         self.cx.trace_macros_diag();\n     }\n \n@@ -707,7 +704,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     };\n                     let attr_item = attr.unwrap_normal_item();\n                     if let AttrArgs::Eq(..) = attr_item.args {\n-                        self.cx.span_err(span, \"key-value macro attributes are not supported\");\n+                        self.cx.emit_err(UnsupportedKeyValue { span });\n                     }\n                     let inner_tokens = attr_item.args.inner_tokens();\n                     let Ok(tok_result) = expander.expand(self.cx, span, inner_tokens, tokens) else {\n@@ -729,9 +726,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                 }\n                             };\n                             if fragment_kind == AstFragmentKind::Expr && items.is_empty() {\n-                                let msg =\n-                                    \"removing an expression is not supported in this position\";\n-                                self.cx.span_err(span, msg);\n+                                self.cx.emit_err(RemoveExprNotSupported { span });\n                                 fragment_kind.dummy(span)\n                             } else {\n                                 fragment_kind.expect_from_annotatables(items)\n@@ -939,38 +934,32 @@ pub fn parse_ast_fragment<'a>(\n }\n \n pub fn ensure_complete_parse<'a>(\n-    this: &mut Parser<'a>,\n+    parser: &mut Parser<'a>,\n     macro_path: &ast::Path,\n     kind_name: &str,\n     span: Span,\n ) {\n-    if this.token != token::Eof {\n-        let token = pprust::token_to_string(&this.token);\n-        let msg = format!(\"macro expansion ignores token `{}` and any following\", token);\n+    if parser.token != token::Eof {\n+        let token = pprust::token_to_string(&parser.token);\n         // Avoid emitting backtrace info twice.\n-        let def_site_span = this.token.span.with_ctxt(SyntaxContext::root());\n-        let mut err = this.struct_span_err(def_site_span, &msg);\n-        err.span_label(span, \"caused by the macro expansion here\");\n-        let msg = format!(\n-            \"the usage of `{}!` is likely invalid in {} context\",\n-            pprust::path_to_string(macro_path),\n-            kind_name,\n-        );\n-        err.note(&msg);\n+        let def_site_span = parser.token.span.with_ctxt(SyntaxContext::root());\n \n-        let semi_span = this.sess.source_map().next_point(span);\n-        match this.sess.source_map().span_to_snippet(semi_span) {\n+        let semi_span = parser.sess.source_map().next_point(span);\n+        let add_semicolon = match parser.sess.source_map().span_to_snippet(semi_span) {\n             Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n-                err.span_suggestion(\n-                    span.shrink_to_hi(),\n-                    \"you might be missing a semicolon here\",\n-                    \";\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+                Some(span.shrink_to_hi())\n             }\n-            _ => {}\n-        }\n-        err.emit();\n+            _ => None,\n+        };\n+\n+        parser.sess.emit_err(IncompleteParse {\n+            span: def_site_span,\n+            token,\n+            label_span: span,\n+            macro_path,\n+            kind_name,\n+            add_semicolon,\n+        });\n     }\n }\n \n@@ -1766,9 +1755,8 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         if self.expand_cfg_true(node, attr, pos) {\n                             continue;\n                         }\n-                        let msg =\n-                            format!(\"removing {} is not supported in this position\", Node::descr());\n-                        self.cx.span_err(span, &msg);\n+\n+                        self.cx.emit_err(RemoveNodeNotSupported { span, descr: Node::descr() });\n                         continue;\n                     }\n                     sym::cfg_attr => {"}, {"sha": "897268566358a5b0fae9d68c08e4c6655a3e57b5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -10,6 +10,7 @@\n #![feature(rustc_attrs)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -31,8 +32,13 @@ pub mod config;\n pub mod errors;\n pub mod expand;\n pub mod module;\n+\n+// FIXME(Nilstrieb) Translate proc_macro diagnostics\n+#[allow(rustc::untranslatable_diagnostic)]\n pub mod proc_macro;\n \n+// FIXME(Nilstrieb) Translate macro_rules diagnostics\n+#[allow(rustc::untranslatable_diagnostic)]\n pub(crate) mod mbe;\n \n // HACK(Centril, #64197): These shouldn't really be here."}, {"sha": "07f47a9c3a4f2c80f9097d22e55b2581440f5135", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,13 +1,17 @@\n use crate::base::ModuleData;\n+use crate::errors::{\n+    ModuleCircular, ModuleFileNotFound, ModuleInBlock, ModuleInBlockName, ModuleMultipleCandidates,\n+};\n use rustc_ast::ptr::P;\n use rustc_ast::{token, AttrVec, Attribute, Inline, Item, ModSpans};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_parse::new_parser_from_file;\n use rustc_parse::validate_attr;\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use std::iter::once;\n \n use std::path::{self, Path, PathBuf};\n \n@@ -242,57 +246,41 @@ pub fn default_submod_path<'a>(\n \n impl ModError<'_> {\n     fn report(self, sess: &Session, span: Span) -> ErrorGuaranteed {\n-        let diag = &sess.parse_sess.span_diagnostic;\n         match self {\n             ModError::CircularInclusion(file_paths) => {\n-                let mut msg = String::from(\"circular modules: \");\n-                for file_path in &file_paths {\n-                    msg.push_str(&file_path.display().to_string());\n-                    msg.push_str(\" -> \");\n-                }\n-                msg.push_str(&file_paths[0].display().to_string());\n-                diag.struct_span_err(span, &msg)\n-            }\n-            ModError::ModInBlock(ident) => {\n-                let msg = \"cannot declare a non-inline module inside a block unless it has a path attribute\";\n-                let mut err = diag.struct_span_err(span, msg);\n-                if let Some(ident) = ident {\n-                    let note =\n-                        format!(\"maybe `use` the module `{}` instead of redeclaring it\", ident);\n-                    err.span_note(span, &note);\n-                }\n-                err\n+                let path_to_string = |path: &PathBuf| path.display().to_string();\n+\n+                let paths = file_paths\n+                    .iter()\n+                    .map(path_to_string)\n+                    .chain(once(path_to_string(&file_paths[0])))\n+                    .collect::<Vec<_>>();\n+\n+                let modules = paths.join(\" -> \");\n+\n+                sess.emit_err(ModuleCircular { span, modules })\n             }\n-            ModError::FileNotFound(ident, default_path, secondary_path) => {\n-                let mut err = struct_span_err!(\n-                    diag,\n+            ModError::ModInBlock(ident) => sess.emit_err(ModuleInBlock {\n+                span,\n+                name: ident.map(|name| ModuleInBlockName { span, name }),\n+            }),\n+            ModError::FileNotFound(name, default_path, secondary_path) => {\n+                sess.emit_err(ModuleFileNotFound {\n                     span,\n-                    E0583,\n-                    \"file not found for module `{}`\",\n-                    ident,\n-                );\n-                err.help(&format!(\n-                    \"to create the module `{}`, create file \\\"{}\\\" or \\\"{}\\\"\",\n-                    ident,\n-                    default_path.display(),\n-                    secondary_path.display(),\n-                ));\n-                err\n+                    name,\n+                    default_path: default_path.display().to_string(),\n+                    secondary_path: secondary_path.display().to_string(),\n+                })\n             }\n-            ModError::MultipleCandidates(ident, default_path, secondary_path) => {\n-                let mut err = struct_span_err!(\n-                    diag,\n+            ModError::MultipleCandidates(name, default_path, secondary_path) => {\n+                sess.emit_err(ModuleMultipleCandidates {\n                     span,\n-                    E0761,\n-                    \"file for module `{}` found at both \\\"{}\\\" and \\\"{}\\\"\",\n-                    ident,\n-                    default_path.display(),\n-                    secondary_path.display(),\n-                );\n-                err.help(\"delete or rename one of them to remove the ambiguity\");\n-                err\n+                    name,\n+                    default_path: default_path.display().to_string(),\n+                    secondary_path: secondary_path.display().to_string(),\n+                })\n             }\n-            ModError::ParserError(err) => err,\n-        }.emit()\n+            ModError::ParserError(mut err) => err.emit(),\n+        }\n     }\n }"}, {"sha": "8f3bea29ffd2897ee30178c82969f485fcb9c8b3", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -154,6 +154,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             false,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n+        #[allow(rustc::untranslatable_diagnostic)]\n         handler.span_err(msp, \"foo\");\n \n         assert!("}, {"sha": "cb4c35c0ce177e527e1bab8feba86b319ce53878", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -78,7 +78,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     let generics = tcx.generics_of(parent_def_id.to_def_id());\n                     let param_def_idx = generics.param_def_id_to_index[&param_id.to_def_id()];\n                     // In the above example this would be .params[..N#0]\n-                    let params = generics.params[..param_def_idx as usize].to_owned();\n+                    let params = generics.params_to(param_def_idx as usize, tcx).to_owned();\n                     let param_def_id_to_index =\n                         params.iter().map(|param| (param.def_id, param.index)).collect();\n "}, {"sha": "6763e06c0cfeed38a2a5c83f7fecb58c47beb825", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n-        error: Option<TypeError<'_>>,\n+        error: Option<TypeError<'tcx>>,\n     ) {\n         let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n         match (self.tcx.hir().find(parent), error) {\n@@ -286,6 +286,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.downgrade_to_delayed_bug();\n                 }\n             }\n+            (\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::Binary(_, lhs, rhs), ..\n+                })),\n+                Some(TypeError::Sorts(ExpectedFound { expected, .. })),\n+            ) if rhs.hir_id == expr.hir_id\n+                && self.typeck_results.borrow().expr_ty_adjusted_opt(lhs) == Some(expected) =>\n+            {\n+                err.span_label(lhs.span, &format!(\"expected because this is `{expected}`\"));\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "99e59c770d754152140eaf8b6558fc370b6344dc", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -526,12 +526,6 @@ pub enum TerminatorKind<'tcx> {\n     SwitchInt {\n         /// The discriminant value being tested.\n         discr: Operand<'tcx>,\n-\n-        /// The type of value being tested.\n-        /// This is always the same as the type of `discr`.\n-        /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.\n-        switch_ty: Ty<'tcx>,\n-\n         targets: SwitchTargets,\n     },\n "}, {"sha": "013a1bccd3bd1fd85af72a5a31db156e4e0c3416", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -1,6 +1,3 @@\n-use crate::mir;\n-use crate::mir::interpret::Scalar;\n-use crate::ty::{self, Ty, TyCtxt};\n use smallvec::{smallvec, SmallVec};\n \n use super::{BasicBlock, InlineAsmOperand, Operand, SourceInfo, TerminatorKind};\n@@ -131,17 +128,8 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n-    pub fn if_(\n-        tcx: TyCtxt<'tcx>,\n-        cond: Operand<'tcx>,\n-        t: BasicBlock,\n-        f: BasicBlock,\n-    ) -> TerminatorKind<'tcx> {\n-        TerminatorKind::SwitchInt {\n-            discr: cond,\n-            switch_ty: tcx.types.bool,\n-            targets: SwitchTargets::static_if(0, f, t),\n-        }\n+    pub fn if_(cond: Operand<'tcx>, t: BasicBlock, f: BasicBlock) -> TerminatorKind<'tcx> {\n+        TerminatorKind::SwitchInt { discr: cond, targets: SwitchTargets::static_if(0, f, t) }\n     }\n \n     pub fn successors(&self) -> Successors<'_> {\n@@ -264,11 +252,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n         }\n     }\n \n-    pub fn as_switch(&self) -> Option<(&Operand<'tcx>, Ty<'tcx>, &SwitchTargets)> {\n+    pub fn as_switch(&self) -> Option<(&Operand<'tcx>, &SwitchTargets)> {\n         match self {\n-            TerminatorKind::SwitchInt { discr, switch_ty, targets } => {\n-                Some((discr, *switch_ty, targets))\n-            }\n+            TerminatorKind::SwitchInt { discr, targets } => Some((discr, targets)),\n             _ => None,\n         }\n     }\n@@ -403,21 +389,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             Return | Resume | Abort | Unreachable | GeneratorDrop => vec![],\n             Goto { .. } => vec![\"\".into()],\n-            SwitchInt { ref targets, switch_ty, .. } => ty::tls::with(|tcx| {\n-                let param_env = ty::ParamEnv::empty();\n-                let switch_ty = tcx.lift(switch_ty).unwrap();\n-                let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n-                targets\n-                    .values\n-                    .iter()\n-                    .map(|&u| {\n-                        mir::ConstantKind::from_scalar(tcx, Scalar::from_uint(u, size), switch_ty)\n-                            .to_string()\n-                            .into()\n-                    })\n-                    .chain(iter::once(\"otherwise\".into()))\n-                    .collect()\n-            }),\n+            SwitchInt { ref targets, .. } => targets\n+                .values\n+                .iter()\n+                .map(|&u| Cow::Owned(u.to_string()))\n+                .chain(iter::once(\"otherwise\".into()))\n+                .collect(),\n             Call { target: Some(_), cleanup: Some(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }"}, {"sha": "2ee3f551529f986c44525f9857994b4a29cbafba", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -477,11 +477,9 @@ macro_rules! make_mir_visitor {\n \n                     TerminatorKind::SwitchInt {\n                         discr,\n-                        switch_ty,\n                         targets: _\n                     } => {\n                         self.visit_operand(discr, location);\n-                        self.visit_ty($(& $mutability)? *switch_ty, TyContext::Location(location));\n                     }\n \n                     TerminatorKind::Drop {"}, {"sha": "2e70ac256a71973a768abfcd73cb943e66293cbf", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -234,6 +234,15 @@ impl<'tcx> Generics {\n         }\n     }\n \n+    pub fn params_to(&'tcx self, param_index: usize, tcx: TyCtxt<'tcx>) -> &'tcx [GenericParamDef] {\n+        if let Some(index) = param_index.checked_sub(self.parent_count) {\n+            &self.params[..index]\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count > 0 but no parent?\"))\n+                .params_to(param_index, tcx)\n+        }\n+    }\n+\n     /// Returns the `GenericParamDef` associated with this `EarlyBoundRegion`.\n     pub fn region_param(\n         &'tcx self,"}, {"sha": "38b1fa91d0a6794ec3cb6dc42ef0330607542825", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -183,7 +183,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     LogicalOp::And => (else_block, shortcircuit_block),\n                     LogicalOp::Or => (shortcircuit_block, else_block),\n                 };\n-                let term = TerminatorKind::if_(this.tcx, lhs, blocks.0, blocks.1);\n+                let term = TerminatorKind::if_(lhs, blocks.0, blocks.1);\n                 this.cfg.terminate(block, source_info, term);\n \n                 this.cfg.push_assign_constant("}, {"sha": "e90db2c7d05e7ba294af411f7f76ed6a2c2649a6", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let then_block = this.cfg.start_new_block();\n                 let else_block = this.cfg.start_new_block();\n-                let term = TerminatorKind::if_(this.tcx, operand, then_block, else_block);\n+                let term = TerminatorKind::if_(operand, then_block, else_block);\n \n                 let source_info = this.source_info(expr_span);\n                 this.cfg.terminate(block, source_info, term);"}, {"sha": "6d5a98342d2936730549754f62fcacdadd06bcae", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -203,7 +203,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.source_info(match_start_span),\n                     TerminatorKind::SwitchInt {\n                         discr: Operand::Move(discr),\n-                        switch_ty: discr_ty,\n                         targets: switch_targets,\n                     },\n                 );\n@@ -221,7 +220,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         0 => (second_bb, first_bb),\n                         v => span_bug!(test.span, \"expected boolean value but got {:?}\", v),\n                     };\n-                    TerminatorKind::if_(self.tcx, Operand::Copy(place), true_bb, false_bb)\n+                    TerminatorKind::if_(Operand::Copy(place), true_bb, false_bb)\n                 } else {\n                     // The switch may be inexhaustive so we have a catch all block\n                     debug_assert_eq!(options.len() + 1, target_blocks.len());\n@@ -232,7 +231,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                     TerminatorKind::SwitchInt {\n                         discr: Operand::Copy(place),\n-                        switch_ty,\n                         targets: switch_targets,\n                     }\n                 };\n@@ -378,7 +376,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::if_(self.tcx, Operand::Move(result), success_block, fail_block),\n+            TerminatorKind::if_(Operand::Move(result), success_block, fail_block),\n         );\n     }\n \n@@ -482,7 +480,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(\n             eq_block,\n             source_info,\n-            TerminatorKind::if_(self.tcx, Operand::Move(eq_result), success_block, fail_block),\n+            TerminatorKind::if_(Operand::Move(eq_result), success_block, fail_block),\n         );\n     }\n "}, {"sha": "8610792c0eb5d24be0eced169c40d1d141ec3a4e", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -596,7 +596,6 @@ where\n                 source_info: self.source_info,\n                 kind: TerminatorKind::SwitchInt {\n                     discr: Operand::Move(discr),\n-                    switch_ty: discr_ty,\n                     targets: SwitchTargets::new(\n                         values.iter().copied().zip(blocks.iter().copied()),\n                         *blocks.last().unwrap(),\n@@ -716,7 +715,7 @@ where\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n                 source_info: self.source_info,\n-                kind: TerminatorKind::if_(tcx, move_(can_go), succ, drop_block),\n+                kind: TerminatorKind::if_(move_(can_go), succ, drop_block),\n             }),\n         };\n         let loop_block = self.elaborator.patch().new_block(loop_block);\n@@ -781,7 +780,6 @@ where\n                 source_info: self.source_info,\n                 kind: TerminatorKind::SwitchInt {\n                     discr: move_(elem_size),\n-                    switch_ty: tcx.types.usize,\n                     targets: SwitchTargets::static_if(\n                         0,\n                         self.drop_loop_pair(ety, false, len),\n@@ -1021,7 +1019,7 @@ where\n             DropStyle::Static => on_set,\n             DropStyle::Conditional | DropStyle::Open => {\n                 let flag = self.elaborator.get_drop_flag(self.path).unwrap();\n-                let term = TerminatorKind::if_(self.tcx(), flag, on_set, on_unset);\n+                let term = TerminatorKind::if_(flag, on_set, on_unset);\n                 self.new_block(unwind, term)\n             }\n         }"}, {"sha": "5ff6b9e7e69b4f8257a49d4190a996da6b75e017", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -261,7 +261,7 @@ impl Direction for Backward {\n                     propagate(pred, &tmp);\n                 }\n \n-                mir::TerminatorKind::SwitchInt { targets: _, ref discr, switch_ty: _ } => {\n+                mir::TerminatorKind::SwitchInt { targets: _, ref discr } => {\n                     let mut applier = BackwardSwitchIntEdgeEffectsApplier {\n                         body,\n                         pred,\n@@ -577,7 +577,7 @@ impl Direction for Forward {\n                 }\n             }\n \n-            SwitchInt { ref targets, ref discr, switch_ty: _ } => {\n+            SwitchInt { ref targets, ref discr } => {\n                 let mut applier = ForwardSwitchIntEdgeEffectsApplier {\n                     exit_state,\n                     targets,"}, {"sha": "40eefda4f076326002a270044b1526f9988110c3", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -82,8 +82,9 @@ impl<'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'_, 'tcx> {\n                 }\n \n                 let target_bb_terminator = target_bb.terminator();\n-                let (discr, switch_ty, targets) = target_bb_terminator.kind.as_switch()?;\n+                let (discr, targets) = target_bb_terminator.kind.as_switch()?;\n                 if discr.place() == Some(*place) {\n+                    let switch_ty = place.ty(self.body.local_decls(), self.tcx).ty;\n                     // We now know that the Switch matches on the const place, and it is statementless\n                     // Now find which value in the Switch matches the const value.\n                     let const_value ="}, {"sha": "eba6a2b34e47ddb11379dc589c7090db1611b18d", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::graph::WithSuccessors;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::CoverageKind;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty;\n use rustc_span::{self, BytePos, Pos, Span, DUMMY_SP};\n \n // All `TEMP_BLOCK` targets should be replaced before calling `to_body() -> mir::Body`.\n@@ -47,7 +47,6 @@ struct MockBlocks<'tcx> {\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n     dummy_place: Place<'tcx>,\n     next_local: usize,\n-    bool_ty: Ty<'tcx>,\n }\n \n impl<'tcx> MockBlocks<'tcx> {\n@@ -56,7 +55,6 @@ impl<'tcx> MockBlocks<'tcx> {\n             blocks: IndexVec::new(),\n             dummy_place: Place { local: RETURN_PLACE, projection: ty::List::empty() },\n             next_local: 0,\n-            bool_ty: TyCtxt::BOOL_TY_FOR_UNIT_TESTING,\n         }\n     }\n \n@@ -157,7 +155,6 @@ impl<'tcx> MockBlocks<'tcx> {\n     fn switchint(&mut self, some_from_block: Option<BasicBlock>) -> BasicBlock {\n         let switchint_kind = TerminatorKind::SwitchInt {\n             discr: Operand::Move(Place::from(self.new_temp())),\n-            switch_ty: self.bool_ty, // just a dummy value\n             targets: SwitchTargets::static_if(0, TEMP_BLOCK, TEMP_BLOCK),\n         };\n         self.add_block_from(some_from_block, switchint_kind)"}, {"sha": "8a7b027ddda7eb91316f612be8995748d6729fdf", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -121,7 +121,6 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n \n             let TerminatorKind::SwitchInt {\n                 discr: parent_op,\n-                switch_ty: parent_ty,\n                 targets: parent_targets\n             } = &bbs[parent].terminator().kind else {\n                 unreachable!()\n@@ -132,6 +131,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 Operand::Copy(x) => Operand::Copy(*x),\n                 Operand::Constant(x) => Operand::Constant(x.clone()),\n             };\n+            let parent_ty = parent_op.ty(body.local_decls(), tcx);\n             let statements_before = bbs[parent].statements.len();\n             let parent_end = Location { block: parent, statement_index: statements_before };\n \n@@ -153,7 +153,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n             // create temp to store inequality comparison between the two discriminants, `_t` in\n             // example above\n             let nequal = BinOp::Ne;\n-            let comp_res_type = nequal.ty(tcx, *parent_ty, opt_data.child_ty);\n+            let comp_res_type = nequal.ty(tcx, parent_ty, opt_data.child_ty);\n             let comp_temp = patch.new_temp(comp_res_type, opt_data.child_source.span);\n             patch.add_statement(parent_end, StatementKind::StorageLive(comp_temp));\n \n@@ -181,7 +181,6 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 kind: TerminatorKind::SwitchInt {\n                     // switch on the first discriminant, so we can mark the second one as dead\n                     discr: parent_op,\n-                    switch_ty: opt_data.child_ty,\n                     targets: eq_targets,\n                 },\n             }));\n@@ -193,12 +192,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n             let false_case = eq_bb;\n             patch.patch_terminator(\n                 parent,\n-                TerminatorKind::if_(\n-                    tcx,\n-                    Operand::Move(Place::from(comp_temp)),\n-                    true_case,\n-                    false_case,\n-                ),\n+                TerminatorKind::if_(Operand::Move(Place::from(comp_temp)), true_case, false_case),\n             );\n \n             // generate StorageDead for the second_discriminant_temp not in use anymore\n@@ -319,11 +313,11 @@ fn evaluate_candidate<'tcx>(\n     let bbs = &body.basic_blocks;\n     let TerminatorKind::SwitchInt {\n         targets,\n-        switch_ty: parent_ty,\n-        ..\n+        discr: parent_discr,\n     } = &bbs[parent].terminator().kind else {\n         return None\n     };\n+    let parent_ty = parent_discr.ty(body.local_decls(), tcx);\n     let parent_dest = {\n         let poss = targets.otherwise();\n         // If the fallthrough on the parent is trivially unreachable, we can let the\n@@ -339,12 +333,12 @@ fn evaluate_candidate<'tcx>(\n     let (_, child) = targets.iter().next()?;\n     let child_terminator = &bbs[child].terminator();\n     let TerminatorKind::SwitchInt {\n-        switch_ty: child_ty,\n         targets: child_targets,\n-        ..\n+        discr: child_discr,\n     } = &child_terminator.kind else {\n         return None\n     };\n+    let child_ty = child_discr.ty(body.local_decls(), tcx);\n     if child_ty != parent_ty {\n         return None;\n     }\n@@ -372,7 +366,7 @@ fn evaluate_candidate<'tcx>(\n     Some(OptimizationData {\n         destination,\n         child_place: *child_place,\n-        child_ty: *child_ty,\n+        child_ty,\n         child_source: child_terminator.source_info,\n     })\n }"}, {"sha": "c08593afe9d88ff900b6c116ffcd8183cc0b89d4", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -877,11 +877,7 @@ fn insert_switch<'tcx>(\n     let (assign, discr) = transform.get_discr(body);\n     let switch_targets =\n         SwitchTargets::new(cases.iter().map(|(i, bb)| ((*i) as u128, *bb)), default_block);\n-    let switch = TerminatorKind::SwitchInt {\n-        discr: Operand::Move(discr),\n-        switch_ty: transform.discr_ty,\n-        targets: switch_targets,\n-    };\n+    let switch = TerminatorKind::SwitchInt { discr: Operand::Move(discr), targets: switch_targets };\n \n     let source_info = SourceInfo::outermost(body.span);\n     body.basic_blocks_mut().raw.insert("}, {"sha": "ce05db5b762ac9a48d3b2d15f6b3be72a3a5d526", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -55,18 +55,17 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                 continue;\n             }\n \n-            let (discr, val, switch_ty, first, second) = match bbs[bb_idx].terminator().kind {\n+            let (discr, val, first, second) = match bbs[bb_idx].terminator().kind {\n                 TerminatorKind::SwitchInt {\n                     discr: ref discr @ (Operand::Copy(_) | Operand::Move(_)),\n-                    switch_ty,\n                     ref targets,\n                     ..\n                 } if targets.iter().len() == 1 => {\n                     let (value, target) = targets.iter().next().unwrap();\n                     if target == targets.otherwise() {\n                         continue;\n                     }\n-                    (discr, value, switch_ty, target, targets.otherwise())\n+                    (discr, value, target, targets.otherwise())\n                 }\n                 // Only optimize switch int statements\n                 _ => continue,\n@@ -105,10 +104,11 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             }\n             // Take ownership of items now that we know we can optimize.\n             let discr = discr.clone();\n+            let discr_ty = discr.ty(&body.local_decls, tcx);\n \n             // Introduce a temporary for the discriminant value.\n             let source_info = bbs[bb_idx].terminator().source_info;\n-            let discr_local = body.local_decls.push(LocalDecl::new(switch_ty, source_info.span));\n+            let discr_local = body.local_decls.push(LocalDecl::new(discr_ty, source_info.span));\n \n             // We already checked that first and second are different blocks,\n             // and bb_idx has a different terminator from both of them.\n@@ -130,10 +130,10 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             (*f).clone()\n                         } else {\n                             // Different value between blocks. Make value conditional on switch condition.\n-                            let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n+                            let size = tcx.layout_of(param_env.and(discr_ty)).unwrap().size;\n                             let const_cmp = Operand::const_from_scalar(\n                                 tcx,\n-                                switch_ty,\n+                                discr_ty,\n                                 rustc_const_eval::interpret::Scalar::from_uint(val, size),\n                                 rustc_span::DUMMY_SP,\n                             );"}, {"sha": "f92a0e826dcdfb6dcf55e264235d07e360a5137f", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -548,7 +548,6 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                 statements.push(statement);\n                 *kind = TerminatorKind::SwitchInt {\n                     discr: Operand::Move(temp),\n-                    switch_ty: discr_ty,\n                     targets: SwitchTargets::new(cases.into_iter(), unreachable),\n                 };\n             }"}, {"sha": "8164b3052786aa1ea07d979f6607ca8988f6b9ef", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -24,12 +24,9 @@ impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {\n                 TerminatorKind::SwitchInt {\n-                    discr: Operand::Constant(ref c),\n-                    switch_ty,\n-                    ref targets,\n-                    ..\n+                    discr: Operand::Constant(ref c), ref targets, ..\n                 } => {\n-                    let constant = c.literal.try_eval_bits(tcx, param_env, switch_ty);\n+                    let constant = c.literal.try_eval_bits(tcx, param_env, c.ty());\n                     if let Some(constant) = constant {\n                         let target = targets.target_for_value(constant);\n                         TerminatorKind::Goto { target }"}, {"sha": "dcad1518eb63eb0d853037b109b9b7d800b727c8", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -127,11 +127,8 @@ impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n             let targets = SwitchTargets::new(iter::once((new_value, bb_cond)), bb_otherwise);\n \n             let terminator = bb.terminator_mut();\n-            terminator.kind = TerminatorKind::SwitchInt {\n-                discr: Operand::Move(opt.to_switch_on),\n-                switch_ty: opt.branch_value_ty,\n-                targets,\n-            };\n+            terminator.kind =\n+                TerminatorKind::SwitchInt { discr: Operand::Move(opt.to_switch_on), targets };\n         }\n \n         for (idx, bb_idx) in storage_deads_to_remove {"}, {"sha": "06deca2fffb4889cc447878136b545a0243de852", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -76,7 +76,7 @@ where\n     let terminator = match terminator_kind {\n         // This will unconditionally run into an unreachable and is therefore unreachable as well.\n         TerminatorKind::Goto { target } if is_unreachable(*target) => TerminatorKind::Unreachable,\n-        TerminatorKind::SwitchInt { targets, discr, switch_ty } => {\n+        TerminatorKind::SwitchInt { targets, discr } => {\n             let otherwise = targets.otherwise();\n \n             // If all targets are unreachable, we can be unreachable as well.\n@@ -110,11 +110,7 @@ where\n                     return None;\n                 }\n \n-                TerminatorKind::SwitchInt {\n-                    discr: discr.clone(),\n-                    switch_ty: *switch_ty,\n-                    targets: new_targets,\n-                }\n+                TerminatorKind::SwitchInt { discr: discr.clone(), targets: new_targets }\n             } else {\n                 // If the otherwise branch is reachable, we don't want to delete any unreachable branches.\n                 return None;"}, {"sha": "6ecf5bdcf86d2bf792695eb1720f3c10c403eadf", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -136,7 +136,7 @@ impl Thread {\n \n         unsafe {\n             // Available since glibc 2.12, musl 1.1.16, and uClibc 1.0.20.\n-            let name = truncate_cstr(name, TASK_COMM_LEN);\n+            let name = truncate_cstr::<{ TASK_COMM_LEN }>(name);\n             let res = libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n             // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n             debug_assert_eq!(res, 0);\n@@ -153,7 +153,7 @@ impl Thread {\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n-            let name = truncate_cstr(name, libc::MAXTHREADNAMESIZE);\n+            let name = truncate_cstr::<{ libc::MAXTHREADNAMESIZE }>(name);\n             let res = libc::pthread_setname_np(name.as_ptr());\n             // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n             debug_assert_eq!(res, 0);\n@@ -285,17 +285,12 @@ impl Drop for Thread {\n }\n \n #[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n-fn truncate_cstr(cstr: &CStr, max_with_nul: usize) -> crate::borrow::Cow<'_, CStr> {\n-    use crate::{borrow::Cow, ffi::CString};\n-\n-    if cstr.to_bytes_with_nul().len() > max_with_nul {\n-        let bytes = cstr.to_bytes()[..max_with_nul - 1].to_vec();\n-        // SAFETY: the non-nul bytes came straight from a CStr.\n-        // (CString will add the terminating nul.)\n-        Cow::Owned(unsafe { CString::from_vec_unchecked(bytes) })\n-    } else {\n-        Cow::Borrowed(cstr)\n+fn truncate_cstr<const MAX_WITH_NUL: usize>(cstr: &CStr) -> [libc::c_char; MAX_WITH_NUL] {\n+    let mut result = [0; MAX_WITH_NUL];\n+    for (src, dst) in cstr.to_bytes().iter().zip(&mut result[..MAX_WITH_NUL - 1]) {\n+        *dst = *src as libc::c_char;\n     }\n+    result\n }\n \n pub fn available_parallelism() -> io::Result<NonZeroUsize> {"}, {"sha": "d54ac9e33bce27c865b75cfe9ee4e859e43a2488", "filename": "src/test/codegen/issue-105386-ub-in-debuginfo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: --crate-type=lib -O -Cdebuginfo=2 -Cno-prepopulate-passes\n+// min-llvm-version: 15.0 # this test uses opaque pointer notation\n+#![feature(stmt_expr_attributes)]\n+\n+pub struct S([usize; 8]);\n+\n+#[no_mangle]\n+pub fn outer_function(x: S, y: S) -> usize {\n+    (#[inline(always)]|| {\n+        let _z = x;\n+        y.0[0]\n+    })()\n+}\n+\n+// Check that we do not attempt to load from the spilled arg before it is assigned to\n+// when generating debuginfo.\n+// CHECK-LABEL: @outer_function\n+// CHECK: [[spill:%.*]] = alloca %\"[closure@{{.*.rs}}:9:23: 9:25]\"\n+// CHECK-NOT: [[ptr_tmp:%.*]] = getelementptr inbounds %\"[closure@{{.*.rs}}:9:23: 9:25]\", ptr [[spill]]\n+// CHECK-NOT: [[load:%.*]] = load ptr, ptr\n+// CHECK: call void @llvm.lifetime.start{{.*}}({{.*}}, ptr [[spill]])\n+// CHECK: call void @llvm.memcpy{{.*}}(ptr {{align .*}} [[spill]], ptr {{align .*}} %x"}, {"sha": "9780332d8bf18813d2658000920e92e91f7e8824", "filename": "src/test/mir-opt/76803_regression.encode.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,7 +8,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "0af5d82d31540debb60c201f5201332058981578", "filename": "src/test/mir-opt/bool_compare.opt1.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n       }\n   \n       bb1: {"}, {"sha": "f5d1febd991cd5aef3f2964c80372d1966e8fd5b", "filename": "src/test/mir-opt/bool_compare.opt2.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n       }\n   \n       bb1: {"}, {"sha": "e7432adac7d9d366e75830c62b45d8f9ae3ff569", "filename": "src/test/mir-opt/bool_compare.opt3.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n       }\n   \n       bb1: {"}, {"sha": "6b3e27772f71c978b4bd06feb76e83cf5d0226a0", "filename": "src/test/mir-opt/bool_compare.opt4.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n       }\n   \n       bb1: {"}, {"sha": "628a33f1020a5f625d333a536f9c795061a24d79", "filename": "src/test/mir-opt/building/issue_101867.main.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -27,7 +27,7 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n         FakeRead(ForMatchedPlace(None), _1); // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n         _6 = discriminant(_1);           // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n-        switchInt(move _6) -> [1_isize: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n+        switchInt(move _6) -> [1: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n     }\n \n     bb1: {"}, {"sha": "de5e4c0f6ed48dc33a50002ebb2bb8edc0b9f33c", "filename": "src/test/mir-opt/building/issue_49232.main.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n         _3 = const true;                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n         FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n-        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue_49232.rs:+3:13: +3:23\n+        switchInt(_3) -> [0: bb3, otherwise: bb4]; // scope 0 at $DIR/issue_49232.rs:+3:13: +3:23\n     }\n \n     bb3: {"}, {"sha": "cb36bc64da69597809b68fdb2dac704c6ff7accc", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -28,7 +28,7 @@ fn full_tested_match() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n+        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n     }\n \n     bb1: {\n@@ -60,7 +60,7 @@ fn full_tested_match() -> () {\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        switchInt(move _7) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n     bb7: {"}, {"sha": "7f8755faac6cf78f146d55ec9a291ced6ae387dc", "filename": "src/test/mir-opt/building/match_false_edges.full_tested_match2.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -28,7 +28,7 @@ fn full_tested_match2() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n+        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n     }\n \n     bb1: {\n@@ -66,7 +66,7 @@ fn full_tested_match2() -> () {\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        switchInt(move _7) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n     }\n \n     bb7: {"}, {"sha": "e8b93f4371ecbadb05ce0c559300d80d3de25c31", "filename": "src/test/mir-opt/building/match_false_edges.main.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        switchInt(move _4) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n     }\n \n     bb1: {\n@@ -56,7 +56,7 @@ fn main() -> () {\n \n     bb4: {\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        switchInt(move _3) -> [1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        switchInt(move _3) -> [1: bb6, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n     }\n \n     bb5: {\n@@ -87,7 +87,7 @@ fn main() -> () {\n     }\n \n     bb9: {\n-        switchInt(move _8) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        switchInt(move _8) -> [0: bb11, otherwise: bb10]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n     }\n \n     bb10: {\n@@ -134,7 +134,7 @@ fn main() -> () {\n     }\n \n     bb15: {\n-        switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        switchInt(move _12) -> [0: bb17, otherwise: bb16]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n     }\n \n     bb16: {"}, {"sha": "aa2fd46320e137fa281c34109ea89ed27f5187b7", "filename": "src/test/mir-opt/building/simple_match.match_bool.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -6,7 +6,7 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple_match.rs:+1:11: +1:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple_match.rs:+1:5: +1:12\n+        switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/simple_match.rs:+1:5: +1:12\n     }\n \n     bb1: {"}, {"sha": "a717d1bbd12f2c2ab965969cdebd33d9fdd30efa", "filename": "src/test/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -11,9 +11,9 @@\n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n--         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _3) -> [1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n-+         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         switchInt(move _2) -> [1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -29,7 +29,7 @@\n -     }\n - \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb4: {"}, {"sha": "24be8c9b86845b8147db55dbfe373cf695a6eebb", "filename": "src/test/mir-opt/const_goto_const_eval_fail.f.ConstGoto.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -10,7 +10,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:11: +6:6\n           StorageLive(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n           _2 = const A;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n-          switchInt(_2) -> [1_i32: bb2, 2_i32: bb2, 3_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:9: +2:16\n+          switchInt(_2) -> [1: bb2, 2: bb2, 3: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:9: +2:16\n       }\n   \n       bb1: {\n@@ -21,11 +21,11 @@\n       bb2: {\n           _1 = const B;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n -         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n-+         switchInt(_1) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n++         switchInt(_1) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n       }\n   \n       bb3: {\n--         switchInt(_1) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n+-         switchInt(_1) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n -     }\n - \n -     bb4: {"}, {"sha": "f54577259431da796336b9c52d937c479de6e213", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -23,10 +23,10 @@\n -         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n -         StorageLive(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n -         _6 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n+-         switchInt(move _6) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n +         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n +         _2 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n++         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n       }\n   \n       bb1: {\n@@ -41,7 +41,7 @@\n - \n -     bb3: {\n -         StorageDead(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n+-         switchInt(move _5) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n -     }\n - \n -     bb4: {\n@@ -56,7 +56,7 @@\n - \n -     bb6: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:75: +2:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-         switchInt(move _4) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -     }\n - \n -     bb7: {\n@@ -70,7 +70,7 @@\n -     }\n - \n -     bb9: {\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-         switchInt(move _3) -> [0: bb11, otherwise: bb10]; // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -     }\n - \n -     bb10: {"}, {"sha": "147670f8a915c4681eb853556097617f52ebf063", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -9,8 +9,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n           _1 = const _;                    // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+-         switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n++         switchInt(const false) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n       }\n   \n       bb1: {"}, {"sha": "b4dccecc67265e74d5191fa6930acf8b1ee8e307", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -21,13 +21,13 @@\n           ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "b4dccecc67265e74d5191fa6930acf8b1ee8e307", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -21,13 +21,13 @@\n           ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "ddc1a4493dbbf697a02a4a41f868e8fc83c7e8cb", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,8 +8,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+-         switchInt(_1) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "09c47ee6e8309deaa6504a8c0f9d55faefc55223", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,7 +8,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+-         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n +         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n       }\n   "}, {"sha": "c4d389b2d764818426147cf1822148f1d089174d", "filename": "src/test/mir-opt/coverage_graphviz.main.InstrumentCoverage.0.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -7,7 +7,7 @@ digraph Cov_0_3 {\n     bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 + bcb3) at 10:5-11:17<br align=\"left\"/>    11:12-11:17: @2.Call: _2 = bar() -&gt; [return: bb3, unwind: bb6]</td></tr><tr><td align=\"left\" balign=\"left\">bb1: FalseUnwind<br align=\"left\"/>bb2: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb3: SwitchInt</td></tr></table>>];\n     bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 9:1-9:11<br align=\"left\"/>    </td></tr><tr><td align=\"left\" balign=\"left\">bb0: Goto</td></tr></table>>];\n     bcb3__Cov_0_3 -> bcb1__Cov_0_3 [label=<>];\n-    bcb1__Cov_0_3 -> bcb3__Cov_0_3 [label=<false>];\n+    bcb1__Cov_0_3 -> bcb3__Cov_0_3 [label=<0>];\n     bcb1__Cov_0_3 -> bcb2__Cov_0_3 [label=<otherwise>];\n     bcb0__Cov_0_3 -> bcb1__Cov_0_3 [label=<>];\n }"}, {"sha": "fce18fae4362f17224dfcc0ed6213575176167c5", "filename": "src/test/mir-opt/dataflow-const-prop/enum.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -28,7 +28,7 @@\n           discriminant(_1) = 0;            // scope 0 at $DIR/enum.rs:+1:13: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/enum.rs:+2:9: +2:10\n           _3 = discriminant(_1);           // scope 1 at $DIR/enum.rs:+2:19: +2:20\n-          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20\n+          switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20\n       }\n   \n       bb1: {"}, {"sha": "32489b4bd6bfeb57987277e2e1fe14fea90ea0a8", "filename": "src/test/mir-opt/dataflow-const-prop/if.main.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -42,8 +42,8 @@\n +         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+2:16: +2:17\n +         _3 = const true;                 // scope 1 at $DIR/if.rs:+2:16: +2:22\n           StorageDead(_4);                 // scope 1 at $DIR/if.rs:+2:21: +2:22\n--         switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n-+         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n++         switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n       }\n   \n       bb1: {\n@@ -73,8 +73,8 @@\n +         _9 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:16: +5:17\n +         _8 = const true;                 // scope 3 at $DIR/if.rs:+5:16: +5:22\n           StorageDead(_9);                 // scope 3 at $DIR/if.rs:+5:21: +5:22\n--         switchInt(move _8) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n-+         switchInt(const true) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n+-         switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n++         switchInt(const true) -> [0: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n       }\n   \n       bb4: {"}, {"sha": "5a87884977c39bc3b8aa7f711dc2159561ac4ef8", "filename": "src/test/mir-opt/dataflow-const-prop/issue_81605.f.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -10,8 +10,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue_81605.rs:+1:9: +1:33\n           StorageLive(_2);                 // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n           _2 = const true;                 // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n-+         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n++         switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n       }\n   \n       bb1: {"}, {"sha": "80f8905adc92d93ae714a7b326a16ec22e6f11cd", "filename": "src/test/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -37,8 +37,8 @@\n       }\n   \n       bb2: {\n--         switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+-         switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n++         switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n       }\n   \n       bb3: {"}, {"sha": "210d3849e18a106bb1e76987b5934588e335ba34", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n           _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n+          switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n       }\n   \n       bb1: {"}, {"sha": "3b1f81175cbfcc49148618d7a177f8522b0e7c8b", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -28,44 +28,44 @@\n           _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n           _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n           _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          switchInt(move _9) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          switchInt(move _9) -> [0: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n       }\n   \n       bb2: {\n-          switchInt((*_2)[0 of 4]) -> [47_u8: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb3: {\n-          switchInt((*_2)[1 of 4]) -> [47_u8: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb4: {\n-          switchInt((*_2)[2 of 4]) -> [47_u8: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb5: {\n--         switchInt((*_2)[3 of 4]) -> [47_u8: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb6: {\n           _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n           _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n           _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          switchInt(move _6) -> [false: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          switchInt(move _6) -> [0: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n       }\n   \n       bb7: {\n-          switchInt((*_2)[0 of 3]) -> [47_u8: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb8: {\n-          switchInt((*_2)[1 of 3]) -> [47_u8: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb9: {\n--         switchInt((*_2)[2 of 3]) -> [47_u8: bb12, 33_u8: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb10: {"}, {"sha": "9597a0c835fddd26907f92f59533943e9eb7b009", "filename": "src/test/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -17,7 +17,7 @@ fn foo(_1: Option<String>) -> i32 {\n         _7 = const false;                // scope 0 at $DIR/string.rs:+1:11: +1:12\n         _7 = const true;                 // scope 0 at $DIR/string.rs:+1:11: +1:12\n         _5 = discriminant(_1);           // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        switchInt(move _5) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n+        switchInt(move _5) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n     }\n \n     bb1: {\n@@ -47,7 +47,7 @@ fn foo(_1: Option<String>) -> i32 {\n     }\n \n     bb4: {\n-        switchInt(move _4) -> [false: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        switchInt(move _4) -> [0: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n     }\n \n     bb5: {\n@@ -69,6 +69,6 @@ fn foo(_1: Option<String>) -> i32 {\n     }\n \n     bb9: {\n-        switchInt(_7) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        switchInt(_7) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n     }\n }"}, {"sha": "fa3eeedc40fffee479371c748617291fe96cd852", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -62,7 +62,7 @@\n       bb3: {\n           StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n           _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       }\n   \n       bb4: {"}, {"sha": "ab2388d1323a85cb6f0ab499ef9c1915fa0c6fc3", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -54,11 +54,11 @@\n           _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n           _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n           _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n--         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+-         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n +         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         switchInt((*_12)) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n       }\n   \n       bb3: {"}, {"sha": "9c729663265e087f5507fb2b769c4d0acbc81eaf", "filename": "src/test/mir-opt/dest-prop/branch.foo.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -37,7 +37,7 @@\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n       }\n   \n       bb3: {"}, {"sha": "98a02ee38dd1769b2e6bd0cf5bcac0f74b14b2eb", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -31,13 +31,13 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _7) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _11) -> [0: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n@@ -49,7 +49,7 @@\n   \n       bb2: {\n -         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _6) -> [1: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb3: {\n@@ -72,7 +72,7 @@\n + \n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_7) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "aa75c44b809a90543004dbd7f49c9ec9d949953c", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -32,18 +32,18 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _8) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _12 = Ne(_8, move _11);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _12) -> [0: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n -         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _6) -> [0: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb2: {\n@@ -55,7 +55,7 @@\n   \n -     bb3: {\n -         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _7) -> [1: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb4: {\n@@ -86,7 +86,7 @@\n + \n +     bb5: {\n +         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_8) -> [0: bb3, 1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "cea6ff7cd05e07bd02d4a2c46194cb30969f9908", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -31,13 +31,13 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _7) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _10 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n +         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _11) -> [0: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n@@ -49,7 +49,7 @@\n   \n       bb2: {\n -         _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n--         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n+-         switchInt(move _6) -> [1: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb3: {\n@@ -72,7 +72,7 @@\n + \n +     bb4: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n-+         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_7) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "b90d70ce43aa0ca0d884663a1a775d85a3a3edf6", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -42,13 +42,13 @@\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n           _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n--         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n+-         switchInt(move _10) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n +         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n +         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n +         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n +         _15 = Ne(_10, move _14);         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n +         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n-+         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(move _15) -> [0: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   \n       bb1: {\n@@ -61,13 +61,13 @@\n   \n       bb2: {\n -         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n--         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n+-         switchInt(move _9) -> [1: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n -     }\n - \n -     bb3: {\n           _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n--         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n-+         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n+-         switchInt(move _8) -> [1: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(move _8) -> [1: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   \n -     bb4: {\n@@ -94,7 +94,7 @@\n + \n +     bb5: {\n +         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n-+         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(_10) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   }\n   "}, {"sha": "9edd1a39f45f9b050f4a50d1d1c5875461e45ffe", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -80,13 +80,13 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n           _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0: bb1, 1: bb3, 2: bb4, 3: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n           _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _7) -> [0: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb2: {\n@@ -104,19 +104,19 @@\n       bb3: {\n           _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _8) -> [1: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb4: {\n           _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _9) -> [2: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb5: {\n           _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _10) -> [3: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb6: {"}, {"sha": "82d8b2fc5a463a740edb395c2c44968a2269f016", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -38,12 +38,12 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n-          switchInt(move _8) -> [0_isize: bb1, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n+          switchInt(move _8) -> [0: bb1, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n           _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n-          switchInt(move _6) -> [0_isize: bb2, 1_isize: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n+          switchInt(move _6) -> [0: bb2, 1: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb2: {\n@@ -57,7 +57,7 @@\n   \n       bb4: {\n           _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n-          switchInt(move _7) -> [0_isize: bb6, 1_isize: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n+          switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb5: {"}, {"sha": "a3fa2529b1868cb8a113059fb620c811a71b2633", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n   \n       bb0: {\n           _3 = discriminant(_1);           // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:11: +1:12\n-          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:5: +1:12\n+          switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n@@ -24,7 +24,7 @@\n   \n       bb2: {\n           _4 = discriminant((*_2));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:26: +3:28\n-          switchInt(move _4) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:20: +3:28\n+          switchInt(move _4) -> [1: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:20: +3:28\n       }\n   \n       bb3: {"}, {"sha": "6d0224b547f4fe2036ac730d6e5b289ac1627328", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -12,13 +12,13 @@\n   \n       bb0: {\n           _3 = discriminant((*_1));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n-          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }\n   \n       bb1: {\n           _4 = deref_copy (((*_1) as Some).0: &E<'_>); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n           _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n-          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          switchInt(move _2) -> [1: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }\n   \n       bb2: {"}, {"sha": "8b542a7c19d63ae1f189275a83713485de931875", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n +         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n           StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:+1:16: +1:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n       }\n   \n       bb1: {"}, {"sha": "ab955049965ada01ad44a6744c897e80d9f3fcdf", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -19,7 +19,7 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n \n     bb0: {\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential_or.rs:+1:11: +1:12\n-        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:15: +2:20\n+        switchInt((_1.0: u32)) -> [1: bb2, 4: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:15: +2:20\n     }\n \n     bb1: {\n@@ -29,31 +29,31 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n \n     bb2: {\n         _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n-        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n+        switchInt(move _2) -> [0: bb4, 1: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1: bb4, 8: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n     }\n \n     bb4: {\n         _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n-        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+        switchInt(move _5) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n     }\n \n     bb5: {\n         _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n-        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+        switchInt(move _6) -> [0: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n     }\n \n     bb6: {\n         _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n-        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+        switchInt(move _3) -> [0: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n     }\n \n     bb7: {\n         _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n-        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+        switchInt(move _4) -> [0: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n     }\n \n     bb8: {"}, {"sha": "c1c2cde71ab5b38f485885cd7f3a60bc4f13ad37", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -47,7 +47,7 @@\n       bb1: {\n           StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:36: +4:37\n           StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:+8:9: +8:13\n-          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:+8:16: +8:32\n+          switchInt(_4) -> [0: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:+8:16: +8:32\n       }\n   \n       bb2: {\n@@ -75,7 +75,7 @@\n       bb5: {\n           StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:44: +13:45\n           _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n-          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n+          switchInt(move _9) -> [1: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n       }\n   \n       bb6: {"}, {"sha": "a8e090020c3d31bb70ee083e59d02adc982a4d36", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -29,7 +29,7 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator_drop_cleanup.rs:10:15: 1\n \n     bb0: {\n         _8 = discriminant((*_1));        // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        switchInt(move _8) -> [0: bb7, 3: bb10, otherwise: bb11]; // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb1: {"}, {"sha": "b3d3c768a5dd9a22ded6107eec3ec9f87c196c3c", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -32,7 +32,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24\n \n     bb0: {\n         _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        switchInt(move _11) -> [0: bb1, 3: bb5, otherwise: bb6]; // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n     }\n \n     bb1: {"}, {"sha": "de4235c9e9e935f7e65cf743d98593365495d122", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n           _2 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n       }\n   \n       bb1: {"}, {"sha": "754c6579af08fc3c91bc1a645e18e45ebe6090ba", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n           _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n           StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:17: +1:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n       }\n   \n       bb1: {"}, {"sha": "ff23839e29179fa1bb413e5ac09d2ac5820f2800", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -20,10 +20,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:14\n -         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:20\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n--         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n+-         switchInt(_2) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n +         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:20\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n-+         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n++         switchInt(move _3) -> [17: bb1, otherwise: bb2]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n       }\n   \n       bb1: {"}, {"sha": "5964d76a4b96f24149c2bddbf3081d38f05a1cbe", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -13,10 +13,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n -         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n-+         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         switchInt(move _3) -> [120: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n       }\n   \n       bb1: {"}, {"sha": "98918cc743ce0efb6ad9f3661b30b3f4a21c9178", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -13,10 +13,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n -         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         switchInt(move _3) -> [42: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {"}, {"sha": "db38140b8d00b576c2bdbe4626894202908cb8d2", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -15,10 +15,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         switchInt(move _3) -> [42: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n@@ -34,10 +34,10 @@\n           _5 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:16\n -         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n -         StorageDead(_5);                 // scope 0 at $DIR/if_condition_int.rs:+3:21: +3:22\n--         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+-         switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+3:21: +3:22\n-+         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n++         switchInt(move _5) -> [21: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n       }\n   \n       bb3: {"}, {"sha": "1a1ac4caafaf0ee363dbd4097aab1cf5137604de", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -13,10 +13,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n -         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n-+         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         switchInt(move _3) -> [4294967254: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n       }\n   \n       bb1: {"}, {"sha": "fc3f50227dcb93718c1e48496ecc29160c5d905c", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -13,10 +13,10 @@\n           _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n +         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         switchInt(move _3) -> [42: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {"}, {"sha": "b787a19f4b21c0d9c82050872e791553984abcbc", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -19,7 +19,7 @@\n           _3 = _1;                         // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n           _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n           StorageDead(_3);                 // scope 0 at $DIR/inline_diverging.rs:+1:12: +1:13\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n       }\n   \n       bb1: {"}, {"sha": "bd21405f14b3fcc663cbefef4caa0fb860c690d1", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -72,7 +72,7 @@\n +         _7 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n +         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         _9 = discriminant((*_10));       // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         switchInt(move _9) -> [0: bb3, 1: bb8, 3: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n@@ -92,7 +92,7 @@\n + \n +     bb3: {\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         switchInt(move _7) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         switchInt(move _7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {"}, {"sha": "36ddb189e0d3365eabea7fa2a977a89d9cb29fdf", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -39,7 +39,7 @@\n +         StorageLive(_6);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n +         StorageLive(_7);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n +         _6 = discriminant((*_5));        // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-+         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         switchInt(move _6) -> [0: bb2, otherwise: bb3]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n       }\n   \n       bb2: {"}, {"sha": "2f6f5f87efcc7a8c911a53a449660f9f0b61c53f", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,7 +26,7 @@\n       }\n   \n       bb3: {\n-          switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n+          switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at /the/src/instrument_coverage.rs:+2:12: +2:17\n       }\n   \n       bb4: {"}, {"sha": "b0d5b291b6cb55c734a24f0f43c19eed94c4b341", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,7 +26,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/issue_38669.rs:+3:9: +5:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n         _4 = _1;                         // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n-        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n+        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n     }\n \n     bb3: {"}, {"sha": "c2ea3ac502f89dc3f89446f4700bea44444d19a4", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -65,6 +65,6 @@ fn main() -> () {\n     }\n \n     bb8 (cleanup): {\n-        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+        switchInt(_5) -> [0: bb6, otherwise: bb7]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     }\n }"}, {"sha": "82989c3f071b43d39f022ca6dadc2e802aa7404e", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -96,6 +96,6 @@ fn test() -> () {\n     }\n \n     bb14 (cleanup): {\n-        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+        switchInt(_6) -> [0: bb10, otherwise: bb13]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n }"}, {"sha": "00504273245b1d2a9acb320e5a5929061fb6a401", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -33,7 +33,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n+        switchInt(move _2) -> [0: bb7, otherwise: bb2]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n     }\n \n     bb2: {\n@@ -52,7 +52,7 @@ fn main() -> () {\n     bb4: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n         _5 = discriminant(_1);           // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n-        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n+        switchInt(move _5) -> [0: bb5, otherwise: bb6]; // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n     }\n \n     bb5: {\n@@ -134,19 +134,19 @@ fn main() -> () {\n \n     bb19: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(move _10) -> [0: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb20: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(_7) -> [0: bb15, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb21 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(move _11) -> [0: bb16, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb22 (cleanup): {\n-        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(_7) -> [0: bb12, otherwise: bb21]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n }"}, {"sha": "adfa3a7733b1d6ed1819c1b7a829d2939c7fade5", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -52,7 +52,7 @@ fn test() -> Option<Box<u32>> {\n     bb2: {\n         StorageDead(_7);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n         _8 = discriminant(_6);           // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n     }\n \n     bb3: {"}, {"sha": "17b81633991fec12dfa7ead2aa8edb71d8080e89", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -116,7 +116,7 @@\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb4: {"}, {"sha": "3e035c18db862f3adcda96875dce95195dda1ca9", "filename": "src/test/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -109,7 +109,7 @@ fn main() -> () {\n         StorageDead(_12);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _10 = Not(move _11);             // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_11);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        switchInt(move _10) -> [false: bb4, otherwise: bb3]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     }\n \n     bb3: {\n@@ -218,7 +218,7 @@ fn main() -> () {\n         StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _31 = Not(move _32);             // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        switchInt(move _31) -> [false: bb13, otherwise: bb12]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _31) -> [0: bb13, otherwise: bb12]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     }\n \n     bb12: {"}, {"sha": "e0d6b58f229c4a63be620ad3d46b16ac70629b9e", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -47,7 +47,7 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb2: {\n         _7 = discriminant(_2);           // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _7) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _7) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb3: {\n@@ -66,7 +66,7 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n-        switchInt(move _9) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        switchInt(move _9) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n \n     bb6: {"}, {"sha": "1c69a6232d60631e30f8b36dc538819916abf6bc", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -32,15 +32,15 @@\n   \n       bb1: {\n           StorageDead(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:52: +2:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          switchInt(_2[0 of 4]) -> [0: bb2, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          switchInt(_2[1 of 4]) -> [0: bb3, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          switchInt(_2[2 of 4]) -> [0: bb5, 4294901760: bb6, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb4: {"}, {"sha": "4ee2dae49b3f34652228d4b6b1379a4249313edf", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -16,7 +16,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:+4:5: +6:6\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:+4:8: +4:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:+4:8: +4:12\n-        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:+4:8: +4:12\n+        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:+4:8: +4:12\n     }\n \n     bb1: {"}, {"sha": "9bc7060e958ebf56c4083692fc647fcc9d746149", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -38,7 +38,7 @@\n           _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n           StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n           StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n+          switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n       }\n   \n       bb2: {"}, {"sha": "cf427cfd1e6dbb7a71c4b57401847c4b37cc500a", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -41,7 +41,7 @@\n           _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n           StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n           StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n+          switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n       }\n   \n       bb2: {"}, {"sha": "701c2ad705af2997fdf4e501f706819260a5bd27", "filename": "src/test/mir-opt/lower_array_len_e2e.array_bound.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -19,7 +19,7 @@ fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n         _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n-        switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {"}, {"sha": "0440cfce2893f152437667e746632f89763ecb4b", "filename": "src/test/mir-opt/lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -22,7 +22,7 @@ fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n         _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n-        switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {"}, {"sha": "2b0370cf35800c3f157f81008023abdd6348d4c6", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -33,7 +33,7 @@\n           _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_slice_len.rs:+1:8: +1:27\n           StorageDead(_5);                 // scope 0 at $DIR/lower_slice_len.rs:+1:26: +1:27\n           StorageDead(_4);                 // scope 0 at $DIR/lower_slice_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:+1:8: +1:27\n+          switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:+1:8: +1:27\n       }\n   \n       bb2: {"}, {"sha": "84e4d35f908170560e24550e7d6239ecd7cdeae1", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -32,26 +32,26 @@\n   \n       bb0: {\n -         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n--         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n-+         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n+-         switchInt((_2.0: bool)) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n++         switchInt((_2.0: bool)) -> [0: bb5, otherwise: bb1]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb1: {\n -         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match_arm_scopes.rs:+2:9: +2:22\n-+         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n++         switchInt((_2.1: bool)) -> [0: bb10, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb2: {\n--         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n-+         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n+-         switchInt((_2.1: bool)) -> [0: bb3, otherwise: bb4]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n++         switchInt((_2.0: bool)) -> [0: bb3, otherwise: bb17]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb3: {\n -         falseEdge -> [real: bb13, imaginary: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+2:25: +2:38\n -     }\n - \n -     bb4: {\n--         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n+-         switchInt((_2.0: bool)) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n -     }\n - \n -     bb5: {\n@@ -85,8 +85,8 @@\n           StorageLive(_9);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n           StorageLive(_10);                // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n           _10 = _1;                        // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n--         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n-+         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+-         switchInt(move _10) -> [0: bb10, otherwise: bb9]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n++         switchInt(move _10) -> [0: bb7, otherwise: bb6]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n       }\n   \n -     bb9: {\n@@ -101,8 +101,8 @@\n -     bb10: {\n +     bb7: {\n           _9 = (*_6);                      // scope 0 at $DIR/match_arm_scopes.rs:+2:70: +2:71\n--         switchInt(move _9) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n-+         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+-         switchInt(move _9) -> [0: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb11: {\n@@ -142,8 +142,8 @@\n           StorageLive(_12);                // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n           StorageLive(_13);                // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n           _13 = _1;                        // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n--         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n-+         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+-         switchInt(move _13) -> [0: bb15, otherwise: bb14]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n++         switchInt(move _13) -> [0: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n       }\n   \n -     bb14: {\n@@ -158,8 +158,8 @@\n -     bb15: {\n +     bb12: {\n           _12 = (*_6);                     // scope 0 at $DIR/match_arm_scopes.rs:+2:70: +2:71\n--         switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n-+         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+-         switchInt(move _12) -> [0: bb17, otherwise: bb16]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         switchInt(move _12) -> [0: bb14, otherwise: bb13]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb16: {"}, {"sha": "d51dbf4258c541ba8eb8bde8b49c1fdd325f335c", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -28,12 +28,12 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:+6:5: +11:6\n         FakeRead(ForMatchedPlace(None), _1); // scope 2 at $DIR/match_test.rs:+6:11: +6:12\n         _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n-        switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n+        switchInt(move _6) -> [0: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n     }\n \n     bb1: {\n         _7 = Lt(_1, const 10_i32);       // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n-        switchInt(move _7) -> [false: bb4, otherwise: bb2]; // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n+        switchInt(move _7) -> [0: bb4, otherwise: bb2]; // scope 2 at $DIR/match_test.rs:+7:9: +7:14\n     }\n \n     bb2: {\n@@ -47,20 +47,20 @@ fn main() -> () {\n \n     bb4: {\n         _4 = Le(const 10_i32, _1);       // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n-        switchInt(move _4) -> [false: bb7, otherwise: bb5]; // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n+        switchInt(move _4) -> [0: bb7, otherwise: bb5]; // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n     }\n \n     bb5: {\n         _5 = Le(_1, const 20_i32);       // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n-        switchInt(move _5) -> [false: bb7, otherwise: bb6]; // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n+        switchInt(move _5) -> [0: bb7, otherwise: bb6]; // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n     }\n \n     bb6: {\n         falseEdge -> [real: bb12, imaginary: bb8]; // scope 2 at $DIR/match_test.rs:+8:9: +8:16\n     }\n \n     bb7: {\n-        switchInt(_1) -> [-1_i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:+6:5: +6:12\n+        switchInt(_1) -> [4294967295: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:+6:5: +6:12\n     }\n \n     bb8: {\n@@ -71,7 +71,7 @@ fn main() -> () {\n         _8 = &shallow _1;                // scope 2 at $DIR/match_test.rs:+6:11: +6:12\n         StorageLive(_9);                 // scope 2 at $DIR/match_test.rs:+7:18: +7:19\n         _9 = _2;                         // scope 2 at $DIR/match_test.rs:+7:18: +7:19\n-        switchInt(move _9) -> [false: bb11, otherwise: bb10]; // scope 2 at $DIR/match_test.rs:+7:18: +7:19\n+        switchInt(move _9) -> [0: bb11, otherwise: bb10]; // scope 2 at $DIR/match_test.rs:+7:18: +7:19\n     }\n \n     bb10: {"}, {"sha": "be91b0bfe6820f1ea61ef4ee00ab1d9ca4109a06", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -33,7 +33,7 @@\n           StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n           StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +21:6\n--         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n+-         switchInt(_1) -> [7: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n -     }\n - \n -     bb1: {"}, {"sha": "aa8092ece663a7e53b8cd3efa017ffc6cf763c8e", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -11,12 +11,12 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         _4 = move _3;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -30,7 +30,7 @@\n -     }\n - \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb4: {"}, {"sha": "193104dd30e7e3e711c46390732435ce5cfd704e", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,7 +26,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n           StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n           _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+-         switchInt(move _6) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n -     }\n - \n -     bb1: {\n@@ -45,7 +45,7 @@\n +         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n +         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n           StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+-         switchInt(move _5) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n -     }\n - \n -     bb4: {\n@@ -64,7 +64,7 @@\n +         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n +         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n           StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:75: +2:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-         switchInt(move _4) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n -     }\n - \n -     bb7: {\n@@ -78,7 +78,7 @@\n -     }\n - \n -     bb9: {\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-         switchInt(move _3) -> [0: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n -     }\n - \n -     bb10: {"}, {"sha": "3766d99a43b3b01d2f8f27702da114456e8a324e", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,7 +8,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "b5146cd539f396425714f2d50d210e96e6a8e4b1", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,7 +8,7 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "8e6564a38b0bbbaafe2dfd25125cdb4c2efefaf2", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -62,7 +62,7 @@ fn main() -> () {\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n         _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n-        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        switchInt(move _7) -> [0: bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n     }\n \n     bb2: {"}, {"sha": "74d44c6741a92747b01cf35d5f7d1b52324ff91e", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -62,7 +62,7 @@ fn main() -> () {\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n         _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n-        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        switchInt(move _7) -> [0: bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n     }\n \n     bb2: {"}, {"sha": "69327b7afac7ec3d59cce6f5f5eb20af5501da9a", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -15,7 +15,7 @@ fn unwrap(_1: Option<T>) -> T {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:11: +1:14\n-        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:5: +1:14\n+        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:5: +1:14\n     }\n \n     bb1: {"}, {"sha": "b558c35ac1eeb8a6331e65622ab69bc4364e4cc3", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(move _3, const false);   // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18\n +         _2 = move _3;                    // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18\n           StorageDead(_3);                 // scope 0 at $DIR/not_equal_false.rs:+1:17: +1:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18\n       }\n   \n       bb1: {"}, {"sha": "bb5920b28ca9456e0aae3e953ae2baa5de7d13b5", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -16,7 +16,7 @@\n -         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/remove_fake_borrows.rs:+1:11: +1:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:+1:11: +1:12\n           _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:+1:11: +1:12\n-          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+1:5: +1:12\n+          switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n@@ -25,7 +25,7 @@\n       }\n   \n       bb2: {\n-          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0_i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+1:5: +1:12\n+          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+1:5: +1:12\n       }\n   \n       bb3: {\n@@ -43,7 +43,7 @@\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:+1:11: +1:12\n           StorageLive(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n           _8 = _2;                         // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n-          switchInt(move _8) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n+          switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n       }\n   \n       bb5: {"}, {"sha": "ed1d0b87f603373ada39bd462539ebbf2207f29a", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -63,7 +63,7 @@\n       bb3: {\n -         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:+2:18: +2:19\n           _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n       }\n   \n       bb4: {"}, {"sha": "19b726e74845392e72cec5427d02ef1543fd047d", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -145,7 +145,7 @@ fn array_casts() -> () {\n         StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _22 = Not(move _23);             // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        switchInt(move _22) -> [false: bb4, otherwise: bb3]; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _22) -> [0: bb4, otherwise: bb3]; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     }\n \n     bb3: {"}, {"sha": "6ae16bdb5b88a6b673807d83b9a32fedf2c0b6c6", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -53,14 +53,14 @@\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n -         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+-         switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -     }\n - \n -     bb2: {\n@@ -118,7 +118,7 @@\n -         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n -     bb6: {\n@@ -140,7 +140,7 @@\n -         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n -     bb8: {"}, {"sha": "8cc0c6a18353c2b8ea33f0c5c25d065a6b1a0ff2", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -30,7 +30,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n           _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n+          switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n       }\n   \n       bb1: {\n@@ -45,7 +45,7 @@\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n -         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n +         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n       bb2: {\n@@ -67,8 +67,8 @@\n - \n -     bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+-         switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n -     bb5: {"}, {"sha": "8eb1aa1f3b3d0cf85b697f543aa937b6aad37f9d", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -25,9 +25,9 @@\n       }\n   \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n+-         switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n +     bb2: {\n-+         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n++         switchInt(move _2) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n       }\n   \n -     bb4: {"}, {"sha": "1e66b1f703e3fea1d8bd151d44b25e8239460f10", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,7 +26,7 @@\n       }\n   \n       bb3: {\n-          switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n+          switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:+2:12: +2:17\n       }\n   \n       bb4: {"}, {"sha": "aea0114744352d0b7a2af771f2cdc8db318a670d", "filename": "src/test/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:+1:8: +1:13\n           _1 = const false;                // scope 0 at $DIR/simplify_if.rs:+1:8: +1:13\n--         switchInt(const false) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:+1:8: +1:13\n+-         switchInt(const false) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:+1:8: +1:13\n +         goto -> bb3;                     // scope 0 at $DIR/simplify_if.rs:+1:8: +1:13\n       }\n   "}, {"sha": "a2b55229303d39446a364aadbf2e0025cb202825", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -29,12 +29,12 @@\n           StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n           StorageDead(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n           _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n-          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n+          switchInt(move _5) -> [1: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n       }\n   \n       bb1: {\n           _4 = discriminant((_1.1: std::option::Option<T>)); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n-          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n+          switchInt(move _4) -> [0: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n       }\n   \n       bb2: {"}, {"sha": "9ec138dd82f44b43230b458e4f785038b6d45e92", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -18,7 +18,7 @@\n -         _5 = const false;                // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n -         _5 = const true;                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "f00ac5716a7517c7b29f56dc48688ca8ee37784e", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -16,8 +16,8 @@\n -         _1 = _2;                         // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n +         _1 = const false;                // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:30: +1:31\n--         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n-+         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n+-         switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n++         switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n       }\n   \n       bb1: {"}, {"sha": "391b00effacfa0577a60e22008770449fab227a6", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -37,7 +37,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb4 (cleanup): {\n         _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb5: {\n@@ -48,7 +48,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb6: {\n         _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _8) -> [0: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb7: {\n@@ -68,7 +68,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb10 (cleanup): {\n         _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _12) -> [0: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb11: {\n@@ -79,7 +79,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb12: {\n         _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _14) -> [0: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb13: {\n@@ -96,6 +96,6 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     bb15: {\n         _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         _3 = Len((*_1));                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _2) -> [0_usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _2) -> [0: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n }"}, {"sha": "a5488c1ec7bfee1f31c4ae7fc8d7ab3331b345ab", "filename": "src/test/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -21,7 +21,7 @@\n           discriminant(_2) = 1;            // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n           _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n-          switchInt(move _4) -> [1_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n+          switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n       }\n   \n       bb1: {"}, {"sha": "b254bfeb7c992500212de9570d51fd6ae98b8dbc", "filename": "src/test/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,7 +26,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n         _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb1, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n     }\n \n     bb1: {\n@@ -35,7 +35,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n         ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n         discriminant(_2) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n         _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n     }\n \n     bb2: {\n@@ -44,7 +44,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n         ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n         discriminant(_2) = 0;            // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n         _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n     }\n \n     bb3: {"}, {"sha": "cdbc0681cb8a363ae2acadeeb236c7718ad3c00a", "filename": "src/test/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -15,7 +15,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +2:16\n-        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +2:16\n+        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +2:16\n     }\n \n     bb1: {"}, {"sha": "39ec05277595518ba60e39de7973cdbb8b998c71", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -18,7 +18,7 @@ fn main() -> () {\n         Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-        switchInt(move _3) -> [2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n+        switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n     }\n \n     bb1: {\n@@ -36,7 +36,7 @@ fn main() -> () {\n         Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        switchInt(move _8) -> [4_isize: bb5, 5_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+        switchInt(move _8) -> [4: bb5, 5: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }\n \n     bb2: {"}, {"sha": "598413a1d82de896744266987d7f71afe96793b8", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -19,8 +19,8 @@\n           Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n--         switchInt(move _3) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n-+         switchInt(move _3) -> [2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n+-         switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n++         switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n       }\n   \n       bb1: {\n@@ -65,7 +65,7 @@\n           Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          switchInt(move _8) -> [4_isize: bb8, 5_isize: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+          switchInt(move _8) -> [4: bb8, 5: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }\n   \n       bb6: {"}, {"sha": "c8cd6f6c1ea1d69950ee8f65accd39fb1acdaf6f", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n         _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n         _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n-        switchInt(move _5) -> [2_isize: bb3, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n+        switchInt(move _5) -> [2: bb3, 3: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n     }\n \n     bb1: {\n@@ -66,7 +66,7 @@ fn main() -> () {\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n         _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-        switchInt(move _10) -> [2_isize: bb7, 3_isize: bb5, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+        switchInt(move _10) -> [2: bb7, 3: bb5, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n     }\n \n     bb5: {"}, {"sha": "2aee6d2681d642466be5cab4bb5b8b93da629ea4", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -33,8 +33,8 @@\n           StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n           _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n           _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n--         switchInt(move _5) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n-+         switchInt(move _5) -> [2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n+-         switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n++         switchInt(move _5) -> [2: bb5, 3: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n       }\n   \n       bb1: {\n@@ -87,8 +87,8 @@\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n           _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n--         switchInt(move _10) -> [0_isize: bb9, 1_isize: bb10, 2_isize: bb11, 3_isize: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n-+         switchInt(move _10) -> [2_isize: bb11, 3_isize: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+-         switchInt(move _10) -> [0: bb9, 1: bb10, 2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n++         switchInt(move _10) -> [2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n       }\n   \n       bb7: {"}, {"sha": "58e085dd041972089317a9e7964b4ea9c64c0107", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,8 +8,8 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:11: +1:12\n--         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n-+         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n+-         switchInt(move _2) -> [1: bb3, 2: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n++         switchInt(move _2) -> [1: bb3, 2: bb2, otherwise: bb5]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "e765851eb78b7a75d50d871407ce6e196744ec57", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,8 +8,8 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:11: +1:12\n--         switchInt(move _2) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n-+         switchInt(move _2) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n+-         switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n++         switchInt(move _2) -> [1: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "848bff1d4920c18695bb801134b4d80c0b90b75c", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -27,8 +27,8 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n--         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n-+         switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n+-         switchInt(move _2) -> [1: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n++         switchInt(move _2) -> [1: bb2, otherwise: bb3]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n       }\n   \n       bb2: {\n@@ -38,7 +38,7 @@\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:+4:9: +8:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n--         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n+-         switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n +         unreachable;                     // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n       }\n   "}, {"sha": "fb778470e532323d8958c6dfc3001ec7b5a39bf3", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -29,7 +29,7 @@\n   \n       bb1: {\n           _3 = discriminant(_2);           // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n-          switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n+          switchInt(move _3) -> [1: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n       }\n   \n       bb2: {\n@@ -38,7 +38,7 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:+3:9: +5:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n           _6 = _1;                         // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n-          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n+          switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n       }\n   \n       bb3: {"}, {"sha": "984ef476e10209d4e5f830ccabc9f1af04a989ef", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -24,13 +24,13 @@\n           Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n           discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n -         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n +         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n++         switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          switchInt(((_3 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb2: {"}, {"sha": "1556c240dc57a4335f848ca05289bff38cb366a6", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -24,7 +24,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+1:21: +1:22\n-        switchInt(move _2) -> [false: bb7, otherwise: bb3]; // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n+        switchInt(move _2) -> [0: bb7, otherwise: bb3]; // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n     }\n \n     bb3: {\n@@ -39,7 +39,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb4: {\n         StorageDead(_5);                 // scope 0 at $DIR/while_storage.rs:+2:22: +2:23\n-        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n     }\n \n     bb5: {"}, {"sha": "14b7b17e04d3af476d66cc25a0c917976f8b0e53", "filename": "src/test/rustdoc-ui/doc-cfg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-cfg.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,7 @@ error: `cfg` predicate is not specified\n   --> $DIR/doc-cfg.rs:3:7\n    |\n LL | #[doc(cfg(), cfg(foo, bar))]\n-   |       ^^^^^\n+   |       ^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n \n error: multiple `cfg` predicates are specified\n   --> $DIR/doc-cfg.rs:3:23\n@@ -14,7 +14,7 @@ error: `cfg` predicate is not specified\n   --> $DIR/doc-cfg.rs:7:7\n    |\n LL | #[doc(cfg())]\n-   |       ^^^^^\n+   |       ^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n \n error: multiple `cfg` predicates are specified\n   --> $DIR/doc-cfg.rs:8:16"}, {"sha": "d5b4349c00f6f090078578a84fefd5fffa3fb040", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -14,7 +14,7 @@ error: `cfg` predicate is not specified\n   --> $DIR/cfg-attr-syntax-validation.rs:7:1\n    |\n LL | #[cfg()]\n-   | ^^^^^^^^\n+   | ^^^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n \n error: multiple `cfg` predicates are specified\n   --> $DIR/cfg-attr-syntax-validation.rs:10:10"}, {"sha": "d8b23bc01a96dc40d8c2eac272745c8bf8e56be7", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105257.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -0,0 +1,9 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Trait<T> {\n+    fn fnc<const N: usize = \"\">(&self) {} //~ERROR defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+    fn foo<const N: usize = { std::mem::size_of::<T>() }>(&self) {} //~ERROR defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+}\n+\n+fn main() {}"}, {"sha": "ed7a8cb19a4a5fc45b7d3e1b0a4c64e22adf16fb", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105257.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105257.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -0,0 +1,14 @@\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/issue-105257.rs:5:12\n+   |\n+LL |     fn fnc<const N: usize = \"\">(&self) {}\n+   |            ^^^^^^^^^^^^^^^^^^^\n+\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/issue-105257.rs:6:12\n+   |\n+LL |     fn foo<const N: usize = { std::mem::size_of::<T>() }>(&self) {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "029528c3a8172772da0aa816061918b95613641e", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n    |\n LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |         |\n+   |         expected because this is `<Self as Foo>::Assoc`\n    |\n    = note: expected associated type `<Self as Foo>::Assoc`\n                         found array `[(); _]`"}, {"sha": "6c6eb5d4e86b760a5e337bf0e3e2faa22641098f", "filename": "src/test/ui/debuginfo/issue-105386-debuginfo-ub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// compile-flags: --edition 2021 -Copt-level=3 -Cdebuginfo=2 -Zmir-opt-level=3\n+\n+fn main() {\n+    TranslatorI.visit_pre();\n+}\n+\n+impl TranslatorI {\n+    fn visit_pre(self) {\n+        Some(())\n+            .map(|_| self.flags())\n+            .unwrap_or_else(|| self.flags());\n+    }\n+}\n+\n+struct TranslatorI;\n+\n+impl TranslatorI {\n+    fn flags(&self) {}\n+}"}, {"sha": "3db67cdb5370a154642161edc43cd646195c4c84", "filename": "src/test/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -87,7 +87,10 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:37:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     expected `i32`, found `&i32`\n+   |     expected because this is `i32`\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c7e9af70e64a791e6fcaa489dfbab558c203846f", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-47486.rs:2:10\n    |\n LL |     () < std::mem::size_of::<_>();\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n+   |     --   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n+   |     |\n+   |     expected because this is `()`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11"}, {"sha": "36aba8aa08a0b18a95c35a0187a8c569e2e55f8c", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -5,11 +5,13 @@ LL |         assert_eq!(\"B\", \"B\");\n    |         ^^^^^^^^^\n ...\n LL |     foo!()\n-   |     ------- help: you might be missing a semicolon here: `;`\n-   |     |\n-   |     caused by the macro expansion here\n+   |     ------ caused by the macro expansion here\n    |\n    = note: the usage of `foo!` is likely invalid in expression context\n+help: you might be missing a semicolon here\n+   |\n+LL |     foo!();\n+   |           +\n \n warning: trailing semicolon in macro used in expression position\n   --> $DIR/macro-in-expression-context.rs:5:29"}, {"sha": "d5213e3f5b690d757baa39a21bcdd17b62f97195", "filename": "src/test/ui/numeric/numeric-cast-binop.stderr", "status": "modified", "additions": 396, "deletions": 132, "changes": 528, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:23:16\n    |\n LL |         x_u8 > x_u16;\n-   |                ^^^^^ expected `u8`, found `u16`\n+   |         ----   ^^^^^ expected `u8`, found `u16`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `u16`, matching the type of `x_u16`\n    |\n@@ -13,7 +15,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:25:16\n    |\n LL |         x_u8 > x_u32;\n-   |                ^^^^^ expected `u8`, found `u32`\n+   |         ----   ^^^^^ expected `u8`, found `u32`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `u32`, matching the type of `x_u32`\n    |\n@@ -24,7 +28,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:27:16\n    |\n LL |         x_u8 > x_u64;\n-   |                ^^^^^ expected `u8`, found `u64`\n+   |         ----   ^^^^^ expected `u8`, found `u64`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `u64`, matching the type of `x_u64`\n    |\n@@ -35,7 +41,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:29:16\n    |\n LL |         x_u8 > x_u128;\n-   |                ^^^^^^ expected `u8`, found `u128`\n+   |         ----   ^^^^^^ expected `u8`, found `u128`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `u128`, matching the type of `x_u128`\n    |\n@@ -46,7 +54,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:31:16\n    |\n LL |         x_u8 > x_usize;\n-   |                ^^^^^^^ expected `u8`, found `usize`\n+   |         ----   ^^^^^^^ expected `u8`, found `usize`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `usize`, matching the type of `x_usize`\n    |\n@@ -57,7 +67,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:34:17\n    |\n LL |         x_u16 > x_u8;\n-   |                 ^^^^ expected `u16`, found `u8`\n+   |         -----   ^^^^ expected `u16`, found `u8`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert a `u8` to a `u16`\n    |\n@@ -68,7 +80,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:36:17\n    |\n LL |         x_u16 > x_u32;\n-   |                 ^^^^^ expected `u16`, found `u32`\n+   |         -----   ^^^^^ expected `u16`, found `u32`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `u32`, matching the type of `x_u32`\n    |\n@@ -79,7 +93,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:38:17\n    |\n LL |         x_u16 > x_u64;\n-   |                 ^^^^^ expected `u16`, found `u64`\n+   |         -----   ^^^^^ expected `u16`, found `u64`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `u64`, matching the type of `x_u64`\n    |\n@@ -90,7 +106,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:40:17\n    |\n LL |         x_u16 > x_u128;\n-   |                 ^^^^^^ expected `u16`, found `u128`\n+   |         -----   ^^^^^^ expected `u16`, found `u128`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `u128`, matching the type of `x_u128`\n    |\n@@ -101,7 +119,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:42:17\n    |\n LL |         x_u16 > x_usize;\n-   |                 ^^^^^^^ expected `u16`, found `usize`\n+   |         -----   ^^^^^^^ expected `u16`, found `usize`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `usize`, matching the type of `x_usize`\n    |\n@@ -112,7 +132,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:45:17\n    |\n LL |         x_u32 > x_u8;\n-   |                 ^^^^ expected `u32`, found `u8`\n+   |         -----   ^^^^ expected `u32`, found `u8`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert a `u8` to a `u32`\n    |\n@@ -123,7 +145,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:47:17\n    |\n LL |         x_u32 > x_u16;\n-   |                 ^^^^^ expected `u32`, found `u16`\n+   |         -----   ^^^^^ expected `u32`, found `u16`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert a `u16` to a `u32`\n    |\n@@ -134,7 +158,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:49:17\n    |\n LL |         x_u32 > x_u64;\n-   |                 ^^^^^ expected `u32`, found `u64`\n+   |         -----   ^^^^^ expected `u32`, found `u64`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `u64`, matching the type of `x_u64`\n    |\n@@ -145,7 +171,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:51:17\n    |\n LL |         x_u32 > x_u128;\n-   |                 ^^^^^^ expected `u32`, found `u128`\n+   |         -----   ^^^^^^ expected `u32`, found `u128`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `u128`, matching the type of `x_u128`\n    |\n@@ -156,7 +184,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:53:17\n    |\n LL |         x_u32 > x_usize;\n-   |                 ^^^^^^^ expected `u32`, found `usize`\n+   |         -----   ^^^^^^^ expected `u32`, found `usize`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n@@ -167,7 +197,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:56:17\n    |\n LL |         x_u64 > x_u8;\n-   |                 ^^^^ expected `u64`, found `u8`\n+   |         -----   ^^^^ expected `u64`, found `u8`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert a `u8` to a `u64`\n    |\n@@ -178,7 +210,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:58:17\n    |\n LL |         x_u64 > x_u16;\n-   |                 ^^^^^ expected `u64`, found `u16`\n+   |         -----   ^^^^^ expected `u64`, found `u16`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert a `u16` to a `u64`\n    |\n@@ -189,7 +223,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:60:17\n    |\n LL |         x_u64 > x_u32;\n-   |                 ^^^^^ expected `u64`, found `u32`\n+   |         -----   ^^^^^ expected `u64`, found `u32`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert a `u32` to a `u64`\n    |\n@@ -200,7 +236,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:62:17\n    |\n LL |         x_u64 > x_u128;\n-   |                 ^^^^^^ expected `u64`, found `u128`\n+   |         -----   ^^^^^^ expected `u64`, found `u128`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert `x_u64` from `u64` to `u128`, matching the type of `x_u128`\n    |\n@@ -211,7 +249,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:64:17\n    |\n LL |         x_u64 > x_usize;\n-   |                 ^^^^^^^ expected `u64`, found `usize`\n+   |         -----   ^^^^^^^ expected `u64`, found `usize`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -222,7 +262,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:67:18\n    |\n LL |         x_u128 > x_u8;\n-   |                  ^^^^ expected `u128`, found `u8`\n+   |         ------   ^^^^ expected `u128`, found `u8`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert a `u8` to a `u128`\n    |\n@@ -233,7 +275,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:69:18\n    |\n LL |         x_u128 > x_u16;\n-   |                  ^^^^^ expected `u128`, found `u16`\n+   |         ------   ^^^^^ expected `u128`, found `u16`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert a `u16` to a `u128`\n    |\n@@ -244,7 +288,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:71:18\n    |\n LL |         x_u128 > x_u32;\n-   |                  ^^^^^ expected `u128`, found `u32`\n+   |         ------   ^^^^^ expected `u128`, found `u32`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert a `u32` to a `u128`\n    |\n@@ -255,7 +301,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:73:18\n    |\n LL |         x_u128 > x_u64;\n-   |                  ^^^^^ expected `u128`, found `u64`\n+   |         ------   ^^^^^ expected `u128`, found `u64`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert a `u64` to a `u128`\n    |\n@@ -266,7 +314,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:75:18\n    |\n LL |         x_u128 > x_usize;\n-   |                  ^^^^^^^ expected `u128`, found `usize`\n+   |         ------   ^^^^^^^ expected `u128`, found `usize`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert a `usize` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -277,7 +327,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:78:19\n    |\n LL |         x_usize > x_u8;\n-   |                   ^^^^ expected `usize`, found `u8`\n+   |         -------   ^^^^ expected `usize`, found `u8`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert a `u8` to a `usize`\n    |\n@@ -288,7 +340,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:80:19\n    |\n LL |         x_usize > x_u16;\n-   |                   ^^^^^ expected `usize`, found `u16`\n+   |         -------   ^^^^^ expected `usize`, found `u16`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert a `u16` to a `usize`\n    |\n@@ -299,7 +353,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:82:19\n    |\n LL |         x_usize > x_u32;\n-   |                   ^^^^^ expected `usize`, found `u32`\n+   |         -------   ^^^^^ expected `usize`, found `u32`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -310,7 +366,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:84:19\n    |\n LL |         x_usize > x_u64;\n-   |                   ^^^^^ expected `usize`, found `u64`\n+   |         -------   ^^^^^ expected `usize`, found `u64`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -321,7 +379,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:86:19\n    |\n LL |         x_usize > x_u128;\n-   |                   ^^^^^^ expected `usize`, found `u128`\n+   |         -------   ^^^^^^ expected `usize`, found `u128`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert a `u128` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -332,7 +392,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:92:16\n    |\n LL |         x_i8 > x_i16;\n-   |                ^^^^^ expected `i8`, found `i16`\n+   |         ----   ^^^^^ expected `i8`, found `i16`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert `x_i8` from `i8` to `i16`, matching the type of `x_i16`\n    |\n@@ -343,7 +405,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:94:16\n    |\n LL |         x_i8 > x_i32;\n-   |                ^^^^^ expected `i8`, found `i32`\n+   |         ----   ^^^^^ expected `i8`, found `i32`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert `x_i8` from `i8` to `i32`, matching the type of `x_i32`\n    |\n@@ -354,7 +418,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:96:16\n    |\n LL |         x_i8 > x_i64;\n-   |                ^^^^^ expected `i8`, found `i64`\n+   |         ----   ^^^^^ expected `i8`, found `i64`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert `x_i8` from `i8` to `i64`, matching the type of `x_i64`\n    |\n@@ -365,7 +431,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:98:16\n    |\n LL |         x_i8 > x_i128;\n-   |                ^^^^^^ expected `i8`, found `i128`\n+   |         ----   ^^^^^^ expected `i8`, found `i128`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert `x_i8` from `i8` to `i128`, matching the type of `x_i128`\n    |\n@@ -376,7 +444,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:100:16\n    |\n LL |         x_i8 > x_isize;\n-   |                ^^^^^^^ expected `i8`, found `isize`\n+   |         ----   ^^^^^^^ expected `i8`, found `isize`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert `x_i8` from `i8` to `isize`, matching the type of `x_isize`\n    |\n@@ -387,7 +457,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:103:17\n    |\n LL |         x_i16 > x_i8;\n-   |                 ^^^^ expected `i16`, found `i8`\n+   |         -----   ^^^^ expected `i16`, found `i8`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert an `i8` to an `i16`\n    |\n@@ -398,7 +470,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:105:17\n    |\n LL |         x_i16 > x_i32;\n-   |                 ^^^^^ expected `i16`, found `i32`\n+   |         -----   ^^^^^ expected `i16`, found `i32`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert `x_i16` from `i16` to `i32`, matching the type of `x_i32`\n    |\n@@ -409,7 +483,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:107:17\n    |\n LL |         x_i16 > x_i64;\n-   |                 ^^^^^ expected `i16`, found `i64`\n+   |         -----   ^^^^^ expected `i16`, found `i64`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert `x_i16` from `i16` to `i64`, matching the type of `x_i64`\n    |\n@@ -420,7 +496,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:109:17\n    |\n LL |         x_i16 > x_i128;\n-   |                 ^^^^^^ expected `i16`, found `i128`\n+   |         -----   ^^^^^^ expected `i16`, found `i128`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert `x_i16` from `i16` to `i128`, matching the type of `x_i128`\n    |\n@@ -431,7 +509,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:111:17\n    |\n LL |         x_i16 > x_isize;\n-   |                 ^^^^^^^ expected `i16`, found `isize`\n+   |         -----   ^^^^^^^ expected `i16`, found `isize`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert `x_i16` from `i16` to `isize`, matching the type of `x_isize`\n    |\n@@ -442,7 +522,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:114:17\n    |\n LL |         x_i32 > x_i8;\n-   |                 ^^^^ expected `i32`, found `i8`\n+   |         -----   ^^^^ expected `i32`, found `i8`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert an `i8` to an `i32`\n    |\n@@ -453,7 +535,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:116:17\n    |\n LL |         x_i32 > x_i16;\n-   |                 ^^^^^ expected `i32`, found `i16`\n+   |         -----   ^^^^^ expected `i32`, found `i16`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert an `i16` to an `i32`\n    |\n@@ -464,7 +548,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:118:17\n    |\n LL |         x_i32 > x_i64;\n-   |                 ^^^^^ expected `i32`, found `i64`\n+   |         -----   ^^^^^ expected `i32`, found `i64`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert `x_i32` from `i32` to `i64`, matching the type of `x_i64`\n    |\n@@ -475,7 +561,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:120:17\n    |\n LL |         x_i32 > x_i128;\n-   |                 ^^^^^^ expected `i32`, found `i128`\n+   |         -----   ^^^^^^ expected `i32`, found `i128`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert `x_i32` from `i32` to `i128`, matching the type of `x_i128`\n    |\n@@ -486,7 +574,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:122:17\n    |\n LL |         x_i32 > x_isize;\n-   |                 ^^^^^^^ expected `i32`, found `isize`\n+   |         -----   ^^^^^^^ expected `i32`, found `isize`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n@@ -497,7 +587,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:125:17\n    |\n LL |         x_i64 > x_i8;\n-   |                 ^^^^ expected `i64`, found `i8`\n+   |         -----   ^^^^ expected `i64`, found `i8`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert an `i8` to an `i64`\n    |\n@@ -508,7 +600,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:127:17\n    |\n LL |         x_i64 > x_i16;\n-   |                 ^^^^^ expected `i64`, found `i16`\n+   |         -----   ^^^^^ expected `i64`, found `i16`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert an `i16` to an `i64`\n    |\n@@ -519,7 +613,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:129:17\n    |\n LL |         x_i64 > x_i32;\n-   |                 ^^^^^ expected `i64`, found `i32`\n+   |         -----   ^^^^^ expected `i64`, found `i32`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert an `i32` to an `i64`\n    |\n@@ -530,7 +626,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:131:17\n    |\n LL |         x_i64 > x_i128;\n-   |                 ^^^^^^ expected `i64`, found `i128`\n+   |         -----   ^^^^^^ expected `i64`, found `i128`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert `x_i64` from `i64` to `i128`, matching the type of `x_i128`\n    |\n@@ -541,7 +639,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:133:17\n    |\n LL |         x_i64 > x_isize;\n-   |                 ^^^^^^^ expected `i64`, found `isize`\n+   |         -----   ^^^^^^^ expected `i64`, found `isize`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n@@ -552,7 +652,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:136:18\n    |\n LL |         x_i128 > x_i8;\n-   |                  ^^^^ expected `i128`, found `i8`\n+   |         ------   ^^^^ expected `i128`, found `i8`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert an `i8` to an `i128`\n    |\n@@ -563,7 +665,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:138:18\n    |\n LL |         x_i128 > x_i16;\n-   |                  ^^^^^ expected `i128`, found `i16`\n+   |         ------   ^^^^^ expected `i128`, found `i16`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert an `i16` to an `i128`\n    |\n@@ -574,7 +678,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:140:18\n    |\n LL |         x_i128 > x_i32;\n-   |                  ^^^^^ expected `i128`, found `i32`\n+   |         ------   ^^^^^ expected `i128`, found `i32`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert an `i32` to an `i128`\n    |\n@@ -585,7 +691,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:142:18\n    |\n LL |         x_i128 > x_i64;\n-   |                  ^^^^^ expected `i128`, found `i64`\n+   |         ------   ^^^^^ expected `i128`, found `i64`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert an `i64` to an `i128`\n    |\n@@ -596,7 +704,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:144:18\n    |\n LL |         x_i128 > x_isize;\n-   |                  ^^^^^^^ expected `i128`, found `isize`\n+   |         ------   ^^^^^^^ expected `i128`, found `isize`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert an `isize` to an `i128` and panic if the converted value doesn't fit\n    |\n@@ -607,7 +717,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:147:19\n    |\n LL |         x_isize > x_i8;\n-   |                   ^^^^ expected `isize`, found `i8`\n+   |         -------   ^^^^ expected `isize`, found `i8`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert an `i8` to an `isize`\n    |\n@@ -618,7 +730,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:149:19\n    |\n LL |         x_isize > x_i16;\n-   |                   ^^^^^ expected `isize`, found `i16`\n+   |         -------   ^^^^^ expected `isize`, found `i16`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert an `i16` to an `isize`\n    |\n@@ -629,7 +743,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:151:19\n    |\n LL |         x_isize > x_i32;\n-   |                   ^^^^^ expected `isize`, found `i32`\n+   |         -------   ^^^^^ expected `isize`, found `i32`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -640,7 +756,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:153:19\n    |\n LL |         x_isize > x_i64;\n-   |                   ^^^^^ expected `isize`, found `i64`\n+   |         -------   ^^^^^ expected `isize`, found `i64`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -651,7 +769,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:155:19\n    |\n LL |         x_isize > x_i128;\n-   |                   ^^^^^^ expected `isize`, found `i128`\n+   |         -------   ^^^^^^ expected `isize`, found `i128`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert an `i128` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -662,7 +782,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:161:16\n    |\n LL |         x_u8 > x_i8;\n-   |                ^^^^ expected `u8`, found `i8`\n+   |         ----   ^^^^ expected `u8`, found `i8`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n@@ -673,7 +795,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:163:16\n    |\n LL |         x_u8 > x_i16;\n-   |                ^^^^^ expected `u8`, found `i16`\n+   |         ----   ^^^^^ expected `u8`, found `i16`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i16`, matching the type of `x_i16`\n    |\n@@ -684,7 +808,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:165:16\n    |\n LL |         x_u8 > x_i32;\n-   |                ^^^^^ expected `u8`, found `i32`\n+   |         ----   ^^^^^ expected `u8`, found `i32`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i32`, matching the type of `x_i32`\n    |\n@@ -695,7 +821,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:167:16\n    |\n LL |         x_u8 > x_i64;\n-   |                ^^^^^ expected `u8`, found `i64`\n+   |         ----   ^^^^^ expected `u8`, found `i64`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i64`, matching the type of `x_i64`\n    |\n@@ -706,7 +834,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:169:16\n    |\n LL |         x_u8 > x_i128;\n-   |                ^^^^^^ expected `u8`, found `i128`\n+   |         ----   ^^^^^^ expected `u8`, found `i128`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i128`, matching the type of `x_i128`\n    |\n@@ -717,7 +847,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:171:16\n    |\n LL |         x_u8 > x_isize;\n-   |                ^^^^^^^ expected `u8`, found `isize`\n+   |         ----   ^^^^^^^ expected `u8`, found `isize`\n+   |         |\n+   |         expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `isize`, matching the type of `x_isize`\n    |\n@@ -728,7 +860,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:174:17\n    |\n LL |         x_u16 > x_i8;\n-   |                 ^^^^ expected `u16`, found `i8`\n+   |         -----   ^^^^ expected `u16`, found `i8`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n@@ -739,7 +873,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:176:17\n    |\n LL |         x_u16 > x_i16;\n-   |                 ^^^^^ expected `u16`, found `i16`\n+   |         -----   ^^^^^ expected `u16`, found `i16`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n@@ -750,7 +886,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:178:17\n    |\n LL |         x_u16 > x_i32;\n-   |                 ^^^^^ expected `u16`, found `i32`\n+   |         -----   ^^^^^ expected `u16`, found `i32`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i32`, matching the type of `x_i32`\n    |\n@@ -761,7 +899,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:180:17\n    |\n LL |         x_u16 > x_i64;\n-   |                 ^^^^^ expected `u16`, found `i64`\n+   |         -----   ^^^^^ expected `u16`, found `i64`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i64`, matching the type of `x_i64`\n    |\n@@ -772,7 +912,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:182:17\n    |\n LL |         x_u16 > x_i128;\n-   |                 ^^^^^^ expected `u16`, found `i128`\n+   |         -----   ^^^^^^ expected `u16`, found `i128`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i128`, matching the type of `x_i128`\n    |\n@@ -783,7 +925,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:184:17\n    |\n LL |         x_u16 > x_isize;\n-   |                 ^^^^^^^ expected `u16`, found `isize`\n+   |         -----   ^^^^^^^ expected `u16`, found `isize`\n+   |         |\n+   |         expected because this is `u16`\n    |\n help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n@@ -794,7 +938,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:187:17\n    |\n LL |         x_u32 > x_i8;\n-   |                 ^^^^ expected `u32`, found `i8`\n+   |         -----   ^^^^ expected `u32`, found `i8`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n@@ -805,7 +951,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:189:17\n    |\n LL |         x_u32 > x_i16;\n-   |                 ^^^^^ expected `u32`, found `i16`\n+   |         -----   ^^^^^ expected `u32`, found `i16`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n@@ -816,7 +964,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:191:17\n    |\n LL |         x_u32 > x_i32;\n-   |                 ^^^^^ expected `u32`, found `i32`\n+   |         -----   ^^^^^ expected `u32`, found `i32`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n@@ -827,7 +977,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:193:17\n    |\n LL |         x_u32 > x_i64;\n-   |                 ^^^^^ expected `u32`, found `i64`\n+   |         -----   ^^^^^ expected `u32`, found `i64`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `i64`, matching the type of `x_i64`\n    |\n@@ -838,7 +990,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:195:17\n    |\n LL |         x_u32 > x_i128;\n-   |                 ^^^^^^ expected `u32`, found `i128`\n+   |         -----   ^^^^^^ expected `u32`, found `i128`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `i128`, matching the type of `x_i128`\n    |\n@@ -849,7 +1003,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:197:17\n    |\n LL |         x_u32 > x_isize;\n-   |                 ^^^^^^^ expected `u32`, found `isize`\n+   |         -----   ^^^^^^^ expected `u32`, found `isize`\n+   |         |\n+   |         expected because this is `u32`\n    |\n help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n@@ -860,7 +1016,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:200:17\n    |\n LL |         x_u64 > x_i8;\n-   |                 ^^^^ expected `u64`, found `i8`\n+   |         -----   ^^^^ expected `u64`, found `i8`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -871,7 +1029,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:202:17\n    |\n LL |         x_u64 > x_i16;\n-   |                 ^^^^^ expected `u64`, found `i16`\n+   |         -----   ^^^^^ expected `u64`, found `i16`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -882,7 +1042,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:204:17\n    |\n LL |         x_u64 > x_i32;\n-   |                 ^^^^^ expected `u64`, found `i32`\n+   |         -----   ^^^^^ expected `u64`, found `i32`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -893,7 +1055,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:206:17\n    |\n LL |         x_u64 > x_i64;\n-   |                 ^^^^^ expected `u64`, found `i64`\n+   |         -----   ^^^^^ expected `u64`, found `i64`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -904,7 +1068,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:208:17\n    |\n LL |         x_u64 > x_i128;\n-   |                 ^^^^^^ expected `u64`, found `i128`\n+   |         -----   ^^^^^^ expected `u64`, found `i128`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert `x_u64` from `u64` to `i128`, matching the type of `x_i128`\n    |\n@@ -915,7 +1081,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:210:17\n    |\n LL |         x_u64 > x_isize;\n-   |                 ^^^^^^^ expected `u64`, found `isize`\n+   |         -----   ^^^^^^^ expected `u64`, found `isize`\n+   |         |\n+   |         expected because this is `u64`\n    |\n help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n@@ -926,7 +1094,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:213:18\n    |\n LL |         x_u128 > x_i8;\n-   |                  ^^^^ expected `u128`, found `i8`\n+   |         ------   ^^^^ expected `u128`, found `i8`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `i8` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -937,7 +1107,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:215:18\n    |\n LL |         x_u128 > x_i16;\n-   |                  ^^^^^ expected `u128`, found `i16`\n+   |         ------   ^^^^^ expected `u128`, found `i16`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `i16` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -948,7 +1120,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:217:18\n    |\n LL |         x_u128 > x_i32;\n-   |                  ^^^^^ expected `u128`, found `i32`\n+   |         ------   ^^^^^ expected `u128`, found `i32`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `i32` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -959,7 +1133,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:219:18\n    |\n LL |         x_u128 > x_i64;\n-   |                  ^^^^^ expected `u128`, found `i64`\n+   |         ------   ^^^^^ expected `u128`, found `i64`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `i64` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -970,7 +1146,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:221:18\n    |\n LL |         x_u128 > x_i128;\n-   |                  ^^^^^^ expected `u128`, found `i128`\n+   |         ------   ^^^^^^ expected `u128`, found `i128`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `i128` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -981,7 +1159,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:223:18\n    |\n LL |         x_u128 > x_isize;\n-   |                  ^^^^^^^ expected `u128`, found `isize`\n+   |         ------   ^^^^^^^ expected `u128`, found `isize`\n+   |         |\n+   |         expected because this is `u128`\n    |\n help: you can convert an `isize` to a `u128` and panic if the converted value doesn't fit\n    |\n@@ -992,7 +1172,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:226:19\n    |\n LL |         x_usize > x_i8;\n-   |                   ^^^^ expected `usize`, found `i8`\n+   |         -------   ^^^^ expected `usize`, found `i8`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1003,7 +1185,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:228:19\n    |\n LL |         x_usize > x_i16;\n-   |                   ^^^^^ expected `usize`, found `i16`\n+   |         -------   ^^^^^ expected `usize`, found `i16`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1014,7 +1198,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:230:19\n    |\n LL |         x_usize > x_i32;\n-   |                   ^^^^^ expected `usize`, found `i32`\n+   |         -------   ^^^^^ expected `usize`, found `i32`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1025,7 +1211,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:232:19\n    |\n LL |         x_usize > x_i64;\n-   |                   ^^^^^ expected `usize`, found `i64`\n+   |         -------   ^^^^^ expected `usize`, found `i64`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1036,7 +1224,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:234:19\n    |\n LL |         x_usize > x_i128;\n-   |                   ^^^^^^ expected `usize`, found `i128`\n+   |         -------   ^^^^^^ expected `usize`, found `i128`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `i128` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1047,7 +1237,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:236:19\n    |\n LL |         x_usize > x_isize;\n-   |                   ^^^^^^^ expected `usize`, found `isize`\n+   |         -------   ^^^^^^^ expected `usize`, found `isize`\n+   |         |\n+   |         expected because this is `usize`\n    |\n help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n@@ -1058,7 +1250,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:242:16\n    |\n LL |         x_i8 > x_u8;\n-   |                ^^^^ expected `i8`, found `u8`\n+   |         ----   ^^^^ expected `i8`, found `u8`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1069,7 +1263,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:244:16\n    |\n LL |         x_i8 > x_u16;\n-   |                ^^^^^ expected `i8`, found `u16`\n+   |         ----   ^^^^^ expected `i8`, found `u16`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1080,7 +1276,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:246:16\n    |\n LL |         x_i8 > x_u32;\n-   |                ^^^^^ expected `i8`, found `u32`\n+   |         ----   ^^^^^ expected `i8`, found `u32`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1091,7 +1289,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:248:16\n    |\n LL |         x_i8 > x_u64;\n-   |                ^^^^^ expected `i8`, found `u64`\n+   |         ----   ^^^^^ expected `i8`, found `u64`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1102,7 +1302,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:250:16\n    |\n LL |         x_i8 > x_u128;\n-   |                ^^^^^^ expected `i8`, found `u128`\n+   |         ----   ^^^^^^ expected `i8`, found `u128`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `u128` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1113,7 +1315,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:252:16\n    |\n LL |         x_i8 > x_usize;\n-   |                ^^^^^^^ expected `i8`, found `usize`\n+   |         ----   ^^^^^^^ expected `i8`, found `usize`\n+   |         |\n+   |         expected because this is `i8`\n    |\n help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n@@ -1124,7 +1328,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:255:17\n    |\n LL |         x_i16 > x_u8;\n-   |                 ^^^^ expected `i16`, found `u8`\n+   |         -----   ^^^^ expected `i16`, found `u8`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `u8` to an `i16`\n    |\n@@ -1135,7 +1341,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:257:17\n    |\n LL |         x_i16 > x_u16;\n-   |                 ^^^^^ expected `i16`, found `u16`\n+   |         -----   ^^^^^ expected `i16`, found `u16`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n@@ -1146,7 +1354,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:259:17\n    |\n LL |         x_i16 > x_u32;\n-   |                 ^^^^^ expected `i16`, found `u32`\n+   |         -----   ^^^^^ expected `i16`, found `u32`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n@@ -1157,7 +1367,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:261:17\n    |\n LL |         x_i16 > x_u64;\n-   |                 ^^^^^ expected `i16`, found `u64`\n+   |         -----   ^^^^^ expected `i16`, found `u64`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n@@ -1168,7 +1380,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:263:17\n    |\n LL |         x_i16 > x_u128;\n-   |                 ^^^^^^ expected `i16`, found `u128`\n+   |         -----   ^^^^^^ expected `i16`, found `u128`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `u128` to an `i16` and panic if the converted value doesn't fit\n    |\n@@ -1179,7 +1393,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:265:17\n    |\n LL |         x_i16 > x_usize;\n-   |                 ^^^^^^^ expected `i16`, found `usize`\n+   |         -----   ^^^^^^^ expected `i16`, found `usize`\n+   |         |\n+   |         expected because this is `i16`\n    |\n help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n@@ -1190,7 +1406,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:268:17\n    |\n LL |         x_i32 > x_u8;\n-   |                 ^^^^ expected `i32`, found `u8`\n+   |         -----   ^^^^ expected `i32`, found `u8`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `u8` to an `i32`\n    |\n@@ -1201,7 +1419,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:270:17\n    |\n LL |         x_i32 > x_u16;\n-   |                 ^^^^^ expected `i32`, found `u16`\n+   |         -----   ^^^^^ expected `i32`, found `u16`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `u16` to an `i32`\n    |\n@@ -1212,7 +1432,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:272:17\n    |\n LL |         x_i32 > x_u32;\n-   |                 ^^^^^ expected `i32`, found `u32`\n+   |         -----   ^^^^^ expected `i32`, found `u32`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n@@ -1223,7 +1445,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:274:17\n    |\n LL |         x_i32 > x_u64;\n-   |                 ^^^^^ expected `i32`, found `u64`\n+   |         -----   ^^^^^ expected `i32`, found `u64`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n@@ -1234,7 +1458,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:276:17\n    |\n LL |         x_i32 > x_u128;\n-   |                 ^^^^^^ expected `i32`, found `u128`\n+   |         -----   ^^^^^^ expected `i32`, found `u128`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `u128` to an `i32` and panic if the converted value doesn't fit\n    |\n@@ -1245,7 +1471,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:278:17\n    |\n LL |         x_i32 > x_usize;\n-   |                 ^^^^^^^ expected `i32`, found `usize`\n+   |         -----   ^^^^^^^ expected `i32`, found `usize`\n+   |         |\n+   |         expected because this is `i32`\n    |\n help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n@@ -1256,7 +1484,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:281:17\n    |\n LL |         x_i64 > x_u8;\n-   |                 ^^^^ expected `i64`, found `u8`\n+   |         -----   ^^^^ expected `i64`, found `u8`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `u8` to an `i64`\n    |\n@@ -1267,7 +1497,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:283:17\n    |\n LL |         x_i64 > x_u16;\n-   |                 ^^^^^ expected `i64`, found `u16`\n+   |         -----   ^^^^^ expected `i64`, found `u16`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `u16` to an `i64`\n    |\n@@ -1278,7 +1510,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:285:17\n    |\n LL |         x_i64 > x_u32;\n-   |                 ^^^^^ expected `i64`, found `u32`\n+   |         -----   ^^^^^ expected `i64`, found `u32`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `u32` to an `i64`\n    |\n@@ -1289,7 +1523,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:287:17\n    |\n LL |         x_i64 > x_u64;\n-   |                 ^^^^^ expected `i64`, found `u64`\n+   |         -----   ^^^^^ expected `i64`, found `u64`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n@@ -1300,7 +1536,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:289:17\n    |\n LL |         x_i64 > x_u128;\n-   |                 ^^^^^^ expected `i64`, found `u128`\n+   |         -----   ^^^^^^ expected `i64`, found `u128`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `u128` to an `i64` and panic if the converted value doesn't fit\n    |\n@@ -1311,7 +1549,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:291:17\n    |\n LL |         x_i64 > x_usize;\n-   |                 ^^^^^^^ expected `i64`, found `usize`\n+   |         -----   ^^^^^^^ expected `i64`, found `usize`\n+   |         |\n+   |         expected because this is `i64`\n    |\n help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n@@ -1322,7 +1562,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:294:18\n    |\n LL |         x_i128 > x_u8;\n-   |                  ^^^^ expected `i128`, found `u8`\n+   |         ------   ^^^^ expected `i128`, found `u8`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `u8` to an `i128`\n    |\n@@ -1333,7 +1575,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:296:18\n    |\n LL |         x_i128 > x_u16;\n-   |                  ^^^^^ expected `i128`, found `u16`\n+   |         ------   ^^^^^ expected `i128`, found `u16`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `u16` to an `i128`\n    |\n@@ -1344,7 +1588,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:298:18\n    |\n LL |         x_i128 > x_u32;\n-   |                  ^^^^^ expected `i128`, found `u32`\n+   |         ------   ^^^^^ expected `i128`, found `u32`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `u32` to an `i128`\n    |\n@@ -1355,7 +1601,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:300:18\n    |\n LL |         x_i128 > x_u64;\n-   |                  ^^^^^ expected `i128`, found `u64`\n+   |         ------   ^^^^^ expected `i128`, found `u64`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `u64` to an `i128`\n    |\n@@ -1366,7 +1614,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:302:18\n    |\n LL |         x_i128 > x_u128;\n-   |                  ^^^^^^ expected `i128`, found `u128`\n+   |         ------   ^^^^^^ expected `i128`, found `u128`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `u128` to an `i128` and panic if the converted value doesn't fit\n    |\n@@ -1377,7 +1627,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:304:18\n    |\n LL |         x_i128 > x_usize;\n-   |                  ^^^^^^^ expected `i128`, found `usize`\n+   |         ------   ^^^^^^^ expected `i128`, found `usize`\n+   |         |\n+   |         expected because this is `i128`\n    |\n help: you can convert a `usize` to an `i128` and panic if the converted value doesn't fit\n    |\n@@ -1388,7 +1640,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:307:19\n    |\n LL |         x_isize > x_u8;\n-   |                   ^^^^ expected `isize`, found `u8`\n+   |         -------   ^^^^ expected `isize`, found `u8`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `u8` to an `isize`\n    |\n@@ -1399,7 +1653,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:309:19\n    |\n LL |         x_isize > x_u16;\n-   |                   ^^^^^ expected `isize`, found `u16`\n+   |         -------   ^^^^^ expected `isize`, found `u16`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -1410,7 +1666,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:311:19\n    |\n LL |         x_isize > x_u32;\n-   |                   ^^^^^ expected `isize`, found `u32`\n+   |         -------   ^^^^^ expected `isize`, found `u32`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -1421,7 +1679,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:313:19\n    |\n LL |         x_isize > x_u64;\n-   |                   ^^^^^ expected `isize`, found `u64`\n+   |         -------   ^^^^^ expected `isize`, found `u64`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -1432,7 +1692,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:315:19\n    |\n LL |         x_isize > x_u128;\n-   |                   ^^^^^^ expected `isize`, found `u128`\n+   |         -------   ^^^^^^ expected `isize`, found `u128`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `u128` to an `isize` and panic if the converted value doesn't fit\n    |\n@@ -1443,7 +1705,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:317:19\n    |\n LL |         x_isize > x_usize;\n-   |                   ^^^^^^^ expected `isize`, found `usize`\n+   |         -------   ^^^^^^^ expected `isize`, found `usize`\n+   |         |\n+   |         expected because this is `isize`\n    |\n help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |"}, {"sha": "c244e479d24c6b00493db40c33639faf29f2a137", "filename": "src/test/ui/numeric/numeric-cast-no-fix.stderr", "status": "modified", "additions": 108, "deletions": 36, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,47 +2,59 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:10:15\n    |\n LL |     x_usize > -1_isize;\n-   |               ^^^^^^^^ expected `usize`, found `isize`\n+   |     -------   ^^^^^^^^ expected `usize`, found `isize`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_isize` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:12:14\n    |\n LL |     x_u128 > -1_isize;\n-   |              ^^^^^^^^ expected `u128`, found `isize`\n+   |     ------   ^^^^^^^^ expected `u128`, found `isize`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_isize` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:14:13\n    |\n LL |     x_u64 > -1_isize;\n-   |             ^^^^^^^^ expected `u64`, found `isize`\n+   |     -----   ^^^^^^^^ expected `u64`, found `isize`\n+   |     |\n+   |     expected because this is `u64`\n    |\n    = note: `-1_isize` cannot fit into type `u64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:16:13\n    |\n LL |     x_u32 > -1_isize;\n-   |             ^^^^^^^^ expected `u32`, found `isize`\n+   |     -----   ^^^^^^^^ expected `u32`, found `isize`\n+   |     |\n+   |     expected because this is `u32`\n    |\n    = note: `-1_isize` cannot fit into type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:18:13\n    |\n LL |     x_u16 > -1_isize;\n-   |             ^^^^^^^^ expected `u16`, found `isize`\n+   |     -----   ^^^^^^^^ expected `u16`, found `isize`\n+   |     |\n+   |     expected because this is `u16`\n    |\n    = note: `-1_isize` cannot fit into type `u16`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:20:12\n    |\n LL |     x_u8 > -1_isize;\n-   |            ^^^^^^^^ expected `u8`, found `isize`\n+   |     ----   ^^^^^^^^ expected `u8`, found `isize`\n+   |     |\n+   |     expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `isize`, matching the type of `-1_isize`\n    |\n@@ -53,23 +65,29 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:23:15\n    |\n LL |     x_usize > -1_i128;\n-   |               ^^^^^^^ expected `usize`, found `i128`\n+   |     -------   ^^^^^^^ expected `usize`, found `i128`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_i128` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:25:14\n    |\n LL |     x_u128 > -1_i128;\n-   |              ^^^^^^^ expected `u128`, found `i128`\n+   |     ------   ^^^^^^^ expected `u128`, found `i128`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_i128` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:27:13\n    |\n LL |     x_u64 > -1_i128;\n-   |             ^^^^^^^ expected `u64`, found `i128`\n+   |     -----   ^^^^^^^ expected `u64`, found `i128`\n+   |     |\n+   |     expected because this is `u64`\n    |\n help: you can convert `x_u64` from `u64` to `i128`, matching the type of `-1_i128`\n    |\n@@ -80,7 +98,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:29:13\n    |\n LL |     x_u32 > -1_i128;\n-   |             ^^^^^^^ expected `u32`, found `i128`\n+   |     -----   ^^^^^^^ expected `u32`, found `i128`\n+   |     |\n+   |     expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `i128`, matching the type of `-1_i128`\n    |\n@@ -91,7 +111,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:31:13\n    |\n LL |     x_u16 > -1_i128;\n-   |             ^^^^^^^ expected `u16`, found `i128`\n+   |     -----   ^^^^^^^ expected `u16`, found `i128`\n+   |     |\n+   |     expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i128`, matching the type of `-1_i128`\n    |\n@@ -102,7 +124,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:33:12\n    |\n LL |     x_u8 > -1_i128;\n-   |            ^^^^^^^ expected `u8`, found `i128`\n+   |     ----   ^^^^^^^ expected `u8`, found `i128`\n+   |     |\n+   |     expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i128`, matching the type of `-1_i128`\n    |\n@@ -113,31 +137,39 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:36:15\n    |\n LL |     x_usize > -1_i64;\n-   |               ^^^^^^ expected `usize`, found `i64`\n+   |     -------   ^^^^^^ expected `usize`, found `i64`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_i64` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:38:14\n    |\n LL |     x_u128 > -1_i64;\n-   |              ^^^^^^ expected `u128`, found `i64`\n+   |     ------   ^^^^^^ expected `u128`, found `i64`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_i64` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:40:13\n    |\n LL |     x_u64 > -1_i64;\n-   |             ^^^^^^ expected `u64`, found `i64`\n+   |     -----   ^^^^^^ expected `u64`, found `i64`\n+   |     |\n+   |     expected because this is `u64`\n    |\n    = note: `-1_i64` cannot fit into type `u64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:42:13\n    |\n LL |     x_u32 > -1_i64;\n-   |             ^^^^^^ expected `u32`, found `i64`\n+   |     -----   ^^^^^^ expected `u32`, found `i64`\n+   |     |\n+   |     expected because this is `u32`\n    |\n help: you can convert `x_u32` from `u32` to `i64`, matching the type of `-1_i64`\n    |\n@@ -148,7 +180,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:44:13\n    |\n LL |     x_u16 > -1_i64;\n-   |             ^^^^^^ expected `u16`, found `i64`\n+   |     -----   ^^^^^^ expected `u16`, found `i64`\n+   |     |\n+   |     expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i64`, matching the type of `-1_i64`\n    |\n@@ -159,7 +193,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:46:12\n    |\n LL |     x_u8 > -1_i64;\n-   |            ^^^^^^ expected `u8`, found `i64`\n+   |     ----   ^^^^^^ expected `u8`, found `i64`\n+   |     |\n+   |     expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i64`, matching the type of `-1_i64`\n    |\n@@ -170,39 +206,49 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:49:15\n    |\n LL |     x_usize > -1_i32;\n-   |               ^^^^^^ expected `usize`, found `i32`\n+   |     -------   ^^^^^^ expected `usize`, found `i32`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_i32` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:51:14\n    |\n LL |     x_u128 > -1_i32;\n-   |              ^^^^^^ expected `u128`, found `i32`\n+   |     ------   ^^^^^^ expected `u128`, found `i32`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_i32` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:53:13\n    |\n LL |     x_u64 > -1_i32;\n-   |             ^^^^^^ expected `u64`, found `i32`\n+   |     -----   ^^^^^^ expected `u64`, found `i32`\n+   |     |\n+   |     expected because this is `u64`\n    |\n    = note: `-1_i32` cannot fit into type `u64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:55:13\n    |\n LL |     x_u32 > -1_i32;\n-   |             ^^^^^^ expected `u32`, found `i32`\n+   |     -----   ^^^^^^ expected `u32`, found `i32`\n+   |     |\n+   |     expected because this is `u32`\n    |\n    = note: `-1_i32` cannot fit into type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:57:13\n    |\n LL |     x_u16 > -1_i32;\n-   |             ^^^^^^ expected `u16`, found `i32`\n+   |     -----   ^^^^^^ expected `u16`, found `i32`\n+   |     |\n+   |     expected because this is `u16`\n    |\n help: you can convert `x_u16` from `u16` to `i32`, matching the type of `-1_i32`\n    |\n@@ -213,7 +259,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:59:12\n    |\n LL |     x_u8 > -1_i32;\n-   |            ^^^^^^ expected `u8`, found `i32`\n+   |     ----   ^^^^^^ expected `u8`, found `i32`\n+   |     |\n+   |     expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i32`, matching the type of `-1_i32`\n    |\n@@ -224,47 +272,59 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:62:15\n    |\n LL |     x_usize > -1_i16;\n-   |               ^^^^^^ expected `usize`, found `i16`\n+   |     -------   ^^^^^^ expected `usize`, found `i16`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_i16` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:64:14\n    |\n LL |     x_u128 > -1_i16;\n-   |              ^^^^^^ expected `u128`, found `i16`\n+   |     ------   ^^^^^^ expected `u128`, found `i16`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_i16` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:66:13\n    |\n LL |     x_u64 > -1_i16;\n-   |             ^^^^^^ expected `u64`, found `i16`\n+   |     -----   ^^^^^^ expected `u64`, found `i16`\n+   |     |\n+   |     expected because this is `u64`\n    |\n    = note: `-1_i16` cannot fit into type `u64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:68:13\n    |\n LL |     x_u32 > -1_i16;\n-   |             ^^^^^^ expected `u32`, found `i16`\n+   |     -----   ^^^^^^ expected `u32`, found `i16`\n+   |     |\n+   |     expected because this is `u32`\n    |\n    = note: `-1_i16` cannot fit into type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:70:13\n    |\n LL |     x_u16 > -1_i16;\n-   |             ^^^^^^ expected `u16`, found `i16`\n+   |     -----   ^^^^^^ expected `u16`, found `i16`\n+   |     |\n+   |     expected because this is `u16`\n    |\n    = note: `-1_i16` cannot fit into type `u16`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:72:12\n    |\n LL |     x_u8 > -1_i16;\n-   |            ^^^^^^ expected `u8`, found `i16`\n+   |     ----   ^^^^^^ expected `u8`, found `i16`\n+   |     |\n+   |     expected because this is `u8`\n    |\n help: you can convert `x_u8` from `u8` to `i16`, matching the type of `-1_i16`\n    |\n@@ -275,47 +335,59 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:75:15\n    |\n LL |     x_usize > -1_i8;\n-   |               ^^^^^ expected `usize`, found `i8`\n+   |     -------   ^^^^^ expected `usize`, found `i8`\n+   |     |\n+   |     expected because this is `usize`\n    |\n    = note: `-1_i8` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:77:14\n    |\n LL |     x_u128 > -1_i8;\n-   |              ^^^^^ expected `u128`, found `i8`\n+   |     ------   ^^^^^ expected `u128`, found `i8`\n+   |     |\n+   |     expected because this is `u128`\n    |\n    = note: `-1_i8` cannot fit into type `u128`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:79:13\n    |\n LL |     x_u64 > -1_i8;\n-   |             ^^^^^ expected `u64`, found `i8`\n+   |     -----   ^^^^^ expected `u64`, found `i8`\n+   |     |\n+   |     expected because this is `u64`\n    |\n    = note: `-1_i8` cannot fit into type `u64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:81:13\n    |\n LL |     x_u32 > -1_i8;\n-   |             ^^^^^ expected `u32`, found `i8`\n+   |     -----   ^^^^^ expected `u32`, found `i8`\n+   |     |\n+   |     expected because this is `u32`\n    |\n    = note: `-1_i8` cannot fit into type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:83:13\n    |\n LL |     x_u16 > -1_i8;\n-   |             ^^^^^ expected `u16`, found `i8`\n+   |     -----   ^^^^^ expected `u16`, found `i8`\n+   |     |\n+   |     expected because this is `u16`\n    |\n    = note: `-1_i8` cannot fit into type `u16`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-no-fix.rs:85:12\n    |\n LL |     x_u8 > -1_i8;\n-   |            ^^^^^ expected `u8`, found `i8`\n+   |     ----   ^^^^^ expected `u8`, found `i8`\n+   |     |\n+   |     expected because this is `u8`\n    |\n    = note: `-1_i8` cannot fit into type `u8`\n "}, {"sha": "7d17ea59647ec043f7eb0b5f071f80442ec4ef5d", "filename": "src/test/ui/parser/bare-struct-body.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fparser%2Fbare-struct-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fparser%2Fbare-struct-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbare-struct-body.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -34,7 +34,9 @@ error[E0308]: mismatched types\n   --> $DIR/bare-struct-body.rs:11:14\n    |\n LL |     x.val == 42;\n-   |              ^^ expected `()`, found integer\n+   |     -----    ^^ expected `()`, found integer\n+   |     |\n+   |     expected because this is `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ae243816d7c2d55af0aebf01fa34cc452b2a9b1a", "filename": "src/test/ui/parser/chained-comparison-suggestion.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fparser%2Fchained-comparison-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fparser%2Fchained-comparison-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fchained-comparison-suggestion.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -123,37 +123,49 @@ error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:4:14\n    |\n LL |     1 < 2 <= 3;\n-   |              ^ expected `bool`, found integer\n+   |     -----    ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:13:14\n    |\n LL |     1 <= 2 < 3;\n-   |              ^ expected `bool`, found integer\n+   |     ------   ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:18:15\n    |\n LL |     1 <= 2 <= 3;\n-   |               ^ expected `bool`, found integer\n+   |     ------    ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:23:14\n    |\n LL |     1 > 2 >= 3;\n-   |              ^ expected `bool`, found integer\n+   |     -----    ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:36:15\n    |\n LL |     1 >= 2 >= 3;\n-   |               ^ expected `bool`, found integer\n+   |     ------    ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/chained-comparison-suggestion.rs:49:15\n    |\n LL |     1 == 2 == 3;\n-   |               ^ expected `bool`, found integer\n+   |     ------    ^ expected `bool`, found integer\n+   |     |\n+   |     expected because this is `bool`\n \n error: aborting due to 17 previous errors\n "}, {"sha": "08b90b365e326db0e796f1b2de0e2efba56651ab", "filename": "src/test/ui/pptypedef.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fpptypedef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fpptypedef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:4:37\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3i32); });\n-   |                                     ^^^^ expected `u32`, found `i32`\n+   |                                -    ^^^^ expected `u32`, found `i32`\n+   |                                |\n+   |                                expected because this is `u32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -13,7 +15,9 @@ error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:8:37\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3u32); });\n-   |                                     ^^^^ expected `i32`, found `u32`\n+   |                                -    ^^^^ expected `i32`, found `u32`\n+   |                                |\n+   |                                expected because this is `i32`\n    |\n help: change the type of the numeric literal from `u32` to `i32`\n    |"}, {"sha": "f96939bb6efcee107a0ebd29246c9fcbdb0cd2e4", "filename": "src/test/ui/proc-macro/attr-invalid-exprs.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -8,21 +8,25 @@ error: macro expansion ignores token `,` and any following\n   --> $DIR/attr-invalid-exprs.rs:15:13\n    |\n LL |     let _ = #[duplicate] \"Hello, world!\";\n-   |             ^^^^^^^^^^^^- help: you might be missing a semicolon here: `;`\n-   |             |\n-   |             caused by the macro expansion here\n+   |             ^^^^^^^^^^^^ caused by the macro expansion here\n    |\n    = note: the usage of `duplicate!` is likely invalid in expression context\n+help: you might be missing a semicolon here\n+   |\n+LL |     let _ = #[duplicate]; \"Hello, world!\";\n+   |                         +\n \n error: macro expansion ignores token `,` and any following\n   --> $DIR/attr-invalid-exprs.rs:24:9\n    |\n LL |         #[duplicate]\n-   |         ^^^^^^^^^^^^- help: you might be missing a semicolon here: `;`\n-   |         |\n-   |         caused by the macro expansion here\n+   |         ^^^^^^^^^^^^ caused by the macro expansion here\n    |\n    = note: the usage of `duplicate!` is likely invalid in expression context\n+help: you might be missing a semicolon here\n+   |\n+LL |         #[duplicate];\n+   |                     +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9e40e4d9ba63e92d243403451274948859aa7ea0", "filename": "src/test/ui/proc-macro/attribute.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -53,19 +53,19 @@ pub fn foo11(input: TokenStream) -> TokenStream { input }\n pub fn foo12(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d13, attributes(\"a\"))]\n-//~^ ERROR: not a meta item\n+//~^ ERROR: attribute must be a meta item, not a literal\n pub fn foo13(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d14, attributes(a = \"\"))]\n-//~^ ERROR: must only be one word\n+//~^ ERROR: attribute must only be a single word\n pub fn foo14(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d15, attributes(m::a))]\n-//~^ ERROR: must only be one word\n+//~^ ERROR: attribute must only be a single word\n pub fn foo15(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d16, attributes(a(b)))]\n-//~^ ERROR: must only be one word\n+//~^ ERROR: attribute must only be a single word\n pub fn foo16(input: TokenStream) -> TokenStream { input }\n \n #[proc_macro_derive(d17, attributes(self))]"}, {"sha": "3269aaf7f917eff367e0ac424f85b0aa802e04ec", "filename": "src/test/ui/proc-macro/attribute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -70,25 +70,25 @@ error: attribute must be of form: `attributes(foo, bar)`\n LL | #[proc_macro_derive(d12, attributes)]\n    |                          ^^^^^^^^^^\n \n-error: not a meta item\n+error: attribute must be a meta item, not a literal\n   --> $DIR/attribute.rs:55:37\n    |\n LL | #[proc_macro_derive(d13, attributes(\"a\"))]\n    |                                     ^^^\n \n-error: must only be one word\n+error: attribute must only be a single word\n   --> $DIR/attribute.rs:59:37\n    |\n LL | #[proc_macro_derive(d14, attributes(a = \"\"))]\n    |                                     ^^^^^^\n \n-error: must only be one word\n+error: attribute must only be a single word\n   --> $DIR/attribute.rs:63:37\n    |\n LL | #[proc_macro_derive(d15, attributes(m::a))]\n    |                                     ^^^^\n \n-error: must only be one word\n+error: attribute must only be a single word\n   --> $DIR/attribute.rs:67:37\n    |\n LL | #[proc_macro_derive(d16, attributes(a(b)))]"}, {"sha": "0004f2fe17f01ebfb65aaabbd86b376482eee382", "filename": "src/test/ui/proc-macro/expand-expr.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -26,21 +26,25 @@ error: macro expansion ignores token `hello` and any following\n   --> $DIR/expand-expr.rs:115:47\n    |\n LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello));\n-   |                           --------------------^^^^^-- help: you might be missing a semicolon here: `;`\n-   |                           |\n-   |                           caused by the macro expansion here\n+   |                           --------------------^^^^^- caused by the macro expansion here\n    |\n    = note: the usage of `echo_tts!` is likely invalid in expression context\n+help: you might be missing a semicolon here\n+   |\n+LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello););\n+   |                                                     +\n \n error: macro expansion ignores token `;` and any following\n   --> $DIR/expand-expr.rs:116:44\n    |\n LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello));\n-   |                           -----------------^-------- help: you might be missing a semicolon here: `;`\n-   |                           |\n-   |                           caused by the macro expansion here\n+   |                           -----------------^------- caused by the macro expansion here\n    |\n    = note: the usage of `echo_pm!` is likely invalid in expression context\n+help: you might be missing a semicolon here\n+   |\n+LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello););\n+   |                                                    +\n \n error: recursion limit reached while expanding `recursive_expand!`\n   --> $DIR/expand-expr.rs:124:16"}, {"sha": "bc6342004f4db638b4cdb89015a2127ce0cb7bab", "filename": "src/test/ui/suggestions/dont-suggest-try_into-in-macros.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-try_into-in-macros.rs:2:5\n    |\n LL |     assert_eq!(10u64, 10usize);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     expected `u64`, found `usize`\n+   |     expected because this is `u64`\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4050c7be82a0af369c459b9cc5f36217cc153746", "filename": "src/test/ui/suggestions/option-to-bool.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/option-to-bool.rs:4:16\n    |\n LL |     if true && x {}\n-   |                ^ expected `bool`, found enum `Option`\n+   |        ----    ^ expected `bool`, found enum `Option`\n+   |        |\n+   |        expected because this is `bool`\n    |\n    = note: expected type `bool`\n               found enum `Option<i32>`"}, {"sha": "9f4558adab150708696dc1aba163bd6cdbacca3d", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -68,7 +68,9 @@ error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:44:18\n    |\n LL |     if x == x && x = x && x == x {\n-   |                  ^ expected `bool`, found `usize`\n+   |        ------    ^ expected `bool`, found `usize`\n+   |        |\n+   |        expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:44:22\n@@ -91,7 +93,9 @@ error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:51:28\n    |\n LL |     if x == x && x == x && x = x {\n-   |                            ^ expected `bool`, found `usize`\n+   |        ----------------    ^ expected `bool`, found `usize`\n+   |        |\n+   |        expected because this is `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:51:8"}, {"sha": "7529f25bd8e4b318e12f6b05a521323c4a21dfd0", "filename": "src/test/ui/type/type-params-in-different-spaces-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -6,7 +6,9 @@ LL | trait BrokenAdd: Copy + Add<Output=Self> {\n LL |     fn broken_add<T>(&self, rhs: T) -> Self {\n    |                   - found type parameter\n LL |         *self + rhs\n-   |                 ^^^ expected type parameter `Self`, found type parameter `T`\n+   |         -----   ^^^ expected type parameter `Self`, found type parameter `T`\n+   |         |\n+   |         expected because this is `Self`\n    |\n    = note: expected type parameter `Self`\n               found type parameter `T`"}, {"sha": "8338f61b22a756941d048eaa59d04c33263e8b99", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -38,7 +38,9 @@ error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:45\n    |\n LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n-   |                                             ^^^ expected struct `Vec2`, found floating-point number\n+   |                   -----------------------   ^^^ expected struct `Vec2`, found floating-point number\n+   |                   |\n+   |                   expected because this is `Vec2`\n \n error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:19"}, {"sha": "e053a9dc8881ab2a0cd2adf7eb52bf71436b8d37", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32da2305880765a4c76180086959a2d5da131565/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32da2305880765a4c76180086959a2d5da131565/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=32da2305880765a4c76180086959a2d5da131565", "patch": "@@ -303,7 +303,6 @@ fn check_terminator<'tcx>(\n \n         TerminatorKind::SwitchInt {\n             discr,\n-            switch_ty: _,\n             targets: _,\n         } => check_operand(tcx, discr, span, body),\n "}]}