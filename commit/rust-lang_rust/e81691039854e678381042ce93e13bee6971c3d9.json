{"sha": "e81691039854e678381042ce93e13bee6971c3d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MTY5MTAzOTg1NGU2NzgzODEwNDJjZTkzZTEzYmVlNjk3MWMzZDk=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-30T23:16:43Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:38Z"}, "message": "Add feature gate", "tree": {"sha": "7f6319b1134f640f445be2d49423bfa8e0988bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6319b1134f640f445be2d49423bfa8e0988bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81691039854e678381042ce93e13bee6971c3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81691039854e678381042ce93e13bee6971c3d9", "html_url": "https://github.com/rust-lang/rust/commit/e81691039854e678381042ce93e13bee6971c3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81691039854e678381042ce93e13bee6971c3d9/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f16c2ce59ac942e1c0415987012100756a44039", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f16c2ce59ac942e1c0415987012100756a44039", "html_url": "https://github.com/rust-lang/rust/commit/9f16c2ce59ac942e1c0415987012100756a44039"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "0f47e19eaf3f4426aad7c09c0b396a15dcfe3f0f", "filename": "src/librustc/middle/traits/specialize.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e81691039854e678381042ce93e13bee6971c3d9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81691039854e678381042ce93e13bee6971c3d9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs?ref=e81691039854e678381042ce93e13bee6971c3d9", "patch": "@@ -88,6 +88,16 @@ impl SpecializationGraph {\n                 let overlap = traits::overlapping_impls(&infcx, possible_sibling, impl_def_id);\n \n                 if let Some(trait_ref) = overlap {\n+                    if !tcx.sess.features.borrow().specialization {\n+                        // if specialization is not turned on, all overlaps\n+                        // should immediately trigger an error\n+\n+                        return Err(Overlap {\n+                            with_impl: possible_sibling,\n+                            on_trait_ref: trait_ref,\n+                        });\n+                    }\n+\n                     let le = specializes(tcx, impl_def_id, possible_sibling);\n                     let ge = specializes(tcx, possible_sibling, impl_def_id);\n "}, {"sha": "d50eb17c87b83bbecaafc99ad3a58e25e5f1d865", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e81691039854e678381042ce93e13bee6971c3d9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81691039854e678381042ce93e13bee6971c3d9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e81691039854e678381042ce93e13bee6971c3d9", "patch": "@@ -248,6 +248,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // `expr?`\n     (\"question_mark\", \"1.9.0\", Some(31436), Active)\n+\n+    // impl specialization (RFC 1210)\n+    (\"specialization\", \"1.7.0\", None, Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -574,6 +577,7 @@ pub struct Features {\n     pub stmt_expr_attributes: bool,\n     pub deprecated: bool,\n     pub question_mark: bool,\n+    pub specialization: bool,\n }\n \n impl Features {\n@@ -608,6 +612,7 @@ impl Features {\n             stmt_expr_attributes: false,\n             deprecated: false,\n             question_mark: false,\n+            specialization: false,\n         }\n     }\n }\n@@ -1102,6 +1107,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n+        if ii.defaultness == ast::Defaultness::Default {\n+            self.gate_feature(\"specialization\",\n+                              ii.span,\n+                              \"specialization is unstable\");\n+        }\n+\n         match ii.node {\n             ast::ImplItemKind::Const(..) => {\n                 self.gate_feature(\"associated_consts\",\n@@ -1212,6 +1223,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n         stmt_expr_attributes: cx.has_feature(\"stmt_expr_attributes\"),\n         deprecated: cx.has_feature(\"deprecated\"),\n         question_mark: cx.has_feature(\"question_mark\"),\n+        specialization: cx.has_feature(\"specialization\"),\n     }\n }\n "}]}