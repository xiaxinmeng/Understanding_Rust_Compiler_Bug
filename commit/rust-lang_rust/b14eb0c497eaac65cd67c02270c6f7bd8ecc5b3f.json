{"sha": "b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "node_id": "C_kwDOAAsO6NoAKGIxNGViMGM0OTdlYWFjNjVjZDY3YzAyMjcwYzZmN2JkOGVjYzViM2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T01:10:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T21:52:26Z"}, "message": "pluralize stuff", "tree": {"sha": "238362400e2606a75773c4bf3812b598634384ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238362400e2606a75773c4bf3812b598634384ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "html_url": "https://github.com/rust-lang/rust/commit/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb135748d8489118e968b229c5c92d4fa18a1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb135748d8489118e968b229c5c92d4fa18a1cf", "html_url": "https://github.com/rust-lang/rust/commit/deb135748d8489118e968b229c5c92d4fa18a1cf"}], "stats": {"total": 216, "additions": 105, "deletions": 111}, "files": [{"sha": "c5b144e68dc7e2cf4ee64c7f4a1728695dcecccd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -288,31 +288,31 @@ enum ImplTraitPosition {\n impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n-            ImplTraitPosition::Path => \"path\",\n-            ImplTraitPosition::Variable => \"variable binding\",\n-            ImplTraitPosition::Trait => \"trait\",\n-            ImplTraitPosition::AsyncBlock => \"async block\",\n-            ImplTraitPosition::Bound => \"bound\",\n-            ImplTraitPosition::Generic => \"generic\",\n-            ImplTraitPosition::ExternFnParam => \"`extern fn` param\",\n-            ImplTraitPosition::ClosureParam => \"closure param\",\n-            ImplTraitPosition::PointerParam => \"`fn` pointer param\",\n-            ImplTraitPosition::FnTraitParam => \"`Fn` trait param\",\n-            ImplTraitPosition::TraitParam => \"trait method param\",\n-            ImplTraitPosition::ImplParam => \"`impl` method param\",\n-            ImplTraitPosition::ExternFnReturn => \"`extern fn` return\",\n-            ImplTraitPosition::ClosureReturn => \"closure return\",\n-            ImplTraitPosition::PointerReturn => \"`fn` pointer return\",\n-            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n-            ImplTraitPosition::TraitReturn => \"trait method return\",\n-            ImplTraitPosition::ImplReturn => \"`impl` method return\",\n-            ImplTraitPosition::GenericDefault => \"generic parameter default\",\n-            ImplTraitPosition::ConstTy => \"const type\",\n-            ImplTraitPosition::StaticTy => \"static type\",\n-            ImplTraitPosition::AssocTy => \"associated type\",\n-            ImplTraitPosition::FieldTy => \"field type\",\n-            ImplTraitPosition::Cast => \"cast type\",\n-            ImplTraitPosition::ImplSelf => \"impl header\",\n+            ImplTraitPosition::Path => \"paths\",\n+            ImplTraitPosition::Variable => \"variable bindings\",\n+            ImplTraitPosition::Trait => \"traits\",\n+            ImplTraitPosition::AsyncBlock => \"async blocks\",\n+            ImplTraitPosition::Bound => \"bounds\",\n+            ImplTraitPosition::Generic => \"generics\",\n+            ImplTraitPosition::ExternFnParam => \"`extern fn` params\",\n+            ImplTraitPosition::ClosureParam => \"closure params\",\n+            ImplTraitPosition::PointerParam => \"`fn` pointer params\",\n+            ImplTraitPosition::FnTraitParam => \"`Fn` trait params\",\n+            ImplTraitPosition::TraitParam => \"trait method params\",\n+            ImplTraitPosition::ImplParam => \"`impl` method params\",\n+            ImplTraitPosition::ExternFnReturn => \"`extern fn` return types\",\n+            ImplTraitPosition::ClosureReturn => \"closure return types\",\n+            ImplTraitPosition::PointerReturn => \"`fn` pointer return types\",\n+            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return types\",\n+            ImplTraitPosition::TraitReturn => \"trait method return types\",\n+            ImplTraitPosition::ImplReturn => \"`impl` method return types\",\n+            ImplTraitPosition::GenericDefault => \"generic parameter defaults\",\n+            ImplTraitPosition::ConstTy => \"const types\",\n+            ImplTraitPosition::StaticTy => \"static types\",\n+            ImplTraitPosition::AssocTy => \"associated types\",\n+            ImplTraitPosition::FieldTy => \"field types\",\n+            ImplTraitPosition::Cast => \"cast types\",\n+            ImplTraitPosition::ImplSelf => \"impl headers\",\n         };\n \n         write!(f, \"{name}\")\n@@ -1038,12 +1038,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n                     ImplTraitContext::Universal if self.is_in_dyn_type => DesugarKind::ImplTrait,\n \n-                    // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n-                    // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n-                    // \"impl trait context\" to permit `impl Debug` in this position (it desugars\n-                    // then to an opaque type).\n-                    //\n-                    // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(position) if self.is_in_dyn_type => {\n                         DesugarKind::Error(position)\n                     }"}, {"sha": "bbafc55dac3a044099f967dffee6c3c9d9725c61", "filename": "tests/ui/associated-consts/issue-105330.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -33,7 +33,7 @@ LL | fn main<A: TraitWAssocConst<A=32>>() {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/issue-105330.rs:6:27\n    |\n LL | impl TraitWAssocConst for impl Demo {"}, {"sha": "6fa266d23d49b04883d632220518c01c1e294b4d", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error: associated type bounds are only allowed in where clauses and function signatures, not in bound\n+error: associated type bounds are only allowed in where clauses and function signatures, not in bounds\n   --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:19\n    |\n LL |     dyn for<'j> B<AssocType: 'j>:,"}, {"sha": "8b66627d57fe2fe7c5882281731554cc33c3b0de", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error: associated type bounds are only allowed in where clauses and function signatures, not in impl header\n+error: associated type bounds are only allowed in where clauses and function signatures, not in impl headers\n   --> $DIR/bad-universal-in-impl-sig.rs:10:16\n    |\n LL | impl dyn Trait<Item: Trait2> {}"}, {"sha": "f848bd798ee0abbb15b1bbfa50e51c637fd407d2", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,52 +1,52 @@\n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:9:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:12:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:14:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:16:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:19:41\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |                                         ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:21:45\n    |\n LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n    |                                             ^^^^^^^^^^\n \n-error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:23:41\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }"}, {"sha": "78017429f73d5884359bd4f4d6eb03812f6bc961", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -11,7 +11,7 @@ trait MyTrait {\n \n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n-        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n         async { *self }\n     }\n }"}, {"sha": "37d9669c0124b572f7469ddbbdcc3cb8bc38019e", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/fn-not-async-err2.rs:13:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {"}, {"sha": "4233a8af9b6a6a0d18babda2b33c7018c94c0a3f", "filename": "tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -115,19 +115,19 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:55:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:61:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/feature-gate-associated_type_bounds.rs:68:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;"}, {"sha": "c8c3e13d7fc5a61326cab98fcf01ea6b182a2f12", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24\n    |\n LL | fn f() -> impl Fn() -> impl Sized { || () }\n@@ -7,7 +7,7 @@ LL | fn f() -> impl Fn() -> impl Sized { || () }\n    = note: see issue #99697 <https://github.com/rust-lang/rust/issues/99697> for more information\n    = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n    |\n LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }"}, {"sha": "0082b6fafee8fc8f407ce2fa6ac472e658c47a27", "filename": "tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:8:17\n    |\n LL |     fn bar() -> impl Sized;\n@@ -7,7 +7,7 @@ LL |     fn bar() -> impl Sized;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:9:21\n    |\n LL |     fn baz() -> Box<impl std::fmt::Display>;\n@@ -16,7 +16,7 @@ LL |     fn baz() -> Box<impl std::fmt::Display>;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:15:23\n    |\n LL |     async fn bar() -> impl Sized;"}, {"sha": "7ef063af952226faa3759357268b2a8aa88c3963", "filename": "tests/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);"}, {"sha": "1d1316f0e110b6b77a3f2b21da3422697264aa93", "filename": "tests/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;"}, {"sha": "26ec2a4f9cfe5fdca8a1cecbb7478aff348c7fa5", "filename": "tests/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];"}, {"sha": "2b4d0abdffca8f4c5640db91600b812d958d5f5a", "filename": "tests/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);"}, {"sha": "d066256bfb09d99b98b6eb2d51d188fe4129e96d", "filename": "tests/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);"}, {"sha": "580250a62fecda621a339a9161a7a96e4517b2f7", "filename": "tests/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -9,7 +9,7 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };"}, {"sha": "656bd04706124df0b6aca87eb33fb5d8bf71db98", "filename": "tests/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "36010fdef36c316807054c02cfedbea583038590", "filename": "tests/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();"}, {"sha": "b6f8a54f35ae89efea4eca0f8e2ceaa1ceb01f8d", "filename": "tests/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {"}, {"sha": "ec59b719c10e1c199d5cf3d762bf65d1d0b1c17a", "filename": "tests/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());"}, {"sha": "ffe84b8e86fc4c3f08b3bef5107afbc793af0ecf", "filename": "tests/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -34,7 +34,7 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}"}, {"sha": "1cae3f77cc563ccabe1e50db1702772882692088", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -43,109 +43,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n@@ -154,7 +154,7 @@ LL |     fn in_return() -> impl Debug;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n@@ -163,121 +163,121 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` params\n   --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return types\n   --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in traits\n   --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return types\n   --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };"}, {"sha": "dadea34b68836b6949f8eaa504502055e2a97cd6", "filename": "tests/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-47715.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,22 +1,22 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;"}, {"sha": "ff375b2ff863fb7a1504f8e97932f6b85b54056d", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;"}, {"sha": "09187d7863a6bcf1d64dccde872850c4e24de615", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Oops` in this scope\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-104513-ice.rs:3:14\n    |\n LL |     let _: S<impl Oops> = S;"}]}