{"sha": "18751a708a5831dffcd3b95755496efdaf7ae7a0", "node_id": "C_kwDOAAsO6NoAKDE4NzUxYTcwOGE1ODMxZGZmY2QzYjk1NzU1NDk2ZWZkYWY3YWU3YTA", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-20T19:57:55Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:56Z"}, "message": "safe transmute: gracefully handle const params of wrong types\n\nref: https://github.com/rust-lang/rust/pull/92268/files#r925244819", "tree": {"sha": "b97baaebbcf41923e1f26f1b54ab8950fef1b90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97baaebbcf41923e1f26f1b54ab8950fef1b90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18751a708a5831dffcd3b95755496efdaf7ae7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18751a708a5831dffcd3b95755496efdaf7ae7a0", "html_url": "https://github.com/rust-lang/rust/commit/18751a708a5831dffcd3b95755496efdaf7ae7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18751a708a5831dffcd3b95755496efdaf7ae7a0/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4a1dea416e1695cf77acd17ea743d4d802bae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4a1dea416e1695cf77acd17ea743d4d802bae0", "html_url": "https://github.com/rust-lang/rust/commit/bc4a1dea416e1695cf77acd17ea743d4d802bae0"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "672c9b7b088dfbbb8a288651b02e1df8635ec3b2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18751a708a5831dffcd3b95755496efdaf7ae7a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18751a708a5831dffcd3b95755496efdaf7ae7a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=18751a708a5831dffcd3b95755496efdaf7ae7a0", "patch": "@@ -288,7 +288,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 .substs\n                 .const_at(i)\n                 .try_eval_bool(self.tcx(), obligation.param_env)\n-                .unwrap()\n+                .unwrap_or(true)\n         };\n \n         let src_and_dst = predicate.map_bound(|p| rustc_transmute::Types {"}, {"sha": "bd36748e7901bb167c3077c6d3113a1c8f75d22c", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/18751a708a5831dffcd3b95755496efdaf7ae7a0/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18751a708a5831dffcd3b95755496efdaf7ae7a0/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs?ref=18751a708a5831dffcd3b95755496efdaf7ae7a0", "patch": "@@ -0,0 +1,40 @@\n+//! The implementation must behave well if const values of wrong types are\n+//! provided.\n+\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code, incomplete_features, non_camel_case_types)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<\n+        Src,\n+        Dst,\n+        Context,\n+        const ASSUME_ALIGNMENT: bool,\n+        const ASSUME_LIFETIMES: bool,\n+        const ASSUME_VALIDITY: bool,\n+        const ASSUME_VISIBILITY: bool,\n+    >()\n+    where\n+        Dst: BikeshedIntrinsicFrom<\n+            Src,\n+            Context,\n+            ASSUME_ALIGNMENT,\n+            ASSUME_LIFETIMES,\n+            ASSUME_VALIDITY,\n+            ASSUME_VISIBILITY,\n+        >,\n+    {}\n+}\n+\n+fn test() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+    assert::is_transmutable::<Src, Dst, Context, {0u8}, false, false, false>(); //~ ERROR mismatched types\n+    assert::is_transmutable::<Src, Dst, Context, false, {0u8}, false, false>(); //~ ERROR mismatched types\n+    assert::is_transmutable::<Src, Dst, Context, false, false, {0u8}, false>(); //~ ERROR mismatched types\n+    assert::is_transmutable::<Src, Dst, Context, false, false, false, {0u8}>(); //~ ERROR mismatched types\n+}"}, {"sha": "e1464e02352c6231e1248c261a03948aba7eb4b9", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/18751a708a5831dffcd3b95755496efdaf7ae7a0/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18751a708a5831dffcd3b95755496efdaf7ae7a0/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr?ref=18751a708a5831dffcd3b95755496efdaf7ae7a0", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-type-assume.rs:36:51\n+   |\n+LL |     assert::is_transmutable::<Src, Dst, Context, {0u8}, false, false, false>();\n+   |                                                   ^^^ expected `bool`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-type-assume.rs:37:58\n+   |\n+LL |     assert::is_transmutable::<Src, Dst, Context, false, {0u8}, false, false>();\n+   |                                                          ^^^ expected `bool`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-type-assume.rs:38:65\n+   |\n+LL |     assert::is_transmutable::<Src, Dst, Context, false, false, {0u8}, false>();\n+   |                                                                 ^^^ expected `bool`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-type-assume.rs:39:72\n+   |\n+LL |     assert::is_transmutable::<Src, Dst, Context, false, false, false, {0u8}>();\n+   |                                                                        ^^^ expected `bool`, found `u8`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}