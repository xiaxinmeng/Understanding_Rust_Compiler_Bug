{"sha": "74128b15aba8fe3514c480c16254fdc2351007db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTI4YjE1YWJhOGZlMzUxNGM0ODBjMTYyNTRmZGMyMzUxMDA3ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T04:41:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T04:41:44Z"}, "message": "auto merge of #13187 : brson/rust/dist, r=alexcrichton", "tree": {"sha": "22d9640899c9d163acc2882c8593fa29732d79ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d9640899c9d163acc2882c8593fa29732d79ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74128b15aba8fe3514c480c16254fdc2351007db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74128b15aba8fe3514c480c16254fdc2351007db", "html_url": "https://github.com/rust-lang/rust/commit/74128b15aba8fe3514c480c16254fdc2351007db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74128b15aba8fe3514c480c16254fdc2351007db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6584f3746e552a626003f564e2f83262d93cbd57", "url": "https://api.github.com/repos/rust-lang/rust/commits/6584f3746e552a626003f564e2f83262d93cbd57", "html_url": "https://github.com/rust-lang/rust/commit/6584f3746e552a626003f564e2f83262d93cbd57"}, {"sha": "21617190f213e7da06fbe071cb5961a89a91e38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21617190f213e7da06fbe071cb5961a89a91e38f", "html_url": "https://github.com/rust-lang/rust/commit/21617190f213e7da06fbe071cb5961a89a91e38f"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "70776849df8b5738ecc31236322b0412df431168", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74128b15aba8fe3514c480c16254fdc2351007db/configure", "raw_url": "https://github.com/rust-lang/rust/raw/74128b15aba8fe3514c480c16254fdc2351007db/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=74128b15aba8fe3514c480c16254fdc2351007db", "patch": "@@ -384,6 +384,7 @@ opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt nightly 0 \"build nightly packages\"\n+opt verify-install 1 \"verify installed binaries work\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\""}, {"sha": "ca9497444f08dd1d21e18bbc194bd2a2d9863392", "filename": "mk/install.mk", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74128b15aba8fe3514c480c16254fdc2351007db/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/74128b15aba8fe3514c480c16254fdc2351007db/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=74128b15aba8fe3514c480c16254fdc2351007db", "patch": "@@ -8,14 +8,21 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+ifdef CFG_DISABLE_VERIFY_INSTALL\n+MAYBE_DISABLE_VERIFY=--disable-verify\n+else\n+MAYBE_DISABLE_VERIFY=\n+endif\n \n install: dist-install-dir-$(CFG_BUILD)\n-\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \"$(MAYBE_DISABLE_VERIFY)\"\n # Remove tmp files while we can because they may have been created under sudo\n \t$(Q)rm -R tmp/dist/$(PKG_NAME)-$(CFG_BUILD)\n \n uninstall: dist-install-dir-$(CFG_BUILD)\n-\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+# Remove tmp files while we can because they may have been created under sudo\n+\t$(Q)rm -R tmp/dist/$(PKG_NAME)-$(CFG_BUILD)\n \n \n ######################################################################"}, {"sha": "5674b0a5045c96914d3a653f237cb87e9675226b", "filename": "src/etc/install.sh", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/74128b15aba8fe3514c480c16254fdc2351007db/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74128b15aba8fe3514c480c16254fdc2351007db/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=74128b15aba8fe3514c480c16254fdc2351007db", "patch": "@@ -189,6 +189,16 @@ validate_opt () {\n     done\n }\n \n+absolutify() {\n+    FILE_PATH=\"${1}\"\n+    FILE_PATH_DIRNAME=\"$(dirname ${FILE_PATH})\"\n+    FILE_PATH_BASENAME=\"$(basename ${FILE_PATH})\"\n+    FILE_ABS_PATH=\"$(cd ${FILE_PATH_DIRNAME} && pwd)\"\n+    FILE_PATH=\"${FILE_ABS_PATH}/${FILE_PATH_BASENAME}\"\n+    # This is the return value\n+    ABSOLUTIFIED=\"${FILE_PATH}\"\n+}\n+\n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_SELF=\"$0\"\n CFG_ARGS=\"$@\"\n@@ -212,6 +222,7 @@ BOOL_OPTIONS=\"\"\n VAL_OPTIONS=\"\"\n \n flag uninstall \"only uninstall from the installation prefix\"\n+opt verify 1 \"verify that the installed binaries run correctly\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n # NB This isn't quite the same definition as in `configure`.\n # just using 'lib' instead of CFG_LIBDIR_RELATIVE\n@@ -230,28 +241,50 @@ validate_opt\n \n # OK, let's get installing ...\n \n+# Sanity check: can we run the binaries?\n+if [ -z \"${CFG_DISABLE_VERIFY}\" ]\n+then\n+    # Don't do this if uninstalling. Failure here won't help in any way.\n+    if [ -z \"${CFG_UNINSTALL}\" ]\n+    then\n+        msg \"verifying platform can run binaries\"\n+        \"${CFG_SRC_DIR}/bin/rustc\" --version > /dev/null\n+        if [ $? -ne 0 ]\n+        then\n+            err \"can't execute rustc binary on this platform\"\n+        fi\n+    fi\n+fi\n+\n # Sanity check: can we can write to the destination?\n+msg \"verifying destination is writable\"\n umask 022 && mkdir -p \"${CFG_LIBDIR}\"\n-need_ok \"can't write to destination. consider 'sudo'.\"\n-touch \"${CFG_LIBDIR}/rust-install-probe\" 2> /dev/null\n+need_ok \"can't write to destination. consider \\`sudo\\`.\"\n+touch \"${CFG_LIBDIR}/rust-install-probe\" > /dev/null\n if [ $? -ne 0 ]\n then\n-    err \"can't write to destination. consider 'sudo'.\"\n+    err \"can't write to destination. consider \\`sudo\\`.\"\n fi\n-rm \"${CFG_LIBDIR}/rust-install-probe\"\n+rm -f \"${CFG_LIBDIR}/rust-install-probe\"\n need_ok \"failed to remove install probe\"\n \n # Sanity check: don't install to the directory containing the installer.\n # That would surely cause chaos.\n+msg \"verifying destination is not the same as source\"\n INSTALLER_DIR=\"$(cd $(dirname $0) && pwd)\"\n PREFIX_DIR=\"$(cd ${CFG_PREFIX} && pwd)\"\n if [ \"${INSTALLER_DIR}\" = \"${PREFIX_DIR}\" ]\n then\n     err \"can't install to same directory as installer\"\n fi\n \n+# Using an absolute path to libdir in a few places so that the status\n+# messages are consistently using absolute paths.\n+absolutify \"${CFG_LIBDIR}\"\n+ABS_LIBDIR=\"${ABSOLUTIFIED}\"\n+\n # The file name of the manifest we're going to create during install\n-INSTALLED_MANIFEST=\"${CFG_LIBDIR}/rustlib/manifest\"\n+INSTALLED_MANIFEST=\"${ABS_LIBDIR}/rustlib/manifest\"\n \n # First, uninstall from the installation prefix.\n # Errors are warnings - try to rm everything in the manifest even if some fail.\n@@ -263,7 +296,7 @@ then\n         msg \"removing $p\"\n         if [ -f \"$p\" ]\n         then\n-            rm \"$p\"\n+            rm -f \"$p\"\n             if [ $? -ne 0 ]\n             then\n                 warn \"failed to remove $p\"\n@@ -273,8 +306,16 @@ then\n         fi\n     done < \"${INSTALLED_MANIFEST}\"\n \n+    # If we fail to remove rustlib below, then the installed manifest will\n+    # still be full; the installed manifest needs to be empty before install.\n+    msg \"removing ${INSTALLED_MANIFEST}\"\n+    rm -f \"${INSTALLED_MANIFEST}\"\n+    # For the above reason, this is a hard error\n+    need_ok \"failed to remove installed manifest\"\n+\n     # Remove 'rustlib' directory\n-    rm -r \"${CFG_LIBDIR}/rustlib\"\n+    msg \"removing ${ABS_LIBDIR}/rustlib\"\n+    rm -Rf \"${ABS_LIBDIR}/rustlib\"\n     if [ $? -ne 0 ]\n     then\n         warn \"failed to remove rustlib\"\n@@ -298,7 +339,9 @@ fi\n \n # Create the installed manifest, which we will fill in with absolute file paths\n mkdir -p \"${CFG_LIBDIR}/rustlib\"\n+need_ok \"failed to create rustlib\"\n touch \"${INSTALLED_MANIFEST}\"\n+need_ok \"failed to create installed manifest\"\n \n # Now install, iterate through the new manifest and copy files\n while read p; do\n@@ -324,10 +367,8 @@ while read p; do\n \n     # Make the path absolute so we can uninstall it later without\n     # starting from the installation cwd\n-    FILE_INSTALL_PATH_DIRNAME=\"$(dirname ${FILE_INSTALL_PATH})\"\n-    FILE_INSTALL_PATH_BASENAME=\"$(basename ${FILE_INSTALL_PATH})\"\n-    FILE_INSTALL_ABS_PATH=\"$(cd ${FILE_INSTALL_PATH_DIRNAME} && pwd)\"\n-    FILE_INSTALL_PATH=\"${FILE_INSTALL_ABS_PATH}/${FILE_INSTALL_PATH_BASENAME}\"\n+    absolutify \"${FILE_INSTALL_PATH}\"\n+    FILE_INSTALL_PATH=\"${ABSOLUTIFIED}\"\n \n     # Install the file\n     msg \"${FILE_INSTALL_PATH}\"\n@@ -346,6 +387,22 @@ while read p; do\n # The manifest lists all files to install\n done < \"${CFG_SRC_DIR}/lib/rustlib/manifest.in\"\n \n+# Sanity check: can we run the installed binaries?\n+if [ -z \"${CFG_DISABLE_VERIFY}\" ]\n+then\n+    msg \"verifying installed binaries are executable\"\n+    \"${CFG_PREFIX}/bin/rustc\" --version > /dev/null\n+    if [ $? -ne 0 ]\n+    then\n+        ERR=\"can't execute installed rustc binary. \"\n+        ERR=\"${ERR}installation may be broken. \"\n+        ERR=\"${ERR}if this is expected then rerun install.sh with \\`--disable-verify\\` \"\n+        ERR=\"${ERR}or \\`make install\\` with \\`--disable-verify-install\\`\"\n+        err \"${ERR}\"\n+    fi\n+fi\n+\n+\n echo\n echo \"    Rust is ready to roll.\"\n echo"}]}