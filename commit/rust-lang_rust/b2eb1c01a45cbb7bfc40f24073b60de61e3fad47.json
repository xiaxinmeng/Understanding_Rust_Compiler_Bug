{"sha": "b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZWIxYzAxYTQ1Y2JiN2JmYzQwZjI0MDczYjYwZGU2MWUzZmFkNDc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-10T18:28:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-16T17:44:04Z"}, "message": "add sret + noalias to the out pointer parameter\n\nThis brings Rust in line with how `clang` handles return pointers.\n\nExample:\n\n    pub fn bar() -> [uint, .. 8] {\n        let a = [0, .. 8];\n        a\n    }\n\nBefore:\n\n    ; Function Attrs: nounwind uwtable\n    define void @_ZN3bar17ha4635c6f704bfa334v0.0E([8 x i64]* nocapture, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #1 {\n    \"function top level\":\n      %a = alloca [8 x i64], align 8\n      %2 = bitcast [8 x i64]* %a to i8*\n      call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 64, i32 8, i1 false)\n      %3 = bitcast [8 x i64]* %0 to i8*\n      call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 64, i32 8, i1 false)\n      ret void\n    }\n\nAfter:\n\n    ; Function Attrs: nounwind uwtable\n    define void @_ZN3bar17ha4635c6f704bfa334v0.0E([8 x i64]* noalias nocapture sret, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #1 {\n    \"function top level\":\n      %2 = bitcast [8 x i64]* %0 to i8*\n      call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 64, i32 8, i1 false)\n      ret void\n    }\n\nCloses #9072\nCloses #7298\nCloses #9154", "tree": {"sha": "d27827c3777a6fbefb654b784d301f383f467361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27827c3777a6fbefb654b784d301f383f467361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "html_url": "https://github.com/rust-lang/rust/commit/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c31cf25b18a1300d723e7a3b155810b23d4b472", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c31cf25b18a1300d723e7a3b155810b23d4b472", "html_url": "https://github.com/rust-lang/rust/commit/3c31cf25b18a1300d723e7a3b155810b23d4b472"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "0493f9c8bff88791fb199471eb349da9dae7114d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "patch": "@@ -248,6 +248,17 @@ pub fn decl_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t,\n         }\n     }\n \n+    // The out pointer will never alias with any other pointers, as the object only exists at a\n+    // language level after the call. It can also be tagged with SRet to indicate that it is\n+    // guaranteed to point to a usable block of memory for the type.\n+    if uses_outptr {\n+        unsafe {\n+            let outptr = llvm::LLVMGetParam(llfn, 0);\n+            llvm::LLVMAddAttribute(outptr, lib::llvm::StructRetAttribute as c_uint);\n+            llvm::LLVMAddAttribute(outptr, lib::llvm::NoAliasAttribute as c_uint);\n+        }\n+    }\n+\n     llfn\n }\n "}, {"sha": "d55589cb7e8b3637ebe9e35d5bc36f97a2c61e2a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "patch": "@@ -20,7 +20,7 @@ use std::vec;\n \n use back::abi;\n use driver::session;\n-use lib::llvm::ValueRef;\n+use lib::llvm::{ValueRef, NoAliasAttribute, StructRetAttribute};\n use lib::llvm::llvm;\n use metadata::csearch;\n use middle::trans::base;\n@@ -707,7 +707,21 @@ pub fn trans_call_inner(in_cx: @mut Block,\n             }\n \n             // Invoke the actual rust fn and update bcx/llresult.\n-            let (llret, b) = base::invoke(bcx, llfn, llargs, []);\n+            let mut attrs = ~[];\n+            if type_of::return_uses_outptr(in_cx.tcx(), ret_ty) {\n+                attrs.push((1, StructRetAttribute));\n+            }\n+\n+            match ty::get(ret_ty).sty {\n+                // `~` pointer return values never alias because ownership is transferred\n+                ty::ty_uniq(*) |\n+                ty::ty_evec(_, ty::vstore_uniq) => {\n+                    attrs.push((0, NoAliasAttribute));\n+                }\n+                _ => ()\n+            }\n+\n+            let (llret, b) = base::invoke(bcx, llfn, llargs, attrs);\n             bcx = b;\n             llresult = llret;\n "}, {"sha": "3836bd5c47c7fca135678063dbba0946205888d5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "patch": "@@ -497,7 +497,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n             // Rust expects to use an outpointer. If the foreign fn\n             // also uses an outpointer, we can reuse it, but the types\n             // may vary, so cast first to the Rust type. If the\n-            // foriegn fn does NOT use an outpointer, we will have to\n+            // foreign fn does NOT use an outpointer, we will have to\n             // alloca some scratch space on the stack.\n             match foreign_outptr {\n                 Some(llforeign_outptr) => {"}]}