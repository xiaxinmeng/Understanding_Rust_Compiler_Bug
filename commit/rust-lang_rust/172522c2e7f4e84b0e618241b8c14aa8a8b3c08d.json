{"sha": "172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MjUyMmMyZTdmNGU4NGIwZTYxODI0MWI4YzE0YWE4YThiM2MwOGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T15:58:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T15:58:34Z"}, "message": "[OPT] Push fx.monomorphize to the callers of fx.layout_of\n\nThis prevents some repeated monomorphizations", "tree": {"sha": "8e4fb65b925e4d8b2ee54b2310aed9172c5e1e96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4fb65b925e4d8b2ee54b2310aed9172c5e1e96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "html_url": "https://github.com/rust-lang/rust/commit/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79965f0750d1ca99de12a9b71d349752282e651", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79965f0750d1ca99de12a9b71d349752282e651", "html_url": "https://github.com/rust-lang/rust/commit/d79965f0750d1ca99de12a9b71d349752282e651"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "329bdea79e8d30ec998b6990ec1ea1b4829bf6c3", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "patch": "@@ -353,7 +353,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n             ArgKind::Normal(Some(val)) => {\n                 if let Some(addr) = val.try_to_addr() {\n                     let local_decl = &fx.mir.local_decls[local];\n-                    //                             v this ! is important\n+                    //                       v this ! is important\n                     let internally_mutable = !val.layout().ty.is_freeze(\n                         fx.tcx,\n                         ParamEnv::reveal_all(),\n@@ -398,7 +398,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n     }\n \n     for local in fx.mir.vars_and_temps_iter() {\n-        let ty = fx.mir.local_decls[local].ty;\n+        let ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n         let layout = fx.layout_of(ty);\n \n         let is_ssa = *ssa_analyzed.get(&local).unwrap() == crate::analyze::SsaKind::Ssa;"}, {"sha": "00e5d965d94384ba60db9393b878d09e93011c50", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "patch": "@@ -340,29 +340,27 @@ fn trans_stmt<'tcx>(\n                     };\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), operand, ty) => {\n-                    let layout = fx.layout_of(ty);\n-                    match fx\n-                        .monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx))\n-                        .kind\n-                    {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), operand, to_ty) => {\n+                    let from_ty = fx.monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx));\n+                    let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n+                    match from_ty.kind {\n                         ty::FnDef(def_id, substs) => {\n                             let func_ref = fx.get_function_ref(\n                                 Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n                                     .unwrap(),\n                             );\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n-                            lval.write_cvalue(fx, CValue::by_val(func_addr, layout));\n+                            lval.write_cvalue(fx, CValue::by_val(func_addr, to_layout));\n                         }\n-                        _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", ty),\n+                        _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", from_ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), operand, ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, ty) => {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), operand, to_ty)\n+                | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, to_ty)\n+                | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, to_ty) => {\n+                    let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     let operand = trans_operand(fx, operand);\n-                    let layout = fx.layout_of(ty);\n-                    lval.write_cvalue(fx, operand.unchecked_cast_to(layout));\n+                    lval.write_cvalue(fx, operand.unchecked_cast_to(to_layout));\n                 }\n                 Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n                     let operand = trans_operand(fx, operand);\n@@ -420,7 +418,7 @@ fn trans_stmt<'tcx>(\n                         lval.write_cvalue(fx, CValue::by_val(res, dest_layout));\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), operand, _ty) => {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), operand, _to_ty) => {\n                     let operand = trans_operand(fx, operand);\n                     match operand.layout().ty.kind {\n                         ty::Closure(def_id, substs) => {\n@@ -437,7 +435,7 @@ fn trans_stmt<'tcx>(\n                         _ => bug!(\"{} cannot be cast to a fn ptr\", operand.layout().ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), operand, _ty) => {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), operand, _to_ty) => {\n                     let operand = trans_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n@@ -466,6 +464,7 @@ fn trans_stmt<'tcx>(\n                     use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n \n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n+                    let content_ty = fx.monomorphize(content_ty);\n                     let layout = fx.layout_of(content_ty);\n                     let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n                     let llalign = fx\n@@ -494,7 +493,7 @@ fn trans_stmt<'tcx>(\n                         .layout()\n                         .ty\n                         .is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()));\n-                    let ty_size = fx.layout_of(ty).size.bytes();\n+                    let ty_size = fx.layout_of(fx.monomorphize(ty)).size.bytes();\n                     let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size.into());\n                     lval.write_cvalue(fx, val);\n                 }"}, {"sha": "c3a8b708ab6e9ee6bc02e54fcf832b4a7727eedf", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172522c2e7f4e84b0e618241b8c14aa8a8b3c08d/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=172522c2e7f4e84b0e618241b8c14aa8a8b3c08d", "patch": "@@ -279,7 +279,7 @@ impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(&self, ty: Ty<'tcx>) -> TyLayout<'tcx> {\n-        let ty = self.monomorphize(&ty);\n+        assert!(!ty.needs_subst());\n         self.tcx\n             .layout_of(ParamEnv::reveal_all().and(&ty))\n             .unwrap_or_else(|e| {"}]}