{"sha": "e19b1b129b266900f832a50f0ea50342471e414c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOWIxYjEyOWIyNjY5MDBmODMyYTUwZjBlYTUwMzQyNDcxZTQxNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T12:46:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T12:46:21Z"}, "message": "auto merge of #11468 : klutzy/rust/workcache-cleanup, r=alexcrichton", "tree": {"sha": "fd3991adbb335172929c8ce53a292e8be4181755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3991adbb335172929c8ce53a292e8be4181755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19b1b129b266900f832a50f0ea50342471e414c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19b1b129b266900f832a50f0ea50342471e414c", "html_url": "https://github.com/rust-lang/rust/commit/e19b1b129b266900f832a50f0ea50342471e414c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19b1b129b266900f832a50f0ea50342471e414c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01794cc993a1f00ca2bc82498b256a88556a4e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/01794cc993a1f00ca2bc82498b256a88556a4e83", "html_url": "https://github.com/rust-lang/rust/commit/01794cc993a1f00ca2bc82498b256a88556a4e83"}, {"sha": "d578ecc4072a0e0fade7d564f0ae6dac31c3fb45", "url": "https://api.github.com/repos/rust-lang/rust/commits/d578ecc4072a0e0fade7d564f0ae6dac31c3fb45", "html_url": "https://github.com/rust-lang/rust/commit/d578ecc4072a0e0fade7d564f0ae6dac31c3fb45"}], "stats": {"total": 45, "additions": 9, "deletions": 36}, "files": [{"sha": "9dbb607681dcaae93462e7d0144c821d3a66a1f4", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=e19b1b129b266900f832a50f0ea50342471e414c", "patch": "@@ -209,28 +209,11 @@ impl Drop for Database {\n     }\n }\n \n-pub struct Logger {\n-    // FIXME #4432: Fill in\n-    priv a: ()\n-}\n-\n-impl Logger {\n-\n-    pub fn new() -> Logger {\n-        Logger { a: () }\n-    }\n-\n-    pub fn info(&self, i: &str) {\n-        info!(\"workcache: {}\", i);\n-    }\n-}\n-\n pub type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n \n #[deriving(Clone)]\n pub struct Context {\n     db: RWArc<Database>,\n-    priv logger: RWArc<Logger>,\n     priv cfg: Arc<json::Object>,\n     /// Map from kinds (source, exe, url, etc.) to a freshness function.\n     /// The freshness function takes a name (e.g. file path) and value\n@@ -275,18 +258,15 @@ fn json_decode<T:Decodable<json::Decoder>>(s: &str) -> T {\n impl Context {\n \n     pub fn new(db: RWArc<Database>,\n-               lg: RWArc<Logger>,\n                cfg: Arc<json::Object>) -> Context {\n-        Context::new_with_freshness(db, lg, cfg, Arc::new(TreeMap::new()))\n+        Context::new_with_freshness(db, cfg, Arc::new(TreeMap::new()))\n     }\n \n     pub fn new_with_freshness(db: RWArc<Database>,\n-                              lg: RWArc<Logger>,\n                               cfg: Arc<json::Object>,\n                               freshness: Arc<FreshnessMap>) -> Context {\n         Context {\n             db: db,\n-            logger: lg,\n             cfg: cfg,\n             freshness: freshness\n         }\n@@ -378,15 +358,11 @@ impl<'a> Prep<'a> {\n             None => fail!(\"missing freshness-function for '{}'\", kind),\n             Some(f) => (*f)(name, val)\n         };\n-        self.ctxt.logger.write(|lg| {\n-            if fresh {\n-                lg.info(format!(\"{} {}:{} is fresh\",\n-                             cat, kind, name));\n-            } else {\n-                lg.info(format!(\"{} {}:{} is not fresh\",\n-                             cat, kind, name))\n-            }\n-        });\n+        if fresh {\n+            info!(\"{} {}:{} is fresh\", cat, kind, name);\n+        } else {\n+            info!(\"{} {}:{} is not fresh\", cat, kind, name);\n+        }\n         fresh\n     }\n \n@@ -509,7 +485,6 @@ fn test() {\n     let db_path = make_path(~\"db.json\");\n \n     let cx = Context::new(RWArc::new(Database::new(db_path)),\n-                          RWArc::new(Logger::new()),\n                           Arc::new(TreeMap::new()));\n \n     let s = cx.with_prep(\"test1\", |prep| {"}, {"sha": "19586ac48b07807e7cdef25c26634ba039fc8584", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=e19b1b129b266900f832a50f0ea50342471e414c", "patch": "@@ -25,7 +25,7 @@ pub use source_control::{safe_git_clone, git_clone_url};\n use std::run;\n use extra::arc::{Arc,RWArc};\n use extra::workcache;\n-use extra::workcache::{Database, Logger, FreshnessMap};\n+use extra::workcache::{Database, FreshnessMap};\n use extra::treemap::TreeMap;\n \n // A little sad -- duplicated from rustc::back::*\n@@ -70,14 +70,13 @@ pub fn new_workcache_context(p: &Path) -> workcache::Context {\n     let db_file = p.join(\"rustpkg_db.json\"); // ??? probably wrong\n     debug!(\"Workcache database file: {}\", db_file.display());\n     let db = RWArc::new(Database::new(db_file));\n-    let lg = RWArc::new(Logger::new());\n     let cfg = Arc::new(TreeMap::new());\n     let mut freshness: FreshnessMap = TreeMap::new();\n     // Set up freshness functions for every type of dependency rustpkg\n     // knows about\n     freshness.insert(~\"file\", file_is_fresh);\n     freshness.insert(~\"binary\", binary_is_fresh);\n-    workcache::Context::new_with_freshness(db, lg, cfg, Arc::new(freshness))\n+    workcache::Context::new_with_freshness(db, cfg, Arc::new(freshness))\n }\n \n pub fn build_lib(sysroot: Path, root: Path, name: ~str, version: Version,"}, {"sha": "86b323609d32aec25f0e73557a2fa788e295ef6d", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19b1b129b266900f832a50f0ea50342471e414c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=e19b1b129b266900f832a50f0ea50342471e414c", "patch": "@@ -20,7 +20,7 @@ use extra::arc::Arc;\n use extra::arc::RWArc;\n use extra::tempfile::TempDir;\n use extra::workcache;\n-use extra::workcache::{Database, Logger};\n+use extra::workcache::{Database};\n use extra::treemap::TreeMap;\n use extra::getopts::groups::getopts;\n use std::run::ProcessOutput;\n@@ -46,7 +46,6 @@ use exit_codes::{BAD_FLAG_CODE, COPY_FAILED_CODE};\n fn fake_ctxt(sysroot: Path, workspace: &Path) -> BuildContext {\n     let context = workcache::Context::new(\n         RWArc::new(Database::new(workspace.join(\"rustpkg_db.json\"))),\n-        RWArc::new(Logger::new()),\n         Arc::new(TreeMap::new()));\n     BuildContext {\n         workcache_context: context,"}]}