{"sha": "59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Mjc5YjVhYmJiOGM3NzgwZjQ0YzgyYmI4YThiZGIwZmJhY2JlY2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-09T21:53:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-09T22:44:57Z"}, "message": "Do not report errors from regionck if other errors were already\nreported during the lifetime of this inferencer. Fixes #30580.", "tree": {"sha": "c8101003212023f733e7d8190c65ebac1ca3bd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8101003212023f733e7d8190c65ebac1ca3bd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "html_url": "https://github.com/rust-lang/rust/commit/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd3d9b927e4dc73b071e7bce70e1a3fc119946", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbd3d9b927e4dc73b071e7bce70e1a3fc119946", "html_url": "https://github.com/rust-lang/rust/commit/cbbd3d9b927e4dc73b071e7bce70e1a3fc119946"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "dc0076e59f8c416398b434891576e48749f1383d", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "patch": "@@ -1107,11 +1107,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         .map(|method| resolve_ty(method.ty)))\n     }\n \n+    pub fn errors_since_creation(&self) -> bool {\n+        self.tcx.sess.err_count() - self.err_count_on_creation != 0\n+    }\n+\n     pub fn node_type(&self, id: ast::NodeId) -> Ty<'tcx> {\n         match self.tables.borrow().node_types.get(&id) {\n             Some(&t) => t,\n             // FIXME\n-            None if self.tcx.sess.err_count() - self.err_count_on_creation != 0 =>\n+            None if self.errors_since_creation() =>\n                 self.tcx.types.err,\n             None => {\n                 self.tcx.sess.bug(\n@@ -1134,7 +1138,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                              free_regions: &FreeRegionMap,\n                                              subject_node_id: ast::NodeId) {\n         let errors = self.region_vars.resolve_regions(free_regions, subject_node_id);\n-        self.report_region_errors(&errors); // see error_reporting.rs\n+        if !self.errors_since_creation() {\n+            // As a heuristic, just skip reporting region errors\n+            // altogether if other errors have been reported while\n+            // this infcx was in use.  This is totally hokey but\n+            // otherwise we have a hard time separating legit region\n+            // errors from silly ones.\n+            self.report_region_errors(&errors); // see error_reporting.rs\n+        }\n     }\n \n     pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {"}, {"sha": "908a2d47401e5ac5dce990af785e3611ef6193d8", "filename": "src/test/compile-fail/issue-30580.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd/src%2Ftest%2Fcompile-fail%2Fissue-30580.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd/src%2Ftest%2Fcompile-fail%2Fissue-30580.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30580.rs?ref=59279b5abbb8c7780f44c82bb8a8bdb0fbacbecd", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo { a: u32 }\n+pub struct Pass<'a, 'tcx: 'a>(&'a mut &'a (), &'a &'tcx ());\n+\n+impl<'a, 'tcx> Pass<'a, 'tcx>\n+{\n+    pub fn tcx(&self) -> &'a &'tcx () { self.1 }\n+    fn lol(&mut self, b: &Foo)\n+    {\n+        b.c; //~ ERROR no field with that name was found\n+        self.tcx();\n+    }\n+}\n+\n+fn main() {}"}]}