{"sha": "b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDgxZDk4ZGJjNGNlYTY5MjA3OTNjN2UyOTUyYTBkMzhlYzU0M2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-23T10:02:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-23T10:02:11Z"}, "message": "Merge #7017\n\n7017: Document `make` module design r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "52cdc08fd274687db2b6d378f09cca5fd951e405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cdc08fd274687db2b6d378f09cca5fd951e405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4xWjCRBK7hj4Ov3rIwAAdHIIACQt1AfT15BillwSXiZUHe/H\nXCvwUBMJs1lA9zuhZKfW6M3A4lZ8LbiBXE21ecMGX/VRioFLJBo01AxQwy76X3Ap\n5J40z48Y9aPn0O/xZ1y1MVV3SNh84ZtQGDRKrE/LjSx6aa0vkLdmUFZxuvba2tUh\nrPT9z4xfXU/0nDQ8FHloiUy1mL8V8E+EfbMAzWR5kuFYq3mPUZdWL4tzMZKLxVU1\nHacdwIsN0VFma9BZjWy/GMYnF9tQGOLboPux3BbiMWDfHhJxkTwYBpWxb6AGsrPw\njU33ZWn08sTN4mXZnBbpHY3wdx35V8zZatjmwy+XRi3H6WG1eWCclCSSm/urq1c=\n=XXLQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 52cdc08fd274687db2b6d378f09cca5fd951e405\nparent ee06096b0c40f4eba5ecd3c3e80f7951587d8047\nparent f00f75a078ba15131f328eff8532776fbc3a6f9a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608717731 +0000\ncommitter GitHub <noreply@github.com> 1608717731 +0000\n\nMerge #7017\n\n7017: Document `make` module design r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "html_url": "https://github.com/rust-lang/rust/commit/b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d81d98dbc4cea6920793c7e2952a0d38ec543e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "html_url": "https://github.com/rust-lang/rust/commit/ee06096b0c40f4eba5ecd3c3e80f7951587d8047"}, {"sha": "f00f75a078ba15131f328eff8532776fbc3a6f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00f75a078ba15131f328eff8532776fbc3a6f9a", "html_url": "https://github.com/rust-lang/rust/commit/f00f75a078ba15131f328eff8532776fbc3a6f9a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "cafa4c198923f393ac3d12d0ccac0e1fb036b2a2", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0d81d98dbc4cea6920793c7e2952a0d38ec543e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d81d98dbc4cea6920793c7e2952a0d38ec543e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=b0d81d98dbc4cea6920793c7e2952a0d38ec543e", "patch": "@@ -4,6 +4,11 @@\n //! Note that all functions here intended to be stupid constructors, which just\n //! assemble a finish node from immediate children. If you want to do something\n //! smarter than that, it probably doesn't belong in this module.\n+//!\n+//! Keep in mind that `from_text` functions should be kept private. The public\n+//! API should require to assemble every node piecewise. The trick of\n+//! `parse(format!())` we use internally is an implementation detail -- long\n+//! term, it will be replaced with direct tree manipulation.\n use itertools::Itertools;\n use stdx::format_to;\n \n@@ -16,7 +21,8 @@ pub fn name(text: &str) -> ast::Name {\n pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n-\n+// FIXME: replace stringly-typed constructor with a family of typed ctors, a-la\n+// `expr_xxx`.\n pub fn ty(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }"}]}