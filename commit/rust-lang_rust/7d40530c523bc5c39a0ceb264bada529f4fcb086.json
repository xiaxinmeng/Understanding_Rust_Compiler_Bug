{"sha": "7d40530c523bc5c39a0ceb264bada529f4fcb086", "node_id": "C_kwDOAAsO6NoAKDdkNDA1MzBjNTIzYmM1YzM5YTBjZWIyNjRiYWRhNTI5ZjRmY2IwODY", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:28:24Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:32:15Z"}, "message": "Bless stderr files after rustfmt", "tree": {"sha": "6e6388b259b6b0d571ba3e4190b4162364abf839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6388b259b6b0d571ba3e4190b4162364abf839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d40530c523bc5c39a0ceb264bada529f4fcb086", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKyDq8ACgkQ+boUO5X/\nbYICfhAAkCODNUwXLTN3wyrVsM/5xmPNFhRbiFaJTb8YVHh6EqncSWk9YAVbk+jq\nFcKcbh7fADRiiLvUMByO/szA52GdWP1xXUR8Gt55Kgw1jWqy7YUGOw1QGZpIcx25\ntrBboymWLqdATBkYI7W7BVAtwTJRavuvaEV/XPqR7HKYfhAAAUvcbGRFi9W2Q6bC\niXnVfKiXaw/mVnJ0Iz1QJAYEX6ZJ3OP1L8KG/rXDA+9Eo8jW4RPun03Yp4e9jUGn\ncwQMcvnTHYy1AHttJrmtVDJwLXjP2/NA/SnRVCodZuMIibdNPaKsW0hgaHeI6PE0\nGIYRMiQnX9Msosyrc1OdaBBbJ9P1IqEMeatix1nCfHhQxmuu6L/kBhjTDH/cSQlB\n/ofUoGc0WLiMqFw6+HmF2erBDrf0jnscxGMZPGdCaEHV+P1DJ0lCl/N6B3HCI2x/\nrBKsaGY6/b3wFA9YCXpuNkwpaI7TBLRfL6mg5lEh2K0Yi9KgZ/r/Rt/YRsIx+tsZ\ny0di5cdhZ48KHc/9cIS4azJqeJfNXa5cS0/a57j3IXov+iSpTDgVBjc6GD3UCAhz\ncThGDXFozuTCEie2DXK03zr2kJHgzvUheOmYCg7glUjPXruhM5IhjG56CmadDmIk\nQJrfgis0JrxgYiylRJPGqfUxQqKAgZeERW34eOoV4Uwt8Fy3KB4=\n=EvhG\n-----END PGP SIGNATURE-----", "payload": "tree 6e6388b259b6b0d571ba3e4190b4162364abf839\nparent b3a689e0089a1e41d11f6d4fa83ace7505bbb164\nauthor David Tolnay <dtolnay@gmail.com> 1655836104 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655836335 -0700\n\nBless stderr files after rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d40530c523bc5c39a0ceb264bada529f4fcb086", "html_url": "https://github.com/rust-lang/rust/commit/7d40530c523bc5c39a0ceb264bada529f4fcb086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d40530c523bc5c39a0ceb264bada529f4fcb086/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a689e0089a1e41d11f6d4fa83ace7505bbb164", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a689e0089a1e41d11f6d4fa83ace7505bbb164", "html_url": "https://github.com/rust-lang/rust/commit/b3a689e0089a1e41d11f6d4fa83ace7505bbb164"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "2a3a8f0f55c3b62264bf9e49c3950ebe5233b70a", "filename": "tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n   --> $DIR/thread_local_static_dealloc.rs:LL:CC\n    |\n-LL |     let _val = *(dangling_ptr as *const u8);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+LL |         let _val = *(dangling_ptr as *const u8);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "33060a7818ff07df3f69fc30f45dd1ce978acdb3", "filename": "tests/fail/stacked_borrows/interior_mut2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     let _val = *inner_shr.get();\n-   |                 ^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         let _val = *inner_shr.get();\n+   |                     ^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     let inner_shr = &*inner_uniq;\n-   |                     ^^^^^^^^^^^^\n+LL |         let inner_shr = &*inner_uniq;\n+   |                         ^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/interior_mut2.rs:LL:CC\n    |\n-LL |     *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c2c471fba88109fcf9a269d66718b40807392a46", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -12,8 +12,8 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC\n   --> $DIR/issue-miri-1050-1.rs:LL:CC\n    |\n-LL |     Box::from_raw(ptr as *mut u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Box::from_raw(ptr as *mut u32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c49852cb7f4f8a5b4f4af3248ceef9018eacb73f", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -12,8 +12,8 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC\n   --> $DIR/issue-miri-1050-2.rs:LL:CC\n    |\n-LL |     Box::from_raw(ptr.as_ptr());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Box::from_raw(ptr.as_ptr());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "ea14536a399053d112bc283565d441f0dc2aa63e", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,30 +1,30 @@\n error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |     *LEAK = 7;\n-   |     ^^^^^^^^^\n-   |     |\n-   |     attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |     this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         *LEAK = 7;\n+   |         ^^^^^^^^^\n+   |         |\n+   |         attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: tag was most recently created at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |     LEAK = x as *const _ as *mut _;\n-   |            ^\n+LL |         LEAK = x as *const _ as *mut _;\n+   |                ^\n help: tag was later invalidated at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |   *our = 5;\n-   |   ^^^^^^^^\n+LL |     *our = 5;\n+   |     ^^^^^^^^\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n-LL |   unknown_code_2();\n-   |   ^^^^^^^^^^^^^^^^\n+LL |     unknown_code_2();\n+   |     ^^^^^^^^^^^^^^^^\n note: inside `main` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |"}, {"sha": "85baf93613a209bff67ca55dd9a4e6cb2501c08b", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let _val = *raw1;\n-   |                ^^^^^\n-   |                |\n-   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         let _val = *raw1;\n+   |                    ^^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let raw1 = ptr1.as_mut();\n-   |                ^^^^^^^^^^^^^\n+LL |         let raw1 = ptr1.as_mut();\n+   |                    ^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/mut_exclusive_violation2.rs:LL:CC\n    |\n-LL |     let _raw2 = ptr2.as_mut();\n-   |                 ^^^^^^^^^^^^^\n+LL |         let _raw2 = ptr2.as_mut();\n+   |                     ^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4bee128d68a40a7d9c353f50d19201bf2d683d1c", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n   --> $DIR/return_invalid_mut_option.rs:LL:CC\n    |\n-LL |         Some(_x) => {},\n+LL |         Some(_x) => {}\n    |              ^^\n    |              |\n    |              trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location"}, {"sha": "a23c69d12db16ce4c82563d9f294654425b47e41", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,7 +1,7 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n   --> $DIR/return_invalid_shr_option.rs:LL:CC\n    |\n-LL |         Some(_x) => {},\n+LL |         Some(_x) => {}\n    |              ^^\n    |              |\n    |              trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location"}, {"sha": "151654bad5cfeab1b7a21135da30f59fb7c83e41", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     y.get_mut();\n-   |     ^^^^^^^^^^^\n-   |     |\n-   |     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         y.get_mut();\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n    |\n-LL |     shr_rw.set(1);\n-   |     ^^^^^^^^^^^^^\n+LL |         shr_rw.set(1);\n+   |         ^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c0bf809356bd6d14fe321152bcbd20382f7e2021", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     let _val = *y;\n-   |                ^^\n-   |                |\n-   |                attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n-   |                this error occurs as part of an access at ALLOC[$HEX..$HEX]\n+LL |         let _val = *y;\n+   |                    ^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[$HEX..$HEX]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [$HEX..$HEX]\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n   --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n    |\n-LL |     shr_rw.replace(1);\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |         shr_rw.replace(1);\n+   |         ^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2b095dc3c1c02660226f5145c776ed2cbf0d0580", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n   --> $DIR/transmute_fat1.rs:LL:CC\n    |\n-LL |         std::mem::transmute::<&[u8], $ARRAY>(&[1u8])\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n+LL |     let bad = unsafe { std::mem::transmute::<&[u8], $ARRAY>(&[1u8]) };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "0e6ca83366ad2cf7d83264a0021c6dd7f998ff4e", "filename": "tests/fail/unaligned_pointers/alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/alignment.rs:LL:CC\n    |\n-LL |         *(x_ptr        as *mut u32) = 42;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         *(x_ptr as *mut u32) = 42;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "dbaee46a93b8fd549e9c847125ac01e702cb81bc", "filename": "tests/fail/validity/ref_to_uninhabited1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a box pointing to uninhabited type !\n   --> $DIR/ref_to_uninhabited1.rs:LL:CC\n    |\n-LL |     let x: Box<!> = transmute(&mut 42);\n-   |                     ^^^^^^^^^^^^^^^^^^ type validation failed: encountered a box pointing to uninhabited type !\n+LL |         let x: Box<!> = transmute(&mut 42);\n+   |                         ^^^^^^^^^^^^^^^^^^ type validation failed: encountered a box pointing to uninhabited type !\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "115cdfedf7775ffd91a92baa9a9cb62bc48225bc", "filename": "tests/fail/validity/ref_to_uninhabited2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n   --> $DIR/ref_to_uninhabited2.rs:LL:CC\n    |\n-LL |     let _x: &(i32, Void) = transmute(&42);\n-   |                            ^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n+LL |         let _x: &(i32, Void) = transmute(&42);\n+   |                                ^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to uninhabited type (i32, Void)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "9c8d2929bda00cf767eed4190e0d8384714387b7", "filename": "tests/fail/validity/too-big-slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n   --> $DIR/too-big-slice.rs:LL:CC\n    |\n-LL |     let _x: &[u8] = mem::transmute((ptr, usize::MAX));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n+LL |         let _x: &[u8] = mem::transmute((ptr, usize::MAX));\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "18dc5d8b9c18e32557fc9d8a8cc921184fc2b691", "filename": "tests/fail/validity/too-big-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d40530c523bc5c39a0ceb264bada529f4fcb086/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.stderr?ref=7d40530c523bc5c39a0ceb264bada529f4fcb086", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n   --> $DIR/too-big-unsized.rs:LL:CC\n    |\n-LL |     let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n+LL |         let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: total size is bigger than largest supported object\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}]}