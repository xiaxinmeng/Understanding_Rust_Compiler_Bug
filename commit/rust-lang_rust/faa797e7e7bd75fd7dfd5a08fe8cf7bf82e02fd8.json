{"sha": "faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8", "node_id": "C_kwDOAAsO6NoAKGZhYTc5N2U3ZTdiZDc1ZmQ3ZGZkNWEwOGZlOGNmN2JmODJlMDJmZDg", "commit": {"author": {"name": "Flying-Toast", "email": "38232168+Flying-Toast@users.noreply.github.com", "date": "2023-05-06T18:12:00Z"}, "committer": {"name": "Flying-Toast", "email": "38232168+Flying-Toast@users.noreply.github.com", "date": "2023-05-06T21:05:53Z"}, "message": "Emit while_true lint spanning the entire loop condition\n\nThe lint that suggests `loop {}` instead of `while true {}` has functionality to 'pierce' parenthesis\nin cases like `while (true) {}`. In these cases, the emitted span only went to the hi of the `true`\nitself, not spanning the entire loop condition.\n\nBefore:\n```\nwarning: denote infinite loops with `loop { ... }`\n --> /tmp/foobar.rs:2:5\n  |\n2 |     while ((((((true)))))) {}\n  |     ^^^^^^^^^^^^^^^^ help: use `loop`\n  |\n  = note: `#[warn(while_true)]` on by default\n```\n\nAfter:\n```\nwarning: denote infinite loops with `loop { ... }`\n --> /tmp/foobar.rs:2:5\n  |\n2 |     while ((((((true)))))) {}\n  |     ^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n  |\n  = note: `#[warn(while_true)]` on by default\n```", "tree": {"sha": "4c2395c22c39c5252c645f4cd2cf25f620d1042e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c2395c22c39c5252c645f4cd2cf25f620d1042e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8", "html_url": "https://github.com/rust-lang/rust/commit/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8/comments", "author": {"login": "Flying-Toast", "id": 38232168, "node_id": "MDQ6VXNlcjM4MjMyMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/38232168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flying-Toast", "html_url": "https://github.com/Flying-Toast", "followers_url": "https://api.github.com/users/Flying-Toast/followers", "following_url": "https://api.github.com/users/Flying-Toast/following{/other_user}", "gists_url": "https://api.github.com/users/Flying-Toast/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flying-Toast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flying-Toast/subscriptions", "organizations_url": "https://api.github.com/users/Flying-Toast/orgs", "repos_url": "https://api.github.com/users/Flying-Toast/repos", "events_url": "https://api.github.com/users/Flying-Toast/events{/privacy}", "received_events_url": "https://api.github.com/users/Flying-Toast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Flying-Toast", "id": 38232168, "node_id": "MDQ6VXNlcjM4MjMyMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/38232168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flying-Toast", "html_url": "https://github.com/Flying-Toast", "followers_url": "https://api.github.com/users/Flying-Toast/followers", "following_url": "https://api.github.com/users/Flying-Toast/following{/other_user}", "gists_url": "https://api.github.com/users/Flying-Toast/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flying-Toast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flying-Toast/subscriptions", "organizations_url": "https://api.github.com/users/Flying-Toast/orgs", "repos_url": "https://api.github.com/users/Flying-Toast/repos", "events_url": "https://api.github.com/users/Flying-Toast/events{/privacy}", "received_events_url": "https://api.github.com/users/Flying-Toast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9a7bf848e412c81e3045245acbd5a01641a610", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9a7bf848e412c81e3045245acbd5a01641a610", "html_url": "https://github.com/rust-lang/rust/commit/dd9a7bf848e412c81e3045245acbd5a01641a610"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "87c77a173b3a74ee7d31d64014ed7462eac4dfbd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=faa797e7e7bd75fd7dfd5a08fe8cf7bf82e02fd8", "patch": "@@ -116,8 +116,7 @@ impl EarlyLintPass for WhileTrue {\n     #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::While(cond, _, label) = &e.kind\n-            && let cond = pierce_parens(cond)\n-            && let ast::ExprKind::Lit(token_lit) = cond.kind\n+            && let ast::ExprKind::Lit(token_lit) = pierce_parens(cond).kind\n             && let token::Lit { kind: token::Bool, symbol: kw::True, .. } = token_lit\n             && !cond.span.from_expansion()\n         {"}]}