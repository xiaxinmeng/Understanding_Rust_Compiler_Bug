{"sha": "ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTA0MzUwNTBhZTU3YzUxNzFjMTkyMjRjYTZlOWY4YTRlMzQzNWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-22T17:15:54Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:16Z"}, "message": "Make generics and attr queries use ItemTree\n\nNow it's fast", "tree": {"sha": "02173f630fafb0804bb6009da7216fcab8a814d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02173f630fafb0804bb6009da7216fcab8a814d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "html_url": "https://github.com/rust-lang/rust/commit/ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19586bc5c62541db5253986c84ce3ba5c6392656", "url": "https://api.github.com/repos/rust-lang/rust/commits/19586bc5c62541db5253986c84ce3ba5c6392656", "html_url": "https://github.com/rust-lang/rust/commit/19586bc5c62541db5253986c84ce3ba5c6392656"}], "stats": {"total": 100, "additions": 79, "deletions": 21}, "files": [{"sha": "deea83a6d7ed4d97dd66dcd4864b0d3e2b555be0", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "patch": "@@ -13,7 +13,11 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase, nameres::ModuleSource, path::ModPath, src::HasChildSource, src::HasSource,\n+    db::DefDatabase,\n+    item_tree::{ItemTreeId, ItemTreeNode},\n+    nameres::ModuleSource,\n+    path::ModPath,\n+    src::HasChildSource,\n     AdtId, AttrDefId, Lookup,\n };\n \n@@ -65,19 +69,19 @@ impl Attrs {\n                 Attrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => attrs_from_loc(it.lookup(db), db),\n-                AdtId::EnumId(it) => attrs_from_loc(it.lookup(db), db),\n-                AdtId::UnionId(it) => attrs_from_loc(it.lookup(db), db),\n+                AdtId::StructId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+                AdtId::EnumId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+                AdtId::UnionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             },\n-            AttrDefId::TraitId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::TraitId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::MacroDefId(it) => {\n                 it.ast_id.map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n             }\n-            AttrDefId::ImplId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::StaticId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),\n-            AttrDefId::TypeAliasId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::ImplId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::ConstId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::StaticId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::FunctionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::TypeAliasId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n         }\n     }\n \n@@ -187,11 +191,8 @@ where\n     Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n }\n \n-fn attrs_from_loc<T>(node: T, db: &dyn DefDatabase) -> Attrs\n-where\n-    T: HasSource,\n-    T::Value: ast::AttrsOwner,\n-{\n-    let src = node.source(db);\n-    Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n+fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> Attrs {\n+    let tree = db.item_tree(id.file_id);\n+    let mod_item = N::id_to_mod_item(id.value);\n+    tree.attrs(mod_item).clone()\n }"}, {"sha": "c4b9f626f4ab66af69d305f9cf46fc67a22c88e7", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "patch": "@@ -74,8 +74,53 @@ impl GenericParams {\n         def: GenericDefId,\n     ) -> Arc<GenericParams> {\n         let _p = profile(\"generic_params_query\");\n-        let (params, _source_map) = GenericParams::new(db, def);\n-        Arc::new(params)\n+\n+        let generics = match def {\n+            GenericDefId::FunctionId(id) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::AdtId(AdtId::StructId(id)) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::AdtId(AdtId::EnumId(id)) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::AdtId(AdtId::UnionId(id)) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::TraitId(id) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::TypeAliasId(id) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::ImplId(id) => {\n+                let id = id.lookup(db).id;\n+                let tree = db.item_tree(id.file_id);\n+                let item = &tree[id.value];\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => GenericParams::default(),\n+        };\n+        Arc::new(generics)\n     }\n \n     fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {"}, {"sha": "efcb5dc604dcfb1f469d450c027d42ae5f005d2f", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "patch": "@@ -175,6 +175,9 @@ pub trait ItemTreeNode: Clone {\n \n     /// Downcasts a `ModItem` to a `FileItemTreeId` specific to this type.\n     fn id_from_mod_item(mod_item: ModItem) -> Option<FileItemTreeId<Self>>;\n+\n+    /// Upcasts a `FileItemTreeId` to a generic `ModItem`.\n+    fn id_to_mod_item(id: FileItemTreeId<Self>) -> ModItem;\n }\n \n /// Trait for item tree nodes that allow accessing the original AST node.\n@@ -232,6 +235,10 @@ macro_rules! nodes {\n                     None\n                 }\n             }\n+\n+            fn id_to_mod_item(id: FileItemTreeId<Self>) -> ModItem {\n+                ModItem::$node(id)\n+            }\n         }\n     )+ };\n }"}, {"sha": "841c7a852c9896c97dc14679fd48e71dda3ec87a", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "patch": "@@ -553,7 +553,12 @@ impl Ctx {\n \n                 generics.fill(&self.body_ctx, &mut sm, node);\n             }\n-            GenericsOwner::Impl => {}\n+            GenericsOwner::Impl => {\n+                // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n+                // type-parameter, but rather is a type-alias for impl's target\n+                // type, so this is handled by the resolver.\n+                generics.fill(&self.body_ctx, &mut sm, node);\n+            }\n         }\n         generics\n     }"}, {"sha": "7b8523b9f07924a23bb9fca8b0fce8779120102f", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0435050ae57c5171c19224ca6e9f8a4e3435d/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=ffa0435050ae57c5171c19224ca6e9f8a4e3435d", "patch": "@@ -200,7 +200,7 @@ fn simple_inner_items() {\n inner attrs: Attrs { entries: None }\n \n top-level items:\n-Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+Impl { generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"A\"))] }, generic_args: [None] }) }] }, target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n \n inner items:\n FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):"}]}