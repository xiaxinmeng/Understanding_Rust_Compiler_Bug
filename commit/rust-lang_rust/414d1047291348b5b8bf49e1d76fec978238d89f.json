{"sha": "414d1047291348b5b8bf49e1d76fec978238d89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNGQxMDQ3MjkxMzQ4YjViOGJmNDllMWQ3NmZlYzk3ODIzOGQ4OWY=", "commit": {"author": {"name": "Baoshan", "email": "pangbw@gmail.com", "date": "2019-09-06T05:42:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-06T05:42:04Z"}, "message": "Merge pull request #17 from rust-lang/master\n\nsync with rust-lang/rust master branch", "tree": {"sha": "7894264d7d7758bbfe15952b598cabd05da75911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7894264d7d7758bbfe15952b598cabd05da75911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414d1047291348b5b8bf49e1d76fec978238d89f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcfGsCRBK7hj4Ov3rIwAAdHIIAG1eArvODSNlZNTEEmkJzYKh\nIE4MewvM3QUuyv5jiKiLgqbzwbMMBDPVi1nNbkPBswgoHgGZ0c85i/z2EzOkiEf5\nNisLYk7VESLHxQ8zItVQ0rmRD+HeauS6hoGEdElPu79s+Cbm/cl2kT3LoH5HYh2h\nofl5HPLFba/mWBTmhId/DZhRFdzarRc6KNkIYaYmXkG+NS0qfCoOa0FaUXnp5Nsn\nyRcU6Kn/4uTf/9rqI46pnFFK9+TMF4gSQ8DcA4NZQSNPXPrNoJCVvg40DrDPaRW0\n7e5d3gwt0lgn/HcUOQBU4btML/YUSpGCRK4Kp1LgnX9QLxYRKxU/O1pAa1eB+og=\n=BnNX\n-----END PGP SIGNATURE-----\n", "payload": "tree 7894264d7d7758bbfe15952b598cabd05da75911\nparent 109e16e8574a4fc47bf7c1d26b6000731002bc34\nparent 618768492f0c731fcb770dc2d178abe840846419\nauthor Baoshan <pangbw@gmail.com> 1567748524 -0700\ncommitter GitHub <noreply@github.com> 1567748524 -0700\n\nMerge pull request #17 from rust-lang/master\n\nsync with rust-lang/rust master branch"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414d1047291348b5b8bf49e1d76fec978238d89f", "html_url": "https://github.com/rust-lang/rust/commit/414d1047291348b5b8bf49e1d76fec978238d89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414d1047291348b5b8bf49e1d76fec978238d89f/comments", "author": {"login": "BaoshanPang", "id": 3380860, "node_id": "MDQ6VXNlcjMzODA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3380860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoshanPang", "html_url": "https://github.com/BaoshanPang", "followers_url": "https://api.github.com/users/BaoshanPang/followers", "following_url": "https://api.github.com/users/BaoshanPang/following{/other_user}", "gists_url": "https://api.github.com/users/BaoshanPang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoshanPang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoshanPang/subscriptions", "organizations_url": "https://api.github.com/users/BaoshanPang/orgs", "repos_url": "https://api.github.com/users/BaoshanPang/repos", "events_url": "https://api.github.com/users/BaoshanPang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoshanPang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109e16e8574a4fc47bf7c1d26b6000731002bc34", "url": "https://api.github.com/repos/rust-lang/rust/commits/109e16e8574a4fc47bf7c1d26b6000731002bc34", "html_url": "https://github.com/rust-lang/rust/commit/109e16e8574a4fc47bf7c1d26b6000731002bc34"}, {"sha": "618768492f0c731fcb770dc2d178abe840846419", "url": "https://api.github.com/repos/rust-lang/rust/commits/618768492f0c731fcb770dc2d178abe840846419", "html_url": "https://github.com/rust-lang/rust/commit/618768492f0c731fcb770dc2d178abe840846419"}], "stats": {"total": 4293, "additions": 2720, "deletions": 1573}, "files": [{"sha": "243a326646c382c3b3d2e66984ec2d3e7658bdd8", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1011,6 +1011,7 @@ dependencies = [\n name = \"fmt_macros\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_lexer\",\n  \"syntax_pos\",\n ]\n \n@@ -2324,9 +2325,9 @@ checksum = \"676e8eb2b1b4c9043511a9b7bea0915320d7e502b0a079fb03f9635a5252b18c\"\n \n [[package]]\n name = \"polonius-engine\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6b8a5defa2aef9ba4999aaa745fbc01c622ecea35964a306adc3e44be4f3b5b\"\n+checksum = \"50fa9dbfd0d3d60594da338cfe6f94028433eecae4b11b7e83fd99759227bbfe\"\n dependencies = [\n  \"datafrog\",\n  \"log\",\n@@ -2372,7 +2373,7 @@ version = \"0.4.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -3290,7 +3291,7 @@ dependencies = [\n name = \"rustc_lexer\"\n version = \"0.1.0\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-xid 0.2.0\",\n ]\n \n [[package]]\n@@ -3368,6 +3369,7 @@ dependencies = [\n  \"rustc_apfloat\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_lexer\",\n  \"rustc_target\",\n  \"serialize\",\n  \"smallvec\",\n@@ -3976,7 +3978,7 @@ checksum = \"641e117d55514d6d918490e47102f7e08d096fdde360247e4a10f7a91a8478d3\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -3988,7 +3990,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"syn\",\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -4017,6 +4019,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_lexer\",\n  \"rustc_target\",\n  \"smallvec\",\n  \"syntax\",\n@@ -4532,6 +4535,12 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n+\n [[package]]\n name = \"unicode_categories\"\n version = \"0.1.1\""}, {"sha": "5ca585c4a7552efb546e7681c3de0712f4ae4fdc", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1 +1 @@\n-Subproject commit 432ca26686c11d396eed6a59499f93ce1bf2433c\n+Subproject commit 5ca585c4a7552efb546e7681c3de0712f4ae4fdc"}, {"sha": "090c015f7939665866432c334957bd536c811870", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1 +1 @@\n-Subproject commit d191a0cdd3b92648e0f1e53b13140a14677cc65b\n+Subproject commit 090c015f7939665866432c334957bd536c811870"}, {"sha": "e76be6b2dc84c6a992e186157efe29d625e29b94", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1 +1 @@\n-Subproject commit 580839d90aacd537f0293697096fa8355bc4e673\n+Subproject commit e76be6b2dc84c6a992e186157efe29d625e29b94"}, {"sha": "6f1bbe60569fd4ccfeadcfceefb68c7ec97ced13", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -105,5 +105,6 @@ The following table shows known good combinations of toolchain versions.\n | Rust 1.34 |     \u2717     |     \u2713     |\n | Rust 1.35 |     \u2717     |     \u2713     |\n | Rust 1.36 |     \u2717     |     \u2713     |\n+| Rust 1.37 |     \u2717     |     \u2713     |\n \n Note that the compatibility policy for this feature might change in the future."}, {"sha": "68877b48433d5462d3581d202f483a87d90224f3", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -57,12 +57,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -78,7 +78,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}, {"sha": "a69eb0f6d4b20fb1b05e621f4b962f1eb7c465d0", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -547,29 +547,6 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` satisfies the `XID_Start` Unicode property, and false\n-    /// otherwise.\n-    ///\n-    /// `XID_Start` is a Unicode Derived Property specified in\n-    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n-    /// mostly similar to `ID_Start` but modified for closure under `NFKx`.\n-    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n-    pub fn is_xid_start(self) -> bool {\n-        derived_property::XID_Start(self)\n-    }\n-\n-    /// Returns `true` if this `char` satisfies the `XID_Continue` Unicode property, and false\n-    /// otherwise.\n-    ///\n-    /// `XID_Continue` is a Unicode Derived Property specified in\n-    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n-    /// mostly similar to `ID_Continue` but modified for closure under NFKx.\n-    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n-    #[inline]\n-    pub fn is_xid_continue(self) -> bool {\n-        derived_property::XID_Continue(self)\n-    }\n-\n     /// Returns `true` if this `char` is lowercase.\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core"}, {"sha": "7ec2295f97e368913b98dc4ce0b0fdde5f392655", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -9,14 +9,22 @@\n //! * [`Ord`] and [`PartialOrd`] are traits that allow you to define total and\n //!   partial orderings between values, respectively. Implementing them overloads\n //!   the `<`, `<=`, `>`, and `>=` operators.\n-//! * [`Ordering`][cmp::Ordering] is an enum returned by the\n-//!   main functions of [`Ord`] and [`PartialOrd`], and describes an ordering.\n-//! * [`Reverse`][cmp::Reverse] is a struct that allows you to easily reverse\n-//!   an ordering.\n-//! * [`max`][cmp::max] and [`min`][cmp::min] are functions that build off of\n-//!   [`Ord`] and allow you to find the maximum or minimum of two values.\n+//! * [`Ordering`] is an enum returned by the main functions of [`Ord`] and\n+//!   [`PartialOrd`], and describes an ordering.\n+//! * [`Reverse`] is a struct that allows you to easily reverse an ordering.\n+//! * [`max`] and [`min`] are functions that build off of [`Ord`] and allow you\n+//!   to find the maximum or minimum of two values.\n //!\n //! For more details, see the respective documentation of each item in the list.\n+//!\n+//! [`Eq`]: trait.Eq.html\n+//! [`PartialEq`]: trait.PartialEq.html\n+//! [`Ord`]: trait.Ord.html\n+//! [`PartialOrd`]: trait.PartialOrd.html\n+//! [`Ordering`]: enum.Ordering.html\n+//! [`Reverse`]: struct.Reverse.html\n+//! [`max`]: fn.max.html\n+//! [`min`]: fn.min.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8e1ac6082c8a8fa98de57c097e8c7d762a6dc088", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -66,13 +66,6 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     {\n         self.iter.rfind(predicate)\n     }\n-\n-    #[inline]\n-    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n-        P: FnMut(Self::Item) -> bool\n-    {\n-        self.iter.position(predicate)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1080fd32a8862dd697dee5ca4cca6212db7ec553", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -462,7 +462,7 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     /// can ignore the pinning invariants when unwrapping it.\n     ///\n     /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n-    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub fn into_inner(pin: Pin<P>) -> P {\n         pin.pointer\n@@ -569,7 +569,7 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n     /// [`Pin::into_inner`]: #method.into_inner\n-    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n     pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n         pin.pointer"}, {"sha": "ed40a5f31d9bd75105b25c289407e86d62b2516d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -820,6 +820,87 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n+impl<T: Copy, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x: Result<&i32, i32> = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.map(|&t| t)\n+    }\n+}\n+\n+impl<T: Copy, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let mut val = 12;\n+    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.map(|&mut t| t)\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x: Result<&i32, i32> = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let mut val = 12;\n+    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+\n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     ///"}, {"sha": "8e0658d87c1fb466badfff3bb8c6b4d73797ed3d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1688,6 +1688,12 @@ fn test_rposition() {\n     assert!(v.iter().rposition(g).is_none());\n }\n \n+#[test]\n+fn test_rev_rposition() {\n+    let v = [0, 0, 1, 1];\n+    assert_eq!(v.iter().rev().rposition(|&x| x == 1), Some(1));\n+}\n+\n #[test]\n #[should_panic]\n fn test_rposition_panic() {"}, {"sha": "a3ec9fd51f064cb90b5d325221bba48b313487a5", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -13,8 +13,3 @@ pub mod derived_property {\n pub mod conversions {\n     pub use crate::unicode::tables::conversions::{to_lower, to_upper};\n }\n-\n-// For use in libsyntax\n-pub mod property {\n-    pub use crate::unicode::tables::property::Pattern_White_Space;\n-}"}, {"sha": "5b5be485431217849a1c4e87e0fb98467d01cd04", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 0, "deletions": 375, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -890,384 +890,9 @@ pub(crate) mod derived_property {\n         Uppercase_table.lookup(c)\n     }\n \n-    const XID_Continue_table: &super::BoolTrie = &super::BoolTrie {\n-        r1: [\n-            0x03ff000000000000, 0x07fffffe87fffffe, 0x04a0040000000000, 0xff7fffffff7fffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,\n-            0xffffffffffffffff, 0xb8dfffffffffffff, 0xfffffffbffffd7c0, 0xffbfffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffcfb, 0xffffffffffffffff,\n-            0xfffeffffffffffff, 0xffffffff027fffff, 0xbffffffffffe01ff, 0x000787ffffff00b6,\n-            0xffffffff07ff0000, 0xffffc3ffffffffff, 0xffffffffffffffff, 0x9ffffdff9fefffff,\n-            0xffffffffffff0000, 0xffffffffffffe7ff, 0x0003ffffffffffff, 0x243fffffffffffff\n-        ],\n-        r2: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-            24, 25, 26, 27, 28, 29, 30, 31, 4, 32, 33, 34, 4, 4, 4, 4, 4, 35, 36, 37, 38, 39, 40,\n-            41, 42, 4, 4, 4, 4, 4, 4, 4, 4, 43, 44, 45, 46, 47, 4, 48, 49, 50, 51, 52, 53, 54, 55,\n-            56, 57, 58, 59, 60, 4, 61, 4, 62, 63, 64, 65, 66, 4, 4, 4, 67, 4, 4, 4, 4, 68, 69, 70,\n-            71, 72, 73, 74, 75, 76, 77, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 79, 80, 4, 81, 82, 83, 84, 85, 60, 60, 60, 60, 60, 60, 60, 60, 86,\n-            42, 87, 88, 89, 4, 90, 91, 60, 60, 60, 60, 60, 60, 60, 60, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 52, 60, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 92, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 93, 94, 4, 4, 4, 4, 95, 96, 4, 97, 98, 4, 99, 100, 101, 62, 4, 102, 103,\n-            104, 4, 105, 106, 107, 4, 108, 109, 110, 4, 111, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 113, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 4, 4, 4, 4, 4, 103, 4, 114,\n-            115, 116, 97, 117, 4, 118, 4, 4, 119, 120, 121, 122, 123, 124, 4, 125, 126, 127, 128,\n-            129\n-        ],\n-        r3: &[\n-            0x00003fffffffffff, 0x000007ff0fffffff, 0x3fdfffff00000000, 0xfffffffbfff80000,\n-            0xffffffffffffffff, 0xfffeffcfffffffff, 0xf3c5fdfffff99fef, 0x5003ffcfb080799f,\n-            0xd36dfdfffff987ee, 0x003fffc05e023987, 0xf3edfdfffffbbfee, 0xfe00ffcf00013bbf,\n-            0xf3edfdfffff99fee, 0x0002ffcfb0c0399f, 0xc3ffc718d63dc7ec, 0x0000ffc000813dc7,\n-            0xe3fffdfffffddfff, 0x0000ffcf07603ddf, 0xf3effdfffffddfef, 0x0006ffcf40603ddf,\n-            0xfffffffffffddfef, 0xfc00ffcf80f07ddf, 0x2ffbfffffc7fffec, 0x000cffc0ff5f847f,\n-            0x07fffffffffffffe, 0x0000000003ff7fff, 0x3fffffaffffff7d6, 0x00000000f3ff3f5f,\n-            0xc2a003ff03000001, 0xfffe1ffffffffeff, 0x1ffffffffeffffdf, 0x0000000000000040,\n-            0xffffffffffff03ff, 0xffffffff3fffffff, 0xf7ffffffffff20bf, 0xffffffff3d7f3dff,\n-            0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0003fe00e7ffffff,\n-            0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,\n-            0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x001fffff001fdfff, 0x000ddfff000fffff,\n-            0x000003ff308fffff, 0xffffffff03ff3800, 0x01ffffffffffffff, 0xffff07ffffffffff,\n-            0x003fffffffffffff, 0x0fff0fff7fffffff, 0x001f3fffffffffc0, 0xffff0fffffffffff,\n-            0x0000000007ff03ff, 0xffffffff0fffffff, 0x9fffffff7fffffff, 0x3fff008003ff03ff,\n-            0x0000000000000000, 0x000ff80003ff0fff, 0x000fffffffffffff, 0x00ffffffffffffff,\n-            0x3fffffffffffe3ff, 0xe7ffffffffff01ff, 0x07fffffffff70000, 0xfbffffffffffffff,\n-            0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff, 0x1fdc1fff0fcf1fdc,\n-            0x8000000000000000, 0x8002000000100001, 0x000000001fff0000, 0x0001ffe21fff0000,\n-            0xf3fffd503f2ffc84, 0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff,\n-            0xffffffff7fffffff, 0x000ff81fffffffff, 0xffff20bfffffffff, 0x800080ffffffffff,\n-            0x7f7f7f7f007fffff, 0xffffffff7f7f7f7f, 0x1f3efffe000000e0, 0xfffffffee67fffff,\n-            0xf7ffffffffffffff, 0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000,\n-            0x0000ffffffffffff, 0x0000000000001fff, 0x3fffffffffff0000, 0x00000fffffff1fff,\n-            0xbff0ffffffffffff, 0x0003ffffffffffff, 0xfffffffcff800000, 0xfffffffffffff9ff,\n-            0xff8000000000007c, 0x000000ffffffffff, 0xe8ffffff03ff003f, 0xffff3fffffffffff,\n-            0x1fffffff000fffff, 0x7fffffff03ff8001, 0x007fffffffffffff, 0xfc7fffff03ff3fff,\n-            0x007cffff38000007, 0xffff7f7f007e7e7e, 0xffff00fff7ffffff, 0x03ff37ffffffffff,\n-            0xffff000fffffffff, 0x0ffffffffffff87f, 0x0000000003ffffff, 0x5f7ffdffe0f8007f,\n-            0xffffffffffffffdb, 0xfffffffffff80000, 0xfffffff03fffffff, 0x3fffffffffffffff,\n-            0xffffffffffff0000, 0xfffffffffffcffff, 0x03ff0000000000ff, 0x0018ffff0000ffff,\n-            0xaa8a00000000e000, 0x1fffffffffffffff, 0x87fffffe03ff0000, 0xffffffc007fffffe,\n-            0x7fffffffffffffff, 0x000000001cfcfcfc\n-        ],\n-        r4: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 13,\n-            14, 7, 15, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n-        ],\n-        r5: &[\n-            0, 1, 2, 3, 4, 5, 4, 6, 4, 4, 7, 8, 9, 10, 11, 12, 2, 2, 13, 14, 15, 16, 4, 4, 2, 2, 2,\n-            2, 17, 18, 4, 4, 19, 20, 21, 22, 23, 4, 24, 4, 25, 26, 27, 28, 29, 30, 31, 4, 2, 32, 33,\n-            33, 34, 4, 4, 4, 4, 4, 4, 4, 35, 36, 4, 37, 2, 38, 3, 39, 40, 41, 2, 42, 43, 4, 44, 45,\n-            46, 47, 4, 4, 2, 48, 2, 49, 4, 4, 50, 51, 2, 52, 53, 54, 55, 4, 4, 4, 3, 4, 56, 57, 4,\n-            4, 58, 59, 60, 61, 62, 53, 4, 4, 4, 4, 63, 64, 65, 4, 66, 67, 68, 4, 4, 4, 4, 37, 4, 4,\n-            4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 69, 4, 2, 70, 2, 2, 2, 71, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 70, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 72, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 2, 2, 2, 2, 2, 2, 2, 2, 53, 73, 4, 74, 17, 75, 76, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2,\n-            4, 4, 2, 77, 78, 79, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 80, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 33, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 21, 81, 2, 2, 2, 2,\n-            2, 82, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 83, 84, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 85, 86, 4, 4, 87, 4, 4, 4, 4, 4, 4, 2, 88, 89, 90, 91, 92, 2, 2, 2, 2, 93, 94, 95,\n-            96, 97, 98, 4, 4, 4, 4, 4, 4, 4, 4, 99, 100, 101, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 102, 4, 4, 4, 103, 104, 4, 4, 4, 4, 4, 105, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 106, 2, 107, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 108, 109, 110, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 111, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 11,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 112, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 113, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 114, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 115, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\n-        ],\n-        r6: &[\n-            0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,\n-            0x0000000000000000, 0x001fffffffffffff, 0x2000000000000000, 0xffffffff1fffffff,\n-            0x000000010001ffff, 0xffffe000ffffffff, 0x07ffffffffff07ff, 0xffffffff3fffffff,\n-            0x00000000003eff0f, 0xffff03ff3fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff,\n-            0x0000000fffffffff, 0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f,\n-            0x007fffff003fffff, 0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff,\n-            0xc0ffffffffffffff, 0x873ffffffeeff06f, 0x1fffffff00000000, 0x000000001fffffff,\n-            0x0000007ffffffeff, 0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff,\n-            0x00000000000001ff, 0x0007ffffffffffff, 0x03ff00ffffffffff, 0xffff00801fffffff,\n-            0x000000000001ffff, 0x007fffff00000000, 0x8000ffc00000007f, 0x03ff01ffffff0000,\n-            0xffdfffffffffffff, 0x004fffffffff0070, 0x0000000017ff1e1f, 0x40fffffffffbffff,\n-            0xffff01ffbfffbd7f, 0x03ff07ffffffffff, 0xfbedfdfffff99fef, 0x001f1fcfe081399f,\n-            0x00000000c3ff07ff, 0x0000000003ff00bf, 0xff3fffffffffffff, 0x000000003f000001,\n-            0x0000000003ff0011, 0x01ffffffffffffff, 0x00000000000003ff, 0x03ff0fffe7ffffff,\n-            0xffffffff00000000, 0x800003ffffffffff, 0xfffffcff00000000, 0x0000001bfcffffff,\n-            0x7fffffffffffffff, 0xffffffffffff0080, 0x0000000023ffffff, 0xff7ffffffffffdff,\n-            0xfffc000003ff0001, 0x007ffefffffcffff, 0xb47ffffffffffb7f, 0xfffffdbf03ff00ff,\n-            0x000003ff01fb7fff, 0x0000000003ffffff, 0x00007fffffffffff, 0x000000000000000f,\n-            0x000000000000007f, 0x000003ff7fffffff, 0x001f3fffffff0000, 0xe0fffff803ff000f,\n-            0x000000000000ffff, 0xffffffffffff87ff, 0x00000000ffff80ff, 0x0000000b00000000,\n-            0x00ffffffffffffff, 0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff,\n-            0x0000000063ff01ff, 0xf807e3e000000000, 0x00003c0000000fe7, 0x000000000000001c,\n-            0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,\n-            0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,\n-            0xffff7fffffff7fff, 0xfffffdfffffffdff, 0xffffffffffffcff7, 0xf87fffffffffffff,\n-            0x00201fffffffffff, 0x0000fffef8000010, 0x000007dbf9ffff7f, 0x3fff1fffffffffff,\n-            0x00000000000043ff, 0x03ffffffffffffff, 0x00000000007f001f, 0x0000000003ff0fff,\n-            0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x00000000007fffff,\n-            0xffff0003ffffffff, 0x00000001ffffffff, 0x000000003fffffff, 0x0000ffffffffffff\n-        ],\n-    };\n-\n-    pub fn XID_Continue(c: char) -> bool {\n-        XID_Continue_table.lookup(c)\n-    }\n-\n-    const XID_Start_table: &super::BoolTrie = &super::BoolTrie {\n-        r1: [\n-            0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,\n-            0x0000000000000000, 0xb8df000000000000, 0xfffffffbffffd740, 0xffbfffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffc03, 0xffffffffffffffff,\n-            0xfffeffffffffffff, 0xffffffff027fffff, 0x00000000000001ff, 0x000787ffffff0000,\n-            0xffffffff00000000, 0xfffec000000007ff, 0xffffffffffffffff, 0x9c00c060002fffff,\n-            0x0000fffffffd0000, 0xffffffffffffe000, 0x0002003fffffffff, 0x043007fffffffc00\n-        ],\n-        r2: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-            24, 23, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 34, 34, 34, 34, 35, 36, 37, 38, 39,\n-            40, 41, 42, 34, 34, 34, 34, 34, 34, 34, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n-            54, 55, 56, 57, 58, 59, 60, 3, 61, 62, 63, 64, 65, 66, 67, 68, 34, 34, 34, 3, 34, 34,\n-            34, 34, 69, 70, 71, 72, 3, 73, 74, 3, 75, 76, 77, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 78,\n-            79, 34, 80, 81, 82, 83, 84, 3, 3, 3, 3, 3, 3, 3, 3, 85, 42, 86, 87, 88, 34, 89, 90, 3,\n-            3, 3, 3, 3, 3, 3, 3, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 53, 3, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 91, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 92, 93, 34, 34, 34, 34, 94,\n-            95, 96, 91, 97, 34, 98, 99, 100, 48, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\n-            111, 112, 34, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 114, 115, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 34, 34, 34, 34, 34,\n-            116, 34, 117, 118, 119, 120, 121, 34, 122, 34, 34, 123, 124, 125, 126, 3, 127, 34, 128,\n-            129, 130, 131, 132\n-        ],\n-        r3: &[\n-            0x00000110043fffff, 0x000007ff01ffffff, 0x3fdfffff00000000, 0x0000000000000000,\n-            0x23fffffffffffff0, 0xfffe0003ff010000, 0x23c5fdfffff99fe1, 0x10030003b0004000,\n-            0x036dfdfffff987e0, 0x001c00005e000000, 0x23edfdfffffbbfe0, 0x0200000300010000,\n-            0x23edfdfffff99fe0, 0x00020003b0000000, 0x03ffc718d63dc7e8, 0x0000000000010000,\n-            0x23fffdfffffddfe0, 0x0000000307000000, 0x23effdfffffddfe1, 0x0006000340000000,\n-            0x27fffffffffddfe0, 0xfc00000380704000, 0x2ffbfffffc7fffe0, 0x000000000000007f,\n-            0x0005fffffffffffe, 0x2005ffaffffff7d6, 0x00000000f000005f, 0x0000000000000001,\n-            0x00001ffffffffeff, 0x0000000000001f00, 0x800007ffffffffff, 0xffe1c0623c3f0000,\n-            0xffffffff00004003, 0xf7ffffffffff20bf, 0xffffffffffffffff, 0xffffffff3d7f3dff,\n-            0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0000000007ffffff,\n-            0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,\n-            0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x0003ffff0003dfff, 0x0001dfff0003ffff,\n-            0x000fffffffffffff, 0x0000000010800000, 0xffffffff00000000, 0x01ffffffffffffff,\n-            0xffff05ffffffffff, 0x003fffffffffffff, 0x000000007fffffff, 0x001f3fffffff0000,\n-            0xffff0fffffffffff, 0x00000000000003ff, 0xffffffff007fffff, 0x00000000001fffff,\n-            0x0000008000000000, 0x000fffffffffffe0, 0x0000000000000fe0, 0xfc00c001fffffff8,\n-            0x0000003fffffffff, 0x0000000fffffffff, 0x3ffffffffc00e000, 0xe7ffffffffff01ff,\n-            0x046fde0000000000, 0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff,\n-            0x1fdc1fff0fcf1fdc, 0x8002000000000000, 0x000000001fff0000, 0xf3fffd503f2ffc84,\n-            0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff, 0xffffffff7fffffff,\n-            0x000c781fffffffff, 0xffff20bfffffffff, 0x000080ffffffffff, 0x7f7f7f7f007fffff,\n-            0x000000007f7f7f7f, 0x1f3e03fe000000e0, 0xfffffffee07fffff, 0xf7ffffffffffffff,\n-            0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000, 0x0000ffffffffffff,\n-            0x0000000000001fff, 0x3fffffffffff0000, 0x00000c00ffff1fff, 0x80007fffffffffff,\n-            0xffffffff3fffffff, 0xfffffffcff800000, 0xfffffffffffff9ff, 0xff8000000000007c,\n-            0x00000007fffff7bb, 0x000ffffffffffffc, 0x68fc000000000000, 0xffff003ffffffc00,\n-            0x1fffffff0000007f, 0x0007fffffffffff0, 0x7c00ffdf00008000, 0x000001ffffffffff,\n-            0xc47fffff00000ff7, 0x3e62ffffffffffff, 0x001c07ff38000005, 0xffff7f7f007e7e7e,\n-            0xffff00fff7ffffff, 0x00000007ffffffff, 0xffff000fffffffff, 0x0ffffffffffff87f,\n-            0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7ffdffa0f8007f, 0xffffffffffffffdb,\n-            0x0003ffffffffffff, 0xfffffffffff80000, 0xfffffff03fffffff, 0x3fffffffffffffff,\n-            0xffffffffffff0000, 0xfffffffffffcffff, 0x03ff0000000000ff, 0xaa8a000000000000,\n-            0x1fffffffffffffff, 0x07fffffe00000000, 0xffffffc007fffffe, 0x7fffffff3fffffff,\n-            0x000000001cfcfcfc\n-        ],\n-        r4: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 13,\n-            14, 7, 15, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n-        ],\n-        r5: &[\n-            0, 1, 2, 3, 4, 5, 4, 4, 4, 4, 6, 7, 8, 9, 10, 11, 2, 2, 12, 13, 14, 15, 4, 4, 2, 2, 2,\n-            2, 16, 17, 4, 4, 18, 19, 20, 21, 22, 4, 23, 4, 24, 25, 26, 27, 28, 29, 30, 4, 2, 31, 32,\n-            32, 15, 4, 4, 4, 4, 4, 4, 4, 33, 34, 4, 35, 36, 4, 37, 38, 39, 40, 41, 42, 43, 4, 44,\n-            20, 45, 46, 4, 4, 5, 47, 48, 49, 4, 4, 50, 51, 48, 52, 53, 4, 54, 4, 4, 4, 55, 4, 56,\n-            57, 4, 4, 58, 59, 60, 61, 62, 63, 4, 4, 4, 4, 64, 65, 66, 4, 67, 68, 69, 4, 4, 4, 4, 70,\n-            4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 71, 4, 2, 50, 2, 2, 2, 72, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 50, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 73, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 63, 20, 4, 74, 48, 75, 66, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 2, 4, 4, 2, 76, 77, 78, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 79, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 20, 80, 2,\n-            2, 2, 2, 2, 81, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 82, 83, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 84, 85, 86, 87, 88, 2, 2, 2, 2, 89, 90,\n-            91, 92, 93, 94, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 95, 96, 4, 4, 4, 4, 4, 55, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 97, 2, 98, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 99, 100, 101, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 102, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 10, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 103,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 104, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 105, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\n-        ],\n-        r6: &[\n-            0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,\n-            0x0000000000000000, 0x001fffffffffffff, 0xffffffff1fffffff, 0x000000000001ffff,\n-            0xffffe000ffffffff, 0x003fffffffff07ff, 0xffffffff3fffffff, 0x00000000003eff0f,\n-            0xffff00003fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff, 0x0000000fffffffff,\n-            0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f, 0x007fffff003fffff,\n-            0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff, 0xc0ffffffffffffff,\n-            0x003ffffffeef0001, 0x1fffffff00000000, 0x000000001fffffff, 0x0000001ffffffeff,\n-            0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff, 0x00000000000001ff,\n-            0x0007ffffffffffff, 0xffff00801fffffff, 0x000000000000003f, 0x007fffff00000000,\n-            0x00fffffffffffff8, 0x0000fffffffffff8, 0x000001ffffff0000, 0x0000007ffffffff8,\n-            0x0047ffffffff0010, 0x0007fffffffffff8, 0x000000001400001e, 0x00000ffffffbffff,\n-            0xffff01ffbfffbd7f, 0x23edfdfffff99fe0, 0x00000003e0010000, 0x0000000080000780,\n-            0x0000ffffffffffff, 0x00000000000000b0, 0x00007fffffffffff, 0x000000000f000000,\n-            0x0000000000000010, 0x010007ffffffffff, 0x0000000007ffffff, 0x00000fffffffffff,\n-            0xffffffff00000000, 0x80000000ffffffff, 0xfffffcff00000000, 0x0000000a0001ffff,\n-            0x0407fffffffff801, 0xfffffffff0010000, 0x00000000200003ff, 0x01ffffffffffffff,\n-            0x00007ffffffffdff, 0xfffc000000000001, 0x000000000000ffff, 0x0001fffffffffb7f,\n-            0xfffffdbf00000040, 0x00000000010003ff, 0x0007ffff00000000, 0x0000000003ffffff,\n-            0x000000000000000f, 0x000000000000007f, 0x00003fffffff0000, 0xe0fffff80000000f,\n-            0x00000000000107ff, 0x00000000fff80000, 0x0000000b00000000, 0x00ffffffffffffff,\n-            0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff, 0x0000000003ff01ff,\n-            0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,\n-            0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,\n-            0xffff7fffffff7fff, 0xfffffdfffffffdff, 0x0000000000000ff7, 0x3f801fffffffffff,\n-            0x0000000000004000, 0x000000000000001f, 0x000000000000080f, 0x0af7fe96ffffffef,\n-            0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x00000000007fffff, 0xffff0003ffffffff,\n-            0x00000001ffffffff, 0x000000003fffffff\n-        ],\n-    };\n-\n-    pub fn XID_Start(c: char) -> bool {\n-        XID_Start_table.lookup(c)\n-    }\n-\n }\n \n pub(crate) mod property {\n-    const Pattern_White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n-        r1: &[\n-            0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3\n-        ],\n-        r2: &[\n-            0x0000000100003e00, 0x0000000000000000, 0x0000000000000020, 0x000003000000c000\n-        ],\n-    };\n-\n-    pub fn Pattern_White_Space(c: char) -> bool {\n-        Pattern_White_Space_table.lookup(c)\n-    }\n-\n     const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, {"sha": "89894f7932d79fac161d5673d6b7778d9dd710f4", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -728,7 +728,7 @@ def generate_property_module(mod, grouped_categories, category_subset):\n \n     yield \"pub(crate) mod %s {\\n\" % mod\n     for cat in sorted(category_subset):\n-        if cat in (\"Cc\", \"White_Space\", \"Pattern_White_Space\"):\n+        if cat in (\"Cc\", \"White_Space\"):\n             generator = generate_small_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n         else:\n             generator = generate_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n@@ -841,19 +841,18 @@ def main():\n     unicode_data = load_unicode_data(get_path(UnicodeFiles.UNICODE_DATA))\n     load_special_casing(get_path(UnicodeFiles.SPECIAL_CASING), unicode_data)\n \n-    want_derived = {\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\",\n+    want_derived = {\"Alphabetic\", \"Lowercase\", \"Uppercase\",\n                     \"Cased\", \"Case_Ignorable\", \"Grapheme_Extend\"}\n     derived = load_properties(get_path(UnicodeFiles.DERIVED_CORE_PROPERTIES), want_derived)\n \n     props = load_properties(get_path(UnicodeFiles.PROPS),\n-                            {\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\",\n-                             \"Pattern_White_Space\"})\n+                            {\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"})\n \n     # Category tables\n     for (name, categories, category_subset) in (\n             (\"general_category\", unicode_data.general_categories, [\"N\", \"Cc\"]),\n             (\"derived_property\", derived, want_derived),\n-            (\"property\", props, [\"White_Space\", \"Pattern_White_Space\"])\n+            (\"property\", props, [\"White_Space\"])\n     ):\n         for fragment in generate_property_module(name, categories, category_subset):\n             buf.write(fragment)"}, {"sha": "fff4ec716dfdad4e3453f7217bbbaf118fd4a4d0", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n \n [dependencies]\n syntax_pos = { path = \"../libsyntax_pos\" }\n-\n+rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "f9c1be20b8bc132aed7ac28364713e714427a797", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -597,12 +597,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses a word starting at the current position. A word is considered to\n-    /// be an alphabetic character followed by any number of alphanumeric\n-    /// characters.\n+    /// Parses a word starting at the current position. A word is the same as\n+    /// Rust identifier, except that it can't start with `_` character.\n     fn word(&mut self) -> &'a str {\n         let start = match self.cur.peek() {\n-            Some(&(pos, c)) if c.is_xid_start() => {\n+            Some(&(pos, c)) if c != '_' && rustc_lexer::is_id_start(c) => {\n                 self.cur.next();\n                 pos\n             }\n@@ -611,7 +610,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n         while let Some(&(pos, c)) = self.cur.peek() {\n-            if c.is_xid_continue() {\n+            if rustc_lexer::is_id_continue(c) {\n                 self.cur.next();\n             } else {\n                 return &self.input[start..pos];"}, {"sha": "a479fabafc014202760dc3ff67196de40ab07dd0", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -21,7 +21,7 @@ scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc-rayon = \"0.2.0\"\n rustc-rayon-core = \"0.2.0\"\n-polonius-engine  = \"0.9.0\"\n+polonius-engine  = \"0.10.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }"}, {"sha": "937a9ea6c1bd485150b91ac3e01e40f7848dfb7f", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -39,7 +39,7 @@ Generally, `Self: Sized` is used to indicate that the trait should not be used\n as a trait object. If the trait comes from your own crate, consider removing\n this restriction.\n \n-### Method references the `Self` type in its arguments or return type\n+### Method references the `Self` type in its parameters or return type\n \n This happens when a trait has a method like the following:\n "}, {"sha": "b8bd1d73fc28b4e12e786aea303dc12430ea2d2c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             });\n \n         let mut upstream_crates: Vec<_> = cstore.crates_untracked().iter().map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum).as_str();\n+            let name = cstore.crate_name_untracked(cnum).as_interned_str();\n             let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n             (name, disambiguator, hash)"}, {"sha": "ddfca3a4cfb725a0ec256fdd807358731552f056", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::{InternedString, LocalInternedString};\n+use syntax::symbol::InternedString;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -39,27 +39,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n-    #[inline]\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let s: &str = &**self;\n-        s.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n-    type KeyType = LocalInternedString;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n-        self.clone()\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "5883be6e26883b636527e0f5821979aecda787d5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1136,12 +1136,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some((expected, found)) = expected_found {\n             match (terr, is_simple_error, expected == found) {\n                 (&TypeError::Sorts(ref values), false, true) => {\n+                    let sort_string = | a_type: Ty<'tcx> |\n+                        if let ty::Opaque(def_id, _) = a_type.sty {\n+                            format!(\" (opaque type at {})\", self.tcx.sess.source_map()\n+                                .mk_substr_filename(self.tcx.def_span(def_id)))\n+                        } else {\n+                            format!(\" ({})\", a_type.sort_string(self.tcx))\n+                        };\n                     diag.note_expected_found_extra(\n                         &\"type\",\n                         expected,\n                         found,\n-                        &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n-                        &format!(\" ({})\", values.found.sort_string(self.tcx)),\n+                        &sort_string(values.expected),\n+                        &sort_string(values.found),\n                     );\n                 }\n                 (_, false, _) => {\n@@ -1627,7 +1634,7 @@ impl<'tcx> ObligationCause<'tcx> {\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n-            MethodReceiver => Error0308(\"mismatched method receiver\"),\n+            MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n             // In the case where we have no more specific thing to\n             // say, also take a look at the error code, maybe we can"}, {"sha": "77df93080cd165cfeb9ea33870184163f4f92a0e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -33,7 +33,7 @@ use crate::util::common::time;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n+use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n use errors::DiagnosticBuilder;\n use crate::hir;\n use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -405,7 +405,7 @@ impl LintStore {\n     pub fn check_lint_name(\n         &self,\n         lint_name: &str,\n-        tool_name: Option<LocalInternedString>,\n+        tool_name: Option<Symbol>,\n     ) -> CheckLintNameResult<'_> {\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)"}, {"sha": "cbc6dbdba7e6cc9716f29a7c2e8c295291c483ea", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -291,7 +291,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue;\n                     }\n \n-                    Some(tool_ident.as_str())\n+                    Some(tool_ident.name)\n                 } else {\n                     None\n                 };"}, {"sha": "8956cbb2baefc360b874c65340263b3d8918d1c8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1808,6 +1808,23 @@ pub enum ProjectionElem<V, T> {\n     Downcast(Option<Symbol>, VariantIdx),\n }\n \n+impl<V, T> ProjectionElem<V, T> {\n+    /// Returns `true` if the target of this projection may refer to a different region of memory\n+    /// than the base.\n+    fn is_indirect(&self) -> bool {\n+        match self {\n+            Self::Deref => true,\n+\n+            | Self::Field(_, _)\n+            | Self::Index(_)\n+            | Self::ConstantIndex { .. }\n+            | Self::Subslice { .. }\n+            | Self::Downcast(_, _)\n+            => false\n+        }\n+    }\n+}\n+\n /// Alias for projections as they appear in places, where the base is a place\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n@@ -1869,6 +1886,14 @@ impl<'tcx> Place<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this `Place` contains a `Deref` projection.\n+    ///\n+    /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the\n+    /// same region of memory as its base.\n+    pub fn is_indirect(&self) -> bool {\n+        self.iterate(|_, mut projections| projections.any(|proj| proj.elem.is_indirect()))\n+    }\n+\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     //"}, {"sha": "03cc00d87e3cd3091843b68545bb2e32672efc5e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1384,7 +1384,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut reported_violations = FxHashSet::default();\n         for violation in violations {\n             if reported_violations.insert(violation.clone()) {\n-                err.note(&violation.error_msg());\n+                match violation.span() {\n+                    Some(span) => err.span_label(span, violation.error_msg()),\n+                    None => err.note(&violation.error_msg()),\n+                };\n             }\n         }\n         Some(err)"}, {"sha": "f7f459cd27f68d2d801e6d82a52c76119e7de820", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -20,7 +20,7 @@ use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n use syntax::symbol::InternedString;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n@@ -32,10 +32,10 @@ pub enum ObjectSafetyViolation {\n     SupertraitSelf,\n \n     /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode),\n+    Method(ast::Name, MethodViolationCode, Span),\n \n     /// Associated const.\n-    AssocConst(ast::Name),\n+    AssocConst(ast::Name, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -46,22 +46,35 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n                  in the supertraits or where-clauses\".into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n-                format!(\"method `{}` has no receiver\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n-                format!(\"method `{}` references the `Self` type \\\n-                         in its arguments or return type\", name).into(),\n-            ObjectSafetyViolation::Method(name,\n-                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n-                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) =>\n+                format!(\"associated function `{}` has no `self` parameter\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n+                \"method `{}` references the `Self` type in its parameters or return type\",\n+                name,\n+            ).into(),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                _,\n+            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n-                format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n-            ObjectSafetyViolation::AssocConst(name) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) =>\n+                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n+            ObjectSafetyViolation::AssocConst(name, _) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n+\n+    pub fn span(&self) -> Option<Span> {\n+        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n+        // diagnostics use a `note` instead of a `span_label`.\n+        match *self {\n+            ObjectSafetyViolation::AssocConst(_, span) |\n+            ObjectSafetyViolation::Method(_, _, span) if span != DUMMY_SP => Some(span),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Reasons a method might not be object-safe.\n@@ -74,7 +87,7 @@ pub enum MethodViolationCode {\n     ReferencesSelf,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n-    WhereClauseReferencesSelf(Span),\n+    WhereClauseReferencesSelf,\n \n     /// e.g., `fn foo<A>()`\n     Generic,\n@@ -88,9 +101,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// astconv -- currently, `Self` in supertraits. This is needed\n     /// because `object_safety_violations` can't be used during\n     /// type collection.\n-    pub fn astconv_object_safety_violations(self, trait_def_id: DefId)\n-                                            -> Vec<ObjectSafetyViolation>\n-    {\n+    pub fn astconv_object_safety_violations(\n+        self,\n+        trait_def_id: DefId,\n+    ) -> Vec<ObjectSafetyViolation> {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n         let violations = traits::supertrait_def_ids(self, trait_def_id)\n             .filter(|&def_id| self.predicates_reference_self(def_id, true))\n@@ -128,7 +142,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match self.virtual_call_violation_for_method(trait_def_id, method) {\n-            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n             Some(_) => false,\n         }\n     }\n@@ -138,12 +152,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n-                self.object_safety_violation_for_method(trait_def_id, &item)\n-                    .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n+                self.object_safety_violation_for_method(trait_def_id, &item).map(|code| {\n+                    ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span)\n+                })\n             ).filter(|violation| {\n-                if let ObjectSafetyViolation::Method(_,\n-                    MethodViolationCode::WhereClauseReferencesSelf(span)) = violation\n-                {\n+                if let ObjectSafetyViolation::Method(\n+                    _,\n+                    MethodViolationCode::WhereClauseReferencesSelf,\n+                    span,\n+                ) = violation {\n                     // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                     // It's also hard to get a use site span, so we use the method definition span.\n                     self.lint_node_note(\n@@ -169,7 +186,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         violations.extend(self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name)));\n+            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)));\n \n         debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n                trait_def_id,\n@@ -325,8 +342,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .visit_tys_shallow(|t| {\n                     self.contains_illegal_self_type_reference(trait_def_id, t)\n                 }) {\n-            let span = self.def_span(method.def_id);\n-            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf);\n         }\n \n         let receiver_ty = self.liberate_late_bound_regions("}, {"sha": "5a988d9509e800ee8cb903b36810b8c218c638a3", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -9,10 +9,9 @@ use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n-use syntax_pos::symbol::LocalInternedString;\n \n #[derive(Clone, Debug)]\n-pub struct OnUnimplementedFormatString(LocalInternedString);\n+pub struct OnUnimplementedFormatString(Symbol);\n \n #[derive(Debug)]\n pub struct OnUnimplementedDirective {\n@@ -89,19 +88,19 @@ impl<'tcx> OnUnimplementedDirective {\n             if item.check_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n                     message = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, message_.as_str(), span)?);\n+                        tcx, trait_def_id, message_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n                     label = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, label_.as_str(), span)?);\n+                        tcx, trait_def_id, label_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n                     note = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, note_.as_str(), span)?);\n+                        tcx, trait_def_id, note_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::on) && is_root &&\n@@ -154,7 +153,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                    tcx, trait_def_id, value, attr.span)?),\n                 note: None,\n             }))\n         } else {\n@@ -218,7 +217,7 @@ impl<'tcx> OnUnimplementedFormatString {\n     fn try_parse(\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n-        from: LocalInternedString,\n+        from: Symbol,\n         err_sp: Span,\n     ) -> Result<Self, ErrorReported> {\n         let result = OnUnimplementedFormatString(from);\n@@ -234,7 +233,8 @@ impl<'tcx> OnUnimplementedFormatString {\n     ) -> Result<(), ErrorReported> {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -294,7 +294,8 @@ impl<'tcx> OnUnimplementedFormatString {\n         }).collect::<FxHashMap<Symbol, String>>();\n         let empty_string = String::new();\n \n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         parser.map(|p|\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "2da50f37409ae2a68433f11e86ff98628761442d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -46,7 +46,7 @@ use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol, LocalInternedString, InternedString};\n+use syntax::symbol::{kw, sym, Symbol, InternedString};\n use syntax_pos::Span;\n \n use smallvec;\n@@ -3386,10 +3386,6 @@ impl SymbolName {\n             name: InternedString::intern(name)\n         }\n     }\n-\n-    pub fn as_str(&self) -> LocalInternedString {\n-        self.name.as_str()\n-    }\n }\n \n impl fmt::Display for SymbolName {"}, {"sha": "a08c82a0ae82fdd7a559b14a7520d1f7dacd1263", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -709,8 +709,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 substs: SubstsRef<'tcx>,\n             ) -> Option<Ty<'tcx>> {\n                 if self.found_recursion {\n-                    None\n-                } else if self.seen_opaque_tys.insert(def_id) {\n+                    return None;\n+                }\n+                let substs = substs.fold_with(self);\n+                if self.seen_opaque_tys.insert(def_id) {\n                     let generic_ty = self.tcx.type_of(def_id);\n                     let concrete_ty = generic_ty.subst(self.tcx, substs);\n                     let expanded_ty = self.fold_ty(concrete_ty);"}, {"sha": "e13a5ecc2ebfdf3c8549ffd404d52db3b99a5991", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -5,7 +5,6 @@ use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use syntax::symbol::LocalInternedString;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -24,6 +23,7 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n+use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -561,7 +561,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n         cg_elem.val.store(&mut body_bx,\n-            PlaceRef::new_sized(current, cg_elem.layout, align));\n+            PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n         let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n         body_bx.br(header_bx.llbb());\n@@ -1082,8 +1082,8 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n \n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "35d5107842d5b3464b2d7b6f8a86b6bffdb62f12", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -37,7 +37,7 @@ pub fn get_fn(\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance).as_str();\n+    let sym = tcx.symbol_name(instance).name.as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n     // Create a fn pointer with the substituted signature."}, {"sha": "6fbea9646b8a9fe524514000c23c70a6f3ee8f17", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -17,7 +17,7 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_uint, c_char};\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::ast::Mutability;\n \n pub use crate::context::CodegenCx;\n@@ -122,17 +122,18 @@ impl CodegenCx<'ll, 'tcx> {\n \n     fn const_cstr(\n         &self,\n-        s: LocalInternedString,\n+        s: Symbol,\n         null_terminated: bool,\n     ) -> &'ll Value {\n         unsafe {\n             if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n                 return llval;\n             }\n \n+            let s_str = s.as_str();\n             let sc = llvm::LLVMConstStringInContext(self.llcx,\n-                                                    s.as_ptr() as *const c_char,\n-                                                    s.len() as c_uint,\n+                                                    s_str.as_ptr() as *const c_char,\n+                                                    s_str.len() as c_uint,\n                                                     !null_terminated as Bool);\n             let sym = self.generate_local_symbol_name(\"str\");\n             let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n@@ -147,8 +148,8 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n-        let len = s.len();\n+    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n+        let len = s.as_str().len();\n         let cs = consts::ptrcast(self.const_cstr(s, false),\n             self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n         self.const_fat_ptr(cs, self.const_usize(len as u64))\n@@ -348,7 +349,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             )};\n             self.const_bitcast(llval, llty)\n         };\n-        PlaceRef::new_sized(llval, layout, alloc.align)\n+        PlaceRef::new_sized(llval, layout)\n     }\n \n     fn const_ptrcast(&self, val: &'ll Value, ty: &'ll Type) -> &'ll Value {"}, {"sha": "e71d1fc16924bb1ed966d99935c2b3114aa63059", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -11,12 +11,11 @@ use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n     Pointer, ErrorHandled, GlobalId};\n use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n-use syntax_pos::Span;\n use rustc_target::abi::HasDataLayout;\n-use syntax::symbol::sym;\n-use syntax_pos::symbol::LocalInternedString;\n use rustc::ty::{self, Ty, Instance};\n use rustc_codegen_ssa::traits::*;\n+use syntax::symbol::{Symbol, sym};\n+use syntax_pos::Span;\n \n use rustc::ty::layout::{self, Size, Align, LayoutOf};\n \n@@ -122,10 +121,11 @@ fn check_and_apply_linkage(\n     cx: &CodegenCx<'ll, 'tcx>,\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n-    sym: LocalInternedString,\n+    sym: Symbol,\n     span: Span\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n+    let sym = sym.as_str();\n     if let Some(linkage) = attrs.linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n@@ -221,7 +221,7 @@ impl CodegenCx<'ll, 'tcx> {\n                  def_id);\n \n         let ty = instance.ty(self.tcx);\n-        let sym = self.tcx.symbol_name(instance).as_str();\n+        let sym = self.tcx.symbol_name(instance).name.as_symbol();\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n \n@@ -232,11 +232,12 @@ impl CodegenCx<'ll, 'tcx> {\n                 Node::Item(&hir::Item {\n                     ref attrs, span, node: hir::ItemKind::Static(..), ..\n                 }) => {\n-                    if self.get_declared_value(&sym[..]).is_some() {\n+                    let sym_str = sym.as_str();\n+                    if self.get_declared_value(&sym_str).is_some() {\n                         span_bug!(span, \"Conflicting symbol names for static?\");\n                     }\n \n-                    let g = self.define_global(&sym[..], llty).unwrap();\n+                    let g = self.define_global(&sym_str, llty).unwrap();\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}, {"sha": "58ce97039099e7bc7dc0477a84e483d82ac6d268", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -29,7 +29,7 @@ use std::cell::{Cell, RefCell};\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::source_map::{DUMMY_SP, Span};\n use crate::abi::Abi;\n \n@@ -52,7 +52,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,"}, {"sha": "d0b607bd88ee4f9d5023b8d653d5b80b6768c694", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -2251,7 +2251,7 @@ pub fn create_global_var_metadata(\n         None\n     } else {\n         let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id));\n-        Some(SmallCStr::new(&linkage_name.as_str()))\n+        Some(SmallCStr::new(&linkage_name.name.as_str()))\n     };\n \n     let global_align = cx.align_of(variable_type);"}, {"sha": "cad2bcdc05fc948a491230f5bfd3ce1383ecf370", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -290,7 +290,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let scope_line = span_start(self, span).line;\n \n         let function_name = CString::new(name).unwrap();\n-        let linkage_name = SmallCStr::new(&linkage_name.as_str());\n+        let linkage_name = SmallCStr::new(&linkage_name.name.as_str());\n \n         let mut flags = DIFlags::FlagPrototyped;\n "}, {"sha": "fc0b9ffd11d8389a1a4394c654af7bf1d14d93cb", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -101,7 +101,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let name = &*tcx.item_name(def_id).as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n-        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align.abi);\n+        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout);\n \n         let simple = get_simple_intrinsic(self, name);\n         let llval = match name {"}, {"sha": "7e700e6819426c2ba29170df616edd1dd6be74fb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -121,7 +121,7 @@ fn reachable_non_generics_provider(\n         })\n         .map(|def_id| {\n             let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).name.as_str();\n                 // We can probably do better here by just ensuring that\n                 // it has hidden visibility rather than public\n                 // visibility, as this is primarily here to ensure it's"}, {"sha": "c41e46398467a7e37d4becd8edde36a8731705d2", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -14,7 +14,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n@@ -397,7 +397,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+        let filename = Symbol::intern(&loc.file.name.to_string());\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n@@ -418,8 +418,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = msg.description();\n-                let msg_str = LocalInternedString::intern(str);\n+                let msg_str = Symbol::intern(msg.description());\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -531,15 +530,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+                let filename = Symbol::intern(&loc.file.name.to_string());\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n-                let msg_str = LocalInternedString::intern(&str);\n+                let msg_str = Symbol::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -989,7 +988,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Handle both by-ref and immediate tuples.\n         if let Ref(llval, None, align) = tuple.val {\n-            let tuple_ptr = PlaceRef::new_sized(llval, tuple.layout, align);\n+            let tuple_ptr = PlaceRef::new_sized_aligned(llval, tuple.layout, align);\n             for i in 0..tuple.layout.fields.count() {\n                 let field_ptr = tuple_ptr.project_field(bx, i);\n                 let field = bx.load_operand(field_ptr);\n@@ -1203,7 +1202,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let llty = bx.backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n         let align = src.layout.align.abi.min(dst.align);\n-        src.val.store(bx, PlaceRef::new_sized(cast_ptr, src.layout, align));\n+        src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, align));\n     }\n \n "}, {"sha": "8acb3ba06267e96b04b51e3c4268bfb8a8bc1106", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -289,7 +289,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n                     let llretptr = bx.get_param(0);\n-                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n+                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n                     if layout.is_unsized() {\n@@ -548,7 +548,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let llarg = bx.get_param(llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n-            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n+            PlaceRef::new_sized(llarg, arg.layout)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer."}, {"sha": "a8ab3ea10ed166b363ff1c200e5c834f1e9f1f53", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -485,7 +485,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n                             layout,\n-                            layout.align.abi,\n                         ))\n                     })\n             }"}, {"sha": "b8e10d34302920bf146d76469c3d97827e91da80", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -30,6 +30,19 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(\n         llval: V,\n         layout: TyLayout<'tcx>,\n+    ) -> PlaceRef<'tcx, V> {\n+        assert!(!layout.is_unsized());\n+        PlaceRef {\n+            llval,\n+            llextra: None,\n+            layout,\n+            align: layout.align.abi\n+        }\n+    }\n+\n+    pub fn new_sized_aligned(\n+        llval: V,\n+        layout: TyLayout<'tcx>,\n         align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!layout.is_unsized());\n@@ -45,14 +58,13 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         bx: &mut Bx,\n         llval: V,\n         layout: TyLayout<'tcx>,\n-        align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!bx.cx().type_has_metadata(layout.ty));\n         PlaceRef {\n             llval,\n             llextra: None,\n             layout,\n-            align\n+            align: layout.align.abi\n         }\n     }\n \n@@ -64,7 +76,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         debug!(\"alloca({:?}: {:?})\", name, layout);\n         assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n         let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align.abi);\n-        Self::new_sized(tmp, layout, layout.align.abi)\n+        Self::new_sized(tmp, layout)\n     }\n \n     /// Returns a place for an indirect reference to an unsized place.\n@@ -482,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );\n-                        PlaceRef::new_sized(llval, layout, layout.align.abi)\n+                        PlaceRef::new_sized(llval, layout)\n                     }\n                 }\n             }\n@@ -498,7 +510,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // with a static that is an extern_type.\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 let static_ = bx.get_static(*def_id);\n-                PlaceRef::new_thin_place(bx, static_, layout, layout.align.abi)\n+                PlaceRef::new_thin_place(bx, static_, layout)\n             },\n             mir::PlaceRef {\n                 base,"}, {"sha": "e0ad2527229badb3eaa4df852f26db1084c07e11", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         scratch.storage_dead(&mut bx);\n                     }\n                     OperandValue::Ref(llref, None, align) => {\n-                        let source = PlaceRef::new_sized(llref, operand.layout, align);\n+                        let source = PlaceRef::new_sized_aligned(llref, operand.layout, align);\n                         base::coerce_unsized_into(&mut bx, source, dest);\n                     }\n                     OperandValue::Ref(_, Some(_), _) => {"}, {"sha": "5801963c101ef1079dc773e837b7ca58c50fa656", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        let symbol_name = self.symbol_name(cx.tcx()).as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).name.as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "73c4c053979173449661ba4e0714b330f2d2ed4f", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,5 +1,5 @@\n use super::BackendTypes;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -12,8 +12,8 @@ pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "51269be4e9f409f25f5165939b858adb677a894a", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -40,7 +40,7 @@ impl SymbolNamesTest<'tcx> {\n                 let instance = Instance::mono(tcx, def_id);\n                 let mangled = self.tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n-                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.as_str()) {\n+                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.name.as_str()) {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling({})\", demangling));\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }"}, {"sha": "675d3065c5b28b77f755d28580d9747b36ba7c6e", "filename": "src/librustc_lexer/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2FCargo.toml?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -4,12 +4,12 @@ name = \"rustc_lexer\"\n version = \"0.1.0\"\n edition = \"2018\"\n \n-# Note that this crate purposefully does not depend on other rustc crates\n-[dependencies]\n-unicode-xid = { version = \"0.1.0\", optional = true }\n-\n # Note: do not remove this blank `[lib]` section.\n # This will be used when publishing this crate as `rustc-ap-rustc_lexer`.\n [lib]\n doctest = false\n name = \"rustc_lexer\"\n+\n+# Note that this crate purposefully does not depend on other rustc crates\n+[dependencies]\n+unicode-xid = \"0.2.0\""}, {"sha": "30a5175d8cdb092d59dc19e16080f48e15df19f9", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 72, "deletions": 70, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,6 +1,5 @@\n-// We want to be able to build this crate with a stable compiler, so feature\n-// flags should be optional.\n-#![cfg_attr(not(feature = \"unicode-xid\"), feature(unicode_internals))]\n+// We want to be able to build this crate with a stable compiler, so no\n+// `#![feature]` attributes should be added.\n \n mod cursor;\n pub mod unescape;\n@@ -103,6 +102,62 @@ pub fn tokenize(mut input: &str) -> impl Iterator<Item = Token> + '_ {\n     })\n }\n \n+// See [UAX #31](http://unicode.org/reports/tr31) for definitions of these\n+// classes.\n+\n+/// True if `c` is considered a whitespace according to Rust language definition.\n+pub fn is_whitespace(c: char) -> bool {\n+    // This is Pattern_White_Space.\n+    //\n+    // Note that this set is stable (ie, it doesn't change with different\n+    // Unicode versions), so it's ok to just hard-code the values.\n+\n+    match c {\n+        // Usual ASCII suspects\n+        | '\\u{0009}' // \\t\n+        | '\\u{000A}' // \\n\n+        | '\\u{000B}' // vertical tab\n+        | '\\u{000C}' // form feed\n+        | '\\u{000D}' // \\r\n+        | '\\u{0020}' // space\n+\n+        // NEXT LINE from latin1\n+        | '\\u{0085}'\n+\n+        // Bidi markers\n+        | '\\u{200E}' // LEFT-TO-RIGHT MARK\n+        | '\\u{200F}' // RIGHT-TO-LEFT MARK\n+\n+        // Dedicated whitespace characters from Unicode\n+        | '\\u{2028}' // LINE SEPARATOR\n+        | '\\u{2029}' // PARAGRAPH SEPARATOR\n+            => true,\n+        _ => false,\n+    }\n+}\n+\n+/// True if `c` is valid as a first character of an identifier.\n+pub fn is_id_start(c: char) -> bool {\n+    // This is XID_Start OR '_' (which formally is not a XID_Start).\n+    // We also add fast-path for ascii idents\n+    ('a' <= c && c <= 'z')\n+        || ('A' <= c && c <= 'Z')\n+        || c == '_'\n+        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n+}\n+\n+/// True if `c` is valid as a non-first character of an identifier.\n+pub fn is_id_continue(c: char) -> bool {\n+    // This is exactly XID_Continue.\n+    // We also add fast-path for ascii idents\n+    ('a' <= c && c <= 'z')\n+        || ('A' <= c && c <= 'Z')\n+        || ('0' <= c && c <= '9')\n+        || c == '_'\n+        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n+}\n+\n+\n impl Cursor<'_> {\n     fn advance_token(&mut self) -> Token {\n         let first_char = self.bump().unwrap();\n@@ -112,9 +167,9 @@ impl Cursor<'_> {\n                 '*' => self.block_comment(),\n                 _ => Slash,\n             },\n-            c if character_properties::is_whitespace(c) => self.whitespace(),\n+            c if is_whitespace(c) => self.whitespace(),\n             'r' => match (self.nth_char(0), self.nth_char(1)) {\n-                ('#', c1) if character_properties::is_id_start(c1) => self.raw_ident(),\n+                ('#', c1) if is_id_start(c1) => self.raw_ident(),\n                 ('#', _) | ('\"', _) => {\n                     let (n_hashes, started, terminated) = self.raw_double_quoted_string();\n                     let suffix_start = self.len_consumed();\n@@ -159,7 +214,7 @@ impl Cursor<'_> {\n                 }\n                 _ => self.ident(),\n             },\n-            c if character_properties::is_id_start(c) => self.ident(),\n+            c if is_id_start(c) => self.ident(),\n             c @ '0'..='9' => {\n                 let literal_kind = self.number(c);\n                 let suffix_start = self.len_consumed();\n@@ -247,8 +302,8 @@ impl Cursor<'_> {\n     }\n \n     fn whitespace(&mut self) -> TokenKind {\n-        debug_assert!(character_properties::is_whitespace(self.prev()));\n-        while character_properties::is_whitespace(self.nth_char(0)) {\n+        debug_assert!(is_whitespace(self.prev()));\n+        while is_whitespace(self.nth_char(0)) {\n             self.bump();\n         }\n         Whitespace\n@@ -258,19 +313,19 @@ impl Cursor<'_> {\n         debug_assert!(\n             self.prev() == 'r'\n                 && self.nth_char(0) == '#'\n-                && character_properties::is_id_start(self.nth_char(1))\n+                && is_id_start(self.nth_char(1))\n         );\n         self.bump();\n         self.bump();\n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n         RawIdent\n     }\n \n     fn ident(&mut self) -> TokenKind {\n-        debug_assert!(character_properties::is_id_start(self.prev()));\n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        debug_assert!(is_id_start(self.prev()));\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n         Ident\n@@ -315,7 +370,7 @@ impl Cursor<'_> {\n             // integer literal followed by field/method access or a range pattern\n             // (`0..2` and `12.foo()`)\n             '.' if self.nth_char(1) != '.'\n-                && !character_properties::is_id_start(self.nth_char(1)) =>\n+                && !is_id_start(self.nth_char(1)) =>\n             {\n                 // might have stuff after the ., and if it does, it needs to start\n                 // with a number\n@@ -345,15 +400,15 @@ impl Cursor<'_> {\n     fn lifetime_or_char(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '\\'');\n         let mut starts_with_number = false;\n-        if (character_properties::is_id_start(self.nth_char(0))\n+        if (is_id_start(self.nth_char(0))\n             || self.nth_char(0).is_digit(10) && {\n                 starts_with_number = true;\n                 true\n             })\n             && self.nth_char(1) != '\\''\n         {\n             self.bump();\n-            while character_properties::is_id_continue(self.nth_char(0)) {\n+            while is_id_continue(self.nth_char(0)) {\n                 self.bump();\n             }\n \n@@ -495,66 +550,13 @@ impl Cursor<'_> {\n     }\n \n     fn eat_literal_suffix(&mut self) {\n-        if !character_properties::is_id_start(self.nth_char(0)) {\n+        if !is_id_start(self.nth_char(0)) {\n             return;\n         }\n         self.bump();\n \n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n     }\n }\n-\n-pub mod character_properties {\n-    // this is Pattern_White_Space\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_whitespace(c: char) -> bool {\n-        match c {\n-            '\\u{0009}' | '\\u{000A}' | '\\u{000B}' | '\\u{000C}' | '\\u{000D}' | '\\u{0020}'\n-            | '\\u{0085}' | '\\u{200E}' | '\\u{200F}' | '\\u{2028}' | '\\u{2029}' => true,\n-            _ => false,\n-        }\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_whitespace(c: char) -> bool {\n-        core::unicode::property::Pattern_White_Space(c)\n-    }\n-\n-    // this is XID_Start OR '_' (which formally is not a XID_Start)\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_id_start(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || c == '_'\n-            || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_id_start(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || c == '_'\n-            || (c > '\\x7f' && c.is_xid_start())\n-    }\n-\n-    // this is XID_Continue\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_id_continue(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || ('0' <= c && c <= '9')\n-            || c == '_'\n-            || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_id_continue(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || ('0' <= c && c <= '9')\n-            || c == '_'\n-            || (c > '\\x7f' && c.is_xid_continue())\n-    }\n-}"}, {"sha": "39c0698aeec9fd611e25939ee3aa3d4779d32f30", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -398,18 +398,37 @@ impl UnusedParens {\n         }\n     }\n \n-    fn check_unused_parens_pat(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Pat,\n-                                msg: &str) {\n-        if let ast::PatKind::Paren(_) = value.node {\n+    fn check_unused_parens_pat(\n+        &self,\n+        cx: &EarlyContext<'_>,\n+        value: &ast::Pat,\n+        avoid_or: bool,\n+        avoid_mut: bool,\n+    ) {\n+        use ast::{PatKind, BindingMode::ByValue, Mutability::Mutable};\n+\n+        if let PatKind::Paren(inner) = &value.node {\n+            match inner.node {\n+                // The lint visitor will visit each subpattern of `p`. We do not want to lint\n+                // any range pattern no matter where it occurs in the pattern. For something like\n+                // `&(a..=b)`, there is a recursive `check_pat` on `a` and `b`, but we will assume\n+                // that if there are unnecessary parens they serve a purpose of readability.\n+                PatKind::Range(..) => return,\n+                // Avoid `p0 | .. | pn` if we should.\n+                PatKind::Or(..) if avoid_or => return,\n+                // Avoid `mut x` and `mut x @ p` if we should:\n+                PatKind::Ident(ByValue(Mutable), ..) if avoid_mut => return,\n+                // Otherwise proceed with linting.\n+                _ => {}\n+            }\n+\n             let pattern_text = if let Ok(snippet) = cx.sess().source_map()\n                 .span_to_snippet(value.span) {\n                     snippet\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, \"pattern\", (false, false));\n         }\n     }\n \n@@ -474,6 +493,13 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n         let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            Let(ref pats, ..) => {\n+                for p in pats {\n+                    self.check_unused_parens_pat(cx, p, false, false);\n+                }\n+                return;\n+            }\n+\n             If(ref cond, ref block, ..) => {\n                 let left = e.span.lo() + syntax_pos::BytePos(2);\n                 let right = block.span.lo();\n@@ -486,7 +512,8 @@ impl EarlyLintPass for UnusedParens {\n                 (cond, \"`while` condition\", true, Some(left), Some(right))\n             },\n \n-            ForLoop(_, ref cond, ref block, ..) => {\n+            ForLoop(ref pat, ref cond, ref block, ..) => {\n+                self.check_unused_parens_pat(cx, pat, false, false);\n                 (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n             }\n \n@@ -531,26 +558,46 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n-        use ast::PatKind::{Paren, Range};\n-        // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n-        // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n-        // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n-        // unnecessary parens they serve a purpose of readability.\n-        if let Paren(ref pat) = p.node {\n-            match pat.node {\n-                Range(..) => {}\n-                _ => self.check_unused_parens_pat(cx, &p, \"pattern\")\n-            }\n+        use ast::{PatKind::*, Mutability};\n+        match &p.node {\n+            // Do not lint on `(..)` as that will result in the other arms being useless.\n+            Paren(_)\n+            // The other cases do not contain sub-patterns.\n+            | Wild | Rest | Lit(..) | Mac(..) | Range(..) | Ident(.., None) | Path(..) => return,\n+            // These are list-like patterns; parens can always be removed.\n+            TupleStruct(_, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n+                self.check_unused_parens_pat(cx, p, false, false);\n+            },\n+            Struct(_, fps, _) => for f in fps {\n+                self.check_unused_parens_pat(cx, &f.pat, false, false);\n+            },\n+            // Avoid linting on `i @ (p0 | .. | pn)` and `box (p0 | .. | pn)`, #64106.\n+            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false),\n+            // Avoid linting on `&(mut x)` as `&mut x` has a different meaning, #55342.\n+            // Also avoid linting on `& mut? (p0 | .. | pn)`, #64106.\n+            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Immutable),\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n+            self.check_unused_parens_pat(cx, &local.pat, false, false);\n+\n             if let Some(ref value) = local.init {\n                 self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }\n+\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, param: &ast::Param) {\n+        self.check_unused_parens_pat(cx, &param.pat, true, false);\n+    }\n+\n+    fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n+        for p in &arm.pats {\n+            self.check_unused_parens_pat(cx, p, false, false);\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "62a3757757b800f9ca77d60cdbe1ed62d7aba071", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -54,15 +54,15 @@ fn main() {\n     // LLVM are compiled the same way, but for us that's typically the case.\n     //\n     // We *want* detect this cross compiling situation by asking llvm-config\n-    // what it's host-target is. If that's not the TARGET, then we're cross\n+    // what its host-target is. If that's not the TARGET, then we're cross\n     // compiling. Unfortunately `llvm-config` seems either be buggy, or we're\n     // misconfiguring it, because the `i686-pc-windows-gnu` build of LLVM will\n     // report itself with a `--host-target` of `x86_64-pc-windows-gnu`. This\n     // tricks us into thinking we're doing a cross build when we aren't, so\n     // havoc ensues.\n     //\n     // In any case, if we're cross compiling, this generally just means that we\n-    // can't trust all the output of llvm-config becaues it might be targeted\n+    // can't trust all the output of llvm-config because it might be targeted\n     // for the host rather than the target. As a result a bunch of blocks below\n     // are gated on `if !is_crossed`\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -166,7 +166,7 @@ fn main() {\n \n     let (llvm_kind, llvm_link_arg) = detect_llvm_link();\n \n-    // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n+    // Link in all LLVM libraries, if we're using the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);"}, {"sha": "f430f01542efe4f23fadf7677ec5dbeba013abb1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1354,7 +1354,7 @@ impl EncodeContext<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(MacroDef {\n-                body: pprust::tokens_to_string(macro_def.body.clone()),\n+                body: pprust::tts_to_string(macro_def.body.clone()),\n                 legacy: macro_def.legacy,\n             })),\n             visibility: self.lazy(ty::Visibility::Public),"}, {"sha": "e02736078b5711d0e7e66e8b9d5857b0834d2234", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -15,11 +15,12 @@ either = \"1.5.0\"\n dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n-polonius-engine  = \"0.9.0\"\n+polonius-engine  = \"0.10.0\"\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "9f25e98052ec49934581b628002fc66d2a64fe17", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -336,7 +336,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let local = &self.body.local_decls[local_index];\n         match local.name {\n             Some(name) if !local.from_compiler_desugaring() => {\n-                buf.push_str(name.as_str().get());\n+                buf.push_str(&name.as_str());\n                 Ok(())\n             }\n             _ => Err(()),"}, {"sha": "4400e0c8395a205b82ffa0ac4c00212b39eb938b", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -12,7 +12,7 @@ use crate::borrow_check::location::LocationIndex;\n use polonius_engine::Output;\n \n use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::HasMoveData;\n+use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n use crate::dataflow::Borrows;\n use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::MaybeUninitializedPlaces;\n@@ -21,7 +21,7 @@ use either::Either;\n use std::fmt;\n use std::rc::Rc;\n \n-crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local>;\n+crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>;\n \n // (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'tcx> {"}, {"sha": "0d13db2f5a413a9d0b9084bff7d0727e4ebabebd", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,5 +1,3 @@\n-use core::unicode::property::Pattern_White_Space;\n-\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n@@ -526,7 +524,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         let suggestion;\n                         let to_remove;\n                         if pat_snippet.starts_with(\"mut\")\n-                            && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n+                            && pat_snippet[\"mut\".len()..].starts_with(rustc_lexer::is_whitespace)\n                         {\n                             suggestion = pat_snippet[\"mut\".len()..].trim_start();\n                             to_remove = \"&mut\";"}, {"sha": "8f2ce80aafa22de5ec997a495a963933c8464e4f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,4 +1,3 @@\n-use core::unicode::property::Pattern_White_Space;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::mir::{self, BindingForm, ClearCrossCrate, Local, Location, Body};\n@@ -715,7 +714,7 @@ fn annotate_struct_field(\n fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<String> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).ok()?;\n     if hi_src.starts_with(\"ref\")\n-        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+        && hi_src[\"ref\".len()..].starts_with(rustc_lexer::is_whitespace)\n     {\n         let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n         Some(replacement)"}, {"sha": "f0beb4d3ae32d773e4afc09aa9a6a07b02f5c589", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,5 +1,5 @@\n use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::indexes::{BorrowIndex, MovePathIndex};\n use polonius_engine::AllFacts as PoloniusAllFacts;\n use polonius_engine::Atom;\n use rustc::mir::Local;\n@@ -11,7 +11,7 @@ use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n \n-crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex, Local>;\n+crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>;\n \n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the\n@@ -58,14 +58,17 @@ impl AllFactsExt for AllFacts {\n                 cfg_edge,\n                 killed,\n                 outlives,\n-                region_live_at,\n                 invalidates,\n                 var_used,\n                 var_defined,\n                 var_drop_used,\n                 var_uses_region,\n                 var_drops_region,\n-                var_initialized_on_exit,\n+                child,\n+                path_belongs_to_var,\n+                initialized_at,\n+                moved_out_at,\n+                path_accessed_at,\n             ])\n         }\n         Ok(())\n@@ -84,6 +87,12 @@ impl Atom for LocationIndex {\n     }\n }\n \n+impl Atom for MovePathIndex {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,"}, {"sha": "1ff3228afa376fc198b77732948152ac56b65b2c", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 84, "deletions": 3, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -4,14 +4,15 @@ use crate::borrow_check::nll::facts::AllFactsExt;\n use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::move_paths::{InitLocation, MoveData, MovePathIndex, InitKind};\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body, Promoted};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements,\n+                 Local, Location, Body, LocalKind, BasicBlock, Promoted};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n@@ -69,6 +70,85 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     universal_regions\n }\n \n+\n+// This function populates an AllFacts instance with base facts related to\n+// MovePaths and needed for the move analysis.\n+fn populate_polonius_move_facts(\n+    all_facts: &mut AllFacts,\n+    move_data: &MoveData<'_>,\n+    location_table: &LocationTable,\n+    body: &Body<'_>) {\n+    all_facts\n+        .path_belongs_to_var\n+        .extend(\n+            move_data\n+                .rev_lookup\n+                .iter_locals_enumerated()\n+                .map(|(v, &m)| (m, v)));\n+\n+    for (child, move_path) in move_data.move_paths.iter_enumerated() {\n+        all_facts\n+            .child\n+            .extend(\n+                move_path\n+                    .parents(&move_data.move_paths)\n+                    .iter()\n+                    .map(|&parent| (child, parent)));\n+    }\n+\n+    // initialized_at\n+    for init in move_data.inits.iter() {\n+\n+        match init.location {\n+            InitLocation::Statement(location) => {\n+                let block_data = &body[location.block];\n+                let is_terminator = location.statement_index == block_data.statements.len();\n+\n+                if is_terminator && init.kind == InitKind::NonPanicPathOnly {\n+                    // We are at the terminator of an init that has a panic path,\n+                    // and where the init should not happen on panic\n+\n+                    for &successor in block_data.terminator().successors() {\n+                        if body[successor].is_cleanup {\n+                            continue;\n+                        }\n+\n+                        // The initialization happened in (or rather, when arriving at)\n+                        // the successors, but not in the unwind block.\n+                        let first_statement = Location { block: successor, statement_index: 0};\n+                        all_facts\n+                            .initialized_at\n+                            .push((init.path, location_table.start_index(first_statement)));\n+                    }\n+\n+                } else {\n+                    // In all other cases, the initialization just happens at the\n+                    // midpoint, like any other effect.\n+                    all_facts.initialized_at.push((init.path, location_table.mid_index(location)));\n+                }\n+            },\n+            // Arguments are initialized on function entry\n+            InitLocation::Argument(local) => {\n+                assert!(body.local_kind(local) == LocalKind::Arg);\n+                let fn_entry = Location {block: BasicBlock::from_u32(0u32), statement_index: 0 };\n+                all_facts.initialized_at.push((init.path, location_table.start_index(fn_entry)));\n+\n+            }\n+        }\n+    }\n+\n+\n+    // moved_out_at\n+    // deinitialisation is assumed to always happen!\n+    all_facts\n+        .moved_out_at\n+        .extend(\n+            move_data\n+                .moves\n+                .iter()\n+                .map(|mo| (mo.path, location_table.mid_index(mo.source))));\n+}\n+\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n@@ -87,7 +167,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     errors_buffer: &mut Vec<Diagnostic>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n-    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local>>>,\n+    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>>>,\n     Option<ClosureRegionRequirements<'tcx>>,\n ) {\n     let mut all_facts = if AllFacts::enabled(infcx.tcx) {\n@@ -123,6 +203,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         all_facts\n             .universal_region\n             .extend(universal_regions.universal_regions());\n+        populate_polonius_move_facts(all_facts, move_data, location_table, body);\n     }\n \n     // Create the region inference context, taking ownership of the"}, {"sha": "049d83bb22f1bc9cf48a56606bca4fdfb93adc02", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Body};\n+use rustc::mir::{Body, Local, Location};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n \n@@ -72,16 +72,10 @@ impl LocalUseMap {\n \n         let mut locals_with_use_data: IndexVec<Local, bool> =\n             IndexVec::from_elem_n(false, body.local_decls.len());\n-        live_locals\n-            .iter()\n-            .for_each(|&local| locals_with_use_data[local] = true);\n-\n-        LocalUseMapBuild {\n-            local_use_map: &mut local_use_map,\n-            elements,\n-            locals_with_use_data,\n-        }\n-        .visit_body(body);\n+        live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n+\n+        LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }\n+            .visit_body(body);\n \n         local_use_map\n     }\n@@ -151,10 +145,8 @@ impl LocalUseMapBuild<'_> {\n         location: Location,\n     ) {\n         let point_index = elements.point_from_location(location);\n-        let appearance_index = appearances.push(Appearance {\n-            point_index,\n-            next: *first_appearance,\n-        });\n+        let appearance_index =\n+            appearances.push(Appearance { point_index, next: *first_appearance });\n         *first_appearance = Some(appearance_index);\n     }\n }"}, {"sha": "3f2ec1ba970173910e7ac85ffbc574afad7952fc", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -58,9 +58,9 @@ pub(super) fn generate<'tcx>(\n     };\n \n     if !live_locals.is_empty() {\n-        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals, location_table);\n+        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals);\n \n-        polonius::populate_var_liveness_facts(typeck, body, location_table);\n+        polonius::populate_access_facts(typeck, body, location_table, move_data);\n     }\n }\n "}, {"sha": "d61464b3f387d52d84f904a0592994d419f03326", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,22 +1,28 @@\n use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::dataflow::indexes::MovePathIndex;\n+use crate::dataflow::move_paths::{LookupResult, MoveData};\n use crate::util::liveness::{categorize, DefUse};\n-use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Body, Local, Location};\n+use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n+use rustc::mir::{Body, Local, Location, Place};\n use rustc::ty::subst::Kind;\n use rustc::ty::Ty;\n \n use super::TypeChecker;\n \n type VarPointRelations = Vec<(Local, LocationIndex)>;\n+type MovePathPointRelations = Vec<(MovePathIndex, LocationIndex)>;\n \n-struct LivenessPointFactsExtractor<'me> {\n+struct UseFactsExtractor<'me> {\n     var_defined: &'me mut VarPointRelations,\n     var_used: &'me mut VarPointRelations,\n     location_table: &'me LocationTable,\n+    var_drop_used: &'me mut VarPointRelations,\n+    move_data: &'me MoveData<'me>,\n+    path_accessed_at: &'me mut MovePathPointRelations,\n }\n \n // A Visitor to walk through the MIR and extract point-wise facts\n-impl LivenessPointFactsExtractor<'_> {\n+impl UseFactsExtractor<'_> {\n     fn location_to_index(&self, location: Location) -> LocationIndex {\n         self.location_table.mid_index(location)\n     }\n@@ -30,15 +36,50 @@ impl LivenessPointFactsExtractor<'_> {\n         debug!(\"LivenessFactsExtractor::insert_use()\");\n         self.var_used.push((local, self.location_to_index(location)));\n     }\n+\n+    fn insert_drop_use(&mut self, local: Local, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_drop_use()\");\n+        self.var_drop_used.push((local, self.location_to_index(location)));\n+    }\n+\n+    fn insert_path_access(&mut self, path: MovePathIndex, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_path_access({:?}, {:?})\", path, location);\n+        self.path_accessed_at.push((path, self.location_to_index(location)));\n+    }\n+\n+    fn place_to_mpi(&self, place: &Place<'_>) -> Option<MovePathIndex> {\n+        match self.move_data.rev_lookup.find(place.as_ref()) {\n+            LookupResult::Exact(mpi) => Some(mpi),\n+            LookupResult::Parent(mmpi) => mmpi,\n+        }\n+    }\n }\n \n-impl Visitor<'tcx> for LivenessPointFactsExtractor<'_> {\n+impl Visitor<'tcx> for UseFactsExtractor<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n             Some(DefUse::Use) => self.insert_use(local, location),\n+            Some(DefUse::Drop) => self.insert_drop_use(local, location),\n+            _ => (),\n+        }\n+    }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+        self.super_place(place, context, location);\n+        match context {\n+            PlaceContext::NonMutatingUse(_) => {\n+                if let Some(mpi) = self.place_to_mpi(place) {\n+                    self.insert_path_access(mpi, location);\n+                }\n+            }\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) => {\n+                if let Some(mpi) = self.place_to_mpi(place) {\n+                    self.insert_path_access(mpi, location);\n+                }\n+            }\n             _ => (),\n-            // NOTE: Drop handling is now done in trace()\n         }\n     }\n }\n@@ -54,23 +95,27 @@ fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty\n     });\n }\n \n-pub(super) fn populate_var_liveness_facts(\n+pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    mir: &Body<'tcx>,\n+    body: &Body<'tcx>,\n     location_table: &LocationTable,\n+    move_data: &MoveData<'_>,\n ) {\n     debug!(\"populate_var_liveness_facts()\");\n \n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n-        LivenessPointFactsExtractor {\n+        UseFactsExtractor {\n             var_defined: &mut facts.var_defined,\n             var_used: &mut facts.var_used,\n+            var_drop_used: &mut facts.var_drop_used,\n+            path_accessed_at: &mut facts.path_accessed_at,\n             location_table,\n+            move_data,\n         }\n-        .visit_body(mir);\n+        .visit_body(body);\n     }\n \n-    for (local, local_decl) in mir.local_decls.iter_enumerated() {\n+    for (local, local_decl) in body.local_decls.iter_enumerated() {\n         add_var_uses_regions(typeck, local, local_decl.ty);\n     }\n }"}, {"sha": "9b55881cb1b10162a4e24b3d7657748b043e90b5", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 98, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,4 +1,3 @@\n-use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n use crate::borrow_check::nll::type_check::liveness::polonius;\n@@ -38,7 +37,6 @@ pub(super) fn trace(\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     live_locals: Vec<Local>,\n-    location_table: &LocationTable,\n ) {\n     debug!(\"trace()\");\n \n@@ -52,7 +50,6 @@ pub(super) fn trace(\n         local_use_map,\n         move_data,\n         drop_data: FxHashMap::default(),\n-        location_table,\n     };\n \n     LivenessResults::new(cx).compute_for_all_locals(live_locals);\n@@ -82,9 +79,6 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     /// Index indicating where each variable is assigned, used, or\n     /// dropped.\n     local_use_map: &'me LocalUseMap,\n-\n-    /// Maps between a MIR Location and a LocationIndex\n-    location_table: &'me LocationTable,\n }\n \n struct DropData<'tcx> {\n@@ -131,12 +125,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         for local in live_locals {\n             self.reset_local_state();\n             self.add_defs_for(local);\n-\n-            // FIXME: this is temporary until we can generate our own initialization\n-            if self.cx.typeck.borrowck_context.all_facts.is_some() {\n-                self.add_polonius_var_initialized_on_exit_for(local)\n-            }\n-\n             self.compute_use_live_points_for(local);\n             self.compute_drop_live_points_for(local);\n \n@@ -157,63 +145,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n-    // WARNING: panics if self.cx.typeck.borrowck_context.all_facts != None\n-    //\n-    // FIXME: this analysis (the initialization tracking) should be\n-    // done in Polonius, but isn't yet.\n-    fn add_polonius_var_initialized_on_exit_for(&mut self, local: Local) {\n-        let move_path = self.cx.move_data.rev_lookup.find_local(local);\n-        let facts = self.cx.typeck.borrowck_context.all_facts.as_mut().unwrap();\n-        for block in self.cx.body.basic_blocks().indices() {\n-            debug!(\"polonius: generating initialization facts for {:?} in {:?}\", local, block);\n-\n-            // iterate through the block, applying the effects of each statement\n-            // up to and including location, and populate `var_initialized_on_exit`\n-            self.cx.flow_inits.reset_to_entry_of(block);\n-            let start_location = Location { block, statement_index: 0 };\n-            self.cx.flow_inits.apply_local_effect(start_location);\n-\n-            for statement_index in 0..self.cx.body[block].statements.len() {\n-                let current_location = Location { block, statement_index };\n-\n-                self.cx.flow_inits.reconstruct_statement_effect(current_location);\n-\n-                // statement has not yet taken effect:\n-                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                    facts\n-                        .var_initialized_on_exit\n-                        .push((local, self.cx.location_table.start_index(current_location)));\n-                }\n-\n-                // statement has now taken effect\n-                self.cx.flow_inits.apply_local_effect(current_location);\n-\n-                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                    facts\n-                        .var_initialized_on_exit\n-                        .push((local, self.cx.location_table.mid_index(current_location)));\n-                }\n-            }\n-\n-            let terminator_location = self.cx.body.terminator_loc(block);\n-\n-            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                facts\n-                    .var_initialized_on_exit\n-                    .push((local, self.cx.location_table.start_index(terminator_location)));\n-            }\n-\n-            // apply the effects of the terminator and push it if needed\n-            self.cx.flow_inits.reset_to_exit_of(block);\n-\n-            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                facts\n-                    .var_initialized_on_exit\n-                    .push((local, self.cx.location_table.mid_index(terminator_location)));\n-            }\n-        }\n-    }\n-\n     /// Clear the value of fields that are \"per local variable\".\n     fn reset_local_state(&mut self) {\n         self.defs.clear();\n@@ -273,11 +204,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             debug_assert_eq!(self.cx.body.terminator_loc(location.block), location,);\n \n             if self.cx.initialized_at_terminator(location.block, mpi) {\n-                // FIXME: this analysis (the initialization tracking) should be\n-                // done in Polonius, but isn't yet.\n-                if let Some(facts) = self.cx.typeck.borrowck_context.all_facts {\n-                    facts.var_drop_used.push((local, self.cx.location_table.mid_index(location)));\n-                }\n                 if self.drop_live_at.insert(drop_point) {\n                     self.drop_locations.push(location);\n                     self.stack.push(drop_point);\n@@ -468,13 +394,7 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n     ) {\n         debug!(\"add_use_live_facts_for(value={:?})\", value);\n \n-        Self::make_all_regions_live(\n-            self.elements,\n-            &mut self.typeck,\n-            value,\n-            live_at,\n-            self.location_table,\n-        )\n+        Self::make_all_regions_live(self.elements, &mut self.typeck, value, live_at)\n     }\n \n     /// Some variable with type `live_ty` is \"drop live\" at `location`\n@@ -525,13 +445,7 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         // All things in the `outlives` array may be touched by\n         // the destructor and must be live at this point.\n         for &kind in &drop_data.dropck_result.kinds {\n-            Self::make_all_regions_live(\n-                self.elements,\n-                &mut self.typeck,\n-                kind,\n-                live_at,\n-                self.location_table,\n-            );\n+            Self::make_all_regions_live(self.elements, &mut self.typeck, kind, live_at);\n \n             polonius::add_var_drops_regions(&mut self.typeck, dropped_local, &kind);\n         }\n@@ -542,7 +456,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         typeck: &mut TypeChecker<'_, 'tcx>,\n         value: impl TypeFoldable<'tcx>,\n         live_at: &HybridBitSet<PointIndex>,\n-        location_table: &LocationTable,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);\n         debug!(\n@@ -559,15 +472,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n                 .constraints\n                 .liveness_constraints\n                 .add_elements(live_region_vid, live_at);\n-\n-            // FIXME: remove this when we can generate our own region-live-at reliably\n-            if let Some(facts) = typeck.borrowck_context.all_facts {\n-                for point in live_at.iter() {\n-                    let loc = elements.to_location(point);\n-                    facts.region_live_at.push((live_region_vid, location_table.start_index(loc)));\n-                    facts.region_live_at.push((live_region_vid, location_table.mid_index(loc)));\n-                }\n-            }\n         });\n     }\n "}, {"sha": "bac08090817d952d98ca59d7be60294a8d3f343c", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::places_conflict;\n use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase};\n-use rustc::mir::{ProjectionElem, BorrowKind};\n+use rustc::mir::BorrowKind;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::graph::dominators::Dominators;\n \n@@ -133,20 +133,11 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n-    place.iterate(|place_base, place_projection| {\n-        match place_base {\n-            PlaceBase::Static(..) => return false,\n-            PlaceBase::Local(..) => {},\n-        }\n-\n-        for proj in place_projection {\n-            // Reborrow of already borrowed data is ignored\n-            // Any errors will be caught on the initial borrow\n-            if proj.elem == ProjectionElem::Deref {\n-                return false;\n-            }\n-        }\n+    match place.base {\n+        PlaceBase::Static(_) => false,\n \n-        true\n-    })\n+        // Reborrow of already borrowed data is ignored\n+        // Any errors will be caught on the initial borrow\n+        PlaceBase::Local(_) => !place.is_indirect(),\n+    }\n }"}, {"sha": "1c43a553cc3c9edc681224df761c7f19f1cabe24", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -93,19 +93,10 @@ struct BorrowedLocalsVisitor<'gk> {\n }\n \n fn find_local(place: &Place<'_>) -> Option<Local> {\n-    place.iterate(|place_base, place_projection| {\n-        for proj in place_projection {\n-            if proj.elem == ProjectionElem::Deref {\n-                return None;\n-            }\n-        }\n-\n-        if let PlaceBase::Local(local) = place_base {\n-            Some(*local)\n-        } else {\n-            None\n-        }\n-    })\n+    match place.base {\n+        PlaceBase::Local(local) if !place.is_indirect() => Some(local),\n+        _ => None,\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowedLocalsVisitor<'_> {"}, {"sha": "d97f3b7417286806ca73f824fdacffb39988b660", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -11,7 +11,7 @@\n //! `a[x]` would still overlap them both. But that is not this\n //! representation does today.)\n \n-use rustc::mir::{Local, PlaceElem, Operand, ProjectionElem};\n+use rustc::mir::{Local, Operand, PlaceElem, ProjectionElem};\n use rustc::ty::Ty;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -26,36 +26,36 @@ pub trait Lift {\n }\n impl<'tcx> Lift for Operand<'tcx> {\n     type Abstract = AbstractOperand;\n-    fn lift(&self) -> Self::Abstract { AbstractOperand }\n+    fn lift(&self) -> Self::Abstract {\n+        AbstractOperand\n+    }\n }\n impl Lift for Local {\n     type Abstract = AbstractOperand;\n-    fn lift(&self) -> Self::Abstract { AbstractOperand }\n+    fn lift(&self) -> Self::Abstract {\n+        AbstractOperand\n+    }\n }\n impl<'tcx> Lift for Ty<'tcx> {\n     type Abstract = AbstractType;\n-    fn lift(&self) -> Self::Abstract { AbstractType }\n+    fn lift(&self) -> Self::Abstract {\n+        AbstractType\n+    }\n }\n impl<'tcx> Lift for PlaceElem<'tcx> {\n     type Abstract = AbstractElem;\n     fn lift(&self) -> Self::Abstract {\n         match *self {\n-            ProjectionElem::Deref =>\n-                ProjectionElem::Deref,\n-            ProjectionElem::Field(ref f, ty) =>\n-                ProjectionElem::Field(f.clone(), ty.lift()),\n-            ProjectionElem::Index(ref i) =>\n-                ProjectionElem::Index(i.lift()),\n-            ProjectionElem::Subslice {from, to} =>\n-                ProjectionElem::Subslice { from: from, to: to },\n-            ProjectionElem::ConstantIndex {offset,min_length,from_end} =>\n-                ProjectionElem::ConstantIndex {\n-                    offset,\n-                    min_length,\n-                    from_end,\n-                },\n-            ProjectionElem::Downcast(a, u) =>\n-                ProjectionElem::Downcast(a, u.clone()),\n+            ProjectionElem::Deref => ProjectionElem::Deref,\n+            ProjectionElem::Field(ref f, ty) => ProjectionElem::Field(f.clone(), ty.lift()),\n+            ProjectionElem::Index(ref i) => ProjectionElem::Index(i.lift()),\n+            ProjectionElem::Subslice { from, to } => {\n+                ProjectionElem::Subslice { from: from, to: to }\n+            }\n+            ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n+                ProjectionElem::ConstantIndex { offset, min_length, from_end }\n+            }\n+            ProjectionElem::Downcast(a, u) => ProjectionElem::Downcast(a, u.clone()),\n         }\n     }\n }"}, {"sha": "81451c2500c471bd1f9ca7bb7c9993a8f2fa420c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 102, "deletions": 98, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,16 +1,18 @@\n-use rustc::ty::{self, TyCtxt};\n-use rustc::mir::*;\n use rustc::mir::tcx::RvalueInitializationState;\n-use rustc_data_structures::indexed_vec::{IndexVec};\n-use smallvec::{SmallVec, smallvec};\n+use rustc::mir::*;\n+use rustc::ty::{self, TyCtxt};\n+use rustc_data_structures::indexed_vec::IndexVec;\n+use smallvec::{smallvec, SmallVec};\n \n use std::collections::hash_map::Entry;\n use std::mem;\n \n use super::abs_domain::Lift;\n-use super::{LocationMap, MoveData, MovePath, MovePathLookup, MovePathIndex, MoveOut, MoveOutIndex};\n-use super::{MoveError, InitIndex, Init, InitLocation, LookupResult, InitKind};\n use super::IllegalMoveOriginKind::*;\n+use super::{Init, InitIndex, InitKind, InitLocation, LookupResult, MoveError};\n+use super::{\n+    LocationMap, MoveData, MoveOut, MoveOutIndex, MovePath, MovePathIndex, MovePathLookup,\n+};\n \n struct MoveDataBuilder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n@@ -33,43 +35,42 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 moves: IndexVec::new(),\n                 loc_map: LocationMap::new(body),\n                 rev_lookup: MovePathLookup {\n-                    locals: body.local_decls.indices().map(|i| {\n-                        Self::new_move_path(\n-                            &mut move_paths,\n-                            &mut path_map,\n-                            &mut init_path_map,\n-                            None,\n-                            Place::from(i),\n-                        )\n-                    }).collect(),\n+                    locals: body\n+                        .local_decls\n+                        .indices()\n+                        .map(|i| {\n+                            Self::new_move_path(\n+                                &mut move_paths,\n+                                &mut path_map,\n+                                &mut init_path_map,\n+                                None,\n+                                Place::from(i),\n+                            )\n+                        })\n+                        .collect(),\n                     projections: Default::default(),\n                 },\n                 move_paths,\n                 path_map,\n                 inits: IndexVec::new(),\n                 init_loc_map: LocationMap::new(body),\n                 init_path_map,\n-            }\n+            },\n         }\n     }\n \n-    fn new_move_path(move_paths: &mut IndexVec<MovePathIndex, MovePath<'tcx>>,\n-                     path_map: &mut IndexVec<MovePathIndex, SmallVec<[MoveOutIndex; 4]>>,\n-                     init_path_map: &mut IndexVec<MovePathIndex, SmallVec<[InitIndex; 4]>>,\n-                     parent: Option<MovePathIndex>,\n-                     place: Place<'tcx>)\n-                     -> MovePathIndex\n-    {\n-        let move_path = move_paths.push(MovePath {\n-            next_sibling: None,\n-            first_child: None,\n-            parent,\n-            place,\n-        });\n+    fn new_move_path(\n+        move_paths: &mut IndexVec<MovePathIndex, MovePath<'tcx>>,\n+        path_map: &mut IndexVec<MovePathIndex, SmallVec<[MoveOutIndex; 4]>>,\n+        init_path_map: &mut IndexVec<MovePathIndex, SmallVec<[InitIndex; 4]>>,\n+        parent: Option<MovePathIndex>,\n+        place: Place<'tcx>,\n+    ) -> MovePathIndex {\n+        let move_path =\n+            move_paths.push(MovePath { next_sibling: None, first_child: None, parent, place });\n \n         if let Some(parent) = parent {\n-            let next_sibling =\n-                mem::replace(&mut move_paths[parent].first_child, Some(move_path));\n+            let next_sibling = mem::replace(&mut move_paths[parent].first_child, Some(move_path));\n             move_paths[move_path].next_sibling = next_sibling;\n         }\n \n@@ -91,9 +92,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     /// problematic for borrowck.\n     ///\n     /// Maybe we should have separate \"borrowck\" and \"moveck\" modes.\n-    fn move_path_for(&mut self, place: &Place<'tcx>)\n-                     -> Result<MovePathIndex, MoveError<'tcx>>\n-    {\n+    fn move_path_for(&mut self, place: &Place<'tcx>) -> Result<MovePathIndex, MoveError<'tcx>> {\n         debug!(\"lookup({:?})\", place);\n         place.iterate(|place_base, place_projection| {\n             let mut base = match place_base {\n@@ -108,39 +107,46 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 let tcx = self.builder.tcx;\n                 let place_ty = Place::ty_from(place_base, &proj.base, body, tcx).ty;\n                 match place_ty.sty {\n-                    ty::Ref(..) | ty::RawPtr(..) =>\n+                    ty::Ref(..) | ty::RawPtr(..) => {\n                         return Err(MoveError::cannot_move_out_of(\n                             self.loc,\n                             BorrowedContent {\n                                 target_place: Place {\n                                     base: place_base.clone(),\n                                     projection: Some(Box::new(proj.clone())),\n-                                }\n-                            })),\n-                    ty::Adt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n-                        return Err(MoveError::cannot_move_out_of(self.loc,\n-                                                                 InteriorOfTypeWithDestructor {\n-                            container_ty: place_ty\n-                        })),\n+                                },\n+                            },\n+                        ));\n+                    }\n+                    ty::Adt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() => {\n+                        return Err(MoveError::cannot_move_out_of(\n+                            self.loc,\n+                            InteriorOfTypeWithDestructor { container_ty: place_ty },\n+                        ));\n+                    }\n                     // move out of union - always move the entire union\n-                    ty::Adt(adt, _) if adt.is_union() =>\n-                        return Err(MoveError::UnionMove { path: base }),\n-                    ty::Slice(_) =>\n+                    ty::Adt(adt, _) if adt.is_union() => {\n+                        return Err(MoveError::UnionMove { path: base });\n+                    }\n+                    ty::Slice(_) => {\n                         return Err(MoveError::cannot_move_out_of(\n                             self.loc,\n                             InteriorOfSliceOrArray {\n-                                ty: place_ty, is_index: match proj.elem {\n+                                ty: place_ty,\n+                                is_index: match proj.elem {\n                                     ProjectionElem::Index(..) => true,\n-                                    _ => false\n+                                    _ => false,\n                                 },\n-                            })),\n+                            },\n+                        ));\n+                    }\n                     ty::Array(..) => match proj.elem {\n-                        ProjectionElem::Index(..) =>\n+                        ProjectionElem::Index(..) => {\n                             return Err(MoveError::cannot_move_out_of(\n                                 self.loc,\n-                                InteriorOfSliceOrArray {\n-                                    ty: place_ty, is_index: true\n-                                })),\n+                                InteriorOfSliceOrArray { ty: place_ty, is_index: true },\n+                            ));\n+                        }\n                         _ => {\n                             // FIXME: still badly broken\n                         }\n@@ -186,7 +192,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn finalize(\n-        self\n+        self,\n     ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         debug!(\"{}\", {\n             debug!(\"moves for {:?}:\", self.body.span);\n@@ -200,11 +206,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             \"done dumping moves\"\n         });\n \n-        if !self.errors.is_empty() {\n-            Err((self.data, self.errors))\n-        } else {\n-            Ok(self.data)\n-        }\n+        if !self.errors.is_empty() { Err((self.data, self.errors)) } else { Ok(self.data) }\n     }\n }\n \n@@ -222,10 +224,7 @@ pub(super) fn gather_moves<'tcx>(\n             builder.gather_statement(source, stmt);\n         }\n \n-        let terminator_loc = Location {\n-            block: bb,\n-            statement_index: block.statements.len()\n-        };\n+        let terminator_loc = Location { block: bb, statement_index: block.statements.len() };\n         builder.gather_terminator(terminator_loc, block.terminator());\n     }\n \n@@ -238,11 +237,12 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             let path = self.data.rev_lookup.locals[arg];\n \n             let init = self.data.inits.push(Init {\n-                path, kind: InitKind::Deep, location: InitLocation::Argument(arg),\n+                path,\n+                kind: InitKind::Deep,\n+                location: InitLocation::Argument(arg),\n             });\n \n-            debug!(\"gather_args: adding init {:?} of {:?} for argument {:?}\",\n-                init, path, arg);\n+            debug!(\"gather_args: adding init {:?} of {:?} for argument {:?}\", init, path, arg);\n \n             self.data.init_path_map[path].push(init);\n         }\n@@ -297,26 +297,26 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::StorageDead(local) => {\n                 self.gather_move(&Place::from(local));\n             }\n-            StatementKind::SetDiscriminant{ .. } => {\n-                span_bug!(stmt.source_info.span,\n-                          \"SetDiscriminant should not exist during borrowck\");\n+            StatementKind::SetDiscriminant { .. } => {\n+                span_bug!(\n+                    stmt.source_info.span,\n+                    \"SetDiscriminant should not exist during borrowck\"\n+                );\n             }\n-            StatementKind::Retag { .. } |\n-            StatementKind::AscribeUserType(..) |\n-            StatementKind::Nop => {}\n+            StatementKind::Retag { .. }\n+            | StatementKind::AscribeUserType(..)\n+            | StatementKind::Nop => {}\n         }\n     }\n \n     fn gather_rvalue(&mut self, rvalue: &Rvalue<'tcx>) {\n         match *rvalue {\n-            Rvalue::Use(ref operand) |\n-            Rvalue::Repeat(ref operand, _) |\n-            Rvalue::Cast(_, ref operand, _) |\n-            Rvalue::UnaryOp(_, ref operand) => {\n-                self.gather_operand(operand)\n-            }\n-            Rvalue::BinaryOp(ref _binop, ref lhs, ref rhs) |\n-            Rvalue::CheckedBinaryOp(ref _binop, ref lhs, ref rhs) => {\n+            Rvalue::Use(ref operand)\n+            | Rvalue::Repeat(ref operand, _)\n+            | Rvalue::Cast(_, ref operand, _)\n+            | Rvalue::UnaryOp(_, ref operand) => self.gather_operand(operand),\n+            Rvalue::BinaryOp(ref _binop, ref lhs, ref rhs)\n+            | Rvalue::CheckedBinaryOp(ref _binop, ref lhs, ref rhs) => {\n                 self.gather_operand(lhs);\n                 self.gather_operand(rhs);\n             }\n@@ -325,11 +325,11 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     self.gather_operand(operand);\n                 }\n             }\n-            Rvalue::Ref(..) |\n-            Rvalue::Discriminant(..) |\n-            Rvalue::Len(..) |\n-            Rvalue::NullaryOp(NullOp::SizeOf, _) |\n-            Rvalue::NullaryOp(NullOp::Box, _) => {\n+            Rvalue::Ref(..)\n+            | Rvalue::Discriminant(..)\n+            | Rvalue::Len(..)\n+            | Rvalue::NullaryOp(NullOp::SizeOf, _)\n+            | Rvalue::NullaryOp(NullOp::Box, _) => {\n                 // This returns an rvalue with uninitialized contents. We can't\n                 // move out of it here because it is an rvalue - assignments always\n                 // completely initialize their place.\n@@ -346,13 +346,13 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n-            TerminatorKind::Goto { target: _ } |\n-            TerminatorKind::Resume |\n-            TerminatorKind::Abort |\n-            TerminatorKind::GeneratorDrop |\n-            TerminatorKind::FalseEdges { .. } |\n-            TerminatorKind::FalseUnwind { .. } |\n-            TerminatorKind::Unreachable => { }\n+            TerminatorKind::Goto { target: _ }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Abort\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::Unreachable => {}\n \n             TerminatorKind::Return => {\n                 self.gather_move(&Place::RETURN_PLACE);\n@@ -399,9 +399,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n     fn gather_operand(&mut self, operand: &Operand<'tcx>) {\n         match *operand {\n-            Operand::Constant(..) |\n-            Operand::Copy(..) => {} // not-a-move\n-            Operand::Move(ref place) => { // a move\n+            Operand::Constant(..) | Operand::Copy(..) => {} // not-a-move\n+            Operand::Move(ref place) => {\n+                // a move\n                 self.gather_move(place);\n             }\n         }\n@@ -419,8 +419,10 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         };\n         let move_out = self.builder.data.moves.push(MoveOut { path: path, source: self.loc });\n \n-        debug!(\"gather_move({:?}, {:?}): adding move {:?} of {:?}\",\n-               self.loc, place, move_out, path);\n+        debug!(\n+            \"gather_move({:?}, {:?}): adding move {:?} of {:?}\",\n+            self.loc, place, move_out, path\n+        );\n \n         self.builder.data.path_map[path].push(move_out);\n         self.builder.data.loc_map[self.loc].push(move_out);\n@@ -452,8 +454,10 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 kind,\n             });\n \n-            debug!(\"gather_init({:?}, {:?}): adding init {:?} of {:?}\",\n-               self.loc, place, init, path);\n+            debug!(\n+                \"gather_init({:?}, {:?}): adding init {:?} of {:?}\",\n+                self.loc, place, init, path\n+            );\n \n             self.builder.data.init_path_map[path].push(init);\n             self.builder.data.init_loc_map[self.loc].push(init);"}, {"sha": "5028e9650918c5d55a3e01ca0fc2ea53f07dbe47", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,9 +1,10 @@\n-use rustc::ty::{Ty, TyCtxt};\n+use core::slice::Iter;\n use rustc::mir::*;\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::indexed_vec::{Enumerated, Idx, IndexVec};\n use smallvec::SmallVec;\n-use syntax_pos::{Span};\n+use syntax_pos::Span;\n \n use std::fmt;\n use std::ops::{Index, IndexMut};\n@@ -137,12 +138,17 @@ impl<T> IndexMut<Location> for LocationMap<T> {\n     }\n }\n \n-impl<T> LocationMap<T> where T: Default + Clone {\n+impl<T> LocationMap<T>\n+where\n+    T: Default + Clone,\n+{\n     fn new(body: &Body<'_>) -> Self {\n         LocationMap {\n-            map: body.basic_blocks().iter().map(|block| {\n-                vec![T::default(); block.statements.len()+1]\n-            }).collect()\n+            map: body\n+                .basic_blocks()\n+                .iter()\n+                .map(|block| vec![T::default(); block.statements.len() + 1])\n+                .collect(),\n         }\n     }\n }\n@@ -178,7 +184,6 @@ pub struct Init {\n     pub kind: InitKind,\n }\n \n-\n /// Initializations can be from an argument or from a statement. Arguments\n /// do not have locations, in those cases the `Local` is kept..\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -224,15 +229,15 @@ pub struct MovePathLookup {\n     /// subsequent search so that it is solely relative to that\n     /// base-place). For the remaining lookup, we map the projection\n     /// elem to the associated MovePathIndex.\n-    projections: FxHashMap<(MovePathIndex, AbstractElem), MovePathIndex>\n+    projections: FxHashMap<(MovePathIndex, AbstractElem), MovePathIndex>,\n }\n \n mod builder;\n \n #[derive(Copy, Clone, Debug)]\n pub enum LookupResult {\n     Exact(MovePathIndex),\n-    Parent(Option<MovePathIndex>)\n+    Parent(Option<MovePathIndex>),\n }\n \n impl MovePathLookup {\n@@ -262,6 +267,12 @@ impl MovePathLookup {\n     pub fn find_local(&self, local: Local) -> MovePathIndex {\n         self.locals[local]\n     }\n+\n+    /// An enumerated iterator of `local`s and their associated\n+    /// `MovePathIndex`es.\n+    pub fn iter_locals_enumerated(&self) -> Enumerated<Local, Iter<'_, MovePathIndex>> {\n+        self.locals.iter_enumerated()\n+    }\n }\n \n #[derive(Debug)]\n@@ -289,7 +300,7 @@ pub(crate) enum IllegalMoveOriginKind<'tcx> {\n     InteriorOfTypeWithDestructor { container_ty: Ty<'tcx> },\n \n     /// Illegal move due to attempt to move out of a slice or array.\n-    InteriorOfSliceOrArray { ty: Ty<'tcx>, is_index: bool, },\n+    InteriorOfSliceOrArray { ty: Ty<'tcx>, is_index: bool },\n }\n \n #[derive(Debug)]\n@@ -318,11 +329,15 @@ impl<'tcx> MoveData<'tcx> {\n     pub fn base_local(&self, mut mpi: MovePathIndex) -> Option<Local> {\n         loop {\n             let path = &self.move_paths[mpi];\n-            if let Place {\n-                base: PlaceBase::Local(l),\n-                projection: None,\n-            } = path.place { return Some(l); }\n-            if let Some(parent) = path.parent { mpi = parent; continue } else { return None }\n+            if let Place { base: PlaceBase::Local(l), projection: None } = path.place {\n+                return Some(l);\n+            }\n+            if let Some(parent) = path.parent {\n+                mpi = parent;\n+                continue;\n+            } else {\n+                return None;\n+            }\n         }\n     }\n }"}, {"sha": "f358bb00f4d12a744d5969a00d25572ef18b3c00", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -585,8 +585,9 @@ where\n         use rustc::mir::StaticKind;\n \n         Ok(match place_static.kind {\n-            StaticKind::Promoted(promoted, _) => {\n-                let instance = self.frame().instance;\n+            StaticKind::Promoted(promoted, promoted_substs) => {\n+                let substs = self.subst_from_frame_and_normalize_erasing_regions(promoted_substs);\n+                let instance = ty::Instance::new(place_static.def_id, substs);\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),"}, {"sha": "c193911247e2bea5bb4219c1461214ab7476bf5d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -777,7 +777,7 @@ where\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).as_str();\n+                let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "e4b186736e2a199e822868d3519abab101e553bc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -405,13 +405,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n \n                 let arg = self.eval_operand(arg, source_info)?;\n+                let oflo_check = self.tcx.sess.overflow_checks();\n                 let val = self.use_ecx(source_info, |this| {\n                     let prim = this.ecx.read_immediate(arg)?;\n                     match op {\n                         UnOp::Neg => {\n-                            // Need to do overflow check here: For actual CTFE, MIR\n-                            // generation emits code that does this before calling the op.\n-                            if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n+                            // We check overflow in debug mode already\n+                            // so should only check in release mode.\n+                            if !oflo_check\n+                            && prim.layout.ty.is_signed()\n+                            && prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n                                 throw_panic!(OverflowNeg)\n                             }\n                         }\n@@ -485,7 +488,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         Scalar::from_bool(overflow).into(),\n                     )\n                 } else {\n-                    if overflow {\n+                    // We check overflow in debug mode already\n+                    // so should only check in release mode.\n+                    if !self.tcx.sess.overflow_checks() && overflow {\n                         let err = err_panic!(Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "fae44836fa821721b1e743cb8452c2dd085195d2", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,26 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\"-Wl,--as-needed\".to_string(), \"-Wl,-z,noexecstack\".to_string()],\n+    );\n+\n+    TargetOptions {\n+        disable_redzone: true,\n+        panic_strategy: PanicStrategy::Abort,\n+        stack_probes: true,\n+        eliminate_frame_pointer: false,\n+        linker_is_gnu: true,\n+        position_independent_executables: true,\n+        needs_plt: true,\n+        relro_level: RelroLevel::Full,\n+        relocation_model: \"static\".to_string(),\n+        target_family: Some(\"unix\".to_string()),\n+        pre_link_args,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "503d8a08b6f4ff507687f800af0cd2812aaea5e9", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -53,6 +53,7 @@ mod freebsd_base;\n mod haiku_base;\n mod hermit_base;\n mod linux_base;\n+mod linux_kernel_base;\n mod linux_musl_base;\n mod openbsd_base;\n mod netbsd_base;\n@@ -386,6 +387,8 @@ supported_targets! {\n     (\"thumbv7neon-linux-androideabi\", thumbv7neon_linux_androideabi),\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n+    (\"x86_64-linux-kernel\", x86_64_linux_kernel),\n+\n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),\n     (\"armv6-unknown-freebsd\", armv6_unknown_freebsd),\n     (\"armv7-unknown-freebsd\", armv7_unknown_freebsd),"}, {"sha": "a80b021208ed736185c4c1b3b35b1af015df038f", "filename": "src/librustc_target/spec/x86_64_linux_kernel.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,31 @@\n+// This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n+// generic Linux kernel options.\n+\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_kernel_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.features =\n+        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n+            .to_string();\n+    base.code_model = Some(\"kernel\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+\n+    Ok(Target {\n+        // FIXME: Some dispute, the linux-on-clang folks think this should use \"Linux\"\n+        llvm_target: \"x86_64-elf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: base,\n+    })\n+}"}, {"sha": "9644815f805d992191fcabcd024dfe95ff63ce4e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -19,7 +19,7 @@ use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n-use syntax::symbol::{Symbol, LocalInternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 // prevent all specified fields from being suggested\n-                let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n+                let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);\n                 if let Some(field_name) = Self::suggest_field_name(\n                     variant,\n                     &field.ident.as_str(),\n@@ -1288,11 +1288,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &str,\n-                          skip: Vec<LocalInternedString>)\n+                          skip: Vec<Symbol>)\n                           -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|x| *x == field.ident.as_str()) ||\n+            if skip.iter().any(|&x| x == field.ident.name) ||\n                (!variant.def_id.is_local() && field.vis != Visibility::Public)\n             {\n                 None"}, {"sha": "d8d01624f1d56d836f4954efc781ca4da6cb9a5c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1420,8 +1420,8 @@ fn check_opaque_for_cycles<'tcx>(\n                 tcx.sess, span, E0733,\n                 \"recursion in an `async fn` requires boxing\",\n             )\n-            .span_label(span, \"an `async fn` cannot invoke itself directly\")\n-            .note(\"a recursive `async fn` must be rewritten to return a boxed future.\")\n+            .span_label(span, \"recursive `async fn`\")\n+            .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\")\n             .emit();\n         } else {\n             let mut err = struct_span_err!(\n@@ -3687,6 +3687,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail\n+    /// expression's `Span`, otherwise return `expr.span`. This is done to give better errors\n+    /// when given code like the following:\n+    /// ```text\n+    /// if false { return 0i32; } else { 1u32 }\n+    /// //                               ^^^^ point at this instead of the whole `if` expression\n+    /// ```\n+    fn get_expr_coercion_span(&self, expr: &hir::Expr) -> syntax_pos::Span {\n+        if let hir::ExprKind::Match(_, arms, _) = &expr.node {\n+            let arm_spans: Vec<Span> = arms.iter().filter_map(|arm| {\n+                self.in_progress_tables\n+                    .and_then(|tables| tables.borrow().node_type_opt(arm.body.hir_id))\n+                    .and_then(|arm_ty| {\n+                        if arm_ty.is_never() {\n+                            None\n+                        } else {\n+                            Some(match &arm.body.node {\n+                                // Point at the tail expression when possible.\n+                                hir::ExprKind::Block(block, _) => block.expr\n+                                    .as_ref()\n+                                    .map(|e| e.span)\n+                                    .unwrap_or(block.span),\n+                                _ => arm.body.span,\n+                            })\n+                        }\n+                    })\n+            }).collect();\n+            if arm_spans.len() == 1 {\n+                return arm_spans[0];\n+            }\n+        }\n+        expr.span\n+    }\n+\n     fn check_block_with_expected(\n         &self,\n         blk: &'tcx hir::Block,\n@@ -3746,12 +3780,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n-                let cause = self.cause(tail_expr.span,\n-                                       ObligationCauseCode::BlockTailExpression(blk.hir_id));\n-                coerce.coerce(self,\n-                              &cause,\n-                              tail_expr,\n-                              tail_expr_ty);\n+                let span = self.get_expr_coercion_span(tail_expr);\n+                let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n+                coerce.coerce(self, &cause, tail_expr, tail_expr_ty);\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}, {"sha": "ac8ee43dd0801670797b165e48e1b7eba5a30237", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -762,19 +762,19 @@ fn check_opaque_types<'fcx, 'tcx>(\n     substituted_predicates\n }\n \n+const HELP_FOR_SELF_TYPE: &str =\n+    \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+     `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+     of the previous types except `Self`)\";\n+\n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     method_sig: &hir::MethodSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n-    const HELP_FOR_SELF_TYPE: &str =\n-        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n-         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n-         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n-    debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n-           method, self_ty);\n+    debug!(\"check_method_receiver({:?}, self_ty={:?})\", method, self_ty);\n \n     if !method.method_has_self_argument {\n         return;\n@@ -805,12 +805,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n             // Report error; `arbitrary_self_types` was enabled.\n-            fcx.tcx.sess.diagnostic().mut_span_err(\n-                span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-            ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(HELP_FOR_SELF_TYPE)\n-            .code(DiagnosticId::Error(\"E0307\".into()))\n-            .emit();\n+            e0307(fcx, span, receiver_ty);\n         }\n     } else {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n@@ -830,17 +825,22 @@ fn check_method_receiver<'fcx, 'tcx>(\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n-                fcx.tcx.sess.diagnostic().mut_span_err(\n-                    span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-                ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(HELP_FOR_SELF_TYPE)\n-                .code(DiagnosticId::Error(\"E0307\".into()))\n-                .emit();\n+                e0307(fcx, span, receiver_ty);\n             }\n         }\n     }\n }\n \n+fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+    fcx.tcx.sess.diagnostic().mut_span_err(\n+        span,\n+        &format!(\"invalid `self` parameter type: {:?}\", receiver_ty)\n+    ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n+    .help(HELP_FOR_SELF_TYPE)\n+    .code(DiagnosticId::Error(\"E0307\".into()))\n+    .emit();\n+}\n+\n /// Returns whether `receiver_ty` would be considered a valid receiver type for `self_ty`. If\n /// `arbitrary_self_types` is enabled, `receiver_ty` must transitively deref to `self_ty`, possibly\n /// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more"}, {"sha": "093446d28533e21c6bad37611e4e96566074c6d5", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -212,7 +212,7 @@ match string {\n E0033: r##\"\n This error indicates that a pointer to a trait type cannot be implicitly\n dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementors isn't fixed, this type has no compile-time size.\n+size of trait implementers isn't fixed, this type has no compile-time size.\n Therefore, all accesses to trait types must be through pointers. If you\n encounter this error you should try to avoid dereferencing the pointer.\n \n@@ -2425,6 +2425,87 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n+E0307: r##\"\n+This error indicates that the `self` parameter in a method has an invalid\n+\"reciever type\".\n+\n+Methods take a special first parameter, of which there are three variants:\n+`self`, `&self`, and `&mut self`. These are syntactic sugar for\n+`self: Self`, `self: &Self`, and `self: &mut Self` respectively.\n+\n+```\n+# struct Foo;\n+trait Trait {\n+    fn foo(&self);\n+//         ^^^^^ `self` here is a reference to the receiver object\n+}\n+\n+impl Trait for Foo {\n+    fn foo(&self) {}\n+//         ^^^^^ the receiver type is `&Foo`\n+}\n+```\n+\n+The type `Self` acts as an alias to the type of the current trait\n+implementer, or \"receiver type\". Besides the already mentioned `Self`,\n+`&Self` and `&mut Self` valid receiver types, the following are also valid:\n+`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n+(where P is one of the previous types except `Self`). Note that `Self` can\n+also be the underlying implementing type, like `Foo` in the following\n+example:\n+\n+```\n+# struct Foo;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Foo) {}\n+}\n+```\n+\n+E0307 will be emitted by the compiler when using an invalid reciver type,\n+like in the following example:\n+\n+```compile_fail,E0307\n+# struct Foo;\n+# struct Bar;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(self: &Bar) {}\n+}\n+```\n+\n+The nightly feature [Arbintrary self types][AST] extends the accepted\n+set of receiver types to also include any type that can dereference to\n+`Self`:\n+\n+```\n+#![feature(arbitrary_self_types)]\n+\n+struct Foo;\n+struct Bar;\n+\n+// Because you can dereference `Bar` into `Foo`...\n+impl std::ops::Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &Foo\n+    }\n+}\n+\n+impl Foo {\n+    fn foo(self: Bar) {}\n+//         ^^^^^^^^^ ...it can be used as the receiver type\n+}\n+```\n+\n+[AST]: https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html\n+\"##,\n+\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -4851,7 +4932,6 @@ register_diagnostics! {\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412\n //  E0249,\n-    E0307, // invalid method `self` type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion"}, {"sha": "309e5575ee403d0082a95b838192f3faf94750af", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -344,7 +344,7 @@ if (!DOMTokenList.prototype.remove) {\n             var set_fragment = function(name) {\n                 if (browserSupportsHistoryApi()) {\n                     history.replaceState(null, null, \"#\" + name);\n-                    window.hashchange();\n+                    highlightSourceLines(null);\n                 } else {\n                     location.replace(\"#\" + name);\n                 }"}, {"sha": "301946733dc55a24b7f3f12e26e41bf0cb81c3df", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -33,6 +33,7 @@ extern crate rustc_interface;\n extern crate rustc_metadata;\n extern crate rustc_target;\n extern crate rustc_typeck;\n+extern crate rustc_lexer;\n extern crate serialize;\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "32044e48b6f99207f94a071ea0d396724922a7a0", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n "}, {"sha": "2951b2ccb2af91c062b96099e64ff15e99dc9a2b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -465,7 +465,7 @@ fn resolution_failure(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n@@ -517,7 +517,7 @@ fn ambiguity_error(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut msg = format!(\"`{}` is \", path_str);\n "}, {"sha": "49a34c7e46281a1bd12048917a0b4a902fd5098b", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -339,7 +339,7 @@ pub fn look_for_tests<'tcx>(\n     find_testable_code(&dox, &mut tests, ErrorCodes::No);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n-        let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());\n+        let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n@@ -352,20 +352,23 @@ pub fn look_for_tests<'tcx>(\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs),\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             \"Documentation test in private item\");\n         diag.emit();\n     }\n }\n \n /// Returns a span encompassing all the given attributes.\n-crate fn span_of_attrs(attrs: &clean::Attributes) -> Span {\n+crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {\n-        return DUMMY_SP;\n+        return None;\n     }\n     let start = attrs.doc_strings[0].span();\n+    if start == DUMMY_SP {\n+        return None;\n+    }\n     let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n-    start.to(end)\n+    Some(start.to(end))\n }\n \n /// Attempts to match a range of bytes from parsed markdown to a `Span` in the source code.\n@@ -391,7 +394,7 @@ crate fn source_span_for_markdown_range(\n     let snippet = cx\n         .sess()\n         .source_map()\n-        .span_to_snippet(span_of_attrs(attrs))\n+        .span_to_snippet(span_of_attrs(attrs)?)\n         .ok()?;\n \n     let starting_line = markdown[..md_range.start].matches('\\n').count();\n@@ -441,10 +444,8 @@ crate fn source_span_for_markdown_range(\n         }\n     }\n \n-    let sp = span_of_attrs(attrs).from_inner(InnerSpan::new(\n+    Some(span_of_attrs(attrs)?.from_inner(InnerSpan::new(\n         md_range.start + start_bytes,\n         md_range.end + start_bytes + end_bytes,\n-    ));\n-\n-    Some(sp)\n+    )))\n }"}, {"sha": "000d2843adce396917c80f7b4f7f3efd66c92f36", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -763,8 +763,8 @@ impl Tester for Collector {\n             // We use these headings as test names, so it's good if\n             // they're valid identifiers.\n             let name = name.chars().enumerate().map(|(i, c)| {\n-                    if (i == 0 && c.is_xid_start()) ||\n-                        (i != 0 && c.is_xid_continue()) {\n+                    if (i == 0 && rustc_lexer::is_id_start(c)) ||\n+                        (i != 0 && rustc_lexer::is_id_continue(c)) {\n                         c\n                     } else {\n                         '_'"}, {"sha": "0386dbd490d0301dc50606a3a7af8c4620265cf3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -371,6 +371,14 @@ where\n     loop {\n         if g.len == g.buf.len() {\n             unsafe {\n+                // FIXME(danielhenrymantilla): #42788\n+                //\n+                //   - This creates a (mut) reference to a slice of\n+                //     _uninitialized_ integers, which is **undefined behavior**\n+                //\n+                //   - Only the standard library gets to soundly \"ignore\" this,\n+                //     based on its privileged knowledge of unstable rustc\n+                //     internals;\n                 g.buf.reserve(reservation_size(r));\n                 let capacity = g.buf.capacity();\n                 g.buf.set_len(capacity);"}, {"sha": "71050b0dcd1f5725e09e796c6e3ae9c94dcc3c2a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -244,7 +244,6 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n-#![feature(checked_duration_since)]\n #![feature(clamp)]\n #![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]"}, {"sha": "cc1c04a83e752859343e4afcf8c6ebb281ac84c0", "filename": "src/libstd/sys/sgx/condvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -27,8 +27,7 @@ impl Condvar {\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let guard = self.inner.lock();\n-        mutex.unlock();\n-        WaitQueue::wait(guard);\n+        WaitQueue::wait(guard, || mutex.unlock());\n         mutex.lock()\n     }\n "}, {"sha": "662da8b3f66850f1a72add0674ad5006e0c84e57", "filename": "src/libstd/sys/sgx/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -22,7 +22,7 @@ impl Mutex {\n         let mut guard = self.inner.lock();\n         if *guard.lock_var() {\n             // Another thread has the lock, wait\n-            WaitQueue::wait(guard)\n+            WaitQueue::wait(guard, ||{})\n             // Another thread has passed the lock to us\n         } else {\n             // We are just now obtaining the lock\n@@ -83,7 +83,7 @@ impl ReentrantMutex {\n         match guard.lock_var().owner {\n             Some(tcs) if tcs != thread::current() => {\n                 // Another thread has the lock, wait\n-                WaitQueue::wait(guard);\n+                WaitQueue::wait(guard, ||{});\n                 // Another thread has passed the lock to us\n             },\n             _ => {"}, {"sha": "e2f94b1d928e10db38416f8c874fd88fb08c652d", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -31,7 +31,7 @@ impl RWLock {\n         if *wguard.lock_var() || !wguard.queue_empty() {\n             // Another thread has or is waiting for the write lock, wait\n             drop(wguard);\n-            WaitQueue::wait(rguard);\n+            WaitQueue::wait(rguard, ||{});\n             // Another thread has passed the lock to us\n         } else {\n             // No waiting writers, acquire the read lock\n@@ -62,7 +62,7 @@ impl RWLock {\n         if *wguard.lock_var() || rguard.lock_var().is_some() {\n             // Another thread has the lock, wait\n             drop(rguard);\n-            WaitQueue::wait(wguard);\n+            WaitQueue::wait(wguard, ||{});\n             // Another thread has passed the lock to us\n         } else {\n             // We are just now obtaining the lock\n@@ -97,6 +97,7 @@ impl RWLock {\n             if let Ok(mut wguard) = WaitQueue::notify_one(wguard) {\n                 // A writer was waiting, pass the lock\n                 *wguard.lock_var_mut() = true;\n+                wguard.drop_after(rguard);\n             } else {\n                 // No writers were waiting, the lock is released\n                 rtassert!(rguard.queue_empty());\n@@ -117,21 +118,26 @@ impl RWLock {\n         rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n         wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n-        if let Err(mut wguard) = WaitQueue::notify_one(wguard) {\n-            // No writers waiting, release the write lock\n-            *wguard.lock_var_mut() = false;\n-            if let Ok(mut rguard) = WaitQueue::notify_all(rguard) {\n-                // One or more readers were waiting, pass the lock to them\n-                if let NotifiedTcs::All { count } = rguard.notified_tcs() {\n-                    *rguard.lock_var_mut() = Some(count)\n+        match WaitQueue::notify_one(wguard) {\n+            Err(mut wguard) => {\n+                // No writers waiting, release the write lock\n+                *wguard.lock_var_mut() = false;\n+                if let Ok(mut rguard) = WaitQueue::notify_all(rguard) {\n+                    // One or more readers were waiting, pass the lock to them\n+                    if let NotifiedTcs::All { count } = rguard.notified_tcs() {\n+                        *rguard.lock_var_mut() = Some(count)\n+                    } else {\n+                        unreachable!() // called notify_all\n+                    }\n+                    rguard.drop_after(wguard);\n                 } else {\n-                    unreachable!() // called notify_all\n+                    // No readers waiting, the lock is released\n                 }\n-            } else {\n-                // No readers waiting, the lock is released\n+            },\n+            Ok(wguard) => {\n+                // There was a thread waiting for write, just pass the lock\n+                wguard.drop_after(rguard);\n             }\n-        } else {\n-            // There was a thread waiting for write, just pass the lock\n         }\n     }\n "}, {"sha": "3cb40e509b6b2973b93d0a8c1fa0a08df3b6f8a1", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -98,6 +98,12 @@ impl<'a, T> WaitGuard<'a, T> {\n     pub fn notified_tcs(&self) -> NotifiedTcs {\n         self.notified_tcs\n     }\n+\n+    /// Drop this `WaitGuard`, after dropping another `guard`.\n+    pub fn drop_after<U>(self, guard: U) {\n+        drop(guard);\n+        drop(self);\n+    }\n }\n \n impl<'a, T> Deref for WaitGuard<'a, T> {\n@@ -140,7 +146,7 @@ impl WaitQueue {\n     /// until a wakeup event.\n     ///\n     /// This function does not return until this thread has been awoken.\n-    pub fn wait<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>) {\n+    pub fn wait<T, F: FnOnce()>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>, before_wait: F) {\n         // very unsafe: check requirements of UnsafeList::push\n         unsafe {\n             let mut entry = UnsafeListEntry::new(SpinMutex::new(WaitEntry {\n@@ -149,6 +155,7 @@ impl WaitQueue {\n             }));\n             let entry = guard.queue.inner.push(&mut entry);\n             drop(guard);\n+            before_wait();\n             while !entry.lock().wake {\n                 // don't panic, this would invalidate `entry` during unwinding\n                 let eventset = rtunwrap!(Ok, usercalls::wait(EV_UNPARK, WAIT_INDEFINITE));\n@@ -545,7 +552,7 @@ mod tests {\n             assert!(WaitQueue::notify_one(wq2.lock()).is_ok());\n         });\n \n-        WaitQueue::wait(locked);\n+        WaitQueue::wait(locked, ||{});\n \n         t1.join().unwrap();\n     }"}, {"sha": "d59085cd44a6f4e8fe17d4d6711655a45e08b4d5", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -221,7 +221,6 @@ impl Instant {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(checked_duration_since)]\n     /// use std::time::{Duration, Instant};\n     /// use std::thread::sleep;\n     ///\n@@ -231,7 +230,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.checked_duration_since(now));\n     /// println!(\"{:?}\", now.checked_duration_since(new_now)); // None\n     /// ```\n-    #[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\n+    #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {\n         self.0.checked_sub_instant(&earlier.0)\n     }\n@@ -242,7 +241,6 @@ impl Instant {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(checked_duration_since)]\n     /// use std::time::{Duration, Instant};\n     /// use std::thread::sleep;\n     ///\n@@ -252,7 +250,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.saturating_duration_since(now));\n     /// println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n     /// ```\n-    #[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\n+    #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {\n         self.checked_duration_since(earlier).unwrap_or(Duration::new(0, 0))\n     }"}, {"sha": "5de39c8d14d17d2af304947be1489049c0914f49", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -6,7 +6,7 @@ use crate::ext::base::{ExtCtxt, MacEager, MacResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::symbol::kw;\n-use crate::tokenstream::{TokenTree};\n+use crate::tokenstream::{TokenTree, TokenStream};\n \n use smallvec::smallvec;\n use syntax_pos::Span;\n@@ -27,12 +27,11 @@ pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n \n pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                    span: Span,\n-                                   token_tree: &[TokenTree])\n+                                   tts: TokenStream)\n                                    -> Box<dyn MacResult+'cx> {\n-    let code = match token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => code,\n+    assert_eq!(tts.len(), 1);\n+    let code = match tts.into_trees().next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n         _ => unreachable!()\n     };\n \n@@ -62,20 +61,21 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                        span: Span,\n-                                       token_tree: &[TokenTree])\n+                                       tts: TokenStream)\n                                        -> Box<dyn MacResult+'cx> {\n-    let (code, description) = match  token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => {\n-            (*code, None)\n-        },\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. }),\n-            TokenTree::Token(Token { kind: token::Comma, .. }),\n-            TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..})\n-        ] => {\n-            (*code, Some(*symbol))\n+    assert!(tts.len() == 1 || tts.len() == 3);\n+    let mut cursor = tts.into_trees();\n+    let code = match cursor.next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n+        _ => unreachable!()\n+    };\n+    let description = match  (cursor.next(), cursor.next()) {\n+        (None, None) => None,\n+        (\n+            Some(TokenTree::Token(Token { kind: token::Comma, .. })),\n+            Some(TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..}))\n+        ) => {\n+            Some(symbol)\n         },\n         _ => unreachable!()\n     };\n@@ -121,12 +121,12 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           span: Span,\n-                                          token_tree: &[TokenTree])\n+                                          tts: TokenStream)\n                                           -> Box<dyn MacResult+'cx> {\n-    assert_eq!(token_tree.len(), 3);\n-    let ident = match &token_tree[2] {\n+    assert_eq!(tts.len(), 3);\n+    let ident = match tts.into_trees().nth(2) {\n         // DIAGNOSTICS ident.\n-        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }))\n         => Ident::new(name, span),\n         _ => unreachable!()\n     };"}, {"sha": "109ba041016c6c4eecb1dfe2a5694c8210d4ced3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -10,7 +10,7 @@ use crate::parse::token;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Ident, Symbol};\n use crate::{ThinVec, MACRO_ARGUMENTS};\n-use crate::tokenstream::{self, TokenStream, TokenTree};\n+use crate::tokenstream::{self, TokenStream};\n use crate::visit::Visitor;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -235,18 +235,18 @@ pub trait TTMacroExpander {\n }\n \n pub type MacroExpanderFn =\n-    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n                 -> Box<dyn MacResult+'cx>;\n \n impl<F> TTMacroExpander for F\n-    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n     -> Box<dyn MacResult+'cx>\n {\n     fn expand<'cx>(\n         &self,\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n-        input: TokenStream,\n+        mut input: TokenStream,\n     ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n@@ -268,10 +268,8 @@ impl<F> TTMacroExpander for F\n                 mut_visit::noop_visit_mac(mac, self)\n             }\n         }\n-\n-        let input: Vec<_> =\n-            input.trees().map(|mut tt| { AvoidInterpolatedIdents.visit_tt(&mut tt); tt }).collect();\n-        (*self)(ecx, span, &input)\n+        AvoidInterpolatedIdents.visit_tts(&mut input);\n+        (*self)(ecx, span, input)\n     }\n }\n \n@@ -677,7 +675,7 @@ impl SyntaxExtension {\n     }\n \n     pub fn dummy_bang(edition: Edition) -> SyntaxExtension {\n-        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: &[TokenTree])\n+        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: TokenStream)\n                          -> Box<dyn MacResult + 'cx> {\n             DummyResult::any(span)\n         }\n@@ -811,9 +809,8 @@ impl<'a> ExtCtxt<'a> {\n     pub fn monotonic_expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n         expand::MacroExpander::new(self, true)\n     }\n-\n-    pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree]) -> parser::Parser<'a> {\n-        parse::stream_to_parser(self.parse_sess, tts.iter().cloned().collect(), MACRO_ARGUMENTS)\n+    pub fn new_parser_from_tts(&self, stream: TokenStream) -> parser::Parser<'a> {\n+        parse::stream_to_parser(self.parse_sess, stream, MACRO_ARGUMENTS)\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n@@ -1019,7 +1016,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt<'_>, expr: P<ast::Expr>, err_msg: &str)\n /// done as rarely as possible).\n pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n                       sp: Span,\n-                      tts: &[tokenstream::TokenTree],\n+                      tts: TokenStream,\n                       name: &str) {\n     if !tts.is_empty() {\n         cx.span_err(sp, &format!(\"{} takes no arguments\", name));\n@@ -1030,7 +1027,7 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n /// expect exactly one string literal, or emit an error and return `None`.\n pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n                                sp: Span,\n-                               tts: &[tokenstream::TokenTree],\n+                               tts: TokenStream,\n                                name: &str)\n                                -> Option<String> {\n     let mut p = cx.new_parser_from_tts(tts);\n@@ -1053,7 +1050,7 @@ pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n /// parsing error, emit a non-fatal error and return `None`.\n pub fn get_exprs_from_tts(cx: &mut ExtCtxt<'_>,\n                           sp: Span,\n-                          tts: &[tokenstream::TokenTree]) -> Option<Vec<P<ast::Expr>>> {\n+                          tts: TokenStream) -> Option<Vec<P<ast::Expr>>> {\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {"}, {"sha": "4fd0c367288bfa86a35fac6d240b38fce3188177", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -701,7 +701,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         path: &Path,\n         span: Span,\n     ) -> AstFragment {\n-        let mut parser = self.cx.new_parser_from_tts(&toks.into_trees().collect::<Vec<_>>());\n+        let mut parser = self.cx.new_parser_from_tts(toks);\n         match parser.parse_ast_fragment(kind, false) {\n             Ok(fragment) => {\n                 parser.ensure_complete_parse(path, kind.name(), span);"}, {"sha": "544ec789d80a9d62d7ed9a74465adfb4c67a3008", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -322,8 +322,7 @@ impl Ident {\n     fn is_valid(string: &str) -> bool {\n         let mut chars = string.chars();\n         if let Some(start) = chars.next() {\n-            (start == '_' || start.is_xid_start())\n-                && chars.all(|cont| cont == '_' || cont.is_xid_continue())\n+            rustc_lexer::is_id_start(start) && chars.all(rustc_lexer::is_id_continue)\n         } else {\n             false\n         }"}, {"sha": "e502a08f4b253a879fa46a583b424fb2f3e716ef", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -889,6 +889,36 @@ impl<'a> Parser<'a> {\n                     hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n+                if self.token.is_path_start() {\n+                    let path = self.parse_path(PathStyle::Expr)?;\n+\n+                    // `!`, as an operator, is prefix, so we know this isn't that\n+                    if self.eat(&token::Not) {\n+                        // MACRO INVOCATION expression\n+                        let (delim, tts) = self.expect_delimited_token_tree()?;\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Mac(Mac {\n+                            path,\n+                            tts,\n+                            delim,\n+                            span: lo.to(hi),\n+                            prior_type_ascription: self.last_type_ascription,\n+                        });\n+                    } else if self.check(&token::OpenDelim(token::Brace)) {\n+                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+                            return expr;\n+                        } else {\n+                            hi = path.span;\n+                            ex = ExprKind::Path(None, path);\n+                        }\n+                    } else {\n+                        hi = path.span;\n+                        ex = ExprKind::Path(None, path);\n+                    }\n+\n+                    let expr = self.mk_expr(lo.to(hi), ex, attrs);\n+                    return self.maybe_recover_from_bad_qpath(expr, true);\n+                }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_lambda_expr(attrs);\n                 }\n@@ -1007,32 +1037,6 @@ impl<'a> Parser<'a> {\n                     let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n-                } else if self.token.is_path_start() {\n-                    let path = self.parse_path(PathStyle::Expr)?;\n-\n-                    // `!`, as an operator, is prefix, so we know this isn't that\n-                    if self.eat(&token::Not) {\n-                        // MACRO INVOCATION expression\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Mac(Mac {\n-                            path,\n-                            tts,\n-                            delim,\n-                            span: lo.to(hi),\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                    } else if self.check(&token::OpenDelim(token::Brace)) {\n-                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n-                            return expr;\n-                        } else {\n-                            hi = path.span;\n-                            ex = ExprKind::Path(None, path);\n-                        }\n-                    } else {\n-                        hi = path.span;\n-                        ex = ExprKind::Path(None, path);\n-                    }\n                 } else {\n                     if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                         // Don't complain about bare semicolons after unclosed braces"}, {"sha": "37305055e62a3199a0a119bd9f18f5524a8c8746", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -356,11 +356,7 @@ pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n     to_string(|s| s.print_tt(tt, false))\n }\n \n-pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n-    tokens_to_string(tts.iter().cloned().collect())\n-}\n-\n-pub fn tokens_to_string(tokens: TokenStream) -> String {\n+pub fn tts_to_string(tokens: TokenStream) -> String {\n     to_string(|s| s.print_tts(tokens, false))\n }\n "}, {"sha": "9b90b31f2d2a2e37542e39ec35af04ef3354c996", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -63,7 +63,7 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n             (None, None) => return true,\n             (None, _) => return false,\n             (Some(&a), None) => {\n-                if is_pattern_whitespace(a) {\n+                if rustc_lexer::is_whitespace(a) {\n                     break // trailing whitespace check is out of loop for borrowck\n                 } else {\n                     return false\n@@ -72,11 +72,11 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n             (Some(&a), Some(&b)) => (a, b)\n         };\n \n-        if is_pattern_whitespace(a) && is_pattern_whitespace(b) {\n+        if rustc_lexer::is_whitespace(a) && rustc_lexer::is_whitespace(b) {\n             // skip whitespace for a and b\n             scan_for_non_ws_or_end(&mut a_iter);\n             scan_for_non_ws_or_end(&mut b_iter);\n-        } else if is_pattern_whitespace(a) {\n+        } else if rustc_lexer::is_whitespace(a) {\n             // skip whitespace for a\n             scan_for_non_ws_or_end(&mut a_iter);\n         } else if a == b {\n@@ -88,20 +88,16 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n     }\n \n     // check if a has *only* trailing whitespace\n-    a_iter.all(is_pattern_whitespace)\n+    a_iter.all(rustc_lexer::is_whitespace)\n }\n \n /// Advances the given peekable `Iterator` until it reaches a non-whitespace character\n fn scan_for_non_ws_or_end<I: Iterator<Item = char>>(iter: &mut Peekable<I>) {\n-    while iter.peek().copied().map(|c| is_pattern_whitespace(c)) == Some(true) {\n+    while iter.peek().copied().map(|c| rustc_lexer::is_whitespace(c)) == Some(true) {\n         iter.next();\n     }\n }\n \n-fn is_pattern_whitespace(c: char) -> bool {\n-    rustc_lexer::character_properties::is_whitespace(c)\n-}\n-\n /// Identify a position in the text by the Nth occurrence of a string.\n struct Position {\n     string: &'static str,"}, {"sha": "480553586197e37edd97df27b8cbf96dc7e81922", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -506,7 +506,7 @@ impl Cursor {\n \n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&pprust::tokens_to_string(self.clone()))\n+        f.write_str(&pprust::tts_to_string(self.clone()))\n     }\n }\n "}, {"sha": "791ee94b4fa774ed1f683f57d969f1e85e6f1c21", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -18,3 +18,4 @@ rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "328b307361d9e077496e7d120d0fc4e89476b161", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -8,13 +8,12 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::parse;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::ast::AsmDialect;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::{self, TokenStream};\n use syntax::{span_err, struct_span_err};\n \n enum State {\n@@ -43,7 +42,7 @@ const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n@@ -71,20 +70,20 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<Option<ast::InlineAsm>, DiagnosticBuilder<'a>> {\n     // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n     // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n-    let first_colon = tts.iter()\n+    let first_colon = tts.trees()\n         .position(|tt| {\n-            match *tt {\n+            match tt {\n                 tokenstream::TokenTree::Token(Token { kind: token::Colon, .. }) |\n                 tokenstream::TokenTree::Token(Token { kind: token::ModSep, .. }) => true,\n                 _ => false,\n             }\n         })\n         .unwrap_or(tts.len());\n-    let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n+    let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());\n     let mut asm = kw::Invalid;\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n@@ -110,7 +109,8 @@ fn parse_inline_asm<'a>(\n                     ));\n                 }\n                 // Nested parser, stop before the first colon (see above).\n-                let mut p2 = cx.new_parser_from_tts(&tts[..first_colon]);\n+                let mut p2 =\n+                    cx.new_parser_from_tts(tts.trees().take(first_colon).collect());\n \n                 if p2.token == token::Eof {\n                     let mut err =\n@@ -129,12 +129,8 @@ fn parse_inline_asm<'a>(\n                 // This is most likely malformed.\n                 if p2.token != token::Eof {\n                     let mut extra_tts = p2.parse_all_token_trees()?;\n-                    extra_tts.extend(tts[first_colon..].iter().cloned());\n-                    p = parse::stream_to_parser(\n-                        cx.parse_sess,\n-                        extra_tts.into_iter().collect(),\n-                        Some(\"inline assembly\"),\n-                    );\n+                    extra_tts.extend(tts.trees().skip(first_colon));\n+                    p = cx.new_parser_from_tts(extra_tts.into_iter().collect());\n                 }\n \n                 asm = s;"}, {"sha": "001996e1db718a0f69c0bb2665d58eecc7022c60", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -13,7 +13,7 @@ use syntax_pos::{Span, DUMMY_SP};\n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n     let Assert { cond_expr, custom_message } = match parse_assert(cx, sp, tts) {\n         Ok(assert) => assert,\n@@ -59,9 +59,9 @@ struct Assert {\n fn parse_assert<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[TokenTree]\n+    stream: TokenStream\n ) -> Result<Assert, DiagnosticBuilder<'a>> {\n-    let mut parser = cx.new_parser_from_tts(tts);\n+    let mut parser = cx.new_parser_from_tts(stream);\n \n     if parser.token == token::Eof {\n         let mut err = cx.struct_span_err(sp, \"macro requires a boolean expression as an argument\");"}, {"sha": "0342e442df2e9135699389c8c2e7fd71bf9df659", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -7,14 +7,14 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::attr;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n pub fn expand_cfg(\n     cx: &mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let sp = cx.with_legacy_ctxt(sp);\n \n@@ -33,7 +33,7 @@ pub fn expand_cfg(\n fn parse_cfg<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<ast::MetaItem, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "24f3a66d4ae19efeb8347196a42943b0ab13f2c8", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -2,11 +2,11 @@\n \n use syntax::ext::base::{self, *};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::any(sp),"}, {"sha": "fc56dff65e4e2f1e196769496db869393679284c", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,14 +1,14 @@\n use syntax::ast;\n use syntax::ext::base::{self, DummyResult};\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::string::String;\n \n-pub fn expand_syntax_ext(\n+pub fn expand_concat(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: syntax_pos::Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,"}, {"sha": "6391b62b58dc931073406def3f21ffe916849b95", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -6,29 +6,29 @@ use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n-                              sp: Span,\n-                              tts: &[TokenTree])\n-                              -> Box<dyn base::MacResult + 'cx> {\n+pub fn expand_concat_idents<'cx>(cx: &'cx mut ExtCtxt<'_>,\n+                                 sp: Span,\n+                                 tts: TokenStream)\n+                                 -> Box<dyn base::MacResult + 'cx> {\n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n         return DummyResult::any(sp);\n     }\n \n     let mut res_str = String::new();\n-    for (i, e) in tts.iter().enumerate() {\n+    for (i, e) in tts.into_trees().enumerate() {\n         if i & 1 == 1 {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }) => {}\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! expecting comma.\");\n                     return DummyResult::any(sp);\n                 }\n             }\n         } else {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Ident(name, _), .. }) =>\n                     res_str.push_str(&name.as_str()),\n                 _ => {"}, {"sha": "179b7fe00a97ab31f8a1506a570bbc67905a30a9", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -7,13 +7,13 @@ use syntax::ast::{self, Ident, GenericArg};\n use syntax::ext::base::{self, *};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::env;\n \n pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n         None => return DummyResult::any(sp),\n@@ -45,7 +45,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {"}, {"sha": "ad275f421af494ab49f937f397cb36a07513b38a", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -11,7 +11,7 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -126,7 +126,7 @@ struct Context<'a, 'b> {\n fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream,\n ) -> Result<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<Symbol, usize>), DiagnosticBuilder<'a>> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n     let mut names = FxHashMap::<Symbol, usize>::default();\n@@ -794,7 +794,7 @@ impl<'a, 'b> Context<'a, 'b> {\n fn expand_format_args_impl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     mut sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n     nl: bool,\n ) -> Box<dyn base::MacResult + 'cx> {\n     sp = ecx.with_def_site_ctxt(sp);\n@@ -812,15 +812,15 @@ fn expand_format_args_impl<'cx>(\n pub fn expand_format_args<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, false)\n }\n \n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, true)\n }"}, {"sha": "6140f0df58af9be3c595ab3b8676378ebcd6d73d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -16,12 +16,12 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use smallvec::smallvec;\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n+                              tts: TokenStream) -> Box<dyn base::MacResult + 'cx> {\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {\n@@ -45,7 +45,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_global_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream\n ) -> Result<Option<ast::GlobalAsm>, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "26ef80b2b06df741f82aeaa432660e0a898c7215", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -67,8 +67,8 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n         compile_error: compile_error::expand_compile_error,\n-        concat_idents: concat_idents::expand_syntax_ext,\n-        concat: concat::expand_syntax_ext,\n+        concat_idents: concat_idents::expand_concat_idents,\n+        concat: concat::expand_concat,\n         env: env::expand_env,\n         file: source_util::expand_file,\n         format_args_nl: format::expand_format_args_nl,\n@@ -78,7 +78,7 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         include_str: source_util::expand_include_str,\n         include: source_util::expand_include,\n         line: source_util::expand_line,\n-        log_syntax: log_syntax::expand_syntax_ext,\n+        log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,\n         stringify: source_util::expand_stringify,"}, {"sha": "92130bfaf68e35f6ae359e26e0f4635af3ec2767", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,11 +1,11 @@\n use syntax::ext::base;\n use syntax::print;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos;\n \n-pub fn expand_syntax_ext<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n+pub fn expand_log_syntax<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n "}, {"sha": "9dc9d66b86f1d31f8f11e429f404d6da397b2b35", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -4,7 +4,7 @@ use syntax::parse::{self, token, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -16,7 +16,7 @@ use rustc_data_structures::sync::Lrc;\n // a given file into the current one.\n \n /// line!(): expands to the current line number\n-pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n@@ -27,7 +27,7 @@ pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n }\n \n /* column!(): expands to the current column number */\n-pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"column!\");\n \n@@ -40,7 +40,7 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n /// file!(): expands to the current filename */\n /// The source_file (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted.\n-pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n@@ -49,13 +49,13 @@ pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n     base::MacEager::expr(cx.expr_str(topmost, Symbol::intern(&loc.file.name.to_string())))\n }\n \n-pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                         -> Box<dyn base::MacResult+'static> {\n     let s = pprust::tts_to_string(tts);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&s)))\n }\n \n-pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     let mod_path = &cx.current_expansion.module.mod_path;\n@@ -67,7 +67,7 @@ pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree]\n /// include! : parse the given file as an expr\n /// This is generally a bad idea because it's going to behave\n /// unhygienically.\n-pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                            -> Box<dyn base::MacResult+'cx> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n@@ -105,7 +105,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n }\n \n // include_str! : read the given file, insert it as a literal string expr\n-pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                           -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n@@ -130,7 +130,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n     }\n }\n \n-pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                             -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,"}, {"sha": "d83c24046d9e5f08b0480df8c6d8cc8f1f0d75e3", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,20 +1,27 @@\n use syntax::ext::base::{self, ExtCtxt};\n use syntax::symbol::kw;\n use syntax_pos::Span;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n-                           tt: &[TokenTree])\n+                           tt: TokenStream)\n                            -> Box<dyn base::MacResult + 'static> {\n-    match tt {\n-        [TokenTree::Token(token)] if token.is_keyword(kw::True) => {\n-            cx.set_trace_macros(true);\n-        }\n-        [TokenTree::Token(token)] if token.is_keyword(kw::False) => {\n-            cx.set_trace_macros(false);\n-        }\n-        _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n+    let mut cursor = tt.into_trees();\n+    let mut err = false;\n+    let value = match &cursor.next() {\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::True) => true,\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::False) => false,\n+        _ => {\n+            err = true;\n+            false\n+        },\n+    };\n+    err |= cursor.next().is_some();\n+    if err {\n+        cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\")\n+    } else {\n+        cx.set_trace_macros(value);\n     }\n \n     base::DummyResult::any_valid(sp)"}, {"sha": "3a4dc1f5a096bcfb546e65637abe6b2617df2043", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -818,10 +818,14 @@ impl Ident {\n         with_interner(|interner| interner.is_gensymed(self.name))\n     }\n \n+    /// Convert the name to a `LocalInternedString`. This is a slowish\n+    /// operation because it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n \n+    /// Convert the name to an `InternedString`. This is a slowish operation\n+    /// because it requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         self.name.as_interned_str()\n     }\n@@ -916,6 +920,25 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n+    /// Access the symbol's chars. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self))\n+        })\n+    }\n+\n+    /// Access two symbols' chars. This is a slowish operation because it\n+    /// requires locking the symbol interner, but it is faster than calling\n+    /// `with()` twice.\n+    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self), interner.get(other))\n+        })\n+    }\n+\n+    /// Convert to a `LocalInternedString`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n@@ -924,6 +947,8 @@ impl Symbol {\n         })\n     }\n \n+    /// Convert to an `InternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         with_interner(|interner| InternedString {\n             symbol: interner.interned(self)\n@@ -1152,39 +1177,11 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }\n \n-impl LocalInternedString {\n-    /// Maps a string to its interned representation.\n-    pub fn intern(string: &str) -> Self {\n-        let string = with_interner(|interner| {\n-            let symbol = interner.intern(string);\n-            interner.strings[symbol.0.as_usize()]\n-        });\n-        LocalInternedString {\n-            string: unsafe { std::mem::transmute::<&str, &str>(string) }\n-        }\n-    }\n-\n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString {\n-            symbol: Symbol::intern(self.string)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn get(&self) -> &str {\n-        // This returns a valid string since we ensure that `self` outlives the interner\n-        // by creating the interner on a thread which outlives threads which can access it.\n-        // This type cannot move to a thread which outlives the interner since it does\n-        // not implement Send.\n-        self.string\n-    }\n-}\n-\n impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n@@ -1246,18 +1243,6 @@ impl fmt::Display for LocalInternedString {\n     }\n }\n \n-impl Decodable for LocalInternedString {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n-        Ok(LocalInternedString::intern(&d.read_str()?))\n-    }\n-}\n-\n-impl Encodable for LocalInternedString {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self.string)\n-    }\n-}\n-\n /// An alternative to `Symbol` that is focused on string contents. It has two\n /// main differences to `Symbol`.\n ///\n@@ -1285,28 +1270,19 @@ impl InternedString {\n     }\n \n     pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        let str = with_interner(|interner| {\n-            interner.get(self.symbol) as *const str\n-        });\n-        // This is safe because the interner keeps string alive until it is dropped.\n-        // We can access it because we know the interner is still alive since we use a\n-        // scoped thread local to access it, and it was alive at the beginning of this scope\n-        unsafe { f(&*str) }\n+        self.symbol.with(f)\n     }\n \n     fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        let (self_str, other_str) = with_interner(|interner| {\n-            (interner.get(self.symbol) as *const str,\n-             interner.get(other.symbol) as *const str)\n-        });\n-        // This is safe for the same reason that `with` is safe.\n-        unsafe { f(&*self_str, &*other_str) }\n+        self.symbol.with2(other.symbol, f)\n     }\n \n     pub fn as_symbol(self) -> Symbol {\n         self.symbol\n     }\n \n+    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.symbol.as_str()\n     }"}, {"sha": "5c4a01ee3a74a5e18c59c10b6a318e73da165447", "filename": "src/test/rustdoc/auxiliary/through-proc-macro-aux.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,20 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+#![crate_name=\"some_macros\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn first(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    item // This doesn't erase the spans.\n+}\n+\n+#[proc_macro_attribute]\n+pub fn second(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    // Make a new `TokenStream` to erase the spans:\n+    let mut out: TokenStream = TokenStream::new();\n+    out.extend(item);\n+    out\n+}"}, {"sha": "348c9eea2dcbf89ca1627a3f6e439f90aed5f8c4", "filename": "src/test/rustdoc/through-proc-macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:through-proc-macro-aux.rs\n+// build-aux-docs\n+#![warn(intra_doc_link_resolution_failure)]\n+extern crate some_macros;\n+\n+#[some_macros::second]\n+pub enum Boom {\n+    /// [Oooops]\n+    Bam,\n+}\n+\n+fn main() {}"}, {"sha": "2b57e9289b5255324b90632f9953d8dc7a11f471", "filename": "src/test/ui-fulldeps/auxiliary/roman-numerals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -15,12 +15,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -36,7 +36,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}, {"sha": "a5d7fc5b7024685e0d7d9b677bb7a6853f3f8934", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL |     const N: usize;\n+   |           - the trait cannot contain associated consts like `N`\n+...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `N`\n \n error: aborting due to previous error\n "}, {"sha": "bb2a61f03ce1f46e54d33741741df75762cda59f", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden when using `async` and `await`.\n+\n+async fn rec_1() { //~ ERROR recursion in an `async fn`\n+    rec_2().await;\n+}\n+\n+async fn rec_2() { //~ ERROR recursion in an `async fn`\n+    rec_1().await;\n+}\n+\n+fn main() {}"}, {"sha": "9249308936e5452b4503c2f4ccaf14bde509958b", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,19 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:5:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "9ee014021804e168da5543c7f0294c978ea19af9", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -2,9 +2,9 @@ error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ an `async fn` cannot invoke itself directly\n+   |                                        ^^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed future.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "ecbcc2a4b496f882e1414066a7e75dff2884adab", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -5,6 +5,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n+\n #![deny(const_err)]\n \n fn black_box<T>(_: T) {\n@@ -21,7 +22,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR index out of bounds\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "1d84d44dc27b3c834400ad29840aae4a0e9d54d3", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,35 +1,35 @@\n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:15:13\n+  --> $DIR/const-err2.rs:16:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n note: lint level defined here\n-  --> $DIR/const-err2.rs:8:9\n+  --> $DIR/const-err2.rs:9:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:17:13\n+  --> $DIR/const-err2.rs:18:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:19:13\n+  --> $DIR/const-err2.rs:20:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:21:13\n+  --> $DIR/const-err2.rs:22:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:23:14\n+  --> $DIR/const-err2.rs:24:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^"}, {"sha": "a9cf04cda7a5aed0be90fdfdd085e39b30b7d1f6", "filename": "src/test/ui/consts/const-err3.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,30 @@\n+// needed because negating int::MIN will behave differently between\n+// optimized compilation and unoptimized compilation and thus would\n+// lead to different lints being emitted\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![feature(rustc_attrs)]\n+#![allow(exceeding_bitshifts)]\n+\n+#![deny(const_err)]\n+\n+fn black_box<T>(_: T) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let a = -std::i8::MIN;\n+    //~^ ERROR const_err\n+    let b = 200u8 + 200u8 + 200u8;\n+    //~^ ERROR const_err\n+    let c = 200u8 * 4;\n+    //~^ ERROR const_err\n+    let d = 42u8 - (42u8 + 1);\n+    //~^ ERROR const_err\n+    let _e = [5u8][1];\n+    //~^ ERROR const_err\n+    black_box(a);\n+    black_box(b);\n+    black_box(c);\n+    black_box(d);\n+}"}, {"sha": "0602707be70408458efe8ba4b1f7f4882e7cab05", "filename": "src/test/ui/consts/const-err3.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,38 @@\n+error: attempt to negate with overflow\n+  --> $DIR/const-err3.rs:16:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/const-err3.rs:9:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to add with overflow\n+  --> $DIR/const-err3.rs:18:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^\n+\n+error: attempt to multiply with overflow\n+  --> $DIR/const-err3.rs:20:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/const-err3.rs:22:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err3.rs:24:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "45941398f4b66bfd9c7f5b489ccec99140faa946", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~^ ERROR const_err\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]"}, {"sha": "7adb394144bdd93bc5eea640da8fdd8c3d0a3178", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+fn main() {\n+    println!(\"{}\", 0u32 - 1);\n+    //~^ ERROR attempt to subtract with overflow\n+    let _x = 0u32 - 1;\n+    //~^ ERROR attempt to subtract with overflow\n+    println!(\"{}\", 1/(1-1));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(1-1);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+    println!(\"{}\", 1/(false as u32));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(false as u32);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+}"}, {"sha": "2819e6e8fdbe0dd7b351e2e4761473c54ac95f44", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,68 @@\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:6:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/promoted_errors2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:8:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "38911c3dcf69298c4dc2c21a2018865d4a0a3e6d", "filename": "src/test/ui/consts/issue-64059-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -C overflow-checks=on -O\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "c4c895fef66cff0695daeeceb28dcd49f6ef2cb3", "filename": "src/test/ui/consts/issue-64059.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,5 @@\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "5b384045a486abce4305ac22682809efd07ead89", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -61,8 +61,9 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n LL | impl dyn X {\n    |      ^^^^^ the trait `X` cannot be made into an object\n-   |\n-   = note: method `xxx` has no receiver\n+...\n+LL |     fn xxx() { ### }\n+   |        --- associated function `xxx` has no `self` parameter\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19439651394234071986e9fd56e3f16f9a4b1a12", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,14 +1,13 @@\n // compile-flags: -Z teach\n \n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "80f3d4441bd9faf6acfd0bc1350aa7b79a8cedc4", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033-teach.rs:13:9\n+  --> $DIR/E0033-teach.rs:12:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "e5f0530f45ff86ae0a5550512d394184db90fe58", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,12 +1,11 @@\n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "c2843796cc851b82c578555ab57ccfbf1ce9dc66", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:11:9\n+  --> $DIR/E0033.rs:10:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "5c4d6d53c4626bc01c8d3685372c6696a77eb8ee", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n+LL |     fn foo(&self) -> Self;\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "9ab8e13893bc77b5b63bfb9b575b7dd4fd843faa", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -6,11 +6,11 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch"}, {"sha": "4bf2d573d4f967580eb8aa07333eb077e963b8ff", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>\n@@ -17,7 +17,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>"}, {"sha": "cfd9c0ec5b45bab47c0813922f7ec11902452e3a", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,25 @@\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden. Even when there's an opaque type in another crate\n+// hiding this.\n+\n+fn id<T>(t: T) -> impl Sized { t }\n+\n+fn recursive_id() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id2())\n+}\n+\n+fn recursive_id2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id())\n+}\n+\n+fn wrap<T>(t: T) -> impl Sized { (t,) }\n+\n+fn recursive_wrap() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap2())\n+}\n+\n+fn recursive_wrap2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap())\n+}\n+\n+fn main() {}"}, {"sha": "7572c6c1bf0570f0169eb1f86350d488bb4d9d8d", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,35 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:7:22\n+   |\n+LL | fn recursive_id() -> impl Sized {\n+   |                      ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:11:23\n+   |\n+LL | fn recursive_id2() -> impl Sized {\n+   |                       ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:17:24\n+   |\n+LL | fn recursive_wrap() -> impl Sized {\n+   |                        ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:21:25\n+   |\n+LL | fn recursive_wrap2() -> impl Sized {\n+   |                         ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "b47568400c3b702b5fd381647a59d2ee8bfd32f6", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -4,11 +4,11 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched method receiver\n+    //~^ mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch\n-    //~| mismatched method receiver\n+    //~| mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch"}, {"sha": "b8a0a0676319a292aa5ac9888fc9f3b7336ca303", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {\n@@ -23,7 +23,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl <'a> Foo<'a>{\n    |       ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {"}, {"sha": "44279cc867b46e268a4a5e58f76bf937f0990fb7", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -6,8 +6,8 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n-//~^ ERROR mismatched method receiver\n-//~| ERROR mismatched method receiver\n+//~^ ERROR mismatched `self` parameter type\n+//~| ERROR mismatched `self` parameter type\n         println!(\"{:?}\", self);\n     }\n }"}, {"sha": "585bc9c14883bfb867afe9f9e22eed6a44ab15d3", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n@@ -21,7 +21,7 @@ note: ...does not necessarily outlive the lifetime '_ as defined on the impl at\n LL |     &str,\n    |     ^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {"}, {"sha": "d5e7092801ecd9b3806bc9fa5360f7b39940b20e", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:1\n    |\n+LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+   |                    --- method `foo` has generic type parameters\n+...\n LL | fn foo(b: &dyn Bar) {\n    | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error: aborting due to previous error\n "}, {"sha": "92bfdf1f26e93828b4eb0796d05086b17dc7826d", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL |   fn qiz();\n+   |      --- associated function `qiz` has no `self` parameter\n+...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n-   |\n-   = note: method `qiz` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "5415a45f7d621c41812f53ed39eb7bd0ed9fae59", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n-   = note: method `foo` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n \n error: aborting due to 2 previous errors"}, {"sha": "02475ea97e3d1fe81fd8a95851f873912b24bffc", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,8 +1,8 @@\n error: the trait `X` cannot be made into an object\n-  --> $DIR/issue-50781.rs:6:5\n+  --> $DIR/issue-50781.rs:6:8\n    |\n LL |     fn foo(&self) where Self: Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-50781.rs:1:9"}, {"sha": "b1dac26d65a15552b0171de954b53273a0e4f8f0", "filename": "src/test/ui/issues/issue-56806.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,7 +1,6 @@\n pub trait Trait {\n     fn dyn_instead_of_self(self: Box<dyn Trait>);\n-    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+    //~^ ERROR invalid `self` parameter type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "a4f9aadcfef3ee3f1bb5e1e74cd4668c93dc1a4d", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+error[E0307]: invalid `self` parameter type: std::boxed::Box<(dyn Trait + 'static)>\n   --> $DIR/issue-56806.rs:2:34\n    |\n LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "4637814b277a4fa253d5b1fd92298d488de731c6", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -O\n+\n #![deny(const_err)]\n \n use std::{isize, i8, i16, i32, i64};"}, {"sha": "7e5a22e651ee53b1991674ca656f70d5c6cf20b9", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,245 +1,245 @@\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-8460-const.rs:1:9\n+  --> $DIR/issue-8460-const.rs:3:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero"}, {"sha": "c3f53e3298b2b40eb4c68c2d2d2499a20aad6459", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,59 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+use std::{isize, i8, i16, i32, i64};\n+use std::thread;\n+\n+fn main() {\n+    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+}"}, {"sha": "b688ec136779487dbca7b86cd1bddbcde4c21e60", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,188 @@\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:9:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-8460-const2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:11:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:13:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:15:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:17:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 30 previous errors\n+"}, {"sha": "c442c39fe010ebf6c0402fb73c14b1837c4217ef", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,25 +1,75 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+#![feature(box_patterns)]\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete\n \n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unused_variables)]\n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n+\n+fn lint_on_top_level() {\n+    let (a) = 0; //~ ERROR unnecessary parentheses around pattern\n+    for (a) in 0..1 {} //~ ERROR unnecessary parentheses around pattern\n+    if let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    while let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    fn foo((a): u8) {} //~ ERROR unnecessary parentheses around pattern\n+    let _ = |(a): u8| 0; //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint in these cases (#64106).\n+fn or_patterns_no_lint() {\n+    match Box::new(0) {\n+        box (0 | 1) => {} // Should not lint as `box 0 | 1` binds as `(box 0) | 1`.\n+        _ => {}\n+    }\n+\n+    match 0 {\n+        x @ (0 | 1) => {} // Should not lint as `x @ 0 | 1` binds as `(x @ 0) | 1`.\n+        _ => {}\n+    }\n+\n+    if let &(0 | 1) = &0 {} // Should also not lint.\n+    if let &mut (0 | 1) = &mut 0 {} // Same.\n+\n+    fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+    //~^ ERROR identifier `a` is bound more than once\n+\n+    let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+    //~^ ERROR identifier `a` is bound more than once\n+}\n+\n+fn or_patterns_will_lint() {\n+    if let (0 | 1) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    if let ((0 | 1),) = (0,) {} //~ ERROR unnecessary parentheses around pattern\n+    if let [(0 | 1)] = [0] {} //~ ERROR unnecessary parentheses around pattern\n+    if let 0 | (1 | 2) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    struct TS(u8);\n+    if let TS((0 | 1)) = TS(0) {} //~ ERROR unnecessary parentheses around pattern\n+    struct NS { f: u8 }\n+    if let NS { f: (0 | 1) } = (NS { f: 0 }) {} //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint on `&(mut x)` because `&mut x` means something else (#55342).\n+fn deref_mut_binding_no_lint() {\n+    let &(mut x) = &0;\n+}\n \n fn main() {\n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1...2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1...2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1...2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1...2) => {} // Non ambiguous range pattern should not warn\n         e @ (3...4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n-        &(1...2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1...2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1...2) => {} // Ambiguous range pattern should not warn\n+        &(1...2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {\n@@ -28,19 +78,19 @@ fn main() {\n     }\n \n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1..=2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1..=2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1..=2) => {} // Non ambiguous range pattern should not warn\n         e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1..=2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1..=2) => {}   // Ambiguous range pattern should not warn\n-        &(1..=2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1..=2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1..=2) => {} // Ambiguous range pattern should not warn\n+        &(1..=2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {"}, {"sha": "a3e0fb938b3c60fef2f21a3526cd664d1b0abbc5", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 122, "deletions": 27, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,78 +1,173 @@\n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:10:9\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:35:25\n    |\n-LL |         (_) => {}\n+LL |     fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+   |                         ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:38:27\n+   |\n+LL |     let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+   |                           ^ used in a pattern more than once\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-54538-unused-parens-lint.rs:3:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+   |\n+LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:6:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:9:9\n    |\n-LL | #![warn(unused_parens)]\n+LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+   |\n+LL |     for (a) in 0..1 {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:14:12\n+   |\n+LL |     if let (a) = 0 {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:15\n+   |\n+LL |     while let (a) = 0 {}\n+   |               ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:16:12\n+   |\n+LL |     fn foo((a): u8) {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:14\n+   |\n+LL |     let _ = |(a): u8| 0;\n+   |              ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:43:12\n+   |\n+LL |     if let (0 | 1) = 0 {}\n+   |            ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:44:13\n+   |\n+LL |     if let ((0 | 1),) = (0,) {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:45:13\n+   |\n+LL |     if let [(0 | 1)] = [0] {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:46:16\n+   |\n+LL |     if let 0 | (1 | 2) = 0 {}\n+   |                ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:48:15\n+   |\n+LL |     if let TS((0 | 1)) = TS(0) {}\n+   |               ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:20\n+   |\n+LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n+   |                    ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:60:9\n+   |\n+LL |         (_) => {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:61:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:62:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:63:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:20:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:70:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:31:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:81:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:32:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:33:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:83:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:34:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:84:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:40:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:41:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n+error: aborting due to 26 previous errors\n+\n+For more information about this error, try `rustc --explain E0416`."}, {"sha": "7d5aa00356e0b5b767cedf8af3c89e84c12d41f4", "filename": "src/test/ui/object-safety/object-safety-associated-consts.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:9:1\n    |\n+LL |     const X: usize;\n+   |           - the trait cannot contain associated consts like `X`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `X`\n \n error: aborting due to previous error\n "}, {"sha": "b25e0052e4163f98c46a95c955af2671a7b68cad", "filename": "src/test/ui/object-safety/object-safety-generics.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:14:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:19:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "971e79cb0210f240b6536b0f4cdaadc7dcb2fd5a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:17:1\n    |\n+LL |     fn bar(&self, x: &Self);\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n+LL |     fn bar(&self) -> Self;\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0de783f60ea4743fd9c5a61ecc14c1a5bcdf502a", "filename": "src/test/ui/object-safety/object-safety-no-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:8:1\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL | fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to previous error\n "}, {"sha": "58109be447e0727d3e86b7360400f4355cd94a4f", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -17,10 +17,10 @@ fn bar() -> impl std::fmt::Display {\n \n fn baz() -> impl std::fmt::Display {\n     if false {\n-    //~^ ERROR mismatched types\n         return 0i32;\n     } else {\n         1u32\n+        //~^ ERROR mismatched types\n     }\n }\n \n@@ -33,4 +33,33 @@ fn qux() -> impl std::fmt::Display {\n     }\n }\n \n+fn bat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => return 0i32,\n+        _ => 1u32,\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn can() -> impl std::fmt::Display {\n+    match 13 {\n+    //~^ ERROR mismatched types\n+        0 => return 0i32,\n+        1 => 1u32,\n+        _ => 2u32,\n+    }\n+}\n+\n+fn cat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => {\n+            return 0i32;\n+        }\n+        _ => {\n+            1u32\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "314ff84ae3c4696dc1c79ec4296836f4edc551ed", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -29,18 +29,16 @@ LL |         return 1u32;\n               found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n    |\n-LL |   fn baz() -> impl std::fmt::Display {\n-   |               ---------------------- expected because this return type...\n-LL | /     if false {\n-LL | |\n-LL | |         return 0i32;\n-   | |                ---- ...is found to be `i32` here\n-LL | |     } else {\n-LL | |         1u32\n-LL | |     }\n-   | |_____^ expected i32, found u32\n+LL | fn baz() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n+LL |         return 0i32;\n+   |                ---- ...is found to be `i32` here\n+LL |     } else {\n+LL |         1u32\n+   |         ^^^^ expected i32, found u32\n    |\n    = note: expected type `i32`\n               found type `u32`\n@@ -61,6 +59,52 @@ LL | |     }\n    = note: expected type `i32`\n               found type `u32`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14\n+   |\n+LL | fn bat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     match 13 {\n+LL |         0 => return 0i32,\n+   |                     ---- ...is found to be `i32` here\n+LL |         _ => 1u32,\n+   |              ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n+   |\n+LL |   fn can() -> impl std::fmt::Display {\n+   |               ---------------------- expected because this return type...\n+LL | /     match 13 {\n+LL | |\n+LL | |         0 => return 0i32,\n+   | |                     ---- ...is found to be `i32` here\n+LL | |         1 => 1u32,\n+LL | |         _ => 2u32,\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n+   |\n+LL | fn cat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+...\n+LL |             return 0i32;\n+   |                    ---- ...is found to be `i32` here\n+...\n+LL |             1u32\n+   |             ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "63ac11dc8ae01b463a4269b14dbbdd3ca092fd8e", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: method `bar` has no receiver\n+   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "04d924a9aed20732e3fc37f32515a30f2c866b33", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n+// check-run-results\n \n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n@@ -18,7 +16,7 @@ struct Point<T> {\n #[derive(Debug, PartialEq)]\n struct NoCopy(usize);\n \n-fn test() {\n+fn main() {\n     let a: Unit = dbg!(Unit);\n     let _: Unit = dbg!(a);\n     // We can move `a` because it's Copy.\n@@ -67,81 +65,3 @@ fn test() {\n     assert_eq!((1u8, 2u32, \"Yeah\"), dbg!(1u8, 2u32,\n                                          \"Yeah\",));\n }\n-\n-fn validate_stderr(stderr: Vec<String>) {\n-    assert_eq!(stderr, &[\n-        \":22] Unit = Unit\",\n-\n-        \":23] a = Unit\",\n-\n-        \":29] Point{x: 42, y: 24,} = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":30] b = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":38]\",\n-\n-        \":42] &a = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-\n-        \":42] dbg!(& a) = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-        \":47] f(&42) = 42\",\n-\n-        \"before\",\n-        \":52] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n-\n-        \":60] (\\\"Yeah\\\",) = (\",\n-        \"    \\\"Yeah\\\",\",\n-        \")\",\n-\n-        \":63] 1 = 1\",\n-        \":63] 2 = 2\",\n-\n-        \":67] 1u8 = 1\",\n-        \":67] 2u32 = 2\",\n-        \":67] \\\"Yeah\\\" = \\\"Yeah\\\"\",\n-    ]);\n-}\n-\n-fn main() {\n-    // The following is a hack to deal with compiletest's inability\n-    // to check the output (to stdout) of run-pass tests.\n-    use std::env;\n-    use std::process::Command;\n-\n-    let mut args = env::args();\n-    let prog = args.next().unwrap();\n-    let child = args.next();\n-    if let Some(\"child\") = child.as_ref().map(|s| &**s) {\n-        // Only run the test if we've been spawned as 'child'\n-        test()\n-    } else {\n-        // This essentially spawns as 'child' to run the tests\n-        // and then it collects output of stderr and checks the output\n-        // against what we expect.\n-        let out = Command::new(&prog).arg(\"child\").output().unwrap();\n-        assert!(out.status.success());\n-        assert!(out.stdout.is_empty());\n-\n-        let stderr = String::from_utf8(out.stderr).unwrap();\n-        let stderr = stderr.lines().map(|mut s| {\n-            if s.starts_with(\"[\") {\n-                // Strip `[` and file path:\n-                s = s.trim_start_matches(\"[\");\n-                assert!(s.starts_with(file!()));\n-                s = s.trim_start_matches(file!());\n-            }\n-            s.to_owned()\n-        }).collect();\n-\n-        validate_stderr(stderr);\n-    }\n-}"}, {"sha": "707b38cf37af0f3bd1796c4aa858ebdf0aaaeea4", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,28 @@\n+[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:27] Point{x: 42, y: 24,} = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:36]\n+[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+before\n+[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+    \"Yeah\",\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\""}, {"sha": "b62cf31205fd3748c424dabdc64ea11629af73bc", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/ident-mac.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fident-mac.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,11 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn id(_: TokenStream, input: TokenStream) -> TokenStream { input }"}, {"sha": "8defa26e48d8d20a15ef28d702762d4546c6d1c1", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,60 @@\n+// aux-build:ident-mac.rs\n+\n+#![feature(param_attrs)]\n+#![feature(c_variadic)]\n+\n+extern crate ident_mac;\n+use ident_mac::id;\n+\n+struct W(u8);\n+\n+extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+//~^ ERROR the attribute `id` is currently unknown to the compiler\n+//~| ERROR the attribute `id` is currently unknown to the compiler\n+\n+unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n+//~^ ERROR the attribute `id` is currently unknown to the compiler\n+\n+type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+\n+fn free(#[id] arg1: u8) {\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    let lam = |#[id] W(x), #[id] y| ();\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+impl W {\n+    fn inherent1(#[id] self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+trait A {\n+    fn trait1(#[id] self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait2(#[id] &self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~| ERROR the attribute `id` is currently unknown to the compiler\n+}\n+\n+fn main() {}"}, {"sha": "69b9a46b3d502a9e8efc0f9d81add32fce6de4db", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,228 @@\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:21\n+   |\n+LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+   |                     ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:38\n+   |\n+LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:15:38\n+   |\n+LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:28\n+   |\n+LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:38\n+   |\n+LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n+   |                                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:22:9\n+   |\n+LL | fn free(#[id] arg1: u8) {\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:16\n+   |\n+LL |     let lam = |#[id] W(x), #[id] y| ();\n+   |                ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:28\n+   |\n+LL |     let lam = |#[id] W(x), #[id] y| ();\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:18\n+   |\n+LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n+   |                  ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:30\n+   |\n+LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n+   |                              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:18\n+   |\n+LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+   |                  ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:31\n+   |\n+LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n+   |                               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:22\n+   |\n+LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+   |                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:42\n+   |\n+LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n+   |                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:22\n+   |\n+LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+   |                      ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:45\n+   |\n+LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n+   |                                             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:45:15\n+   |\n+LL |     fn trait1(#[id] self, #[id] arg1: u8);\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:45:27\n+   |\n+LL |     fn trait1(#[id] self, #[id] arg1: u8);\n+   |                           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:15\n+   |\n+LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:28\n+   |\n+LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n+   |                            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:19\n+   |\n+LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+   |                   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:39\n+   |\n+LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n+   |                                       ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:19\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:42\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:58\n+   |\n+LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n+   |                                                          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+\n+error: aborting due to 25 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e6eba377a9578c9178a282268ee3c866e92c556e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo`'s receiver cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo`'s receiver cannot be dispatched on\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors"}, {"sha": "7a0cfb679ed67f84c4c14919f3a8921f7b856550", "filename": "src/test/ui/span/issue-27522.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -3,7 +3,7 @@\n struct SomeType {}\n \n trait Foo {\n-    fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n+    fn handler(self: &SomeType); //~ ERROR invalid `self` parameter type\n }\n \n fn main() {}"}, {"sha": "8a254a9685543d6af60ca50aa544ba82d81c0ea0", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: &SomeType\n+error[E0307]: invalid `self` parameter type: &SomeType\n   --> $DIR/issue-27522.rs:6:22\n    |\n LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "450cbd4799fdc05b8ad5e8119f10ad1adb319f92", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -10,8 +10,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `impl std::future::Future` (opaque type)\n-              found type `impl std::future::Future` (opaque type)\n+   = note: expected type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+              found type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n    = help: if both `Future`s have the same `Output` type, consider `.await`ing on both of them\n "}, {"sha": "16ea7bdb0807d19bd48c85f85d4bfee1d8f97f60", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -110,12 +110,17 @@ LL |     C::A;\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n+LL |         const A: u8 = 0;\n+   |               - the trait cannot contain associated consts like `A`\n+...\n+LL |         const B: u8 = 0;\n+   |               - the trait cannot contain associated consts like `B`\n+...\n+LL |         const C: u8 = 0;\n+   |               - the trait cannot contain associated consts like `C`\n+...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `C`\n-   = note: the trait cannot contain associated consts like `B`\n-   = note: the trait cannot contain associated consts like `A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "3ac1e96b30c95121989a9d3fdd11a980864f3a6b", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,19 +1,22 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n-   |\n-   = note: method `foo` has no receiver\n \n error: aborting due to 2 previous errors\n "}, {"sha": "83c2c06527493782371e1dcc11977027411c49b8", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -13,20 +13,25 @@ LL |     10.blah::<i32, i32>();\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n-   |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its parameters or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n \n error: aborting due to 4 previous errors"}, {"sha": "b315fe9df8afd349073f6fed2855a5b635ebcab3", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -13,10 +13,11 @@ LL |     let y = x as dyn MyAdd<i32>;\n error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n+LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+   |                            --- method `add` references the `Self` type in its parameters or return type\n+...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n-   |\n-   = note: method `add` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdb8e197fbe498e1980562de3e00fc19f4d237bf", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -6,7 +6,7 @@ struct Foo {\n \n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         self.f + x\n     }\n }\n@@ -17,11 +17,11 @@ struct Bar<T> {\n \n impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n     fn bar(self: &Bar<usize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n }\n@@ -34,14 +34,14 @@ trait SomeTrait {\n \n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n-    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched method receiver\n-    //~^ ERROR mismatched method receiver\n+    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched `self` parameter type\n+    //~^ ERROR mismatched `self` parameter type\n     fn dummy3(self: &&Bar<T>) {}\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch"}, {"sha": "b2fe1b281fc999ee0ed8324d1b536abab6a2dc7f", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,31 +1,31 @@\n-error[E0307]: invalid method receiver type: isize\n+error[E0307]: invalid `self` parameter type: isize\n   --> $DIR/ufcs-explicit-self-bad.rs:8:18\n    |\n LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: Bar<isize>\n+error[E0307]: invalid `self` parameter type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n    |\n LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: &Bar<usize>\n+error[E0307]: invalid `self` parameter type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n    |\n LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -44,7 +44,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -63,7 +63,7 @@ note: ...does not necessarily outlive the anonymous lifetime #1 defined on the m\n LL |     fn dummy2(self: &Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -82,7 +82,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -103,4 +103,5 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0307, E0308.\n+For more information about an error, try `rustc --explain E0307`."}, {"sha": "92d741b6a26631a89a809df0bd32fb7032515db5", "filename": "src/test/ui/underscore-imports/auxiliary/duplicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Fduplicate.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/duplicate.rs"}, {"sha": "c335336bee8e3ab800aee18e01836512c023569c", "filename": "src/test/ui/underscore-imports/auxiliary/underscore-imports.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fauxiliary%2Funderscore-imports.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/underscore-imports.rs"}, {"sha": "4766d75c8f412209fae536288290fcad0509c7b0", "filename": "src/test/ui/underscore-imports/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/basic.rs"}, {"sha": "9ca60e8e0a95596f46e60d1ff0909137ce345c0e", "filename": "src/test/ui/underscore-imports/basic.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr"}, {"sha": "bacf9b2d5a96a326f61b4c780d005e3de27b7f7f", "filename": "src/test/ui/underscore-imports/cycle.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,18 @@\n+// Check that cyclic glob imports are allowed with underscore imports\n+\n+// check-pass\n+\n+mod x {\n+    pub use crate::y::*;\n+    pub use std::ops::Deref as _;\n+}\n+\n+mod y {\n+    pub use crate::x::*;\n+    pub use std::ops::Deref as _;\n+}\n+\n+pub fn main() {\n+    use x::*;\n+    (&0).deref();\n+}"}, {"sha": "3662a466ded146a9910636fdebfc21cfd8dcbec3", "filename": "src/test/ui/underscore-imports/duplicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fduplicate.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/duplicate.rs"}, {"sha": "1cccc67e9ab63d8251b80ddccc5ad08e8a11c768", "filename": "src/test/ui/underscore-imports/intercrate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fintercrate.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/intercrate.rs"}, {"sha": "325f2001b9ede58425a4da040d374e7dbfb86798", "filename": "src/test/ui/underscore-imports/shadow.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,23 @@\n+// Check that underscore imports don't cause glob imports to be unshadowed\n+\n+mod a {\n+    pub use std::ops::Deref as Shadow;\n+}\n+\n+mod b {\n+    pub use crate::a::*;\n+    macro_rules! m {\n+        ($i:ident) => { pub struct $i; }\n+    }\n+    m!(Shadow);\n+}\n+\n+mod c {\n+    use crate::b::Shadow as _; // Only imports the struct\n+\n+    fn f(x: &()) {\n+        x.deref(); //~ ERROR no method named `deref` found\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "92adca2c70490e598eadf664670aa7ec91726c76", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `deref` found for type `&()` in the current scope\n+  --> $DIR/shadow.rs:19:11\n+   |\n+LL |         x.deref();\n+   |           ^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use std::ops::Deref;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "d06a26a5f116664b5ce0094e594d5e50b4a5c4c0", "filename": "src/test/ui/underscore-imports/unused-2018.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.rs"}, {"sha": "861b3f1d4fd1e202f02aabf5cc3ce7e4034148e6", "filename": "src/test/ui/underscore-imports/unused-2018.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Funused-2018.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "previous_filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr"}, {"sha": "0d8441f87e7e776618a5d3979208478dbcb91f7e", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL |     fn foo(&self, _x: &Self);\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n+...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "fe0e5a48b75da2b405c8ce1ba2674e174ae11d5d", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1 +1 @@\n-Subproject commit 22f7dd0495cd72ce2082d318d5a9b4dccb9c5b8c\n+Subproject commit fe0e5a48b75da2b405c8ce1ba2674e174ae11d5d"}, {"sha": "aeadf1562c024d3c5421e61dc6b8d48c2d7902f5", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -1 +1 @@\n-Subproject commit 70e7d075df7b3e11e61fa99b30e1ede26cee6afd\n+Subproject commit aeadf1562c024d3c5421e61dc6b8d48c2d7902f5"}, {"sha": "edb9eb7d860e2da24a80125063b49056c29a3c3c", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -333,10 +333,12 @@ pub fn expected_output_path(\n     testpaths.file.with_extension(extension)\n }\n \n-pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED];\n+pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED, UI_RUN_STDERR, UI_RUN_STDOUT];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n pub const UI_FIXED: &str = \"fixed\";\n+pub const UI_RUN_STDERR: &str = \"run.stderr\";\n+pub const UI_RUN_STDOUT: &str = \"run.stdout\";\n \n /// Absolute path to the directory where all output for all tests in the given\n /// `relative_dir` group should reside. Example:"}, {"sha": "3ba8cffe2b559e7676bc20b3177f6995b4831a90", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -137,6 +137,11 @@ impl EarlyProps {\n                    config.parse_needs_sanitizer_support(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n+\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&\n@@ -326,6 +331,8 @@ pub struct TestProps {\n     pub force_host: bool,\n     // Check stdout for error-pattern output as well as stderr\n     pub check_stdout: bool,\n+    // Check stdout & stderr for output of run-pass test\n+    pub check_run_results: bool,\n     // For UI tests, allows compiler to generate arbitrary output to stdout\n     pub dont_check_compiler_stdout: bool,\n     // For UI tests, allows compiler to generate arbitrary output to stderr\n@@ -388,6 +395,7 @@ impl TestProps {\n             build_aux_docs: false,\n             force_host: false,\n             check_stdout: false,\n+            check_run_results: false,\n             dont_check_compiler_stdout: false,\n             dont_check_compiler_stderr: false,\n             no_prefer_dynamic: false,\n@@ -468,6 +476,10 @@ impl TestProps {\n                 self.check_stdout = config.parse_check_stdout(ln);\n             }\n \n+            if !self.check_run_results {\n+                self.check_run_results = config.parse_check_run_results(ln);\n+            }\n+\n             if !self.dont_check_compiler_stdout {\n                 self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n             }\n@@ -712,6 +724,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-stdout\")\n     }\n \n+    fn parse_check_run_results(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"check-run-results\")\n+    }\n+\n     fn parse_dont_check_compiler_stdout(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"dont-check-compiler-stdout\")\n     }"}, {"sha": "9a3d24facc2c817a5f40a3a67b12111dc605e1df", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 74, "deletions": 22, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -2,6 +2,7 @@\n \n use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n+use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb};\n@@ -288,6 +289,11 @@ enum ReadFrom {\n     Stdin(String),\n }\n \n+enum TestOutput {\n+    Compile,\n+    Run,\n+}\n+\n impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n@@ -2948,6 +2954,61 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn load_compare_outputs(&self, proc_res: &ProcRes,\n+        output_kind: TestOutput, explicit_format: bool) -> usize {\n+\n+        let (stderr_kind, stdout_kind) = match output_kind {\n+            TestOutput::Compile => (UI_STDERR, UI_STDOUT),\n+            TestOutput::Run => (UI_RUN_STDERR, UI_RUN_STDOUT)\n+        };\n+\n+        let expected_stderr = self.load_expected_output(stderr_kind);\n+        let expected_stdout = self.load_expected_output(stdout_kind);\n+\n+        let normalized_stdout = match output_kind {\n+            TestOutput::Run if self.config.remote_test_client.is_some() => {\n+                // When tests are run using the remote-test-client, the string\n+                // 'uploaded \"$TEST_BUILD_DIR/<test_executable>, waiting for result\"'\n+                // is printed to stdout by the client and then captured in the ProcRes,\n+                // so it needs to be removed when comparing the run-pass test execution output\n+                lazy_static! {\n+                    static ref REMOTE_TEST_RE: Regex = Regex::new(\n+                        \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-]+)+\\\", waiting for result\\n\"\n+                    ).unwrap();\n+                }\n+                REMOTE_TEST_RE.replace(\n+                    &self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout),\n+                    \"\"\n+                ).to_string()\n+            }\n+            _ => self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout)\n+        };\n+\n+        let stderr = if explicit_format {\n+            proc_res.stderr.clone()\n+        } else {\n+            json::extract_rendered(&proc_res.stderr)\n+        };\n+\n+        let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n+        let mut errors = 0;\n+        match output_kind {\n+            TestOutput::Compile => {\n+                if !self.props.dont_check_compiler_stdout {\n+                    errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n+                }\n+                if !self.props.dont_check_compiler_stderr {\n+                    errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+                }\n+            }\n+            TestOutput::Run => {\n+                errors += self.compare_output(stdout_kind, &normalized_stdout, &expected_stdout);\n+                errors += self.compare_output(stderr_kind, &normalized_stderr, &expected_stderr);\n+            }\n+        }\n+        errors\n+    }\n+\n     fn run_ui_test(&self) {\n         // if the user specified a format in the ui test\n         // print the output to the stderr file, otherwise extract\n@@ -2960,32 +3021,13 @@ impl<'test> TestCx<'test> {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n \n-        let expected_stderr = self.load_expected_output(UI_STDERR);\n-        let expected_stdout = self.load_expected_output(UI_STDOUT);\n         let expected_fixed = self.load_expected_output(UI_FIXED);\n \n-        let normalized_stdout =\n-            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n-\n-        let stderr = if explicit {\n-            proc_res.stderr.clone()\n-        } else {\n-            json::extract_rendered(&proc_res.stderr)\n-        };\n-\n-        let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n-\n-        let mut errors = 0;\n-        if !self.props.dont_check_compiler_stdout {\n-            errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n-        }\n-        if !self.props.dont_check_compiler_stderr {\n-            errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n-        }\n-\n         let modes_to_prune = vec![CompareMode::Nll];\n         self.prune_duplicate_outputs(&modes_to_prune);\n \n+        let mut errors = self.load_compare_outputs(&proc_res, TestOutput::Compile, explicit);\n+\n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n         } else if self.config.rustfix_coverage {\n@@ -3063,7 +3105,17 @@ impl<'test> TestCx<'test> {\n \n         if self.should_run_successfully() {\n             let proc_res = self.exec_compiled_test();\n-\n+            let run_output_errors = if self.props.check_run_results {\n+                self.load_compare_outputs(&proc_res, TestOutput::Run, explicit)\n+            } else {\n+                0\n+            };\n+            if run_output_errors > 0 {\n+                self.fatal_proc_rec(\n+                    &format!(\"{} errors occured comparing run output.\", run_output_errors),\n+                    &proc_res,\n+                );\n+            }\n             if !proc_res.status.success() {\n                 self.fatal_proc_rec(\"test run failed!\", &proc_res);\n             }"}, {"sha": "994523ac1abce2ccaaf51e7efb91d0bc39f7f852", "filename": "src/tools/tidy/src/features/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414d1047291348b5b8bf49e1d76fec978238d89f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Ftests.rs?ref=414d1047291348b5b8bf49e1d76fec978238d89f", "patch": "@@ -2,8 +2,8 @@ use super::*;\n \n #[test]\n fn test_find_attr_val() {\n-    let s = r#\"#[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\"#;\n-    assert_eq!(find_attr_val(s, \"feature\"), Some(\"checked_duration_since\"));\n+    let s = r#\"#[unstable(feature = \"tidy_test_never_used_anywhere_else\", issue = \"58402\")]\"#;\n+    assert_eq!(find_attr_val(s, \"feature\"), Some(\"tidy_test_never_used_anywhere_else\"));\n     assert_eq!(find_attr_val(s, \"issue\"), Some(\"58402\"));\n     assert_eq!(find_attr_val(s, \"since\"), None);\n }"}]}