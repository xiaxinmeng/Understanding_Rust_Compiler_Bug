{"sha": "b6d2868caa63aa7bc8d54812cff06972eb558171", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDI4NjhjYWE2M2FhN2JjOGQ1NDgxMmNmZjA2OTcyZWI1NTgxNzE=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2020-08-17T13:42:23Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2020-08-17T13:42:23Z"}, "message": "Switch to intra-doc links for std/src/env.rs", "tree": {"sha": "6a988c7406357702878d059a3808f92a55be5867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a988c7406357702878d059a3808f92a55be5867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d2868caa63aa7bc8d54812cff06972eb558171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d2868caa63aa7bc8d54812cff06972eb558171", "html_url": "https://github.com/rust-lang/rust/commit/b6d2868caa63aa7bc8d54812cff06972eb558171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d2868caa63aa7bc8d54812cff06972eb558171/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8", "html_url": "https://github.com/rust-lang/rust/commit/509cad7f2f8e6c8985b707cab4ab9e1cd78f63c8"}], "stats": {"total": 41, "additions": 14, "deletions": 27}, "files": [{"sha": "562fdfc689a863524b3615272c6e1ed56915a28c", "filename": "library/std/src/env.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b6d2868caa63aa7bc8d54812cff06972eb558171/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d2868caa63aa7bc8d54812cff06972eb558171/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=b6d2868caa63aa7bc8d54812cff06972eb558171", "patch": "@@ -7,9 +7,6 @@\n //! There are several functions and structs in this module that have a\n //! counterpart ending in `os`. Those ending in `os` will return an [`OsString`]\n //! and those without will return a [`String`].\n-//!\n-//! [`OsString`]: ../../std/ffi/struct.OsString.html\n-//! [`String`]: ../string/struct.String.html\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n@@ -31,8 +28,7 @@ use crate::sys::os as os_imp;\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory.\n ///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n-/// [`Err`]: ../../std/result/enum.Result.html#method.err\n+/// [`Err`]: Result::Err\n ///\n /// # Examples\n ///\n@@ -54,7 +50,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n ///\n /// Returns an [`Err`] if the operation fails.\n ///\n-/// [`Err`]: ../../std/result/enum.Result.html#method.err\n+/// [`Err`]: Result::Err\n ///\n /// # Examples\n ///\n@@ -76,7 +72,7 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This structure is created by the [`std::env::vars`] function. See its\n /// documentation for more.\n ///\n-/// [`std::env::vars`]: fn.vars.html\n+/// [`std::env::vars`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars {\n     inner: VarsOs,\n@@ -87,7 +83,7 @@ pub struct Vars {\n /// This structure is created by the [`std::env::vars_os`] function. See\n /// its documentation for more.\n ///\n-/// [`std::env::vars_os`]: fn.vars_os.html\n+/// [`std::env::vars_os`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs {\n     inner: os_imp::Env,\n@@ -106,7 +102,7 @@ pub struct VarsOs {\n /// environment is not valid unicode. If this is not desired, consider using the\n /// [`env::vars_os`] function.\n ///\n-/// [`env::vars_os`]: fn.vars_os.html\n+/// [`env::vars_os`]: vars_os\n ///\n /// # Examples\n ///\n@@ -222,7 +218,7 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n /// Fetches the environment variable `key` from the current process, returning\n /// [`None`] if the variable isn't set.\n ///\n-/// [`None`]: ../option/enum.Option.html#variant.None\n+/// [`None`]: Option::None\n ///\n /// # Panics\n ///\n@@ -254,7 +250,7 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n /// The error type for operations interacting with environment variables.\n /// Possibly returned from the [`env::var`] function.\n ///\n-/// [`env::var`]: fn.var.html\n+/// [`env::var`]: var\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -382,8 +378,7 @@ fn _remove_var(k: &OsStr) {\n /// This structure is created by the [`std::env::split_paths`] function. See its\n /// documentation for more.\n ///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n-/// [`std::env::split_paths`]: fn.split_paths.html\n+/// [`std::env::split_paths`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -410,8 +405,6 @@ pub struct SplitPaths<'a> {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n-///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_> {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_ref()) }\n@@ -438,7 +431,7 @@ impl fmt::Debug for SplitPaths<'_> {\n /// The error type for operations on the `PATH` variable. Possibly returned from\n /// the [`env::join_paths`] function.\n ///\n-/// [`env::join_paths`]: fn.join_paths.html\n+/// [`env::join_paths`]: join_paths\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -450,13 +443,11 @@ pub struct JoinPathsError {\n ///\n /// # Errors\n ///\n-/// Returns an [`Err`][err] (containing an error message) if one of the input\n+/// Returns an [`Err`] (containing an error message) if one of the input\n /// [`Path`]s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n-/// [`Path`]: ../../std/path/struct.Path.html\n-/// [`OsString`]: ../../std/ffi/struct.OsString.html\n-/// [err]: ../../std/result/enum.Result.html#variant.Err\n+/// [Err]: Result::Err\n ///\n /// # Examples\n ///\n@@ -508,7 +499,7 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// [`env::split_paths`]: fn.split_paths.html\n+/// [`env::split_paths`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n where\n@@ -688,8 +679,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`String`]: ../string/struct.String.html\n-/// [`std::env::args`]: ./fn.args.html\n+/// [`std::env::args`]: args\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -705,8 +695,7 @@ pub struct Args {\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`OsString`]: ../ffi/struct.OsString.html\n-/// [`std::env::args_os`]: ./fn.args_os.html\n+/// [`std::env::args_os`]: args_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,\n@@ -744,8 +733,6 @@ pub struct ArgsOs {\n ///     println!(\"{}\", argument);\n /// }\n /// ```\n-///\n-/// [`args_os`]: ./fn.args_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args() -> Args {\n     Args { inner: args_os() }"}]}