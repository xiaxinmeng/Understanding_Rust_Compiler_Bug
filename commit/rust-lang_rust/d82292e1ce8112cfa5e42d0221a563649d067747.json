{"sha": "d82292e1ce8112cfa5e42d0221a563649d067747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjI5MmUxY2U4MTEyY2ZhNWU0MmQwMjIxYTU2MzY0OWQwNjc3NDc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-10T14:45:01Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-10T14:45:01Z"}, "message": "Ignore extern items in incorrect-case check", "tree": {"sha": "74860cf84ce807a7473cd4f639132df4cf9e617b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74860cf84ce807a7473cd4f639132df4cf9e617b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82292e1ce8112cfa5e42d0221a563649d067747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82292e1ce8112cfa5e42d0221a563649d067747", "html_url": "https://github.com/rust-lang/rust/commit/d82292e1ce8112cfa5e42d0221a563649d067747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82292e1ce8112cfa5e42d0221a563649d067747/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1341a98f0551edf3a445c40507ab1abb3d7c71bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1341a98f0551edf3a445c40507ab1abb3d7c71bb", "html_url": "https://github.com/rust-lang/rust/commit/1341a98f0551edf3a445c40507ab1abb3d7c71bb"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "dd3a906af0c0f00c5ad15531553c24e27d384362", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=d82292e1ce8112cfa5e42d0221a563649d067747", "patch": "@@ -28,6 +28,7 @@ pub struct FunctionData {\n     pub has_body: bool,\n     pub is_unsafe: bool,\n     pub is_varargs: bool,\n+    pub is_extern: bool,\n     pub visibility: RawVisibility,\n }\n \n@@ -46,6 +47,7 @@ impl FunctionData {\n             has_body: func.has_body,\n             is_unsafe: func.is_unsafe,\n             is_varargs: func.is_varargs,\n+            is_extern: func.is_extern,\n             visibility: item_tree[func.visibility].clone(),\n         })\n     }\n@@ -191,6 +193,7 @@ pub struct StaticData {\n     pub type_ref: TypeRef,\n     pub visibility: RawVisibility,\n     pub mutable: bool,\n+    pub is_extern: bool,\n }\n \n impl StaticData {\n@@ -204,6 +207,7 @@ impl StaticData {\n             type_ref: statik.type_ref.clone(),\n             visibility: item_tree[statik.visibility].clone(),\n             mutable: statik.mutable,\n+            is_extern: statik.is_extern,\n         })\n     }\n }"}, {"sha": "b3ec252fd5994ef0180af57f8bdd86d9147bfc98", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=d82292e1ce8112cfa5e42d0221a563649d067747", "patch": "@@ -507,6 +507,9 @@ pub struct Function {\n     pub has_self_param: bool,\n     pub has_body: bool,\n     pub is_unsafe: bool,\n+    /// Whether the function is located in an `extern` block (*not* whether it is an\n+    /// `extern \"abi\" fn`).\n+    pub is_extern: bool,\n     pub params: Box<[TypeRef]>,\n     pub is_varargs: bool,\n     pub ret_type: TypeRef,\n@@ -565,6 +568,8 @@ pub struct Static {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     pub mutable: bool,\n+    /// Whether the static is in an `extern` block.\n+    pub is_extern: bool,\n     pub type_ref: TypeRef,\n     pub ast_id: FileAstId<ast::Static>,\n }"}, {"sha": "63b2826f8579a6b0e2bb9f0ca7efd039da89c75e", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d82292e1ce8112cfa5e42d0221a563649d067747", "patch": "@@ -340,6 +340,7 @@ impl Ctx {\n             has_self_param,\n             has_body,\n             is_unsafe: func.unsafe_token().is_some(),\n+            is_extern: false,\n             params: params.into_boxed_slice(),\n             is_varargs,\n             ret_type,\n@@ -378,7 +379,7 @@ impl Ctx {\n         let visibility = self.lower_visibility(static_);\n         let mutable = static_.mut_token().is_some();\n         let ast_id = self.source_ast_id_map.ast_id(static_);\n-        let res = Static { name, visibility, mutable, type_ref, ast_id };\n+        let res = Static { name, visibility, mutable, type_ref, ast_id, is_extern: false };\n         Some(id(self.data().statics.alloc(res)))\n     }\n \n@@ -554,13 +555,15 @@ impl Ctx {\n                     let attrs = Attrs::new(&item, &self.hygiene);\n                     let id: ModItem = match item {\n                         ast::ExternItem::Fn(ast) => {\n-                            let func = self.lower_function(&ast)?;\n-                            self.data().functions[func.index].is_unsafe =\n-                                is_intrinsic_fn_unsafe(&self.data().functions[func.index].name);\n-                            func.into()\n+                            let func_id = self.lower_function(&ast)?;\n+                            let func = &mut self.data().functions[func_id.index];\n+                            func.is_unsafe = is_intrinsic_fn_unsafe(&func.name);\n+                            func.is_extern = true;\n+                            func_id.into()\n                         }\n                         ast::ExternItem::Static(ast) => {\n                             let statik = self.lower_static(&ast)?;\n+                            self.data().statics[statik.index].is_extern = true;\n                             statik.into()\n                         }\n                         ast::ExternItem::TypeAlias(ty) => {"}, {"sha": "724bad867dd7d3ee672710caa336dfbfd5b2b269", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82292e1ce8112cfa5e42d0221a563649d067747/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=d82292e1ce8112cfa5e42d0221a563649d067747", "patch": "@@ -87,6 +87,10 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_func(&mut self, db: &dyn HirDatabase, func: FunctionId) {\n         let data = db.function_data(func);\n+        if data.is_extern {\n+            return;\n+        }\n+\n         let body = db.body(func.into());\n \n         // Recursively validate inner scope items, such as static variables and constants.\n@@ -648,6 +652,9 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_static(&mut self, db: &dyn HirDatabase, static_id: StaticId) {\n         let data = db.static_data(static_id);\n+        if data.is_extern {\n+            return;\n+        }\n \n         if self.allowed(db, static_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n             return;\n@@ -920,4 +927,16 @@ fn main() {\n     \"#,\n         );\n     }\n+\n+    #[test]\n+    fn ignores_extern_items() {\n+        check_diagnostics(\n+            r#\"\n+extern {\n+    fn NonSnakeCaseName(SOME_VAR: u8) -> u8;\n+    pub static SomeStatic: u8 = 10;\n+}\n+            \"#,\n+        );\n+    }\n }"}]}