{"sha": "6291702cf334f4b1fe41662bc3b0d996ca7ced19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTE3MDJjZjMzNGY0YjFmZTQxNjYyYmMzYjBkOTk2Y2E3Y2VkMTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-06-24T00:34:38Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-06-24T10:50:41Z"}, "message": "iterator: Add `IteratorUtil::flat_map_` method\n\nflat_map_ produces an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.\n\nThis is the monadic bind :: M a -> (a -> M b) -> M b  for iterators.\n\nNamed just like the vec method, but with a trailing underline until the\nmethod resolution bug is resolved.", "tree": {"sha": "76081ca5cd2e78c7bfd13d57a3f7185f06bf5783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76081ca5cd2e78c7bfd13d57a3f7185f06bf5783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6291702cf334f4b1fe41662bc3b0d996ca7ced19", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6291702cf334f4b1fe41662bc3b0d996ca7ced19", "html_url": "https://github.com/rust-lang/rust/commit/6291702cf334f4b1fe41662bc3b0d996ca7ced19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6291702cf334f4b1fe41662bc3b0d996ca7ced19/comments", "author": null, "committer": null, "parents": [{"sha": "dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "html_url": "https://github.com/rust-lang/rust/commit/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "5e866f25b6a3580005285438eb397624c3237d23", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6291702cf334f4b1fe41662bc3b0d996ca7ced19/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6291702cf334f4b1fe41662bc3b0d996ca7ced19/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=6291702cf334f4b1fe41662bc3b0d996ca7ced19", "patch": "@@ -226,6 +226,26 @@ pub trait IteratorUtil<A> {\n     fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n         -> ScanIterator<'r, A, B, Self, St>;\n \n+    /// Creates an iterator that maps each element to an iterator,\n+    /// and yields the elements of the produced iterators\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let xs = [2u, 3];\n+    /// let ys = [0u, 1, 0, 1, 2];\n+    /// let mut it = xs.iter().flat_map_(|&x| Counter::new(0u, 1).take_(x));\n+    /// // Check that `it` has the same elements as `ys`\n+    /// let mut i = 0;\n+    /// for it.advance |x: uint| {\n+    ///     assert_eq!(x, ys[i]);\n+    ///     i += 1;\n+    /// }\n+    /// ~~~\n+    // FIXME: #5898: should be called `flat_map`\n+    fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n+        -> FlatMapIterator<'r, A, B, Self, U>;\n+\n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n     /// # Example\n@@ -397,6 +417,12 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         ScanIterator{iter: self, f: f, state: initial_state}\n     }\n \n+    #[inline]\n+    fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n+        -> FlatMapIterator<'r, A, B, T, U> {\n+        FlatMapIterator{iter: self, f: f, subiter: None }\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool {\n@@ -873,6 +899,34 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B,\n     }\n }\n \n+/// An iterator that maps each element to an iterator,\n+/// and yields the elements of the produced iterators\n+///\n+// FIXME #6967: Dummy B parameter to get around type inference bug\n+pub struct FlatMapIterator<'self, A, B, T, U> {\n+    priv iter: T,\n+    priv f: &'self fn(A) -> U,\n+    priv subiter: Option<U>,\n+}\n+\n+impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n+    FlatMapIterator<'self, A, B, T, U> {\n+    #[inline]\n+    fn next(&mut self) -> Option<B> {\n+        loop {\n+            for self.subiter.mut_iter().advance |inner| {\n+                for inner.advance |x| {\n+                    return Some(x)\n+                }\n+            }\n+            match self.iter.next().map_consume(self.f) {\n+                None => return None,\n+                next => self.subiter = next,\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator which just modifies the contained state throughout iteration.\n pub struct UnfoldrIterator<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n@@ -1051,6 +1105,19 @@ mod tests {\n         assert_eq!(i, ys.len());\n     }\n \n+    #[test]\n+    fn test_iterator_flat_map() {\n+        let xs = [0u, 3, 6];\n+        let ys = [0u, 1, 2, 3, 4, 5, 6, 7, 8];\n+        let mut it = xs.iter().flat_map_(|&x| Counter::new(x, 1).take_(3));\n+        let mut i = 0;\n+        for it.advance |x: uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+\n     #[test]\n     fn test_unfoldr() {\n         fn count(st: &mut uint) -> Option<uint> {"}]}