{"sha": "cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDljYjVlNWFkOGMwNzI0NDFmMjE1NmFhOWJjZDE0ODRlNTViMWM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-29T09:34:12Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-03T18:54:55Z"}, "message": "Record whether a Call in MIR corresponds to a call in HIR", "tree": {"sha": "60b67765dec896c07fa01395a886047ea13c11a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b67765dec896c07fa01395a886047ea13c11a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "html_url": "https://github.com/rust-lang/rust/commit/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddab3e078bc25bd101d6885427b8a1032f8f60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddab3e078bc25bd101d6885427b8a1032f8f60c", "html_url": "https://github.com/rust-lang/rust/commit/6ddab3e078bc25bd101d6885427b8a1032f8f60c"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "656f5795e18bd18a5a317308322b68533e3712d2", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -194,11 +194,13 @@ for mir::TerminatorKind<'gcx> {\n             mir::TerminatorKind::Call { ref func,\n                                         ref args,\n                                         ref destination,\n-                                        cleanup } => {\n+                                        cleanup,\n+                                        from_hir_call, } => {\n                 func.hash_stable(hcx, hasher);\n                 args.hash_stable(hcx, hasher);\n                 destination.hash_stable(hcx, hasher);\n                 cleanup.hash_stable(hcx, hasher);\n+                from_hir_call.hash_stable(hcx, hasher);\n             }\n             mir::TerminatorKind::Assert { ref cond,\n                                           expected,"}, {"sha": "98d81bd639ee5102985fdf043083570c6304e4df", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -1049,6 +1049,9 @@ pub enum TerminatorKind<'tcx> {\n         destination: Option<(Place<'tcx>, BasicBlock)>,\n         /// Cleanups to be done if the call unwinds.\n         cleanup: Option<BasicBlock>,\n+        /// Whether this is from a call in HIR, rather than from an overloaded\n+        /// operator. True for overloaded function call.\n+        from_hir_call: bool,\n     },\n \n     /// Jump to the target if the condition has the expected value,\n@@ -2810,6 +2813,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 ref args,\n                 ref destination,\n                 cleanup,\n+                from_hir_call,\n             } => {\n                 let dest = destination\n                     .as_ref()\n@@ -2820,6 +2824,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     args: args.fold_with(folder),\n                     destination: dest,\n                     cleanup,\n+                    from_hir_call,\n                 }\n             }\n             Assert {"}, {"sha": "cbfbed90c905e358469b150afa003de075a88d89", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -468,7 +468,8 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Call { ref $($mutability)* func,\n                                            ref $($mutability)* args,\n                                            ref $($mutability)* destination,\n-                                           cleanup } => {\n+                                           cleanup,\n+                                           from_hir_call: _, } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {\n                             self.visit_operand(arg, source_location);"}, {"sha": "db95b46c38ebeee537e0948fb2bcd5d39a1589a6", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -412,7 +412,13 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 bug!(\"undesugared DropAndReplace in codegen: {:?}\", terminator);\n             }\n \n-            mir::TerminatorKind::Call { ref func, ref args, ref destination, cleanup } => {\n+            mir::TerminatorKind::Call {\n+                ref func,\n+                ref args,\n+                ref destination,\n+                cleanup,\n+                from_hir_call: _\n+            } => {\n                 // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n                 let callee = self.codegen_operand(&bx, func);\n "}, {"sha": "103cb3b2a318271080f142c00f501b2a1b25e0a4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -667,6 +667,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 ref args,\n                 ref destination,\n                 cleanup: _,\n+                from_hir_call: _,\n             } => {\n                 self.consume_operand(ContextKind::CallOperator.new(loc), (func, span), flow_state);\n                 for arg in args {"}, {"sha": "a9b5531bae519141a6f830bbfc5b78d7618fb190", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -203,6 +203,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 ref args,\n                 ref destination,\n                 cleanup: _,\n+                from_hir_call: _,\n             } => {\n                 self.consume_operand(ContextKind::CallOperator.new(location), func);\n                 for arg in args {"}, {"sha": "c9dfbc2f00f60598e64b0206bd30f1be7f557892", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 exit_block.unit()\n             }\n-            ExprKind::Call { ty, fun, args } => {\n+            ExprKind::Call { ty, fun, args, from_hir_call } => {\n                 // FIXME(canndrew): This is_never should probably be an is_uninhabited\n                 let diverges = expr.ty.is_never();\n                 let intrinsic = match ty.sty {\n@@ -326,6 +326,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             } else {\n                                 Some((destination.clone(), success))\n                             },\n+                            from_hir_call,\n                         },\n                     );\n                     success.unit()"}, {"sha": "a8713286f18ecc721e8f31f7393acce2ccd77f85", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -361,6 +361,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         args: vec![val, expect],\n                         destination: Some((eq_result.clone(), eq_block)),\n                         cleanup: Some(cleanup),\n+                        from_hir_call: false,\n                     });\n \n                     // check the result"}, {"sha": "da4bd780eb4faa9b78eb2ad4ca5102eb9e943184", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -795,7 +795,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                     self.propagate_bits_into_entry_set_for(in_out, *target, dirty_list);\n                 }\n             }\n-            mir::TerminatorKind::Call { cleanup, ref destination, func: _, args: _ } => {\n+            mir::TerminatorKind::Call { cleanup, ref destination, .. } => {\n                 if let Some(unwind) = cleanup {\n                     if !self.dead_unwinds.contains(bb) {\n                         self.propagate_bits_into_entry_set_for(in_out, unwind, dirty_list);"}, {"sha": "32b1187011672cbb5cbd8662c8bee9c21ea0bea4", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -380,7 +380,13 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 self.gather_operand(value);\n                 self.gather_init(location, InitKind::Deep);\n             }\n-            TerminatorKind::Call { ref func, ref args, ref destination, cleanup: _ } => {\n+            TerminatorKind::Call {\n+                ref func,\n+                ref args,\n+                ref destination,\n+                cleanup: _,\n+                from_hir_call: _,\n+            } => {\n                 self.gather_operand(func);\n                 for arg in args {\n                     self.gather_operand(arg);"}, {"sha": "aff091ccc54b523b28d2aea8930e25e8757afda2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::mir::{BorrowKind};\n+use syntax_pos::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -232,16 +233,17 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     let kind = match expr.node {\n         // Here comes the interesting stuff:\n-        hir::ExprKind::MethodCall(.., ref args) => {\n+        hir::ExprKind::MethodCall(_, method_span, ref args) => {\n             // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n-            let expr = method_callee(cx, expr, None);\n+            let expr = method_callee(cx, expr, method_span,None);\n             let args = args.iter()\n                 .map(|e| e.to_ref())\n                 .collect();\n             ExprKind::Call {\n                 ty: expr.ty,\n                 fun: expr.to_ref(),\n                 args,\n+                from_hir_call: true,\n             }\n         }\n \n@@ -254,7 +256,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 // rewrite f(u, v) into FnOnce::call_once(f, (u, v))\n \n-                let method = method_callee(cx, expr, None);\n+                let method = method_callee(cx, expr, fun.span,None);\n \n                 let arg_tys = args.iter().map(|e| cx.tables().expr_ty_adjusted(e));\n                 let tupled_args = Expr {\n@@ -268,6 +270,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     ty: method.ty,\n                     fun: method.to_ref(),\n                     args: vec![fun.to_ref(), tupled_args.to_ref()],\n+                    from_hir_call: true,\n                 }\n             } else {\n                 let adt_data = if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) =\n@@ -321,6 +324,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         ty: cx.tables().node_id_to_type(fun.hir_id),\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n+                        from_hir_call: true,\n                     }\n                 }\n             }\n@@ -812,6 +816,7 @@ fn user_annotated_ty_for_adt(\n fn method_callee<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &hir::Expr,\n+    span: Span,\n     overloaded_callee: Option<(DefId, &'tcx Substs<'tcx>)>,\n ) -> Expr<'tcx> {\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n@@ -832,7 +837,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     Expr {\n         temp_lifetime,\n         ty,\n-        span: expr.span,\n+        span,\n         kind: ExprKind::Literal {\n             literal: ty::Const::zero_sized(cx.tcx(), ty),\n             user_ty,\n@@ -1093,11 +1098,12 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                        expr: &'tcx hir::Expr,\n                                        args: Vec<ExprRef<'tcx>>)\n                                        -> ExprKind<'tcx> {\n-    let fun = method_callee(cx, expr, None);\n+    let fun = method_callee(cx, expr, expr.span, None);\n     ExprKind::Call {\n         ty: fun.ty,\n         fun: fun.to_ref(),\n         args,\n+        from_hir_call: false,\n     }\n }\n \n@@ -1132,7 +1138,7 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n     // construct the complete expression `foo()` for the overloaded call,\n     // which will yield the &T type\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n-    let fun = method_callee(cx, expr, overloaded_callee);\n+    let fun = method_callee(cx, expr, expr.span, overloaded_callee);\n     let ref_expr = Expr {\n         temp_lifetime,\n         ty: ref_ty,\n@@ -1141,6 +1147,7 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n             ty: fun.ty,\n             fun: fun.to_ref(),\n             args,\n+            from_hir_call: false,\n         },\n     };\n "}, {"sha": "818c4f6b9cfc733a5eb432ff26c4b544dd88cce8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -150,6 +150,9 @@ pub enum ExprKind<'tcx> {\n         ty: Ty<'tcx>,\n         fun: ExprRef<'tcx>,\n         args: Vec<ExprRef<'tcx>>,\n+        // Whether this is from a call in HIR, rather than from an overloaded\n+        // operator. True for overloaded function call.\n+        from_hir_call: bool,\n     },\n     Deref {\n         arg: ExprRef<'tcx>,"}, {"sha": "6c3dd0ea3cc377ceb93a4eec2c9fb82f92a9d997", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -468,6 +468,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             args: vec![Operand::Move(ref_loc)],\n             destination: Some((dest, next)),\n             cleanup: Some(cleanup),\n+            from_hir_call: true,\n         }, false);\n     }\n \n@@ -766,7 +767,8 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Some(BasicBlock::new(3))\n         } else {\n             None\n-        }\n+        },\n+        from_hir_call: true,\n     }, false);\n \n     if let Adjustment::RefMut = rcvr_adjustment {"}, {"sha": "bd7d9d367618be73f1bc77ce12513fae40d64087", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -121,6 +121,7 @@ impl Lower128Bit {\n                             args: vec![lhs, rhs],\n                             destination: Some((place, bb)),\n                             cleanup: None,\n+                            from_hir_call: false,\n                         },\n                     });\n             }"}, {"sha": "f4efe33da7080f07cd086649baa0f03c2f3432b1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             };\n \n             match terminator.kind {\n-                TerminatorKind::Call { mut func, mut args, .. } => {\n+                TerminatorKind::Call { mut func, mut args, from_hir_call, .. } => {\n                     self.visit_operand(&mut func, loc);\n                     for arg in &mut args {\n                         self.visit_operand(arg, loc);\n@@ -272,7 +272,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             func,\n                             args,\n                             cleanup: None,\n-                            destination: Some((Place::Local(new_temp), new_target))\n+                            destination: Some((Place::Local(new_temp), new_target)),\n+                            from_hir_call,\n                         },\n                         ..terminator\n                     };"}, {"sha": "aa559c96ec6682b179c1c976f151aefb52e776ad", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -318,6 +318,7 @@ fn check_terminator(\n         TerminatorKind::Call {\n             func,\n             args,\n+            from_hir_call: _,\n             destination: _,\n             cleanup: _,\n         } => {"}, {"sha": "1dca367ffdf5f621b04a8f02f9d9a29ee790f1f3", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=cc09cb5e5ad8c072441f2156aa9bcd1484e55b1c", "patch": "@@ -545,8 +545,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                     args: vec![Operand::Move(Place::Local(ref_place))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),\n+                    from_hir_call: true,\n                 },\n-                source_info: self.source_info\n+                source_info: self.source_info,\n             }),\n             is_cleanup: unwind.is_cleanup(),\n         };\n@@ -903,7 +904,8 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n             args: args,\n             destination: Some((unit_temp, target)),\n-            cleanup: None\n+            cleanup: None,\n+            from_hir_call: false,\n         }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n "}]}