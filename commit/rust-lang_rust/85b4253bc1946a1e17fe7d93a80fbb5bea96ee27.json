{"sha": "85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YjQyNTNiYzE5NDZhMWUxN2ZlN2Q5M2E4MGZiYjViZWE5NmVlMjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-25T06:34:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:43Z"}, "message": "Convert std::generic_os to istrs. Issue #855", "tree": {"sha": "e1aa363c428ed3e9a1f7dd18a1b31b51bc9f72aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1aa363c428ed3e9a1f7dd18a1b31b51bc9f72aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "html_url": "https://github.com/rust-lang/rust/commit/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc68fc18b615561694650b25e665c257847cf67", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc68fc18b615561694650b25e665c257847cf67", "html_url": "https://github.com/rust-lang/rust/commit/ccc68fc18b615561694650b25e665c257847cf67"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "75fca2398ebc64c2c0790a12c02c138bd6ec1612", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -5,6 +5,7 @@\n  * interface.\n  */\n import std::vec;\n+import std::istr;\n import std::option;\n import std::generic_os;\n import base::*;\n@@ -26,9 +27,11 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n     // option::t<str> rather than just an maybe-empty string.\n \n     let var = expr_to_str(cx, args[0], \"#env requires a string\");\n-    alt generic_os::getenv(var) {\n+    alt generic_os::getenv(istr::from_estr(var)) {\n       option::none. { ret make_new_str(cx, sp, \"\"); }\n-      option::some(s) { ret make_new_str(cx, sp, s); }\n+      option::some(s) {\n+        ret make_new_str(cx, sp, istr::to_estr(s));\n+      }\n     }\n }\n "}, {"sha": "38662e6f95edd5953df58abd73ae9ad80f685944", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -3,23 +3,30 @@ import str::sbuf;\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-fn getenv(n: str) -> option::t<str> {\n+fn getenv(n: &istr) -> option::t<istr> {\n+    let n = istr::to_estr(n);\n     let s = os::libc::getenv(str::buf(n));\n     ret if s as int == 0 {\n-            option::none::<str>\n-        } else { option::some::<str>(str::str_from_cstr(s)) };\n+        option::none::<istr>\n+    } else {\n+        let s = unsafe::reinterpret_cast(s);\n+        option::some::<istr>(istr::str_from_cstr(s))\n+    };\n }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-fn setenv(n: str, v: str) {\n+fn setenv(n: &istr, v: &istr) {\n+    let n = istr::to_estr(n);\n+    let v = istr::to_estr(v);\n     let nbuf = str::buf(n);\n     let vbuf = str::buf(v);\n     os::libc::setenv(nbuf, vbuf, 1);\n }\n \n #[cfg(target_os = \"win32\")]\n-fn getenv(n: str) -> option::t<str> {\n+fn getenv(n: &istr) -> option::t<istr> {\n+    let n = istr::to_estr(n);\n     let nbuf = str::buf(n);\n     let nsize = 256u;\n     while true {\n@@ -29,14 +36,17 @@ fn getenv(n: str) -> option::t<str> {\n         if res == 0u {\n             ret option::none;\n         } else if res < nsize {\n-            ret option::some(str::str_from_cstr(vbuf));\n+            let vbuf = unsafe::reinterpret_cast(vbuf);\n+            ret option::some(istr::str_from_cstr(vbuf));\n         } else { nsize = res; }\n     }\n     fail;\n }\n \n #[cfg(target_os = \"win32\")]\n-fn setenv(n: str, v: str) {\n+fn setenv(n: &istr, v: &istr) {\n+    let n = istr::to_estr(n);\n+    let v = istr::to_estr(v);\n     let nbuf = str::buf(n);\n     let vbuf = str::buf(v);\n     os::kernel32::SetEnvironmentVariableA(nbuf, vbuf);"}, {"sha": "cd5b1122a596b27754e727786bf8efae22a4a64d", "filename": "src/lib/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Flib%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Flib%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fterm.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -49,10 +49,10 @@ fn reset(writer: io::buf_writer) {\n \n fn color_supported() -> bool {\n     let supported_terms = [~\"xterm-color\", ~\"xterm\", ~\"screen-bce\"];\n-    ret alt generic_os::getenv(\"TERM\") {\n+    ret alt generic_os::getenv(~\"TERM\") {\n           option::some(env) {\n             for term: istr in supported_terms {\n-                if istr::eq(term, istr::from_estr(env)) { ret true; }\n+                if istr::eq(term, env) { ret true; }\n             }\n             false\n           }"}, {"sha": "abe40b7a32703fae9d06581163a65a0ab6863f72", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -153,11 +153,11 @@ fn worker(p: port<request>) {\n }\n \n fn with_lib_path<@T>(path: &str, f: fn() -> T) -> T {\n-    let maybe_oldpath = getenv(util::lib_path_env_var());\n+    let maybe_oldpath = getenv(istr::from_estr(util::lib_path_env_var()));\n     append_lib_path(path);\n     let res = f();\n     if option::is_some(maybe_oldpath) {\n-        export_lib_path(option::get(maybe_oldpath));\n+        export_lib_path(istr::to_estr(option::get(maybe_oldpath)));\n     } else {\n         // FIXME: This should really be unset but we don't have that yet\n         export_lib_path(\"\");\n@@ -167,7 +167,9 @@ fn with_lib_path<@T>(path: &str, f: fn() -> T) -> T {\n \n fn append_lib_path(path: &str) { export_lib_path(util::make_new_path(path)); }\n \n-fn export_lib_path(path: &str) { setenv(util::lib_path_env_var(), path); }\n+fn export_lib_path(path: &str) {\n+    setenv(istr::from_estr(util::lib_path_env_var()), istr::from_estr(path));\n+}\n \n fn clone_vecstr(v: &[str]) -> [[u8]] {\n     let r = [];"}, {"sha": "2aa313e29a1944720bc1b2e0f29aef6f08d0bcb9", "filename": "src/test/compiletest/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Futil.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -1,15 +1,16 @@\n import std::option;\n import std::generic_os::getenv;\n import std::io;\n+import std::istr;\n \n import common::config;\n \n fn make_new_path(path: &str) -> str {\n \n     // Windows just uses PATH as the library search path, so we have to\n     // maintain the current value while adding our own\n-    alt getenv(lib_path_env_var()) {\n-      option::some(curr) { #fmt[\"%s:%s\", path, curr] }\n+    alt getenv(istr::from_estr(lib_path_env_var())) {\n+      option::some(curr) { #fmt[\"%s:%s\", path, istr::to_estr(curr)] }\n       option::none. { path }\n     }\n }"}, {"sha": "fc5085953299e892f882d15916f4cfcce6e29634", "filename": "src/test/stdtest/os.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fstdtest%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b4253bc1946a1e17fe7d93a80fbb5bea96ee27/src%2Ftest%2Fstdtest%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fos.rs?ref=85b4253bc1946a1e17fe7d93a80fbb5bea96ee27", "patch": "@@ -6,26 +6,26 @@ import std::option;\n fn test_setenv() {\n     // NB: Each test of setenv needs to use different variable names or the\n     // tests will not be threadsafe\n-    setenv(\"NAME1\", \"VALUE\");\n-    assert (getenv(\"NAME1\") == option::some(\"VALUE\"));\n+    setenv(~\"NAME1\", ~\"VALUE\");\n+    assert (getenv(~\"NAME1\") == option::some(~\"VALUE\"));\n }\n \n #[test]\n fn test_setenv_overwrite() {\n-    setenv(\"NAME2\", \"1\");\n-    setenv(\"NAME2\", \"2\");\n-    assert (getenv(\"NAME2\") == option::some(\"2\"));\n+    setenv(~\"NAME2\", ~\"1\");\n+    setenv(~\"NAME2\", ~\"2\");\n+    assert (getenv(~\"NAME2\") == option::some(~\"2\"));\n }\n \n // Windows GetEnvironmentVariable requires some extra work to make sure\n // the buffer the variable is copied into is the right size\n #[test]\n fn test_getenv_big() {\n-    let s = \"\";\n+    let s = ~\"\";\n     let i = 0;\n-    while i < 100 { s += \"aaaaaaaaaa\"; i += 1; }\n-    setenv(\"NAME3\", s);\n-    assert (getenv(\"NAME3\") == option::some(s));\n+    while i < 100 { s += ~\"aaaaaaaaaa\"; i += 1; }\n+    setenv(~\"NAME3\", s);\n+    assert (getenv(~\"NAME3\") == option::some(s));\n }\n \n // Local Variables:"}]}