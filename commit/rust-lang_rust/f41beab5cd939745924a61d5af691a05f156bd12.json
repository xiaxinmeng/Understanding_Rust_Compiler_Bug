{"sha": "f41beab5cd939745924a61d5af691a05f156bd12", "node_id": "C_kwDOAAsO6NoAKGY0MWJlYWI1Y2Q5Mzk3NDU5MjRhNjFkNWFmNjkxYTA1ZjE1NmJkMTI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T02:16:48Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T02:28:52Z"}, "message": "rustdoc: Remove `Crate.externs` and compute on-demand instead", "tree": {"sha": "ff5339edcd55ffd585f1f8c2b8d8a3bff4b82d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5339edcd55ffd585f1f8c2b8d8a3bff4b82d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41beab5cd939745924a61d5af691a05f156bd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41beab5cd939745924a61d5af691a05f156bd12", "html_url": "https://github.com/rust-lang/rust/commit/f41beab5cd939745924a61d5af691a05f156bd12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41beab5cd939745924a61d5af691a05f156bd12/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331465a867fd450939d23d6ebd0580fc0ef18059", "url": "https://api.github.com/repos/rust-lang/rust/commits/331465a867fd450939d23d6ebd0580fc0ef18059", "html_url": "https://github.com/rust-lang/rust/commit/331465a867fd450939d23d6ebd0580fc0ef18059"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "2db751a6e409bc3239996db45f064a90013df428", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f41beab5cd939745924a61d5af691a05f156bd12", "patch": "@@ -117,7 +117,6 @@ impl From<DefId> for ItemId {\n #[derive(Clone, Debug)]\n crate struct Crate {\n     crate module: Item,\n-    crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     /// Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n@@ -126,7 +125,7 @@ crate struct Crate {\n \n // `Crate` is frequently moved by-value. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Crate, 104);\n+rustc_data_structures::static_assert_size!(Crate, 80);\n \n impl Crate {\n     crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {"}, {"sha": "69f908b58517f9eac4db5ffc9925efbfbb18cb49", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f41beab5cd939745924a61d5af691a05f156bd12", "patch": "@@ -24,17 +24,8 @@ use std::mem;\n mod tests;\n \n crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n-    use crate::visit_lib::LibEmbargoVisitor;\n-\n     let module = crate::visit_ast::RustdocVisitor::new(cx).visit();\n \n-    let mut externs = Vec::new();\n-    for &cnum in cx.tcx.crates(()) {\n-        externs.push(ExternalCrate { crate_num: cnum });\n-        // Analyze doc-reachability for extern items\n-        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n-    }\n-\n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n     let mut module = module.clean(cx);\n@@ -76,13 +67,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         }));\n     }\n \n-    Crate {\n-        module,\n-        externs,\n-        primitives,\n-        external_traits: cx.external_traits.clone(),\n-        collapsed: false,\n-    }\n+    Crate { module, primitives, external_traits: cx.external_traits.clone(), collapsed: false }\n }\n \n fn external_generic_args("}, {"sha": "00ad75964d3ab14665ca9deefdb332b71b7a4cd8", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41beab5cd939745924a61d5af691a05f156bd12/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=f41beab5cd939745924a61d5af691a05f156bd12", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n-use crate::clean::{self, ItemId, PrimitiveType};\n+use crate::clean::{self, ExternalCrate, ItemId, PrimitiveType};\n use crate::config::RenderOptions;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n@@ -15,6 +15,7 @@ use crate::formats::Impl;\n use crate::html::markdown::short_markdown_summary;\n use crate::html::render::cache::{get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n+use crate::visit_lib::LibEmbargoVisitor;\n \n /// This cache is used to store information about the [`clean::Crate`] being\n /// rendered in order to provide more useful documentation. This contains\n@@ -139,19 +140,27 @@ impl Cache {\n     /// in `krate` due to the data being moved into the `Cache`.\n     crate fn populate(cx: &mut DocContext<'_>, mut krate: clean::Crate) -> clean::Crate {\n         let tcx = cx.tcx;\n-        let render_options = &cx.render_options;\n \n         // Crawl the crate to build various caches used for the output\n         debug!(?cx.cache.crate_version);\n         cx.cache.traits = krate.external_traits.take();\n-        let RenderOptions { extern_html_root_takes_precedence, output: dst, .. } = render_options;\n+\n+        let mut externs = Vec::new();\n+        for &cnum in cx.tcx.crates(()) {\n+            externs.push(ExternalCrate { crate_num: cnum });\n+            // Analyze doc-reachability for extern items\n+            LibEmbargoVisitor::new(cx).visit_lib(cnum);\n+        }\n+\n+        let RenderOptions { extern_html_root_takes_precedence, output: dst, .. } =\n+            &cx.render_options;\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for &e in &krate.externs {\n+        for e in externs {\n             let name = e.name(tcx);\n             let extern_url =\n-                render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n+                cx.render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n             let location = e.location(extern_url, *extern_html_root_takes_precedence, dst, tcx);\n             cx.cache.extern_locations.insert(e.crate_num, location);\n             cx.cache.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));"}]}