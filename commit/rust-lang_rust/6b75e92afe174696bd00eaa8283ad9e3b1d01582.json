{"sha": "6b75e92afe174696bd00eaa8283ad9e3b1d01582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzVlOTJhZmUxNzQ2OTZiZDAwZWFhODI4M2FkOWUzYjFkMDE1ODI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-23T21:17:34Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-30T17:19:26Z"}, "message": "UnsafeArc methods return unsafe pointers, so are not themselves unsafe.", "tree": {"sha": "0a4a209775847357108e2a29430f17502da85a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4a209775847357108e2a29430f17502da85a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b75e92afe174696bd00eaa8283ad9e3b1d01582", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b75e92afe174696bd00eaa8283ad9e3b1d01582", "html_url": "https://github.com/rust-lang/rust/commit/6b75e92afe174696bd00eaa8283ad9e3b1d01582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b75e92afe174696bd00eaa8283ad9e3b1d01582/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "html_url": "https://github.com/rust-lang/rust/commit/fa8102ab4afc4deba80344f4a2fdb5861cbe394f"}], "stats": {"total": 255, "additions": 127, "deletions": 128}, "files": [{"sha": "d4bf1d480ed79219b4f8fb1479316638ad1befb6", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=6b75e92afe174696bd00eaa8283ad9e3b1d01582", "patch": "@@ -136,7 +136,7 @@ impl<T:Freeze+Send> Arc<T> {\n      */\n     pub fn unwrap(self) -> T {\n         let Arc { x: x } = self;\n-        unsafe { x.unwrap() }\n+        x.unwrap()\n     }\n }\n \n@@ -250,7 +250,7 @@ impl<T:Send> MutexArc<T> {\n      */\n     pub fn unwrap(self) -> T {\n         let MutexArc { x: x } = self;\n-        let inner = unsafe { x.unwrap() };\n+        let inner = x.unwrap();\n         let MutexArcInner { failed: failed, data: data, _ } = inner;\n         if failed {\n             fail!(~\"Can't unwrap poisoned MutexArc - another task failed inside!\");\n@@ -469,7 +469,7 @@ impl<T:Freeze + Send> RWArc<T> {\n      */\n     pub fn unwrap(self) -> T {\n         let RWArc { x: x, _ } = self;\n-        let inner = unsafe { x.unwrap() };\n+        let inner = x.unwrap();\n         let RWArcInner { failed: failed, data: data, _ } = inner;\n         if failed {\n             fail!(~\"Can't unwrap poisoned RWArc - another task failed inside!\")"}, {"sha": "e691bf51ea50e1d6e2c4206993b6ac362831601f", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=6b75e92afe174696bd00eaa8283ad9e3b1d01582", "patch": "@@ -328,7 +328,7 @@ impl KillHandle {\n         }\n \n         // Try to see if all our children are gone already.\n-        match unsafe { self.try_unwrap() } {\n+        match self.try_unwrap() {\n             // Couldn't unwrap; children still alive. Reparent entire handle as\n             // our own tombstone, to be unwrapped later.\n             Left(this) => {\n@@ -340,7 +340,7 @@ impl KillHandle {\n                         // Prefer to check tombstones that were there first,\n                         // being \"more fair\" at the expense of tail-recursion.\n                         others.take().map_consume_default(true, |f| f()) && {\n-                            let mut inner = unsafe { this.take().unwrap() };\n+                            let mut inner = this.take().unwrap();\n                             (!inner.any_child_failed) &&\n                                 inner.child_tombstones.take_map_default(true, |f| f())\n                         }\n@@ -429,7 +429,7 @@ impl Death {\n         do self.on_exit.take_map |on_exit| {\n             if success {\n                 // We succeeded, but our children might not. Need to wait for them.\n-                let mut inner = unsafe { self.kill_handle.take_unwrap().unwrap() };\n+                let mut inner = self.kill_handle.take_unwrap().unwrap();\n                 if inner.any_child_failed {\n                     success = false;\n                 } else {\n@@ -555,7 +555,7 @@ mod test {\n \n             // Without another handle to child, the try unwrap should succeed.\n             child.reparent_children_to(&mut parent);\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             assert!(parent_inner.child_tombstones.is_none());\n             assert!(parent_inner.any_child_failed == false);\n         }\n@@ -570,7 +570,7 @@ mod test {\n             child.notify_immediate_failure();\n             // Without another handle to child, the try unwrap should succeed.\n             child.reparent_children_to(&mut parent);\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             assert!(parent_inner.child_tombstones.is_none());\n             // Immediate failure should have been propagated.\n             assert!(parent_inner.any_child_failed);\n@@ -592,7 +592,7 @@ mod test {\n             // Otherwise, due to 'link', it would try to tombstone.\n             child2.reparent_children_to(&mut parent);\n             // Should successfully unwrap even though 'link' is still alive.\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             assert!(parent_inner.child_tombstones.is_none());\n             // Immediate failure should have been propagated by first child.\n             assert!(parent_inner.any_child_failed);\n@@ -611,7 +611,7 @@ mod test {\n             // Let parent collect tombstones.\n             util::ignore(link);\n             // Must have created a tombstone\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             assert!(parent_inner.child_tombstones.take_unwrap()());\n             assert!(parent_inner.any_child_failed == false);\n         }\n@@ -630,7 +630,7 @@ mod test {\n             // Let parent collect tombstones.\n             util::ignore(link);\n             // Must have created a tombstone\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             // Failure must be seen in the tombstone.\n             assert!(parent_inner.child_tombstones.take_unwrap()() == false);\n             assert!(parent_inner.any_child_failed == false);\n@@ -650,7 +650,7 @@ mod test {\n             // Let parent collect tombstones.\n             util::ignore(link);\n             // Must have created a tombstone\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             assert!(parent_inner.child_tombstones.take_unwrap()());\n             assert!(parent_inner.any_child_failed == false);\n         }\n@@ -671,7 +671,7 @@ mod test {\n             // Let parent collect tombstones.\n             util::ignore(link);\n             // Must have created a tombstone\n-            let mut parent_inner = unsafe { parent.unwrap() };\n+            let mut parent_inner = parent.unwrap();\n             // Failure must be seen in the tombstone.\n             assert!(parent_inner.child_tombstones.take_unwrap()() == false);\n             assert!(parent_inner.any_child_failed == false);"}, {"sha": "4c52d897a7212557624ccca77367fdd6f8d22e7b", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 114, "deletions": 115, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b75e92afe174696bd00eaa8283ad9e3b1d01582/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=6b75e92afe174696bd00eaa8283ad9e3b1d01582", "patch": "@@ -93,114 +93,121 @@ impl<T: Send> UnsafeAtomicRcBox<T> {\n     }\n \n     #[inline]\n-    pub unsafe fn get(&self) -> *mut T\n-    {\n-        let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n-        assert!(data.count.load(Acquire) > 0); // no barrier is really needed\n-        let r: *mut T = data.data.get_mut_ref();\n-        cast::forget(data);\n-        return r;\n+    pub fn get(&self) -> *mut T {\n+        unsafe {\n+            let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n+            // FIXME(#6598) Change Acquire to Relaxed.\n+            assert!(data.count.load(Acquire) > 0);\n+            let r: *mut T = data.data.get_mut_ref();\n+            cast::forget(data);\n+            return r;\n+        }\n     }\n \n     #[inline]\n-    pub unsafe fn get_immut(&self) -> *T\n-    {\n-        let data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n-        assert!(data.count.load(Acquire) > 0); // no barrier is really needed\n-        let r: *T = data.data.get_ref();\n-        cast::forget(data);\n-        return r;\n+    pub fn get_immut(&self) -> *T {\n+        unsafe {\n+            let data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n+            assert!(data.count.load(Acquire) > 0); // no barrier is really needed\n+            let r: *T = data.data.get_ref();\n+            cast::forget(data);\n+            return r;\n+        }\n     }\n \n     /// Wait until all other handles are dropped, then retrieve the enclosed\n     /// data. See extra::arc::Arc for specific semantics documentation.\n     /// If called when the task is already unkillable, unwrap will unkillably\n     /// block; otherwise, an unwrapping task can be killed by linked failure.\n-    pub unsafe fn unwrap(self) -> T {\n+    pub fn unwrap(self) -> T {\n         let this = Cell::new(self); // argh\n         do task::unkillable {\n-            let mut this = this.take();\n-            let mut data: ~AtomicRcBoxData<T> = cast::transmute(this.data);\n-            // Set up the unwrap protocol.\n-            let (p1,c1) = comm::oneshot(); // ()\n-            let (p2,c2) = comm::oneshot(); // bool\n-            // Try to put our server end in the unwrapper slot.\n-            // This needs no barrier -- it's protected by the release barrier on\n-            // the xadd, and the acquire+release barrier in the destructor's xadd.\n-            // FIXME(#6598) Change Acquire to Relaxed.\n-            if data.unwrapper.fill(~(c1,p2), Acquire).is_none() {\n-                // Got in. Tell this handle's destructor not to run (we are now it).\n-                this.data = ptr::mut_null();\n-                // Drop our own reference.\n-                let old_count = data.count.fetch_sub(1, Release);\n-                assert!(old_count >= 1);\n-                if old_count == 1 {\n-                    // We were the last owner. Can unwrap immediately.\n-                    // AtomicOption's destructor will free the server endpoint.\n-                    // FIXME(#3224): it should be like this\n-                    // let ~AtomicRcBoxData { data: user_data, _ } = data;\n-                    // user_data\n-                    data.data.take_unwrap()\n-                } else {\n-                    // The *next* person who sees the refcount hit 0 will wake us.\n-                    let p1 = Cell::new(p1); // argh\n-                    // Unlike the above one, this cell is necessary. It will get\n-                    // taken either in the do block or in the finally block.\n-                    let c2_and_data = Cell::new((c2,data));\n-                    do (|| {\n-                        do task::rekillable { p1.take().recv(); }\n-                        // Got here. Back in the 'unkillable' without getting killed.\n-                        let (c2, data) = c2_and_data.take();\n-                        c2.send(true);\n+            unsafe {\n+                let mut this = this.take();\n+                let mut data: ~AtomicRcBoxData<T> = cast::transmute(this.data);\n+                // Set up the unwrap protocol.\n+                let (p1,c1) = comm::oneshot(); // ()\n+                let (p2,c2) = comm::oneshot(); // bool\n+                // Try to put our server end in the unwrapper slot.\n+                // This needs no barrier -- it's protected by the release barrier on\n+                // the xadd, and the acquire+release barrier in the destructor's xadd.\n+                // FIXME(#6598) Change Acquire to Relaxed.\n+                if data.unwrapper.fill(~(c1,p2), Acquire).is_none() {\n+                    // Got in. Tell this handle's destructor not to run (we are now it).\n+                    this.data = ptr::mut_null();\n+                    // Drop our own reference.\n+                    let old_count = data.count.fetch_sub(1, Release);\n+                    assert!(old_count >= 1);\n+                    if old_count == 1 {\n+                        // We were the last owner. Can unwrap immediately.\n+                        // AtomicOption's destructor will free the server endpoint.\n                         // FIXME(#3224): it should be like this\n                         // let ~AtomicRcBoxData { data: user_data, _ } = data;\n                         // user_data\n-                        let mut data = data;\n                         data.data.take_unwrap()\n-                    }).finally {\n-                        if task::failing() {\n-                            // Killed during wait. Because this might happen while\n-                            // someone else still holds a reference, we can't free\n-                            // the data now; the \"other\" last refcount will free it.\n+                    } else {\n+                        // The *next* person who sees the refcount hit 0 will wake us.\n+                        let p1 = Cell::new(p1); // argh\n+                        // Unlike the above one, this cell is necessary. It will get\n+                        // taken either in the do block or in the finally block.\n+                        let c2_and_data = Cell::new((c2,data));\n+                        do (|| {\n+                            do task::rekillable { p1.take().recv(); }\n+                            // Got here. Back in the 'unkillable' without getting killed.\n                             let (c2, data) = c2_and_data.take();\n-                            c2.send(false);\n-                            cast::forget(data);\n-                        } else {\n-                            assert!(c2_and_data.is_empty());\n+                            c2.send(true);\n+                            // FIXME(#3224): it should be like this\n+                            // let ~AtomicRcBoxData { data: user_data, _ } = data;\n+                            // user_data\n+                            let mut data = data;\n+                            data.data.take_unwrap()\n+                        }).finally {\n+                            if task::failing() {\n+                                // Killed during wait. Because this might happen while\n+                                // someone else still holds a reference, we can't free\n+                                // the data now; the \"other\" last refcount will free it.\n+                                let (c2, data) = c2_and_data.take();\n+                                c2.send(false);\n+                                cast::forget(data);\n+                            } else {\n+                                assert!(c2_and_data.is_empty());\n+                            }\n                         }\n                     }\n+                } else {\n+                    // If 'put' returns the server end back to us, we were rejected;\n+                    // someone else was trying to unwrap. Avoid guaranteed deadlock.\n+                    cast::forget(data);\n+                    fail!(\"Another task is already unwrapping this Arc!\");\n                 }\n-            } else {\n-                // If 'put' returns the server end back to us, we were rejected;\n-                // someone else was trying to unwrap. Avoid guaranteed deadlock.\n-                cast::forget(data);\n-                fail!(\"Another task is already unwrapping this Arc!\");\n             }\n         }\n     }\n \n     /// As unwrap above, but without blocking. Returns 'Left(self)' if this is\n     /// not the last reference; 'Right(unwrapped_data)' if so.\n-    pub unsafe fn try_unwrap(self) -> Either<UnsafeAtomicRcBox<T>, T> {\n-        let mut this = self; // FIXME(#4330) mutable self\n-        let mut data: ~AtomicRcBoxData<T> = cast::transmute(this.data);\n-        // This can of course race with anybody else who has a handle, but in\n-        // such a case, the returned count will always be at least 2. If we\n-        // see 1, no race was possible. All that matters is 1 or not-1.\n-        let count = data.count.load(Acquire);\n-        assert!(count >= 1);\n-        // The more interesting race is one with an unwrapper. They may have\n-        // already dropped their count -- but if so, the unwrapper pointer\n-        // will have been set first, which the barriers ensure we will see.\n-        // (Note: using is_empty(), not take(), to not free the unwrapper.)\n-        if count == 1 && data.unwrapper.is_empty(Acquire) {\n-            // Tell this handle's destructor not to run (we are now it).\n-            this.data = ptr::mut_null();\n-            // FIXME(#3224) as above\n-            Right(data.data.take_unwrap())\n-        } else {\n-            cast::forget(data);\n-            Left(this)\n+    pub fn try_unwrap(self) -> Either<UnsafeAtomicRcBox<T>, T> {\n+        unsafe {\n+            let mut this = self; // FIXME(#4330) mutable self\n+            let mut data: ~AtomicRcBoxData<T> = cast::transmute(this.data);\n+            // This can of course race with anybody else who has a handle, but in\n+            // such a case, the returned count will always be at least 2. If we\n+            // see 1, no race was possible. All that matters is 1 or not-1.\n+            let count = data.count.load(Acquire);\n+            assert!(count >= 1);\n+            // The more interesting race is one with an unwrapper. They may have\n+            // already dropped their count -- but if so, the unwrapper pointer\n+            // will have been set first, which the barriers ensure we will see.\n+            // (Note: using is_empty(), not take(), to not free the unwrapper.)\n+            if count == 1 && data.unwrapper.is_empty(Acquire) {\n+                // Tell this handle's destructor not to run (we are now it).\n+                this.data = ptr::mut_null();\n+                // FIXME(#3224) as above\n+                Right(data.data.take_unwrap())\n+            } else {\n+                cast::forget(data);\n+                Left(this)\n+            }\n         }\n     }\n }\n@@ -370,7 +377,7 @@ impl<T:Send> Exclusive<T> {\n     pub fn unwrap(self) -> T {\n         let Exclusive { x: x } = self;\n         // Someday we might need to unkillably unwrap an Exclusive, but not today.\n-        let inner = unsafe { x.unwrap() };\n+        let inner = x.unwrap();\n         let ExData { data: user_data, _ } = inner; // will destroy the LittleLock\n         user_data\n     }\n@@ -472,51 +479,43 @@ mod tests {\n \n     #[test]\n     fn arclike_unwrap_basic() {\n-        unsafe {\n-            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n-            assert!(x.unwrap() == ~~\"hello\");\n-        }\n+        let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+        assert!(x.unwrap() == ~~\"hello\");\n     }\n \n     #[test]\n     fn arclike_try_unwrap() {\n-        unsafe {\n-            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n-            assert!(x.try_unwrap().expect_right(\"try_unwrap failed\") == ~~\"hello\");\n-        }\n+        let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+        assert!(x.try_unwrap().expect_right(\"try_unwrap failed\") == ~~\"hello\");\n     }\n \n     #[test]\n     fn arclike_try_unwrap_fail() {\n-        unsafe {\n-            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n-            let x2 = x.clone();\n-            let left_x = x.try_unwrap();\n-            assert!(left_x.is_left());\n-            util::ignore(left_x);\n-            assert!(x2.try_unwrap().expect_right(\"try_unwrap none\") == ~~\"hello\");\n-        }\n+        let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+        let x2 = x.clone();\n+        let left_x = x.try_unwrap();\n+        assert!(left_x.is_left());\n+        util::ignore(left_x);\n+        assert!(x2.try_unwrap().expect_right(\"try_unwrap none\") == ~~\"hello\");\n     }\n \n     #[test]\n     fn arclike_try_unwrap_unwrap_race() {\n         // When an unwrap and a try_unwrap race, the unwrapper should always win.\n-        unsafe {\n-            let x = UnsafeAtomicRcBox::new(~~\"hello\");\n-            let x2 = Cell::new(x.clone());\n-            let (p,c) = comm::stream();\n-            do task::spawn {\n-                c.send(());\n-                assert!(x2.take().unwrap() == ~~\"hello\");\n-                c.send(());\n-            }\n-            p.recv();\n-            task::yield(); // Try to make the unwrapper get blocked first.\n-            let left_x = x.try_unwrap();\n-            assert!(left_x.is_left());\n-            util::ignore(left_x);\n-            p.recv();\n+        let x = UnsafeAtomicRcBox::new(~~\"hello\");\n+        let x2 = Cell::new(x.clone());\n+        let (p,c) = comm::stream();\n+        do task::spawn {\n+            c.send(());\n+            assert!(x2.take().unwrap() == ~~\"hello\");\n+            c.send(());\n         }\n+        p.recv();\n+        task::yield(); // Try to make the unwrapper get blocked first.\n+        let left_x = x.try_unwrap();\n+        assert!(left_x.is_left());\n+        util::ignore(left_x);\n+        p.recv();\n     }\n \n     #[test]"}]}