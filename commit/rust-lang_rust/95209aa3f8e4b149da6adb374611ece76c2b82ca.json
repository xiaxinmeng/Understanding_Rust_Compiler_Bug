{"sha": "95209aa3f8e4b149da6adb374611ece76c2b82ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjA5YWEzZjhlNGIxNDlkYTZhZGIzNzQ2MTFlY2U3NmMyYjgyY2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T19:09:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-16T16:17:32Z"}, "message": "Make utf8 default, implement utf16 in terms of it", "tree": {"sha": "37e5b2aa72b597586f27c5200d25abb349d6c11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e5b2aa72b597586f27c5200d25abb349d6c11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95209aa3f8e4b149da6adb374611ece76c2b82ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95209aa3f8e4b149da6adb374611ece76c2b82ca", "html_url": "https://github.com/rust-lang/rust/commit/95209aa3f8e4b149da6adb374611ece76c2b82ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95209aa3f8e4b149da6adb374611ece76c2b82ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cc778c8c62e8f68531c1cadcce8b05b7287d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cc778c8c62e8f68531c1cadcce8b05b7287d84", "html_url": "https://github.com/rust-lang/rust/commit/00cc778c8c62e8f68531c1cadcce8b05b7287d84"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "a2c8db505d8ec89302db4532f26ab0037d6f90d4", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -95,7 +95,7 @@ pub use ide_db::{\n     },\n     call_info::CallInfo,\n     label::Label,\n-    line_index::{LineColUtf16, LineIndex},\n+    line_index::{LineCol, LineColUtf16, LineIndex},\n     search::{ReferenceAccess, SearchScope},\n     source_change::{FileSystemEdit, SourceChange},\n     symbol_index::Query,"}, {"sha": "8e9d8cca233db9f09f75f422d950d6dd9089bcff", "filename": "crates/ide_db/src/line_index.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -22,6 +22,14 @@ pub struct LineColUtf16 {\n     pub col: u32,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct LineCol {\n+    /// Zero-based\n+    pub line: u32,\n+    /// Zero-based utf8 offset\n+    pub col: u32,\n+}\n+\n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) struct Utf16Char {\n     /// Start offset of a character inside a line, zero-based\n@@ -88,18 +96,25 @@ impl LineIndex {\n         LineIndex { newlines, utf16_lines }\n     }\n \n-    pub fn line_col(&self, offset: TextSize) -> LineColUtf16 {\n+    pub fn line_col(&self, offset: TextSize) -> LineCol {\n         let line = partition_point(&self.newlines, |&it| it <= offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n+        LineCol { line: line as u32, col: col.into() }\n+    }\n+\n+    pub fn offset(&self, line_col: LineCol) -> TextSize {\n+        self.newlines[line_col.line as usize] + TextSize::from(line_col.col)\n+    }\n \n-        LineColUtf16 { line: line as u32, col: self.utf8_to_utf16_col(line as u32, col) as u32 }\n+    pub fn to_utf16(&self, line_col: LineCol) -> LineColUtf16 {\n+        let col = self.utf8_to_utf16_col(line_col.line, line_col.col.into());\n+        LineColUtf16 { line: line_col.line, col: col as u32 }\n     }\n \n-    pub fn offset(&self, line_col: LineColUtf16) -> TextSize {\n-        //FIXME: return Result\n+    pub fn to_utf8(&self, line_col: LineColUtf16) -> LineCol {\n         let col = self.utf16_to_utf8_col(line_col.line, line_col.col);\n-        self.newlines[line_col.line as usize] + col\n+        LineCol { line: line_col.line, col: col.into() }\n     }\n \n     pub fn lines(&self, range: TextRange) -> impl Iterator<Item = TextRange> + '_ {"}, {"sha": "09f3bca626c2e860bdccaaddcfb216a2e8b1af80", "filename": "crates/ide_db/src/line_index/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -17,14 +17,14 @@ fn test_line_index() {\n \n     let index = LineIndex::new(text);\n     for &(offset, line, col) in &table {\n-        assert_eq!(index.line_col(offset.into()), LineColUtf16 { line, col });\n+        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n     }\n \n     let text = \"\\nhello\\nworld\";\n     let table = [(0, 0, 0), (1, 1, 0), (2, 1, 1), (6, 1, 5), (7, 2, 0)];\n     let index = LineIndex::new(text);\n     for &(offset, line, col) in &table {\n-        assert_eq!(index.line_col(offset.into()), LineColUtf16 { line, col });\n+        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n     }\n }\n "}, {"sha": "877abd12b08ac9b5f3f0d054dd444830ffad57c4", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -5,7 +5,7 @@ use std::{env, path::PathBuf, str::FromStr, sync::Arc, time::Instant};\n use anyhow::{bail, format_err, Result};\n use hir::PrefixKind;\n use ide::{\n-    Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineColUtf16,\n+    Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n };\n use ide_db::{\n     base_db::{\n@@ -97,7 +97,7 @@ impl BenchCmd {\n                 let offset = host\n                     .analysis()\n                     .file_line_index(file_id)?\n-                    .offset(LineColUtf16 { line: pos.line - 1, col: pos.column });\n+                    .offset(LineCol { line: pos.line - 1, col: pos.column });\n                 let file_position = FilePosition { file_id, offset };\n \n                 if is_completion {"}, {"sha": "de995412c64725897b2b612a2c62cf8c7cd0d140", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -19,6 +19,7 @@ pub(crate) fn vfs_path(url: &lsp_types::Url) -> Result<vfs::VfsPath> {\n \n pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> TextSize {\n     let line_col = LineColUtf16 { line: position.line as u32, col: position.character as u32 };\n+    let line_col = line_index.to_utf8(line_col);\n     line_index.offset(line_col)\n }\n "}, {"sha": "ec5e8aa73c3fe82647591b7c331ab6d4f32c7b1b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95209aa3f8e4b149da6adb374611ece76c2b82ca/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=95209aa3f8e4b149da6adb374611ece76c2b82ca", "patch": "@@ -22,6 +22,7 @@ use crate::{\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n     let line_col = line_index.line_col(offset);\n+    let line_col = line_index.to_utf16(line_col);\n     lsp_types::Position::new(line_col.line, line_col.col)\n }\n "}]}