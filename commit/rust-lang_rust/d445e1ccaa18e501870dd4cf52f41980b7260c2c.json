{"sha": "d445e1ccaa18e501870dd4cf52f41980b7260c2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDVlMWNjYWExOGU1MDE4NzBkZDRjZjUyZjQxOTgwYjcyNjBjMmM=", "commit": {"author": {"name": "Douglas Creager", "email": "dcreager@github.com", "date": "2018-12-20T20:46:42Z"}, "committer": {"name": "Douglas Creager", "email": "dcreager@github.com", "date": "2018-12-20T21:01:32Z"}, "message": "Keep last redundant linker flag, not first\n\nWhen a library (L1) is passed to the linker multiple times, this is\nsometimes purposeful: there might be several other libraries in the\nlinker command (L2 and L3) that all depend on L1.  You'd end up with a\n(simplified) linker command that looks like:\n\n    -l2 -l1 -l3 -l1\n\nWith the previous behavior, when rustc encountered a redundant library,\nit would keep the first instance, and remove the later ones, resulting\nin:\n\n    -l2 -l1 -l3\n\nThis can cause a linker error, because on some platforms (e.g. Linux),\nthe linker will only include symbols from L1 that are needed *at the\npoint it's referenced in the command line*.  So if L3 depends on\nadditional symbols from L1, which aren't needed by L2, the linker won't\nknow to include them, and you'll end up with \"undefined symbols\" errors.\n\nA better behavior is to keep the *last* instance of the library:\n\n    -l2 -l3 -l1\n\nThis ensures that all \"downstream\" libraries have been included in the\nlinker command before the \"upstream\" library is referenced.\n\nFixes rust-lang#47989", "tree": {"sha": "9d4ec82cdcdce3f5eab4cf4e4dc455870d954514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4ec82cdcdce3f5eab4cf4e4dc455870d954514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d445e1ccaa18e501870dd4cf52f41980b7260c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d445e1ccaa18e501870dd4cf52f41980b7260c2c", "html_url": "https://github.com/rust-lang/rust/commit/d445e1ccaa18e501870dd4cf52f41980b7260c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d445e1ccaa18e501870dd4cf52f41980b7260c2c/comments", "author": {"login": "dcreager", "id": 7499, "node_id": "MDQ6VXNlcjc0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcreager", "html_url": "https://github.com/dcreager", "followers_url": "https://api.github.com/users/dcreager/followers", "following_url": "https://api.github.com/users/dcreager/following{/other_user}", "gists_url": "https://api.github.com/users/dcreager/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcreager/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcreager/subscriptions", "organizations_url": "https://api.github.com/users/dcreager/orgs", "repos_url": "https://api.github.com/users/dcreager/repos", "events_url": "https://api.github.com/users/dcreager/events{/privacy}", "received_events_url": "https://api.github.com/users/dcreager/received_events", "type": "User", "site_admin": true}, "committer": {"login": "dcreager", "id": 7499, "node_id": "MDQ6VXNlcjc0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcreager", "html_url": "https://github.com/dcreager", "followers_url": "https://api.github.com/users/dcreager/followers", "following_url": "https://api.github.com/users/dcreager/following{/other_user}", "gists_url": "https://api.github.com/users/dcreager/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcreager/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcreager/subscriptions", "organizations_url": "https://api.github.com/users/dcreager/orgs", "repos_url": "https://api.github.com/users/dcreager/repos", "events_url": "https://api.github.com/users/dcreager/events{/privacy}", "received_events_url": "https://api.github.com/users/dcreager/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "html_url": "https://github.com/rust-lang/rust/commit/4755e2f3b635ad7391ba88b18672b05cbae5ba4c"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "480c344f38123be10fac238979946fc444326066", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d445e1ccaa18e501870dd4cf52f41980b7260c2c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445e1ccaa18e501870dd4cf52f41980b7260c2c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=d445e1ccaa18e501870dd4cf52f41980b7260c2c", "patch": "@@ -13,6 +13,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n+#![feature(drain_filter)]\n #![feature(libc)]\n #![feature(nll)]\n #![feature(proc_macro_internals)]"}, {"sha": "1ea4e4370eb1bd188097574802423f02926c25b9", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d445e1ccaa18e501870dd4cf52f41980b7260c2c/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445e1ccaa18e501870dd4cf52f41980b7260c2c/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=d445e1ccaa18e501870dd4cf52f41980b7260c2c", "patch": "@@ -208,34 +208,31 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n         }\n \n         // Update kind and, optionally, the name of all native libraries\n-        // (there may be more than one) with the specified name.\n+        // (there may be more than one) with the specified name.  If any\n+        // library is mentioned more than once, keep the latest mention\n+        // of it, so that any possible dependent libraries appear before\n+        // it.  (This ensures that the linker is able to see symbols from\n+        // all possible dependent libraries before linking in the library\n+        // in question.)\n         for &(ref name, ref new_name, kind) in &self.tcx.sess.opts.libs {\n-            let mut found = false;\n-            for lib in self.libs.iter_mut() {\n-                let lib_name = match lib.name {\n-                    Some(n) => n,\n-                    None => continue,\n-                };\n-                if lib_name == name as &str {\n-                    let mut changed = false;\n-                    if let Some(k) = kind {\n-                        lib.kind = k;\n-                        changed = true;\n-                    }\n-                    if let &Some(ref new_name) = new_name {\n-                        lib.name = Some(Symbol::intern(new_name));\n-                        changed = true;\n-                    }\n-                    if !changed {\n-                        let msg = format!(\"redundant linker flag specified for \\\n-                                           library `{}`\", name);\n-                        self.tcx.sess.warn(&msg);\n+            // If we've already added any native libraries with the same\n+            // name, they will be pulled out into `moved`, so that we can\n+            // move them to the end of the list below.\n+            let mut existing = self.libs.drain_filter(|lib| {\n+                if let Some(lib_name) = lib.name {\n+                    if lib_name == name as &str {\n+                        if let Some(k) = kind {\n+                            lib.kind = k;\n+                        }\n+                        if let &Some(ref new_name) = new_name {\n+                            lib.name = Some(Symbol::intern(new_name));\n+                        }\n+                        return true;\n                     }\n-\n-                    found = true;\n                 }\n-            }\n-            if !found {\n+                false\n+            }).collect::<Vec<_>>();\n+            if existing.is_empty() {\n                 // Add if not found\n                 let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLibrary {\n@@ -246,6 +243,10 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n                     wasm_import_module: None,\n                 };\n                 self.register_native_lib(None, lib);\n+            } else {\n+                // Move all existing libraries with the same name to the\n+                // end of the command line.\n+                self.libs.append(&mut existing);\n             }\n         }\n     }"}]}