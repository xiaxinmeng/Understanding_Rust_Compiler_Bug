{"sha": "543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0M2ZlNWI0MTNiZWU3Zjc2MzdjMDI4YjRiNjdiNWRhYTk3ZTFiOGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-06T00:02:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-06T20:49:20Z"}, "message": "Fix libfmt_macros tests", "tree": {"sha": "2b8507fd86e66fb7ab98606c4fd2da44445a8a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8507fd86e66fb7ab98606c4fd2da44445a8a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "html_url": "https://github.com/rust-lang/rust/commit/543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543fe5b413bee7f7637c028b4b67b5daa97e1b8e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c271db284bea3882fe033afb1cd4c6f370c69dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c271db284bea3882fe033afb1cd4c6f370c69dd5", "html_url": "https://github.com/rust-lang/rust/commit/c271db284bea3882fe033afb1cd4c6f370c69dd5"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "24b19028ac1179e65cff77613606a4eb8666fd03", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/543fe5b413bee7f7637c028b4b67b5daa97e1b8e/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543fe5b413bee7f7637c028b4b67b5daa97e1b8e/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "patch": "@@ -35,7 +35,7 @@ impl InnerOffset {\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -45,7 +45,7 @@ pub enum Piece<'a> {\n }\n \n /// Representation of an argument specification.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position,\n@@ -54,7 +54,7 @@ pub struct Argument<'a> {\n }\n \n /// Specification for the formatting of an argument in the format string.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with.\n     pub fill: Option<char>,\n@@ -79,7 +79,7 @@ pub struct FormatSpec<'a> {\n }\n \n /// Enum describing where an argument for a format can be located.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Position {\n     /// The argument is implied to be located at an index\n     ArgumentImplicitlyIs(usize),\n@@ -99,7 +99,7 @@ impl Position {\n }\n \n /// Enum of alignments which are supported.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -113,7 +113,7 @@ pub enum Alignment {\n \n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -133,7 +133,7 @@ pub enum Flag {\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Count {\n     /// The count is specified explicitly.\n     CountIs(usize),\n@@ -572,10 +572,11 @@ impl<'a> Parser<'a> {\n         } else {\n             spec.ty = self.word();\n             let ty_span_end = self.cur.peek().map(|(pos, _)| *pos);\n-            let this = self;\n-            spec.ty_span = ty_span_start\n-                .and_then(|s| ty_span_end.map(|e| (s, e)))\n-                .map(|(start, end)| this.to_span_index(start).to(this.to_span_index(end)));\n+            if !spec.ty.is_empty() {\n+                spec.ty_span = ty_span_start\n+                    .and_then(|s| ty_span_end.map(|e| (s, e)))\n+                    .map(|(start, end)| self.to_span_index(start).to(self.to_span_index(end)));\n+            }\n         }\n         spec\n     }"}, {"sha": "81359033eda29f7aa64ab5dee11e28d125468cb4", "filename": "src/libfmt_macros/tests.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/543fe5b413bee7f7637c028b4b67b5daa97e1b8e/src%2Flibfmt_macros%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543fe5b413bee7f7637c028b4b67b5daa97e1b8e/src%2Flibfmt_macros%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Ftests.rs?ref=543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n fn same(fmt: &'static str, p: &[Piece<'static>]) {\n     let parser = Parser::new(fmt, None, vec![], false);\n-    assert!(parser.collect::<Vec<Piece<'static>>>() == p);\n+    assert_eq!(parser.collect::<Vec<Piece<'static>>>(), p);\n }\n \n fn fmtdflt() -> FormatSpec<'static> {\n@@ -15,6 +15,7 @@ fn fmtdflt() -> FormatSpec<'static> {\n         precision_span: None,\n         width_span: None,\n         ty: \"\",\n+        ty_span: None,\n     };\n }\n \n@@ -82,7 +83,7 @@ fn format_position_nothing_else() {\n #[test]\n fn format_type() {\n     same(\n-        \"{3:a}\",\n+        \"{3:x}\",\n         &[NextArgument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n@@ -93,7 +94,8 @@ fn format_type() {\n                 width: CountImplied,\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"a\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n }\n@@ -112,6 +114,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -127,6 +130,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -142,6 +146,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"abcd\",\n+                ty_span: Some(InnerSpan::new(6, 10)),\n             },\n         })]);\n }\n@@ -150,7 +155,7 @@ fn format_counts() {\n     use syntax_pos::{GLOBALS, Globals, edition};\n     GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n     same(\n-        \"{:10s}\",\n+        \"{:10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -161,11 +166,12 @@ fn format_counts() {\n                 width: CountIs(10),\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:10$.10s}\",\n+        \"{:10$.10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -176,11 +182,12 @@ fn format_counts() {\n                 width: CountIsParam(10),\n                 precision_span: None,\n                 width_span: Some(InnerSpan::new(3, 6)),\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:.*s}\",\n+        \"{:.*x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(1),\n             format: FormatSpec {\n@@ -191,11 +198,12 @@ fn format_counts() {\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 5)),\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:.10$s}\",\n+        \"{:.10$x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -206,11 +214,12 @@ fn format_counts() {\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 7)),\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:a$.b$s}\",\n+        \"{:a$.b$?}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -221,7 +230,8 @@ fn format_counts() {\n                 width: CountIsName(Symbol::intern(\"a\")),\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"?\",\n+                ty_span: None,\n             },\n         })]);\n     });\n@@ -241,6 +251,7 @@ fn format_flags() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -256,13 +267,14 @@ fn format_flags() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n }\n #[test]\n fn format_mixture() {\n     same(\n-        \"abcd {3:a} efg\",\n+        \"abcd {3:x} efg\",\n         &[\n             String(\"abcd \"),\n             NextArgument(Argument {\n@@ -275,7 +287,8 @@ fn format_mixture() {\n                     width: CountImplied,\n                     precision_span: None,\n                     width_span: None,\n-                    ty: \"a\",\n+                    ty: \"x\",\n+                    ty_span: None,\n                 },\n             }),\n             String(\" efg\"),"}]}