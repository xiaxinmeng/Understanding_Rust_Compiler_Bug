{"sha": "5d0631a6438cf30cac236b7176371663e35c8d07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDYzMWE2NDM4Y2YzMGNhYzIzNmI3MTc2MzcxNjYzZTM1YzhkMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-30T20:34:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-30T20:34:23Z"}, "message": "Auto merge of #51215 - eddyb:visit-for-a-lifetime, r=nikomatsakis\n\n rustc: don't visit lifetime parameters through visit_lifetime.\n\nIdeally we'd also not use the `Lifetime` struct for parameters, but I'll leave that to @varkor (#48149).\nFixes #51185 (discovered while auditing all the `visit_lifetime` implementations).\nr? @nikomatsakis", "tree": {"sha": "967fe0282e0a8383a02341435ccec59b7dd157e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967fe0282e0a8383a02341435ccec59b7dd157e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d0631a6438cf30cac236b7176371663e35c8d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0631a6438cf30cac236b7176371663e35c8d07", "html_url": "https://github.com/rust-lang/rust/commit/5d0631a6438cf30cac236b7176371663e35c8d07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d0631a6438cf30cac236b7176371663e35c8d07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fddb46eda35be880945348e1ec40260af9306d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/fddb46eda35be880945348e1ec40260af9306d74", "html_url": "https://github.com/rust-lang/rust/commit/fddb46eda35be880945348e1ec40260af9306d74"}, {"sha": "5c76b64546a0bb8f087562e4d19d62b828c8d6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c76b64546a0bb8f087562e4d19d62b828c8d6d0", "html_url": "https://github.com/rust-lang/rust/commit/5c76b64546a0bb8f087562e4d19d62b828c8d6d0"}], "stats": {"total": 265, "additions": 122, "deletions": 143}, "files": [{"sha": "5471568d0af04622b4b61740abe7107d91f31841", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -580,8 +580,8 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyBareFn(ref function_declaration) => {\n-            visitor.visit_fn_decl(&function_declaration.decl);\n             walk_list!(visitor, visit_generic_param, &function_declaration.generic_params);\n+            visitor.visit_fn_decl(&function_declaration.decl);\n         }\n         TyPath(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.id, typ.span);\n@@ -733,7 +733,16 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyPar\n pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam) {\n     match *param {\n         GenericParam::Lifetime(ref ld) => {\n-            visitor.visit_lifetime(&ld.lifetime);\n+            visitor.visit_id(ld.lifetime.id);\n+            match ld.lifetime.name {\n+                LifetimeName::Name(name) => {\n+                    visitor.visit_name(ld.lifetime.span, name);\n+                }\n+                LifetimeName::Fresh(_) |\n+                LifetimeName::Static |\n+                LifetimeName::Implicit |\n+                LifetimeName::Underscore => {}\n+            }\n             walk_list!(visitor, visit_lifetime, &ld.bounds);\n         }\n         GenericParam::Type(ref ty_param) => {"}, {"sha": "af269078b64e19414669521c0537e4a665fd9538", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -1214,7 +1214,13 @@ impl<'a> LoweringContext<'a> {\n                 if let &hir::Ty_::TyBareFn(_) = &t.node {\n                     let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n                     self.collect_elided_lifetimes = false;\n+\n+                    // Record the \"stack height\" of `for<'a>` lifetime bindings\n+                    // to be able to later fully undo their introduction.\n+                    let old_len = self.currently_bound_lifetimes.len();\n                     hir::intravisit::walk_ty(self, t);\n+                    self.currently_bound_lifetimes.truncate(old_len);\n+\n                     self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n                     hir::intravisit::walk_ty(self, t);\n@@ -1223,28 +1229,25 @@ impl<'a> LoweringContext<'a> {\n \n             fn visit_poly_trait_ref(\n                 &mut self,\n-                polytr: &'v hir::PolyTraitRef,\n-                _: hir::TraitBoundModifier,\n+                trait_ref: &'v hir::PolyTraitRef,\n+                modifier: hir::TraitBoundModifier,\n             ) {\n+                // Record the \"stack height\" of `for<'a>` lifetime bindings\n+                // to be able to later fully undo their introduction.\n                 let old_len = self.currently_bound_lifetimes.len();\n+                hir::intravisit::walk_poly_trait_ref(self, trait_ref, modifier);\n+                self.currently_bound_lifetimes.truncate(old_len);\n+            }\n \n+            fn visit_generic_param(&mut self, param: &'v hir::GenericParam) {\n                 // Record the introduction of 'a in `for<'a> ...`\n-                for param in &polytr.bound_generic_params {\n-                    if let hir::GenericParam::Lifetime(ref lt_def) = *param {\n-                        // Introduce lifetimes one at a time so that we can handle\n-                        // cases like `fn foo<'d>() -> impl for<'a, 'b: 'a, 'c: 'b + 'd>`\n-                        self.currently_bound_lifetimes.push(lt_def.lifetime.name);\n-\n-                        // Visit the lifetime bounds\n-                        for lt_bound in &lt_def.bounds {\n-                            self.visit_lifetime(&lt_bound);\n-                        }\n-                    }\n+                if let hir::GenericParam::Lifetime(ref lt_def) = *param {\n+                    // Introduce lifetimes one at a time so that we can handle\n+                    // cases like `fn foo<'d>() -> impl for<'a, 'b: 'a, 'c: 'b + 'd>`\n+                    self.currently_bound_lifetimes.push(lt_def.lifetime.name);\n                 }\n \n-                hir::intravisit::walk_trait_ref(self, &polytr.trait_ref);\n-\n-                self.currently_bound_lifetimes.truncate(old_len);\n+                hir::intravisit::walk_generic_param(self, param);\n             }\n \n             fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {"}, {"sha": "13df1ced6032e02880d31c5ca73d5eda8cf95384", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -346,12 +346,16 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_generics(&mut self, generics: &'hir Generics) {\n-        for ty_param in generics.ty_params() {\n-            self.insert(ty_param.id, NodeTyParam(ty_param));\n+    fn visit_generic_param(&mut self, param: &'hir GenericParam) {\n+        match *param {\n+            GenericParam::Lifetime(ref ld) => {\n+                self.insert(ld.lifetime.id, NodeLifetime(&ld.lifetime));\n+            }\n+            GenericParam::Type(ref ty_param) => {\n+                self.insert(ty_param.id, NodeTyParam(ty_param));\n+            }\n         }\n-\n-        intravisit::walk_generics(self, generics);\n+        intravisit::walk_generic_param(self, param);\n     }\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem) {"}, {"sha": "c82597813e2e3ed77c0faa4d8fa644aa76813625", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 37, "deletions": 63, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -1928,10 +1928,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             fn visit_generic_param(&mut self, param: &hir::GenericParam) {\n-                if let hir::GenericParam::Lifetime(ref lifetime_def) = *param {\n-                    for l in &lifetime_def.bounds {\n-                        self.visit_lifetime(l);\n-                    }\n+                if let hir::GenericParam::Lifetime(_) = *param {\n+                    // FIXME(eddyb) Do we want this? It only makes a difference\n+                    // if this `for<'a>` lifetime parameter is never used.\n+                    self.have_bound_regions = true;\n                 }\n \n                 intravisit::walk_generic_param(self, param);\n@@ -2144,28 +2144,26 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     fn check_lifetime_params(&mut self, old_scope: ScopeRef, params: &'tcx [hir::GenericParam]) {\n         for (i, lifetime_i) in params.lifetimes().enumerate() {\n-            for lifetime in params.lifetimes() {\n-                match lifetime.lifetime.name {\n-                    hir::LifetimeName::Static | hir::LifetimeName::Underscore => {\n-                        let lifetime = lifetime.lifetime;\n-                        let name = lifetime.name.name();\n-                        let mut err = struct_span_err!(\n-                            self.tcx.sess,\n-                            lifetime.span,\n-                            E0262,\n-                            \"invalid lifetime parameter name: `{}`\",\n-                            name\n-                        );\n-                        err.span_label(\n-                            lifetime.span,\n-                            format!(\"{} is a reserved lifetime name\", name),\n-                        );\n-                        err.emit();\n-                    }\n-                    hir::LifetimeName::Fresh(_)\n-                    | hir::LifetimeName::Implicit\n-                    | hir::LifetimeName::Name(_) => {}\n+            match lifetime_i.lifetime.name {\n+                hir::LifetimeName::Static | hir::LifetimeName::Underscore => {\n+                    let lifetime = lifetime_i.lifetime;\n+                    let name = lifetime.name.name();\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        lifetime.span,\n+                        E0262,\n+                        \"invalid lifetime parameter name: `{}`\",\n+                        name\n+                    );\n+                    err.span_label(\n+                        lifetime.span,\n+                        format!(\"{} is a reserved lifetime name\", name),\n+                    );\n+                    err.emit();\n                 }\n+                hir::LifetimeName::Fresh(_)\n+                | hir::LifetimeName::Implicit\n+                | hir::LifetimeName::Name(_) => {}\n             }\n \n             // It is a hard error to shadow a lifetime within the same scope.\n@@ -2347,31 +2345,18 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             | Region::LateBound(_, def_id, _)\n             | Region::EarlyBound(_, def_id, _) => {\n                 // A lifetime declared by the user.\n-                let def_local_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n-                if def_local_id == lifetime_ref.id {\n-                    // This is weird. Because the HIR defines a\n-                    // lifetime *definition* as wrapping a Lifetime,\n-                    // we wind up invoking this method also for the\n-                    // definitions in some cases (notably\n-                    // higher-ranked types). This means that a\n-                    // lifetime with one use (e.g., `for<'a> fn(&'a\n-                    // u32)`) wind up being counted as two uses.  To\n-                    // avoid that, we just ignore the lifetime that\n-                    // corresponds to the definition.\n+                let track_lifetime_uses = self.track_lifetime_uses();\n+                debug!(\n+                    \"insert_lifetime: track_lifetime_uses={}\",\n+                    track_lifetime_uses\n+                );\n+                if track_lifetime_uses && !self.lifetime_uses.contains_key(&def_id) {\n+                    debug!(\"insert_lifetime: first use of {:?}\", def_id);\n+                    self.lifetime_uses\n+                        .insert(def_id, LifetimeUseSet::One(lifetime_ref));\n                 } else {\n-                    let track_lifetime_uses = self.track_lifetime_uses();\n-                    debug!(\n-                        \"insert_lifetime: track_lifetime_uses={}\",\n-                        track_lifetime_uses\n-                    );\n-                    if track_lifetime_uses && !self.lifetime_uses.contains_key(&def_id) {\n-                        debug!(\"insert_lifetime: first use of {:?}\", def_id);\n-                        self.lifetime_uses\n-                            .insert(def_id, LifetimeUseSet::One(lifetime_ref));\n-                    } else {\n-                        debug!(\"insert_lifetime: many uses of {:?}\", def_id);\n-                        self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n-                    }\n+                    debug!(\"insert_lifetime: many uses of {:?}\", def_id);\n+                    self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n                 }\n             }\n         }\n@@ -2424,31 +2409,20 @@ fn insert_late_bound_lifetimes(\n     let mut appears_in_where_clause = AllCollector {\n         regions: FxHashSet(),\n     };\n+    appears_in_where_clause.visit_generics(generics);\n \n     for param in &generics.params {\n         match *param {\n             hir::GenericParam::Lifetime(ref lifetime_def) => {\n                 if !lifetime_def.bounds.is_empty() {\n                     // `'a: 'b` means both `'a` and `'b` are referenced\n-                    appears_in_where_clause.visit_generic_param(param);\n+                    appears_in_where_clause.regions.insert(lifetime_def.lifetime.name);\n                 }\n             }\n-            hir::GenericParam::Type(ref ty_param) => {\n-                walk_list!(\n-                    &mut appears_in_where_clause,\n-                    visit_ty_param_bound,\n-                    &ty_param.bounds\n-                );\n-            }\n+            hir::GenericParam::Type(_) => {}\n         }\n     }\n \n-    walk_list!(\n-        &mut appears_in_where_clause,\n-        visit_where_predicate,\n-        &generics.where_clause.predicates\n-    );\n-\n     debug!(\n         \"insert_late_bound_lifetimes: appears_in_where_clause={:?}\",\n         appears_in_where_clause.regions"}, {"sha": "39e0a5392580b26349dea251d897dac2f6bf6220", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -441,6 +441,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_generics(self, g)\n     }\n \n+    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+        if let GenericParam::Lifetime(ref ld) = *param {\n+            self.check_lifetime(ld.lifetime.ident);\n+        }\n+        visit::walk_generic_param(self, param);\n+    }\n+\n     fn visit_pat(&mut self, pat: &'a Pat) {\n         match pat.node {\n             PatKind::Lit(ref expr) => {"}, {"sha": "2f209b347a4b6f925e2d2337a85677fd89ea6a61", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 54, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -205,14 +205,6 @@ pub trait Folder : Sized {\n         noop_fold_label(label, self)\n     }\n \n-    fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime {\n-        noop_fold_lifetime(l, self)\n-    }\n-\n-    fn fold_lifetime_def(&mut self, l: LifetimeDef) -> LifetimeDef {\n-        noop_fold_lifetime_def(l, self)\n-    }\n-\n     fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> {\n         noop_fold_attribute(at, self)\n     }\n@@ -237,14 +229,6 @@ pub trait Folder : Sized {\n         noop_fold_variant_data(vdata, self)\n     }\n \n-    fn fold_lifetimes(&mut self, lts: Vec<Lifetime>) -> Vec<Lifetime> {\n-        noop_fold_lifetimes(lts, self)\n-    }\n-\n-    fn fold_lifetime_defs(&mut self, lts: Vec<LifetimeDef>) -> Vec<LifetimeDef> {\n-        noop_fold_lifetime_defs(lts, self)\n-    }\n-\n     fn fold_ty_param(&mut self, tp: TyParam) -> TyParam {\n         noop_fold_ty_param(tp, self)\n     }\n@@ -273,10 +257,6 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_lifetime(&mut self, o_lt: Option<Lifetime>) -> Option<Lifetime> {\n-        noop_fold_opt_lifetime(o_lt, self)\n-    }\n-\n     fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>)\n                        -> Option<TyParamBounds> {\n         noop_fold_opt_bounds(b, self)\n@@ -376,7 +356,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::Slice(ty) => TyKind::Slice(fld.fold_ty(ty)),\n             TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n             TyKind::Rptr(region, mt) => {\n-                TyKind::Rptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n+                TyKind::Rptr(region.map(|lt| noop_fold_lifetime(lt, fld)), fld.fold_mt(mt))\n             }\n             TyKind::BareFn(f) => {\n                 TyKind::BareFn(f.map(|BareFnTy {generic_params, unsafety, abi, decl}| BareFnTy {\n@@ -478,7 +458,7 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedP\n                                                            -> AngleBracketedParameterData\n {\n     let AngleBracketedParameterData { lifetimes, types, bindings, span } = data;\n-    AngleBracketedParameterData { lifetimes: fld.fold_lifetimes(lifetimes),\n+    AngleBracketedParameterData { lifetimes: lifetimes.move_map(|l| noop_fold_lifetime(l, fld)),\n                                   types: types.move_map(|ty| fld.fold_ty(ty)),\n                                   bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n                                   span: fld.new_span(span) }\n@@ -680,7 +660,7 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n                                    where T: Folder {\n     match tpb {\n         TraitTyParamBound(ty, modifier) => TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier),\n-        RegionTyParamBound(lifetime) => RegionTyParamBound(fld.fold_lifetime(lifetime)),\n+        RegionTyParamBound(lifetime) => RegionTyParamBound(noop_fold_lifetime(lifetime, fld)),\n     }\n }\n \n@@ -701,7 +681,20 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n \n pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n     match param {\n-        GenericParam::Lifetime(l) => GenericParam::Lifetime(fld.fold_lifetime_def(l)),\n+        GenericParam::Lifetime(l) => {\n+            let attrs: Vec<_> = l.attrs.into();\n+            GenericParam::Lifetime(LifetimeDef {\n+                attrs: attrs.into_iter()\n+                    .flat_map(|x| fld.fold_attribute(x).into_iter())\n+                    .collect::<Vec<_>>()\n+                    .into(),\n+                lifetime: Lifetime {\n+                    id: fld.new_id(l.lifetime.id),\n+                    ident: fld.fold_ident(l.lifetime.ident),\n+                },\n+                bounds: l.bounds.move_map(|l| noop_fold_lifetime(l, fld)),\n+            })\n+        }\n         GenericParam::Type(t) => GenericParam::Type(fld.fold_ty_param(t)),\n     }\n }\n@@ -719,40 +712,13 @@ pub fn noop_fold_label<T: Folder>(label: Label, fld: &mut T) -> Label {\n     }\n }\n \n-pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n+fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n     Lifetime {\n         id: fld.new_id(l.id),\n         ident: fld.fold_ident(l.ident),\n     }\n }\n \n-pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T)\n-                                         -> LifetimeDef {\n-    let attrs: Vec<_> = l.attrs.into();\n-    LifetimeDef {\n-        attrs: attrs.into_iter()\n-            .flat_map(|x| fld.fold_attribute(x).into_iter())\n-            .collect::<Vec<_>>()\n-            .into(),\n-        lifetime: fld.fold_lifetime(l.lifetime),\n-        bounds: fld.fold_lifetimes(l.bounds),\n-    }\n-}\n-\n-pub fn noop_fold_lifetimes<T: Folder>(lts: Vec<Lifetime>, fld: &mut T) -> Vec<Lifetime> {\n-    lts.move_map(|l| fld.fold_lifetime(l))\n-}\n-\n-pub fn noop_fold_lifetime_defs<T: Folder>(lts: Vec<LifetimeDef>, fld: &mut T)\n-                                          -> Vec<LifetimeDef> {\n-    lts.move_map(|l| fld.fold_lifetime_def(l))\n-}\n-\n-pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T)\n-                                         -> Option<Lifetime> {\n-    o_lt.map(|lt| fld.fold_lifetime(lt))\n-}\n-\n pub fn noop_fold_generics<T: Folder>(Generics { params, where_clause, span }: Generics,\n                                      fld: &mut T) -> Generics {\n     Generics {\n@@ -796,8 +762,8 @@ pub fn noop_fold_where_predicate<T: Folder>(\n                                                                        span}) => {\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 span: fld.new_span(span),\n-                lifetime: fld.fold_lifetime(lifetime),\n-                bounds: bounds.move_map(|bound| fld.fold_lifetime(bound))\n+                lifetime: noop_fold_lifetime(lifetime, fld),\n+                bounds: bounds.move_map(|bound| noop_fold_lifetime(bound, fld))\n             })\n         }\n         ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{id,"}, {"sha": "dca0e2f634c74f109446104755a2d88f1219d5d8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -318,8 +318,8 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyKind::BareFn(ref function_declaration) => {\n-            walk_fn_decl(visitor, &function_declaration.decl);\n             walk_list!(visitor, visit_generic_param, &function_declaration.generic_params);\n+            walk_fn_decl(visitor, &function_declaration.decl);\n         }\n         TyKind::Path(ref maybe_qself, ref path) => {\n             if let Some(ref qself) = *maybe_qself {\n@@ -485,7 +485,7 @@ pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyPar\n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     match *param {\n         GenericParam::Lifetime(ref l) => {\n-            visitor.visit_lifetime(&l.lifetime);\n+            visitor.visit_ident(l.lifetime.ident);\n             walk_list!(visitor, visit_lifetime, &l.bounds);\n             walk_list!(visitor, visit_attribute, &*l.attrs);\n         }"}, {"sha": "6a6698957d9d1e6335f27d8724b09788af18a07c", "filename": "src/test/compile-fail/underscore-lifetime-binders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Ftest%2Fcompile-fail%2Funderscore-lifetime-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Ftest%2Fcompile-fail%2Funderscore-lifetime-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funderscore-lifetime-binders.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -23,7 +23,6 @@ impl<'a> Meh<'a> for u8 {}\n \n fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR invalid lifetime parameter name: `'_`\n //~^ ERROR missing lifetime specifier\n-//~^^ ERROR missing lifetime specifier\n {\n   Box::new(5u8)\n }"}, {"sha": "8e286ad1419f24c9cc117f3a175b1503e18200d8", "filename": "src/test/run-pass/issue-51185.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Ftest%2Frun-pass%2Fissue-51185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0631a6438cf30cac236b7176371663e35c8d07/src%2Ftest%2Frun-pass%2Fissue-51185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-51185.rs?ref=5d0631a6438cf30cac236b7176371663e35c8d07", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() -> impl Into<for<'a> fn(&'a ())> {\n+    (|_| {}) as for<'a> fn(&'a ())\n+}\n+\n+fn main() {\n+    foo().into()(&());\n+}"}]}