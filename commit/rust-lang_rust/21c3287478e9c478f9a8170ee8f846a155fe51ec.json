{"sha": "21c3287478e9c478f9a8170ee8f846a155fe51ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzMyODc0NzhlOWM0NzhmOWE4MTcwZWU4Zjg0NmExNTVmZTUxZWM=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-22T22:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-22T22:34:21Z"}, "message": "Rollup merge of #35860 - matthew-piziak:mul-example, r=GuillaumeGomez\n\nreplace `Mul` example with something more evocative of multiplication\n\nI may have gone a bit overboard on this one. Numbers are fun.", "tree": {"sha": "0161b1d5f8b1863e1185de037a79c528b97b8398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0161b1d5f8b1863e1185de037a79c528b97b8398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c3287478e9c478f9a8170ee8f846a155fe51ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c3287478e9c478f9a8170ee8f846a155fe51ec", "html_url": "https://github.com/rust-lang/rust/commit/21c3287478e9c478f9a8170ee8f846a155fe51ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c3287478e9c478f9a8170ee8f846a155fe51ec/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c84ac124adb75999bf17e052a2ffabcd530a66d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c84ac124adb75999bf17e052a2ffabcd530a66d", "html_url": "https://github.com/rust-lang/rust/commit/0c84ac124adb75999bf17e052a2ffabcd530a66d"}, {"sha": "38f0bca8657fa330561edb4dca04efe8a898f6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f0bca8657fa330561edb4dca04efe8a898f6ea", "html_url": "https://github.com/rust-lang/rust/commit/38f0bca8657fa330561edb4dca04efe8a898f6ea"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "a212ea6798092b0cf3adc78ebd2bd9782b29f74c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/21c3287478e9c478f9a8170ee8f846a155fe51ec/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c3287478e9c478f9a8170ee8f846a155fe51ec/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=21c3287478e9c478f9a8170ee8f846a155fe51ec", "patch": "@@ -299,26 +299,63 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Mul`. When `Foo * Foo` happens, it ends up\n-/// calling `mul`, and therefore, `main` prints `Multiplying!`.\n+/// Implementing a `Mul`tipliable rational number struct:\n ///\n /// ```\n /// use std::ops::Mul;\n ///\n-/// struct Foo;\n+/// // The uniqueness of rational numbers in lowest terms is a consequence of\n+/// // the fundamental theorem of arithmetic.\n+/// #[derive(Eq)]\n+/// #[derive(PartialEq, Debug)]\n+/// struct Rational {\n+///     nominator: usize,\n+///     denominator: usize,\n+/// }\n ///\n-/// impl Mul for Foo {\n-///     type Output = Foo;\n+/// impl Rational {\n+///     fn new(nominator: usize, denominator: usize) -> Self {\n+///         if denominator == 0 {\n+///             panic!(\"Zero is an invalid denominator!\");\n+///         }\n ///\n-///     fn mul(self, _rhs: Foo) -> Foo {\n-///         println!(\"Multiplying!\");\n-///         self\n+///         // Reduce to lowest terms by dividing by the greatest common\n+///         // divisor.\n+///         let gcd = gcd(nominator, denominator);\n+///         Rational {\n+///             nominator: nominator / gcd,\n+///             denominator: denominator / gcd,\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     Foo * Foo;\n+/// impl Mul for Rational {\n+///     // The multiplication of rational numbers is a closed operation.\n+///     type Output = Self;\n+///\n+///     fn mul(self, rhs: Self) -> Self {\n+///         let nominator = self.nominator * rhs.nominator;\n+///         let denominator = self.denominator * rhs.denominator;\n+///         Rational::new(nominator, denominator)\n+///     }\n /// }\n+///\n+/// // Euclid's two-thousand-year-old algorithm for finding the greatest common\n+/// // divisor.\n+/// fn gcd(x: usize, y: usize) -> usize {\n+///     let mut x = x;\n+///     let mut y = y;\n+///     while y != 0 {\n+///         let t = y;\n+///         y = x % y;\n+///         x = t;\n+///     }\n+///     x\n+/// }\n+///\n+/// assert_eq!(Rational::new(1, 2), Rational::new(2, 4));\n+/// assert_eq!(Rational::new(2, 3) * Rational::new(3, 4),\n+///            Rational::new(1, 2));\n /// ```\n ///\n /// Note that `RHS = Self` by default, but this is not mandatory. Here is an"}]}