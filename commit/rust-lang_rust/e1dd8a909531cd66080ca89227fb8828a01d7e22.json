{"sha": "e1dd8a909531cd66080ca89227fb8828a01d7e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZGQ4YTkwOTUzMWNkNjYwODBjYTg5MjI3ZmI4ODI4YTAxZDdlMjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-14T01:19:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:37:24Z"}, "message": "When trait bounds are missing for return values, point at them", "tree": {"sha": "f6a3acac1b8ee381b28111f863ca74d6d578b253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a3acac1b8ee381b28111f863ca74d6d578b253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1dd8a909531cd66080ca89227fb8828a01d7e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dd8a909531cd66080ca89227fb8828a01d7e22", "html_url": "https://github.com/rust-lang/rust/commit/e1dd8a909531cd66080ca89227fb8828a01d7e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1dd8a909531cd66080ca89227fb8828a01d7e22/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bbe784a9dc1f97f07e2543c6f726cb1eb4cc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bbe784a9dc1f97f07e2543c6f726cb1eb4cc86", "html_url": "https://github.com/rust-lang/rust/commit/b4bbe784a9dc1f97f07e2543c6f726cb1eb4cc86"}], "stats": {"total": 201, "additions": 147, "deletions": 54}, "files": [{"sha": "d5af1a9a42dd7c295713c0fdd3f2a36b051afba2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 73, "deletions": 49, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -1130,6 +1130,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         self.note_obligation_cause(&mut err, obligation);\n+        self.point_at_returns_when_relevant(&mut err, &obligation);\n \n         err.emit();\n     }\n@@ -1737,35 +1738,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // Recursively look for `TraitObject` types and if there's only one, use that span to\n             // suggest `impl Trait`.\n \n-            struct ReturnsVisitor<'v>(Vec<&'v hir::Expr<'v>>);\n-\n-            impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n-                type Map = rustc::hir::map::Map<'v>;\n-\n-                fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<'_, Self::Map> {\n-                    hir::intravisit::NestedVisitorMap::None\n-                }\n-\n-                fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n-                    match ex.kind {\n-                        hir::ExprKind::Ret(Some(ex)) => self.0.push(ex),\n-                        _ => {}\n-                    }\n-                    hir::intravisit::walk_expr(self, ex);\n-                }\n-\n-                fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n-                    if body.generator_kind().is_none() {\n-                        if let hir::ExprKind::Block(block, None) = body.value.kind {\n-                            if let Some(expr) = block.expr {\n-                                self.0.push(expr);\n-                            }\n-                        }\n-                    }\n-                    hir::intravisit::walk_body(self, body);\n-                }\n-            }\n-\n             // Visit to make sure there's a single `return` type to suggest `impl Trait`,\n             // otherwise suggest using `Box<dyn Trait>` or an enum.\n             let mut visitor = ReturnsVisitor(vec![]);\n@@ -1893,6 +1865,38 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         false\n     }\n \n+    fn point_at_returns_when_relevant(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) {\n+        if let ObligationCauseCode::SizedReturnType = obligation.cause.code.peel_derives() {\n+        } else {\n+            return;\n+        }\n+\n+        let hir = self.tcx.hir();\n+        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let node = hir.find(parent_node);\n+        if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })) =\n+            node\n+        {\n+            let body = hir.body(*body_id);\n+            // Point at all the `return`s in the function as they have failed trait bounds.\n+            let mut visitor = ReturnsVisitor(vec![]);\n+            visitor.visit_body(&body);\n+            let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n+            for expr in &visitor.0 {\n+                if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n+                    err.span_label(\n+                        expr.span,\n+                        &format!(\"this returned value is of type `{}`\", returned_ty),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n     /// Given some node representing a fn-like thing in the HIR map,\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to\n@@ -2911,19 +2915,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             ObligationCauseCode::RepeatVec(suggest_const_in_array_repeat_expressions) => {\n                 err.note(\n-                    \"the `Copy` trait is required because the \\\n-                          repeated element will be copied\",\n+                    \"the `Copy` trait is required because the repeated element will be copied\",\n                 );\n                 if suggest_const_in_array_repeat_expressions {\n                     err.note(\n                         \"this array initializer can be evaluated at compile-time, for more \\\n-                              information, see issue \\\n-                              https://github.com/rust-lang/rust/issues/49147\",\n+                         information, see issue \\\n+                         https://github.com/rust-lang/rust/issues/49147\",\n                     );\n                     if tcx.sess.opts.unstable_features.is_nightly_build() {\n                         err.help(\n                             \"add `#![feature(const_in_array_repeat_expressions)]` to the \\\n-                                  crate attributes to enable\",\n+                             crate attributes to enable\",\n                         );\n                     }\n                 }\n@@ -2941,16 +2944,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             ObligationCauseCode::SizedReturnType => {\n-                err.note(\n-                    \"the return type of a function must have a \\\n-                          statically known size\",\n-                );\n+                err.note(\"the return type of a function must have a statically known size\");\n             }\n             ObligationCauseCode::SizedYieldType => {\n-                err.note(\n-                    \"the yield type of a generator must have a \\\n-                          statically known size\",\n-                );\n+                err.note(\"the yield type of a generator must have a statically known size\");\n             }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n@@ -2966,12 +2963,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if last {\n                         err.note(\n                             \"the last field of a packed struct may only have a \\\n-                                      dynamically sized type if it does not need drop to be run\",\n+                             dynamically sized type if it does not need drop to be run\",\n                         );\n                     } else {\n                         err.note(\n-                            \"only the last field of a struct may have a dynamically \\\n-                                      sized type\",\n+                            \"only the last field of a struct may have a dynamically sized type\",\n                         );\n                     }\n                 }\n@@ -3025,13 +3021,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!(\n                     \"the requirement `{}` appears on the impl method \\\n-                              but not on the corresponding trait method\",\n+                     but not on the corresponding trait method\",\n                     predicate\n                 ));\n             }\n             ObligationCauseCode::CompareImplTypeObligation { .. } => {\n                 err.note(&format!(\n-                    \"the requirement `{}` appears on the associated impl type\\\n+                    \"the requirement `{}` appears on the associated impl type \\\n                      but not on the corresponding associated trait type\",\n                     predicate\n                 ));\n@@ -3043,8 +3039,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.help(\"see issue #48214\");\n                 if tcx.sess.opts.unstable_features.is_nightly_build() {\n                     err.help(\n-                        \"add `#![feature(trivial_bounds)]` to the \\\n-                              crate attributes to enable\",\n+                        \"add `#![feature(trivial_bounds)]` to the crate attributes to enable\",\n                     );\n                 }\n             }\n@@ -3186,3 +3181,32 @@ pub fn suggest_constraining_type_param(\n     }\n     false\n }\n+\n+struct ReturnsVisitor<'v>(Vec<&'v hir::Expr<'v>>);\n+\n+impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n+    type Map = rustc::hir::map::Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<'_, Self::Map> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+        match ex.kind {\n+            hir::ExprKind::Ret(Some(ex)) => self.0.push(ex),\n+            _ => {}\n+        }\n+        hir::intravisit::walk_expr(self, ex);\n+    }\n+\n+    fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n+        if body.generator_kind().is_none() {\n+            if let hir::ExprKind::Block(block, None) = body.value.kind {\n+                if let Some(expr) = block.expr {\n+                    self.0.push(expr);\n+                }\n+            }\n+        }\n+        hir::intravisit::walk_body(self, body);\n+    }\n+}"}, {"sha": "f59dbc263840077dbb02bb71b9717ec71494230f", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -1,8 +1,17 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-4-async-move.rs:15:17\n    |\n-LL | pub fn foo() -> impl Future + Send {\n-   |                 ^^^^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+LL |   pub fn foo() -> impl Future + Send {\n+   |                   ^^^^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+...\n+LL | /     async move {\n+LL | |         match client.status() {\n+LL | |             200 => {\n+LL | |                 let _x = get().await;\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____- this returned value is of type `impl std::future::Future`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn std::any::Any + std::marker::Send + 'static)`\n note: future is not `Send` as this value is used across an await"}, {"sha": "6e5afcdb8bb68ce650dbba5ccee012f483c950f7", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-no-impls-length-33.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -3,6 +3,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+...\n+LL |     Vec::<A>::new()\n+   |     --------------- this returned value is of type `std::vec::Vec<A>`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::vec::Vec<A>`\n    = note: the return type of a function must have a statically known size\n@@ -12,6 +15,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+...\n+LL |     Vec::<A>::new()\n+   |     --------------- this returned value is of type `std::vec::Vec<A>`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::vec::Vec<A>`\n    = note: the return type of a function must have a statically known size\n@@ -21,6 +27,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+...\n+LL |     VecDeque::<A>::new()\n+   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::collections::VecDeque<A>`\n    = note: the return type of a function must have a statically known size\n@@ -30,6 +39,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+...\n+LL |     VecDeque::<A>::new()\n+   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::collections::VecDeque<A>`\n    = note: the return type of a function must have a statically known size\n@@ -39,6 +51,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+...\n+LL |     VecDeque::<A>::new()\n+   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a mut [B; 33]>` for `std::collections::VecDeque<A>`\n    = note: the return type of a function must have a statically known size"}, {"sha": "e615e10bd5f5f4317337e3731821ea23946d919c", "filename": "src/test/ui/const-generics/array-impls/into-iter-no-impls-length-33.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -11,6 +11,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_iterator() -> impl Iterator<Item = i32> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -28,6 +31,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_double_ended_iterator() -> impl DoubleEndedIterator {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -45,6 +51,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_exact_size_iterator() -> impl ExactSizeIterator {\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::ExactSizeIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -62,6 +71,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_fused_iterator() -> impl FusedIterator {\n    |                               ^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::FusedIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -79,6 +91,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_trusted_len() -> impl TrustedLen {\n    |                            ^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::TrustedLen` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -96,6 +111,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_clone() -> impl Clone {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -113,6 +131,9 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n    |\n LL | pub fn no_debug() -> impl Debug {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n+LL |\n+LL |     IntoIter::new([0i32; 33])\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n    |\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size"}, {"sha": "ca2350ff7577f113e0da014c6e12ed49b7a595e8", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -38,7 +38,7 @@ LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `Fooy<T>`\n-   = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl typebut not on the corresponding associated trait type\n+   = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl type but not on the corresponding associated trait type\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d51cd6aeae6ec3fc3499a7d2a563fcff01bd7c8a", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -11,7 +11,9 @@ error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be know\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:13\n    |\n LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n-   |             ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             ^^^^^^^^^^^^^^   ------------ this returned value is of type `(usize, (dyn Trait + 'static))`\n+   |             |\n+   |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -31,7 +33,9 @@ error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be know\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:13\n    |\n LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n-   |             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             ^^^^^^^^^^^^^^^^^^   ------------ this returned value is of type `(usize, (dyn Trait + 'static))`\n+   |             |\n+   |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "9b07dbd7ab69c37c93551034dd784a647995a522", "filename": "src/test/ui/issues/issue-58344.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait\n    |\n LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u32>>::Output>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n+...\n+LL |     add_generic(value, 1u32)\n+   |     ------------------------ this returned value is of type `Either<impl Trait<<_ as std::ops::Add<_>>::Output>, impl Trait<<_ as std::ops::Add<_>>::Output>>`\n    |\n    = note: the return type of a function must have a statically known size\n \n@@ -11,6 +14,9 @@ error[E0277]: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait\n    |\n LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u32>>::Output>> {\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n+...\n+LL |     add_generic(value, 1u32)\n+   |     ------------------------ this returned value is of type `Either<impl Trait<<_ as std::ops::Add<_>>::Output>, impl Trait<<_ as std::ops::Add<_>>::Output>>`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "d886ecc11d17b6abb726ae9ace156011e29c69f1", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -14,6 +14,9 @@ error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at\n    |\n LL |     -> Struct {\n    |        ^^^^^^ doesn't have a size known at compile-time\n+LL |\n+LL |     Struct { r: r }\n+   |     --------------- this returned value is of type `Struct`\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "49fa11c35aef83016c93e5d9dc5df7f650d36eb1", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `std::result::Result<(), _>: Future` is not satisf\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n+LL |\n+LL |     Ok(())\n+   |     ------ this returned value is of type `std::result::Result<_, _>`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "88bfed2b5474233c5012e396332a6a8dcbe5f5a6", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `(): T` is not satisfied\n    |\n LL | fn should_ret_unit() -> impl T {\n    |                         ^^^^^^ the trait `T` is not implemented for `()`\n+LL |\n+LL |     panic!()\n+   |     -------- this returned value is of type `_`\n    |\n    = note: the return type of a function must have a statically known size\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9e8414f9c15febcbefaf8bc19d018a87e3ea50a6", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1dd8a909531cd66080ca89227fb8828a01d7e22/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=e1dd8a909531cd66080ca89227fb8828a01d7e22", "patch": "@@ -18,6 +18,8 @@ LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n ...\n LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |                     - help: consider restricting this bound: `U: std::fmt::Debug`\n+LL |     5u32\n+   |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n    = note: the return type of a function must have a statically known size\n@@ -30,6 +32,8 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n ...\n LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |                         - help: consider restricting this bound: `V: std::fmt::Debug`\n+LL |     5u32\n+   |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n    = note: the return type of a function must have a statically known size"}]}