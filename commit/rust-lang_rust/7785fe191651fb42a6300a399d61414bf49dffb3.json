{"sha": "7785fe191651fb42a6300a399d61414bf49dffb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ODVmZTE5MTY1MWZiNDJhNjMwMGEzOTlkNjE0MTRiZjQ5ZGZmYjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-19T12:16:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-20T23:52:48Z"}, "message": "syntax: make OptVec immutable.\n\nThis is the first step to replacing OptVec with a new representation:\nremove all mutability. Any mutations have to go via `Vec` and then make\nto `OptVec`.\n\nMany of the uses of OptVec are unnecessary now that Vec has no-alloc\nemptiness (and have been converted to Vec): the only ones that really\nneed it are the AST and sty's (and so on) where there are a *lot* of\ninstances of them, and they're (mostly) immutable.", "tree": {"sha": "1d58655556eac689f63b20f5944dd7e806d50de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d58655556eac689f63b20f5944dd7e806d50de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7785fe191651fb42a6300a399d61414bf49dffb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7785fe191651fb42a6300a399d61414bf49dffb3", "html_url": "https://github.com/rust-lang/rust/commit/7785fe191651fb42a6300a399d61414bf49dffb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7785fe191651fb42a6300a399d61414bf49dffb3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7334c11b4b196e39da2418a239e2ff916896fa19", "url": "https://api.github.com/repos/rust-lang/rust/commits/7334c11b4b196e39da2418a239e2ff916896fa19", "html_url": "https://github.com/rust-lang/rust/commit/7334c11b4b196e39da2418a239e2ff916896fa19"}], "stats": {"total": 205, "additions": 79, "deletions": 126}, "files": [{"sha": "eb452c1fd71d22a67784a60f5d57047d49f62af6", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -192,13 +192,13 @@ fn parse_region_substs(st: &mut PState, conv: conv_did) -> ty::RegionSubsts {\n     match next(st) {\n         'e' => ty::ErasedRegions,\n         'n' => {\n-            let mut regions = opt_vec::Empty;\n+            let mut regions = vec!();\n             while peek(st) != '.' {\n                 let r = parse_region(st, |x,y| conv(x,y));\n                 regions.push(r);\n             }\n             assert_eq!(next(st), '.');\n-            ty::NonerasedRegions(regions)\n+            ty::NonerasedRegions(opt_vec::from(regions))\n         }\n         _ => fail!(\"parse_bound_region: bad input\")\n     }"}, {"sha": "93a1ba309c28b7ef132c7083c96b42bfa368bfd7", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -26,8 +26,6 @@ use middle::typeck;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;\n-use syntax::opt_vec::OptVec;\n-use syntax::opt_vec;\n use util::ppaux::Repr;\n \n pub struct MoveData {\n@@ -316,15 +314,15 @@ impl MoveData {\n \n     fn existing_base_paths(&self,\n                            lp: @LoanPath)\n-                           -> OptVec<MovePathIndex> {\n-        let mut result = opt_vec::Empty;\n+                           -> Vec<MovePathIndex> {\n+        let mut result = vec!();\n         self.add_existing_base_paths(lp, &mut result);\n         result\n     }\n \n     fn add_existing_base_paths(&self,\n                                lp: @LoanPath,\n-                               result: &mut OptVec<MovePathIndex>) {\n+                               result: &mut Vec<MovePathIndex>) {\n         /*!\n          * Adds any existing move path indices for `lp` and any base\n          * paths of `lp` to `result`, but does not add new move paths"}, {"sha": "b84e923f77d98d0ae4dc78f3d716720f65a3885e", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -14,7 +14,6 @@ use middle::typeck;\n use middle::ty;\n use syntax::ast;\n use syntax::ast_util;\n-use syntax::opt_vec;\n use util::nodemap::NodeMap;\n \n struct CFGBuilder<'a> {\n@@ -470,7 +469,7 @@ impl<'a> CFGBuilder<'a> {\n     fn add_contained_edge(&mut self,\n                           source: CFGIndex,\n                           target: CFGIndex) {\n-        let data = CFGEdgeData {exiting_scopes: opt_vec::Empty};\n+        let data = CFGEdgeData {exiting_scopes: vec!() };\n         self.graph.add_edge(source, target, data);\n     }\n \n@@ -479,9 +478,10 @@ impl<'a> CFGBuilder<'a> {\n                         from_index: CFGIndex,\n                         to_loop: LoopScope,\n                         to_index: CFGIndex) {\n-        let mut data = CFGEdgeData {exiting_scopes: opt_vec::Empty};\n+        let mut data = CFGEdgeData {exiting_scopes: vec!() };\n         let mut scope_id = from_expr.id;\n         while scope_id != to_loop.loop_id {\n+\n             data.exiting_scopes.push(scope_id);\n             scope_id = self.tcx.region_maps.encl_scope(scope_id);\n         }"}, {"sha": "9c2dcd74351e3100b08699939b57cfb360b1e91d", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -19,7 +19,6 @@ use middle::graph;\n use middle::ty;\n use middle::typeck;\n use syntax::ast;\n-use syntax::opt_vec::OptVec;\n use util::nodemap::NodeMap;\n \n mod construct;\n@@ -36,7 +35,7 @@ pub struct CFGNodeData {\n }\n \n pub struct CFGEdgeData {\n-    exiting_scopes: OptVec<ast::NodeId>\n+    exiting_scopes: Vec<ast::NodeId>\n }\n \n pub type CFGIndex = graph::NodeIndex;"}, {"sha": "2919d67136f021d6b32586de27d2fd1d6c88edb9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -21,7 +21,6 @@ use driver::session::Session;\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::opt_vec;\n use syntax::opt_vec::OptVec;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n@@ -413,22 +412,22 @@ pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::Lifeti\n         .collect()\n }\n \n-pub fn free_lifetimes(ty_params: &OptVec<ast::TyParam>) -> OptVec<ast::Name> {\n+pub fn free_lifetimes(ty_params: &OptVec<ast::TyParam>) -> Vec<ast::Name> {\n     /*!\n      * Gathers up and returns the names of any lifetimes that appear\n      * free in `ty_params`. Of course, right now, all lifetimes appear\n      * free, since we don't currently have any binders in type parameter\n      * declarations; just being forwards compatible with future extensions.\n      */\n \n-    let mut collector = FreeLifetimeCollector { names: opt_vec::Empty };\n+    let mut collector = FreeLifetimeCollector { names: vec!() };\n     for ty_param in ty_params.iter() {\n         visit::walk_ty_param_bounds(&mut collector, &ty_param.bounds, ());\n     }\n     return collector.names;\n \n     struct FreeLifetimeCollector {\n-        names: OptVec<ast::Name>,\n+        names: Vec<ast::Name>,\n     }\n \n     impl Visitor<()> for FreeLifetimeCollector {"}, {"sha": "75f236d5028d48418bea91ac7a6445ec4aa9dc19", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -24,8 +24,6 @@ use middle::trans::glue;\n use middle::trans::type_::Type;\n use middle::ty;\n use syntax::ast;\n-use syntax::opt_vec;\n-use syntax::opt_vec::OptVec;\n use util::ppaux::Repr;\n \n pub struct CleanupScope<'a> {\n@@ -37,9 +35,9 @@ pub struct CleanupScope<'a> {\n     kind: CleanupScopeKind<'a>,\n \n     // Cleanups to run upon scope exit.\n-    cleanups: OptVec<~Cleanup>,\n+    cleanups: Vec<~Cleanup>,\n \n-    cached_early_exits: OptVec<CachedEarlyExit>,\n+    cached_early_exits: Vec<CachedEarlyExit>,\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n@@ -379,7 +377,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         assert!(orig_scopes_len > 0);\n \n         // Remove any scopes that do not have cleanups on failure:\n-        let mut popped_scopes = opt_vec::Empty;\n+        let mut popped_scopes = vec!();\n         while !self.top_scope(|s| s.needs_invoke()) {\n             debug!(\"top scope does not need invoke\");\n             popped_scopes.push(self.pop_scope());\n@@ -510,7 +508,7 @@ impl<'a> CleanupHelperMethods<'a> for FunctionContext<'a> {\n \n         let orig_scopes_len = self.scopes_len();\n         let mut prev_llbb;\n-        let mut popped_scopes = opt_vec::Empty;\n+        let mut popped_scopes = vec!();\n \n         // First we pop off all the cleanup stacks that are\n         // traversed until the exit is reached, pushing them\n@@ -708,14 +706,14 @@ impl<'a> CleanupScope<'a> {\n     fn new(kind: CleanupScopeKind<'a>) -> CleanupScope<'a> {\n         CleanupScope {\n             kind: kind,\n-            cleanups: opt_vec::Empty,\n-            cached_early_exits: opt_vec::Empty,\n+            cleanups: vec!(),\n+            cached_early_exits: vec!(),\n             cached_landing_pad: None,\n         }\n     }\n \n     fn clear_cached_exits(&mut self) {\n-        self.cached_early_exits = opt_vec::Empty;\n+        self.cached_early_exits = vec!();\n         self.cached_landing_pad = None;\n     }\n "}, {"sha": "a08a20e97d2b8ed79f473581dd6b2dac5466fe81", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -5072,11 +5072,10 @@ pub fn construct_parameter_environment(\n \n     // map bound 'a => free 'a\n     let region_params = {\n-        fn push_region_params(accum: OptVec<ty::Region>,\n+        fn push_region_params(mut accum: Vec<ty::Region>,\n                               free_id: ast::NodeId,\n                               region_params: &[RegionParameterDef])\n-                              -> OptVec<ty::Region> {\n-            let mut accum = accum;\n+                              -> Vec<ty::Region> {\n             for r in region_params.iter() {\n                 accum.push(\n                     ty::ReFree(ty::FreeRegion {\n@@ -5086,14 +5085,14 @@ pub fn construct_parameter_environment(\n             accum\n         }\n \n-        let t = push_region_params(opt_vec::Empty, free_id, item_region_params);\n+        let t = push_region_params(vec!(), free_id, item_region_params);\n         push_region_params(t, free_id, method_region_params)\n     };\n \n     let free_substs = substs {\n         self_ty: self_ty,\n         tps: type_params,\n-        regions: ty::NonerasedRegions(region_params)\n+        regions: ty::NonerasedRegions(opt_vec::from(region_params))\n     };\n \n     //"}, {"sha": "023f083614003bd3ef9a517dccfa1282abb4dfba", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -104,6 +104,7 @@ use syntax::ast::{MutMutable, MutImmutable};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token;\n+use syntax::opt_vec;\n \n #[deriving(Eq)]\n pub enum CheckTraitsFlag {\n@@ -1102,8 +1103,8 @@ impl<'a> LookupContext<'a> {\n \n         // Determine values for the early-bound lifetime parameters.\n         // FIXME -- permit users to manually specify lifetimes\n-        let mut all_regions = match candidate.rcvr_substs.regions {\n-            NonerasedRegions(ref v) => v.clone(),\n+        let mut all_regions: Vec<Region> = match candidate.rcvr_substs.regions {\n+            NonerasedRegions(ref v) => v.iter().map(|r| r.clone()).collect(),\n             ErasedRegions => tcx.sess.span_bug(self.span, \"ErasedRegions\")\n         };\n         let m_regions =\n@@ -1119,7 +1120,7 @@ impl<'a> LookupContext<'a> {\n         let all_substs = substs {\n             tps: vec::append(candidate.rcvr_substs.tps.clone(),\n                                 m_substs.as_slice()),\n-            regions: NonerasedRegions(all_regions),\n+            regions: NonerasedRegions(opt_vec::from(all_regions)),\n             self_ty: candidate.rcvr_substs.self_ty,\n         };\n "}, {"sha": "794631f9721557b6021d1d1f80956a1da962212f", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -160,7 +160,7 @@ pub trait Combine {\n \n                     assert_eq!(num_region_params, a_rs.len());\n                     assert_eq!(num_region_params, b_rs.len());\n-                    let mut rs = opt_vec::Empty;\n+                    let mut rs = vec!();\n                     for i in range(0, num_region_params) {\n                         let a_r = *a_rs.get(i);\n                         let b_r = *b_rs.get(i);\n@@ -176,7 +176,7 @@ pub trait Combine {\n                         };\n                         rs.push(if_ok!(r));\n                     }\n-                    Ok(ty::NonerasedRegions(rs))\n+                    Ok(ty::NonerasedRegions(opt_vec::from(rs)))\n                 }\n             }\n         }"}, {"sha": "4cd9d46ff7ac8825195d60ed4dcc72733c0a1e8e", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -80,8 +80,6 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util;\n use syntax::ast_util::name_to_dummy_lifetime;\n-use syntax::opt_vec;\n-use syntax::opt_vec::OptVec;\n use syntax::parse::token;\n use syntax::print::pprust;\n use util::ppaux::UserString;\n@@ -90,10 +88,10 @@ use util::ppaux::note_and_explain_region;\n \n pub trait ErrorReporting {\n     fn report_region_errors(&self,\n-                            errors: &OptVec<RegionResolutionError>);\n+                            errors: &Vec<RegionResolutionError>);\n \n-    fn process_errors(&self, errors: &OptVec<RegionResolutionError>)\n-                      -> OptVec<RegionResolutionError>;\n+    fn process_errors(&self, errors: &Vec<RegionResolutionError>)\n+                      -> Vec<RegionResolutionError>;\n \n     fn report_type_error(&self, trace: TypeTrace, terr: &ty::type_err);\n \n@@ -151,7 +149,7 @@ trait ErrorReportingHelpers {\n \n impl<'a> ErrorReporting for InferCtxt<'a> {\n     fn report_region_errors(&self,\n-                            errors: &OptVec<RegionResolutionError>) {\n+                            errors: &Vec<RegionResolutionError>) {\n         let p_errors = self.process_errors(errors);\n         let errors = if p_errors.is_empty() { errors } else { &p_errors };\n         for error in errors.iter() {\n@@ -195,12 +193,12 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n     // complete view of what lifetimes should be the same.\n     // If the return value is an empty vector, it means that processing\n     // failed (so the return value of this method should not be used)\n-    fn process_errors(&self, errors: &OptVec<RegionResolutionError>)\n-                      -> OptVec<RegionResolutionError> {\n+    fn process_errors(&self, errors: &Vec<RegionResolutionError>)\n+                      -> Vec<RegionResolutionError> {\n         let mut var_origins = Vec::new();\n         let mut trace_origins = Vec::new();\n         let mut same_regions = Vec::new();\n-        let mut processed_errors = opt_vec::Empty;\n+        let mut processed_errors = Vec::new();\n         for error in errors.iter() {\n             match *error {\n                 ConcreteFailure(origin, sub, sup) => {\n@@ -239,7 +237,7 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n                 // declaration, we want to make sure that they are, in fact,\n                 // from the same scope\n                 if sr.scope_id != common_scope_id {\n-                    return opt_vec::Empty;\n+                    return vec!();\n                 }\n             }\n             let pe = ProcessedErrors(var_origins, trace_origins, same_regions);"}, {"sha": "7c13c15ffec7d550054700dd1f3640c394beb187", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -29,8 +29,6 @@ use std::uint;\n use std::slice;\n use collections::{HashMap, HashSet};\n use syntax::ast;\n-use syntax::opt_vec;\n-use syntax::opt_vec::OptVec;\n \n mod doc;\n \n@@ -561,9 +559,9 @@ impl<'a> RegionVarBindings<'a> {\n     constraints, assuming such values can be found; if they cannot,\n     errors are reported.\n     */\n-    pub fn resolve_regions(&self) -> OptVec<RegionResolutionError> {\n+    pub fn resolve_regions(&self) -> Vec<RegionResolutionError> {\n         debug!(\"RegionVarBindings: resolve_regions()\");\n-        let mut errors = opt_vec::Empty;\n+        let mut errors = vec!();\n         let v = self.infer_variable_values(&mut errors);\n         let mut values = self.values.borrow_mut();\n         *values.get() = Some(v);\n@@ -815,7 +813,7 @@ type RegionGraph = graph::Graph<(), Constraint>;\n \n impl<'a> RegionVarBindings<'a> {\n     fn infer_variable_values(&self,\n-                             errors: &mut OptVec<RegionResolutionError>)\n+                             errors: &mut Vec<RegionResolutionError>)\n                              -> Vec<VarValue> {\n         let mut var_data = self.construct_var_data();\n         self.expansion(var_data.as_mut_slice());\n@@ -1004,7 +1002,7 @@ impl<'a> RegionVarBindings<'a> {\n \n     fn collect_concrete_region_errors(\n         &self,\n-        errors: &mut OptVec<RegionResolutionError>)\n+        errors: &mut Vec<RegionResolutionError>)\n     {\n         let constraints = self.constraints.borrow();\n         for (constraint, _) in constraints.get().iter() {\n@@ -1033,7 +1031,7 @@ impl<'a> RegionVarBindings<'a> {\n     fn extract_values_and_collect_conflicts(\n         &self,\n         var_data: &[VarData],\n-        errors: &mut OptVec<RegionResolutionError>)\n+        errors: &mut Vec<RegionResolutionError>)\n         -> Vec<VarValue> {\n         debug!(\"extract_values_and_collect_conflicts()\");\n \n@@ -1157,7 +1155,7 @@ impl<'a> RegionVarBindings<'a> {\n         var_data: &[VarData],\n         dup_vec: &mut [uint],\n         node_idx: RegionVid,\n-        errors: &mut OptVec<RegionResolutionError>)\n+        errors: &mut Vec<RegionResolutionError>)\n     {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -1206,7 +1204,7 @@ impl<'a> RegionVarBindings<'a> {\n         var_data: &[VarData],\n         dup_vec: &mut [uint],\n         node_idx: RegionVid,\n-        errors: &mut OptVec<RegionResolutionError>)\n+        errors: &mut Vec<RegionResolutionError>)\n     {\n         // Errors in contracting nodes result from two upper-bounds\n         // that have no intersection."}, {"sha": "cee87565e3e0a55ee82bc58d506d7e907b43cd90", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -904,32 +904,33 @@ impl<'a> SolveContext<'a> {\n         let num_inferred = self.terms_cx.num_inferred();\n         while index < num_inferred {\n             let item_id = inferred_infos.get(index).item_id;\n-            let mut item_variances = ty::ItemVariances {\n-                self_param: None,\n-                type_params: opt_vec::Empty,\n-                region_params: opt_vec::Empty\n-            };\n+            let mut self_param = None;\n+            let mut type_params = vec!();\n+            let mut region_params = vec!();\n+\n             while index < num_inferred &&\n                   inferred_infos.get(index).item_id == item_id {\n                 let info = inferred_infos.get(index);\n                 match info.kind {\n                     SelfParam => {\n-                        assert!(item_variances.self_param.is_none());\n-                        item_variances.self_param =\n-                            Some(*solutions.get(index));\n+                        assert!(self_param.is_none());\n+                        self_param = Some(*solutions.get(index));\n                     }\n                     TypeParam => {\n-                        item_variances.type_params\n-                                      .push(*solutions.get(index));\n+                        type_params.push(*solutions.get(index));\n                     }\n                     RegionParam => {\n-                        item_variances.region_params\n-                                      .push(*solutions.get(index));\n+                        region_params.push(*solutions.get(index));\n                     }\n                 }\n                 index += 1;\n             }\n \n+            let item_variances = ty::ItemVariances {\n+                self_param: self_param,\n+                type_params: opt_vec::from(type_params),\n+                region_params: opt_vec::from(region_params)\n+            };\n             debug!(\"item_id={} item_variances={}\",\n                     item_id,\n                     item_variances.repr(tcx));"}, {"sha": "7aa98a6078100bf408f555826af29b853a198f42", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -360,27 +360,32 @@ impl<'a> TraitDef<'a> {\n                            methods: Vec<@ast::Method> ) -> @ast::Item {\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n-        let mut trait_generics = self.generics.to_generics(cx, self.span,\n-                                                           type_ident, generics);\n+        let Generics { mut lifetimes, ty_params } =\n+            self.generics.to_generics(cx, self.span, type_ident, generics);\n+        let mut ty_params = opt_vec::take_vec(ty_params);\n+\n         // Copy the lifetimes\n-        for l in generics.lifetimes.iter() {\n-            trait_generics.lifetimes.push(*l)\n-        };\n+        lifetimes.extend(&mut generics.lifetimes.iter().map(|l| *l));\n+\n         // Create the type parameters.\n-        for ty_param in generics.ty_params.iter() {\n+        ty_params.extend(&mut generics.ty_params.iter().map(|ty_param| {\n             // I don't think this can be moved out of the loop, since\n             // a TyParamBound requires an ast id\n-            let mut bounds = opt_vec::from(\n+            let mut bounds =\n                 // extra restrictions on the generics parameters to the type being derived upon\n                 self.additional_bounds.map(|p| {\n                     cx.typarambound(p.to_path(cx, self.span,\n                                                   type_ident, generics))\n-                }));\n+                });\n             // require the current trait\n             bounds.push(cx.typarambound(trait_path.clone()));\n \n-            trait_generics.ty_params.push(cx.typaram(ty_param.ident, bounds, None));\n-        }\n+            cx.typaram(ty_param.ident, opt_vec::from(bounds), None)\n+        }));\n+        let trait_generics = Generics {\n+            lifetimes: lifetimes,\n+            ty_params: opt_vec::from(ty_params)\n+        };\n \n         // Create the reference to the trait.\n         let trait_ref = cx.trait_ref(trait_path);"}, {"sha": "425a5a9a5faf919f7ce12099a99be65c6f5f9628", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -37,25 +37,6 @@ pub fn from<T>(t: Vec<T> ) -> OptVec<T> {\n }\n \n impl<T> OptVec<T> {\n-    pub fn push(&mut self, t: T) {\n-        match *self {\n-            Vec(ref mut v) => {\n-                v.push(t);\n-                return;\n-            }\n-            Empty => {\n-                *self = Vec(vec!(t));\n-            }\n-        }\n-    }\n-\n-    pub fn pop(&mut self) -> Option<T> {\n-        match *self {\n-            Vec(ref mut v) => v.pop(),\n-            Empty => None\n-        }\n-    }\n-\n     pub fn last<'a>(&'a self) -> Option<&'a T> {\n         match *self {\n             Vec(ref v) => v.last(),\n@@ -102,16 +83,6 @@ impl<T> OptVec<T> {\n         }\n     }\n \n-    pub fn swap_remove(&mut self, index: uint) {\n-        match *self {\n-            Empty => { fail!(\"index out of bounds\"); }\n-            Vec(ref mut v) => {\n-                assert!(index < v.len());\n-                v.swap_remove(index);\n-            }\n-        }\n-    }\n-\n     #[inline]\n     pub fn iter<'r>(&'r self) -> Items<'r, T> {\n         match *self {\n@@ -142,17 +113,6 @@ pub fn take_vec<T>(v: OptVec<T>) -> Vec<T> {\n     }\n }\n \n-impl<T:Clone> OptVec<T> {\n-    pub fn prepend(&self, t: T) -> OptVec<T> {\n-        let mut v0 = vec!(t);\n-        match *self {\n-            Empty => {}\n-            Vec(ref v1) => { v0.push_all(v1.as_slice()); }\n-        }\n-        return Vec(v0);\n-    }\n-}\n-\n impl<A:Eq> Eq for OptVec<A> {\n     fn eq(&self, other: &OptVec<A>) -> bool {\n         // Note: cannot use #[deriving(Eq)] here because\n@@ -208,10 +168,7 @@ impl<'a, T> DoubleEndedIterator<&'a T> for Items<'a, T> {\n \n impl<A> FromIterator<A> for OptVec<A> {\n     fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> OptVec<A> {\n-        let mut r = Empty;\n-        for x in *iterator {\n-            r.push(x);\n-        }\n-        r\n+        let v: Vec<A> = iterator.collect();\n+        from(v)\n     }\n }"}, {"sha": "3e2b88c1cf1c1e98547a5d70a5c20714c66a0b70", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7785fe191651fb42a6300a399d61414bf49dffb3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7785fe191651fb42a6300a399d61414bf49dffb3", "patch": "@@ -632,7 +632,7 @@ impl<'a> Parser<'a> {\n                                   f: |&mut Parser| -> T)\n                                   -> OptVec<T> {\n         let mut first = true;\n-        let mut v = opt_vec::Empty;\n+        let mut v = Vec::new();\n         while self.token != token::GT\n             && self.token != token::BINOP(token::SHR) {\n             match sep {\n@@ -644,7 +644,7 @@ impl<'a> Parser<'a> {\n             }\n             v.push(f(self));\n         }\n-        return v;\n+        return opt_vec::from(v);\n     }\n \n     pub fn parse_seq_to_gt<T>(\n@@ -681,7 +681,7 @@ impl<'a> Parser<'a> {\n                                    f: |&mut Parser| -> T)\n                                    -> Vec<T> {\n         let mut first: bool = true;\n-        let mut v: Vec<T> = Vec::new();\n+        let mut v = vec!();\n         while self.token != *ket {\n             match sep.sep {\n               Some(ref t) => {\n@@ -3437,7 +3437,7 @@ impl<'a> Parser<'a> {\n             return None;\n         }\n \n-        let mut result = opt_vec::Empty;\n+        let mut result = vec!();\n         loop {\n             match self.token {\n                 token::LIFETIME(lifetime) => {\n@@ -3462,7 +3462,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        return Some(result);\n+        return Some(opt_vec::from(result));\n     }\n \n     // matches typaram = IDENT optbounds ( EQ ty )?"}]}