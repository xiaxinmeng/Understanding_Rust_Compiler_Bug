{"sha": "5a7aa6cae543f9507d916624d2e54b7f53ee9616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2FhNmNhZTU0M2Y5NTA3ZDkxNjYyNGQyZTU0YjdmNTNlZTk2MTY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T17:49:49Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T21:35:12Z"}, "message": "Rollup merge of #49007 - estebank:follow-up-47574, r=oli-obk\n\nSome tweaks to \"type parameters from outer function\" diagnostic\n\nFollow up to #47574.", "tree": {"sha": "9c5f320861902a6cd964887bdd2c87bc23d1c65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5f320861902a6cd964887bdd2c87bc23d1c65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7aa6cae543f9507d916624d2e54b7f53ee9616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqq5xEACgkQ/vbIBR0O\nATydUg//U9iYn+Q0SiT37tkIGDu3Asa9ADIw9kmPAjfCXPZlWu0ekEdE6PylqbwN\nJGJ9B8ddFnrYx0OXRNvtvTLgn6DuCn6nX/CVNyZ5+q1I17guHpq3gi3ubkI6qT3H\nsx79Talcl9Zd8czniE0sF5Xhv0cu6U95eHS0bRGIASifrs0063a7wVmlNN6ZmwXl\ngltHatp+/cCuTCeX5NcBkYN5/kTjjppYYWO0EzV6d0aSP9L/PRTsxGd0KybtGd7Y\nj5zPapsZ1wvxFWMhz4fZtmd5c2KB3CdxaoMl6YlB2zwO3B5N/QRktfBPzUprlCl1\nJzFzwVofB6g3Wm49Y0I9cbJbJd/r1sWHdElElS0cdeNtUsSDlCxR73ZXVGnukIaS\n22/8LkZ7+OXblXD9ql49Twf4l86nzAEcF6ZNkuhwPfmcsefZvmQyRjzAn8pKD2jk\naNMEmhEjTC9y4RLggNF8jolGM+U5KPL33HKS/ovYHM2fXs3G0w0Zu0bDuozduxLG\n/0r1McSG9H4gYVDGJUSPyiECYDF/v9TpT7gjzZRBYSSZbYztiI75rXGOv5wpjZY3\nRw5umdFcMdwZ7kihTOr/b+hMSmygnTouu8LdqjDEWd/4DTSEDFS8OTJFBTjOBDpB\nueedju6H9ZOohtzisNxML23UfQf9bZs86PiUheTwdeovZrC0ObY=\n=0r0/\n-----END PGP SIGNATURE-----", "payload": "tree 9c5f320861902a6cd964887bdd2c87bc23d1c65e\nparent bf270bb66ac392e0a1a220583e5e61c8a9d8b4a3\nparent 16d424f1471988ed4f7601b8eca42c72a23ca38e\nauthor kennytm <kennytm@gmail.com> 1521136189 +0800\ncommitter kennytm <kennytm@gmail.com> 1521149712 +0800\n\nRollup merge of #49007 - estebank:follow-up-47574, r=oli-obk\n\nSome tweaks to \"type parameters from outer function\" diagnostic\n\nFollow up to #47574.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7aa6cae543f9507d916624d2e54b7f53ee9616", "html_url": "https://github.com/rust-lang/rust/commit/5a7aa6cae543f9507d916624d2e54b7f53ee9616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7aa6cae543f9507d916624d2e54b7f53ee9616/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf270bb66ac392e0a1a220583e5e61c8a9d8b4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf270bb66ac392e0a1a220583e5e61c8a9d8b4a3", "html_url": "https://github.com/rust-lang/rust/commit/bf270bb66ac392e0a1a220583e5e61c8a9d8b4a3"}, {"sha": "16d424f1471988ed4f7601b8eca42c72a23ca38e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d424f1471988ed4f7601b8eca42c72a23ca38e", "html_url": "https://github.com/rust-lang/rust/commit/16d424f1471988ed4f7601b8eca42c72a23ca38e"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "c84caee13e82a0c4233f535661ed12dd35367912", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5a7aa6cae543f9507d916624d2e54b7f53ee9616", "patch": "@@ -41,7 +41,7 @@ use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n-use syntax::codemap::{dummy_spanned, respan, CodeMap};\n+use syntax::codemap::{dummy_spanned, respan, BytePos, CodeMap};\n use syntax::ext::hygiene::{Mark, MarkKind, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, SpannedIdent, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n@@ -179,11 +179,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                                            E0401,\n                                            \"can't use type parameters from outer function\");\n             err.span_label(span, \"use of type variable from outer function\");\n+\n+            let cm = resolver.session.codemap();\n             match outer_def {\n                 Def::SelfTy(_, maybe_impl_defid) => {\n                     if let Some(impl_span) = maybe_impl_defid.map_or(None,\n                             |def_id| resolver.definitions.opt_span(def_id)) {\n-                        let cm = resolver.session.codemap();\n                         err.span_label(reduce_impl_span_to_impl_keyword(cm, impl_span),\n                                     \"`Self` type implicitely declared here, on the `impl`\");\n                     }\n@@ -206,12 +207,13 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             // Try to retrieve the span of the function signature and generate a new message with\n             // a local type parameter\n             let sugg_msg = \"try using a local type parameter instead\";\n-            if let Some((sugg_span, new_snippet)) = generate_local_type_param_snippet(\n-                                                        resolver.session.codemap(), span) {\n+            if let Some((sugg_span, new_snippet)) = generate_local_type_param_snippet(cm, span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion(sugg_span,\n                                     sugg_msg,\n                                     new_snippet);\n+            } else if let Some(sp) = generate_fn_name_span(cm, span) {\n+                err.span_label(sp, \"try adding a local type parameter in this method instead\");\n             } else {\n                 err.help(\"try using a local type parameter instead\");\n             }\n@@ -407,6 +409,15 @@ fn reduce_impl_span_to_impl_keyword(cm: &CodeMap, impl_span: Span) -> Span {\n     impl_span\n }\n \n+fn generate_fn_name_span(cm: &CodeMap, span: Span) -> Option<Span> {\n+    let prev_span = cm.span_extend_to_prev_str(span, \"fn\", true);\n+    cm.span_to_snippet(prev_span).map(|snippet| {\n+        let len = snippet.find(|c: char| !c.is_alphanumeric() && c != '_')\n+            .expect(\"no label after fn\");\n+        prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32))\n+    }).ok()\n+}\n+\n /// Take the span of a type parameter in a function signature and try to generate a span for the\n /// function name (with generics) and a new snippet for this span with the pointed type parameter as\n /// a new local type parameter.\n@@ -428,17 +439,12 @@ fn reduce_impl_span_to_impl_keyword(cm: &CodeMap, impl_span: Span) -> Span {\n fn generate_local_type_param_snippet(cm: &CodeMap, span: Span) -> Option<(Span, String)> {\n     // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n     // signature\n-    let sugg_span = cm.span_extend_to_prev_str(span, \"fn\");\n+    let sugg_span = cm.span_extend_to_prev_str(span, \"fn\", false);\n     if sugg_span != span {\n         if let Ok(snippet) = cm.span_to_snippet(sugg_span) {\n-            use syntax::codemap::BytePos;\n-\n             // Consume the function name\n-            let mut offset = 0;\n-            for c in snippet.chars().take_while(|c| c.is_ascii_alphanumeric() ||\n-                                                    *c == '_') {\n-                offset += c.len_utf8();\n-            }\n+            let mut offset = snippet.find(|c: char| !c.is_alphanumeric() && c != '_')\n+                .expect(\"no label after fn\");\n \n             // Consume the generics part of the function signature\n             let mut bracket_counter = 0;"}, {"sha": "951f8a871ca66d2588f90f23a832ed154371453a", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5a7aa6cae543f9507d916624d2e54b7f53ee9616", "patch": "@@ -622,13 +622,21 @@ impl CodeMap {\n         sp\n     }\n \n-    /// Extend the given `Span` to just after the previous occurrence of `pat`. Return the same span\n-    /// if no character could be found or if an error occurred while retrieving the code snippet.\n-    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str) -> Span {\n-        if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-            let prev_source = prev_source.rsplit(pat).nth(0).unwrap_or(\"\").trim_left();\n-            if !prev_source.is_empty() && !prev_source.contains('\\n') {\n-                return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+    /// Extend the given `Span` to just after the previous occurrence of `pat` when surrounded by\n+    /// whitespace. Return the same span if no character could be found or if an error occurred\n+    /// while retrieving the code snippet.\n+    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str, accept_newlines: bool) -> Span {\n+        // assure that the pattern is delimited, to avoid the following\n+        //     fn my_fn()\n+        //           ^^^^ returned span without the check\n+        //     ---------- correct span\n+        for ws in &[\" \", \"\\t\", \"\\n\"] {\n+            let pat = pat.to_owned() + ws;\n+            if let Ok(prev_source) = self.span_to_prev_source(sp) {\n+                let prev_source = prev_source.rsplit(&pat).nth(0).unwrap_or(\"\").trim_left();\n+                if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+                    return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+                }\n             }\n         }\n "}, {"sha": "4fc74f5ef22192adca43160e514666937f407d06", "filename": "src/test/ui/error-codes/E0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs?ref=5a7aa6cae543f9507d916624d2e54b7f53ee9616", "patch": "@@ -11,14 +11,14 @@\n trait Baz<T> {}\n \n fn foo<T>(x: T) {\n-    fn bar<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n+    fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n     }\n     fn baz<U,\n            V: Baz<U>,\n            W: Fn()>\n            (y: T) { //~ ERROR E0401\n     }\n-    bar(x);\n+    bfnr(x);\n }\n \n "}, {"sha": "5b66d1093408e5b01f02a4cc1379cb06454499c9", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7aa6cae543f9507d916624d2e54b7f53ee9616/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=5a7aa6cae543f9507d916624d2e54b7f53ee9616", "patch": "@@ -1,23 +1,24 @@\n error[E0401]: can't use type parameters from outer function\n-  --> $DIR/E0401.rs:14:38\n+  --> $DIR/E0401.rs:14:39\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n-LL |     fn bar<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n-   |        --------------------------    ^ use of type variable from outer function\n+LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n+   |        ---------------------------    ^ use of type variable from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<U, V: Baz<U>, W: Fn(), T>`\n+   |        help: try using a local type parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n \n error[E0401]: can't use type parameters from outer function\n   --> $DIR/E0401.rs:19:16\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n ...\n+LL |     fn baz<U,\n+   |        --- try adding a local type parameter in this method instead\n+...\n LL |            (y: T) { //~ ERROR E0401\n    |                ^ use of type variable from outer function\n-   |\n-   = help: try using a local type parameter instead\n \n error[E0401]: can't use type parameters from outer function\n   --> $DIR/E0401.rs:32:25"}]}