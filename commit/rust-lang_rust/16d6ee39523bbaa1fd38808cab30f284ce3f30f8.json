{"sha": "16d6ee39523bbaa1fd38808cab30f284ce3f30f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDZlZTM5NTIzYmJhYTFmZDM4ODA4Y2FiMzBmMjg0Y2UzZjMwZjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-23T12:18:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:11:19Z"}, "message": "Fold const in writeback", "tree": {"sha": "b11e62bba3438a71e1cc4cd61b84e87e5ba8dee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11e62bba3438a71e1cc4cd61b84e87e5ba8dee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d6ee39523bbaa1fd38808cab30f284ce3f30f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d6ee39523bbaa1fd38808cab30f284ce3f30f8", "html_url": "https://github.com/rust-lang/rust/commit/16d6ee39523bbaa1fd38808cab30f284ce3f30f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d6ee39523bbaa1fd38808cab30f284ce3f30f8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7deb5bdc2dead50d728c71a18095f088398b7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7deb5bdc2dead50d728c71a18095f088398b7db", "html_url": "https://github.com/rust-lang/rust/commit/c7deb5bdc2dead50d728c71a18095f088398b7db"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "e13651d253d89e8c9f2233d950a5055650cdd53b", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16d6ee39523bbaa1fd38808cab30f284ce3f30f8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d6ee39523bbaa1fd38808cab30f284ce3f30f8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=16d6ee39523bbaa1fd38808cab30f284ce3f30f8", "patch": "@@ -853,6 +853,21 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         self.infcx.fully_resolve(&r).unwrap_or(self.tcx.lifetimes.re_static)\n     }\n+\n+    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        match self.infcx.fully_resolve(&ct) {\n+            Ok(ct) => ct,\n+            Err(_) => {\n+                debug!(\n+                    \"Resolver::fold_const: input const `{:?}` not fully resolvable\",\n+                    ct\n+                );\n+                // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n+                // accept a &'tcx ty::Const.\n+                self.tcx().types.ct_err\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}]}