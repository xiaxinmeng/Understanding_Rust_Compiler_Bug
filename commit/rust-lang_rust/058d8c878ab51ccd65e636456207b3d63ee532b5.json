{"sha": "058d8c878ab51ccd65e636456207b3d63ee532b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OGQ4Yzg3OGFiNTFjY2Q2NWU2MzY0NTYyMDdiM2Q2M2VlNTMyYjU=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-13T08:28:22Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:49:48Z"}, "message": "move chars_cmp_with_unwrap, chars_last_cmp and chars_next_cmp_with_unwrap to their own modules", "tree": {"sha": "52ba158446b53d9dace3782769f3e6baaa4c4749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ba158446b53d9dace3782769f3e6baaa4c4749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/058d8c878ab51ccd65e636456207b3d63ee532b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/058d8c878ab51ccd65e636456207b3d63ee532b5", "html_url": "https://github.com/rust-lang/rust/commit/058d8c878ab51ccd65e636456207b3d63ee532b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/058d8c878ab51ccd65e636456207b3d63ee532b5/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fb2b58a30f46cd462bea088ea523ed8f4d9580", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fb2b58a30f46cd462bea088ea523ed8f4d9580", "html_url": "https://github.com/rust-lang/rust/commit/94fb2b58a30f46cd462bea088ea523ed8f4d9580"}], "stats": {"total": 129, "additions": 74, "deletions": 55}, "files": [{"sha": "3ba59171f7717dfad83c74c016a7e368d148dbbd", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=058d8c878ab51ccd65e636456207b3d63ee532b5", "patch": "@@ -0,0 +1,44 @@\n+use crate::utils::method_chain_args;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_lint::Lint;\n+\n+/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    info: &crate::methods::BinaryExprInfo<'_>,\n+    chain_methods: &[&str],\n+    lint: &'static Lint,\n+    suggest: &str,\n+) -> bool {\n+    if_chain! {\n+        if let Some(args) = method_chain_args(info.chain, chain_methods);\n+        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n+        if let ast::LitKind::Char(c) = lit.node;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                lint,\n+                info.expr.span,\n+                &format!(\"you should use the `{}` method\", suggest),\n+                \"like this\",\n+                format!(\"{}{}.{}('{}')\",\n+                        if info.eq { \"\" } else { \"!\" },\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n+                        suggest,\n+                        c),\n+                applicability,\n+            );\n+\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}"}, {"sha": "07bbc5ca1bf46cdf843966ea89ce87b3378164e9", "filename": "clippy_lints/src/methods/chars_last_cmp.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs?ref=058d8c878ab51ccd65e636456207b3d63ee532b5", "patch": "@@ -0,0 +1,13 @@\n+use crate::methods::chars_cmp;\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_LAST_CMP;\n+\n+/// Checks for the `CHARS_LAST_CMP` lint.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    if chars_cmp::check(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n+        true\n+    } else {\n+        chars_cmp::check(cx, info, &[\"chars\", \"next_back\"], CHARS_LAST_CMP, \"ends_with\")\n+    }\n+}"}, {"sha": "28ede28e9358bee56a41817d121950bf3e0cd2d6", "filename": "clippy_lints/src/methods/chars_next_cmp_with_unwrap.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs?ref=058d8c878ab51ccd65e636456207b3d63ee532b5", "patch": "@@ -0,0 +1,8 @@\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_NEXT_CMP;\n+\n+/// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    crate::methods::chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n+}"}, {"sha": "b4c32e45da976cc6745db90fd4f9aace651ddc50", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 55, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058d8c878ab51ccd65e636456207b3d63ee532b5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=058d8c878ab51ccd65e636456207b3d63ee532b5", "patch": "@@ -1,7 +1,10 @@\n mod bind_instead_of_map;\n mod bytes_nth;\n mod chars_cmp;\n+mod chars_cmp_with_unwrap;\n+mod chars_last_cmp;\n mod chars_next_cmp;\n+mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod expect_fun_call;\n@@ -54,7 +57,7 @@ mod wrong_self_convention;\n mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{\n@@ -66,7 +69,7 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{TraitItem, TraitItemKind};\n-use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n@@ -2037,66 +2040,17 @@ fn lint_binary_expr_with_method_call(cx: &LateContext<'_>, info: &mut BinaryExpr\n     }\n \n     lint_with_both_lhs_and_rhs!(chars_next_cmp::check, cx, info);\n-    lint_with_both_lhs_and_rhs!(lint_chars_last_cmp, cx, info);\n-    lint_with_both_lhs_and_rhs!(lint_chars_next_cmp_with_unwrap, cx, info);\n+    lint_with_both_lhs_and_rhs!(chars_last_cmp::check, cx, info);\n+    lint_with_both_lhs_and_rhs!(chars_next_cmp_with_unwrap::check, cx, info);\n     lint_with_both_lhs_and_rhs!(lint_chars_last_cmp_with_unwrap, cx, info);\n }\n \n-/// Checks for the `CHARS_LAST_CMP` lint.\n-fn lint_chars_last_cmp<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if chars_cmp::check(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n-        true\n-    } else {\n-        chars_cmp::check(cx, info, &[\"chars\", \"next_back\"], CHARS_LAST_CMP, \"ends_with\")\n-    }\n-}\n-\n-/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n-fn lint_chars_cmp_with_unwrap<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    info: &BinaryExprInfo<'_>,\n-    chain_methods: &[&str],\n-    lint: &'static Lint,\n-    suggest: &str,\n-) -> bool {\n-    if_chain! {\n-        if let Some(args) = method_chain_args(info.chain, chain_methods);\n-        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n-        if let ast::LitKind::Char(c) = lit.node;\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                lint,\n-                info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n-                \"like this\",\n-                format!(\"{}{}.{}('{}')\",\n-                        if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n-                        suggest,\n-                        c),\n-                applicability,\n-            );\n-\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-/// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n-fn lint_chars_next_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n-}\n-\n /// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n fn lint_chars_last_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n+    if chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {\n-        lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next_back\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\")\n+        chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next_back\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\")\n     }\n }\n "}]}