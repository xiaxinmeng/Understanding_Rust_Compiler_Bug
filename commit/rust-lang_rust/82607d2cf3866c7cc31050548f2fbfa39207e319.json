{"sha": "82607d2cf3866c7cc31050548f2fbfa39207e319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjA3ZDJjZjM4NjZjN2NjMzEwNTA1NDhmMmZiZmEzOTIwN2UzMTk=", "commit": {"author": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-18T10:14:03Z"}, "committer": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-19T21:01:00Z"}, "message": "mv (mod) codemap source_map", "tree": {"sha": "f55b1efaefb9088df83f268478ba0c8adefd6943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f55b1efaefb9088df83f268478ba0c8adefd6943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82607d2cf3866c7cc31050548f2fbfa39207e319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82607d2cf3866c7cc31050548f2fbfa39207e319", "html_url": "https://github.com/rust-lang/rust/commit/82607d2cf3866c7cc31050548f2fbfa39207e319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82607d2cf3866c7cc31050548f2fbfa39207e319/comments", "author": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd05957103926fa10d41474fde773167fe64dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd05957103926fa10d41474fde773167fe64dfb", "html_url": "https://github.com/rust-lang/rust/commit/cbd05957103926fa10d41474fde773167fe64dfb"}], "stats": {"total": 310, "additions": 157, "deletions": 153}, "files": [{"sha": "e677906b0586b10fe3b6987b1e949c4aa758cd16", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -68,7 +68,7 @@ use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::codemap::{self, respan, CompilerDesugaringKind, Spanned};\n+use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n use syntax::std_inject;\n use syntax::symbol::{keywords, Symbol};\n use syntax::tokenstream::{Delimited, TokenStream, TokenTree};\n@@ -614,14 +614,14 @@ impl<'a> LoweringContext<'a> {\n \n     fn allow_internal_unstable(&self, reason: CompilerDesugaringKind, span: Span) -> Span {\n         let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(codemap::ExpnInfo {\n+        mark.set_expn_info(source_map::ExpnInfo {\n             call_site: span,\n             def_site: Some(span),\n-            format: codemap::CompilerDesugaring(reason),\n+            format: source_map::CompilerDesugaring(reason),\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: codemap::hygiene::default_edition(),\n+            edition: source_map::hygiene::default_edition(),\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }"}, {"sha": "bea9d80639c29e370f5fe2a841fd797800528b7b", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ use middle::cstore::CrateStore;\n use session::CrateDisambiguator;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n-use syntax::codemap::SourceMap;\n+use syntax::source_map::SourceMap;\n use syntax_pos::Span;\n \n use ich::StableHashingContext;"}, {"sha": "5bc80e537a3406db6e8511bec7f29430ca9c1d26", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use middle::cstore::CrateStore;\n use rustc_target::spec::abi::Abi;\n use rustc_data_structures::svh::Svh;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n "}, {"sha": "795dba93abd6b42492fd5d4eec2aa48185752632", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use util::nodemap::{NodeMap, FxHashSet};\n use mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n-use syntax::codemap::{self, Spanned};\n+use syntax::source_map::{self, Spanned};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n@@ -1100,7 +1100,7 @@ pub type Stmt = Spanned<StmtKind>;\n impl fmt::Debug for StmtKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Sadness.\n-        let spanned = codemap::dummy_spanned(self.clone());\n+        let spanned = source_map::dummy_spanned(self.clone());\n         write!(f,\n                \"stmt({}: {})\",\n                spanned.node.id(),"}, {"sha": "9fe462e65a2cb07fe4aeb9120dc71e68beff8495", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ pub use self::AnnNode::*;\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::codemap::{SourceMap, Spanned};\n+use syntax::source_map::{SourceMap, Spanned};\n use syntax::parse::ParseSess;\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};"}, {"sha": "c219bbcb62143c42a462a64a2950fda4911882bb", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc_data_structures::sync::Lrc;\n-use syntax::codemap::SourceMap;\n+use syntax::source_map::SourceMap;\n use syntax_pos::{BytePos, SourceFile};\n \n #[derive(Clone)]"}, {"sha": "30ae1fbfb30173595e321242b1aad948e0d96a09", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -25,7 +25,7 @@ use std::cell::RefCell;\n \n use syntax::ast;\n \n-use syntax::codemap::SourceMap;\n+use syntax::source_map::SourceMap;\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "9b25727112cdf682900c5cb455f012295f36dcb8", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n use std::ops::Index;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use ty::fold::TypeFoldable;\n use ty::subst::Kind;\n use ty::{self, CanonicalVar, Lift, Region, Slice, TyCtxt};"}, {"sha": "bd2c81c7fb64f4174a5addb700a13be437885de0", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -13,7 +13,7 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n use ty::{self, Ty, TyInfer, TyVar};\n-use syntax::codemap::CompilerDesugaringKind;\n+use syntax::source_map::CompilerDesugaringKind;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n "}, {"sha": "0ff5630f63ed0837b97c8e402b13ef5d83854f23", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -11,7 +11,7 @@\n use infer::InferCtxt;\n use infer::lexical_region_resolve::RegionResolutionError;\n use infer::lexical_region_resolve::RegionResolutionError::*;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use ty::{self, TyCtxt};\n use util::common::ErrorReported;\n "}, {"sha": "32687cb4884b7acee2d088e8884a6fbb1f747acc", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ use errors::{Applicability, DiagnosticBuilder};\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,"}, {"sha": "5b9ddabf21c1b36fa16681c5ba1eb72c73046338", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n use session::Session;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::MultiSpan;\n+use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;\n use util::nodemap::FxHashMap;"}, {"sha": "62a582a3b9310b3cdb65a4b97ac891579cf5511f", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -42,7 +42,7 @@ use lint::builtin::parser::QUESTION_MARK_MACRO_SEP;\n use session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n use syntax::ast;\n-use syntax::codemap::{MultiSpan, ExpnFormat};\n+use syntax::source_map::{MultiSpan, ExpnFormat};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;"}, {"sha": "759ac1a7952f7165b0ef858f42359513049c7fce", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -147,7 +147,7 @@ macro_rules! impl_stable_hash_for {\n macro_rules! impl_stable_hash_for_spanned {\n     ($T:path) => (\n \n-        impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ::syntax::codemap::Spanned<$T>\n+        impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ::syntax::source_map::Spanned<$T>\n         {\n             #[inline]\n             fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "2090950932b8e008c14a029b1d5416cd2a5ea02d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use middle::privacy;\n use ty::{self, TyCtxt};\n use util::nodemap::FxHashSet;\n \n-use syntax::{ast, codemap};\n+use syntax::{ast, source_map};\n use syntax::attr;\n use syntax_pos;\n \n@@ -115,7 +115,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, def: Def,\n-                                  pats: &[codemap::Spanned<hir::FieldPat>]) {\n+                                  pats: &[source_map::Spanned<hir::FieldPat>]) {\n         let variant = match self.tables.node_id_to_type(lhs.hir_id).sty {\n             ty::TyAdt(adt, _) => adt.variant_of_def(def),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")"}, {"sha": "e8429c78dc65a13d3a2bb3505289d4e922912ae0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -23,7 +23,7 @@ use ty;\n use std::fmt;\n use std::mem;\n use rustc_data_structures::sync::Lrc;\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::TyCtxt;\n@@ -943,11 +943,15 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n             // scopes, meaning that temporaries cannot outlive them.\n             // This ensures fixed size stacks.\n \n-            hir::ExprKind::Binary(codemap::Spanned { node: hir::BinOpKind::And, .. }, _, ref r) |\n-            hir::ExprKind::Binary(codemap::Spanned { node: hir::BinOpKind::Or, .. }, _, ref r) => {\n-                // For shortcircuiting operators, mark the RHS as a terminating\n-                // scope since it only executes conditionally.\n-                terminating(r.hir_id.local_id);\n+            hir::ExprKind::Binary(\n+                source_map::Spanned { node: hir::BinOpKind::And, .. },\n+                _, ref r) |\n+            hir::ExprKind::Binary(\n+                source_map::Spanned { node: hir::BinOpKind::Or, .. },\n+                _, ref r) => {\n+                    // For shortcircuiting operators, mark the RHS as a terminating\n+                    // scope since it only executes conditionally.\n+                    terminating(r.hir_id.local_id);\n             }\n \n             hir::ExprKind::If(ref expr, ref then, Some(ref otherwise)) => {"}, {"sha": "d5946786252880a01c3c03a24ad10d7eb9f6aeb7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -22,7 +22,7 @@ use lint;\n use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n-use syntax::codemap::{FileName, FilePathMapping};\n+use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::parse::token;\n use syntax::parse;"}, {"sha": "27d6a1f179139da5d68cda13e70e4c796bd84174", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -35,7 +35,7 @@ use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::ParseSess;\n-use syntax::{ast, codemap};\n+use syntax::{ast, source_map};\n use syntax::feature_gate::AttributeType;\n use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n@@ -484,7 +484,7 @@ impl Session {\n         );\n     }\n \n-    pub fn codemap<'a>(&'a self) -> &'a codemap::SourceMap {\n+    pub fn codemap<'a>(&'a self) -> &'a source_map::SourceMap {\n         self.parse_sess.codemap()\n     }\n     pub fn verbose(&self) -> bool {\n@@ -984,7 +984,7 @@ pub fn build_session(\n         sopts,\n         local_crate_source_file,\n         registry,\n-        Lrc::new(codemap::SourceMap::new(file_path_mapping)),\n+        Lrc::new(source_map::SourceMap::new(file_path_mapping)),\n         None,\n     )\n }\n@@ -993,7 +993,7 @@ pub fn build_session_with_codemap(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: errors::registry::Registry,\n-    codemap: Lrc<codemap::SourceMap>,\n+    codemap: Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n@@ -1070,7 +1070,7 @@ pub fn build_session_(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     span_diagnostic: errors::Handler,\n-    codemap: Lrc<codemap::SourceMap>,\n+    codemap: Lrc<source_map::SourceMap>,\n ) -> Session {\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = match Target::search(&host_triple) {"}, {"sha": "56484e17777fe46af755c223ecf258651ecbeab2", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ use infer::at::At;\n use infer::InferOk;\n use rustc_data_structures::small_vec::SmallVec;\n use std::iter::FromIterator;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use ty::subst::Kind;\n use ty::{self, Ty, TyCtxt};\n "}, {"sha": "868b8dfc885439389d083b231c5a044dd4838822", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,7 +10,7 @@\n \n use infer::InferCtxt;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use rustc_data_structures::small_vec::SmallVec;\n use traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n use traits::query::NoSolution;"}, {"sha": "737388ad411017541abb3aff5490b4e9b7de896d", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -15,7 +15,7 @@ use traits::query::Fallible;\n use infer::canonical::query_result;\n use infer::canonical::QueryRegionConstraint;\n use std::rc::Rc;\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n use traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub struct CustomTypeOp<F, G> {"}, {"sha": "921b3b1793afd25be0b2c7bef1adc8111fee8f28", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -73,7 +73,7 @@ use std::sync::Arc;\n use rustc_target::spec::abi;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n-use syntax::codemap::MultiSpan;\n+use syntax::source_map::MultiSpan;\n use syntax::edition::Edition;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};"}, {"sha": "c1f69d4a0f13a06925b85a01dd5561df6fbf8fd3", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -26,7 +26,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n use session::{CrateDisambiguator, Session};\n use std::mem;\n use syntax::ast::NodeId;\n-use syntax::codemap::{SourceMap, StableFilemapId};\n+use syntax::source_map::{SourceMap, StableFilemapId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n use syntax_pos::hygiene::{Mark, SyntaxContext, ExpnInfo};\n use ty;"}, {"sha": "450fbc0edbbe9315e978ef7633c639f06ffee01c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -32,7 +32,7 @@ use std::mem;\n use std::ptr;\n use std::collections::hash_map::Entry;\n use syntax_pos::Span;\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n \n pub struct QueryCache<'tcx, D: QueryConfig<'tcx> + ?Sized> {\n     pub(super) results: FxHashMap<D::Key, QueryValue<D::Value>>,"}, {"sha": "da60f41ee680ecbfc628dbd6f2b9180d789a05ba", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -17,7 +17,7 @@ use syntax::{\n         Mac, Mod, Mutability, Ty, TyKind, Unsafety, VisibilityKind,\n     },\n     attr,\n-    codemap::{\n+    source_map::{\n         respan, ExpnInfo, MacroAttribute,\n     },\n     ext::{"}, {"sha": "47fd92682fdc4b8787f13621815cb0c26d8bff30", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -25,7 +25,7 @@ use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n use syntax::ast::Mutability;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use value::Value;\n \n use super::super::callee;"}, {"sha": "07d9ab4e49709d47d03111481c8ede7be94397d6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -107,7 +107,7 @@ use std::sync::{Once, ONCE_INIT};\n use std::thread;\n \n use syntax::ast;\n-use syntax::codemap::{SourceMap, FileLoader, RealFileLoader};\n+use syntax::source_map::{SourceMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax_pos::{DUMMY_SP, MultiSpan, FileName};"}, {"sha": "284111756a6e0aef27f2e2ed3609df3127930f3a", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -32,7 +32,7 @@ use rustc_data_structures::sync::{self, Lrc};\n use syntax;\n use syntax::ast;\n use rustc_target::spec::abi::Abi;\n-use syntax::codemap::{SourceMap, FilePathMapping, FileName};\n+use syntax::source_map::{SourceMap, FilePathMapping, FileName};\n use errors;\n use errors::emitter::Emitter;\n use errors::{Level, DiagnosticBuilder};"}, {"sha": "cbcaa53b280a23b962fb03cd3810f122127a065d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -45,7 +45,7 @@ use rustc::util::nodemap::FxHashSet;\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};"}, {"sha": "b8e765d929021cde9f8018549a95da00560fe3df", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -25,7 +25,7 @@ use syntax::{ast, attr};\n use syntax::errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::Span;\n-use syntax::codemap;\n+use syntax::source_map;\n \n use rustc::hir;\n \n@@ -208,7 +208,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         }\n \n         fn rev_binop(binop: hir::BinOp) -> hir::BinOp {\n-            codemap::respan(binop.span,\n+            source_map::respan(binop.span,\n                             match binop.node {\n                                 hir::BinOpKind::Lt => hir::BinOpKind::Gt,\n                                 hir::BinOpKind::Le => hir::BinOpKind::Ge,"}, {"sha": "da971e182619f3aa2e20bd248e5afb18f92d5afb", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -38,7 +38,7 @@ use std::sync::Arc;\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::edition::Edition;\n use syntax::parse::source_file_to_stream;\n use syntax::symbol::Symbol;\n@@ -487,7 +487,7 @@ impl cstore::CStore {\n                 tokens: body.into(),\n                 legacy: def.legacy,\n             }),\n-            vis: codemap::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             tokens: None,\n         })\n     }"}, {"sha": "29d21337726c943796994f63d69ede13d686c168", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -39,7 +39,7 @@ use std::u32;\n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::symbol::InternedString;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n@@ -1117,7 +1117,7 @@ impl<'a, 'tcx> CrateMetadata {\n     /// multibyte characters. This information is enough to generate valid debuginfo\n     /// for items inlined from other crates.\n     pub fn imported_source_files(&'a self,\n-                             local_codemap: &codemap::SourceMap)\n+                             local_codemap: &source_map::SourceMap)\n                              -> ReadGuard<'a, Vec<cstore::ImportedSourceFile>> {\n         {\n             let source_files = self.codemap_import_info.borrow();"}, {"sha": "fe9ea00a488862ec2375be371391f4cf80f228cd", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -40,7 +40,7 @@ use rustc_data_structures::sync::Lrc;\n use std::u32;\n use syntax::ast::{self, CRATE_NODE_ID};\n use syntax::attr;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax_pos::{self, hygiene, FileName, SourceFile, Span};\n "}, {"sha": "70eda895bd0a24029d9439d52fb14ac7978392b5", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::Symbol;\n "}, {"sha": "57ff0f4c10a4b3bf1a36f08ee64a270f606d5fe5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -13,7 +13,7 @@ use borrow_check::nll::ToRegionVid;\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax_pos::symbol::Symbol;\n \n impl<'tcx> RegionInferenceContext<'tcx> {"}, {"sha": "dd298d9becbedbab82dd76c60c7c5c32c8629b29", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,8 +10,8 @@ use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n use syntax::ast::Mutability;\n-use syntax::codemap::Span;\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::Span;\n+use syntax::source_map::DUMMY_SP;\n \n use rustc::mir::interpret::{\n     EvalResult, EvalError, EvalErrorKind, GlobalId,"}, {"sha": "3329a47759beae867f48b12c0f85132d82a14e75", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::interpret::{\n     ScalarMaybeUndef,\n };\n \n-use syntax::codemap::{self, Span};\n+use syntax::source_map::{self, Span};\n use syntax::ast::Mutability;\n \n use super::{Place, PlaceExtra, Memory,\n@@ -91,7 +91,7 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n     pub instance: ty::Instance<'tcx>,\n \n     /// The span of the call site.\n-    pub span: codemap::Span,\n+    pub span: source_map::Span,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Return place and locals\n@@ -545,7 +545,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n-        span: codemap::Span,\n+        span: source_map::Span,\n         mir: &'mir mir::Mir<'tcx>,\n         return_place: Place,\n         return_to_block: StackPopCleanup,"}, {"sha": "112d8759c6832b1b48f979829b109a9b400884d7", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,7 +10,7 @@ use super::{EvalContext, Place, ValTy, Memory};\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::Size;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::ast::Mutability;\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail"}, {"sha": "f86c0e89954d20669df1a0461b0acec8a7f7efcd", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::BasicBlock;\n use rustc::ty::{self, Ty};\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n \n use rustc::mir::interpret::{EvalResult, Value};\n use interpret::{Machine, ValTy, EvalContext, Place, PlaceExtra};"}, {"sha": "3a772559d6de42ce4559891edd6d3f20987aebf2", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{LayoutOf, Size};\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use rustc::mir::interpret::{EvalResult, Scalar, Value};"}, {"sha": "f73c9d43699fcf86aa41e183fc82fc9c03340d7b", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -26,7 +26,7 @@ use std::fmt::{self, Write};\n use std::iter;\n use rustc::mir::mono::Linkage;\n use syntax_pos::symbol::Symbol;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n pub use rustc::mir::mono::MonoItem;\n \n /// Describes how a monomorphization will be instantiated in object files."}, {"sha": "47c45adb85f5af9e969bad255a0839bed0f7b55e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use interpret::EvalContext;\n use interpret::CompileTimeEvaluator;\n use interpret::{eval_promoted, mk_borrowck_eval_cx, ValTy};\n use transform::{MirPass, MirSource};\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::Substs;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::ParamEnv;"}, {"sha": "99ea62e80298ca06f32d80598c5fb3a62622cb91", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -20,7 +20,7 @@ use rustc::lint;\n use rustc::session::Session;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;"}, {"sha": "7b6011cc6f1b92c7400204cf5bf2d5d66c89a1e8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -49,7 +49,7 @@ use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n-use syntax::codemap::SourceMap;\n+use syntax::source_map::SourceMap;\n use syntax::ext::hygiene::{Mark, Transparency, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;"}, {"sha": "05b7ed96251b5f44808f19ab5cc6333341ac2de1", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -41,7 +41,7 @@ use syntax::print::pprust::{\n     ty_to_string\n };\n use syntax::ptr::P;\n-use syntax::codemap::{Spanned, DUMMY_SP, respan};\n+use syntax::source_map::{Spanned, DUMMY_SP, respan};\n use syntax_pos::*;\n \n use {escape, generated_code, lower_attributes, PathCollector, SaveContext};"}, {"sha": "1eb8bacb75a7ebe21aecc11f45b7d4a42ec3bd9d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -56,14 +56,14 @@ use std::fs::File;\n use std::path::{Path, PathBuf};\n \n use syntax::ast::{self, Attribute, NodeId, PatKind};\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::parse::lexer::comments::strip_doc_comment_decoration;\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{arg_to_string, ty_to_string};\n-use syntax::codemap::MacroAttribute;\n+use syntax::source_map::MacroAttribute;\n use syntax_pos::*;\n \n use json_dumper::JsonDumper;"}, {"sha": "8bffecfc7c90110b82c14d2e1bab30ea273686d2", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::source_map::{Span, DUMMY_SP};\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {"}, {"sha": "b5ee346569a694ec2e73c22f92b46e19d11f1df3", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -13,7 +13,7 @@ use rustc::traits::{EvaluationResult, Obligation, ObligationCause,\n use rustc::traits::query::CanonicalPredicateGoal;\n use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {"}, {"sha": "7b31518c07b18fe411d9202f0aca07e31651d2d8", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::outlives::Component;\n use rustc::ty::query::Providers;\n use rustc::ty::wf;\n use syntax::ast::DUMMY_NODE_ID;\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n use rustc::traits::FulfillmentContext;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "93c9764202f725040b235a5627f0d14171782c01", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -22,7 +22,7 @@ use util::nodemap::FxHashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::ptr::P;\n use syntax_pos::Span;\n "}, {"sha": "242b69294a5bcf8797062c7384da00e2b610891f", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::subst::Substs;\n use std::cmp;\n use std::iter;\n use rustc_target::spec::abi::Abi;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use rustc::hir;\n \n /// What signature do we *expect* the closure to have from context?"}, {"sha": "5fa1cd168a2d7fe49dab8a46388dd771009433f2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -122,7 +122,7 @@ use std::ops::{self, Deref};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::original_sp;\n+use syntax::source_map::original_sp;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, LocalInternedString, keywords};"}, {"sha": "956d542ab7d4e108a5edd61bf6fef3b5777ac635", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -43,7 +43,7 @@ use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::MetaItemKind;\n use syntax::attr::{InlineAttr, list_contains_name, mark_used};\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::symbol::{Symbol, keywords};\n use syntax::feature_gate;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "d5aab1fb098e155cf6db2285759924787b7041ac", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -417,7 +417,7 @@ mod test {\n \n     use syntax::symbol::Symbol;\n     use syntax::ast::*;\n-    use syntax::codemap::dummy_spanned;\n+    use syntax::source_map::dummy_spanned;\n     use syntax_pos::DUMMY_SP;\n     use syntax::with_globals;\n "}, {"sha": "784ef3f256bbc2f52fb97ec99f747780c964c213", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@ pub use self::Visibility::{Public, Inherited};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n-use syntax::codemap::{dummy_spanned, Spanned};\n+use syntax::source_map::{dummy_spanned, Spanned};\n use syntax::ptr::P;\n use syntax::symbol::keywords::{self, Keyword};\n use syntax::symbol::InternedString;"}, {"sha": "bd37a87b1e12c6d97e8bd3b0c390ed89c17940e9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -27,7 +27,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_target::spec::TargetTriple;\n \n use syntax::ast::{self, Ident};\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n@@ -260,7 +260,7 @@ impl DocAccessLevels for AccessLevels<DefId> {\n ///\n /// If the given `error_format` is `ErrorOutputType::Json` and no `SourceMap` is given, a new one\n /// will be created for the handler.\n-pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::SourceMap>>)\n+pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<source_map::SourceMap>>)\n     -> errors::Handler\n {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n@@ -277,7 +277,7 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::S\n         ),\n         ErrorOutputType::Json(pretty) => {\n             let codemap = codemap.unwrap_or_else(\n-                || Lrc::new(codemap::SourceMap::new(sessopts.file_path_mapping())));\n+                || Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping())));\n             Box::new(\n                 JsonEmitter::stderr(\n                     None,\n@@ -387,7 +387,7 @@ pub fn run_core(search_paths: SearchPaths,\n         ..Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n-        let codemap = Lrc::new(codemap::SourceMap::new(sessopts.file_path_mapping()));\n+        let codemap = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n         let diagnostic_handler = new_handler(error_format, Some(codemap.clone()));\n \n         let mut sess = session::build_session_("}, {"sha": "dd1e1e99957cea9cdca83cc679fee2ecbc83cf2b", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n use syntax::ptr::P;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax_pos::{self, Span};\n \n use rustc::hir;"}, {"sha": "4e78275f26b0930761cecb3be96d743bf01b68cf", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@ use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n \n-use syntax::codemap::{SourceMap, FilePathMapping};\n+use syntax::source_map::{SourceMap, FilePathMapping};\n use syntax::parse::lexer::{self, TokenAndSpan};\n use syntax::parse::token;\n use syntax::parse;"}, {"sha": "44a9710e30f7ddc257b606604a931b8e0806745c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -56,7 +56,7 @@ use externalfiles::ExternalHtml;\n \n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n-use syntax::codemap::FileName;\n+use syntax::source_map::FileName;\n use syntax::feature_gate::UnstableFeatures;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;"}, {"sha": "a3ae953e6ee9b99cdf19705905c2534e86617756", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -19,7 +19,7 @@ use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{Externs, CodegenOptions};\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::edition::Edition;\n "}, {"sha": "9854b919f5ce9e42ad7482fe76974a4210af87e9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -33,7 +33,7 @@ use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::ast;\n-use syntax::codemap::SourceMap;\n+use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;"}, {"sha": "68ddf72da0617bb4d9011c11425dd67ce7abb68d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -15,7 +15,7 @@ use std::mem;\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax_pos::{self, Span};\n \n use rustc::hir::map as hir_map;"}, {"sha": "ec6ac86ba6bd39dd24e6227846c6dfb5adce86a7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ pub use symbol::{Ident, Symbol as Name};\n pub use util::parser::ExprPrecedence;\n \n use syntax_pos::{Span, DUMMY_SP};\n-use codemap::{dummy_spanned, respan, Spanned};\n+use source_map::{dummy_spanned, respan, Spanned};\n use rustc_target::spec::abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;"}, {"sha": "cd9d76822106c431cd07254805310e7e8b1e1227", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -25,7 +25,7 @@ use ast;\n use ast::{AttrId, Attribute, AttrStyle, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n-use codemap::{BytePos, Spanned, respan, dummy_spanned};\n+use source_map::{BytePos, Spanned, respan, dummy_spanned};\n use syntax_pos::{FileName, Span};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::parser::Parser;"}, {"sha": "0e52434ec0170dc0dcd37600b61da7867fe3dfd3", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ use attr::HasAttrs;\n use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n use {fold, attr};\n use ast;\n-use codemap::Spanned;\n+use source_map::Spanned;\n use edition::Edition;\n use parse::{token, ParseSess};\n use OneVector;"}, {"sha": "d044efa3c38af20be7fcca1f01ad125520c4aaf4", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -13,7 +13,7 @@ use std::env;\n \n use ast;\n use ast::{Ident, Name};\n-use codemap;\n+use source_map;\n use syntax_pos::Span;\n use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n@@ -223,7 +223,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                 ty,\n                 expr,\n             ),\n-            vis: codemap::respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n+            vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Public),\n             span,\n             tokens: None,\n         })"}, {"sha": "c17874cf6f85fb1ed194e46a3177b2c4d31af456", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ pub use self::SyntaxExtension::*;\n \n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n-use codemap::{self, SourceMap, Spanned, respan};\n+use source_map::{self, SourceMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use edition::Edition;\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -481,7 +481,7 @@ impl DummyResult {\n     pub fn raw_expr(sp: Span) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprKind::Lit(P(codemap::respan(sp, ast::LitKind::Bool(false)))),\n+            node: ast::ExprKind::Lit(P(source_map::respan(sp, ast::LitKind::Bool(false)))),\n             span: sp,\n             attrs: ThinVec::new(),\n         })"}, {"sha": "1378a669e68cee60c041a77fb9a82b80fe81b73a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n use attr;\n use syntax_pos::{Pos, Span, DUMMY_SP};\n-use codemap::{dummy_spanned, respan, Spanned};\n+use source_map::{dummy_spanned, respan, Spanned};\n use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};"}, {"sha": "80bbc618932ef7f89613e9ff82e4527a42e96a04", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,7 +10,7 @@\n \n use attr::HasAttrs;\n use ast;\n-use codemap::{hygiene, ExpnInfo, ExpnFormat};\n+use source_map::{hygiene, ExpnInfo, ExpnFormat};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use parse::parser::PathStyle;"}, {"sha": "54b56874d6ad0640b85e227ca1a3aee6b6fe416f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -11,7 +11,7 @@\n use ast::{self, Block, Ident, NodeId, PatKind, Path};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use attr::{self, HasAttrs};\n-use codemap::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n+use source_map::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n use config::{is_test_or_bench, StripUnconfigured};\n use errors::{Applicability, FatalError};\n use ext::base::*;"}, {"sha": "18b4119fde8e49767d270bff3c14ce3cfece17fc", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, NodeId};\n-use codemap::{DUMMY_SP, dummy_spanned};\n+use source_map::{DUMMY_SP, dummy_spanned};\n use ext::base::ExtCtxt;\n use ext::expand::{AstFragment, AstFragmentKind};\n use ext::hygiene::Mark;"}, {"sha": "13a139deea4c31f7205cb183192bdf2164ae4d62", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Stmt, Ty};\n-use codemap::respan;\n+use source_map::respan;\n use syntax_pos::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n@@ -28,7 +28,7 @@ use tokenstream::{TokenStream, TokenTree};\n \n pub mod rt {\n     use ast;\n-    use codemap::Spanned;\n+    use source_map::Spanned;\n     use ext::base::ExtCtxt;\n     use parse::{self, classify};\n     use parse::token::{self, Token};\n@@ -40,7 +40,7 @@ pub mod rt {\n \n     pub use parse::new_parser_from_tts;\n     pub use syntax_pos::{BytePos, Span, DUMMY_SP, FileName};\n-    pub use codemap::{dummy_spanned};\n+    pub use source_map::{dummy_spanned};\n \n     pub trait ToTokens {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree>;"}, {"sha": "ac5429483149c7aad34415ba40cd887752820b0c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n-use codemap::Spanned;\n+use source_map::Spanned;\n use edition::{ALL_EDITIONS, Edition};\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler};"}, {"sha": "50a49e2f548e82a18b5bd8d6a5198d11a4ccd1b2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@\n use ast::*;\n use ast;\n use syntax_pos::Span;\n-use codemap::{Spanned, respan};\n+use source_map::{Spanned, respan};\n use parse::token::{self, Token};\n use ptr::P;\n use OneVector;"}, {"sha": "b0cf29e9f63a4a2322467778dba3767ca543a29a", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -19,7 +19,7 @@\n \n // FIXME spec the JSON output properly.\n \n-use codemap::{SourceMap, FilePathMapping};\n+use source_map::{SourceMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};"}, {"sha": "289f023cefae390fca0b112cc6a0cb776bff7011", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -145,7 +145,7 @@ pub mod syntax {\n \n pub mod ast;\n pub mod attr;\n-pub mod codemap;\n+pub mod source_map;\n #[macro_use]\n pub mod config;\n pub mod entry;"}, {"sha": "a240604bfe0ad1cc855aca1aa3df10c65083f641", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,7 +10,7 @@\n \n use attr;\n use ast;\n-use codemap::respan;\n+use source_map::respan;\n use parse::{SeqSep, PResult};\n use parse::token::{self, Nonterminal, DelimToken};\n use parse::parser::{Parser, TokenType, PathStyle};"}, {"sha": "67bc3d5e43547f247fd70e37af2f0dc2c6b96f2b", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -11,7 +11,7 @@\n pub use self::CommentStyle::*;\n \n use ast;\n-use codemap::SourceMap;\n+use source_map::SourceMap;\n use syntax_pos::{BytePos, CharPos, Pos, FileName};\n use parse::lexer::{is_block_doc_comment, is_pattern_whitespace};\n use parse::lexer::{self, ParseSess, StringReader, TokenAndSpan};"}, {"sha": "7a8c46ad3430827ed5c3b2c9857d70819c3f100c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -10,7 +10,7 @@\n \n use ast::{self, Ident};\n use syntax_pos::{self, BytePos, CharPos, Pos, Span, NO_EXPANSION};\n-use codemap::{SourceMap, FilePathMapping};\n+use source_map::{SourceMap, FilePathMapping};\n use errors::{Applicability, FatalError, DiagnosticBuilder};\n use parse::{token, ParseSess};\n use str::char_at;\n@@ -1827,7 +1827,7 @@ mod tests {\n     use ast::{Ident, CrateConfig};\n     use symbol::Symbol;\n     use syntax_pos::{BytePos, Span, NO_EXPANSION};\n-    use codemap::SourceMap;\n+    use source_map::SourceMap;\n     use errors;\n     use feature_gate::UnstableFeatures;\n     use parse::token;"}, {"sha": "d1f6191cf75ef9a44ab8b564f3b88bee3248caab", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -13,7 +13,7 @@\n use rustc_data_structures::sync::{Lrc, Lock};\n use ast::{self, CrateConfig, NodeId};\n use early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n-use codemap::{SourceMap, FilePathMapping};\n+use source_map::{SourceMap, FilePathMapping};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use errors::{Handler, ColorConfig, DiagnosticBuilder};\n use feature_gate::UnstableFeatures;"}, {"sha": "4c6034fdfce93fc9f885098ab103ff4ed42295ec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -42,7 +42,7 @@ use ast::{UseTree, UseTreeKind};\n use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n-use codemap::{self, SourceMap, Spanned, respan};\n+use source_map::{self, SourceMap, Spanned, respan};\n use syntax_pos::{self, Span, MultiSpan, BytePos, FileName, edition::Edition};\n use errors::{self, Applicability, DiagnosticBuilder, DiagnosticId};\n use parse::{self, SeqSep, classify, token};\n@@ -1879,7 +1879,7 @@ impl<'a> Parser<'a> {\n             let lit = self.parse_lit_token()?;\n             lit\n         };\n-        Ok(codemap::Spanned { node: lit, span: lo.to(self.prev_span) })\n+        Ok(source_map::Spanned { node: lit, span: lo.to(self.prev_span) })\n     }\n \n     /// matches '-' lit | lit (cf. ast_validation::AstValidator::check_expr_within_pat)\n@@ -2185,7 +2185,7 @@ impl<'a> Parser<'a> {\n     pub fn mk_mac_expr(&mut self, span: Span, m: Mac_, attrs: ThinVec<Attribute>) -> P<Expr> {\n         P(Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ExprKind::Mac(codemap::Spanned {node: m, span: span}),\n+            node: ExprKind::Mac(source_map::Spanned {node: m, span: span}),\n             span,\n             attrs,\n         })\n@@ -3074,7 +3074,7 @@ impl<'a> Parser<'a> {\n                 AssocOp::Equal | AssocOp::Less | AssocOp::LessEqual | AssocOp::NotEqual |\n                 AssocOp::Greater | AssocOp::GreaterEqual => {\n                     let ast_op = op.to_ast_binop().unwrap();\n-                    let binary = self.mk_binary(codemap::respan(cur_op_span, ast_op), lhs, rhs);\n+                    let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);\n                     self.mk_expr(span, binary, ThinVec::new())\n                 }\n                 AssocOp::Assign =>\n@@ -3094,7 +3094,7 @@ impl<'a> Parser<'a> {\n                         token::Shl =>     BinOpKind::Shl,\n                         token::Shr =>     BinOpKind::Shr,\n                     };\n-                    let aopexpr = self.mk_assign_op(codemap::respan(cur_op_span, aop), lhs, rhs);\n+                    let aopexpr = self.mk_assign_op(source_map::respan(cur_op_span, aop), lhs, rhs);\n                     self.mk_expr(span, aopexpr, ThinVec::new())\n                 }\n                 AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotEq => {\n@@ -3736,7 +3736,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         lo: Span,\n         attrs: Vec<Attribute>\n-    ) -> PResult<'a, codemap::Spanned<ast::FieldPat>> {\n+    ) -> PResult<'a, source_map::Spanned<ast::FieldPat>> {\n         // Check if a colon exists one ahead. This means we're parsing a fieldname.\n         let hi;\n         let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n@@ -3779,7 +3779,7 @@ impl<'a> Parser<'a> {\n             (subpat, fieldname, true)\n         };\n \n-        Ok(codemap::Spanned {\n+        Ok(source_map::Spanned {\n             span: lo.to(hi),\n             node: ast::FieldPat {\n                 ident: fieldname,\n@@ -3791,7 +3791,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse the fields of a struct-like pattern\n-    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<codemap::Spanned<ast::FieldPat>>, bool)> {\n+    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<source_map::Spanned<ast::FieldPat>>, bool)> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n@@ -4518,7 +4518,7 @@ impl<'a> Parser<'a> {\n             }\n         } else if let Some(macro_def) = self.eat_macro_def(\n             &attrs,\n-            &codemap::respan(lo, VisibilityKind::Inherited),\n+            &source_map::respan(lo, VisibilityKind::Inherited),\n             lo,\n         )? {\n             Stmt {\n@@ -5398,7 +5398,7 @@ impl<'a> Parser<'a> {\n             _ => return Ok(None),\n         };\n \n-        let eself = codemap::respan(eself_lo.to(eself_hi), eself);\n+        let eself = source_map::respan(eself_lo.to(eself_hi), eself);\n         Ok(Some(Arg::from_self(eself, eself_ident)))\n     }\n "}, {"sha": "3065e795ed81fd8e6f7e33134a09821b83989b5f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ use ast::{SelfKind, GenericBound, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n-use codemap::{self, SourceMap, Spanned};\n+use source_map::{self, SourceMap, Spanned};\n use syntax_pos::{self, BytePos};\n use syntax_pos::hygiene::{Mark, SyntaxContext};\n use parse::token::{self, BinOpToken, Token};\n@@ -380,7 +380,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n     to_string(|s| {\n         s.head(\"\")?;\n         s.print_fn(decl, header, Some(name),\n-                   generics, &codemap::dummy_spanned(ast::VisibilityKind::Inherited))?;\n+                   generics, &source_map::dummy_spanned(ast::VisibilityKind::Inherited))?;\n         s.end()?; // Close the head box\n         s.end() // Close the outer box\n     })\n@@ -1606,7 +1606,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     ty,\n                     default.as_ref().map(|expr| &**expr),\n-                    &codemap::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                    &source_map::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 )?;\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n@@ -1617,7 +1617,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     &ti.generics,\n                     sig,\n-                    &codemap::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                    &source_map::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 )?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n@@ -3085,7 +3085,7 @@ impl<'a> State<'a> {\n                       ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n                       name,\n                       &generics,\n-                      &codemap::dummy_spanned(ast::VisibilityKind::Inherited))?;\n+                      &source_map::dummy_spanned(ast::VisibilityKind::Inherited))?;\n         self.end()\n     }\n \n@@ -3185,7 +3185,7 @@ mod tests {\n     use super::*;\n \n     use ast;\n-    use codemap;\n+    use source_map;\n     use syntax_pos;\n     use with_globals;\n \n@@ -3205,7 +3205,7 @@ mod tests {\n                     &decl,\n                     ast::FnHeader {\n                         unsafety: ast::Unsafety::Normal,\n-                        constness: codemap::dummy_spanned(ast::Constness::NotConst),\n+                        constness: source_map::dummy_spanned(ast::Constness::NotConst),\n                         asyncness: ast::IsAsync::NotAsync,\n                         abi: Abi::Rust,\n                     },\n@@ -3222,7 +3222,7 @@ mod tests {\n         with_globals(|| {\n             let ident = ast::Ident::from_str(\"principal_skinner\");\n \n-            let var = codemap::respan(syntax_pos::DUMMY_SP, ast::Variant_ {\n+            let var = source_map::respan(syntax_pos::DUMMY_SP, ast::Variant_ {\n                 ident,\n                 attrs: Vec::new(),\n                 // making this up as I go.... ?"}, {"sha": "34cd026f7a06f2198882195f5fff9cd8d5a985ac", "filename": "src/libsyntax/source_map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "previous_filename": "src/libsyntax/codemap.rs"}, {"sha": "0db24c3b4824a31f3fe7e747d7cb2692adb8029e", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ use edition::Edition;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n-use codemap::{ExpnInfo, MacroAttribute, dummy_spanned, hygiene, respan};\n+use source_map::{ExpnInfo, MacroAttribute, dummy_spanned, hygiene, respan};\n use ptr::P;\n use tokenstream::TokenStream;\n "}, {"sha": "393989711de3107182f7e0dd7df1f7adc267777b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -22,7 +22,7 @@ use std::vec;\n use attr::{self, HasAttrs};\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, SourceFile, BytePos};\n \n-use codemap::{self, SourceMap, ExpnInfo, MacroAttribute, dummy_spanned};\n+use source_map::{self, SourceMap, ExpnInfo, MacroAttribute, dummy_spanned};\n use errors;\n use config;\n use entry::{self, EntryPointType};\n@@ -616,8 +616,8 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n     (item, reexport)\n }\n \n-fn nospan<T>(t: T) -> codemap::Spanned<T> {\n-    codemap::Spanned { node: t, span: DUMMY_SP }\n+fn nospan<T>(t: T) -> source_map::Spanned<T> {\n+    source_map::Spanned { node: t, span: DUMMY_SP }\n }\n \n fn path_node(ids: Vec<Ident>) -> ast::Path {"}, {"sha": "d49965fd93642dd957aa92a56dba3ab5370acce6", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use codemap::{SourceMap, FilePathMapping};\n+use source_map::{SourceMap, FilePathMapping};\n use errors::Handler;\n use errors::emitter::EmitterWriter;\n use std::io;"}, {"sha": "b43d22d88557db1847a1d10de66a5ee913a336fd", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, Ident};\n-use codemap::FilePathMapping;\n+use source_map::FilePathMapping;\n use parse::{ParseSess, PResult, source_file_to_stream};\n use parse::{lexer, new_parser_from_source_str};\n use parse::parser::Parser;"}, {"sha": "e3bd2ca01310bca7a0bc5bb57642091a9ef669db", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use syntax::ast::*;\n-use syntax::codemap::Spanned;\n+use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;"}, {"sha": "973ad631b8343928aa84cdbfe648b1540c161a2b", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -14,7 +14,7 @@ use errors::FatalError;\n use proc_macro::{TokenStream, __internal};\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::ext::base::*;\n use syntax::visit::Visitor;\n "}, {"sha": "28a2c11ceb1047fc3e876ddd0dddef1c9e059f97", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -198,7 +198,7 @@ use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{self, respan};\n+use syntax::source_map::{self, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n@@ -1619,7 +1619,7 @@ impl<'a> TraitDef<'a> {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n-                        codemap::Spanned {\n+                        source_map::Spanned {\n                             span: pat.span.with_ctxt(self.span.ctxt()),\n                             node: ast::FieldPat {\n                                 ident: ident.unwrap(),"}, {"sha": "fa284f4ab0e17bb7623aca19a56f05af614bbafd", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ use syntax::ast;\n use syntax::ast::{Expr, GenericParamKind, Generics, Ident, SelfKind, GenericArg};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{respan, DUMMY_SP};\n+use syntax::source_map::{respan, DUMMY_SP};\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;"}, {"sha": "56f28d04e9d5c4bd8bc8f09eb79cbcd851df2867", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -21,7 +21,7 @@\n use rustc_data_structures::small_vec::OneVector;\n \n use syntax::ast;\n-use syntax::codemap::respan;\n+use syntax::source_map::respan;\n use syntax::ext::base;\n use syntax::ext::base::*;\n use syntax::feature_gate;"}, {"sha": "ff60262055bf3d5c309ace3506cf5d9cba7b6cf4", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -12,7 +12,7 @@ use std::panic;\n \n use errors::FatalError;\n \n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::ext::base::*;\n use syntax::tokenstream::TokenStream;\n use syntax::ext::base;"}, {"sha": "65e175f95df8118e5bfc1c4712785b8c41536d6b", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -14,7 +14,7 @@ use errors;\n \n use syntax::ast::{self, Ident};\n use syntax::attr;\n-use syntax::codemap::{ExpnInfo, MacroAttribute, hygiene, respan};\n+use syntax::source_map::{ExpnInfo, MacroAttribute, hygiene, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;"}, {"sha": "4b0bc8f02b4f9a5add0feb810e1bf1ccad304678", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@ extern crate syntax;\n extern crate syntax_pos;\n \n use syntax::ast;\n-use syntax::codemap::FilePathMapping;\n+use syntax::source_map::FilePathMapping;\n use syntax::print::pprust;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;"}, {"sha": "d757dd97e94b6218a00bf87b0a4471389ff40a8d", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ extern crate syntax;\n extern crate syntax_pos;\n \n use syntax::ast;\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::print::pprust;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n@@ -28,7 +28,7 @@ fn main() {\n }\n \n fn run() {\n-    let ps = syntax::parse::ParseSess::new(codemap::FilePathMapping::empty());\n+    let ps = syntax::parse::ParseSess::new(source_map::FilePathMapping::empty());\n     let mut resolver = syntax::ext::base::DummyResolver;\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps,"}, {"sha": "4dfecb33c144d003b4dfeccd63ad240813d894f8", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -24,7 +24,7 @@ use rustc::session::config::{Input, Options,\n use rustc_driver::driver::{self, compile_input, CompileController};\n use rustc_metadata::cstore::CStore;\n use rustc_errors::registry::Registry;\n-use syntax::codemap::FileName;\n+use syntax::source_map::FileName;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n \n use std::path::PathBuf;"}, {"sha": "6a706bdb9b2b6af133d24c63b3da2eaa57afe8f4", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -17,7 +17,7 @@ extern crate syntax;\n use syntax::ast::*;\n use syntax::attr::*;\n use syntax::ast;\n-use syntax::codemap::{FilePathMapping, FileName};\n+use syntax::source_map::{FilePathMapping, FileName};\n use syntax::parse;\n use syntax::parse::{ParseSess, PResult};\n use syntax::parse::new_parser_from_source_str;"}, {"sha": "985f31296fb87f187b16e3abc06fae3d3032dc23", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -22,7 +22,7 @@ use deriving::generic::ty::*;\n \n use rustc_plugin::Registry;\n use syntax::ast::*;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::symbol::Symbol;"}, {"sha": "14e9dbf3a37bca6eba3f21567cca6016160e6d70", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -18,7 +18,7 @@ extern crate rustc_plugin;\n extern crate syntax_pos;\n \n use syntax::ast::{self, Item, MetaItem, ItemKind};\n-use syntax::codemap::DUMMY_SP;\n+use syntax::source_map::DUMMY_SP;\n use syntax::ext::base::*;\n use syntax::ext::quote::rt::ToTokens;\n use syntax::parse::{self, token};"}, {"sha": "ee424b31636e1b1e5b00ebd3863dfd2c07422eb9", "filename": "src/test/run-pass-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -16,7 +16,7 @@\n extern crate syntax;\n \n use std::path::Path;\n-use syntax::codemap::FilePathMapping;\n+use syntax::source_map::FilePathMapping;\n use syntax::parse::{self, ParseSess};\n \n #[path = \"mod_dir_simple/test.rs\"]"}, {"sha": "e944ef2b620df39cdfba04c748bf836a57ae6b7b", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -35,8 +35,8 @@ extern crate syntax;\n \n use rustc_data_structures::thin_vec::ThinVec;\n use syntax::ast::*;\n-use syntax::codemap::{Spanned, DUMMY_SP, FileName};\n-use syntax::codemap::FilePathMapping;\n+use syntax::source_map::{Spanned, DUMMY_SP, FileName};\n+use syntax::source_map::FilePathMapping;\n use syntax::fold::{self, Folder};\n use syntax::parse::{self, ParseSess};\n use syntax::print::pprust;"}, {"sha": "5214d7db5cca78172026727f93cf6e11b59484b7", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -29,7 +29,7 @@ use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n use rustc::ty;\n-use syntax::{ast, codemap};\n+use syntax::{ast, source_map};\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "55fed8693a06517eb4b0d2562d82e9987636071b", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82607d2cf3866c7cc31050548f2fbfa39207e319/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=82607d2cf3866c7cc31050548f2fbfa39207e319", "patch": "@@ -15,7 +15,7 @@\n extern crate syntax;\n extern crate syntax_pos;\n \n-use syntax::codemap::FilePathMapping;\n+use syntax::source_map::FilePathMapping;\n use syntax::print::pprust::*;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;"}]}