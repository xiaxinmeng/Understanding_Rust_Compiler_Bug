{"sha": "e84a719e375ac48c6792d0495fb3302879bf7916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NGE3MTllMzc1YWM0OGM2NzkyZDA0OTVmYjMzMDI4NzliZjc5MTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T22:25:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T20:23:34Z"}, "message": "Misc. cleanup in regionck: Remove a one-variant enum for some reason.", "tree": {"sha": "c59f944c1d9d3bed670e1a7e0885103e90d6c7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c59f944c1d9d3bed670e1a7e0885103e90d6c7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84a719e375ac48c6792d0495fb3302879bf7916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84a719e375ac48c6792d0495fb3302879bf7916", "html_url": "https://github.com/rust-lang/rust/commit/e84a719e375ac48c6792d0495fb3302879bf7916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84a719e375ac48c6792d0495fb3302879bf7916/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c70d68637536cc2922c1a7c2a612877705a2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c70d68637536cc2922c1a7c2a612877705a2ed", "html_url": "https://github.com/rust-lang/rust/commit/48c70d68637536cc2922c1a7c2a612877705a2ed"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "f8d32cd17f3161144f2bf6827adc60f2fbd8d7ce", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e84a719e375ac48c6792d0495fb3302879bf7916/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84a719e375ac48c6792d0495fb3302879bf7916/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=e84a719e375ac48c6792d0495fb3302879bf7916", "patch": "@@ -102,7 +102,6 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-use self::RepeatingScope::Repeating;\n use self::SubjectNode::Subject;\n \n // a variation on try that just returns unit\n@@ -114,7 +113,7 @@ macro_rules! ignore_err {\n // PUBLIC ENTRY POINTS\n \n pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) {\n-    let mut rcx = Rcx::new(fcx, Repeating(e.id), Subject(e.id));\n+    let mut rcx = Rcx::new(fcx, RepeatingScope(e.id), e.id, Subject(e.id));\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n         rcx.visit_expr(e);\n@@ -124,16 +123,17 @@ pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) {\n }\n \n pub fn regionck_item(fcx: &FnCtxt, item: &ast::Item) {\n-    let mut rcx = Rcx::new(fcx, Repeating(item.id), Subject(item.id));\n+    let mut rcx = Rcx::new(fcx, RepeatingScope(item.id), item.id, Subject(item.id));\n     rcx.visit_region_obligations(item.id);\n     rcx.resolve_regions_and_report_errors();\n }\n \n pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, decl: &ast::FnDecl, blk: &ast::Block) {\n-    let mut rcx = Rcx::new(fcx, Repeating(blk.id), Subject(id));\n+    debug!(\"regionck_fn(id={})\", id);\n+    let mut rcx = Rcx::new(fcx, RepeatingScope(blk.id), blk.id, Subject(id));\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n-        rcx.visit_fn_body(id, decl, blk);\n+        rcx.visit_fn_body(id, decl, blk, blk.span); // TODO suboptimal span\n     }\n \n     // Region checking a fn can introduce new trait obligations,\n@@ -148,7 +148,7 @@ pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, decl: &ast::FnDecl, blk: &ast:\n pub fn regionck_ensure_component_tys_wf<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                   span: Span,\n                                                   component_tys: &[Ty<'tcx>]) {\n-    let mut rcx = Rcx::new(fcx, Repeating(0), SubjectNode::None);\n+    let mut rcx = Rcx::new(fcx, RepeatingScope(0), 0, SubjectNode::None);\n     for &component_ty in component_tys {\n         // Check that each type outlives the empty region. Since the\n         // empty region is a subregion of all others, this can't fail\n@@ -189,14 +189,14 @@ fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n     }\n }\n \n-pub enum RepeatingScope { Repeating(ast::NodeId) }\n+struct RepeatingScope(ast::NodeId);\n pub enum SubjectNode { Subject(ast::NodeId), None }\n \n impl<'a, 'tcx> Rcx<'a, 'tcx> {\n     pub fn new(fcx: &'a FnCtxt<'a, 'tcx>,\n                initial_repeating_scope: RepeatingScope,\n                subject: SubjectNode) -> Rcx<'a, 'tcx> {\n-        let Repeating(initial_repeating_scope) = initial_repeating_scope;\n+        let RepeatingScope(initial_repeating_scope) = initial_repeating_scope;\n         Rcx { fcx: fcx,\n               repeating_scope: initial_repeating_scope,\n               subject: subject,\n@@ -208,10 +208,8 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         self.fcx.ccx.tcx\n     }\n \n-    pub fn set_repeating_scope(&mut self, scope: ast::NodeId) -> ast::NodeId {\n-        let old_scope = self.repeating_scope;\n-        self.repeating_scope = scope;\n-        old_scope\n+    fn set_repeating_scope(&mut self, scope: ast::NodeId) -> ast::NodeId {\n+        mem::replace(&mut self.repeating_scope, scope)\n     }\n \n     /// Try to resolve the type for the given node, returning t_err if an error results.  Note that"}]}