{"sha": "094f91b6852a62a902eb23834552ca1bbfa1eda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NGY5MWI2ODUyYTYyYTkwMmViMjM4MzQ1NTJjYTFiYmZhMWVkYTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:45:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:54:20Z"}, "message": "rustdoc: Write markdown for resources", "tree": {"sha": "c9169160acdf581963a3085b037f2fe478d99612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9169160acdf581963a3085b037f2fe478d99612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094f91b6852a62a902eb23834552ca1bbfa1eda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094f91b6852a62a902eb23834552ca1bbfa1eda7", "html_url": "https://github.com/rust-lang/rust/commit/094f91b6852a62a902eb23834552ca1bbfa1eda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094f91b6852a62a902eb23834552ca1bbfa1eda7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0aefa8bfbd1f1906f6aa7bba430c1765d2345f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0aefa8bfbd1f1906f6aa7bba430c1765d2345f", "html_url": "https://github.com/rust-lang/rust/commit/ca0aefa8bfbd1f1906f6aa7bba430c1765d2345f"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "496d8c79152abca2fc0b3a607ed96f34654e8eb5", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/094f91b6852a62a902eb23834552ca1bbfa1eda7/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094f91b6852a62a902eb23834552ca1bbfa1eda7/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=094f91b6852a62a902eb23834552ca1bbfa1eda7", "patch": "@@ -93,6 +93,10 @@ fn write_mod_contents(\n         write_fn(ctxt, fndoc);\n     }\n \n+    for resdoc in *doc.resources {\n+        write_res(ctxt, resdoc);\n+    }\n+\n     for moddoc in *doc.mods {\n         write_mod(ctxt, moddoc);\n     }\n@@ -139,6 +143,12 @@ fn code_block_indent(s: str) -> str {\n     str::connect(indented, \"\\n\")\n }\n \n+#[test]\n+fn write_markdown_should_write_function_header() {\n+    let markdown = test::render(\"fn func() { }\");\n+    assert str::contains(markdown, \"### Function `func`\");\n+}\n+\n #[test]\n fn should_write_the_function_signature() {\n     let markdown = test::render(\"#[doc = \\\"f\\\"] fn a() { }\");\n@@ -168,6 +178,12 @@ fn should_correctly_indent_fn_signature() {\n     assert str::contains(markdown, \"    line 1\\n    line 2\");\n }\n \n+#[test]\n+fn should_leave_blank_line_between_fn_header_and_sig() {\n+    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n+    assert str::contains(markdown, \"Function `a`\\n\\n    fn a()\");\n+}\n+\n fn write_brief(\n     ctxt: ctxt,\n     brief: option<str>\n@@ -181,6 +197,20 @@ fn write_brief(\n     }\n }\n \n+#[test]\n+fn should_leave_blank_line_after_brief() {\n+    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n+    assert str::contains(markdown, \"brief\\n\\n\");\n+}\n+\n+#[test]\n+fn should_leave_blank_line_between_brief_and_desc() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")] fn a() { }\"\n+    );\n+    assert str::contains(markdown, \"brief\\n\\ndesc\");\n+}\n+\n fn write_desc(\n     ctxt: ctxt,\n     desc: option<str>\n@@ -437,6 +467,33 @@ fn should_write_variant_list_with_signatures() {\n          \\n* `c(int)` - a\\n\\n\");\n }\n \n+fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n+    write_header(ctxt, h3, #fmt(\"Resource `%s`\", doc.name));\n+    write_sig(ctxt, doc.sig);\n+    write_brief(ctxt, doc.brief);\n+    write_desc(ctxt, doc.desc);\n+    write_args(ctxt, doc.args);\n+}\n+\n+#[test]\n+fn should_write_resource_header() {\n+    let markdown = test::render(\"resource r(a: bool) { }\");\n+    assert str::contains(markdown, \"### Resource `r`\");\n+}\n+\n+#[test]\n+fn should_write_resource_signature() {\n+    let markdown = test::render(\"resource r(a: bool) { }\");\n+    assert str::contains(markdown, \"\\n    resource r(a: bool)\\n\");\n+}\n+\n+#[test]\n+fn should_write_resource_args() {\n+    let markdown = test::render(\"#[doc(args(a = \\\"b\\\"))]\\\n+                                 resource r(a: bool) { }\");\n+    assert str::contains(markdown, \"Arguments:\\n\\n* `a`: `bool` - b\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {\n@@ -477,12 +534,6 @@ mod test {\n         assert str::contains(markdown, \"# Crate belch\");\n     }\n \n-    #[test]\n-    fn write_markdown_should_write_function_header() {\n-        let markdown = render(\"fn func() { }\");\n-        assert str::contains(markdown, \"### Function `func`\");\n-    }\n-\n     #[test]\n     fn write_markdown_should_write_mod_headers() {\n         let markdown = render(\"mod moo { }\");\n@@ -494,25 +545,4 @@ mod test {\n         let markdown = render(\"mod morp { }\");\n         assert str::contains(markdown, \"Module `morp`\\n\\n\");\n     }\n-\n-    #[test]\n-    fn should_leave_blank_line_between_fn_header_and_sig() {\n-        let markdown = render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n-        assert str::contains(markdown, \"Function `a`\\n\\n    fn a()\");\n-    }\n-\n-    #[test]\n-    fn should_leave_blank_line_after_brief() {\n-        let markdown = render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n-        assert str::contains(markdown, \"brief\\n\\n\");\n-    }\n-\n-    #[test]\n-    fn should_leave_blank_line_between_brief_and_desc() {\n-        let markdown = render(\n-            \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")] fn a() { }\"\n-        );\n-        assert str::contains(markdown, \"brief\\n\\ndesc\");\n-    }\n-\n }\n\\ No newline at end of file"}]}