{"sha": "829969e8b1fb6d371a36654ec9ada4568a495da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTk2OWU4YjFmYjZkMzcxYTM2NjU0ZWM5YWRhNDU2OGE0OTVkYTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T10:58:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T10:58:32Z"}, "message": "miri build script: support building miri in debug mode;  avoid rebuilding Miri on CI (#747)\n\n miri build script: support building miri in debug mode;  avoid rebuilding Miri on CI", "tree": {"sha": "36ba0bca7784bec065a7dce929d41348ecfdb0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ba0bca7784bec065a7dce929d41348ecfdb0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829969e8b1fb6d371a36654ec9ada4568a495da9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7mXYCRBK7hj4Ov3rIwAAdHIIAH/gtOSkX4vkzPNmiAYJ/hIr\nr6eYkFUAskhkIUymGBgDj7alY/q9O3TP07tOS6OSKhcGqOdGpuDiiDLbfJgKTJiN\nu72nvuSwwfqViqwJvBk9GsRqQhkfyzT+tFgr2CyO/J7YmXcM+UKFse9wc+pu3dvS\nYYz5Ta93Ze7YB+h38LEYmQd7lOc4GruYxOllwqW5hFuD6pqZTRx/PPTucRtqoMbb\ntIrU6+KsDcuXQ5iPbGPyKjHMLhgk9BRXeTMo1ikky+5k4JOOtKYC5QAkuJnQpXwL\nx+4Kaggzeu3HAMbWZXpFsNSZqhCEt3d/jwiujNh4OrFgpkHW8K0Cbbsow0i6muE=\n=Mlsa\n-----END PGP SIGNATURE-----\n", "payload": "tree 36ba0bca7784bec065a7dce929d41348ecfdb0de\nparent b4b71e30bd5e1ed3af320026133d2abf5a7fb205\nparent 2427fee7f011d45aa898d26290e68b6456a0384c\nauthor Ralf Jung <post@ralfj.de> 1559127512 +0200\ncommitter GitHub <noreply@github.com> 1559127512 +0200\n\nmiri build script: support building miri in debug mode;  avoid rebuilding Miri on CI (#747)\n\n miri build script: support building miri in debug mode;  avoid rebuilding Miri on CI"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829969e8b1fb6d371a36654ec9ada4568a495da9", "html_url": "https://github.com/rust-lang/rust/commit/829969e8b1fb6d371a36654ec9ada4568a495da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829969e8b1fb6d371a36654ec9ada4568a495da9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b71e30bd5e1ed3af320026133d2abf5a7fb205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b71e30bd5e1ed3af320026133d2abf5a7fb205", "html_url": "https://github.com/rust-lang/rust/commit/b4b71e30bd5e1ed3af320026133d2abf5a7fb205"}, {"sha": "2427fee7f011d45aa898d26290e68b6456a0384c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2427fee7f011d45aa898d26290e68b6456a0384c", "html_url": "https://github.com/rust-lang/rust/commit/2427fee7f011d45aa898d26290e68b6456a0384c"}], "stats": {"total": 98, "additions": 83, "deletions": 15}, "files": [{"sha": "2181403b7bde94745c5955323bffedfe9c4e856c", "filename": "miri", "status": "modified", "additions": 81, "deletions": 14, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/829969e8b1fb6d371a36654ec9ada4568a495da9/miri", "raw_url": "https://github.com/rust-lang/rust/raw/829969e8b1fb6d371a36654ec9ada4568a495da9/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=829969e8b1fb6d371a36654ec9ada4568a495da9", "patch": "@@ -1,21 +1,60 @@\n #!/bin/sh\n set -e\n-# I'd love to use `jq` for parsing the JSON properly, but macOS is totally underequipped for this kind of work.\n-TARGET=$(rustc --print target-spec-json -Z unstable-options | grep llvm-target | cut -d '\"' -f 4)\n+USAGE=$(cat <<\"EOF\"\n+  COMMANDS\n+\n+./miri install <flags>:\n+Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n+install`.  Sets up the rpath such that the installed binary should work in any\n+working directory.\n+\n+./miri build <flags>:\n+Just build miri.  <flags> are passed to `cargo build`.\n+\n+./miri test <flags>:\n+Build miri, set up a sysroot and then run the test suite. <flags> are passed\n+to the final `cargo test` invocation.\n+\n+./miri run <flags>:\n+Build miri, set up a sysroot and then run the driver with the given <flags>.\n+\n+All commands also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n+<flags>\") which uses debug builds instead of release builds, for faster build\n+times and slower execution times.\n+\n+  ENVIRONMENT VARIABLES\n+\n+MIRI_SYSROOT:\n+If already set, the \"sysroot setup\" step is skipped.\n+\n+CARGO_EXTRA_FLAGS:\n+Pass extra flags to all cargo invocations.\n+EOF\n+)\n+\n+## Preparation\n+TARGET=$(rustc --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n SYSROOT=$(rustc --print sysroot)\n+LIBDIR=$SYSROOT/lib/rustlib/$TARGET/lib\n+if ! test -d \"$LIBDIR\"; then\n+    echo \"Something went wrong determining the library dir.\"\n+    echo \"I got $LIBDIR but that does not exist.\"\n+    echo \"Please report a bug at https://github.com/rust-lang/miri/issues.\"\n+    exit 2\n+fi\n # We set the rpath so that Miri finds the private rustc libraries it needs.\n # We enable debug-assertions to get tracing.\n # We enable line-only debuginfo for backtraces.\n-export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$SYSROOT/lib/rustlib/$TARGET/lib -C debug-assertions -C debuginfo=1\"\n+export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR -C debug-assertions -C debuginfo=1\"\n \n ## Helper functions\n \n # Build a sysroot and set MIRI_SYSROOT to use it.  Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n     # Build once, for the user to see.\n-    cargo run --release --bin cargo-miri -- miri setup \"$@\"\n+    cargo run $CARGO_BUILD_FLAGS --bin cargo-miri -- miri setup \"$@\"\n     # Call again, to just set env var.\n-    eval $(cargo run --release -q --bin cargo-miri -- miri setup --env \"$@\")\n+    eval $(cargo run $CARGO_BUILD_FLAGS -q --bin cargo-miri -- miri setup --env \"$@\")\n     export MIRI_SYSROOT\n }\n \n@@ -48,23 +87,46 @@ find_sysroot() {\n \n ## Main\n \n+# Determine command.\n COMMAND=\"$1\"\n shift\n \n+# Determine flags passed to all cargo invocations.\n+# This is a bit more annoying that one would hope due to\n+# <https://github.com/rust-lang/cargo/issues/6992>.\n case \"$COMMAND\" in\n-install)\n+*-debug)\n+    CARGO_INSTALL_FLAGS=\"--debug $CARGO_EXTRA_FLAGS\"\n+    CARGO_BUILD_FLAGS=\"$CARGO_EXTRA_FLAGS\"\n+    ;;\n+*)\n+    CARGO_INSTALL_FLAGS=\"$CARGO_EXTRA_FLAGS\"\n+    CARGO_BUILD_FLAGS=\"--release $CARGO_EXTRA_FLAGS\"\n+    ;;\n+esac\n+\n+# Run command.\n+case \"$COMMAND\" in\n+install|install-debug)\n     # \"--locked\" to respect the Cargo.lock file if it exists,\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n-    exec cargo \"$COMMAND\" --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n+    exec cargo install $CARGO_INSTALL_FLAGS --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n     ;;\n-build)\n+build|build-debug)\n     # Build, and let caller control flags.\n-    exec cargo \"$COMMAND\" --release \"$@\"\n+    exec cargo build $CARGO_BUILD_FLAGS \"$@\"\n+    ;;\n+test|test-debug)\n+    # First build and get a sysroot.\n+    cargo build $CARGO_BUILD_FLAGS\n+    find_sysroot\n+    # Then test, and let caller control flags.\n+    exec cargo test $CARGO_BUILD_FLAGS \"$@\"\n     ;;\n-test|run)\n-    # In \"run\" mode, scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n+run|run-debug)\n+    # Scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n-    if [ \"$COMMAND\" = \"run\" ] && [ -z \"$MIRI_TEST_TARGET\" ]; then\n+    if [ -z \"$MIRI_TEST_TARGET\" ]; then\n         for ARG in \"$@\"; do\n             if [ \"$LAST_ARG\" = \"--target\" ]; then\n                 # Found it!\n@@ -75,9 +137,14 @@ test|run)\n         done\n     fi\n     # First build and get a sysroot.\n-    cargo build --release\n+    cargo build $CARGO_BUILD_FLAGS\n     find_sysroot\n     # Then run the actual command.\n-    exec cargo \"$COMMAND\" --release \"$@\"\n+    exec cargo run $CARGO_BUILD_FLAGS \"$@\"\n     ;;\n+*)\n+    echo \"Unknown command: $COMMAND\"\n+    echo\n+    echo \"$USAGE\"\n+    exit 1\n esac"}, {"sha": "c06dbaee3638a8a612f214bb961e6e29b11ece83", "filename": "travis.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/829969e8b1fb6d371a36654ec9ada4568a495da9/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/829969e8b1fb6d371a36654ec9ada4568a495da9/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=829969e8b1fb6d371a36654ec9ada4568a495da9", "patch": "@@ -7,10 +7,11 @@ if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n else\n   FOREIGN_TARGET=i686-unknown-linux-gnu\n fi\n+export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n-./miri build --all-features --all-targets\n+./miri build --all-targets\n ./miri install\n echo\n "}]}