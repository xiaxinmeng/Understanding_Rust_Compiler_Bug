{"sha": "cc82ccb145f2056854b499d5033be1a06ddfa29c", "node_id": "C_kwDOAAsO6NoAKGNjODJjY2IxNDVmMjA1Njg1NGI0OTlkNTAzM2JlMWEwNmRkZmEyOWM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-12T08:31:41Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-12T08:55:14Z"}, "message": "`#[must_use]` for fns returning a list of errors", "tree": {"sha": "2bcc83b49f538e41b32503ff9a552bd1f4b784ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bcc83b49f538e41b32503ff9a552bd1f4b784ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc82ccb145f2056854b499d5033be1a06ddfa29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc82ccb145f2056854b499d5033be1a06ddfa29c", "html_url": "https://github.com/rust-lang/rust/commit/cc82ccb145f2056854b499d5033be1a06ddfa29c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc82ccb145f2056854b499d5033be1a06ddfa29c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19adefa0e5aca0aabca2430530577ee140e4efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19adefa0e5aca0aabca2430530577ee140e4efa", "html_url": "https://github.com/rust-lang/rust/commit/a19adefa0e5aca0aabca2430530577ee140e4efa"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "9a9a1696b0063532821fdd7e4d667f677d95cd48", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=cc82ccb145f2056854b499d5033be1a06ddfa29c", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n+    #[must_use]\n     pub fn resolve_regions(\n         &self,\n         outlives_env: &OutlivesEnvironment<'tcx>,"}, {"sha": "a188bb23882712b9a699ff4186beab8978f878eb", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=cc82ccb145f2056854b499d5033be1a06ddfa29c", "patch": "@@ -36,6 +36,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         obligation: PredicateObligation<'tcx>,\n     );\n \n+    #[must_use]\n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn collect_remaining_errors(&mut self) -> Vec<FulfillmentError<'tcx>>;\n@@ -58,6 +59,7 @@ pub trait TraitEngineExt<'tcx> {\n         obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n     );\n \n+    #[must_use]\n     fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n }\n "}, {"sha": "2beebe94b6d1d3e5b93da70cc90089da6a9cde72", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=cc82ccb145f2056854b499d5033be1a06ddfa29c", "patch": "@@ -175,10 +175,12 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n+    #[must_use]\n     pub fn select_where_possible(&self) -> Vec<FulfillmentError<'tcx>> {\n         self.engine.borrow_mut().select_where_possible(self.infcx)\n     }\n \n+    #[must_use]\n     pub fn select_all_or_error(&self) -> Vec<FulfillmentError<'tcx>> {\n         self.engine.borrow_mut().select_all_or_error(self.infcx)\n     }"}, {"sha": "6790d7b76a3ad33ea716e3cb650eb129a1163f33", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc82ccb145f2056854b499d5033be1a06ddfa29c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cc82ccb145f2056854b499d5033be1a06ddfa29c", "patch": "@@ -1763,7 +1763,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                 // constrain inference variables a bit more to nested obligations from normalize so\n                 // we can have more helpful errors.\n-                ocx.select_where_possible();\n+                //\n+                // we intentionally errors from normalization here.\n+                let _ = ocx.select_where_possible();\n \n                 if let Err(new_err) = ocx.eq_exp(\n                     &obligation.cause,"}]}