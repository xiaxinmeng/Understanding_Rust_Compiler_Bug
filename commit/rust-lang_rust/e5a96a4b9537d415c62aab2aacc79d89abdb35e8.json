{"sha": "e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YTk2YTRiOTUzN2Q0MTVjNjJhYWIyYWFjYzc5ZDg5YWJkYjM1ZTg=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-07T05:24:13Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-07T07:47:16Z"}, "message": "modify the error message- CR Comments", "tree": {"sha": "03a4c92f7171a65cf212d762f2f475bd3bb253e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a4c92f7171a65cf212d762f2f475bd3bb253e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "html_url": "https://github.com/rust-lang/rust/commit/e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18a83be8846010f3dbb1ef96b86941210517cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18a83be8846010f3dbb1ef96b86941210517cc9", "html_url": "https://github.com/rust-lang/rust/commit/e18a83be8846010f3dbb1ef96b86941210517cc9"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "93d6247eeae47733af3b4f8833bbb248ceda400c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -839,7 +839,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 let mut db = match err.cause {\n                     MutabilityViolation => {\n-                        let mut db = self.cannot_assign(error_span, &descr, Origin::Ast, false);\n+                        let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n                             let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n                             let sp = self.tcx.hir.span(node_id);"}, {"sha": "db7427ddae5962344577c270a6f729c432d67f14", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -1506,20 +1506,35 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     fn specialized_description(&self, place:&Place<'tcx>) -> Option<String>{\n-        if let Some(name) = self.describe_place(place) {\n-            Some(format!(\"`&`-reference `{}`\", name))\n+        if let Some(_name) = self.describe_place(place) {\n+            Some(format!(\"data in a `&` reference\"))\n         } else {\n             None\n         }\n     }\n \n-    fn get_main_error_message(&self, place:&Place<'tcx>) -> String{\n+    fn get_default_err_msg(&self, place:&Place<'tcx>) -> String{\n         match self.describe_place(place) {\n             Some(name) => format!(\"immutable item `{}`\", name),\n             None => \"immutable item\".to_owned(),\n         }\n     }\n \n+    fn get_secondary_err_msg(&self, place:&Place<'tcx>) -> String{\n+        match self.specialized_description(place) {\n+            Some(_) => format!(\"data in a `&` reference\"),\n+            None => self.get_default_err_msg(place)\n+        }\n+    }\n+\n+    fn get_primary_err_msg(&self, place:&Place<'tcx>) -> String{\n+        if let Some(name) = self.describe_place(place) {\n+            format!(\"`{}` is a `&` reference, so the data it refers to cannot be written\", name) \n+        } else {\n+            format!(\"cannot assign through `&`-reference\")\n+        }\n+    }    \n+\n     /// Check the permissions for the given place and read or write kind\n     ///\n     /// Returns true if an error is reported, false otherwise.\n@@ -1546,7 +1561,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.is_mutable(place, is_local_mutation_allowed)\n             {\n                 error_reported = true;\n-                let item_msg = self.get_main_error_message(place);\n+                let item_msg = self.get_default_err_msg(place);\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n@@ -1576,18 +1591,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     let locations = self.mir.find_assignments(local);\n                                         if locations.len() > 0 {\n                                             let item_msg = if error_reported {\n-                                                match self.specialized_description(base){\n-                                                    Some(msg) => msg,\n-                                                    None => self.get_main_error_message(place)\n-                                                }\n+                                                self.get_secondary_err_msg(base)\n                                             } else {\n-                                                self.get_main_error_message(place)\n+                                                self.get_default_err_msg(place)\n                                             };\n+                                            \n                                             err_info = Some((\n                                                 self.mir.source_info(locations[0]).span,\n                                                     \"consider changing this to be a \\\n                                                     mutable reference: `&mut`\", item_msg,\n-                                                    \"cannot assign through `&`-reference\"));\n+                                                    self.get_primary_err_msg(base)));\n                                         }\n                                 },\n                             _ => {},\n@@ -1597,15 +1610,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     }\n \n                     if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n-                        let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir, true);\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n                         err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));\n                         if place != place_err {\n                             err.span_label(span, sec_span);\n                         }\n                         err.emit()\n                     } else {\n-                        let item_msg_ = self.get_main_error_message(place);\n-                        let mut err = self.tcx.cannot_assign(span, &item_msg_, Origin::Mir, false);\n+                        let item_msg_ = self.get_default_err_msg(place);\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg_, Origin::Mir);\n                         err.span_label(span, \"cannot mutate\");\n                         if place != place_err {\n                             if let Some(name) = self.describe_place(place_err) {"}, {"sha": "d6b3e674f8f804878c727db063d25736b3f47ae2", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -284,25 +284,19 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n-    fn cannot_assign(self, span: Span, desc: &str, o: Origin, is_reference: bool)\n+    fn cannot_assign(self, span: Span, desc: &str, o: Origin)\n                      -> DiagnosticBuilder<'cx>\n     {\n-        let msg = if is_reference {\n-            \"through\"\n-        } else {\n-            \"to\"\n-        };\n-\n         let err = struct_span_err!(self, span, E0594,\n-                                  \"cannot assign {} {}{OGN}\",\n-                                  msg, desc, OGN=o);\n+                                  \"cannot assign to {}{OGN}\",\n+                                  desc, OGN=o);\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n     fn cannot_assign_static(self, span: Span, desc: &str, o: Origin)\n                             -> DiagnosticBuilder<'cx>\n     {\n-        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o, false)\n+        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n     }\n \n     fn cannot_move_out_of(self, move_from_span: Span, move_from_desc: &str, o: Origin)"}, {"sha": "fbdd013024db56d5663960ffada8f7ca5e4d50e7", "filename": "src/test/compile-fail/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -27,7 +27,7 @@ fn indirect_write_to_imm_box() {\n     let y: Box<_> = box &mut x;\n     let p = &y;\n     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n-              //[mir]~^ ERROR cannot assign through `&`-reference `p`\n+              //[mir]~^ ERROR cannot assign to data in a `&` reference\n     drop(p);\n }\n "}, {"sha": "3a4c22eb1395a0f6bfb915d48a804d0543aea9a1", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-ref-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -70,5 +70,5 @@ fn main() {\n     };\n     s[2] = 20;\n     //[ast]~^ ERROR cannot assign to immutable indexed content\n-    //[mir]~^^ ERROR cannot assign through immutable item\n+    //[mir]~^^ ERROR cannot assign to immutable item\n }"}, {"sha": "272cb6510aa3ddc02ab27cf11444b502696ffb74", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a96a4b9537d415c62aab2aacc79d89abdb35e8/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=e5a96a4b9537d415c62aab2aacc79d89abdb35e8", "patch": "@@ -1,10 +1,10 @@\n-error[E0594]: cannot assign through `&`-reference `fancy_ref`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/issue-47388.rs:18:5\n    |\n LL |     let fancy_ref = &(&mut fancy);\n    |                     ------------- help: consider changing this to be a mutable reference: `&mut`\n LL |     fancy_ref.num = 6; //~ ERROR E0594\n-   |     ^^^^^^^^^^^^^^^^^ cannot assign through `&`-reference\n+   |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error\n "}]}