{"sha": "b766fa887dc0e4b923a38751fe4d570e35a75710", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjZmYTg4N2RjMGU0YjkyM2EzODc1MWZlNGQ1NzBlMzVhNzU3MTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-07T04:30:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-13T21:33:03Z"}, "message": "Add example of making an unhygienic macro hygienic by wrapping it in a declarative macro.", "tree": {"sha": "07f90576188e5618594ef58d9c14137fe40190df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f90576188e5618594ef58d9c14137fe40190df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b766fa887dc0e4b923a38751fe4d570e35a75710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b766fa887dc0e4b923a38751fe4d570e35a75710", "html_url": "https://github.com/rust-lang/rust/commit/b766fa887dc0e4b923a38751fe4d570e35a75710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b766fa887dc0e4b923a38751fe4d570e35a75710/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d052d28d70b31fac942765da137f794835e6536e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d052d28d70b31fac942765da137f794835e6536e", "html_url": "https://github.com/rust-lang/rust/commit/d052d28d70b31fac942765da137f794835e6536e"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "e10d20b6d47cf0797d2a04e49d8a85d9f2124f94", "filename": "src/test/run-pass/hygiene/auxiliary/my_crate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fmy_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fmy_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fmy_crate.rs?ref=b766fa887dc0e4b923a38751fe4d570e35a75710", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn f() {}"}, {"sha": "298e0209a0987895c424294e666d2fbf715ffd42", "filename": "src/test/run-pass/hygiene/auxiliary/unhygienic_example.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Funhygienic_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Funhygienic_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Funhygienic_example.rs?ref=b766fa887dc0e4b923a38751fe4d570e35a75710", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+extern crate my_crate;\n+\n+pub fn g() {} // (a)\n+\n+#[macro_export]\n+macro_rules! unhygienic_macro {\n+    () => {\n+        // (1) unhygienic: depends on `my_crate` in the crate root at the invocation site.\n+        ::my_crate::f();\n+\n+        // (2) unhygienic: defines `f` at the invocation site (in addition to the above point).\n+        use my_crate::f;\n+        f();\n+\n+        g(); // (3) unhygienic: `g` needs to be in scope at use site.\n+\n+        $crate::g(); // (4) hygienic: this always resolves to (a)\n+    }\n+}\n+\n+#[allow(unused)]\n+fn test_unhygienic() {\n+    unhygienic_macro!();\n+    f(); // `f` was defined at the use site\n+}"}, {"sha": "5520695021438a8d7f10ff24e7e840fc27bbe8ac", "filename": "src/test/run-pass/hygiene/wrap_unhygienic_example.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b766fa887dc0e4b923a38751fe4d570e35a75710/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs?ref=b766fa887dc0e4b923a38751fe4d570e35a75710", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty pretty-printing is unhygienic\n+\n+// aux-build:my_crate.rs\n+// aux-build:unhygienic_example.rs\n+\n+#![feature(decl_macro)]\n+\n+extern crate unhygienic_example;\n+extern crate my_crate; // (b)\n+\n+// Hygienic version of `unhygienic_macro`.\n+pub macro hygienic_macro() {\n+    fn g() {} // (c)\n+    ::unhygienic_example::unhygienic_macro!();\n+    // ^ Even though we invoke an unhygienic macro, `hygienic_macro` remains hygienic.\n+    // In the above expansion:\n+    // (1) `my_crate` always resolves to (b) regardless of invocation site.\n+    // (2) The defined function `f` is only usable inside this macro definition.\n+    // (3) `g` always resolves to (c) regardless of invocation site.\n+    // (4) `$crate::g` remains hygienic and continues to resolve to (a).\n+\n+    f();\n+}\n+\n+#[allow(unused)]\n+fn test_hygienic_macro() {\n+    hygienic_macro!();\n+\n+    fn f() {} // (d) no conflict\n+    f(); // resolves to (d)\n+}\n+\n+fn main() {}"}]}