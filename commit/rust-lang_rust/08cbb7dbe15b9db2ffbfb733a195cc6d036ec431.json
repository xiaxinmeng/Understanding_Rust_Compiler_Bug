{"sha": "08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Y2JiN2RiZTE1YjlkYjJmZmJmYjczM2ExOTVjYzZkMDM2ZWM0MzE=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-11T15:23:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-11T15:23:42Z"}, "message": "Rollup merge of #88757 - andrewhickman:master, r=jackh726\n\nSuggest wapping expr in parentheses on invalid unary negation\n\nFixes #88701", "tree": {"sha": "622d00d810e822675bd442d72507be6286096308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622d00d810e822675bd442d72507be6286096308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhPMn+CRBK7hj4Ov3rIwAAa2wIAEkzXriwITNCle/4F+6pd9D6\nyj635QRyqWdBk0xtDvOPWL0HPsz7u5dXK1uS/n1PEIe8obzVd4xQ3bDsSY6PwzpN\nZW213FY4UBDtMB41zgGHaihIyMljYSbBjg4B1Mt2ulxUl/Wg15m/PyJuSqZdExdd\n+a2w74riO5iaO7Q8IV+18ULEi8JncYxC+QSnbFRaddH3JefXQJ5hYBAP9T3S4RVU\nuB7bDLwiOGtSZMJwfKSldGiGWSVrzp2LuNYNfTl4CZFXj6UgA6dM9qq9K5Cx0ac4\nm7mBfJB5AsuHA4tHT2MsvShIHO98R6C+cryOKB6dH1UIEphgC80403FbUeQg+Cs=\n=s9bn\n-----END PGP SIGNATURE-----\n", "payload": "tree 622d00d810e822675bd442d72507be6286096308\nparent 746eb1d84defe2892a2d24a6029e8e7ec478a18f\nparent 43b79d8ef5e1967a7ea476b757256d62fdbb3ebf\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1631373822 -0700\ncommitter GitHub <noreply@github.com> 1631373822 -0700\n\nRollup merge of #88757 - andrewhickman:master, r=jackh726\n\nSuggest wapping expr in parentheses on invalid unary negation\n\nFixes #88701\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "html_url": "https://github.com/rust-lang/rust/commit/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "746eb1d84defe2892a2d24a6029e8e7ec478a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/746eb1d84defe2892a2d24a6029e8e7ec478a18f", "html_url": "https://github.com/rust-lang/rust/commit/746eb1d84defe2892a2d24a6029e8e7ec478a18f"}, {"sha": "43b79d8ef5e1967a7ea476b757256d62fdbb3ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b79d8ef5e1967a7ea476b757256d62fdbb3ebf", "html_url": "https://github.com/rust-lang/rust/commit/43b79d8ef5e1967a7ea476b757256d62fdbb3ebf"}], "stats": {"total": 117, "additions": 80, "deletions": 37}, "files": [{"sha": "a574a63d63b28eb259c194969494cac59fbda510", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "patch": "@@ -680,42 +680,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ex.span,\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n-                    match actual.kind() {\n-                        Uint(_) if op == hir::UnOp::Neg => {\n-                            err.note(\"unsigned values cannot be negated\");\n-\n-                            if let hir::ExprKind::Unary(\n-                                _,\n-                                hir::Expr {\n-                                    kind:\n-                                        hir::ExprKind::Lit(Spanned {\n-                                            node: ast::LitKind::Int(1, _),\n-                                            ..\n-                                        }),\n-                                    ..\n-                                },\n-                            ) = ex.kind\n-                            {\n-                                err.span_suggestion(\n-                                    ex.span,\n-                                    &format!(\n-                                        \"you may have meant the maximum value of `{}`\",\n-                                        actual\n-                                    ),\n-                                    format!(\"{}::MAX\", actual),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+\n+                    let sp = self.tcx.sess.source_map().start_point(ex.span);\n+                    if let Some(sp) =\n+                        self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n+                    {\n+                        // If the previous expression was a block expression, suggest parentheses\n+                        // (turning this into a binary subtraction operation instead.)\n+                        // for example, `{2} - 2` -> `({2}) - 2` (see src\\test\\ui\\parser\\expr-as-stmt.rs)\n+                        self.tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                    } else {\n+                        match actual.kind() {\n+                            Uint(_) if op == hir::UnOp::Neg => {\n+                                err.note(\"unsigned values cannot be negated\");\n+\n+                                if let hir::ExprKind::Unary(\n+                                    _,\n+                                    hir::Expr {\n+                                        kind:\n+                                            hir::ExprKind::Lit(Spanned {\n+                                                node: ast::LitKind::Int(1, _),\n+                                                ..\n+                                            }),\n+                                        ..\n+                                    },\n+                                ) = ex.kind\n+                                {\n+                                    err.span_suggestion(\n+                                        ex.span,\n+                                        &format!(\n+                                            \"you may have meant the maximum value of `{}`\",\n+                                            actual\n+                                        ),\n+                                        format!(\"{}::MAX\", actual),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                            Str | Never | Char | Tuple(_) | Array(_, _) => {}\n+                            Ref(_, ref lty, _) if *lty.kind() == Str => {}\n+                            _ => {\n+                                let missing_trait = match op {\n+                                    hir::UnOp::Neg => \"std::ops::Neg\",\n+                                    hir::UnOp::Not => \"std::ops::Not\",\n+                                    hir::UnOp::Deref => \"std::ops::UnDerf\",\n+                                };\n+                                suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                             }\n-                        }\n-                        Str | Never | Char | Tuple(_) | Array(_, _) => {}\n-                        Ref(_, ref lty, _) if *lty.kind() == Str => {}\n-                        _ => {\n-                            let missing_trait = match op {\n-                                hir::UnOp::Neg => \"std::ops::Neg\",\n-                                hir::UnOp::Not => \"std::ops::Not\",\n-                                hir::UnOp::Deref => \"std::ops::UnDerf\",\n-                            };\n-                            suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                         }\n                     }\n                     err.emit();"}, {"sha": "101959d6da0e0ae36daffadaecd581aac2af43db", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "patch": "@@ -32,4 +32,9 @@ fn moo(x: u32) -> bool {\n     }) > 0 //~ ERROR expected expression\n }\n \n+fn qux() -> u32 {\n+    ({2}) - 2 //~ ERROR cannot apply unary operator `-` to type `u32`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "45c4f977502d24fc0414b854c5fb843792cf331c", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "patch": "@@ -32,4 +32,9 @@ fn moo(x: u32) -> bool {\n     } > 0 //~ ERROR expected expression\n }\n \n+fn qux() -> u32 {\n+    {2} - 2 //~ ERROR cannot apply unary operator `-` to type `u32`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "cae775099e0a03ced8306d34efbe54a3df257290", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08cbb7dbe15b9db2ffbfb733a195cc6d036ec431/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=08cbb7dbe15b9db2ffbfb733a195cc6d036ec431", "patch": "@@ -99,7 +99,29 @@ help: parentheses are required to parse this as an expression\n LL |     ({ 3 }) * 3\n    |     +     +\n \n-error: aborting due to 9 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:36:6\n+   |\n+LL |     {2} - 2\n+   |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} - 2\n+   |      ++++++  +\n+\n+error[E0600]: cannot apply unary operator `-` to type `u32`\n+  --> $DIR/expr-as-stmt.rs:36:9\n+   |\n+LL |     {2} - 2\n+   |         ^^^ cannot apply unary operator `-`\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({2}) - 2\n+   |     +   +\n+\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0308, E0614.\n+Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}]}