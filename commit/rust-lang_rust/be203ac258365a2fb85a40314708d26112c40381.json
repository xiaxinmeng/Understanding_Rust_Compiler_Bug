{"sha": "be203ac258365a2fb85a40314708d26112c40381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMjAzYWMyNTgzNjVhMmZiODVhNDAzMTQ3MDhkMjYxMTJjNDAzODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-17T04:57:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-17T04:57:06Z"}, "message": "Auto merge of #34306 - arielb1:mir-dump-fixes, r=eddyb\n\nFixes for `-Z dump-mir`\n\nDo not overwrite the parent MIR when dumping promoted MIR.\n\nr? @eddyb", "tree": {"sha": "ebda28a9c6dcc74f22f34dd7266a345c5730d156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebda28a9c6dcc74f22f34dd7266a345c5730d156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be203ac258365a2fb85a40314708d26112c40381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be203ac258365a2fb85a40314708d26112c40381", "html_url": "https://github.com/rust-lang/rust/commit/be203ac258365a2fb85a40314708d26112c40381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be203ac258365a2fb85a40314708d26112c40381/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114be1e9f0db2c84e38b5ed96d4e4450771e8a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/114be1e9f0db2c84e38b5ed96d4e4450771e8a44", "html_url": "https://github.com/rust-lang/rust/commit/114be1e9f0db2c84e38b5ed96d4e4450771e8a44"}, {"sha": "a6d694ea0095be73aff9c29ccc2d5da260b3bfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d694ea0095be73aff9c29ccc2d5da260b3bfae", "html_url": "https://github.com/rust-lang/rust/commit/a6d694ea0095be73aff9c29ccc2d5da260b3bfae"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "4ca3907d4e602bcf94c9945818b91eed0b6eab13", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=be203ac258365a2fb85a40314708d26112c40381", "patch": "@@ -13,7 +13,7 @@ use hir;\n use hir::map::DefPathData;\n use hir::def_id::DefId;\n use mir::mir_map::MirMap;\n-use mir::repr::Mir;\n+use mir::repr::{Mir, Promoted};\n use ty::TyCtxt;\n use syntax::ast::NodeId;\n \n@@ -32,7 +32,7 @@ pub enum MirSource {\n     Static(NodeId, hir::Mutability),\n \n     /// Promoted rvalues within a function.\n-    Promoted(NodeId, usize)\n+    Promoted(NodeId, Promoted)\n }\n \n impl<'a, 'tcx> MirSource {\n@@ -77,7 +77,12 @@ pub trait Pass {\n         DepNode::MirPass(def_id)\n     }\n     fn name(&self) -> &str {\n-        unsafe { ::std::intrinsics::type_name::<Self>() }\n+        let name = unsafe { ::std::intrinsics::type_name::<Self>() };\n+        if let Some(tail) = name.rfind(\":\") {\n+            &name[tail+1..]\n+        } else {\n+            name\n+        }\n     }\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> { None }\n }\n@@ -104,11 +109,6 @@ pub trait MirPassHook<'tcx>: Pass {\n \n /// A pass which inspects Mir of functions in isolation.\n pub trait MirPass<'tcx>: Pass {\n-    fn run_pass_on_promoted<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                item_id: NodeId, index: usize,\n-                                mir: &mut Mir<'tcx>) {\n-        self.run_pass(tcx, MirSource::Promoted(item_id, index), mir);\n-    }\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>);\n }\n@@ -133,11 +133,12 @@ impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n                 hook.on_mir_pass(tcx, src, mir, self, true);\n             }\n \n-            for (i, mir) in mir.promoted.iter_mut().enumerate() {\n+            for (i, mir) in mir.promoted.iter_enumerated_mut() {\n+                let src = MirSource::Promoted(id, i);\n                 for hook in &mut *hooks {\n                     hook.on_mir_pass(tcx, src, mir, self, false);\n                 }\n-                self.run_pass_on_promoted(tcx, id, i, mir);\n+                MirPass::run_pass(self, tcx, src, mir);\n                 for hook in &mut *hooks {\n                     hook.on_mir_pass(tcx, src, mir, self, true);\n                 }"}, {"sha": "515620d425389676617e3efa5f9cbba8cf5c96b3", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=be203ac258365a2fb85a40314708d26112c40381", "patch": "@@ -61,8 +61,13 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return;\n     }\n \n-    let file_name = format!(\"rustc.node{}.{}.{}.mir\",\n-                            node_id, pass_name, disambiguator);\n+    let promotion_id = match src {\n+        MirSource::Promoted(_, id) => format!(\"-{:?}\", id),\n+        _ => String::new()\n+    };\n+\n+    let file_name = format!(\"rustc.node{}{}.{}.{}.mir\",\n+                            node_id, promotion_id, pass_name, disambiguator);\n     let _ = fs::File::create(&file_name).and_then(|mut file| {\n         try!(writeln!(file, \"// MIR for `{}`\", node_path));\n         try!(writeln!(file, \"// node_id = {}\", node_id));\n@@ -93,7 +98,7 @@ pub fn write_mir_pretty<'a, 'b, 'tcx, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n         let src = MirSource::from_node(tcx, id);\n         write_mir_fn(tcx, src, mir, w, None)?;\n \n-        for (i, mir) in mir.promoted.iter().enumerate() {\n+        for (i, mir) in mir.promoted.iter_enumerated() {\n             writeln!(w, \"\")?;\n             write_mir_fn(tcx, MirSource::Promoted(id, i), mir, w, None)?;\n         }\n@@ -287,7 +292,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write)\n         MirSource::Const(_) => write!(w, \"const\")?,\n         MirSource::Static(_, hir::MutImmutable) => write!(w, \"static\")?,\n         MirSource::Static(_, hir::MutMutable) => write!(w, \"static mut\")?,\n-        MirSource::Promoted(_, i) => write!(w, \"promoted{} in\", i)?\n+        MirSource::Promoted(_, i) => write!(w, \"{:?} in\", i)?\n     }\n \n     write!(w, \" {}\", tcx.node_path_str(src.item_id()))?;"}, {"sha": "c028504d6f96db5697c6bffa7fbc7fc02f0db0b0", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=be203ac258365a2fb85a40314708d26112c40381", "patch": "@@ -13,8 +13,6 @@ use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n-use pretty;\n-\n pub struct AddCallGuards;\n \n /**\n@@ -38,7 +36,7 @@ pub struct AddCallGuards;\n  */\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         let pred_count: IndexVec<_, _> =\n             mir.predecessors().iter().map(|ps| ps.len()).collect();\n \n@@ -75,7 +73,6 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n             }\n         }\n \n-        pretty::dump_mir(tcx, \"break_cleanup_edges\", &0, src, mir, None);\n         debug!(\"Broke {} N edges\", new_blocks.len());\n \n         mir.basic_blocks_mut().extend(new_blocks);"}, {"sha": "b4960c677a16ecf89ac4b92ab51211f95a338427", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=be203ac258365a2fb85a40314708d26112c40381", "patch": "@@ -60,4 +60,7 @@ impl<'l> Pass for SimplifyBranches<'l> {\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n         Some(Box::new(self.label))\n     }\n+\n+    // avoid calling `type_name` - it contains `<'static>`\n+    fn name(&self) -> &str { \"SimplifyBranches\" }\n }"}, {"sha": "c0e7e54050adf7674eda4a86f99c54eec0a1c6a4", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be203ac258365a2fb85a40314708d26112c40381/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=be203ac258365a2fb85a40314708d26112c40381", "patch": "@@ -62,6 +62,9 @@ impl<'l> Pass for SimplifyCfg<'l> {\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n         Some(Box::new(self.label))\n     }\n+\n+    // avoid calling `type_name` - it contains `<'static>`\n+    fn name(&self) -> &str { \"SimplifyCfg\" }\n }\n \n pub struct CfgSimplifier<'a, 'tcx: 'a> {"}]}