{"sha": "23ef234bf765951e49805fbdad95f538ac33f2d8", "node_id": "C_kwDOAAsO6NoAKDIzZWYyMzRiZjc2NTk1MWU0OTgwNWZiZGFkOTVmNTM4YWMzM2YyZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-23T21:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T21:13:24Z"}, "message": "Rollup merge of #95221 - RalfJung:check_and_deref_ptr, r=oli-obk\n\ninterpret/memory: simplify check_and_deref_ptr\n\n*Finally* I saw a way to make this code simpler. The odd preprocessing in `let ptr_or_addr =` has bothered me since forever, but it actually became unnecessary in the last provenance refactoring. :)\n\nThis also leads to slightly more explicit error messages as a nice side-effect. :tada:\n\nr? `@oli-obk`", "tree": {"sha": "ba0debae5eaf0939a16023482366193796259f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0debae5eaf0939a16023482366193796259f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ef234bf765951e49805fbdad95f538ac33f2d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiO411CRBK7hj4Ov3rIwAAfuMIAK8lj+a6YZRRda8lTYE7B/XA\nCSBQkM0IRb36tegjSqqFmFPOEOdtrfyzHH0cRezw4jFzoYc78313RSXsDs1v9Hg0\nlWFx2KpUF+zp8HCA8yfnGn76g1mLgpjud23k01DI90YKpbw5u2VNdCjnf5UJQJKo\nXTOs3PCPNWjDQUnmiunyE9bCLHQZWXZFM/36N+YRIjinr8ODoTHMhEjsZgBI330y\nyz1aJHrJ0WbREzmOYwGUy7sA/eYEjUvuneKsUV21yoIhgNkvS7O5f3/X+iJnez/i\nNcsg9G8+7LI+rTyLrfehsdNjfwcMab8oU0ubEcwcQZJ6wiUo/AcNaSvnTt7jL5Y=\n=wJlm\n-----END PGP SIGNATURE-----\n", "payload": "tree ba0debae5eaf0939a16023482366193796259f92\nparent 0c79c862f0e7e6ab56ea6d78b15410de209e0825\nparent a76e5b1882f78c250a3f7338d12c559029949d73\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1648070004 +0100\ncommitter GitHub <noreply@github.com> 1648070004 +0100\n\nRollup merge of #95221 - RalfJung:check_and_deref_ptr, r=oli-obk\n\ninterpret/memory: simplify check_and_deref_ptr\n\n*Finally* I saw a way to make this code simpler. The odd preprocessing in `let ptr_or_addr =` has bothered me since forever, but it actually became unnecessary in the last provenance refactoring. :)\n\nThis also leads to slightly more explicit error messages as a nice side-effect. :tada:\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ef234bf765951e49805fbdad95f538ac33f2d8", "html_url": "https://github.com/rust-lang/rust/commit/23ef234bf765951e49805fbdad95f538ac33f2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ef234bf765951e49805fbdad95f538ac33f2d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c79c862f0e7e6ab56ea6d78b15410de209e0825", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c79c862f0e7e6ab56ea6d78b15410de209e0825", "html_url": "https://github.com/rust-lang/rust/commit/0c79c862f0e7e6ab56ea6d78b15410de209e0825"}, {"sha": "a76e5b1882f78c250a3f7338d12c559029949d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76e5b1882f78c250a3f7338d12c559029949d73", "html_url": "https://github.com/rust-lang/rust/commit/a76e5b1882f78c250a3f7338d12c559029949d73"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "871b7578abdc31e9bc3c358ff2bfd922299f9359", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -427,22 +427,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        // Extract from the pointer an `Option<AllocId>` and an offset, which is relative to the\n-        // allocation or (if that is `None`) an absolute address.\n-        let ptr_or_addr = if size.bytes() == 0 {\n-            // Let's see what we can do, but don't throw errors if there's nothing there.\n-            self.ptr_try_get_alloc(ptr)\n-        } else {\n-            // A \"real\" access, we insist on getting an `AllocId`.\n-            Ok(self.ptr_get_alloc(ptr)?)\n-        };\n-        Ok(match ptr_or_addr {\n+        Ok(match self.ptr_try_get_alloc(ptr) {\n             Err(addr) => {\n-                // No memory is actually being accessed.\n-                debug_assert!(size.bytes() == 0);\n-                // Must be non-null.\n-                if addr == 0 {\n-                    throw_ub!(DanglingIntPointer(0, msg))\n+                // We couldn't get a proper allocation. This is only okay if the access size is 0,\n+                // and the address is not null.\n+                if size.bytes() > 0 || addr == 0 {\n+                    throw_ub!(DanglingIntPointer(addr, msg));\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {"}, {"sha": "7606afdc4ff6c7fcb0b96e66aae6c475c3f4fd6c", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0xdeadbeef is not a valid pointer\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef is not a valid pointer\n \n error: aborting due to previous error\n "}, {"sha": "df8a80be72cb5dd80ec2ffc5f0ae38875799b183", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:7:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ 0x2a is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a is not a valid pointer\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ 0x2c is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c is not a valid pointer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8c9dca566b93975278849a26b0279f401ccf64d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "ded007ce2813979b39d47cf5674c39998867cbbe", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "9c1733e827d1963e9b5efe9850fb7c8f15f5e584", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n-   |          0x2a is not a valid pointer\n+   |          dereferencing pointer failed: 0x2a is not a valid pointer\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n ...\n LL | const A: Option<&mut i32> = helper();"}, {"sha": "e774e38931377953bd97bcc48ad787dc59fbd862", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -130,7 +130,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  0x1 is not a valid pointer\n+   |                  pointer arithmetic failed: 0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:19:42\n@@ -158,7 +158,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  0x7f..f is not a valid pointer\n+   |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:25:47"}, {"sha": "3eb291f0f7014b654f4c5ea926f8ba2aed7b2136", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ef234bf765951e49805fbdad95f538ac33f2d8/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=23ef234bf765951e49805fbdad95f538ac33f2d8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   |                            ^^^^^^^^^ 0x5f3759df is not a valid pointer\n+   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df is not a valid pointer\n \n error: aborting due to previous error\n "}]}