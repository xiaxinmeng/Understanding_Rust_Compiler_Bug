{"sha": "81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjk1YTE5Zjg3NmQ2ZjVkNzVmMThjMDViMmFlOWM0MGEzMjIxYjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-28T15:24:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-28T15:24:58Z"}, "message": "rustc: Add support for calling LLVM intrinsics as native functions", "tree": {"sha": "dad8d0fc0026e1d8c99a73c64a5538ccf8db1cd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad8d0fc0026e1d8c99a73c64a5538ccf8db1cd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "html_url": "https://github.com/rust-lang/rust/commit/81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecdc04788334420db05d9894e18d1d7a605ab4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecdc04788334420db05d9894e18d1d7a605ab4f", "html_url": "https://github.com/rust-lang/rust/commit/6ecdc04788334420db05d9894e18d1d7a605ab4f"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "c4c1a56b6ef78d2c0f2c07c62727caa126540b29", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "patch": "@@ -346,6 +346,7 @@ type _mod = rec(vec[@view_item] view_items,\n tag native_abi {\n     native_abi_rust;\n     native_abi_cdecl;\n+    native_abi_llvm;\n }\n \n type native_mod = rec(str native_name,"}, {"sha": "f1003cb646a127d40acf6821986830637a1b3982", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "patch": "@@ -162,6 +162,7 @@ impure fn parse_sty(@pstate st, str_def sd) -> ty.sty {\n             alt (next(st) as char) {\n                 case ('r') {abi = ast.native_abi_rust;}\n                 case ('c') {abi = ast.native_abi_cdecl;}\n+                case ('l') {abi = ast.native_abi_llvm;}\n             }\n             auto func = parse_ty_fn(st, sd);\n             ret ty.ty_native_fn(abi,func._0,func._1);"}, {"sha": "4a9f37f09e209a553649bea592426254ad81a20e", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "patch": "@@ -1964,6 +1964,8 @@ impure fn parse_item_native_mod(parser p) -> @ast.item {\n         if (_str.eq(t, \"cdecl\")) {\n         } else if (_str.eq(t, \"rust\")) {\n             abi = ast.native_abi_rust;\n+        } else if (_str.eq(t, \"llvm\")) {\n+            abi = ast.native_abi_llvm;\n         } else {\n             p.err(\"unsupported abi: \" + t);\n             fail;"}, {"sha": "44c62a475487598533a553a68d8662c077d74603", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "patch": "@@ -108,6 +108,7 @@ fn sty_str(ty.sty st, def_str ds) -> str {\n             alt (abi) {\n                 case (ast.native_abi_rust) {abistr = \"r\";}\n                 case (ast.native_abi_cdecl) {abistr = \"c\";}\n+                case (ast.native_abi_llvm) {abistr = \"l\";}\n             }\n             ret \"N\" + abistr + ty_fn_str(args, out, ds);\n         }"}, {"sha": "8216ab7a8738069a835717b73b2028e113c84769", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81695a19f876d6f5d75f18c05b2ae9c40a3221b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=81695a19f876d6f5d75f18c05b2ae9c40a3221b3", "patch": "@@ -5884,18 +5884,44 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n         case (ast.native_abi_cdecl) {\n             pass_task = false;\n         }\n+        case (ast.native_abi_llvm) {\n+            pass_task = false;\n+            // We handle this case below.\n+        }\n     }\n+\n+    auto r;\n+    auto rptr;\n     auto args = ty.ty_fn_args(fn_type);\n-    for (ty.arg arg in args) {\n-        auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n-        check (llarg as int != 0);\n-        call_args += vec(bcx.build.PointerCast(llarg, T_i32()));\n-        arg_n += 1u;\n+    if (abi == ast.native_abi_llvm) {\n+        let vec[ValueRef] call_args = vec();\n+        let vec[TypeRef] call_arg_tys = vec();\n+        auto i = 0u;\n+        while (i < _vec.len[ty.arg](args)) {\n+            auto call_arg = llvm.LLVMGetParam(fcx.llfn, i + 3u);\n+            call_args += vec(call_arg);\n+            call_arg_tys += vec(val_ty(call_arg));\n+            i += 1u;\n+        }\n+        auto llnativefnty = T_fn(call_arg_tys,\n+                                 type_of(cx, ty.ty_fn_ret(fn_type)));\n+        auto llnativefn = get_extern_fn(cx.externs, cx.llmod, name,\n+                                        lib.llvm.LLVMCCallConv, llnativefnty);\n+        r = bcx.build.Call(llnativefn, call_args);\n+        rptr = fcx.llretptr;\n+    } else {\n+        for (ty.arg arg in args) {\n+            auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n+            check (llarg as int != 0);\n+            call_args += vec(bcx.build.PointerCast(llarg, T_i32()));\n+            arg_n += 1u;\n+        }\n+\n+        r = trans_native(bcx.build, cx.glues, lltaskptr, cx.externs,\n+                              cx.tn, cx.llmod, name, pass_task, call_args);\n+        rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n     }\n \n-    auto r = trans_native(bcx.build, cx.glues, lltaskptr, cx.externs, cx.tn,\n-                          cx.llmod, name, pass_task, call_args);\n-    auto rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n     bcx.build.Store(r, rptr);\n     bcx.build.RetVoid();\n }"}]}