{"sha": "30ec1f0384338351902a22d9d0e7f867f142a1f6", "node_id": "C_kwDOAAsO6NoAKDMwZWMxZjAzODQzMzgzNTE5MDJhMjJkOWQwZTdmODY3ZjE0MmExZjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-01T21:49:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T21:49:47Z"}, "message": "Rollup merge of #84083 - ltratt:threadid_doc_tweak, r=dtolnay\n\nClarify the guarantees that ThreadId does and doesn't make.\n\nThe existing documentation does not spell out whether `ThreadId`s are unique during the lifetime of a thread or of a process. I had to examine the source code to realise (pleasingly!) that they're unique for the lifetime of a process. That seems worth documenting clearly, as it's a strong guarantee.\n\nExamining the way `ThreadId`s are created also made me realise that the `as_u64` method on `ThreadId` could be a trap for the unwary on those platforms where the platform's notion of a thread identifier is also a 64 bit integer (particularly if they happen to use a similar identifier scheme to `ThreadId`). I therefore think it's worth being even clearer that there's no relationship between the two.", "tree": {"sha": "69263856b3a327747fb6c4157124458ecf4abf02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69263856b3a327747fb6c4157124458ecf4abf02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ec1f0384338351902a22d9d0e7f867f142a1f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0Mx7CRBK7hj4Ov3rIwAA2WUIAFQN2pRrnOmuwHdX6jnERH+U\nq6c7IH/2mo5BFU6x05jiJZKLg+bYvYugP637yuDAsAilvqQ2E94OUSApWGdV9MNs\nMsDl8bhGsExk833LSsRPLjZetH7LWdQrjRd3a+JwHpEGs7QXn6D3B6sgL0TraaWW\nnl5fHakkPCStM6gsD66fR8bUPgwa5CIBVLXiNF5UbSxuonUiS2QfahENgGxDiBk4\npByt+1LQY9EsTq02CGG19m800jbv9sWmqgUyU/jfmma7Wjxtdj4o5dAtqoUoFCJm\noF0G2dJPV/6NIAp3qXqqBJC6yw/xm8FNNllvFPb6lBbS079WWdKMCEiGW+GvIuY=\n=sykp\n-----END PGP SIGNATURE-----\n", "payload": "tree 69263856b3a327747fb6c4157124458ecf4abf02\nparent c145692254e86974941f2c92c643a23df0f13e82\nparent d66a9e16bae86863cfdbd033b49b672da34bdde1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641073787 +0100\ncommitter GitHub <noreply@github.com> 1641073787 +0100\n\nRollup merge of #84083 - ltratt:threadid_doc_tweak, r=dtolnay\n\nClarify the guarantees that ThreadId does and doesn't make.\n\nThe existing documentation does not spell out whether `ThreadId`s are unique during the lifetime of a thread or of a process. I had to examine the source code to realise (pleasingly!) that they're unique for the lifetime of a process. That seems worth documenting clearly, as it's a strong guarantee.\n\nExamining the way `ThreadId`s are created also made me realise that the `as_u64` method on `ThreadId` could be a trap for the unwary on those platforms where the platform's notion of a thread identifier is also a 64 bit integer (particularly if they happen to use a similar identifier scheme to `ThreadId`). I therefore think it's worth being even clearer that there's no relationship between the two.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ec1f0384338351902a22d9d0e7f867f142a1f6", "html_url": "https://github.com/rust-lang/rust/commit/30ec1f0384338351902a22d9d0e7f867f142a1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ec1f0384338351902a22d9d0e7f867f142a1f6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c145692254e86974941f2c92c643a23df0f13e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c145692254e86974941f2c92c643a23df0f13e82", "html_url": "https://github.com/rust-lang/rust/commit/c145692254e86974941f2c92c643a23df0f13e82"}, {"sha": "d66a9e16bae86863cfdbd033b49b672da34bdde1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66a9e16bae86863cfdbd033b49b672da34bdde1", "html_url": "https://github.com/rust-lang/rust/commit/d66a9e16bae86863cfdbd033b49b672da34bdde1"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "9f7f10d0d00813a2a7006d6b2390e9d0f2751aae", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30ec1f0384338351902a22d9d0e7f867f142a1f6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ec1f0384338351902a22d9d0e7f867f142a1f6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=30ec1f0384338351902a22d9d0e7f867f142a1f6", "patch": "@@ -972,10 +972,13 @@ pub fn park_timeout(dur: Duration) {\n \n /// A unique identifier for a running thread.\n ///\n-/// A `ThreadId` is an opaque object that has a unique value for each thread\n-/// that creates one. `ThreadId`s are not guaranteed to correspond to a thread's\n-/// system-designated identifier. A `ThreadId` can be retrieved from the [`id`]\n-/// method on a [`Thread`].\n+/// A `ThreadId` is an opaque object that uniquely identifies each thread\n+/// created during the lifetime of a process. `ThreadId`s are guaranteed not to\n+/// be reused, even when a thread terminates. `ThreadId`s are under the control\n+/// of Rust's standard library and there may not be any relationship between\n+/// `ThreadId` and the underlying platform's notion of a thread identifier --\n+/// the two concepts cannot, therefore, be used interchangeably. A `ThreadId`\n+/// can be retrieved from the [`id`] method on a [`Thread`].\n ///\n /// # Examples\n ///"}]}