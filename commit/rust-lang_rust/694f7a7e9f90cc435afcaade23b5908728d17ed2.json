{"sha": "694f7a7e9f90cc435afcaade23b5908728d17ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NGY3YTdlOWY5MGNjNDM1YWZjYWFkZTIzYjU5MDg3MjhkMTdlZDI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-24T10:42:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-24T10:58:37Z"}, "message": "Add tests for apply_demorgan", "tree": {"sha": "39f4a86ff57bf9f60f9165755d8bcbf5f3167b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f4a86ff57bf9f60f9165755d8bcbf5f3167b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/694f7a7e9f90cc435afcaade23b5908728d17ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/694f7a7e9f90cc435afcaade23b5908728d17ed2", "html_url": "https://github.com/rust-lang/rust/commit/694f7a7e9f90cc435afcaade23b5908728d17ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/694f7a7e9f90cc435afcaade23b5908728d17ed2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db970ee082e315cfa04db163fe2e0268b618531", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db970ee082e315cfa04db163fe2e0268b618531", "html_url": "https://github.com/rust-lang/rust/commit/9db970ee082e315cfa04db163fe2e0268b618531"}], "stats": {"total": 101, "additions": 83, "deletions": 18}, "files": [{"sha": "6997ea048efbfbdc290397ec1d344e4a485d51a1", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=694f7a7e9f90cc435afcaade23b5908728d17ed2", "patch": "@@ -61,10 +61,77 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::helpers::FamousDefs;\n+\n     use super::*;\n \n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n+    const ORDABLE_FIXTURE: &'static str = r\"\n+//- /lib.rs deps:core crate:ordable\n+struct NonOrderable;\n+struct Orderable;\n+impl core::cmp::Ord for Orderable {}\n+\";\n+\n+    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,ordable\\n{}\\n{}{}\",\n+            ra_fixture_before,\n+            FamousDefs::FIXTURE,\n+            ORDABLE_FIXTURE\n+        );\n+        check_assist(apply_demorgan, before, &format!(\"{}\\n\", ra_fixture_after));\n+    }\n+\n+    #[test]\n+    fn demorgan_handles_leq() {\n+        check(\n+            r\"use ordable::Orderable;\n+fn f() {\n+    Orderable < Orderable &&$0 Orderable <= Orderable\n+}\",\n+            r\"use ordable::Orderable;\n+fn f() {\n+    !(Orderable >= Orderable || Orderable > Orderable)\n+}\",\n+        );\n+        check(\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    NonOrderable < NonOrderable &&$0 NonOrderable <= NonOrderable\n+}\",\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    !(!(NonOrderable < NonOrderable) || !(NonOrderable <= NonOrderable))\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn demorgan_handles_geq() {\n+        check(\n+            r\"use ordable::Orderable;\n+fn f() {\n+    Orderable > Orderable &&$0 Orderable >= Orderable\n+}\",\n+            r\"use ordable::Orderable;\n+fn f() {\n+    !(Orderable <= Orderable || Orderable < Orderable)\n+}\",\n+        );\n+        check(\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    Orderable > Orderable &&$0 Orderable >= Orderable\n+}\",\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    !(!(Orderable > Orderable) || !(Orderable >= Orderable))\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn demorgan_turns_and_into_or() {\n         check_assist(apply_demorgan, \"fn f() { !x &&$0 !x }\", \"fn f() { !(x || x) }\")"}, {"sha": "276792bc1a2de4e4e3a941f0622f398f8a76ee77", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=694f7a7e9f90cc435afcaade23b5908728d17ed2", "patch": "@@ -267,24 +267,19 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n }\n \n fn bin_impls_ord(sema: &Semantics<RootDatabase>, bin: &ast::BinExpr) -> bool {\n-    if let (Some(lhs), Some(rhs)) = (bin.lhs(), bin.rhs()) {\n-        return sema.type_of_expr(&lhs) == sema.type_of_expr(&rhs)\n-            && impls_ord(sema, &lhs)\n-            && impls_ord(sema, &rhs);\n-    }\n-    false\n-}\n-\n-fn impls_ord(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> bool {\n-    let krate = sema.scope(expr.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(&sema, krate);\n-\n-    if let Some(ty) = sema.type_of_expr(expr) {\n-        if let Some(ord_trait) = famous_defs.core_cmp_Ord() {\n-            return ty.autoderef(sema.db).any(|ty| ty.impls_trait(sema.db, ord_trait, &[]));\n+    match (\n+        bin.lhs().and_then(|lhs| sema.type_of_expr(&lhs)),\n+        bin.rhs().and_then(|rhs| sema.type_of_expr(&rhs)),\n+    ) {\n+        (Some(lhs_ty), Some(rhs_ty)) if lhs_ty == rhs_ty => {\n+            let krate = sema.scope(bin.syntax()).module().map(|it| it.krate());\n+            let ord_trait = FamousDefs(sema, krate).core_cmp_Ord();\n+            ord_trait.map_or(false, |ord_trait| {\n+                lhs_ty.autoderef(sema.db).any(|ty| ty.impls_trait(sema.db, ord_trait, &[]))\n+            })\n         }\n+        _ => false,\n     }\n-    false\n }\n \n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {"}, {"sha": "b6c5de65884c38e2a1dcdced44cabad28e97053a", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694f7a7e9f90cc435afcaade23b5908728d17ed2/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=694f7a7e9f90cc435afcaade23b5908728d17ed2", "patch": "@@ -527,8 +527,11 @@ pub mod tokens {\n \n     use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n-    pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n-        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2, !true, *p)\\n;\\n\\n\"));\n+    pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n+        SourceFile::parse(\n+            \"const C: <()>::Item = (1 != 1, 2 == 2, 3 < 3, 4 <= 4, 5 > 5, 6 >= 6, !true, *p)\\n;\\n\\n\",\n+        )\n+    });\n \n     pub fn single_space() -> SyntaxToken {\n         SOURCE_FILE"}]}