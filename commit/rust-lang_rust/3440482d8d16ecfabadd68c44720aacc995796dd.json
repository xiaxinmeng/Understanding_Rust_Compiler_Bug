{"sha": "3440482d8d16ecfabadd68c44720aacc995796dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDA0ODJkOGQxNmVjZmFiYWRkNjhjNDQ3MjBhYWNjOTk1Nzk2ZGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T19:40:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T19:40:47Z"}, "message": "test: Fix a bunch of test cases. rs=burning", "tree": {"sha": "66529a041197358f0dd3b4ff3278208f86a7f53c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66529a041197358f0dd3b4ff3278208f86a7f53c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3440482d8d16ecfabadd68c44720aacc995796dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3440482d8d16ecfabadd68c44720aacc995796dd", "html_url": "https://github.com/rust-lang/rust/commit/3440482d8d16ecfabadd68c44720aacc995796dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3440482d8d16ecfabadd68c44720aacc995796dd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8cfd5c4142c28dde844678f2d506ccaf058dc78", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cfd5c4142c28dde844678f2d506ccaf058dc78", "html_url": "https://github.com/rust-lang/rust/commit/b8cfd5c4142c28dde844678f2d506ccaf058dc78"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "424620271a2f36845ac0741001f9921b44538802", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -1123,7 +1123,7 @@ mod tests {\n         log(debug, tmpfile);\n         let frood: ~str =\n             ~\"A hoopy frood who really knows where his towel is.\";\n-        log(debug, frood);\n+        log(debug, copy frood);\n         {\n             let out: io::Writer =\n                 result::get(\n@@ -1132,7 +1132,7 @@ mod tests {\n         }\n         let inp: io::Reader = result::get(&io::file_reader(tmpfile));\n         let frood2: ~str = inp.read_c_str();\n-        log(debug, frood2);\n+        log(debug, copy frood2);\n         assert frood == frood2;\n     }\n "}, {"sha": "e793155c267a98c8aa6585e28d8bb18cd8117fc9", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -946,7 +946,7 @@ mod tests {\n         while i < 100 { s += ~\"aaaaaaaaaa\"; i += 1; }\n         let n = make_rand_name();\n         setenv(n, s);\n-        log(debug, s);\n+        log(debug, copy s);\n         assert getenv(n) == option::Some(move s);\n     }\n \n@@ -955,7 +955,7 @@ mod tests {\n         let path = os::self_exe_path();\n         assert path.is_some();\n         let path = path.get();\n-        log(debug, path);\n+        log(debug, copy path);\n \n         // Hard to test this function\n         assert path.is_absolute;"}, {"sha": "298848b6e582f586362c8b2a8913b4dc62374696", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -440,8 +440,8 @@ mod tests {\n         readclose(pipe_err.in);\n         os::waitpid(pid);\n \n-        log(debug, expected);\n-        log(debug, actual);\n+        log(debug, copy expected);\n+        log(debug, copy actual);\n         assert (expected == actual);\n     }\n "}, {"sha": "502df31ad1769788aa2d5caecf74d9a10943824c", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = ~{mut a: ~10, b: ~20};\n     match x {\n-      ~{a, b} => { assert *a == 10; (*x).a = ~30; assert *a == 30; }\n+      ~{ref a, ref b} => { assert **a == 10; (*x).a = ~30; assert **a == 30; }\n     }\n }"}, {"sha": "e15dcf5f9031f8d829a39a40fe41851fd14e82c0", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -6,8 +6,8 @@ fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(*x); } }\n fn main() {\n     let v = ~[1, 2, 3, 4, 5];\n     let mut sum = 0;\n-    iter_vec(v, |i| {\n-        iter_vec(v, |j| {\n+    iter_vec(copy v, |i| {\n+        iter_vec(copy v, |j| {\n             log(error, i * j);\n             sum += i * j;\n         });"}, {"sha": "7ab8ccb0b5b86c51fec0b9abf674c47f5afb15c3", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         vec::map2(~[1, 2, 3, 4, 5],\n                   ~[true, false, false, true, true],\n                   |i, b| if *b { -(*i) } else { *i } );\n-    log(error, v);\n+    log(error, copy v);\n     assert (v == ~[-1, 2, 3, -4, -5]);\n }"}, {"sha": "4c5d944fed10692bd30456fa7cde953639b2e468", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -76,8 +76,8 @@ fn annoy_neighbors<T: noisy>(critter: T) {\n fn main() {\n   let nyan : cat  = cat(0u, 2, ~\"nyan\");\n   let whitefang : dog = dog();\n-  annoy_neighbors(nyan as noisy);\n-  annoy_neighbors(whitefang as noisy);\n+  annoy_neighbors((copy nyan) as noisy);\n+  annoy_neighbors((copy whitefang) as noisy);\n   assert(nyan.meow_count() == 10u);\n   assert(*whitefang.volume == 1);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b91119643b7df0d30b74e2229dda1b095028c670", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -44,7 +44,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,\n-        name: in_name\n+        name: copy in_name\n     }\n }\n "}, {"sha": "479a9d51ca0f5d0b0b7eb0c685fa724cbf7f4181", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -60,7 +60,7 @@ fn main() {\n     assert x.quux() == 10;\n \n     let y = ~thing({mut a: @10});\n-    assert y.bar() == 10;\n+    assert (copy y).bar() == 10;\n     assert y.quux() == 10;\n \n     let z = thing({mut a: @11});"}, {"sha": "13ed25c99953561fc6d4347e3469e97e6736d57e", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -4,7 +4,10 @@\n type compare<T> = fn@(~T, ~T) -> bool;\n \n fn test_generic<T: Copy>(expected: ~T, eq: compare<T>) {\n-    let actual: ~T = match true { true => { expected }, _ => fail ~\"wat\" };\n+    let actual: ~T = match true {\n+        true => { copy expected },\n+        _ => fail ~\"wat\"\n+    };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "e865bd25208d7f9d141e528242e549ab1d6192c5", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -6,7 +6,10 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => expected, _ => fail ~\"wat\" };\n+    let actual: T = match true {\n+        true => copy expected,\n+        _ => fail ~\"wat\"\n+    };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "b7af8366c7d00d55bea1d106e29bdc93834e2a28", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -4,7 +4,7 @@\n type compare<T> = fn@(~T, ~T) -> bool;\n \n fn test_generic<T: Copy>(expected: ~T, eq: compare<T>) {\n-    let actual: ~T = { expected };\n+    let actual: ~T = { copy expected };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "05b18e8c6513f42fe1458ebe0fcdc27f3f817708", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -4,7 +4,7 @@ fn id<T: Copy Send>(t: T) -> T { return t; }\n \n fn main() {\n     let expected = ~100;\n-    let actual = id::<~int>(expected);\n+    let actual = id::<~int>(copy expected);\n     log(debug, *actual);\n     assert (*expected == *actual);\n }"}, {"sha": "a14df1608f3ff994349399c27319f259a78474c2", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -42,7 +42,7 @@ mod map_reduce {\n         fn emit(im: map::HashMap<~str, int>, ctrl: Chan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n             let mut c;\n-            match im.find(key) {\n+            match im.find(copy key) {\n               Some(_c) => { c = _c }\n               None => {\n                 let p = Port();\n@@ -70,7 +70,7 @@ mod map_reduce {\n \n         reducers = map::HashMap();\n \n-        start_mappers(Chan(&ctrl), inputs);\n+        start_mappers(Chan(&ctrl), copy inputs);\n \n         let mut num_mappers = vec::len(inputs) as int;\n "}, {"sha": "d5c6e6bb6d240b63630d1094bbbf0d54ab2856d6", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -207,17 +207,17 @@ mod pingpong {\n     enum pong = pipes::send_packet<ping>;\n \n     fn liberate_ping(-p: ping) -> pipes::send_packet<pong> unsafe {\n-        let addr : *pipes::send_packet<pong> = match p {\n-          ping(x) => { cast::transmute(ptr::addr_of(&x)) }\n+        let addr : *pipes::send_packet<pong> = match &p {\n+          &ping(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value = move *addr;\n         cast::forget(move p);\n         move liberated_value\n     }\n \n     fn liberate_pong(-p: pong) -> pipes::send_packet<ping> unsafe {\n-        let addr : *pipes::send_packet<ping> = match p {\n-          pong(x) => { cast::transmute(ptr::addr_of(&x)) }\n+        let addr : *pipes::send_packet<ping> = match &p {\n+          &pong(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value = move *addr;\n         cast::forget(move p);"}, {"sha": "867c023ccf1509694a07633b19baf496dfc45db4", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3440482d8d16ecfabadd68c44720aacc995796dd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=3440482d8d16ecfabadd68c44720aacc995796dd", "patch": "@@ -31,9 +31,9 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n \n fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str, object)\n {\n-    match data\n+    match &data\n     {\n-        std::json::Object(interface) =>\n+        &std::json::Object(interface) =>\n         {\n             let name = lookup(interface, ~\"ifDescr\", ~\"\");\n             let label = fmt!(\"%s-%s\", managed_ip, name);"}]}