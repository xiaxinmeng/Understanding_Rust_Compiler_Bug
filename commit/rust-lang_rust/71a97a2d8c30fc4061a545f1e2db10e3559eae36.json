{"sha": "71a97a2d8c30fc4061a545f1e2db10e3559eae36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTk3YTJkOGMzMGZjNDA2MWE1NDVmMWUyZGIxMGUzNTU5ZWFlMzY=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-11T16:14:41Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-14T16:53:37Z"}, "message": "Provide regions in file structure", "tree": {"sha": "1aa0a643c44d1068b915614e374b0ce71deeade4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa0a643c44d1068b915614e374b0ce71deeade4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a97a2d8c30fc4061a545f1e2db10e3559eae36", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBOP5EACgkQ2MS9WuTZ\nzE3FEwf+O56EJNlJPPkgfzGAxYejeeNEHVBN7B7Fb29GlRMVyJYp4/YgZHiAyJSF\ncF7Xc6t8sZl3PXoC5rjSMhbYJ2RmW+UUQnyISWt/g/x5oJJhq5FBNwJK7cyZSz0w\n+vBBKoCDL1ckorahguaKze2AiboBB0PQAwOcbRjQj8HkuT3xj3ZvGwu7NoEhmbcv\nmHKcQ3gZ5FKs69+fZ8tigvGTJqj6uypAwL/P/tU8Wzc639ey4KIPYsYIdLbBNUvE\nKTVyFnjXhUc93Qyijbdbd011b6bRXx8CWrgE8vdULCw/M7rnPHYrjlrKexQIEQDm\nSCuxmrXB9v/ur6fI1J1XlMHQPKjQRQ==\n=rN2O\n-----END PGP SIGNATURE-----", "payload": "tree 1aa0a643c44d1068b915614e374b0ce71deeade4\nparent af8440b84851febd805b6b774bfb326cbdb7175e\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615479281 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615740817 +0200\n\nProvide regions in file structure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a97a2d8c30fc4061a545f1e2db10e3559eae36", "html_url": "https://github.com/rust-lang/rust/commit/71a97a2d8c30fc4061a545f1e2db10e3559eae36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a97a2d8c30fc4061a545f1e2db10e3559eae36/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8440b84851febd805b6b774bfb326cbdb7175e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8440b84851febd805b6b774bfb326cbdb7175e", "html_url": "https://github.com/rust-lang/rust/commit/af8440b84851febd805b6b774bfb326cbdb7175e"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "713c76957277ca33f273538b499dcc75889684ff", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=71a97a2d8c30fc4061a545f1e2db10e3559eae36", "patch": "@@ -1,7 +1,8 @@\n use ide_db::SymbolKind;\n use syntax::{\n     ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n-    match_ast, AstNode, SourceFile, SyntaxNode, TextRange, WalkEvent,\n+    match_ast, AstNode, AstToken, NodeOrToken, SourceFile, SyntaxNode, SyntaxToken, TextRange,\n+    WalkEvent,\n };\n \n #[derive(Debug, Clone)]\n@@ -32,20 +33,32 @@ pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n-    for event in file.syntax().preorder() {\n+    for event in file.syntax().preorder_with_tokens() {\n         match event {\n-            WalkEvent::Enter(node) => {\n+            WalkEvent::Enter(NodeOrToken::Node(node)) => {\n                 if let Some(mut symbol) = structure_node(&node) {\n                     symbol.parent = stack.last().copied();\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }\n             }\n-            WalkEvent::Leave(node) => {\n+            WalkEvent::Leave(NodeOrToken::Node(node)) => {\n                 if structure_node(&node).is_some() {\n                     stack.pop().unwrap();\n                 }\n             }\n+            WalkEvent::Enter(NodeOrToken::Token(token)) => {\n+                if let Some(mut symbol) = structure_token(token) {\n+                    symbol.parent = stack.last().copied();\n+                    stack.push(res.len());\n+                    res.push(symbol);\n+                }\n+            }\n+            WalkEvent::Leave(NodeOrToken::Token(token)) => {\n+                if structure_token(token).is_some() {\n+                    stack.pop().unwrap();\n+                }\n+            }\n         }\n     }\n     res\n@@ -159,6 +172,26 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     }\n }\n \n+fn structure_token(token: SyntaxToken) -> Option<StructureNode> {\n+    if let Some(comment) = ast::Comment::cast(token) {\n+        let text = comment.text().trim();\n+\n+        if let Some(region_name) = text.strip_prefix(\"// region:\").map(|text| text.trim()) {\n+            return Some(StructureNode {\n+                parent: None,\n+                label: region_name.to_string(),\n+                navigation_range: comment.syntax().text_range(),\n+                node_range: comment.syntax().text_range(),\n+                kind: SymbolKind::Region,\n+                detail: None,\n+                deprecated: false,\n+            });\n+        }\n+    }\n+\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -217,6 +250,9 @@ fn obsolete() {}\n \n #[deprecated(note = \"for awhile\")]\n fn very_obsolete() {}\n+\n+// region: Some region name\n+// endregion\n \"#,\n             expect![[r#\"\n                 [\n@@ -421,6 +457,15 @@ fn very_obsolete() {}\n                         ),\n                         deprecated: true,\n                     },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"Some region name\",\n+                        navigation_range: 501..528,\n+                        node_range: 501..528,\n+                        kind: Region,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n                 ]\n             \"#]],\n         );"}, {"sha": "c7e74aed862ed5866cb170c29edfd893f7569f17", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=71a97a2d8c30fc4061a545f1e2db10e3559eae36", "patch": "@@ -107,6 +107,7 @@ impl HlTag {\n                 SymbolKind::ValueParam => \"value_param\",\n                 SymbolKind::SelfParam => \"self_keyword\",\n                 SymbolKind::Impl => \"self_type\",\n+                SymbolKind::Region => \"region\",\n             },\n             HlTag::Attribute => \"attribute\",\n             HlTag::BoolLiteral => \"bool_literal\","}, {"sha": "7b553ea7ad32d7e93a04137f8fb2eec6277414ff", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=71a97a2d8c30fc4061a545f1e2db10e3559eae36", "patch": "@@ -225,6 +225,7 @@ impl CompletionItemKind {\n                 SymbolKind::Local => \"lc\",\n                 SymbolKind::Macro => \"ma\",\n                 SymbolKind::Module => \"md\",\n+                SymbolKind::Region => \"rn\",\n                 SymbolKind::SelfParam => \"sp\",\n                 SymbolKind::Static => \"sc\",\n                 SymbolKind::Struct => \"st\","}, {"sha": "d478841e24633ac95323b3cae6b93315acf1612d", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=71a97a2d8c30fc4061a545f1e2db10e3559eae36", "patch": "@@ -148,6 +148,7 @@ pub enum SymbolKind {\n     Local,\n     Macro,\n     Module,\n+    Region,\n     SelfParam,\n     Static,\n     Struct,"}, {"sha": "e88818eb04e0a8d4d58bd3907f2b3fe180bcfa3f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a97a2d8c30fc4061a545f1e2db10e3559eae36/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=71a97a2d8c30fc4061a545f1e2db10e3559eae36", "patch": "@@ -60,6 +60,7 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         | SymbolKind::ValueParam\n         | SymbolKind::Label => lsp_types::SymbolKind::Variable,\n         SymbolKind::Union => lsp_types::SymbolKind::Struct,\n+        SymbolKind::Region => lsp_types::SymbolKind::Namespace,\n     }\n }\n \n@@ -117,6 +118,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Local => lsp_types::CompletionItemKind::Variable,\n             SymbolKind::Macro => lsp_types::CompletionItemKind::Method,\n             SymbolKind::Module => lsp_types::CompletionItemKind::Module,\n+            SymbolKind::Region => lsp_types::CompletionItemKind::Keyword,\n             SymbolKind::SelfParam => lsp_types::CompletionItemKind::Value,\n             SymbolKind::Static => lsp_types::CompletionItemKind::Value,\n             SymbolKind::Struct => lsp_types::CompletionItemKind::Struct,\n@@ -428,6 +430,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n+            SymbolKind::Region => lsp_types::SemanticTokenType::NAMESPACE,\n         },\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::None => semantic_tokens::GENERIC,"}]}