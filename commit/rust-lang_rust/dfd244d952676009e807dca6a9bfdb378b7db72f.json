{"sha": "dfd244d952676009e807dca6a9bfdb378b7db72f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDI0NGQ5NTI2NzYwMDllODA3ZGNhNmE5YmZkYjM3OGI3ZGI3MmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-30T12:00:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-01T02:35:37Z"}, "message": "Eliminate ret_field and ret intermediates in array clone shim", "tree": {"sha": "0a89a6129acfc5244119e3418493a5f8d2407948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a89a6129acfc5244119e3418493a5f8d2407948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd244d952676009e807dca6a9bfdb378b7db72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd244d952676009e807dca6a9bfdb378b7db72f", "html_url": "https://github.com/rust-lang/rust/commit/dfd244d952676009e807dca6a9bfdb378b7db72f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd244d952676009e807dca6a9bfdb378b7db72f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97629160fe944cd9185ba180221d19f66126e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97629160fe944cd9185ba180221d19f66126e2f", "html_url": "https://github.com/rust-lang/rust/commit/f97629160fe944cd9185ba180221d19f66126e2f"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "58914097b43fb52b06bd410ac650a2f99575f127", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dfd244d952676009e807dca6a9bfdb378b7db72f/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd244d952676009e807dca6a9bfdb378b7db72f/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=dfd244d952676009e807dca6a9bfdb378b7db72f", "patch": "@@ -505,11 +505,11 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n     fn array_shim(&mut self, ty: Ty<'tcx>, len: u64) {\n         let tcx = self.tcx;\n         let span = self.span;\n-        let rcvr = Place::Local(Local::new(1+0)).deref();\n+        let src = Place::Local(Local::new(1+0)).deref();\n+        let dest = Place::Local(RETURN_PLACE);\n \n         let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n         let end = self.make_place(Mutability::Not, tcx.types.usize);\n-        let ret = self.make_place(Mutability::Mut, tcx.mk_array(ty, len));\n \n         // BB #0\n         // `let mut beg = 0;`\n@@ -539,25 +539,17 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.loop_header(Place::Local(beg), end, BasicBlock::new(2), BasicBlock::new(4), false);\n \n         // BB #2\n-        // `let cloned = Clone::clone(rcvr[beg])`;\n+        // `dest[i] = Clone::clone(src[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n-        let rcvr_field = rcvr.clone().index(beg);\n-        let cloned = self.make_place(Mutability::Not, ty);\n-        self.make_clone_call(cloned.clone(), rcvr_field, ty, BasicBlock::new(3),\n+        let dest_field = dest.clone().index(beg);\n+        let src_field = src.clone().index(beg);\n+        self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3),\n                              BasicBlock::new(5));\n \n         // BB #3\n-        // `ret[beg] = cloned;`\n         // `beg = beg + 1;`\n         // `goto #1`;\n-        let ret_field = ret.clone().index(beg);\n         let statements = vec![\n-            self.make_statement(\n-                StatementKind::Assign(\n-                    ret_field,\n-                    Rvalue::Use(Operand::Move(cloned))\n-                )\n-            ),\n             self.make_statement(\n                 StatementKind::Assign(\n                     Place::Local(beg),\n@@ -572,14 +564,8 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(statements, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n \n         // BB #4\n-        // `return ret;`\n-        let ret_statement = self.make_statement(\n-            StatementKind::Assign(\n-                Place::Local(RETURN_PLACE),\n-                Rvalue::Use(Operand::Move(ret.clone())),\n-            )\n-        );\n-        self.block(vec![ret_statement], TerminatorKind::Return, false);\n+        // `return dest;`\n+        self.block(vec![], TerminatorKind::Return, false);\n \n         // BB #5 (cleanup)\n         // `let end = beg;`\n@@ -604,9 +590,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n                          BasicBlock::new(7), BasicBlock::new(9), true);\n \n         // BB #7 (cleanup)\n-        // `drop(ret[beg])`;\n+        // `drop(dest[beg])`;\n         self.block(vec![], TerminatorKind::Drop {\n-            location: ret.index(beg),\n+            location: dest.index(beg),\n             target: BasicBlock::new(8),\n             unwind: None,\n         }, true);"}]}