{"sha": "7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "node_id": "C_kwDOAAsO6NoAKDdjZWZhOGY5OTU5NTY1YWNjNmUzNjA2Y2ZhNmFhMTM3NmM5Zjg2MmY", "commit": {"author": {"name": "Robin Raymond", "email": "robin@robinraymond.de", "date": "2022-05-07T17:15:03Z"}, "committer": {"name": "Robin Raymond", "email": "robin@robinraymond.de", "date": "2022-06-19T07:21:28Z"}, "message": "Make RwLockReadGuard covariant", "tree": {"sha": "2097f377f9fcdadd4425b3f9310fc64e2ad2947b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2097f377f9fcdadd4425b3f9310fc64e2ad2947b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "html_url": "https://github.com/rust-lang/rust/commit/7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cefa8f9959565acc6e3606cfa6aa1376c9f862f/comments", "author": {"login": "r-raymond", "id": 17067072, "node_id": "MDQ6VXNlcjE3MDY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/17067072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-raymond", "html_url": "https://github.com/r-raymond", "followers_url": "https://api.github.com/users/r-raymond/followers", "following_url": "https://api.github.com/users/r-raymond/following{/other_user}", "gists_url": "https://api.github.com/users/r-raymond/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-raymond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-raymond/subscriptions", "organizations_url": "https://api.github.com/users/r-raymond/orgs", "repos_url": "https://api.github.com/users/r-raymond/repos", "events_url": "https://api.github.com/users/r-raymond/events{/privacy}", "received_events_url": "https://api.github.com/users/r-raymond/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r-raymond", "id": 17067072, "node_id": "MDQ6VXNlcjE3MDY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/17067072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-raymond", "html_url": "https://github.com/r-raymond", "followers_url": "https://api.github.com/users/r-raymond/followers", "following_url": "https://api.github.com/users/r-raymond/following{/other_user}", "gists_url": "https://api.github.com/users/r-raymond/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-raymond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-raymond/subscriptions", "organizations_url": "https://api.github.com/users/r-raymond/orgs", "repos_url": "https://api.github.com/users/r-raymond/repos", "events_url": "https://api.github.com/users/r-raymond/events{/privacy}", "received_events_url": "https://api.github.com/users/r-raymond/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9be6e4e9074ca58cef8b1ded299eff72e3ac52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9be6e4e9074ca58cef8b1ded299eff72e3ac52", "html_url": "https://github.com/rust-lang/rust/commit/6c9be6e4e9074ca58cef8b1ded299eff72e3ac52"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "efd2771fa1ce4b8e8003dd9b672c7cde631d625f", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7cefa8f9959565acc6e3606cfa6aa1376c9f862f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cefa8f9959565acc6e3606cfa6aa1376c9f862f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "patch": "@@ -101,7 +101,8 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n-    lock: &'a RwLock<T>,\n+    inner_lock: &'a sys::MovableRwLock,\n+    data: &'a T,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -510,7 +511,7 @@ impl<T> From<T> for RwLock<T> {\n \n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockReadGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard { lock })\n+        poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard { inner_lock: &lock.inner, data: &*lock.data.get() })\n     }\n }\n \n@@ -553,7 +554,7 @@ impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        unsafe { &*self.lock.data.get() }\n+        self.data\n     }\n }\n \n@@ -577,7 +578,7 @@ impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n         unsafe {\n-            self.lock.inner.read_unlock();\n+            self.inner_lock.read_unlock();\n         }\n     }\n }"}, {"sha": "1ffa13f83218c388d4ed5077b82d849fef7f50b6", "filename": "library/std/src/sync/rwlock/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7cefa8f9959565acc6e3606cfa6aa1376c9f862f/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cefa8f9959565acc6e3606cfa6aa1376c9f862f/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs?ref=7cefa8f9959565acc6e3606cfa6aa1376c9f862f", "patch": "@@ -1,6 +1,6 @@\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::mpsc::channel;\n-use crate::sync::{Arc, RwLock, TryLockError};\n+use crate::sync::{Arc, RwLock, TryLockError, RwLockReadGuard};\n use crate::thread;\n use rand::{self, Rng};\n \n@@ -245,3 +245,15 @@ fn test_get_mut_poison() {\n         Ok(x) => panic!(\"get_mut of poisoned RwLock is Ok: {x:?}\"),\n     }\n }\n+\n+#[test]\n+fn test_read_guard_covariance() {\n+    fn do_stuff<'a>(_: RwLockReadGuard<'_, &'a i32>, _: &'a i32) {}\n+    let j: i32 = 5;\n+    let lock = RwLock::new(&j);\n+    {\n+        let i = 6;\n+        do_stuff(lock.read().unwrap(), &i);\n+    }\n+    drop(lock);\n+}"}]}