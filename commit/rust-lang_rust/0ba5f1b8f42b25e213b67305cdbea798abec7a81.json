{"sha": "0ba5f1b8f42b25e213b67305cdbea798abec7a81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTVmMWI4ZjQyYjI1ZTIxM2I2NzMwNWNkYmVhNzk4YWJlYzdhODE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-06T03:28:28Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-17T07:53:06Z"}, "message": "De-@ tyencode::ctxt and related parts of astencode.", "tree": {"sha": "f1ef1098fba699b2aa25161954ea63b3ed9bca94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ef1098fba699b2aa25161954ea63b3ed9bca94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba5f1b8f42b25e213b67305cdbea798abec7a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba5f1b8f42b25e213b67305cdbea798abec7a81", "html_url": "https://github.com/rust-lang/rust/commit/0ba5f1b8f42b25e213b67305cdbea798abec7a81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba5f1b8f42b25e213b67305cdbea798abec7a81/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1fee898f03b50113549b74da4c6d19eca4728e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1fee898f03b50113549b74da4c6d19eca4728e", "html_url": "https://github.com/rust-lang/rust/commit/9b1fee898f03b50113549b74da4c6d19eca4728e"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "b4d2eed0b9b1c73a71e5028cfd5034114bb84e9d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=0ba5f1b8f42b25e213b67305cdbea798abec7a81", "patch": "@@ -129,7 +129,7 @@ fn encode_trait_ref(ebml_w: &mut writer::Encoder,\n                     ecx: &EncodeContext,\n                     trait_ref: &ty::TraitRef,\n                     tag: uint) {\n-    let ty_str_ctxt = @tyencode::ctxt {\n+    let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n         tcx: ecx.tcx,\n@@ -165,7 +165,7 @@ fn encode_ty_type_param_defs(ebml_w: &mut writer::Encoder,\n                              ecx: &EncodeContext,\n                              params: &[ty::TypeParameterDef],\n                              tag: uint) {\n-    let ty_str_ctxt = @tyencode::ctxt {\n+    let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n         tcx: ecx.tcx,\n@@ -222,7 +222,7 @@ fn encode_variant_id(ebml_w: &mut writer::Encoder, vid: DefId) {\n pub fn write_type(ecx: &EncodeContext,\n                   ebml_w: &mut writer::Encoder,\n                   typ: ty::t) {\n-    let ty_str_ctxt = @tyencode::ctxt {\n+    let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n         tcx: ecx.tcx,\n@@ -234,7 +234,7 @@ pub fn write_type(ecx: &EncodeContext,\n pub fn write_vstore(ecx: &EncodeContext,\n                     ebml_w: &mut writer::Encoder,\n                     vstore: ty::vstore) {\n-    let ty_str_ctxt = @tyencode::ctxt {\n+    let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n         tcx: ecx.tcx,\n@@ -256,7 +256,7 @@ fn encode_method_fty(ecx: &EncodeContext,\n                      typ: &ty::BareFnTy) {\n     ebml_w.start_tag(tag_item_method_fty);\n \n-    let ty_str_ctxt = @tyencode::ctxt {\n+    let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n         tcx: ecx.tcx,\n@@ -1900,7 +1900,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n \n // Get the encoded string for a type\n pub fn encoded_ty(tcx: &ty::ctxt, t: ty::t) -> ~str {\n-    let cx = @tyencode::ctxt {\n+    let cx = &tyencode::ctxt {\n         diag: tcx.diag,\n         ds: def_to_str,\n         tcx: tcx,"}, {"sha": "6366149c0f61433a5737ad225f71aa94b02e01f5", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=0ba5f1b8f42b25e213b67305cdbea798abec7a81", "patch": "@@ -62,7 +62,7 @@ fn mywrite(w: &mut MemWriter, fmt: &fmt::Arguments) {\n     fmt::write(&mut *w as &mut io::Writer, fmt);\n }\n \n-pub fn enc_ty(w: &mut MemWriter, cx: @ctxt, t: ty::t) {\n+pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) {\n     match cx.abbrevs {\n       ac_no_abbrevs => {\n           let result_str_opt;\n@@ -131,7 +131,7 @@ fn enc_mutability(w: &mut MemWriter, mt: ast::Mutability) {\n     }\n }\n \n-fn enc_mt(w: &mut MemWriter, cx: @ctxt, mt: ty::mt) {\n+fn enc_mt(w: &mut MemWriter, cx: &ctxt, mt: ty::mt) {\n     enc_mutability(w, mt.mutbl);\n     enc_ty(w, cx, mt.ty);\n }\n@@ -146,15 +146,15 @@ fn enc_opt<T>(w: &mut MemWriter, t: Option<T>, enc_f: |&mut MemWriter, T|) {\n     }\n }\n \n-pub fn enc_substs(w: &mut MemWriter, cx: @ctxt, substs: &ty::substs) {\n+pub fn enc_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::substs) {\n     enc_region_substs(w, cx, &substs.regions);\n     enc_opt(w, substs.self_ty, |w, t| enc_ty(w, cx, t));\n     mywrite!(w, \"[\");\n     for t in substs.tps.iter() { enc_ty(w, cx, *t); }\n     mywrite!(w, \"]\");\n }\n \n-fn enc_region_substs(w: &mut MemWriter, cx: @ctxt, substs: &ty::RegionSubsts) {\n+fn enc_region_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::RegionSubsts) {\n     match *substs {\n         ty::ErasedRegions => {\n             mywrite!(w, \"e\");\n@@ -169,7 +169,7 @@ fn enc_region_substs(w: &mut MemWriter, cx: @ctxt, substs: &ty::RegionSubsts) {\n     }\n }\n \n-fn enc_region(w: &mut MemWriter, cx: @ctxt, r: ty::Region) {\n+fn enc_region(w: &mut MemWriter, cx: &ctxt, r: ty::Region) {\n     match r {\n         ty::ReLateBound(id, br) => {\n             mywrite!(w, \"b[{}|\", id);\n@@ -203,7 +203,7 @@ fn enc_region(w: &mut MemWriter, cx: @ctxt, r: ty::Region) {\n     }\n }\n \n-fn enc_bound_region(w: &mut MemWriter, cx: @ctxt, br: ty::BoundRegion) {\n+fn enc_bound_region(w: &mut MemWriter, cx: &ctxt, br: ty::BoundRegion) {\n     match br {\n         ty::BrAnon(idx) => {\n             mywrite!(w, \"a{}|\", idx);\n@@ -219,7 +219,7 @@ fn enc_bound_region(w: &mut MemWriter, cx: @ctxt, br: ty::BoundRegion) {\n     }\n }\n \n-pub fn enc_vstore(w: &mut MemWriter, cx: @ctxt, v: ty::vstore) {\n+pub fn enc_vstore(w: &mut MemWriter, cx: &ctxt, v: ty::vstore) {\n     mywrite!(w, \"/\");\n     match v {\n         ty::vstore_fixed(u) => mywrite!(w, \"{}|\", u),\n@@ -231,12 +231,12 @@ pub fn enc_vstore(w: &mut MemWriter, cx: @ctxt, v: ty::vstore) {\n     }\n }\n \n-pub fn enc_trait_ref(w: &mut MemWriter, cx: @ctxt, s: &ty::TraitRef) {\n+pub fn enc_trait_ref(w: &mut MemWriter, cx: &ctxt, s: &ty::TraitRef) {\n     mywrite!(w, \"{}|\", (cx.ds)(s.def_id));\n     enc_substs(w, cx, &s.substs);\n }\n \n-pub fn enc_trait_store(w: &mut MemWriter, cx: @ctxt, s: ty::TraitStore) {\n+pub fn enc_trait_store(w: &mut MemWriter, cx: &ctxt, s: ty::TraitStore) {\n     match s {\n         ty::UniqTraitStore => mywrite!(w, \"~\"),\n         ty::RegionTraitStore(re) => {\n@@ -246,7 +246,7 @@ pub fn enc_trait_store(w: &mut MemWriter, cx: @ctxt, s: ty::TraitStore) {\n     }\n }\n \n-fn enc_sty(w: &mut MemWriter, cx: @ctxt, st: &ty::sty) {\n+fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n     match *st {\n         ty::ty_nil => mywrite!(w, \"n\"),\n         ty::ty_bot => mywrite!(w, \"z\"),\n@@ -372,13 +372,13 @@ fn enc_onceness(w: &mut MemWriter, o: Onceness) {\n     }\n }\n \n-pub fn enc_bare_fn_ty(w: &mut MemWriter, cx: @ctxt, ft: &ty::BareFnTy) {\n+pub fn enc_bare_fn_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::BareFnTy) {\n     enc_purity(w, ft.purity);\n     enc_abi_set(w, ft.abis);\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n-fn enc_closure_ty(w: &mut MemWriter, cx: @ctxt, ft: &ty::ClosureTy) {\n+fn enc_closure_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::ClosureTy) {\n     enc_sigil(w, ft.sigil);\n     enc_purity(w, ft.purity);\n     enc_onceness(w, ft.onceness);\n@@ -389,7 +389,7 @@ fn enc_closure_ty(w: &mut MemWriter, cx: @ctxt, ft: &ty::ClosureTy) {\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n-fn enc_fn_sig(w: &mut MemWriter, cx: @ctxt, fsig: &ty::FnSig) {\n+fn enc_fn_sig(w: &mut MemWriter, cx: &ctxt, fsig: &ty::FnSig) {\n     mywrite!(w, \"[{}|\", fsig.binder_id);\n     for ty in fsig.inputs.iter() {\n         enc_ty(w, cx, *ty);\n@@ -403,7 +403,7 @@ fn enc_fn_sig(w: &mut MemWriter, cx: @ctxt, fsig: &ty::FnSig) {\n     enc_ty(w, cx, fsig.output);\n }\n \n-fn enc_bounds(w: &mut MemWriter, cx: @ctxt, bs: &ty::ParamBounds) {\n+fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n     for bound in bs.builtin_bounds.iter() {\n         match bound {\n             ty::BoundSend => mywrite!(w, \"S\"),\n@@ -422,7 +422,7 @@ fn enc_bounds(w: &mut MemWriter, cx: @ctxt, bs: &ty::ParamBounds) {\n     mywrite!(w, \".\");\n }\n \n-pub fn enc_type_param_def(w: &mut MemWriter, cx: @ctxt, v: &ty::TypeParameterDef) {\n+pub fn enc_type_param_def(w: &mut MemWriter, cx: &ctxt, v: &ty::TypeParameterDef) {\n     mywrite!(w, \"{}:{}|\", token::get_ident(v.ident), (cx.ds)(v.def_id));\n     enc_bounds(w, cx, v.bounds);\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));"}, {"sha": "4e59dd448281ab2da73639312541ef71efe854c3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba5f1b8f42b25e213b67305cdbea798abec7a81/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0ba5f1b8f42b25e213b67305cdbea798abec7a81", "patch": "@@ -63,17 +63,17 @@ struct DecodeContext<'a> {\n }\n \n struct ExtendedDecodeContext<'a> {\n-    dcx: @DecodeContext<'a>,\n+    dcx: &'a DecodeContext<'a>,\n     from_id_range: ast_util::IdRange,\n     to_id_range: ast_util::IdRange\n }\n \n trait tr {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> Self;\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> Self;\n }\n \n trait tr_intern {\n-    fn tr_intern(&self, xcx: @ExtendedDecodeContext) -> ast::DefId;\n+    fn tr_intern(&self, xcx: &ExtendedDecodeContext) -> ast::DefId;\n }\n \n // ______________________________________________________________________\n@@ -116,10 +116,10 @@ pub fn encode_exported_macro(ebml_w: &mut writer::Encoder, i: &ast::Item) {\n pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n                            tcx: &ty::ctxt,\n                            maps: Maps,\n-                           path: Vec<ast_map::PathElem> ,\n+                           path: Vec<ast_map::PathElem>,\n                            par_doc: ebml::Doc)\n-                           -> Result<ast::InlinedItem, Vec<ast_map::PathElem> > {\n-    let dcx = @DecodeContext {\n+                           -> Result<ast::InlinedItem, Vec<ast_map::PathElem>> {\n+    let dcx = &DecodeContext {\n         cdata: cdata,\n         tcx: tcx,\n         maps: maps\n@@ -138,7 +138,7 @@ pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n         let mut ast_dsr = reader::Decoder(ast_doc);\n         let from_id_range = Decodable::decode(&mut ast_dsr);\n         let to_id_range = reserve_id_range(&dcx.tcx.sess, from_id_range);\n-        let xcx = @ExtendedDecodeContext {\n+        let xcx = &ExtendedDecodeContext {\n             dcx: dcx,\n             from_id_range: from_id_range,\n             to_id_range: to_id_range\n@@ -245,25 +245,25 @@ impl<'a> ExtendedDecodeContext<'a> {\n }\n \n impl tr_intern for ast::DefId {\n-    fn tr_intern(&self, xcx: @ExtendedDecodeContext) -> ast::DefId {\n+    fn tr_intern(&self, xcx: &ExtendedDecodeContext) -> ast::DefId {\n         xcx.tr_intern_def_id(*self)\n     }\n }\n \n impl tr for ast::DefId {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ast::DefId {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ast::DefId {\n         xcx.tr_def_id(*self)\n     }\n }\n \n impl tr for Option<ast::DefId> {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> Option<ast::DefId> {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> Option<ast::DefId> {\n         self.map(|d| xcx.tr_def_id(d))\n     }\n }\n \n impl tr for Span {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> Span {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> Span {\n         xcx.tr_span(*self)\n     }\n }\n@@ -279,13 +279,13 @@ impl<S:serialize::Encoder> def_id_encoder_helpers for S {\n }\n \n trait def_id_decoder_helpers {\n-    fn read_def_id(&mut self, xcx: @ExtendedDecodeContext) -> ast::DefId;\n+    fn read_def_id(&mut self, xcx: &ExtendedDecodeContext) -> ast::DefId;\n     fn read_def_id_noxcx(&mut self,\n                          cdata: @cstore::crate_metadata) -> ast::DefId;\n }\n \n impl<D:serialize::Decoder> def_id_decoder_helpers for D {\n-    fn read_def_id(&mut self, xcx: @ExtendedDecodeContext) -> ast::DefId {\n+    fn read_def_id(&mut self, xcx: &ExtendedDecodeContext) -> ast::DefId {\n         let did: ast::DefId = Decodable::decode(self);\n         did.tr(xcx)\n     }\n@@ -376,7 +376,7 @@ fn decode_ast(par_doc: ebml::Doc) -> ast::InlinedItem {\n }\n \n struct AstRenumberer<'a> {\n-    xcx: @ExtendedDecodeContext<'a>,\n+    xcx: &'a ExtendedDecodeContext<'a>,\n }\n \n impl<'a> ast_map::FoldOps for AstRenumberer<'a> {\n@@ -393,7 +393,7 @@ impl<'a> ast_map::FoldOps for AstRenumberer<'a> {\n     }\n }\n \n-fn renumber_and_map_ast(xcx: @ExtendedDecodeContext,\n+fn renumber_and_map_ast(xcx: &ExtendedDecodeContext,\n                         map: &ast_map::Map,\n                         path: Vec<ast_map::PathElem> ,\n                         ii: ast::InlinedItem) -> ast::InlinedItem {\n@@ -416,14 +416,14 @@ fn renumber_and_map_ast(xcx: @ExtendedDecodeContext,\n // ______________________________________________________________________\n // Encoding and decoding of ast::def\n \n-fn decode_def(xcx: @ExtendedDecodeContext, doc: ebml::Doc) -> ast::Def {\n+fn decode_def(xcx: &ExtendedDecodeContext, doc: ebml::Doc) -> ast::Def {\n     let mut dsr = reader::Decoder(doc);\n     let def: ast::Def = Decodable::decode(&mut dsr);\n     def.tr(xcx)\n }\n \n impl tr for ast::Def {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ast::Def {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ast::Def {\n         match *self {\n           ast::DefFn(did, p) => ast::DefFn(did.tr(xcx), p),\n           ast::DefStaticMethod(did, wrapped_did2, p) => {\n@@ -476,7 +476,7 @@ impl tr for ast::Def {\n // Encoding and decoding of adjustment information\n \n impl tr for ty::AutoDerefRef {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ty::AutoDerefRef {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::AutoDerefRef {\n         ty::AutoDerefRef {\n             autoderefs: self.autoderefs,\n             autoref: match self.autoref {\n@@ -488,13 +488,13 @@ impl tr for ty::AutoDerefRef {\n }\n \n impl tr for ty::AutoRef {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ty::AutoRef {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::AutoRef {\n         self.map_region(|r| r.tr(xcx))\n     }\n }\n \n impl tr for ty::Region {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ty::Region {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::Region {\n         match *self {\n             ty::ReLateBound(id, br) => ty::ReLateBound(xcx.tr_id(id),\n                                                        br.tr(xcx)),\n@@ -512,7 +512,7 @@ impl tr for ty::Region {\n }\n \n impl tr for ty::BoundRegion {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> ty::BoundRegion {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::BoundRegion {\n         match *self {\n             ty::BrAnon(_) |\n             ty::BrFresh(_) => *self,\n@@ -530,20 +530,20 @@ fn encode_freevar_entry(ebml_w: &mut writer::Encoder, fv: @freevar_entry) {\n }\n \n trait ebml_decoder_helper {\n-    fn read_freevar_entry(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_freevar_entry(&mut self, xcx: &ExtendedDecodeContext)\n                           -> freevar_entry;\n }\n \n impl<'a> ebml_decoder_helper for reader::Decoder<'a> {\n-    fn read_freevar_entry(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_freevar_entry(&mut self, xcx: &ExtendedDecodeContext)\n                           -> freevar_entry {\n         let fv: freevar_entry = Decodable::decode(self);\n         fv.tr(xcx)\n     }\n }\n \n impl tr for freevar_entry {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> freevar_entry {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> freevar_entry {\n         freevar_entry {\n             def: self.def.tr(xcx),\n             span: self.span.tr(xcx),\n@@ -555,20 +555,20 @@ impl tr for freevar_entry {\n // Encoding and decoding of CaptureVar information\n \n trait capture_var_helper {\n-    fn read_capture_var(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_capture_var(&mut self, xcx: &ExtendedDecodeContext)\n                         -> moves::CaptureVar;\n }\n \n impl<'a> capture_var_helper for reader::Decoder<'a> {\n-    fn read_capture_var(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_capture_var(&mut self, xcx: &ExtendedDecodeContext)\n                         -> moves::CaptureVar {\n         let cvar: moves::CaptureVar = Decodable::decode(self);\n         cvar.tr(xcx)\n     }\n }\n \n impl tr for moves::CaptureVar {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> moves::CaptureVar {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> moves::CaptureVar {\n         moves::CaptureVar {\n             def: self.def.tr(xcx),\n             span: self.span.tr(xcx),\n@@ -581,7 +581,7 @@ impl tr for moves::CaptureVar {\n // Encoding and decoding of MethodCallee\n \n trait read_method_callee_helper {\n-    fn read_method_callee(&mut self, xcx: @ExtendedDecodeContext) -> MethodCallee;\n+    fn read_method_callee(&mut self, xcx: &ExtendedDecodeContext) -> MethodCallee;\n }\n \n fn encode_method_callee(ecx: &e::EncodeContext,\n@@ -601,7 +601,7 @@ fn encode_method_callee(ecx: &e::EncodeContext,\n }\n \n impl<'a> read_method_callee_helper for reader::Decoder<'a> {\n-    fn read_method_callee(&mut self, xcx: @ExtendedDecodeContext) -> MethodCallee {\n+    fn read_method_callee(&mut self, xcx: &ExtendedDecodeContext) -> MethodCallee {\n         self.read_struct(\"MethodCallee\", 3, |this| {\n             MethodCallee {\n                 origin: this.read_struct_field(\"origin\", 0, |this| {\n@@ -621,7 +621,7 @@ impl<'a> read_method_callee_helper for reader::Decoder<'a> {\n }\n \n impl tr for MethodOrigin {\n-    fn tr(&self, xcx: @ExtendedDecodeContext) -> MethodOrigin {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> MethodOrigin {\n         match *self {\n             typeck::MethodStatic(did) => typeck::MethodStatic(did.tr(xcx)),\n             typeck::MethodParam(ref mp) => {\n@@ -775,12 +775,12 @@ impl<'a> vtable_decoder_helpers for reader::Decoder<'a> {\n // Encoding and decoding the side tables\n \n trait get_ty_str_ctxt {\n-    fn ty_str_ctxt<'a>(&'a self) -> @tyencode::ctxt<'a>;\n+    fn ty_str_ctxt<'a>(&'a self) -> tyencode::ctxt<'a>;\n }\n \n impl<'a> get_ty_str_ctxt for e::EncodeContext<'a> {\n-    fn ty_str_ctxt<'a>(&'a self) -> @tyencode::ctxt<'a> {\n-        @tyencode::ctxt {\n+    fn ty_str_ctxt<'a>(&'a self) -> tyencode::ctxt<'a> {\n+        tyencode::ctxt {\n             diag: self.tcx.sess.diagnostic(),\n             ds: e::def_to_str,\n             tcx: self.tcx,\n@@ -821,7 +821,7 @@ impl<'a> ebml_writer_helpers for writer::Encoder<'a> {\n                            type_param_def: &ty::TypeParameterDef) {\n         self.emit_opaque(|this| {\n             tyencode::enc_type_param_def(this.writer,\n-                                         ecx.ty_str_ctxt(),\n+                                         &ecx.ty_str_ctxt(),\n                                          type_param_def)\n         })\n     }\n@@ -850,7 +850,7 @@ impl<'a> ebml_writer_helpers for writer::Encoder<'a> {\n     }\n \n     fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &ty::substs) {\n-        self.emit_opaque(|this| tyencode::enc_substs(this.writer, ecx.ty_str_ctxt(), substs))\n+        self.emit_opaque(|this| tyencode::enc_substs(this.writer, &ecx.ty_str_ctxt(), substs))\n     }\n \n     fn emit_auto_adjustment(&mut self, ecx: &e::EncodeContext, adj: &ty::AutoAdjustment) {\n@@ -1105,16 +1105,16 @@ impl<'a> doc_decoder_helpers for ebml::Doc<'a> {\n }\n \n trait ebml_decoder_decoder_helpers {\n-    fn read_ty(&mut self, xcx: @ExtendedDecodeContext) -> ty::t;\n-    fn read_tys(&mut self, xcx: @ExtendedDecodeContext) -> Vec<ty::t> ;\n-    fn read_type_param_def(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_ty(&mut self, xcx: &ExtendedDecodeContext) -> ty::t;\n+    fn read_tys(&mut self, xcx: &ExtendedDecodeContext) -> Vec<ty::t>;\n+    fn read_type_param_def(&mut self, xcx: &ExtendedDecodeContext)\n                            -> ty::TypeParameterDef;\n-    fn read_ty_param_bounds_and_ty(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_ty_param_bounds_and_ty(&mut self, xcx: &ExtendedDecodeContext)\n                                 -> ty::ty_param_bounds_and_ty;\n-    fn read_substs(&mut self, xcx: @ExtendedDecodeContext) -> ty::substs;\n-    fn read_auto_adjustment(&mut self, xcx: @ExtendedDecodeContext) -> ty::AutoAdjustment;\n+    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs;\n+    fn read_auto_adjustment(&mut self, xcx: &ExtendedDecodeContext) -> ty::AutoAdjustment;\n     fn convert_def_id(&mut self,\n-                      xcx: @ExtendedDecodeContext,\n+                      xcx: &ExtendedDecodeContext,\n                       source: DefIdSource,\n                       did: ast::DefId)\n                       -> ast::DefId;\n@@ -1149,7 +1149,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n             .collect()\n     }\n \n-    fn read_ty(&mut self, xcx: @ExtendedDecodeContext) -> ty::t {\n+    fn read_ty(&mut self, xcx: &ExtendedDecodeContext) -> ty::t {\n         // Note: regions types embed local node ids.  In principle, we\n         // should translate these node ids into the new decode\n         // context.  However, we do not bother, because region types\n@@ -1177,11 +1177,11 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n         }\n     }\n \n-    fn read_tys(&mut self, xcx: @ExtendedDecodeContext) -> Vec<ty::t> {\n+    fn read_tys(&mut self, xcx: &ExtendedDecodeContext) -> Vec<ty::t> {\n         self.read_to_vec(|this| this.read_ty(xcx)).move_iter().collect()\n     }\n \n-    fn read_type_param_def(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_type_param_def(&mut self, xcx: &ExtendedDecodeContext)\n                            -> ty::TypeParameterDef {\n         self.read_opaque(|this, doc| {\n             tydecode::parse_type_param_def_data(\n@@ -1193,7 +1193,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n         })\n     }\n \n-    fn read_ty_param_bounds_and_ty(&mut self, xcx: @ExtendedDecodeContext)\n+    fn read_ty_param_bounds_and_ty(&mut self, xcx: &ExtendedDecodeContext)\n                                    -> ty::ty_param_bounds_and_ty {\n         self.read_struct(\"ty_param_bounds_and_ty\", 2, |this| {\n             ty::ty_param_bounds_and_ty {\n@@ -1225,7 +1225,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n         })\n     }\n \n-    fn read_substs(&mut self, xcx: @ExtendedDecodeContext) -> ty::substs {\n+    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs {\n         self.read_opaque(|this, doc| {\n             tydecode::parse_substs_data(doc.data,\n                                         xcx.dcx.cdata.cnum,\n@@ -1235,7 +1235,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n         })\n     }\n \n-    fn read_auto_adjustment(&mut self, xcx: @ExtendedDecodeContext) -> ty::AutoAdjustment {\n+    fn read_auto_adjustment(&mut self, xcx: &ExtendedDecodeContext) -> ty::AutoAdjustment {\n         self.read_enum(\"AutoAdjustment\", |this| {\n             let variants = [\"AutoAddEnv\", \"AutoDerefRef\", \"AutoObject\"];\n             this.read_enum_variant(variants, |this, i| {\n@@ -1281,7 +1281,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n     }\n \n     fn convert_def_id(&mut self,\n-                      xcx: @ExtendedDecodeContext,\n+                      xcx: &ExtendedDecodeContext,\n                       source: tydecode::DefIdSource,\n                       did: ast::DefId)\n                       -> ast::DefId {\n@@ -1322,7 +1322,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n     }\n }\n \n-fn decode_side_tables(xcx: @ExtendedDecodeContext,\n+fn decode_side_tables(xcx: &ExtendedDecodeContext,\n                       ast_doc: ebml::Doc) {\n     let dcx = xcx.dcx;\n     let tbl_doc = ast_doc.get(c::tag_table as uint);"}]}