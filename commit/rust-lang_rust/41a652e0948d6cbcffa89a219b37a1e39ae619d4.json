{"sha": "41a652e0948d6cbcffa89a219b37a1e39ae619d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTY1MmUwOTQ4ZDZjYmNmZmE4OWEyMTliMzdhMWUzOWFlNjE5ZDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-20T19:52:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "WIP factor out RudimentaryEmitter", "tree": {"sha": "8f87e6d7dc9ce8378febdb0a6678b3d06ae044be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f87e6d7dc9ce8378febdb0a6678b3d06ae044be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a652e0948d6cbcffa89a219b37a1e39ae619d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a652e0948d6cbcffa89a219b37a1e39ae619d4", "html_url": "https://github.com/rust-lang/rust/commit/41a652e0948d6cbcffa89a219b37a1e39ae619d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a652e0948d6cbcffa89a219b37a1e39ae619d4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489a6c95bf747059b28472efc17d39795c6adcad", "url": "https://api.github.com/repos/rust-lang/rust/commits/489a6c95bf747059b28472efc17d39795c6adcad", "html_url": "https://github.com/rust-lang/rust/commit/489a6c95bf747059b28472efc17d39795c6adcad"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "ffd8c261b60550cc02825394bfcc68e4bfee8438", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41a652e0948d6cbcffa89a219b37a1e39ae619d4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a652e0948d6cbcffa89a219b37a1e39ae619d4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=41a652e0948d6cbcffa89a219b37a1e39ae619d4", "patch": "@@ -19,9 +19,9 @@ use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n-use syntax::codemap::{self, MultiSpan};\n+use syntax::codemap::MultiSpan;\n use syntax::errors::{self, Handler, Level};\n-use syntax::errors::emitter::Emitter;\n+use syntax::errors::emitter::RudimentaryEmitter;\n \n use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n@@ -100,24 +100,17 @@ impl SharedEmitter {\n     }\n }\n \n-impl Emitter for SharedEmitter {\n-    fn emit(&mut self,\n-            sp: &codemap::MultiSpan,\n-            msg: &str,\n-            code: Option<&str>,\n-            lvl: Level) {\n-        assert!(sp.primary_span().is_none(), \"SharedEmitter doesn't support spans\");\n-\n+impl RudimentaryEmitter for SharedEmitter {\n+    fn emit_rudimentary(&mut self,\n+                        msg: &str,\n+                        code: Option<&str>,\n+                        lvl: Level) {\n         self.buffer.lock().unwrap().push(Diagnostic {\n             msg: msg.to_string(),\n             code: code.map(|s| s.to_string()),\n             lvl: lvl,\n         });\n     }\n-\n-    fn emit_struct(&mut self, _db: &errors::DiagnosticBuilder) {\n-        bug!(\"SharedEmitter doesn't support emit_struct\");\n-    }\n }\n \n "}, {"sha": "f851937d82bc0c5757121cd71c89a8c5e9f9713e", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/41a652e0948d6cbcffa89a219b37a1e39ae619d4/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a652e0948d6cbcffa89a219b37a1e39ae619d4/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=41a652e0948d6cbcffa89a219b37a1e39ae619d4", "patch": "@@ -25,12 +25,38 @@ use std::rc::Rc;\n use term;\n \n pub trait Emitter {\n+    /// Emit a standalone diagnostic message.\n     fn emit(&mut self, span: &MultiSpan, msg: &str, code: Option<&str>, lvl: Level);\n \n     /// Emit a structured diagnostic.\n     fn emit_struct(&mut self, db: &DiagnosticBuilder);\n }\n \n+/// A core trait that can only handle very simple messages: those\n+/// without spans or any real structure. Used only in specific contexts.\n+pub trait RudimentaryEmitter {\n+    fn emit_rudimentary(&mut self, msg: &str, code: Option<&str>, lvl: Level);\n+}\n+\n+impl<T: RudimentaryEmitter> Emitter for T {\n+    fn emit(&mut self,\n+            msp: &MultiSpan,\n+            msg: &str,\n+            code: Option<&str>,\n+            lvl: Level) {\n+        assert!(msp.primary_span().is_none(), \"Rudimenatry emitters can't handle spans\");\n+        self.emit_rudimentary(msg, code, lvl);\n+    }\n+\n+    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n+        self.emit(&db.span, &db.message, db.code.as_ref().map(|s| &**s), db.level);\n+        for child in &db.children {\n+            assert!(child.render_span.is_none(), \"Rudimentary emitters can't handle render spans\");\n+            self.emit(&child.span, &child.message, None, child.level);\n+        }\n+    }\n+}\n+\n /// maximum number of lines we will print for each error; arbitrary.\n pub const MAX_HIGHLIGHT_LINES: usize = 6;\n \n@@ -57,26 +83,15 @@ pub struct BasicEmitter {\n     dst: Destination,\n }\n \n-impl Emitter for BasicEmitter {\n-    fn emit(&mut self,\n-            msp: &MultiSpan,\n-            msg: &str,\n-            code: Option<&str>,\n-            lvl: Level) {\n-        assert!(msp.primary_span().is_none(), \"BasicEmitter can't handle spans\");\n-\n+impl RudimentaryEmitter for BasicEmitter {\n+    fn emit_rudimentary(&mut self,\n+                        msg: &str,\n+                        code: Option<&str>,\n+                        lvl: Level) {\n         if let Err(e) = print_diagnostic(&mut self.dst, \"\", lvl, msg, code) {\n             panic!(\"failed to print diagnostics: {:?}\", e);\n         }\n     }\n-\n-    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n-        self.emit(&db.span, &db.message, db.code.as_ref().map(|s| &**s), db.level);\n-        for child in &db.children {\n-            assert!(child.render_span.is_none(), \"BasicEmitter can't handle spans\");\n-            self.emit(&child.span, &child.message, None, child.level);\n-        }\n-    }\n }\n \n impl BasicEmitter {"}]}