{"sha": "9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "node_id": "C_kwDOAAsO6NoAKDlhMjNmNjBmOWM4MDFkZDBiNDY4NmNjNzVjNmE5OTc5YmQ4OTI4ZmE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T02:07:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T04:51:23Z"}, "message": "Fix `TyKind::is_simple_path`.\n\nPR #98758 introduced code to avoid redundant assertions in derived code\nlike this:\n```\nlet _: ::core::clone::AssertParamIsClone<u32>;\nlet _: ::core::clone::AssertParamIsClone<u32>;\n```\nBut the predicate `is_simple_path` introduced as part of this failed to\naccount for generic arguments. Therefore the deriving code erroneously\nconsiders types like `Option<bool>` and `Option<f32>` to be the same.\n\nThis commit fixes `is_simple_path`.\n\nFixes #103157.", "tree": {"sha": "448ae0dd90b2574f41263fee1e607869b40058d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448ae0dd90b2574f41263fee1e607869b40058d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "html_url": "https://github.com/rust-lang/rust/commit/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa9d5c971d74aa5bdf6b99253fe4b7db39f9b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa9d5c971d74aa5bdf6b99253fe4b7db39f9b67", "html_url": "https://github.com/rust-lang/rust/commit/dfa9d5c971d74aa5bdf6b99253fe4b7db39f9b67"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "7112c26757717c1044f63a2d21e571a0cbea3e9a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "patch": "@@ -2060,8 +2060,11 @@ impl TyKind {\n     }\n \n     pub fn is_simple_path(&self) -> Option<Symbol> {\n-        if let TyKind::Path(None, Path { segments, .. }) = &self && segments.len() == 1 {\n-            Some(segments[0].ident.name)\n+        if let TyKind::Path(None, Path { segments, .. }) = &self\n+            && let [segment] = &segments[..]\n+            && segment.args.is_none()\n+        {\n+            Some(segment.ident.name)\n         } else {\n             None\n         }"}, {"sha": "56efc2a59ecb83145c464e95a70ffc640de204bb", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "patch": "@@ -799,6 +799,7 @@ impl ::core::clone::Clone for Mixed {\n     fn clone(&self) -> Mixed {\n         let _: ::core::clone::AssertParamIsClone<u32>;\n         let _: ::core::clone::AssertParamIsClone<Option<u32>>;\n+        let _: ::core::clone::AssertParamIsClone<Option<i32>>;\n         *self\n     }\n }\n@@ -866,6 +867,7 @@ impl ::core::cmp::Eq for Mixed {\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n         let _: ::core::cmp::AssertParamIsEq<Option<u32>>;\n+        let _: ::core::cmp::AssertParamIsEq<Option<i32>>;\n     }\n }\n #[automatically_derived]"}, {"sha": "52b4c7898d87bae0e2262ff36f3e330c5d23cdf1", "filename": "src/test/ui/deriving/issue-103157.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs?ref=9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "patch": "@@ -0,0 +1,12 @@\n+// check-fail\n+\n+#[derive(PartialEq, Eq)]\n+pub enum Value {\n+    Boolean(Option<bool>),\n+    Float(Option<f64>), //~ ERROR the trait bound `f64: Eq` is not satisfied\n+}\n+\n+fn main() {\n+    let a = Value::Float(Some(f64::NAN));\n+    assert!(a == a);\n+}"}, {"sha": "ee3528fe1062ddd7f418667689da0e7376c0c352", "filename": "src/test/ui/deriving/issue-103157.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a23f60f9c801dd0b4686cc75c6a9979bd8928fa/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr?ref=9a23f60f9c801dd0b4686cc75c6a9979bd8928fa", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `f64: Eq` is not satisfied\n+  --> $DIR/issue-103157.rs:6:11\n+   |\n+LL | #[derive(PartialEq, Eq)]\n+   |                     -- in this derive macro expansion\n+...\n+LL |     Float(Option<f64>),\n+   |           ^^^^^^^^^^^ the trait `Eq` is not implemented for `f64`\n+   |\n+   = help: the following other types implement trait `Eq`:\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+             u128\n+             u16\n+           and 4 others\n+   = note: required for `Option<f64>` to implement `Eq`\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}