{"sha": "2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "node_id": "C_kwDOAAsO6NoAKDJmMDNjYmRjOGU1MWU2YWY5YjRjYzJlZjk5ODE4ZTgyNmU3NmU4YWM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-27T18:13:39Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-27T18:13:39Z"}, "message": "rustdoc: remove Clean trait impl for ty::GenericParamDef", "tree": {"sha": "b58f5da1f1efa08777d6c7e10cac8bacfdbc2ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58f5da1f1efa08777d6c7e10cac8bacfdbc2ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "html_url": "https://github.com/rust-lang/rust/commit/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea99166253021bd6f8c429b253d694572605bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea99166253021bd6f8c429b253d694572605bca", "html_url": "https://github.com/rust-lang/rust/commit/3ea99166253021bd6f8c429b253d694572605bca"}], "stats": {"total": 81, "additions": 39, "deletions": 42}, "files": [{"sha": "2f2fbc9d4ba8da1903f1aab6f7fc648b63b95531", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "patch": "@@ -470,47 +470,44 @@ fn projection_to_path_segment<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, GenericParamDef> for ty::GenericParamDef {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> GenericParamDef {\n-        let (name, kind) = match self.kind {\n-            ty::GenericParamDefKind::Lifetime => {\n-                (self.name, GenericParamDefKind::Lifetime { outlives: vec![] })\n-            }\n-            ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n-                let default = if has_default {\n-                    Some(clean_middle_ty(cx.tcx.type_of(self.def_id), cx, Some(self.def_id)))\n-                } else {\n-                    None\n-                };\n-                (\n-                    self.name,\n-                    GenericParamDefKind::Type {\n-                        did: self.def_id,\n-                        bounds: vec![], // These are filled in from the where-clauses.\n-                        default: default.map(Box::new),\n-                        synthetic,\n-                    },\n-                )\n-            }\n-            ty::GenericParamDefKind::Const { has_default } => (\n-                self.name,\n-                GenericParamDefKind::Const {\n-                    did: self.def_id,\n-                    ty: Box::new(clean_middle_ty(\n-                        cx.tcx.type_of(self.def_id),\n-                        cx,\n-                        Some(self.def_id),\n-                    )),\n-                    default: match has_default {\n-                        true => Some(Box::new(cx.tcx.const_param_default(self.def_id).to_string())),\n-                        false => None,\n-                    },\n+fn clean_generic_param_def<'tcx>(\n+    def: &ty::GenericParamDef,\n+    cx: &mut DocContext<'tcx>,\n+) -> GenericParamDef {\n+    let (name, kind) = match def.kind {\n+        ty::GenericParamDefKind::Lifetime => {\n+            (def.name, GenericParamDefKind::Lifetime { outlives: vec![] })\n+        }\n+        ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n+            let default = if has_default {\n+                Some(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id)))\n+            } else {\n+                None\n+            };\n+            (\n+                def.name,\n+                GenericParamDefKind::Type {\n+                    did: def.def_id,\n+                    bounds: vec![], // These are filled in from the where-clauses.\n+                    default: default.map(Box::new),\n+                    synthetic,\n                 },\n-            ),\n-        };\n+            )\n+        }\n+        ty::GenericParamDefKind::Const { has_default } => (\n+            def.name,\n+            GenericParamDefKind::Const {\n+                did: def.def_id,\n+                ty: Box::new(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id))),\n+                default: match has_default {\n+                    true => Some(Box::new(cx.tcx.const_param_default(def.def_id).to_string())),\n+                    false => None,\n+                },\n+            },\n+        ),\n+    };\n \n-        GenericParamDef { name, kind }\n-    }\n+    GenericParamDef { name, kind }\n }\n \n fn clean_generic_param<'tcx>(\n@@ -668,7 +665,7 @@ fn clean_ty_generics<'tcx>(\n         .iter()\n         .filter_map(|param| match param.kind {\n             ty::GenericParamDefKind::Lifetime if param.name == kw::UnderscoreLifetime => None,\n-            ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n+            ty::GenericParamDefKind::Lifetime => Some(clean_generic_param_def(param, cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n                     assert_eq!(param.index, 0);\n@@ -678,9 +675,9 @@ fn clean_ty_generics<'tcx>(\n                     impl_trait.insert(param.index.into(), vec![]);\n                     return None;\n                 }\n-                Some(param.clean(cx))\n+                Some(clean_generic_param_def(param, cx))\n             }\n-            ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n+            ty::GenericParamDefKind::Const { .. } => Some(clean_generic_param_def(param, cx)),\n         })\n         .collect::<Vec<GenericParamDef>>();\n "}]}