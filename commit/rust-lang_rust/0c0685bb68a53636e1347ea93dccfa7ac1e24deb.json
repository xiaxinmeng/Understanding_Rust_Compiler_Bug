{"sha": "0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "node_id": "C_kwDOAAsO6NoAKDBjMDY4NWJiNjhhNTM2MzZlMTM0N2VhOTNkY2NmYTdhYzFlMjRkZWI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-27T17:25:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-27T17:25:00Z"}, "message": "review comments: make suggestion more accurate", "tree": {"sha": "6f46e9393e558745f5c220f1f3d350a2b4457f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f46e9393e558745f5c220f1f3d350a2b4457f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "html_url": "https://github.com/rust-lang/rust/commit/0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "html_url": "https://github.com/rust-lang/rust/commit/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "b0cd4a16e9869270546b1a485cb0479ddd7b7626", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "patch": "@@ -1604,7 +1604,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         None,\n                         Some(coercion_error),\n                     );\n-                    fcx.check_for_range_as_method_call(&mut err, expr, found, expected);\n                 }\n \n                 if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {"}, {"sha": "91419395838f9c0d1c1ada4530e02f4c9cb0e3fe", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "patch": "@@ -71,6 +71,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n+        self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1449,14 +1450,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Identify when the user has written `foo..bar()` instead of `foo.bar()`.\n     pub fn check_for_range_as_method_call(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         checked_ty: Ty<'tcx>,\n-        // FIXME: We should do analysis to see if we can synthesize an expresion that produces\n-        // this type for always accurate suggestions, or at least marking the suggestion as\n-        // machine applicable.\n         expected_ty: Ty<'tcx>,\n     ) {\n         if !hir::is_range_literal(expr) {\n@@ -1467,13 +1466,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             [start, end],\n             _,\n         ) = expr.kind else { return; };\n+        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        if let Some(hir::Node::ExprField(_)) = self.tcx.hir().find(parent) {\n+            // Ignore `Foo { field: a..Default::default() }`\n+            return;\n+        }\n         let mut expr = end.expr;\n         while let hir::ExprKind::MethodCall(_, rcvr, ..) = expr.kind {\n             // Getting to the root receiver and asserting it is a fn call let's us ignore cases in\n             // `src/test/ui/methods/issues/issue-90315.stderr`.\n             expr = rcvr;\n         }\n-        let hir::ExprKind::Call(..) = expr.kind else { return; };\n+        let hir::ExprKind::Call(method_name, _) = expr.kind else { return; };\n         let ty::Adt(adt, _) = checked_ty.kind() else { return; };\n         if self.tcx.lang_items().range_struct() != Some(adt.did()) {\n             return;\n@@ -1483,11 +1487,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             return;\n         }\n+        // Check if start has method named end.\n+        let hir::ExprKind::Path(hir::QPath::Resolved(None, p)) = method_name.kind else { return; };\n+        let [hir::PathSegment { ident, .. }] = p.segments else { return; };\n+        let self_ty = self.typeck_results.borrow().expr_ty(start.expr);\n+        let Ok(_pick) = self.probe_for_name(\n+            probe::Mode::MethodCall,\n+            *ident,\n+            probe::IsSuggestion(true),\n+            self_ty,\n+            expr.hir_id,\n+            probe::ProbeScope::AllTraits,\n+        ) else { return; };\n+        let mut sugg = \".\";\n+        let mut span = start.expr.span.between(end.expr.span);\n+        if span.lo() + BytePos(2) == span.hi() {\n+            // There's no space between the start, the range op and the end, suggest removal which\n+            // will be more noticeable than the replacement of `..` with `.`.\n+            span = span.with_lo(span.lo() + BytePos(1));\n+            sugg = \"\";\n+        }\n         err.span_suggestion_verbose(\n-            start.expr.span.between(end.expr.span),\n-            \"you might have meant to write a method call instead of a range\",\n-            \".\".to_string(),\n-            Applicability::MaybeIncorrect,\n+            span,\n+            \"you likely meant to write a method call instead of a range\",\n+            sugg,\n+            Applicability::MachineApplicable,\n         );\n     }\n }"}, {"sha": "7720d87c04b594b27bebb6a2430ed69d8b2e7f85", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "patch": "@@ -3344,10 +3344,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let suggestion = if let Some((start, end)) = this.diagnostic_metadata.in_range\n                     && path[0].ident.span.lo() == end.span.lo()\n                 {\n+                    let mut sugg = \".\";\n+                    let mut span = start.span.between(end.span);\n+                    if span.lo() + BytePos(2) == span.hi() {\n+                        // There's no space between the start, the range op and the end, suggest\n+                        // removal which will look better.\n+                        span = span.with_lo(span.lo() + BytePos(1));\n+                        sugg = \"\";\n+                    }\n                     Some((\n-                        start.span.between(end.span),\n+                        span,\n                         \"you might have meant to write a method call instead of a range\",\n-                        \".\".to_string(),\n+                        sugg.to_string(),\n                         Applicability::MaybeIncorrect,\n                     ))\n                 } else if res.is_none() {"}, {"sha": "ac662edafe6b010d3c10a81524a2920ab48b0986", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs?ref=0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "patch": "@@ -4,14 +4,22 @@ fn as_ref() -> Option<Vec<u8>> {\n struct Type {\n     option: Option<Vec<u8>>\n }\n+trait Trait {\n+    fn foo(&self) -> Vec<u8>;\n+}\n+impl Trait for Option<Vec<u8>> {\n+    fn foo(&self) -> Vec<u8> {\n+        vec![1, 2, 3]\n+    }\n+}\n \n impl Type {\n     fn method(&self) -> Option<Vec<u8>> {\n         self.option..as_ref().map(|x| x)\n         //~^ ERROR E0308\n     }\n-    fn method2(&self) -> Option<Vec<u8>> {\n-        self.option..foo().map(|x| x)\n+    fn method2(&self) -> &u8 {\n+        self.option..foo().get(0)\n         //~^ ERROR E0425\n         //~| ERROR E0308\n     }"}, {"sha": "02db7f81ebdf23c71a8a0785d9bf2753a2b7e91b", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.stderr", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0685bb68a53636e1347ea93dccfa7ac1e24deb/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr?ref=0c0685bb68a53636e1347ea93dccfa7ac1e24deb", "patch": "@@ -1,16 +1,17 @@\n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/method-access-to-range-literal-typo.rs:14:22\n+  --> $DIR/method-access-to-range-literal-typo.rs:22:22\n    |\n-LL |         self.option..foo().map(|x| x)\n+LL |         self.option..foo().get(0)\n    |                      ^^^ not found in this scope\n    |\n help: you might have meant to write a method call instead of a range\n    |\n-LL |         self.option.foo().map(|x| x)\n-   |                    ~\n+LL -         self.option..foo().get(0)\n+LL +         self.option.foo().get(0)\n+   |\n \n error[E0308]: mismatched types\n-  --> $DIR/method-access-to-range-literal-typo.rs:10:9\n+  --> $DIR/method-access-to-range-literal-typo.rs:18:9\n    |\n LL |     fn method(&self) -> Option<Vec<u8>> {\n    |                         --------------- expected `Option<Vec<u8>>` because of return type\n@@ -19,25 +20,27 @@ LL |         self.option..as_ref().map(|x| x)\n    |\n    = note: expected enum `Option<_>`\n             found struct `std::ops::Range<Option<_>>`\n-help: you might have meant to write a method call instead of a range\n+help: you likely meant to write a method call instead of a range\n+   |\n+LL -         self.option..as_ref().map(|x| x)\n+LL +         self.option.as_ref().map(|x| x)\n    |\n-LL |         self.option.as_ref().map(|x| x)\n-   |                    ~\n \n error[E0308]: mismatched types\n-  --> $DIR/method-access-to-range-literal-typo.rs:14:9\n+  --> $DIR/method-access-to-range-literal-typo.rs:22:9\n    |\n-LL |     fn method2(&self) -> Option<Vec<u8>> {\n-   |                          --------------- expected `Option<Vec<u8>>` because of return type\n-LL |         self.option..foo().map(|x| x)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `Range`\n+LL |     fn method2(&self) -> &u8 {\n+   |                          --- expected `&u8` because of return type\n+LL |         self.option..foo().get(0)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&u8`, found struct `Range`\n    |\n-   = note: expected enum `Option<_>`\n-            found struct `std::ops::Range<Option<_>>`\n-help: you might have meant to write a method call instead of a range\n+   = note: expected reference `&u8`\n+                 found struct `std::ops::Range<Option<Vec<u8>>>`\n+help: you likely meant to write a method call instead of a range\n+   |\n+LL -         self.option..foo().get(0)\n+LL +         self.option.foo().get(0)\n    |\n-LL |         self.option.foo().map(|x| x)\n-   |                    ~\n \n error: aborting due to 3 previous errors\n "}]}