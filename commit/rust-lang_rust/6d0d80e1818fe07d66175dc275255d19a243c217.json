{"sha": "6d0d80e1818fe07d66175dc275255d19a243c217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGQ4MGUxODE4ZmUwN2Q2NjE3NWRjMjc1MjU1ZDE5YTI0M2MyMTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-15T12:19:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T12:19:20Z"}, "message": "Rollup merge of #87134 - BoxyUwU:cgd-self-ty-error, r=lcnr\n\nMake SelfInTyParamDefault wording not be specific to type defaults\n\nr? ```@lcnr```", "tree": {"sha": "c1c023fc55fb68077ba659de9db1029e2500e04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c023fc55fb68077ba659de9db1029e2500e04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0d80e1818fe07d66175dc275255d19a243c217", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8CfJCRBK7hj4Ov3rIwAASBYIAJlzuqSWG+sh6G1Yp7OY20bl\notVcvTusI+0DlkWcpR65HeVEo8Zjuk9RsT1LkXhrC4IIT5i1tHMZ5kBvgmXTNFxv\nK4kOFFJ84uv0igOUP6HNbSn5hnHMYCTO5hiqQjjMh9TB+DoVnjZumEfN2HrDM/bC\n9ehN+Xs0kKhURyt1DTg2qgjeujLE66YLtwwawEob3pGB2gCwjQOenPJGOIeC3+WV\nIKF9tlfh1QNZwDxGrgtifLQVGmEB1z9nVx6cS613y9uNRXjBolRKrywCCx2srDcO\nXhFxLKw7FNw8FJuiscSNVzlayedDB/YRLvQkBxO0aR8j0oMtfpic9CBNj8LWy1o=\n=Io0D\n-----END PGP SIGNATURE-----\n", "payload": "tree c1c023fc55fb68077ba659de9db1029e2500e04f\nparent dc464f20a1315a3d614cd06e9baf49aec0f7bd60\nparent b3b6b66815ed20531a7a32e9c400a8d40692f9bf\nauthor Yuki Okushi <jtitor@2k36.org> 1626351560 +0900\ncommitter GitHub <noreply@github.com> 1626351560 +0900\n\nRollup merge of #87134 - BoxyUwU:cgd-self-ty-error, r=lcnr\n\nMake SelfInTyParamDefault wording not be specific to type defaults\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d80e1818fe07d66175dc275255d19a243c217", "html_url": "https://github.com/rust-lang/rust/commit/6d0d80e1818fe07d66175dc275255d19a243c217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d80e1818fe07d66175dc275255d19a243c217/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc464f20a1315a3d614cd06e9baf49aec0f7bd60", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc464f20a1315a3d614cd06e9baf49aec0f7bd60", "html_url": "https://github.com/rust-lang/rust/commit/dc464f20a1315a3d614cd06e9baf49aec0f7bd60"}, {"sha": "b3b6b66815ed20531a7a32e9c400a8d40692f9bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b6b66815ed20531a7a32e9c400a8d40692f9bf", "html_url": "https://github.com/rust-lang/rust/commit/b3b6b66815ed20531a7a32e9c400a8d40692f9bf"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "7439cd9a0fe3dc50b99b8c4aca5ded24161db04a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -502,14 +502,14 @@ impl<'a> Resolver<'a> {\n \n                 err\n             }\n-            ResolutionError::SelfInTyParamDefault => {\n+            ResolutionError::SelfInGenericParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0735,\n-                    \"type parameters cannot use `Self` in their defaults\"\n+                    \"generic parameters cannot use `Self` in their defaults\"\n                 );\n-                err.span_label(span, \"`Self` in type parameter default\".to_string());\n+                err.span_label(span, \"`Self` in generic parameter default\".to_string());\n                 err\n             }\n             ResolutionError::UnreachableLabel { name, definition_span, suggestion } => {"}, {"sha": "fb2eb749e118f489fc547ae36f07d1923eb26fef", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -249,7 +249,7 @@ enum ResolutionError<'a> {\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n     /// Error E0735: generic parameters with a default cannot use `Self`\n-    SelfInTyParamDefault,\n+    SelfInGenericParamDefault,\n     /// Error E0767: use of unreachable label\n     UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },\n }\n@@ -2643,7 +2643,7 @@ impl<'a> Resolver<'a> {\n         if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n-                    ResolutionError::SelfInTyParamDefault\n+                    ResolutionError::SelfInGenericParamDefault\n                 } else {\n                     ResolutionError::ForwardDeclaredGenericParam\n                 };"}, {"sha": "9af84439252c7e0c3fb80d45510aadd40a8e1f05", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Struct<const N: usize = { Self; 10 }>;\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Enum<const N: usize = { Self; 10 }> { }\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+union Union<const N: usize = { Self; 10 }> { not_empty: () }\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+fn main() {\n+    let _: Struct;\n+    let _: Enum;\n+    let _: Union;\n+}"}, {"sha": "5dfec2fcb736f5fc3367b675ab5920d2d84a5c2b", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -0,0 +1,21 @@\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:3:34\n+   |\n+LL | struct Struct<const N: usize = { Self; 10 }>;\n+   |                                  ^^^^ `Self` in generic parameter default\n+\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:6:30\n+   |\n+LL | enum Enum<const N: usize = { Self; 10 }> { }\n+   |                              ^^^^ `Self` in generic parameter default\n+\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:9:32\n+   |\n+LL | union Union<const N: usize = { Self; 10 }> { not_empty: () }\n+   |                                ^^^^ `Self` in generic parameter default\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0735`."}, {"sha": "12db143e474492a8e79a72869082feadbc303502", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -11,25 +11,25 @@\n // compatibility concern.\n \n struct Snobound<'a, P = Self> { x: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n // Disallowing `Self` in defaults sidesteps need to check the bounds\n // on the defaults in cases like these.\n \n struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n fn demo_usages() {\n     // An ICE means you only get the error from the first line of the"}, {"sha": "f3a550801b9bd57084de7633e165b38eb6f0d223", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d80e1818fe07d66175dc275255d19a243c217/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr?ref=6d0d80e1818fe07d66175dc275255d19a243c217", "patch": "@@ -1,38 +1,38 @@\n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:13:25\n    |\n LL | struct Snobound<'a, P = Self> { x: Option<&'a P> }\n-   |                         ^^^^ `Self` in type parameter default\n+   |                         ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:16:23\n    |\n LL | enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n-   |                       ^^^^ `Self` in type parameter default\n+   |                       ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:19:24\n    |\n LL | union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n-   |                        ^^^^ `Self` in type parameter default\n+   |                        ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:25:31\n    |\n LL | struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n-   |                               ^^^^ `Self` in type parameter default\n+   |                               ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:28:29\n    |\n LL | enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n-   |                             ^^^^ `Self` in type parameter default\n+   |                             ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:31:30\n    |\n LL | union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n-   |                              ^^^^ `Self` in type parameter default\n+   |                              ^^^^ `Self` in generic parameter default\n \n error: aborting due to 6 previous errors\n "}]}