{"sha": "004981647f6f7bd2e70808651e897b1e6b719bb4", "node_id": "C_kwDOAAsO6NoAKDAwNDk4MTY0N2Y2ZjdiZDJlNzA4MDg2NTFlODk3YjFlNmI3MTliYjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T17:04:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T17:04:54Z"}, "message": "Auto merge of #10622 - blyxyas:book-lint_passes, r=llogiq\n\nClippy Book Chapter Updates Reborn: Lint Passes\n\nThis PR adds a new chapter to the book: \"Lint passes\". No major changes apart from some re-phrasing, fixing typos... etc.\n\n## Notes\n\n- Requires #10595 to be merged before this one (Or else, a link will be broken).\n- To talk about the whole project, please use the tracking issue for the project #10597 (It also contains a timeline, discussions and more information)\n\nchangelog: Add a new \"Lint passes\" chapter to the book\nr? `@flip1995`", "tree": {"sha": "4f49938b9876ad8b5dc40c2f64a5ef12f2374c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f49938b9876ad8b5dc40c2f64a5ef12f2374c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004981647f6f7bd2e70808651e897b1e6b719bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004981647f6f7bd2e70808651e897b1e6b719bb4", "html_url": "https://github.com/rust-lang/rust/commit/004981647f6f7bd2e70808651e897b1e6b719bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004981647f6f7bd2e70808651e897b1e6b719bb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2edd42b24307d4ad931117642380872ebd38372", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2edd42b24307d4ad931117642380872ebd38372", "html_url": "https://github.com/rust-lang/rust/commit/b2edd42b24307d4ad931117642380872ebd38372"}, {"sha": "b4732679fc63b3c66d830c3b7edf8bcbb84aff12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4732679fc63b3c66d830c3b7edf8bcbb84aff12", "html_url": "https://github.com/rust-lang/rust/commit/b4732679fc63b3c66d830c3b7edf8bcbb84aff12"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "058b9fa3233528bdc0e3b31fdfa53037f328dd5a", "filename": "book/src/development/lint_passes.md", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/004981647f6f7bd2e70808651e897b1e6b719bb4/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "raw_url": "https://github.com/rust-lang/rust/raw/004981647f6f7bd2e70808651e897b1e6b719bb4/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Flint_passes.md?ref=004981647f6f7bd2e70808651e897b1e6b719bb4", "patch": "@@ -0,0 +1,136 @@\n+# Lint passes\n+\n+Before working on the logic of a new lint, there is an important decision\n+that every Clippy developers must make: to use\n+[`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n+\n+In short, the `LateLintPass` has access to type and symbol information while the\n+`EarlyLintPass` doesn't. If you don't need access to type information, use the\n+`EarlyLintPass`.\n+\n+Let us expand on these two traits more below.\n+\n+## `EarlyLintPass`\n+\n+If you examine the documentation on [`EarlyLintPass`][early_lint_pass] closely,\n+you'll see that every method defined for this trait utilizes a\n+[`EarlyContext`][early_context]. In `EarlyContext`'s documentation, it states:\n+\n+> Context for lint checking of the AST, after expansion, before lowering to HIR.\n+\n+Voil\u00e0. `EarlyLintPass` works only on the Abstract Syntax Tree (AST) level.\n+And AST is generated during the [lexing and parsing][lexing_and_parsing] phase\n+of code compilation. Therefore, it doesn't know what a symbol means or information about types, and it should\n+be our trait choice for a new lint if the lint only deals with syntax-related issues.\n+\n+While linting speed has not been a concern for Clippy,\n+the `EarlyLintPass` is faster, and it should be your choice\n+if you know for sure a lint does not need type information.\n+\n+As a reminder, run the following command to generate boilerplate for lints\n+that use `EarlyLintPass`:\n+\n+```sh\n+$ cargo dev new_lint --name=<your_new_lint> --pass=early --category=<your_category_choice>\n+```\n+\n+### Example for `EarlyLintPass`\n+\n+Take a look at the following code:\n+\n+```rust\n+let x = OurUndefinedType;\n+x.non_existing_method();\n+```\n+\n+From the AST perspective, both lines are \"grammatically\" correct.\n+The assignment uses a `let` and ends with a semicolon. The invocation\n+of a method looks fine, too. As programmers, we might raise a few\n+questions already, but the parser is okay with it. This is what we\n+mean when we say `EarlyLintPass` deals with only syntax on the AST level.\n+\n+Alternatively, think of the `foo_functions` lint we mentioned in\n+[define new lints](define_lints.md#name-the-lint) chapter.\n+\n+We want the `foo_functions` lint to detect functions with `foo` as their name.\n+Writing a lint that only checks for the name of a function means that we only\n+work with the AST and don't have to access the type system at all (the type system is where\n+`LateLintPass` comes into the picture).\n+\n+## `LateLintPass`\n+\n+In contrast to `EarlyLintPass`, `LateLintPass` contains type information.\n+\n+If you examine the documentation on [`LateLintPass`][late_lint_pass] closely,\n+you see that every method defined in this trait utilizes a\n+[`LateContext`][late_context].\n+\n+In `LateContext`'s documentation we will find methods that\n+deal with type-checking, which do not exist in `EarlyContext`, such as:\n+\n+- [`maybe_typeck_results`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.maybe_typeck_results)\n+- [`typeck_results`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.typeck_results)\n+\n+### Example for `LateLintPass`\n+\n+Let us take a look with the following example:\n+\n+```rust\n+let x = OurUndefinedType;\n+x.non_existing_method();\n+```\n+\n+These two lines of code are syntactically correct code from the perspective\n+of the AST. We have an assignment and invoke a method on the variable that\n+is of a type. Grammatically, everything is in order for the parser.\n+\n+However, going down a level and looking at the type information,\n+the compiler will notice that both `OurUndefinedType` and `non_existing_method()`\n+**are undefined**.\n+\n+As Clippy developers, to access such type information, we must implement\n+`LateLintPass` on our lint.\n+When you browse through Clippy's lints, you will notice that almost every lint\n+is implemented in a `LateLintPass`, specifically because we often need to check\n+not only for syntactic issues but also type information.\n+\n+Another limitation of the `EarlyLintPass` is that the nodes are only identified\n+by their position in the AST. This means that you can't just get an `id` and\n+request a certain node. For most lints that is fine, but we have some lints\n+that require the inspection of other nodes, which is easier at the HIR level.\n+In these cases, `LateLintPass` is the better choice.\n+\n+As a reminder, run the following command to generate boilerplate for lints\n+that use `LateLintPass`:\n+\n+```sh\n+$ cargo dev new_lint --name=<your_new_lint> --pass=late --category=<your_category_choice>\n+```\n+\n+## Additional Readings for Beginners\n+\n+If a dear reader of this documentation has never taken a class on compilers\n+and interpreters, it might be confusing as to why AST level deals with only\n+the language's syntax. And some readers might not even understand what lexing,\n+parsing, and AST mean.\n+\n+This documentation serves by no means as a crash course on compilers or language design.\n+And for details specifically related to Rust, the [Rustc Development Guide][rustc_dev_guide]\n+is a far better choice to peruse.\n+\n+The [Syntax and AST][ast] chapter and the [High-Level IR][hir] chapter are\n+great introduction to the concepts mentioned in this chapter.\n+\n+Some readers might also find the [introductory chapter][map_of_territory] of\n+Robert Nystrom's _Crafting Interpreters_ a helpful overview of compiled and\n+interpreted languages before jumping back to the Rustc guide.\n+\n+[ast]: https://rustc-dev-guide.rust-lang.org/syntax-intro.html\n+[early_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.EarlyContext.html\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[hir]: https://rustc-dev-guide.rust-lang.org/hir.html\n+[late_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n+[lexing_and_parsing]: https://rustc-dev-guide.rust-lang.org/overview.html#lexing-and-parsing\n+[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/\n+[map_of_territory]: https://craftinginterpreters.com/a-map-of-the-territory.html"}]}