{"sha": "0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzVlZThiNTViZWNkMTRjYTczYWQ0MjBiNzMxMWZiNmU5ZGZhZWI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-01T15:02:47Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-01T15:02:47Z"}, "message": "build-manifest: move generating a target to the manifest mod", "tree": {"sha": "7bc9b9520f1658fc43736ac06a608be70bf59548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc9b9520f1658fc43736ac06a608be70bf59548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl9176AACgkQPgar6Auq\n8Zwr6Q//VSmHQ8yvpaNBA49Zh//P0ew8YJiUeULqyXD8xZg2Rl5T7ZxmnnTevxM1\nYLtze5PQ1u0LvNugnP8t3ZrAC5TCG+DrCqWyfmUvTpK0E7N6LtnQ6MLFZRbijp77\nIAOoATSKiSQ2JORv10Abr1y6I6Pa6h5EIMwArQZyCBrQwE6pqhthQh+Pnr6TmTxo\nJRJnLgqcSPNjZw/kXO9cp6QbQFwS2FfiHXohq6P5ugCgJ3DB6v458NNn+du0UeNN\n3Oeibkt9Mo5doTkHGAURnkhYv63Ax8KnEpm+UWh5u9u+c73C+/kt+Mup1LE85n3r\n0VZZ4gLw/GAPY6Onf4eNeh8H3zPDqARPQgUIoo52APJuJPKmegSTkz0SfgipoEki\n7jj8ZU6yNMZH4FGlV/7DlABY72UpbHUbSAVI3CgYeplwv38MqKkRjkatxHL4o9tW\nz5NcS2cX1zg70JzSDoIpY60+1PEkAqCHTF/eqhCz4lBN4pBX3L0Gm99hEFReQY8H\nSGaT3HNTJQNR9hCSBn6jv98HvIisAA/l20ZK4T0Jq1TvhJDso3TnShM4R4kfzhn5\nptldJTsBuDKgp/sox2AF8NrJmigOuuNMjO/PddUHonTprhQshEQcVDkFLk8N8E/m\niMqmnkv3swSDDfe8czvchL6dANfPiOVneodz/lrXDMeNSixelqg=\n=5vg/\n-----END PGP SIGNATURE-----", "payload": "tree 7bc9b9520f1658fc43736ac06a608be70bf59548\nparent 6e15975540e46582fbc01110d8d4411c5490dc4b\nauthor Pietro Albini <pietro@pietroalbini.org> 1601564567 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1601564567 +0200\n\nbuild-manifest: move generating a target to the manifest mod\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "html_url": "https://github.com/rust-lang/rust/commit/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e15975540e46582fbc01110d8d4411c5490dc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e15975540e46582fbc01110d8d4411c5490dc4b", "html_url": "https://github.com/rust-lang/rust/commit/6e15975540e46582fbc01110d8d4411c5490dc4b"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "5f01b46d70d54ce320507c70ba6b10188a3e4de0", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 19, "deletions": 40, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "patch": "@@ -9,8 +9,7 @@ mod versions;\n \n use crate::manifest::{Component, Manifest, Package, Rename, Target};\n use crate::versions::{PkgType, Versions};\n-use std::collections::BTreeMap;\n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, HashMap};\n use std::env;\n use std::fs::{self, File};\n use std::io::{self, Read, Write};\n@@ -385,9 +384,12 @@ impl Builder {\n \n     fn target_host_combination(&mut self, host: &str, manifest: &Manifest) -> Option<Target> {\n         let filename = self.versions.tarball_name(&PkgType::Rust, host).unwrap();\n-        let digest = self.digests.remove(&filename)?;\n-        let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n-        let xz_digest = self.digests.remove(&xz_filename);\n+\n+        let mut target = Target::from_compressed_tar(self, &filename);\n+        if !target.available {\n+            return None;\n+        }\n+\n         let mut components = Vec::new();\n         let mut extensions = Vec::new();\n \n@@ -443,15 +445,9 @@ impl Builder {\n         extensions.retain(&has_component);\n         components.retain(&has_component);\n \n-        Some(Target {\n-            available: true,\n-            url: Some(self.url(&filename)),\n-            hash: Some(digest),\n-            xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n-            xz_hash: xz_digest,\n-            components: Some(components),\n-            extensions: Some(extensions),\n-        })\n+        target.components = Some(components);\n+        target.extensions = Some(extensions);\n+        Some(target)\n     }\n \n     fn profile(\n@@ -489,37 +485,19 @@ impl Builder {\n         let targets = targets\n             .iter()\n             .map(|name| {\n-                if is_present {\n-                    // The component generally exists, but it might still be missing for this target.\n+                let target = if is_present {\n                     let filename = self\n                         .versions\n                         .tarball_name(&PkgType::from_component(pkgname), name)\n                         .unwrap();\n-                    let digest = match self.digests.remove(&filename) {\n-                        Some(digest) => digest,\n-                        // This component does not exist for this target -- skip it.\n-                        None => return (name.to_string(), Target::unavailable()),\n-                    };\n-                    let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n-                    let xz_digest = self.digests.remove(&xz_filename);\n-\n-                    (\n-                        name.to_string(),\n-                        Target {\n-                            available: true,\n-                            url: Some(self.url(&filename)),\n-                            hash: Some(digest),\n-                            xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n-                            xz_hash: xz_digest,\n-                            components: None,\n-                            extensions: None,\n-                        },\n-                    )\n+\n+                    Target::from_compressed_tar(self, &filename)\n                 } else {\n                     // If the component is not present for this build add it anyway but mark it as\n                     // unavailable -- this way rustup won't allow upgrades without --force\n-                    (name.to_string(), Target::unavailable())\n-                }\n+                    Target::unavailable()\n+                };\n+                (name.to_string(), target)\n             })\n             .collect();\n \n@@ -533,8 +511,9 @@ impl Builder {\n         );\n     }\n \n-    fn url(&self, filename: &str) -> String {\n-        format!(\"{}/{}/{}\", self.s3_address, self.date, filename)\n+    fn url(&self, path: &Path) -> String {\n+        let file_name = path.file_name().unwrap().to_str().unwrap();\n+        format!(\"{}/{}/{}\", self.s3_address, self.date, file_name)\n     }\n \n     fn hash(&self, path: &Path) -> String {"}, {"sha": "2a5755c1bf1da2dc32df48454123e53826331768", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "patch": "@@ -1,5 +1,7 @@\n+use crate::Builder;\n use serde::Serialize;\n use std::collections::BTreeMap;\n+use std::path::{Path, PathBuf};\n \n #[derive(Serialize)]\n #[serde(rename_all = \"kebab-case\")]\n@@ -35,6 +37,40 @@ pub(crate) struct Target {\n }\n \n impl Target {\n+    pub(crate) fn from_compressed_tar(builder: &Builder, base_path: &str) -> Self {\n+        let base_path = builder.input.join(base_path);\n+        let gz = Self::tarball_variant(&base_path, \"gz\");\n+        let xz = Self::tarball_variant(&base_path, \"xz\");\n+\n+        if gz.is_none() {\n+            return Self::unavailable();\n+        }\n+\n+        Self {\n+            available: true,\n+            components: None,\n+            extensions: None,\n+            // .gz\n+            url: gz.as_ref().map(|path| builder.url(path)),\n+            hash: gz.map(|path| Self::digest_of(builder, &path)),\n+            // .xz\n+            xz_url: xz.as_ref().map(|path| builder.url(path)),\n+            xz_hash: xz.map(|path| Self::digest_of(builder, &path)),\n+        }\n+    }\n+\n+    fn tarball_variant(base: &Path, ext: &str) -> Option<PathBuf> {\n+        let mut path = base.to_path_buf();\n+        path.set_extension(ext);\n+        if path.is_file() { Some(path) } else { None }\n+    }\n+\n+    fn digest_of(builder: &Builder, path: &Path) -> String {\n+        // TEMPORARY CODE -- DON'T REVIEW :)\n+        let file_name = path.file_name().unwrap().to_str().unwrap();\n+        builder.digests.get(file_name).unwrap().clone()\n+    }\n+\n     pub(crate) fn unavailable() -> Self {\n         Self::default()\n     }"}]}