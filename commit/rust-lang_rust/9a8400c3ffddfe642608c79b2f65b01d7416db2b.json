{"sha": "9a8400c3ffddfe642608c79b2f65b01d7416db2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODQwMGMzZmZkZGZlNjQyNjA4Yzc5YjJmNjViMDFkNzQxNmRiMmI=", "commit": {"author": {"name": "toidiu", "email": "apoorv@toidiu.com", "date": "2018-05-17T21:42:02Z"}, "committer": {"name": "toidiu", "email": "apoorv@toidiu.com", "date": "2018-05-24T04:01:35Z"}, "message": "implement Ord for OutlivesPredicate and other types", "tree": {"sha": "d954afa48e781965f56f4db8f0d19c2a89448d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d954afa48e781965f56f4db8f0d19c2a89448d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a8400c3ffddfe642608c79b2f65b01d7416db2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8400c3ffddfe642608c79b2f65b01d7416db2b", "html_url": "https://github.com/rust-lang/rust/commit/9a8400c3ffddfe642608c79b2f65b01d7416db2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a8400c3ffddfe642608c79b2f65b01d7416db2b/comments", "author": {"login": "toidiu", "id": 4350690, "node_id": "MDQ6VXNlcjQzNTA2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4350690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidiu", "html_url": "https://github.com/toidiu", "followers_url": "https://api.github.com/users/toidiu/followers", "following_url": "https://api.github.com/users/toidiu/following{/other_user}", "gists_url": "https://api.github.com/users/toidiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidiu/subscriptions", "organizations_url": "https://api.github.com/users/toidiu/orgs", "repos_url": "https://api.github.com/users/toidiu/repos", "events_url": "https://api.github.com/users/toidiu/events{/privacy}", "received_events_url": "https://api.github.com/users/toidiu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toidiu", "id": 4350690, "node_id": "MDQ6VXNlcjQzNTA2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4350690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidiu", "html_url": "https://github.com/toidiu", "followers_url": "https://api.github.com/users/toidiu/followers", "following_url": "https://api.github.com/users/toidiu/following{/other_user}", "gists_url": "https://api.github.com/users/toidiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidiu/subscriptions", "organizations_url": "https://api.github.com/users/toidiu/orgs", "repos_url": "https://api.github.com/users/toidiu/repos", "events_url": "https://api.github.com/users/toidiu/events{/privacy}", "received_events_url": "https://api.github.com/users/toidiu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1977849257436cf74a3bbee94ca2860896853b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/1977849257436cf74a3bbee94ca2860896853b81", "html_url": "https://github.com/rust-lang/rust/commit/1977849257436cf74a3bbee94ca2860896853b81"}], "stats": {"total": 134, "additions": 100, "deletions": 34}, "files": [{"sha": "2b0e17bfb5cdc37aa110e59b011a95e6737c19fa", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -930,7 +930,7 @@ pub enum PatKind {\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n@@ -1523,7 +1523,7 @@ pub struct Destination {\n     pub target_id: Result<NodeId, LoopIdError>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum GeneratorMovability {\n     Static,\n     Movable,\n@@ -1775,7 +1775,7 @@ pub enum IsAuto {\n     No\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq,PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,"}, {"sha": "d7f116705113e02e28730c06110fde0dc0252bb4", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::sync::Lrc;\n \n pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n \n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n pub enum ConstVal<'tcx> {\n     Unevaluated(DefId, &'tcx Substs<'tcx>),\n     Value(ConstValue<'tcx>),"}, {"sha": "48954b1f0aa7ed55e66c053281135c72d6fb7d75", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -109,7 +109,7 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n \n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub struct MemoryPointer {\n     pub alloc_id: AllocId,\n     pub offset: Size,\n@@ -335,7 +335,7 @@ impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n     }\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct Allocation {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer\n@@ -384,7 +384,7 @@ impl Allocation {\n \n impl<'tcx> ::serialize::UseSpecializedDecodable for &'tcx Allocation {}\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Relocations(SortedMap<Size, AllocId>);\n \n impl Relocations {\n@@ -455,7 +455,7 @@ pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result\n type Block = u64;\n const BLOCK_SIZE: u64 = 64;\n \n-#[derive(Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: Size,"}, {"sha": "7ad6826b2f678842b374dace9ed0e81b27461b75", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -7,7 +7,7 @@ use super::{EvalResult, MemoryPointer, PointerArithmetic, Allocation};\n \n /// Represents a constant value in Rust. ByVal and ByValPair are optimizations which\n /// matches Value's optimizations for easy conversions between these two types\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs which use PrimVal::Undef\n     ByVal(PrimVal),\n@@ -76,7 +76,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// For optimization of a few very common cases, there is also a representation for a pair of\n /// primitive values (`ByValPair`). It allows Miri to avoid making allocations for checked binary\n /// operations and fat pointers. This idea was taken from rustc's codegen.\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub enum Value {\n     ByRef(Pointer, Align),\n     ByVal(PrimVal),\n@@ -99,7 +99,7 @@ impl<'tcx> ty::TypeFoldable<'tcx> for Value {\n /// I (@oli-obk) believe it is less easy to mix up generic primvals and primvals that are just\n /// the representation of pointers. Also all the sites that convert between primvals and pointers\n /// are explicit now (and rare!)\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub struct Pointer {\n     pub primval: PrimVal,\n }\n@@ -194,7 +194,7 @@ impl ::std::convert::From<MemoryPointer> for Pointer {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `PrimVal` can either represent the raw bytes\n /// of a simple value, a pointer into another `Allocation`, or be undefined.\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub enum PrimVal {\n     /// The raw bytes of a simple value.\n     Bytes(u128),"}, {"sha": "4507da1c698e9125f26e8f02eaa51c53f0155a82", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -39,7 +39,7 @@ use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n-use std::cmp;\n+use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n@@ -491,6 +491,18 @@ pub struct TyS<'tcx> {\n     region_depth: u32,\n }\n \n+impl<'tcx> Ord for TyS<'tcx> {\n+    fn cmp(&self, other: &TyS<'tcx>) -> Ordering {\n+        self.sty.cmp(&other.sty)\n+    }\n+}\n+\n+impl<'tcx> PartialOrd for TyS<'tcx> {\n+    fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {\n+        Some(self.sty.cmp(&other.sty))\n+    }\n+}\n+\n impl<'tcx> PartialEq for TyS<'tcx> {\n     #[inline]\n     fn eq(&self, other: &TyS<'tcx>) -> bool {\n@@ -578,6 +590,22 @@ impl <'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for Ty<'tcx> {\n #[derive(Debug, RustcEncodable)]\n pub struct Slice<T>([T]);\n \n+impl<T> Ord for Slice<T> where T: Ord {\n+    fn cmp(&self, other: &Slice<T>) -> Ordering {\n+        if self == other { Ordering::Equal } else {\n+            <[T] as Ord>::cmp(&self.0, &other.0)\n+        }\n+    }\n+}\n+\n+impl<T> PartialOrd for Slice<T> where T: PartialOrd {\n+    fn partial_cmp(&self, other: &Slice<T>) -> Option<Ordering> {\n+        if self == other { Some(Ordering::Equal) } else {\n+            <[T] as PartialOrd>::partial_cmp(&self.0, &other.0)\n+        }\n+    }\n+}\n+\n impl<T> PartialEq for Slice<T> {\n     #[inline]\n     fn eq(&self, other: &Slice<T>) -> bool {\n@@ -1104,7 +1132,7 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct OutlivesPredicate<A,B>(pub A, pub B); // `A : B`\n pub type PolyOutlivesPredicate<A,B> = ty::Binder<OutlivesPredicate<A,B>>;\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>,\n@@ -1606,6 +1634,20 @@ pub struct AdtDef {\n     pub repr: ReprOptions,\n }\n \n+impl PartialOrd for AdtDef {\n+    fn partial_cmp(&self, other: &AdtDef) -> Option<Ordering> {\n+        Some(self.cmp(&other))\n+    }\n+}\n+\n+/// There should be only one AdtDef for each `did`, therefore\n+/// it is fine to implement `Ord` only based on `did`.\n+impl Ord for AdtDef {\n+    fn cmp(&self, other: &AdtDef) -> Ordering {\n+        self.did.cmp(&other.did)\n+    }\n+}\n+\n impl PartialEq for AdtDef {\n     // AdtDef are always interned and this is part of TyS equality\n     #[inline]"}, {"sha": "faf93ab30b70af25985d168bdd5641b4fd77a797", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -34,7 +34,7 @@ use hir;\n use self::InferTy::*;\n use self::TypeVariants::*;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -80,7 +80,7 @@ impl BoundRegion {\n \n /// NB: If you change this, you'll probably want to change the corresponding\n /// AST structure in libsyntax/ast.rs as well.\n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum TypeVariants<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     TyBool,\n@@ -268,7 +268,7 @@ pub enum TypeVariants<'tcx> {\n ///\n /// It'd be nice to split this struct into ClosureSubsts and\n /// GeneratorSubsts, I believe. -nmatsakis\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with the types of the upvars.\n@@ -351,7 +351,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: &'tcx Substs<'tcx>,\n }\n@@ -484,7 +484,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum ExistentialPredicate<'tcx> {\n     /// e.g. Iterator\n     Trait(ExistentialTraitRef<'tcx>),\n@@ -660,7 +660,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n ///\n /// The substitutions don't include the erased `Self`, only trait\n /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n@@ -728,7 +728,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound regions, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Binder<T>(T);\n \n impl<T> Binder<T> {\n@@ -834,7 +834,7 @@ impl<T> Binder<T> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: &'tcx Substs<'tcx>,\n@@ -902,7 +902,7 @@ impl<'tcx> PolyGenSig<'tcx> {\n /// - `inputs` is the list of arguments and their modes.\n /// - `output` is the return type.\n /// - `variadic` indicates whether this is a variadic function. (only true for foreign fns)\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx Slice<Ty<'tcx>>,\n     pub variadic: bool,\n@@ -946,7 +946,7 @@ impl<'tcx> PolyFnSig<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ParamTy {\n     pub idx: u32,\n     pub name: InternedString,\n@@ -1148,17 +1148,17 @@ pub struct EarlyBoundRegion {\n     pub name: InternedString,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct TyVid {\n     pub index: u32,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct IntVid {\n     pub index: u32,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct FloatVid {\n     pub index: u32,\n }\n@@ -1169,7 +1169,7 @@ newtype_index!(RegionVid\n         DEBUG_FORMAT = custom,\n     });\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),\n@@ -1189,7 +1189,7 @@ pub enum InferTy {\n newtype_index!(CanonicalVar);\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n@@ -1758,7 +1758,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n }\n \n /// Typed constant value.\n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n "}, {"sha": "2e3c6df9754dfeb82fee896d283e266611ec43d1", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -20,6 +20,7 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::array_vec::ArrayVec;\n \n use core::intrinsics;\n+use std::cmp::Ordering;\n use std::fmt;\n use std::marker::PhantomData;\n use std::mem;\n@@ -70,6 +71,28 @@ impl<'tcx> UnpackedKind<'tcx> {\n     }\n }\n \n+impl<'tcx> Ord for Kind<'tcx> {\n+    fn cmp(&self, other: &Kind) -> Ordering {\n+        match (self.unpack(), other.unpack()) {\n+            (UnpackedKind::Type(_), UnpackedKind::Lifetime(_)) => Ordering::Greater,\n+\n+            (UnpackedKind::Type(ty1), UnpackedKind::Type(ty2)) => {\n+                ty1.sty.cmp(&ty2.sty)\n+            }\n+\n+            (UnpackedKind::Lifetime(reg1), UnpackedKind::Lifetime(reg2)) => reg1.cmp(reg2),\n+\n+            (UnpackedKind::Lifetime(_), UnpackedKind::Type(_))  => Ordering::Less,\n+        }\n+    }\n+}\n+\n+impl<'tcx> PartialOrd for Kind<'tcx> {\n+    fn partial_cmp(&self, other: &Kind) -> Option<Ordering> {\n+        Some(self.cmp(&other))\n+    }\n+}\n+\n impl<'tcx> From<ty::Region<'tcx>> for Kind<'tcx> {\n     fn from(r: ty::Region<'tcx>) -> Kind<'tcx> {\n         UnpackedKind::Lifetime(r).pack()"}, {"sha": "9f1a795b35004a9671377ca5d0fc025015ceee96", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -22,7 +22,8 @@ use std::ops::{RangeBounds, Bound, Index, IndexMut};\n /// stores data in a more compact way. It also supports accessing contiguous\n /// ranges of elements as a slice, and slices of already sorted elements can be\n /// inserted efficiently.\n-#[derive(Clone, PartialEq, Eq, Hash, Default, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Default, Debug, RustcEncodable,\n+         RustcDecodable)]\n pub struct SortedMap<K: Ord, V> {\n     data: Vec<(K,V)>\n }"}, {"sha": "4b11de097738eb1354e396e6b1ab30b1460294e3", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -332,7 +332,7 @@ impl AddAssign for Size {\n /// Each field is a power of two, giving the alignment a maximum value\n /// of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a\n /// maximum capacity of 2<sup>29</sup> or 536870912.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Ord, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Align {\n     abi_pow2: u8,\n     pref_pow2: u8,"}, {"sha": "927d224389ffcf4d7443f7730b09908f6cfd2bfe", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -10,7 +10,7 @@\n \n use std::fmt;\n \n-#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)"}, {"sha": "e1e220f49c97cc50354cab65d58e87d33d2ef878", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8400c3ffddfe642608c79b2f65b01d7416db2b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9a8400c3ffddfe642608c79b2f65b01d7416db2b", "patch": "@@ -667,7 +667,7 @@ pub enum PatKind {\n     Mac(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Mutability {\n     Mutable,\n     Immutable,"}]}