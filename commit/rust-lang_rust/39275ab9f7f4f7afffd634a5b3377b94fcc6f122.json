{"sha": "39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Mjc1YWI5ZjdmNGY3YWZmZmQ2MzRhNWIzMzc3Yjk0ZmNjNmYxMjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T19:30:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T19:30:01Z"}, "message": "Merge pull request #632 from RalfJung/memalign\n\nimplement and test posix_memalign", "tree": {"sha": "9c691c4de1e269a1ee9d60d4292121ab900d1641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c691c4de1e269a1ee9d60d4292121ab900d1641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZHA5CRBK7hj4Ov3rIwAAdHIIAAN1H5BdyOo3eg4/ClyhppM+\nOIfniptNz2ZMusdvIGa3ugTyViefr1QDU6ZbrxzyvExVTUkARUnZO6wh0Zmwvxg9\nt9o+UlhUMVRjBIRgXxoVPoQ3avqVGireKHUL1x5PDaIkB+CC7Opw6DPpPHfZF6za\nSSruIPZ1qUBrNatXNjmkz69IO1TRRjwCIFiPaSGzorjGtwkC6ql+LTbNzQEQlAAt\nOjOT/MsbvZiKotCj4PawROCOOIpcuoghBLVnt9LIo66oEUUOBM0rZVOi/FPnpByj\nzepQWKUEIKsP7RHX+GL0NJ6jf6aHF0r2O2DlVR+77ZbC1Tmcny7CGj5Xb/7MDDM=\n=ZnbY\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c691c4de1e269a1ee9d60d4292121ab900d1641\nparent bd1dc2860a161b5babc0e2d1774a7273c65108b0\nparent 8466f78e83799ddee5f9bfd19f883c627036d096\nauthor Ralf Jung <post@ralfj.de> 1550086201 +0100\ncommitter GitHub <noreply@github.com> 1550086201 +0100\n\nMerge pull request #632 from RalfJung/memalign\n\nimplement and test posix_memalign"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "html_url": "https://github.com/rust-lang/rust/commit/39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39275ab9f7f4f7afffd634a5b3377b94fcc6f122/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1dc2860a161b5babc0e2d1774a7273c65108b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1dc2860a161b5babc0e2d1774a7273c65108b0", "html_url": "https://github.com/rust-lang/rust/commit/bd1dc2860a161b5babc0e2d1774a7273c65108b0"}, {"sha": "8466f78e83799ddee5f9bfd19f883c627036d096", "url": "https://api.github.com/repos/rust-lang/rust/commits/8466f78e83799ddee5f9bfd19f883c627036d096", "html_url": "https://github.com/rust-lang/rust/commit/8466f78e83799ddee5f9bfd19f883c627036d096"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "fa68f1d0d703ad2c01ab1a50da3796b1779718b5", "filename": "src/fn_call.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39275ab9f7f4f7afffd634a5b3377b94fcc6f122/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39275ab9f7f4f7afffd634a5b3377b94fcc6f122/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "patch": "@@ -93,6 +93,32 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n                 }\n             }\n+            \"posix_memalign\" => {\n+                let ret = this.deref_operand(args[0])?;\n+                let align = this.read_scalar(args[1])?.to_usize(this)?;\n+                let size = this.read_scalar(args[2])?.to_usize(this)?;\n+                // align must be a power of 2, and also at least ptr-sized (wtf, POSIX)\n+                if !align.is_power_of_two() {\n+                    return err!(HeapAllocNonPowerOfTwoAlignment(align));\n+                }\n+                if align < this.pointer_size().bytes() {\n+                    return err!(MachineError(format!(\n+                        \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n+                        align,\n+                    )));\n+                }\n+                if size == 0 {\n+                    this.write_null(ret.into())?;\n+                } else {\n+                    let ptr = this.memory_mut().allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align).unwrap(),\n+                        MiriMemoryKind::C.into()\n+                    );\n+                    this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), ret.into())?;\n+                }\n+                this.write_null(dest)?;\n+            }\n \n             \"free\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;"}, {"sha": "0eb2097047135411d2bc7c57d330a5f41842acdc", "filename": "tests/run-pass/heap_system.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39275ab9f7f4f7afffd634a5b3377b94fcc6f122/tests%2Frun-pass%2Fheap_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39275ab9f7f4f7afffd634a5b3377b94fcc6f122/tests%2Frun-pass%2Fheap_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_system.rs?ref=39275ab9f7f4f7afffd634a5b3377b94fcc6f122", "patch": "@@ -0,0 +1,29 @@\n+//ignore-windows: Inspects allocation base address on Windows\n+#![feature(allocator_api)]\n+\n+use std::alloc::{Global, Alloc, Layout, System};\n+\n+fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n+    let size = 8;\n+    let align = 16; // greater than size\n+    let iterations = 1; // Miri is deterministic, no need to try many times\n+    unsafe {\n+        let pointers: Vec<_> = (0..iterations).map(|_| {\n+            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+        }).collect();\n+        for &ptr in &pointers {\n+            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                       \"Got a pointer less aligned than requested\")\n+        }\n+\n+        // Clean up\n+        for &ptr in &pointers {\n+            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+        }\n+    }\n+}\n+\n+fn main() {\n+    check_overalign_requests(System);\n+    check_overalign_requests(Global);\n+}"}]}