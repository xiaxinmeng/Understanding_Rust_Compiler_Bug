{"sha": "d81f5597ac081707346ac68f6938ad6282fc2fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWY1NTk3YWMwODE3MDczNDZhYzY4ZjY5MzhhZDYyODJmYzJmZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T07:04:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T07:04:46Z"}, "message": "Auto merge of #70073 - wesleywiser:mir_opt_level_0, r=oli-obk\n\nDon't run various MIR optimizations at mir-opt-level=0\n\nAdd missing checks for mir-opt-level to non-essential MIR passes.\n\nI verified that this can still bootstrap even with these passes disabled.\n\nr? @oli-obk cc @RalfJung", "tree": {"sha": "78b4cdceb98b2081fadec06f9a58ab0157a0818d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b4cdceb98b2081fadec06f9a58ab0157a0818d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81f5597ac081707346ac68f6938ad6282fc2fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81f5597ac081707346ac68f6938ad6282fc2fee", "html_url": "https://github.com/rust-lang/rust/commit/d81f5597ac081707346ac68f6938ad6282fc2fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81f5597ac081707346ac68f6938ad6282fc2fee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef71df106b957eb84c1f028240ba8e85b614d043", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef71df106b957eb84c1f028240ba8e85b614d043", "html_url": "https://github.com/rust-lang/rust/commit/ef71df106b957eb84c1f028240ba8e85b614d043"}, {"sha": "f4dfb99235af94a6b7fb89ac051ffb4d112d179f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dfb99235af94a6b7fb89ac051ffb4d112d179f", "html_url": "https://github.com/rust-lang/rust/commit/f4dfb99235af94a6b7fb89ac051ffb4d112d179f"}], "stats": {"total": 136, "additions": 81, "deletions": 55}, "files": [{"sha": "4bef2bc711ba95d2173864016e871033bc272d70", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d81f5597ac081707346ac68f6938ad6282fc2fee", "patch": "@@ -117,13 +117,13 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         instance,\n         None,\n         MirPhase::Const,\n-        &[\n+        &[&[\n             &add_moves_for_packed_drops::AddMovesForPackedDrops,\n             &no_landing_pads::NoLandingPads::new(tcx),\n             &remove_noop_landing_pads::RemoveNoopLandingPads,\n             &simplify::SimplifyCfg::new(\"make_shim\"),\n             &add_call_guards::CriticalCallEdges,\n-        ],\n+        ]],\n     );\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);"}, {"sha": "dee37f767e9797c66710718e07c0eee2001b889c", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=d81f5597ac081707346ac68f6938ad6282fc2fee", "patch": "@@ -14,11 +14,6 @@ pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        // We only run when optimizing MIR (at any level).\n-        if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n-            return;\n-        }\n-\n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Place::ty()`)."}, {"sha": "b9701aed753370ac63c23291faf870f1fe7878ad", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 79, "deletions": 48, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81f5597ac081707346ac68f6938ad6282fc2fee/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=d81f5597ac081707346ac68f6938ad6282fc2fee", "patch": "@@ -143,7 +143,7 @@ pub fn run_passes(\n     instance: InstanceDef<'tcx>,\n     promoted: Option<Promoted>,\n     mir_phase: MirPhase,\n-    passes: &[&dyn MirPass<'tcx>],\n+    passes: &[&[&dyn MirPass<'tcx>]],\n ) {\n     let phase_index = mir_phase.phase_index();\n \n@@ -171,8 +171,10 @@ pub fn run_passes(\n         index += 1;\n     };\n \n-    for pass in passes {\n-        run_pass(*pass);\n+    for pass_group in passes {\n+        for pass in *pass_group {\n+            run_pass(*pass);\n+        }\n     }\n \n     body.phase = mir_phase;\n@@ -222,11 +224,11 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n         InstanceDef::Item(def_id),\n         None,\n         MirPhase::Const,\n-        &[\n+        &[&[\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,\n-        ],\n+        ]],\n     );\n     tcx.alloc_steal_mir(body)\n }\n@@ -255,11 +257,11 @@ fn mir_validated(\n         InstanceDef::Item(def_id),\n         None,\n         MirPhase::Validated,\n-        &[\n+        &[&[\n             // What we need to run borrowck etc.\n             &promote_pass,\n             &simplify::SimplifyCfg::new(\"qualify-consts\"),\n-        ],\n+        ]],\n     );\n \n     let promoted = promote_pass.promoted_fragments.into_inner();\n@@ -272,54 +274,83 @@ fn run_optimization_passes<'tcx>(\n     def_id: DefId,\n     promoted: Option<Promoted>,\n ) {\n+    let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n+        // Remove all things only needed by analysis\n+        &no_landing_pads::NoLandingPads::new(tcx),\n+        &simplify_branches::SimplifyBranches::new(\"initial\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &cleanup_post_borrowck::CleanupNonCodegenStatements,\n+        &simplify::SimplifyCfg::new(\"early-opt\"),\n+        // These next passes must be executed together\n+        &add_call_guards::CriticalCallEdges,\n+        &elaborate_drops::ElaborateDrops,\n+        &no_landing_pads::NoLandingPads::new(tcx),\n+        // AddMovesForPackedDrops needs to run after drop\n+        // elaboration.\n+        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n+        // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n+        // but before optimizations begin.\n+        &add_retag::AddRetag,\n+        &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+        // No lifetime analysis based on borrowing can be done from here on out.\n+    ];\n+\n+    let optimizations: &[&dyn MirPass<'tcx>] = &[\n+        &unreachable_prop::UnreachablePropagation,\n+        &uninhabited_enum_branching::UninhabitedEnumBranching,\n+        &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n+        &inline::Inline,\n+        // Lowering generator control-flow and variables has to happen before we do anything else\n+        // to them. We do this inside the \"optimizations\" block so that it can benefit from\n+        // optimizations that run before, that might be harder to do on the state machine than MIR\n+        // with async primitives.\n+        &generator::StateTransform,\n+        &instcombine::InstCombine,\n+        &const_prop::ConstProp,\n+        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        // Run deaggregation here because:\n+        //   1. Some codegen backends require it\n+        //   2. It creates additional possibilities for some MIR optimizations to trigger\n+        // FIXME(#70073): Why is this done here and not in `post_borrowck_cleanup`?\n+        &deaggregator::Deaggregator,\n+        &copy_prop::CopyPropagation,\n+        &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &simplify::SimplifyCfg::new(\"after-remove-noop-landing-pads\"),\n+        &simplify_try::SimplifyArmIdentity,\n+        &simplify_try::SimplifyBranchSame,\n+        &simplify::SimplifyCfg::new(\"final\"),\n+        &simplify::SimplifyLocals,\n+    ];\n+\n+    let no_optimizations: &[&dyn MirPass<'tcx>] = &[\n+        // Even if we don't do optimizations, we still have to lower generators for codegen.\n+        &generator::StateTransform,\n+        // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n+        &const_prop::ConstProp,\n+        // Even if we don't do optimizations, still run deaggregation because some backends assume\n+        // that deaggregation always occurs.\n+        &deaggregator::Deaggregator,\n+    ];\n+\n+    let pre_codegen_cleanup: &[&dyn MirPass<'tcx>] = &[\n+        &add_call_guards::CriticalCallEdges,\n+        // Dump the end result for testing and debugging purposes.\n+        &dump_mir::Marker(\"PreCodegen\"),\n+    ];\n+\n+    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level;\n+\n     run_passes(\n         tcx,\n         body,\n         InstanceDef::Item(def_id),\n         promoted,\n         MirPhase::Optimized,\n         &[\n-            // Remove all things only needed by analysis\n-            &no_landing_pads::NoLandingPads::new(tcx),\n-            &simplify_branches::SimplifyBranches::new(\"initial\"),\n-            &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &cleanup_post_borrowck::CleanupNonCodegenStatements,\n-            &simplify::SimplifyCfg::new(\"early-opt\"),\n-            // These next passes must be executed together\n-            &add_call_guards::CriticalCallEdges,\n-            &elaborate_drops::ElaborateDrops,\n-            &no_landing_pads::NoLandingPads::new(tcx),\n-            // AddMovesForPackedDrops needs to run after drop\n-            // elaboration.\n-            &add_moves_for_packed_drops::AddMovesForPackedDrops,\n-            // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n-            // but before optimizations begin.\n-            &add_retag::AddRetag,\n-            &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n-            // No lifetime analysis based on borrowing can be done from here on out.\n-\n-            // Optimizations begin.\n-            &unreachable_prop::UnreachablePropagation,\n-            &uninhabited_enum_branching::UninhabitedEnumBranching,\n-            &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n-            &inline::Inline,\n-            // Lowering generator control-flow and variables\n-            // has to happen before we do anything else to them.\n-            &generator::StateTransform,\n-            &instcombine::InstCombine,\n-            &const_prop::ConstProp,\n-            &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-            &deaggregator::Deaggregator,\n-            &copy_prop::CopyPropagation,\n-            &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n-            &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &simplify::SimplifyCfg::new(\"after-remove-noop-landing-pads\"),\n-            &simplify_try::SimplifyArmIdentity,\n-            &simplify_try::SimplifyBranchSame,\n-            &simplify::SimplifyCfg::new(\"final\"),\n-            &simplify::SimplifyLocals,\n-            &add_call_guards::CriticalCallEdges,\n-            &dump_mir::Marker(\"PreCodegen\"),\n+            post_borrowck_cleanup,\n+            if mir_opt_level > 0 { optimizations } else { no_optimizations },\n+            pre_codegen_cleanup,\n         ],\n     );\n }"}]}