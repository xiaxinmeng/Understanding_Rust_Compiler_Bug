{"sha": "f5bd1ca6786dd2e375353b5f031f77eb21727efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmQxY2E2Nzg2ZGQyZTM3NTM1M2I1ZjAzMWY3N2ViMjE3MjdlZmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-07T11:31:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-08T09:02:26Z"}, "message": "incr.comp.: Make Span decoding more consistent so it doesn't mess up -Zincremental-verify-ich", "tree": {"sha": "83cd495911cedff4ecdb1b5d6679dbf4eb9c3e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83cd495911cedff4ecdb1b5d6679dbf4eb9c3e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5bd1ca6786dd2e375353b5f031f77eb21727efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd1ca6786dd2e375353b5f031f77eb21727efb", "html_url": "https://github.com/rust-lang/rust/commit/f5bd1ca6786dd2e375353b5f031f77eb21727efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd1ca6786dd2e375353b5f031f77eb21727efb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0e611dff9090b06f69a177721e01d24edc82b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0e611dff9090b06f69a177721e01d24edc82b7", "html_url": "https://github.com/rust-lang/rust/commit/1c0e611dff9090b06f69a177721e01d24edc82b7"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "3be99e9722361b213330dfb6cf7d825fc863e597", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f5bd1ca6786dd2e375353b5f031f77eb21727efb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bd1ca6786dd2e375353b5f031f77eb21727efb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f5bd1ca6786dd2e375353b5f031f77eb21727efb", "patch": "@@ -273,25 +273,23 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         let lo = BytePos::decode(self)?;\n         let hi = BytePos::decode(self)?;\n \n+        if lo == BytePos(0) && hi == BytePos(0) {\n+            // Don't try to rebase DUMMY_SP. Otherwise it will look like a valid\n+            // Span again.\n+            return Ok(DUMMY_SP)\n+        }\n+\n+        if hi < lo {\n+            // Consistently map invalid spans to DUMMY_SP.\n+            return Ok(DUMMY_SP)\n+        }\n+\n         let sess = if let Some(sess) = self.sess {\n             sess\n         } else {\n             bug!(\"Cannot decode Span without Session.\")\n         };\n \n-        let (lo, hi) = if lo > hi {\n-            // Currently macro expansion sometimes produces invalid Span values\n-            // where lo > hi. In order not to crash the compiler when trying to\n-            // translate these values, let's transform them into something we\n-            // can handle (and which will produce useful debug locations at\n-            // least some of the time).\n-            // This workaround is only necessary as long as macro expansion is\n-            // not fixed. FIXME(#23480)\n-            (lo, lo)\n-        } else {\n-            (lo, hi)\n-        };\n-\n         let imported_filemaps = self.cdata().imported_filemaps(&sess.codemap());\n         let filemap = {\n             // Optimize for the case that most spans within a translated item\n@@ -321,6 +319,16 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             }\n         };\n \n+        // Make sure our binary search above is correct.\n+        debug_assert!(lo >= filemap.original_start_pos &&\n+                      lo <= filemap.original_end_pos);\n+\n+        if hi < filemap.original_start_pos || hi > filemap.original_end_pos {\n+            // `hi` points to a different FileMap than `lo` which is invalid.\n+            // Again, map invalid Spans to DUMMY_SP.\n+            return Ok(DUMMY_SP)\n+        }\n+\n         let lo = (lo + filemap.translated_filemap.start_pos) - filemap.original_start_pos;\n         let hi = (hi + filemap.translated_filemap.start_pos) - filemap.original_start_pos;\n "}]}