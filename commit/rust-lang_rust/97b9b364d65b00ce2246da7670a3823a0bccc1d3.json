{"sha": "97b9b364d65b00ce2246da7670a3823a0bccc1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjliMzY0ZDY1YjAwY2UyMjQ2ZGE3NjcwYTM4MjNhMGJjY2MxZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-07T17:30:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T17:30:13Z"}, "message": "Merge #4362\n\n4362: do not show runnables for main function outside of a binary target  r=matklad a=bnjjj\n\nclose #4356\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "b15f7768ac8df06c3eeeb039a1063d3e9065b673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b15f7768ac8df06c3eeeb039a1063d3e9065b673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b9b364d65b00ce2246da7670a3823a0bccc1d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetEWlCRBK7hj4Ov3rIwAAdHIIAE1FMGS4I+UWrNAXx/n1tNC6\nSx+fWQnoSueQFp4FZU5J5ATJ12F11XgOcjDA1YtsTV/CRvPjtlg+Qy/tgzhmdrlj\ngcexDebVYw4PV6MAIDZEH366nTYOG5js+hcF9RF+KTTr5w7Phz++LHI/CiDmZwN8\nWwNbQKs4R+Jp0sx3B461DDHHUzQX9xCIGmEsJDlZ1xKIwFsQze8KfeDfTLmTW/Ce\nApTc8HsvuH1/hrQ/shCkVDPrusi+qY2OYxnCl6f9qdqs9FJJK5zBrFm08q5namiq\nehTIk+CPxDzeGw2pvAnVf6dx4mz4UICuhCnCWc3v9NgcLtvPxKXRCQZSv7ZfMVQ=\n=lCfj\n-----END PGP SIGNATURE-----\n", "payload": "tree b15f7768ac8df06c3eeeb039a1063d3e9065b673\nparent aa112bf7146a41c56ee9ed36f2120d0ee9c33e4b\nparent c839d4f7a9e667b5aca30388c43fa8b1dbab14a7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588872613 +0000\ncommitter GitHub <noreply@github.com> 1588872613 +0000\n\nMerge #4362\n\n4362: do not show runnables for main function outside of a binary target  r=matklad a=bnjjj\n\nclose #4356\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b9b364d65b00ce2246da7670a3823a0bccc1d3", "html_url": "https://github.com/rust-lang/rust/commit/97b9b364d65b00ce2246da7670a3823a0bccc1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b9b364d65b00ce2246da7670a3823a0bccc1d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa112bf7146a41c56ee9ed36f2120d0ee9c33e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa112bf7146a41c56ee9ed36f2120d0ee9c33e4b", "html_url": "https://github.com/rust-lang/rust/commit/aa112bf7146a41c56ee9ed36f2120d0ee9c33e4b"}, {"sha": "c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "html_url": "https://github.com/rust-lang/rust/commit/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "f4353af64703d1f7154714a4397156677729d4f4", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97b9b364d65b00ce2246da7670a3823a0bccc1d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b9b364d65b00ce2246da7670a3823a0bccc1d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=97b9b364d65b00ce2246da7670a3823a0bccc1d3", "patch": "@@ -42,6 +42,7 @@ use crate::{\n     world::WorldSnapshot,\n     LspError, Result,\n };\n+use ra_project_model::TargetKind;\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n@@ -384,16 +385,27 @@ pub fn handle_runnables(\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n     let mut res = Vec::new();\n     let workspace_root = world.workspace_root_for(file_id);\n+    let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n     for runnable in world.analysis().runnables(file_id)? {\n         if let Some(offset) = offset {\n             if !runnable.range.contains_inclusive(offset) {\n                 continue;\n             }\n         }\n+        // Do not suggest binary run on other target than binary\n+        if let RunnableKind::Bin = runnable.kind {\n+            if let Some(spec) = &cargo_spec {\n+                match spec.target_kind {\n+                    TargetKind::Bin => {}\n+                    _ => continue,\n+                }\n+            }\n+        }\n         res.push(to_lsp_runnable(&world, file_id, runnable)?);\n     }\n+\n     // Add `cargo check` and `cargo test` for the whole package\n-    match CargoTargetSpec::for_file(&world, file_id)? {\n+    match cargo_spec {\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n                 res.push(req::Runnable {\n@@ -831,13 +843,23 @@ pub fn handle_code_lens(\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n \n+    let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Test\",\n             RunnableKind::DocTest { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Doctest\",\n             RunnableKind::Bench { .. } => \"Run Bench\",\n-            RunnableKind::Bin => \"Run\",\n+            RunnableKind::Bin => {\n+                // Do not suggest binary run on other target than binary\n+                match &cargo_spec {\n+                    Some(spec) => match spec.target_kind {\n+                        TargetKind::Bin => \"Run\",\n+                        _ => continue,\n+                    },\n+                    None => continue,\n+                }\n+            }\n         }\n         .to_string();\n         let mut r = to_lsp_runnable(&world, file_id, runnable)?;"}]}