{"sha": "dc7559b599d70419b079d4b97949dfe85d1c17ac", "node_id": "C_kwDOAAsO6NoAKGRjNzU1OWI1OTlkNzA0MTliMDc5ZDRiOTc5NDlkZmU4NWQxYzE3YWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-10T14:28:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-10T14:28:47Z"}, "message": "Rollup merge of #107789 - jieyouxu:issue-107745, r=lcnr\n\nAvoid exposing type parameters and implementation details sourced from macro expansions\n\nFixes #107745.\n\n~~I would like to **request some guidance** for this issue, because I don't think this is a good fix (a band-aid at best).~~\n\n### The Problem\n\nThe code\n\n```rust\nfn main() {\n    println!(\"{:?}\", []);\n}\n```\n\ngets desugared into (`rustc +nightly --edition=2018 issue-107745.rs -Z unpretty=hir`):\n\n```rust\n#[prelude_import]\nuse std::prelude::rust_2018::*;\n#[macro_use]\nextern crate std;\nfn main() {\n        {\n                ::std::io::_print(<#[lang = \"format_arguments\"]>::new_v1(&[\"\",\n                                    \"\\n\"], &[<#[lang = \"format_argument\"]>::new_debug(&[])]));\n            };\n    }\n```\n\nso the diagnostics code tries to be as specific and helpful as possible, and I think it finds that `[]` needs a type parameter and so does `new_debug`. But since `[]` doesn't have an origin for the type parameter definition, it points to `new_debug` instead and leaks the internal implementation detail since all `[]` has is an type inference variable.\n\n### ~~The Bad Fix~~\n\n~~This PR currently tries to fix the problem by bypassing the generated function `<#[lang = \"format_argument\"]>::new_debug` to avoid its generic parameter (I think it is auto-generated from the argument `[_; 0]`?) from getting collected as an `InsertableGenericArg`. This is problematic because it also prevents the help from getting displayed.~~\n\n~~I think this fix is not ideal and hard-codes the format generated code pattern, but I can't think of a better fix. I have tried asking on Zulip but no responses there yet.~~", "tree": {"sha": "cf2d370ed893194b9cb546e04677c89192499fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2d370ed893194b9cb546e04677c89192499fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7559b599d70419b079d4b97949dfe85d1c17ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5lSfCRBK7hj4Ov3rIwAABRsIADaUtD5yZhXipqqgojuksTxz\nqLhe2xe2oVgKLs2B/QoJe0ztAKyiveTqpvbQ22JSGOlL+h8+1i78+NzEiCBA7cgM\n8B3vWPboavhBL4bDgL0zjNnk0hfT+jvgIbxe+lvEBhQ0RnKBuyROBxP4i6UfyahB\nEs2JEjDRXE0SIV47pAPUDP6HPMncq6LGeY1UXjq1WfPWaHWEfA46YZNjZ65BWxY4\nUNXXBiw/Ivjg+FfWpYL3fs30wuqaSBOSNHnw9QnL1MmLTc4/fkECs6YfYQdZhuZS\nW4MbW6PTjGWUczWm6TC0F9QQ+BOmfAaBLrzcJn2oga6vC1x0kRrns+4TyDHxyXc=\n=nrh4\n-----END PGP SIGNATURE-----\n", "payload": "tree cf2d370ed893194b9cb546e04677c89192499fd9\nparent d1ac43a9b9a8250d858705b0796dfed6186e18db\nparent b58347a9c607e493ff947ff470492c38f7819c72\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676039327 +0100\ncommitter GitHub <noreply@github.com> 1676039327 +0100\n\nRollup merge of #107789 - jieyouxu:issue-107745, r=lcnr\n\nAvoid exposing type parameters and implementation details sourced from macro expansions\n\nFixes #107745.\n\n~~I would like to **request some guidance** for this issue, because I don't think this is a good fix (a band-aid at best).~~\n\n### The Problem\n\nThe code\n\n```rust\nfn main() {\n    println!(\"{:?}\", []);\n}\n```\n\ngets desugared into (`rustc +nightly --edition=2018 issue-107745.rs -Z unpretty=hir`):\n\n```rust\n#[prelude_import]\nuse std::prelude::rust_2018::*;\n#[macro_use]\nextern crate std;\nfn main() {\n        {\n                ::std::io::_print(<#[lang = \"format_arguments\"]>::new_v1(&[\"\",\n                                    \"\\n\"], &[<#[lang = \"format_argument\"]>::new_debug(&[])]));\n            };\n    }\n```\n\nso the diagnostics code tries to be as specific and helpful as possible, and I think it finds that `[]` needs a type parameter and so does `new_debug`. But since `[]` doesn't have an origin for the type parameter definition, it points to `new_debug` instead and leaks the internal implementation detail since all `[]` has is an type inference variable.\n\n### ~~The Bad Fix~~\n\n~~This PR currently tries to fix the problem by bypassing the generated function `<#[lang = \"format_argument\"]>::new_debug` to avoid its generic parameter (I think it is auto-generated from the argument `[_; 0]`?) from getting collected as an `InsertableGenericArg`. This is problematic because it also prevents the help from getting displayed.~~\n\n~~I think this fix is not ideal and hard-codes the format generated code pattern, but I can't think of a better fix. I have tried asking on Zulip but no responses there yet.~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7559b599d70419b079d4b97949dfe85d1c17ac", "html_url": "https://github.com/rust-lang/rust/commit/dc7559b599d70419b079d4b97949dfe85d1c17ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7559b599d70419b079d4b97949dfe85d1c17ac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ac43a9b9a8250d858705b0796dfed6186e18db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac43a9b9a8250d858705b0796dfed6186e18db", "html_url": "https://github.com/rust-lang/rust/commit/d1ac43a9b9a8250d858705b0796dfed6186e18db"}, {"sha": "b58347a9c607e493ff947ff470492c38f7819c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58347a9c607e493ff947ff470492c38f7819c72", "html_url": "https://github.com/rust-lang/rust/commit/b58347a9c607e493ff947ff470492c38f7819c72"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "c092efbb557cf76acbf6ec427ecacec9e8e036be", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -158,8 +158,12 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n         if infcx.probe_ty_var(ty_vid).is_ok() {\n             warn!(\"resolved ty var in error message\");\n         }\n-        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n-            infcx.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+\n+        let mut infcx_inner = infcx.inner.borrow_mut();\n+        let ty_vars = infcx_inner.type_variables();\n+        let var_origin = ty_vars.var_origin(ty_vid);\n+        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind\n+            && !var_origin.span.from_expansion()\n         {\n             Some(name)\n         } else {\n@@ -254,7 +258,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n                         var_origin.kind\n                     {\n-                        if name != kw::SelfUpper {\n+                        if name != kw::SelfUpper && !var_origin.span.from_expansion() {\n                             return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n@@ -780,7 +784,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         // The sources are listed in order of preference here.\n         let tcx = self.infcx.tcx;\n         let ctx = CostCtxt { tcx };\n-        let base_cost = match source.kind {\n+        match source.kind {\n             InferSourceKind::LetBinding { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::ClosureArg { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::GenericArg { def_id, generic_args, .. } => {\n@@ -797,17 +801,17 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             InferSourceKind::ClosureReturn { ty, should_wrap_expr, .. } => {\n                 30 + ctx.ty_cost(ty) + if should_wrap_expr.is_some() { 10 } else { 0 }\n             }\n-        };\n-\n-        let suggestion_may_apply = if source.from_expansion() { 10000 } else { 0 };\n-\n-        base_cost + suggestion_may_apply\n+        }\n     }\n \n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n     fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n+        if new_source.from_expansion() {\n+            return;\n+        }\n+\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n@@ -819,6 +823,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             // `let x: _ = iter.collect();`, as this is a very common case.\n             *def_id = Some(did);\n         }\n+\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);"}, {"sha": "7f6758f47f8fe4cf1c89f6f27011af67b7d720b7", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -0,0 +1,19 @@\n+// ignore-tidy-linelength\n+\n+// Regression test for #107745.\n+// Previously need_type_info::update_infer_source will consider expressions originating from\n+// macro expressions as candiate \"previous sources\". This unfortunately can mean that\n+// for macros expansions such as `format!()` internal implementation details can leak, such as:\n+//\n+// ```\n+// error[E0282]: type annotations needed\n+// --> src/main.rs:2:22\n+//  |\n+//2 |     println!(\"{:?}\", []);\n+//  |                      ^^ cannot infer type of the type parameter `T` declared on the associated function `new_debug`\n+// ```\n+\n+fn main() {\n+    println!(\"{:?}\", []);\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "464655bbcf4515b90d764cbea4ecb3565f316943", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-107745-avoid-expr-from-macro-expansion.rs:17:22\n+   |\n+LL |     println!(\"{:?}\", []);\n+   |                      ^^ cannot infer type\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "8c92505b5eb281b5008b56d1b2aee1e2dd353746", "filename": "tests/ui/issues/issue-16966.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16966.stderr?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -1,10 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-16966.rs:2:5\n+  --> $DIR/issue-16966.rs:2:12\n    |\n LL |     panic!(std::default::Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "a56cd17773dc4cd0577b5ae1711af2166bd04f4e", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -17,7 +17,7 @@ fn test2<T1, T2>(arg1 : T1, arg2 : T2) {\n fn test3<'a>(arg : &'a u32) {\n   let v : Vec<'a = vec![];\n     //~^ ERROR: expected one of\n-    //~| ERROR: type annotations needed for `Vec<T>`\n+    //~| ERROR: type annotations needed for `Vec<_>`\n }\n \n fn main() {}"}, {"sha": "b2448774ae9d35d8544969e33b59430086b0b4db", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -39,26 +39,26 @@ help: you might have meant to end the type parameters here\n LL |   let v : Vec<'a> = vec![];\n    |                 +\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:7\n    |\n LL |   let v : Vec<(u32,_) = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<(u32,_) = vec![];\n+LL |   let v: Vec<_> : Vec<(u32,_) = vec![];\n    |        ++++++++\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:7\n    |\n LL |   let v : Vec<'a = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<'a = vec![];\n+LL |   let v: Vec<_> : Vec<'a = vec![];\n    |        ++++++++\n \n error: aborting due to 5 previous errors"}, {"sha": "09c4b2053b27e6dc6e65fe3491700db3c0bb4dc0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:9\n    |\n LL |     let x = vec![];\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n-LL |     let x: Vec<T> = vec![];\n+LL |     let x: Vec<_> = vec![];\n    |          ++++++++\n \n error: aborting due to previous error"}, {"sha": "1fa253052e6495e76550acacb53b426d9fbc32e0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc7559b599d70419b079d4b97949dfe85d1c17ac/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=dc7559b599d70419b079d4b97949dfe85d1c17ac", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `(Vec<T>,)`\n+error[E0282]: type annotations needed for `(Vec<_>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:9\n    |\n LL |     let (x, ) = (vec![], );\n    |         ^^^^^   ---------- type must be known at this point\n    |\n-help: consider giving this pattern a type, where the type for type parameter `T` is specified\n+help: consider giving this pattern a type, where the placeholders `_` are specified\n    |\n-LL |     let (x, ): (Vec<T>,) = (vec![], );\n+LL |     let (x, ): (Vec<_>,) = (vec![], );\n    |              +++++++++++\n \n error: aborting due to previous error"}]}