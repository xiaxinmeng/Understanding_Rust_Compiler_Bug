{"sha": "d83da1d05dc75ff3452c068299f40e5d99589d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4M2RhMWQwNWRjNzVmZjM0NTJjMDY4Mjk5ZjQwZTVkOTk1ODlkNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T16:43:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T16:43:40Z"}, "message": "Auto merge of #88083 - m-ou-se:non-fmt-panics-suggest-debug, r=estebank\n\nImprove non_fmt_panics suggestion based on trait impls.\n\nThis improves the non_fmt_panics lint suggestions by checking first which trait (Display or Debug) are actually implemented on the type.\n\nFixes https://github.com/rust-lang/rust/issues/87313\n\nFixes https://github.com/rust-lang/rust/issues/87999\n\nBefore:\n\n```\nhelp: add a \"{}\" format string to Display the message\n  |\n2 |     panic!(\"{}\", Some(1));\n  |            +++++\nhelp: or use std::panic::panic_any instead\n  |\n2 |     std::panic::panic_any(Some(1));\n  |     ~~~~~~~~~~~~~~~~~~~~~\n```\n\nAfter:\n\n```\nhelp: add a \"{:?}\" format string to use the Debug implementation of `Option<i32>`\n  |\n2 |     panic!(\"{:?}\", Some(1));\n  |            +++++++\nhelp: or use std::panic::panic_any instead\n  |\n2 |     std::panic::panic_any(Some(1));\n  |     ~~~~~~~~~~~~~~~~~~~~~\n```\n\nr? `@estebank`", "tree": {"sha": "44e5ad22d0c3364b34816ac98a2cbfd812f49723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e5ad22d0c3364b34816ac98a2cbfd812f49723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83da1d05dc75ff3452c068299f40e5d99589d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83da1d05dc75ff3452c068299f40e5d99589d71", "html_url": "https://github.com/rust-lang/rust/commit/d83da1d05dc75ff3452c068299f40e5d99589d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83da1d05dc75ff3452c068299f40e5d99589d71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "806b3995b8f622d5de10afcc11c10a028a7b876a", "url": "https://api.github.com/repos/rust-lang/rust/commits/806b3995b8f622d5de10afcc11c10a028a7b876a", "html_url": "https://github.com/rust-lang/rust/commit/806b3995b8f622d5de10afcc11c10a028a7b876a"}, {"sha": "ab8cbc31905ccd010318fc572fea7bf92c46a70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8cbc31905ccd010318fc572fea7bf92c46a70f", "html_url": "https://github.com/rust-lang/rust/commit/ab8cbc31905ccd010318fc572fea7bf92c46a70f"}], "stats": {"total": 321, "additions": 288, "deletions": 33}, "files": [{"sha": "cfa02daab7eb0c3641460027952825342ad302a6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -3933,6 +3933,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n  \"rustc_serialize\","}, {"sha": "8294d5878fa99015efaee012ac8a5eb2c049fe22", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -22,3 +22,4 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }\n+rustc_infer = { path = \"../rustc_infer\" }"}, {"sha": "33a6edafa26408185baf547c2bebb13b0e5bbab5", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -2,12 +2,15 @@ use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n declare_lint! {\n     /// The `non_fmt_panics` lint detects `panic!(..)` invocations where the first\n@@ -99,7 +102,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n-        l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n+        l.note(&format!(\"this usage of {}!() is deprecated; it will be a hard error in Rust 2021\", symbol_str));\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n         if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n@@ -129,20 +132,57 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 ty.ty_adt_def(),\n                 Some(ty_def) if cx.tcx.is_diagnostic_item(sym::string_type, ty_def.did),\n             );\n-            l.span_suggestion_verbose(\n-                arg_span.shrink_to_lo(),\n-                \"add a \\\"{}\\\" format string to Display the message\",\n-                \"\\\"{}\\\", \".into(),\n-                if is_str {\n-                    Applicability::MachineApplicable\n-                } else {\n-                    Applicability::MaybeIncorrect\n-                },\n-            );\n-            if !is_str && panic == sym::std_panic_macro {\n+\n+            let (suggest_display, suggest_debug) = cx.tcx.infer_ctxt().enter(|infcx| {\n+                let display = is_str || cx.tcx.get_diagnostic_item(sym::display_trait).map(|t| {\n+                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n+                }) == Some(true);\n+                let debug = !display && cx.tcx.get_diagnostic_item(sym::debug_trait).map(|t| {\n+                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n+                }) == Some(true);\n+                (display, debug)\n+            });\n+\n+            let suggest_panic_any = !is_str && panic == sym::std_panic_macro;\n+\n+            let fmt_applicability = if suggest_panic_any {\n+                // If we can use panic_any, use that as the MachineApplicable suggestion.\n+                Applicability::MaybeIncorrect\n+            } else {\n+                // If we don't suggest panic_any, using a format string is our best bet.\n+                Applicability::MachineApplicable\n+            };\n+\n+            if suggest_display {\n+                l.span_suggestion_verbose(\n+                    arg_span.shrink_to_lo(),\n+                    \"add a \\\"{}\\\" format string to Display the message\",\n+                    \"\\\"{}\\\", \".into(),\n+                    fmt_applicability,\n+                );\n+            } else if suggest_debug {\n+                l.span_suggestion_verbose(\n+                    arg_span.shrink_to_lo(),\n+                    &format!(\n+                        \"add a \\\"{{:?}}\\\" format string to use the Debug implementation of `{}`\",\n+                        ty,\n+                    ),\n+                    \"\\\"{:?}\\\", \".into(),\n+                    fmt_applicability,\n+                );\n+            }\n+\n+            if suggest_panic_any {\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n                     l.multipart_suggestion(\n-                        \"or use std::panic::panic_any instead\",\n+                        &format!(\n+                            \"{}use std::panic::panic_any instead\",\n+                            if suggest_display || suggest_debug {\n+                                \"or \"\n+                            } else {\n+                                \"\"\n+                            },\n+                        ),\n                         if del == '(' {\n                             vec![(span.until(open), \"std::panic::panic_any\".into())]\n                         } else {"}, {"sha": "d226f4129aa826efd26360cc79fd940cb127a9fa", "filename": "src/test/ui/non-fmt-panic.fixed", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -17,11 +17,16 @@ fn main() {\n     //~^ WARN panic message contains unused formatting placeholders\n     assert!(false, \"{}\", S);\n     //~^ WARN panic message is not a string literal\n+    assert!(false, \"{}\", 123);\n+    //~^ WARN panic message is not a string literal\n+    assert!(false, \"{:?}\", Some(123));\n+    //~^ WARN panic message is not a string literal\n     debug_assert!(false, \"{}\", \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(\"{}\", C); //~ WARN panic message is not a string literal\n     panic!(\"{}\", S); //~ WARN panic message is not a string literal\n     std::panic::panic_any(123); //~ WARN panic message is not a string literal\n     core::panic!(\"{}\", &*\"abc\"); //~ WARN panic message is not a string literal\n+    std::panic::panic_any(Some(123)); //~ WARN panic message is not a string literal\n     panic!(\"{}\", concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n     panic!(\"{}\", concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n \n@@ -51,4 +56,29 @@ fn main() {\n     }\n     panic!(\"{}\"); // OK\n     panic!(S); // OK\n+\n+    a(1);\n+    b(1);\n+    c(1);\n+    d(1);\n+}\n+\n+fn a<T: Send + 'static>(v: T) {\n+    std::panic::panic_any(v); //~ WARN panic message is not a string literal\n+    assert!(false, v); //~ WARN panic message is not a string literal\n+}\n+\n+fn b<T: std::fmt::Debug + Send + 'static>(v: T) {\n+    std::panic::panic_any(v); //~ WARN panic message is not a string literal\n+    assert!(false, \"{:?}\", v); //~ WARN panic message is not a string literal\n+}\n+\n+fn c<T: std::fmt::Display + Send + 'static>(v: T) {\n+    std::panic::panic_any(v); //~ WARN panic message is not a string literal\n+    assert!(false, \"{}\", v); //~ WARN panic message is not a string literal\n+}\n+\n+fn d<T: std::fmt::Display + std::fmt::Debug + Send + 'static>(v: T) {\n+    std::panic::panic_any(v); //~ WARN panic message is not a string literal\n+    assert!(false, \"{}\", v); //~ WARN panic message is not a string literal\n }"}, {"sha": "2ffd7638ae0a04fa7e2e5179a1dd5fcbd29cf4b6", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -17,11 +17,16 @@ fn main() {\n     //~^ WARN panic message contains unused formatting placeholders\n     assert!(false, S);\n     //~^ WARN panic message is not a string literal\n+    assert!(false, 123);\n+    //~^ WARN panic message is not a string literal\n+    assert!(false, Some(123));\n+    //~^ WARN panic message is not a string literal\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(C); //~ WARN panic message is not a string literal\n     panic!(S); //~ WARN panic message is not a string literal\n     std::panic!(123); //~ WARN panic message is not a string literal\n     core::panic!(&*\"abc\"); //~ WARN panic message is not a string literal\n+    panic!(Some(123)); //~ WARN panic message is not a string literal\n     panic!(concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n     panic!(concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n \n@@ -51,4 +56,29 @@ fn main() {\n     }\n     panic!(\"{}\"); // OK\n     panic!(S); // OK\n+\n+    a(1);\n+    b(1);\n+    c(1);\n+    d(1);\n+}\n+\n+fn a<T: Send + 'static>(v: T) {\n+    panic!(v); //~ WARN panic message is not a string literal\n+    assert!(false, v); //~ WARN panic message is not a string literal\n+}\n+\n+fn b<T: std::fmt::Debug + Send + 'static>(v: T) {\n+    panic!(v); //~ WARN panic message is not a string literal\n+    assert!(false, v); //~ WARN panic message is not a string literal\n+}\n+\n+fn c<T: std::fmt::Display + Send + 'static>(v: T) {\n+    panic!(v); //~ WARN panic message is not a string literal\n+    assert!(false, v); //~ WARN panic message is not a string literal\n+}\n+\n+fn d<T: std::fmt::Display + std::fmt::Debug + Send + 'static>(v: T) {\n+    panic!(v); //~ WARN panic message is not a string literal\n+    assert!(false, v); //~ WARN panic message is not a string literal\n }"}, {"sha": "b62cc378aa5e4e7bd956a20bf597e4ba37d84e02", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 173, "deletions": 20, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d83da1d05dc75ff3452c068299f40e5d99589d71/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=d83da1d05dc75ff3452c068299f40e5d99589d71", "patch": "@@ -61,15 +61,41 @@ warning: panic message is not a string literal\n LL |     assert!(false, S);\n    |                    ^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     assert!(false, \"{}\", S);\n    |                    +++++\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:20:20\n+   |\n+LL |     assert!(false, 123);\n+   |                    ^^^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     assert!(false, \"{}\", 123);\n+   |                    +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:22:20\n+   |\n+LL |     assert!(false, Some(123));\n+   |                    ^^^^^^^^^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{:?}\" format string to use the Debug implementation of `Option<i32>`\n+   |\n+LL |     assert!(false, \"{:?}\", Some(123));\n+   |                    +++++++\n+\n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:20:27\n+  --> $DIR/non-fmt-panic.rs:24:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n@@ -81,7 +107,7 @@ LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:21:12\n+  --> $DIR/non-fmt-panic.rs:25:12\n    |\n LL |     panic!(C);\n    |            ^\n@@ -94,7 +120,7 @@ LL |     panic!(\"{}\", C);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:22:12\n+  --> $DIR/non-fmt-panic.rs:26:12\n    |\n LL |     panic!(S);\n    |            ^\n@@ -107,12 +133,12 @@ LL |     panic!(\"{}\", S);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:23:17\n+  --> $DIR/non-fmt-panic.rs:27:17\n    |\n LL |     std::panic!(123);\n    |                 ^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of std::panic!() is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n@@ -124,20 +150,37 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:24:18\n+  --> $DIR/non-fmt-panic.rs:28:18\n    |\n LL |     core::panic!(&*\"abc\");\n    |                  ^^^^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of core::panic!() is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n help: add a \"{}\" format string to Display the message\n    |\n LL |     core::panic!(\"{}\", &*\"abc\");\n    |                  +++++\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:29:12\n+   |\n+LL |     panic!(Some(123));\n+   |            ^^^^^^^^^\n+   |\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{:?}\" format string to use the Debug implementation of `Option<i32>`\n+   |\n+LL |     panic!(\"{:?}\", Some(123));\n+   |            +++++++\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(Some(123));\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n+\n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:25:12\n+  --> $DIR/non-fmt-panic.rs:30:12\n    |\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n@@ -153,7 +196,7 @@ LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n    |            +++++\n \n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:26:5\n+  --> $DIR/non-fmt-panic.rs:31:5\n    |\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -165,15 +208,15 @@ LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n    |            +++++\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:28:37\n+  --> $DIR/non-fmt-panic.rs:33:37\n    |\n LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |                                     ^^\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:38:12\n+  --> $DIR/non-fmt-panic.rs:43:12\n    |\n LL |     panic!(a!());\n    |            ^^^^\n@@ -190,7 +233,7 @@ LL |     std::panic::panic_any(a!());\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:40:12\n+  --> $DIR/non-fmt-panic.rs:45:12\n    |\n LL |     panic!(format!(\"{}\", 1));\n    |            ^^^^^^^^^^^^^^^^\n@@ -205,12 +248,12 @@ LL +     panic!(\"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:41:20\n+  --> $DIR/non-fmt-panic.rs:46:20\n    |\n LL |     assert!(false, format!(\"{}\", 1));\n    |                    ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: the assert!() macro supports formatting, so there's no need for the format!() macro here\n help: remove the `format!(..)` macro call\n@@ -220,12 +263,12 @@ LL +     assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:42:26\n+  --> $DIR/non-fmt-panic.rs:47:26\n    |\n LL |     debug_assert!(false, format!(\"{}\", 1));\n    |                          ^^^^^^^^^^^^^^^^\n    |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: this usage of debug_assert!() is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: the debug_assert!() macro supports formatting, so there's no need for the format!() macro here\n help: remove the `format!(..)` macro call\n@@ -235,7 +278,7 @@ LL +     debug_assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:44:12\n+  --> $DIR/non-fmt-panic.rs:49:12\n    |\n LL |     panic![123];\n    |            ^^^\n@@ -252,7 +295,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:45:12\n+  --> $DIR/non-fmt-panic.rs:50:12\n    |\n LL |     panic!{123};\n    |            ^^^\n@@ -268,5 +311,115 @@ help: or use std::panic::panic_any instead\n LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n-warning: 19 warnings emitted\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:67:12\n+   |\n+LL |     panic!(v);\n+   |     ------ ^\n+   |     |\n+   |     help: use std::panic::panic_any instead: `std::panic::panic_any`\n+   |\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:68:20\n+   |\n+LL |     assert!(false, v);\n+   |                    ^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:72:12\n+   |\n+LL |     panic!(v);\n+   |            ^\n+   |\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{:?}\" format string to use the Debug implementation of `T`\n+   |\n+LL |     panic!(\"{:?}\", v);\n+   |            +++++++\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(v);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:73:20\n+   |\n+LL |     assert!(false, v);\n+   |                    ^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{:?}\" format string to use the Debug implementation of `T`\n+   |\n+LL |     assert!(false, \"{:?}\", v);\n+   |                    +++++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:77:12\n+   |\n+LL |     panic!(v);\n+   |            ^\n+   |\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", v);\n+   |            +++++\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(v);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:78:20\n+   |\n+LL |     assert!(false, v);\n+   |                    ^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     assert!(false, \"{}\", v);\n+   |                    +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:82:12\n+   |\n+LL |     panic!(v);\n+   |            ^\n+   |\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", v);\n+   |            +++++\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(v);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:83:20\n+   |\n+LL |     assert!(false, v);\n+   |                    ^\n+   |\n+   = note: this usage of assert!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     assert!(false, \"{}\", v);\n+   |                    +++++\n+\n+warning: 30 warnings emitted\n "}]}