{"sha": "c4d128e454448191c4b21d8e151c673e4c42376e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZDEyOGU0NTQ0NDgxOTFjNGIyMWQ4ZTE1MWM2NzNlNGM0MjM3NmU=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-06T07:57:00Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-06T07:57:00Z"}, "message": "Merge branch 'master' of github.com:rust-analyzer/rust-analyzer into fix_4311", "tree": {"sha": "17cf5bbf429642c52708cd0d3c1d8885b63543f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17cf5bbf429642c52708cd0d3c1d8885b63543f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4d128e454448191c4b21d8e151c673e4c42376e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d128e454448191c4b21d8e151c673e4c42376e", "html_url": "https://github.com/rust-lang/rust/commit/c4d128e454448191c4b21d8e151c673e4c42376e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4d128e454448191c4b21d8e151c673e4c42376e/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf02f5ccac99c91f10ef46bb06ff2ea316c382c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c", "html_url": "https://github.com/rust-lang/rust/commit/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c"}, {"sha": "30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "html_url": "https://github.com/rust-lang/rust/commit/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b"}], "stats": {"total": 1224, "additions": 657, "deletions": 567}, "files": [{"sha": "83dd270c6cec7f2d0e6113820054aeef01a24a8e", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -4,14 +4,13 @@ use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n-    algo::{self, find_covering_element, find_node_at_offset},\n+    algo::{self, find_covering_element, find_node_at_offset, SyntaxRewriter},\n     AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize,\n     TokenAtOffset,\n };\n use ra_text_edit::TextEditBuilder;\n \n use crate::{AssistAction, AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n-use algo::SyntaxRewriter;\n \n #[derive(Clone, Debug)]\n pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n@@ -38,13 +37,10 @@ impl AssistInfo {\n \n     pub(crate) fn into_resolved(self) -> Option<ResolvedAssist> {\n         let label = self.label;\n-        let group_label = self.group_label;\n-        self.action.map(|action| ResolvedAssist { label, group_label, action })\n+        self.action.map(|action| ResolvedAssist { label, action })\n     }\n }\n \n-pub(crate) type AssistHandler = fn(AssistCtx) -> Option<Assist>;\n-\n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///\n /// Assists use a somewhat over-engineered approach, given the current needs. The\n@@ -100,7 +96,7 @@ impl<'a> AssistCtx<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n-        let label = AssistLabel::new(label.into(), id);\n+        let label = AssistLabel::new(id, label.into(), None);\n \n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n@@ -116,7 +112,8 @@ impl<'a> AssistCtx<'a> {\n     }\n \n     pub(crate) fn add_assist_group(self, group_name: impl Into<String>) -> AssistGroup<'a> {\n-        AssistGroup { ctx: self, group_name: group_name.into(), assists: Vec::new() }\n+        let group = GroupLabel(group_name.into());\n+        AssistGroup { ctx: self, group, assists: Vec::new() }\n     }\n \n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n@@ -146,7 +143,7 @@ impl<'a> AssistCtx<'a> {\n \n pub(crate) struct AssistGroup<'a> {\n     ctx: AssistCtx<'a>,\n-    group_name: String,\n+    group: GroupLabel,\n     assists: Vec<AssistInfo>,\n }\n \n@@ -157,9 +154,9 @@ impl<'a> AssistGroup<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) {\n-        let label = AssistLabel::new(label.into(), id);\n+        let label = AssistLabel::new(id, label.into(), Some(self.group.clone()));\n \n-        let mut info = AssistInfo::new(label).with_group(GroupLabel(self.group_name.clone()));\n+        let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n             let action = {\n                 let mut edit = ActionBuilder::new(&self.ctx);"}, {"sha": "f627f31dcd5290d1f87c7c28284e434517c8a087", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -30,6 +30,10 @@ fn check(assist_id: &str, before: &str, after: &str) {\n             )\n         });\n \n-    let actual = assist.action.edit.apply(&before);\n+    let actual = {\n+        let mut actual = before.clone();\n+        assist.action.edit.apply(&mut actual);\n+        actual\n+    };\n     assert_eq_text!(after, &actual);\n }"}, {"sha": "e47feda71f2c8f8af36a0c2826dab42c212b09b1", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n \n use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-    utils::{get_missing_impl_items, resolve_target_trait},\n+    utils::{get_missing_assoc_items, resolve_target_trait},\n     Assist, AssistCtx, AssistId,\n };\n \n@@ -112,25 +112,25 @@ fn add_missing_impl_members_inner(\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_node)?;\n \n-    let def_name = |item: &ast::ImplItem| -> Option<SmolStr> {\n+    let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n         match item {\n-            ast::ImplItem::FnDef(def) => def.name(),\n-            ast::ImplItem::TypeAliasDef(def) => def.name(),\n-            ast::ImplItem::ConstDef(def) => def.name(),\n+            ast::AssocItem::FnDef(def) => def.name(),\n+            ast::AssocItem::TypeAliasDef(def) => def.name(),\n+            ast::AssocItem::ConstDef(def) => def.name(),\n         }\n         .map(|it| it.text().clone())\n     };\n \n-    let missing_items = get_missing_impl_items(&ctx.sema, &impl_node)\n+    let missing_items = get_missing_assoc_items(&ctx.sema, &impl_node)\n         .iter()\n         .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::ImplItem::FnDef(i.source(ctx.db).value),\n-            hir::AssocItem::TypeAlias(i) => ast::ImplItem::TypeAliasDef(i.source(ctx.db).value),\n-            hir::AssocItem::Const(i) => ast::ImplItem::ConstDef(i.source(ctx.db).value),\n+            hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {\n-            ast::ImplItem::FnDef(def) => match mode {\n+            ast::AssocItem::FnDef(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n             },\n@@ -145,7 +145,7 @@ fn add_missing_impl_members_inner(\n     let sema = ctx.sema;\n \n     ctx.add_assist(AssistId(assist_id), label, |edit| {\n-        let n_existing_items = impl_item_list.impl_items().count();\n+        let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = sema.scope_for_def(trait_);\n         let target_scope = sema.scope(impl_item_list.syntax());\n         let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n@@ -154,13 +154,13 @@ fn add_missing_impl_members_inner(\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n             .map(|it| match it {\n-                ast::ImplItem::FnDef(def) => ast::ImplItem::FnDef(add_body(def)),\n+                ast::AssocItem::FnDef(def) => ast::AssocItem::FnDef(add_body(def)),\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n         let new_impl_item_list = impl_item_list.append_items(items);\n         let cursor_position = {\n-            let first_new_item = new_impl_item_list.impl_items().nth(n_existing_items).unwrap();\n+            let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n             first_new_item.syntax().text_range().start()\n         };\n "}, {"sha": "e8a36c7de99bee6287f7db88f0f8741c1b76ef4c", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -162,8 +162,8 @@ fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<a\n \n fn has_new_fn(imp: &ast::ImplDef) -> bool {\n     if let Some(il) = imp.item_list() {\n-        for item in il.impl_items() {\n-            if let ast::ImplItem::FnDef(f) = item {\n+        for item in il.assoc_items() {\n+            if let ast::AssocItem::FnDef(f) = item {\n                 if let Some(name) = f.name() {\n                     if name.text().eq_ignore_ascii_case(\"new\") {\n                         return true;"}, {"sha": "1cd532e801d3395c62076102b9cbe5f4b29f0627", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -47,8 +47,7 @@ fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n             return None;\n         }\n         (vis_offset(&parent), keyword.text_range())\n-    } else {\n-        let field_name: ast::Name = ctx.find_node_at_offset()?;\n+    } else if let Some(field_name) = ctx.find_node_at_offset::<ast::Name>() {\n         let field = field_name.syntax().ancestors().find_map(ast::RecordFieldDef::cast)?;\n         if field.name()? != field_name {\n             tested_by!(change_visibility_field_false_positive);\n@@ -58,6 +57,13 @@ fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n             return None;\n         }\n         (vis_offset(field.syntax()), field_name.syntax().text_range())\n+    } else if let Some(field) = ctx.find_node_at_offset::<ast::TupleFieldDef>() {\n+        if field.visibility().is_some() {\n+            return None;\n+        }\n+        (vis_offset(field.syntax()), field.syntax().text_range())\n+    } else {\n+        return None;\n     };\n \n     ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", |edit| {\n@@ -129,7 +135,8 @@ mod tests {\n             change_visibility,\n             r\"struct S { <|>field: u32 }\",\n             r\"struct S { <|>pub(crate) field: u32 }\",\n-        )\n+        );\n+        check_assist(change_visibility, r\"struct S ( <|>u32 )\", r\"struct S ( <|>pub(crate) u32 )\");\n     }\n \n     #[test]"}, {"sha": "0f94f5ee89dde3fd7e227b01701633eb6d03fe66", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -17,13 +17,13 @@ mod doc_tests;\n pub mod utils;\n pub mod ast_transform;\n \n+use hir::Semantics;\n use ra_db::{FileId, FileRange};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextSize};\n use ra_text_edit::TextEdit;\n \n-pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n-use hir::Semantics;\n+pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -32,19 +32,20 @@ pub struct AssistId(pub &'static str);\n \n #[derive(Debug, Clone)]\n pub struct AssistLabel {\n+    pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n-    pub id: AssistId,\n+    pub group: Option<GroupLabel>,\n }\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n impl AssistLabel {\n-    pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n+    pub(crate) fn new(id: AssistId, label: String, group: Option<GroupLabel>) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { label, id }\n+        AssistLabel { id, label, group }\n     }\n }\n \n@@ -60,7 +61,6 @@ pub struct AssistAction {\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub group_label: Option<GroupLabel>,\n     pub action: AssistAction,\n }\n \n@@ -109,7 +109,9 @@ pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssi\n }\n \n mod handlers {\n-    use crate::AssistHandler;\n+    use crate::{Assist, AssistCtx};\n+\n+    pub(crate) type Handler = fn(AssistCtx) -> Option<Assist>;\n \n     mod add_custom_impl;\n     mod add_derive;\n@@ -145,12 +147,13 @@ mod handlers {\n     mod reorder_fields;\n     mod unwrap_block;\n \n-    pub(crate) fn all() -> &'static [AssistHandler] {\n+    pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_custom_impl::add_custom_impl,\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n+            add_from_impl_for_enum::add_from_impl_for_enum,\n             add_function::add_function,\n             add_impl::add_impl,\n             add_new::add_new,\n@@ -176,17 +179,18 @@ mod handlers {\n             raw_string::remove_hash,\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n+            reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n-            add_from_impl_for_enum::add_from_impl_for_enum,\n             unwrap_block::unwrap_block,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n-            reorder_fields::reorder_fields,\n+            // Are you sure you want to add new assist here, and not to the\n+            // sorted list above?\n         ]\n     }\n }\n@@ -195,12 +199,12 @@ mod handlers {\n mod helpers {\n     use std::sync::Arc;\n \n+    use hir::Semantics;\n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n     use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n-    use crate::{AssistCtx, AssistFile, AssistHandler};\n-    use hir::Semantics;\n+    use crate::{handlers::Handler, AssistCtx, AssistFile};\n \n     pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -210,22 +214,18 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(\n-        assist: AssistHandler,\n-        ra_fixture_before: &str,\n-        ra_fixture_after: &str,\n-    ) {\n+    pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n         check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use\n     // `extract_ranges` and mark the target as `<target> </target>` in the\n     // fixuture?\n-    pub(crate) fn check_assist_target(assist: AssistHandler, ra_fixture: &str, target: &str) {\n+    pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n         check(assist, ra_fixture, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, ra_fixture: &str) {\n+    pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n         check(assist, ra_fixture, ExpectedResult::NotApplicable);\n     }\n \n@@ -235,7 +235,7 @@ mod helpers {\n         Target(&'a str),\n     }\n \n-    fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n+    fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n         let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n             if before.contains(\"//-\") {\n                 let (mut db, position) = RootDatabase::with_position(before);\n@@ -261,13 +261,13 @@ mod helpers {\n             (Some(assist), ExpectedResult::After(after)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n \n-                let assisted_file_text = if let AssistFile::TargetFile(file_id) = action.file {\n+                let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n                     db.file_text(file_id).as_ref().to_owned()\n                 } else {\n                     text_without_caret\n                 };\n+                action.edit.apply(&mut actual);\n \n-                let mut actual = action.edit.apply(&assisted_file_text);\n                 match action.cursor_position {\n                     None => {\n                         if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {"}, {"sha": "2f15a3f1506499591b252521582bca9d796c4b1b", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::FxHashSet;\n \n pub(crate) use insert_use::insert_use_statement;\n \n-pub fn get_missing_impl_items(\n+pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n     impl_def: &ast::ImplDef,\n ) -> Vec<hir::AssocItem> {\n@@ -23,21 +23,21 @@ pub fn get_missing_impl_items(\n     let mut impl_type = FxHashSet::default();\n \n     if let Some(item_list) = impl_def.item_list() {\n-        for item in item_list.impl_items() {\n+        for item in item_list.assoc_items() {\n             match item {\n-                ast::ImplItem::FnDef(f) => {\n+                ast::AssocItem::FnDef(f) => {\n                     if let Some(n) = f.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::ImplItem::TypeAliasDef(t) => {\n+                ast::AssocItem::TypeAliasDef(t) => {\n                     if let Some(n) = t.name() {\n                         impl_type.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::ImplItem::ConstDef(c) => {\n+                ast::AssocItem::ConstDef(c) => {\n                     if let Some(n) = c.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }"}, {"sha": "f27252949bd442dd81937abf56db02854519e5fa", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -24,7 +24,7 @@ pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum FlycheckConfig {\n-    CargoCommand { command: String, all_targets: bool, extra_args: Vec<String> },\n+    CargoCommand { command: String, all_targets: bool, all_features: bool, extra_args: Vec<String> },\n     CustomCommand { command: String, args: Vec<String> },\n }\n \n@@ -215,14 +215,17 @@ impl FlycheckThread {\n         self.check_process = None;\n \n         let mut cmd = match &self.config {\n-            FlycheckConfig::CargoCommand { command, all_targets, extra_args } => {\n+            FlycheckConfig::CargoCommand { command, all_targets, all_features, extra_args } => {\n                 let mut cmd = Command::new(cargo_binary());\n                 cmd.arg(command);\n                 cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n                 cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n                 if *all_targets {\n                     cmd.arg(\"--all-targets\");\n                 }\n+                if *all_features {\n+                    cmd.arg(\"--all-features\");\n+                }\n                 cmd.args(extra_args);\n                 cmd\n             }"}, {"sha": "5f480c3040d79cc8def014f8b9754669a6d26bd3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -1211,7 +1211,7 @@ impl Type {\n \n     // This would be nicer if it just returned an iterator, but that runs into\n     // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n-    pub fn iterate_impl_items<T>(\n+    pub fn iterate_assoc_items<T>(\n         self,\n         db: &dyn HirDatabase,\n         krate: Crate,"}, {"sha": "2bc34d449f2fd8b9404e9b59762d3cbe8124f521", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -118,11 +118,12 @@ fn lower_enum(\n     module_id: ModuleId,\n ) {\n     let expander = CfgExpander::new(db, ast.file_id, module_id.krate);\n-    let variants =\n-        ast.value.variant_list().into_iter().flat_map(|it| it.variants()).filter(|var| {\n-            let attrs = expander.parse_attrs(var);\n-            expander.is_cfg_enabled(&attrs)\n-        });\n+    let variants = ast\n+        .value\n+        .variant_list()\n+        .into_iter()\n+        .flat_map(|it| it.variants())\n+        .filter(|var| expander.is_cfg_enabled(var));\n     for var in variants {\n         trace.alloc(\n             || var.clone(),\n@@ -215,8 +216,7 @@ fn lower_struct(\n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n-                let attrs = expander.parse_attrs(&fd);\n-                if !expander.is_cfg_enabled(&attrs) {\n+                if !expander.is_cfg_enabled(&fd) {\n                     continue;\n                 }\n \n@@ -233,8 +233,7 @@ fn lower_struct(\n         }\n         ast::StructKind::Record(fl) => {\n             for fd in fl.fields() {\n-                let attrs = expander.parse_attrs(&fd);\n-                if !expander.is_cfg_enabled(&attrs) {\n+                if !expander.is_cfg_enabled(&fd) {\n                     continue;\n                 }\n "}, {"sha": "f5a7305dc0905082ad22965377033d8d3c7a97f4", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -60,7 +60,8 @@ impl CfgExpander {\n         Attrs::new(owner, &self.hygiene)\n     }\n \n-    pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n+    pub(crate) fn is_cfg_enabled(&self, owner: &dyn ast::AttrsOwner) -> bool {\n+        let attrs = self.parse_attrs(owner);\n         attrs.is_cfg_enabled(&self.cfg_options)\n     }\n }\n@@ -141,12 +142,8 @@ impl Expander {\n         InFile { file_id: self.current_file_id, value }\n     }\n \n-    pub(crate) fn parse_attrs(&self, owner: &dyn ast::AttrsOwner) -> Attrs {\n-        self.cfg_expander.parse_attrs(owner)\n-    }\n-\n-    pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        self.cfg_expander.is_cfg_enabled(attrs)\n+    pub(crate) fn is_cfg_enabled(&self, owner: &dyn ast::AttrsOwner) -> bool {\n+        self.cfg_expander.is_cfg_enabled(owner)\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {"}, {"sha": "443b057abeab78d61cfc1695bf7ba44dcef81a05", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -162,8 +162,7 @@ impl ExprCollector<'_> {\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n         let syntax_ptr = AstPtr::new(&expr);\n-        let attrs = self.expander.parse_attrs(&expr);\n-        if !self.expander.is_cfg_enabled(&attrs) {\n+        if !self.expander.is_cfg_enabled(&expr) {\n             return self.missing_expr();\n         }\n         match expr {\n@@ -329,8 +328,7 @@ impl ExprCollector<'_> {\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n                         .filter_map(|field| {\n-                            let attrs = self.expander.parse_attrs(&field);\n-                            if !self.expander.is_cfg_enabled(&attrs) {\n+                            if !self.expander.is_cfg_enabled(&field) {\n                                 return None;\n                             }\n                             let name = field.field_name()?.as_name();\n@@ -575,9 +573,16 @@ impl ExprCollector<'_> {\n             self.body.item_scope.define_def(def);\n             if let Some(name) = name {\n                 let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n-                self.body\n-                    .item_scope\n-                    .push_res(name.as_name(), crate::per_ns::PerNs::from_def(def, vis));\n+                let has_constructor = match def {\n+                    ModuleDefId::AdtId(AdtId::StructId(s)) => {\n+                        self.db.struct_data(s).variant_data.kind() != StructKind::Record\n+                    }\n+                    _ => true,\n+                };\n+                self.body.item_scope.push_res(\n+                    name.as_name(),\n+                    crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n+                );\n             }\n         }\n     }"}, {"sha": "e7eb2bb1194b0f3bbf5bfac374f42bf7c387af32", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n };\n use ra_prof::profile;\n use ra_syntax::ast::{\n-    self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner, TypeBoundsOwner,\n+    self, AssocItem, AstNode, ModuleItemOwner, NameOwner, TypeAscriptionOwner, TypeBoundsOwner,\n     VisibilityOwner,\n };\n \n@@ -164,7 +164,7 @@ impl TraitData {\n             items.extend(collect_items(\n                 db,\n                 &mut expander,\n-                item_list.impl_items(),\n+                item_list.assoc_items(),\n                 src.file_id,\n                 container,\n             ));\n@@ -219,7 +219,7 @@ impl ImplData {\n         if let Some(item_list) = src.value.item_list() {\n             let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n             items.extend(\n-                collect_items(db, &mut expander, item_list.impl_items(), src.file_id, container)\n+                collect_items(db, &mut expander, item_list.assoc_items(), src.file_id, container)\n                     .into_iter()\n                     .map(|(_, item)| item),\n             );\n@@ -304,7 +304,7 @@ fn collect_items_in_macro(\n         let mut res = collect_items(\n             db,\n             expander,\n-            items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n+            items.value.items().filter_map(|it| AssocItem::cast(it.syntax().clone())),\n             items.file_id,\n             container,\n         );\n@@ -325,31 +325,30 @@ fn collect_items_in_macro(\n fn collect_items(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,\n-    impl_items: impl Iterator<Item = ImplItem>,\n+    assoc_items: impl Iterator<Item = AssocItem>,\n     file_id: crate::HirFileId,\n     container: AssocContainerId,\n ) -> Vec<(Name, AssocItemId)> {\n     let items = db.ast_id_map(file_id);\n \n-    impl_items\n+    assoc_items\n         .filter_map(|item_node| match item_node {\n-            ast::ImplItem::FnDef(it) => {\n+            ast::AssocItem::FnDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n-                let attrs = expander.parse_attrs(&it);\n-                if !expander.is_cfg_enabled(&attrs) {\n+                if !expander.is_cfg_enabled(&it) {\n                     return None;\n                 }\n                 let def = FunctionLoc { container, ast_id: AstId::new(file_id, items.ast_id(&it)) }\n                     .intern(db);\n                 Some((name, def.into()))\n             }\n-            ast::ImplItem::ConstDef(it) => {\n+            ast::AssocItem::ConstDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                 let def = ConstLoc { container, ast_id: AstId::new(file_id, items.ast_id(&it)) }\n                     .intern(db);\n                 Some((name, def.into()))\n             }\n-            ast::ImplItem::TypeAliasDef(it) => {\n+            ast::AssocItem::TypeAliasDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                 let def =\n                     TypeAliasLoc { container, ast_id: AstId::new(file_id, items.ast_id(&it)) }"}, {"sha": "fc15948adf4d0aa5d660b0f638dd58d87a6fbd27", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -151,13 +151,20 @@ impl ItemScope {\n }\n \n impl PerNs {\n-    pub(crate) fn from_def(def: ModuleDefId, v: Visibility) -> PerNs {\n+    pub(crate) fn from_def(def: ModuleDefId, v: Visibility, has_constructor: bool) -> PerNs {\n         match def {\n             ModuleDefId::ModuleId(_) => PerNs::types(def, v),\n             ModuleDefId::FunctionId(_) => PerNs::values(def, v),\n             ModuleDefId::AdtId(adt) => match adt {\n-                AdtId::StructId(_) | AdtId::UnionId(_) => PerNs::both(def, def, v),\n+                AdtId::UnionId(_) => PerNs::types(def, v),\n                 AdtId::EnumId(_) => PerNs::types(def, v),\n+                AdtId::StructId(_) => {\n+                    if has_constructor {\n+                        PerNs::both(def, def, v)\n+                    } else {\n+                        PerNs::types(def, v)\n+                    }\n+                }\n             },\n             ModuleDefId::EnumVariantId(_) => PerNs::both(def, def, v),\n             ModuleDefId::ConstId(_) | ModuleDefId::StaticId(_) => PerNs::values(def, v),"}, {"sha": "db994122ae98bb6ce2d78dc28556990e08965d65", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -830,7 +830,7 @@ impl ModCollector<'_, '_> {\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n         let def: ModuleDefId = module.into();\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis);\n+        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis, false))], vis);\n         res\n     }\n \n@@ -844,14 +844,17 @@ impl ModCollector<'_, '_> {\n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n         let vis = &def.visibility;\n+        let mut has_constructor = false;\n+\n         let def: ModuleDefId = match def.kind {\n             raw::DefKind::Function(ast_id) => FunctionLoc {\n                 container: container.into(),\n                 ast_id: AstId::new(self.file_id, ast_id),\n             }\n             .intern(self.def_collector.db)\n             .into(),\n-            raw::DefKind::Struct(ast_id) => {\n+            raw::DefKind::Struct(ast_id, mode) => {\n+                has_constructor = mode != raw::StructDefKind::Record;\n                 StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db)\n                     .into()\n@@ -894,7 +897,11 @@ impl ModCollector<'_, '_> {\n             .def_map\n             .resolve_visibility(self.def_collector.db, self.module_id, vis)\n             .unwrap_or(Visibility::Public);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis)\n+        self.def_collector.update(\n+            self.module_id,\n+            &[(name, PerNs::from_def(def, vis, has_constructor))],\n+            vis,\n+        )\n     }\n \n     fn collect_derives(&mut self, attrs: &Attrs, def: &raw::DefData) {"}, {"sha": "f2716a2950b1fbf2075189fc16134996eac0660f", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -155,10 +155,17 @@ pub(super) struct DefData {\n     pub(super) visibility: RawVisibility,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub(super) enum StructDefKind {\n+    Record,\n+    Tuple,\n+    Unit,\n+}\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n-    Struct(FileAstId<ast::StructDef>),\n+    Struct(FileAstId<ast::StructDef>, StructDefKind),\n     Union(FileAstId<ast::UnionDef>),\n     Enum(FileAstId<ast::EnumDef>),\n     Const(FileAstId<ast::ConstDef>),\n@@ -171,7 +178,7 @@ impl DefKind {\n     pub fn ast_id(&self) -> FileAstId<ast::ModuleItem> {\n         match self {\n             DefKind::Function(it) => it.upcast(),\n-            DefKind::Struct(it) => it.upcast(),\n+            DefKind::Struct(it, _) => it.upcast(),\n             DefKind::Union(it) => it.upcast(),\n             DefKind::Enum(it) => it.upcast(),\n             DefKind::Const(it) => it.upcast(),\n@@ -236,9 +243,14 @@ impl RawItemsCollector {\n                 return;\n             }\n             ast::ModuleItem::StructDef(it) => {\n+                let kind = match it.kind() {\n+                    ast::StructKind::Record(_) => StructDefKind::Record,\n+                    ast::StructKind::Tuple(_) => StructDefKind::Tuple,\n+                    ast::StructKind::Unit => StructDefKind::Unit,\n+                };\n                 let id = self.source_ast_id_map.ast_id(&it);\n                 let name = it.name();\n-                (DefKind::Struct(id), name)\n+                (DefKind::Struct(id, kind), name)\n             }\n             ast::ModuleItem::UnionDef(it) => {\n                 let id = self.source_ast_id_map.ast_id(&it);"}, {"sha": "1b66c1aacfabfd1a837223ff665d191f81437f64", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -67,7 +67,7 @@ fn crate_def_map_smoke_test() {\n         \u22eeBaz: t v\n         \u22eeE: t\n         \u22eeEXT: v\n-        \u22eeU: t v\n+        \u22eeU: t\n         \u22eeext: v\n     \"###)\n }"}, {"sha": "40289e3ca529c035817c549b3c9bed5a09b3d5fe", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -19,12 +19,12 @@ fn macro_rules_are_globally_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeFoo: t v\n+   \u22eeFoo: t\n    \u22eenested: t\n    \u22ee\n    \u22eecrate::nested\n-   \u22eeBar: t v\n-   \u22eeBaz: t v\n+   \u22eeBar: t\n+   \u22eeBaz: t\n     \"###);\n }\n \n@@ -91,13 +91,13 @@ fn macro_rules_from_other_crates_are_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -124,13 +124,13 @@ fn macro_rules_export_with_local_inner_macros_are_visible() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -161,13 +161,13 @@ fn local_inner_macros_makes_local_macros_usable() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n+   \u22eeBar: t\n+   \u22eeFoo: t\n    \u22eebar: t\n     \"###);\n }\n@@ -204,7 +204,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n-   \u22eeFoo: t v\n+   \u22eeFoo: t\n    \u22eebar: m\n    \u22eefoo: m\n     \"###);"}, {"sha": "07398ddcc57ee066fcec7c05973b2535ff588041", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -269,7 +269,7 @@ fn test() { S.foo()<|>; }\n }\n \n #[test]\n-fn infer_impl_items_generated_by_macros() {\n+fn infer_assoc_items_generated_by_macros() {\n     let t = type_at(\n         r#\"\n //- /main.rs\n@@ -288,7 +288,7 @@ fn test() { S.foo()<|>; }\n }\n \n #[test]\n-fn infer_impl_items_generated_by_macros_chain() {\n+fn infer_assoc_items_generated_by_macros_chain() {\n     let t = type_at(\n         r#\"\n //- /main.rs"}, {"sha": "115ad83289156fd0d4cb990feccb64909e42dec9", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -534,6 +534,35 @@ fn foo(b: Bar) {\n     );\n }\n \n+#[test]\n+fn issue_4235_name_conflicts() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct FOO {}\n+static FOO:FOO = FOO {};\n+\n+impl FOO {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let a = &FOO;\n+    a.foo();\n+}\n+\"#), @r###\"\n+    32..38 'FOO {}': FOO\n+    64..68 'self': &FOO\n+    70..72 '{}': ()\n+    86..120 '{     ...o(); }': ()\n+    96..97 'a': &FOO\n+    100..104 '&FOO': &FOO\n+    101..104 'FOO': FOO\n+    110..111 'a': &FOO\n+    110..117 'a.foo()': ()\n+\"###\n+    );\n+}\n+\n #[test]\n fn issue_4053_diesel_where_clauses() {\n     assert_snapshot!("}, {"sha": "389339a03446d0da16a4bb940373c6f186e22673", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_assists::{resolved_assists, AssistAction, AssistLabel};\n+use ra_assists::{resolved_assists, AssistAction};\n use ra_db::{FilePosition, FileRange};\n use ra_ide_db::RootDatabase;\n \n@@ -21,27 +21,22 @@ pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;\n-            let assist_label = &assist.label;\n             Assist {\n-                id: assist_label.id,\n-                label: assist_label.label.clone(),\n-                group_label: assist.group_label.map(|it| it.0),\n-                source_change: action_to_edit(assist.action, file_id, assist_label),\n+                id: assist.label.id,\n+                label: assist.label.label.clone(),\n+                group_label: assist.label.group.map(|it| it.0),\n+                source_change: action_to_edit(assist.action, file_id, assist.label.label.clone()),\n             }\n         })\n         .collect()\n }\n \n-fn action_to_edit(\n-    action: AssistAction,\n-    file_id: FileId,\n-    assist_label: &AssistLabel,\n-) -> SourceChange {\n+fn action_to_edit(action: AssistAction, file_id: FileId, label: String) -> SourceChange {\n     let file_id = match action.file {\n         ra_assists::AssistFile::TargetFile(it) => it,\n         _ => file_id,\n     };\n     let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-    SourceChange::source_file_edit(assist_label.label.clone(), file_edit)\n+    SourceChange::source_file_edit(label, file_edit)\n         .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))\n }"}, {"sha": "7fcd2252596463380d8d0739791a9cdc9a1578f5", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -84,7 +84,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 });\n \n                 // Iterate assoc types separately\n-                ty.iterate_impl_items(ctx.db, krate, |item| {\n+                ty.iterate_assoc_items(ctx.db, krate, |item| {\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                         return None;\n                     }"}, {"sha": "039df03e0547b3816d2a732e69deb788647f5a96", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -32,7 +32,7 @@\n //! ```\n \n use hir::{self, Docs, HasSource};\n-use ra_assists::utils::get_missing_impl_items;\n+use ra_assists::utils::get_missing_assoc_items;\n use ra_syntax::{\n     ast::{self, edit, ImplDef},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n@@ -50,7 +50,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     if let Some((trigger, impl_def)) = completion_match(ctx) {\n         match trigger.kind() {\n             SyntaxKind::NAME_REF => {\n-                get_missing_impl_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n+                get_missing_assoc_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n                     hir::AssocItem::Function(fn_item) => {\n                         add_function_impl(&trigger, acc, ctx, &fn_item)\n                     }\n@@ -64,34 +64,40 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n             }\n \n             SyntaxKind::FN_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::Function(fn_item) => Some(fn_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_function_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::TYPE_ALIAS_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_type_alias_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::CONST_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::Const(const_item) => Some(const_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::Const(const_item) => Some(const_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_const_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }"}, {"sha": "b6b9627deab555269a6f89a3ab5f487ae910e11d", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n \n@@ -76,7 +76,7 @@ impl<'a> CompletionContext<'a> {\n         // actual completion.\n         let file_with_fake_ident = {\n             let parse = db.parse(position.file_id);\n-            let edit = AtomTextEdit::insert(position.offset, \"intellijRulezz\".to_string());\n+            let edit = Indel::insert(position.offset, \"intellijRulezz\".to_string());\n             parse.reparse(&edit).tree()\n         };\n         let fake_ident_token ="}, {"sha": "383b23ac44e91ab63ea783836d296808c11c7b10", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -62,8 +62,8 @@ impl fmt::Debug for CompletionItem {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut s = f.debug_struct(\"CompletionItem\");\n         s.field(\"label\", &self.label()).field(\"source_range\", &self.source_range());\n-        if self.text_edit().as_atoms().len() == 1 {\n-            let atom = &self.text_edit().as_atoms()[0];\n+        if self.text_edit().as_indels().len() == 1 {\n+            let atom = &self.text_edit().as_indels()[0];\n             s.field(\"delete\", &atom.delete);\n             s.field(\"insert\", &atom.insert);\n         } else {"}, {"sha": "87a0b80f13e6ce7479fa609596e26d361e00a906", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             .unwrap_or_else(|| RelativePath::new(\"\"))\n             .join(&d.candidate);\n         let create_file = FileSystemEdit::CreateFile { source_root, path };\n-        let fix = SourceChange::file_system_edit(\"create module\", create_file);\n+        let fix = SourceChange::file_system_edit(\"Create module\", create_file);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -92,7 +92,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n \n             Some(SourceChange::source_file_edit_from(\n-                \"fill struct fields\",\n+                \"Fill struct fields\",\n                 file_id,\n                 builder.finish(),\n             ))\n@@ -117,7 +117,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let replacement = format!(\"Ok({})\", node.syntax());\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, edit);\n+        let fix = SourceChange::source_file_edit_from(\"Wrap with ok\", file_id, edit);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -199,7 +199,7 @@ fn check_struct_shorthand_initialization(\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(SourceChange::source_file_edit(\n-                        \"use struct shorthand initialization\",\n+                        \"Use struct shorthand initialization\",\n                         SourceFileEdit { file_id, edit },\n                     )),\n                 });\n@@ -241,7 +241,11 @@ mod tests {\n             diagnostics.pop().unwrap_or_else(|| panic!(\"no diagnostics for:\\n{}\\n\", before));\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -256,7 +260,11 @@ mod tests {\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n-        let actual = edit.apply(&target_file_contents);\n+        let actual = {\n+            let mut actual = target_file_contents.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n \n         // Strip indent and empty lines from `after`, to match the behaviour of\n         // `parse_fixture` called from `analysis_and_position`.\n@@ -288,7 +296,11 @@ mod tests {\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -606,7 +618,7 @@ mod tests {\n                 range: 0..8,\n                 fix: Some(\n                     SourceChange {\n-                        label: \"create module\",\n+                        label: \"Create module\",\n                         source_file_edits: [],\n                         file_system_edits: [\n                             CreateFile {\n@@ -655,17 +667,17 @@ mod tests {\n                 range: 224..233,\n                 fix: Some(\n                     SourceChange {\n-                        label: \"fill struct fields\",\n+                        label: \"Fill struct fields\",\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n                                     1,\n                                 ),\n                                 edit: TextEdit {\n-                                    atoms: [\n-                                        AtomTextEdit {\n-                                            delete: 3..9,\n+                                    indels: [\n+                                        Indel {\n                                             insert: \"{a:42, b: ()}\",\n+                                            delete: 3..9,\n                                         },\n                                     ],\n                                 },"}, {"sha": "d3af780c450f59e943b64efcf4819db0c4c4f7e1", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -569,7 +569,11 @@ fn foo() {\n         let (sel, before) = extract_range(before);\n         let parse = SourceFile::parse(&before);\n         let result = join_lines(&parse.tree(), sel);\n-        let actual = result.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            result.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n "}, {"sha": "0398d53bc92e64865c0d3a727af6761d2b790211", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -122,7 +122,7 @@ fn rename_mod(\n         source_file_edits.extend(ref_edits);\n     }\n \n-    Some(SourceChange::from_edits(\"rename\", source_file_edits, file_system_edits))\n+    Some(SourceChange::from_edits(\"Rename\", source_file_edits, file_system_edits))\n }\n \n fn rename_reference(\n@@ -141,7 +141,7 @@ fn rename_reference(\n         return None;\n     }\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"rename\", edit)))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"Rename\", edit)))\n }\n \n #[cfg(test)]\n@@ -530,17 +530,17 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -582,17 +582,17 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -665,17 +665,17 @@ mod tests {\n             RangeInfo {\n                 range: 8..11,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 8..11,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 8..11,\n                                     },\n                                 ],\n                             },\n@@ -685,10 +685,10 @@ mod tests {\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 27..30,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 27..30,\n                                     },\n                                 ],\n                             },\n@@ -720,13 +720,13 @@ mod tests {\n         if let Some(change) = source_change {\n             for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n-                for atom in edit.edit.as_atoms() {\n-                    text_edit_builder.replace(atom.delete, atom.insert.clone());\n+                for indel in edit.edit.as_indels() {\n+                    text_edit_builder.replace(indel.delete, indel.insert.clone());\n                 }\n             }\n         }\n-        let result =\n-            text_edit_builder.finish().apply(&*analysis.file_text(file_id.unwrap()).unwrap());\n+        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n+        text_edit_builder.finish().apply(&mut result);\n         assert_eq_text!(expected, &*result);\n     }\n }"}, {"sha": "fa8a9d92c9911a30cb31c951d854a7e069962036", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -9,6 +9,7 @@ use ra_syntax::{\n };\n \n use crate::FileId;\n+use ast::DocCommentsOwner;\n use std::fmt::Display;\n \n #[derive(Debug)]\n@@ -37,6 +38,7 @@ pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n     Bench { test_id: TestId },\n+    DocTest { test_id: TestId },\n     Bin,\n }\n \n@@ -81,6 +83,8 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n             RunnableKind::Test { test_id, attr }\n         } else if fn_def.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n+        } else if has_doc_test(&fn_def) {\n+            RunnableKind::DocTest { test_id }\n         } else {\n             return None;\n         }\n@@ -117,6 +121,10 @@ fn has_test_related_attribute(fn_def: &ast::FnDef) -> bool {\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n+fn has_doc_test(fn_def: &ast::FnDef) -> bool {\n+    fn_def.doc_comment_text().map_or(false, |comment| comment.contains(\"```\"))\n+}\n+\n fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<Runnable> {\n     let has_test_function = module\n         .item_list()?\n@@ -194,6 +202,41 @@ mod tests {\n                 );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        fn main() {}\n+\n+        /// ```\n+        /// let x = 5;\n+        /// ```\n+        fn foo() {}\n+        \"#,\n+        );\n+        let runnables = analysis.runnables(pos.file_id).unwrap();\n+        assert_debug_snapshot!(&runnables,\n+        @r###\"\n+        [\n+            Runnable {\n+                range: 1..21,\n+                kind: Bin,\n+            },\n+            Runnable {\n+                range: 22..64,\n+                kind: DocTest {\n+                    test_id: Path(\n+                        \"foo\",\n+                    ),\n+                },\n+            },\n+        ]\n+        \"###\n+                );\n+    }\n+\n     #[test]\n     fn test_runnables_module() {\n         let (analysis, pos) = analysis_and_position("}, {"sha": "10afd78256ea8679b26b0f9c1a377e6f92052648", "filename": "crates/ra_ide/src/source_change.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsource_change.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -35,8 +35,10 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label,\n     /// containing only the given `SourceFileEdits`.\n     pub(crate) fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+        let label = label.into();\n+        assert!(label.starts_with(char::is_uppercase));\n         SourceChange {\n-            label: label.into(),\n+            label: label,\n             source_file_edits: edits,\n             file_system_edits: vec![],\n             cursor_position: None,"}, {"sha": "8bf52d0fa8277e4a4478e089e507aebc9711ca13", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -401,16 +401,22 @@ fn render_replace(\n     ignored_comments: &Vec<Comment>,\n     template: &SsrTemplate,\n ) -> String {\n-    let mut builder = TextEditBuilder::default();\n-    for element in template.template.descendants() {\n-        if let Some(var) = template.placeholders.get(&element) {\n-            builder.replace(element.text_range(), binding[var].to_string())\n+    let edit = {\n+        let mut builder = TextEditBuilder::default();\n+        for element in template.template.descendants() {\n+            if let Some(var) = template.placeholders.get(&element) {\n+                builder.replace(element.text_range(), binding[var].to_string())\n+            }\n         }\n-    }\n-    for comment in ignored_comments {\n-        builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n-    }\n-    builder.finish().apply(&template.template.text().to_string())\n+        for comment in ignored_comments {\n+            builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n+        }\n+        builder.finish()\n+    };\n+\n+    let mut text = template.template.text().to_string();\n+    edit.apply(&mut text);\n+    text\n }\n \n #[cfg(test)]\n@@ -505,15 +511,19 @@ mod tests {\n         );\n \n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), \"fn main() { bar(1+2); }\");\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, \"fn main() { bar(1+2); }\");\n     }\n \n     fn assert_ssr_transform(query: &str, input: &str, result: &str) {\n         let query: SsrQuery = query.parse().unwrap();\n         let code = SourceFile::parse(input).tree();\n         let matches = find(&query.pattern, code.syntax());\n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), result);\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, result);\n     }\n \n     #[test]"}, {"sha": "48c8fd1f4662d38e8d4ebd6fc7e68cf99fcfe219", "filename": "crates/ra_ide/src/test_utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -13,7 +13,11 @@ pub fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n     let (before_cursor_pos, before) = extract_offset(before);\n     let file = SourceFile::parse(&before).ok().unwrap();\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n-    let actual = result.apply(&before);\n+    let actual = {\n+        let mut actual = before.to_string();\n+        result.apply(&mut actual);\n+        actual\n+    };\n     let actual_cursor_pos =\n         result.apply_to_offset(before_cursor_pos).expect(\"cursor position is affected by the edit\");\n     let actual = add_cursor(&actual, actual_cursor_pos);"}, {"sha": "a03da46938070b8fbd854cadb8be071a549a7a09", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -142,10 +142,13 @@ mod tests {\n     fn do_type_char(char_typed: char, before: &str) -> Option<(String, SingleFileChange)> {\n         let (offset, before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n-        let before = edit.apply(&before);\n+        let mut before = before.to_string();\n+        edit.apply(&mut before);\n         let parse = SourceFile::parse(&before);\n-        on_char_typed_inner(&parse.tree(), offset, char_typed)\n-            .map(|it| (it.edit.apply(&before), it))\n+        on_char_typed_inner(&parse.tree(), offset, char_typed).map(|it| {\n+            it.edit.apply(&mut before);\n+            (before.to_string(), it)\n+        })\n     }\n \n     fn type_char(char_typed: char, before: &str, after: &str) {"}, {"sha": "78a40cc94c44a8dd8dbf29b9f3d9d1ef061e867d", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n \n     Some(\n         SourceChange::source_file_edit(\n-            \"on enter\",\n+            \"On enter\",\n             SourceFileEdit { edit, file_id: position.file_id },\n         )\n         .with_cursor(FilePosition { offset: cursor_position, file_id: position.file_id }),\n@@ -96,7 +96,8 @@ mod tests {\n         let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n \n         assert_eq!(result.source_file_edits.len(), 1);\n-        let actual = result.source_file_edits[0].edit.apply(&before);\n+        let mut actual = before.to_string();\n+        result.source_file_edits[0].edit.apply(&mut actual);\n         let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n         Some(actual)\n     }"}, {"sha": "c7c744fce1ef8db144f1d07ab1bd6cb03b99539d", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -31,9 +31,19 @@ pub(crate) struct Utf16Char {\n }\n \n impl Utf16Char {\n+    /// Returns the length in 8-bit UTF-8 code units.\n     fn len(&self) -> TextSize {\n         self.end - self.start\n     }\n+\n+    /// Returns the length in 16-bit UTF-16 code units.\n+    fn len_utf16(&self) -> usize {\n+        if self.len() == TextSize::from(4) {\n+            2\n+        } else {\n+            1\n+        }\n+    }\n }\n \n impl LineIndex {\n@@ -110,7 +120,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if c.end <= col {\n-                    res -= usize::from(c.len()) - 1;\n+                    res -= usize::from(c.len()) - c.len_utf16();\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -125,7 +135,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if col > u32::from(c.start) {\n-                    col += u32::from(c.len()) - 1;\n+                    col += u32::from(c.len()) - c.len_utf16() as u32;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -204,6 +214,9 @@ const C: char = '\u30e1';\n \n         // UTF-16 to UTF-8\n         assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21));\n+\n+        let col_index = LineIndex::new(\"a\ud801\udc0fb\");\n+        assert_eq!(col_index.utf16_to_utf8_col(0, 3), TextSize::from(5));\n     }\n \n     #[test]"}, {"sha": "7fa6fc448e0e88c441c1493a5c4d152ffad6feb0", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -10,7 +10,7 @@\n use std::convert::TryInto;\n \n use ra_syntax::{TextRange, TextSize};\n-use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_text_edit::{Indel, TextEdit};\n \n use crate::line_index::{LineCol, LineIndex, Utf16Char};\n \n@@ -182,14 +182,14 @@ struct TranslatedEdit<'a> {\n }\n \n struct Edits<'a> {\n-    edits: &'a [AtomTextEdit],\n+    edits: &'a [Indel],\n     current: Option<TranslatedEdit<'a>>,\n     acc_diff: i64,\n }\n \n impl<'a> Edits<'a> {\n     fn from_text_edit(text_edit: &'a TextEdit) -> Edits<'a> {\n-        let mut x = Edits { edits: text_edit.as_atoms(), current: None, acc_diff: 0 };\n+        let mut x = Edits { edits: text_edit.as_indels(), current: None, acc_diff: 0 };\n         x.advance_edit();\n         x\n     }"}, {"sha": "fc4133a6753446ea09e959d57e0492498135cc21", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -63,7 +63,7 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n // * Items(SmallVec<[P<ast::Item>; 1]>)     -> token_tree_to_items\n //\n // * TraitItems(SmallVec<[ast::TraitItem; 1]>)\n-// * ImplItems(SmallVec<[ast::ImplItem; 1]>)\n+// * AssocItems(SmallVec<[ast::AssocItem; 1]>)\n // * ForeignItems(SmallVec<[ast::ForeignItem; 1]>\n \n pub fn token_tree_to_syntax_node("}, {"sha": "59f46a2a05e5b061dd5cd8467d6b84ae6f62ead6", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -56,6 +56,9 @@ pub struct CargoConfig {\n \n     /// Runs cargo check on launch to figure out the correct values of OUT_DIR\n     pub load_out_dirs_from_check: bool,\n+\n+    /// rustc target\n+    pub target: Option<String>,\n }\n \n impl Default for CargoConfig {\n@@ -65,6 +68,7 @@ impl Default for CargoConfig {\n             all_features: true,\n             features: Vec::new(),\n             load_out_dirs_from_check: false,\n+            target: None,\n         }\n     }\n }\n@@ -160,6 +164,9 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n+        if let Some(target) = cargo_features.target.as_ref() {\n+            meta.other_options(&[String::from(\"--filter-platform\"), target.clone()]);\n+        }\n         let meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n         })?;"}, {"sha": "c2b33c1dcaf1b576e3eb4359bb195ca0f5b80b4b", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -543,7 +543,7 @@ impl ProjectWorkspace {\n     }\n }\n \n-pub fn get_rustc_cfg_options() -> CfgOptions {\n+pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n     let mut cfg_options = CfgOptions::default();\n \n     // Some nightly-only cfgs, which are required for stdlib\n@@ -558,10 +558,12 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n \n     match (|| -> Result<String> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let output = Command::new(\"rustc\")\n-            .args(&[\"--print\", \"cfg\", \"-O\"])\n-            .output()\n-            .context(\"Failed to get output from rustc --print cfg -O\")?;\n+        let mut cmd = Command::new(\"rustc\");\n+        cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n+        if let Some(target) = target {\n+            cmd.args(&[\"--target\", target.as_str()]);\n+        }\n+        let output = cmd.output().context(\"Failed to get output from rustc --print cfg -O\")?;\n         if !output.status.success() {\n             bail!(\n                 \"rustc --print cfg -O exited with exit code ({})\","}, {"sha": "3e6dd6061cd66331ffa5e60c46ae43d433fe2d7b", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -79,7 +79,7 @@ where\n \n impl ast::ItemList {\n     #[must_use]\n-    pub fn append_items(&self, items: impl IntoIterator<Item = ast::ImplItem>) -> ast::ItemList {\n+    pub fn append_items(&self, items: impl IntoIterator<Item = ast::AssocItem>) -> ast::ItemList {\n         let mut res = self.clone();\n         if !self.syntax().text().contains_char('\\n') {\n             res = make_multiline(res);\n@@ -89,8 +89,8 @@ impl ast::ItemList {\n     }\n \n     #[must_use]\n-    pub fn append_item(&self, item: ast::ImplItem) -> ast::ItemList {\n-        let (indent, position) = match self.impl_items().last() {\n+    pub fn append_item(&self, item: ast::AssocItem) -> ast::ItemList {\n+        let (indent, position) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n                 InsertPosition::After(it.syntax().clone().into()),"}, {"sha": "b00c156081e4b7aeaf2b2bc09f210cff282a6a22", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -196,7 +196,7 @@ pub struct ItemList {\n impl ast::ModuleItemOwner for ItemList {}\n impl ItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn impl_items(&self) -> AstChildren<ImplItem> { support::children(&self.syntax) }\n+    pub fn assoc_items(&self) -> AstChildren<AssocItem> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n \n@@ -1429,13 +1429,13 @@ impl ast::AttrsOwner for ModuleItem {}\n impl ast::VisibilityOwner for ModuleItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ImplItem {\n+pub enum AssocItem {\n     FnDef(FnDef),\n     TypeAliasDef(TypeAliasDef),\n     ConstDef(ConstDef),\n }\n-impl ast::NameOwner for ImplItem {}\n-impl ast::AttrsOwner for ImplItem {}\n+impl ast::NameOwner for AssocItem {}\n+impl ast::AttrsOwner for AssocItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n@@ -3167,16 +3167,16 @@ impl AstNode for ModuleItem {\n         }\n     }\n }\n-impl From<FnDef> for ImplItem {\n-    fn from(node: FnDef) -> ImplItem { ImplItem::FnDef(node) }\n+impl From<FnDef> for AssocItem {\n+    fn from(node: FnDef) -> AssocItem { AssocItem::FnDef(node) }\n }\n-impl From<TypeAliasDef> for ImplItem {\n-    fn from(node: TypeAliasDef) -> ImplItem { ImplItem::TypeAliasDef(node) }\n+impl From<TypeAliasDef> for AssocItem {\n+    fn from(node: TypeAliasDef) -> AssocItem { AssocItem::TypeAliasDef(node) }\n }\n-impl From<ConstDef> for ImplItem {\n-    fn from(node: ConstDef) -> ImplItem { ImplItem::ConstDef(node) }\n+impl From<ConstDef> for AssocItem {\n+    fn from(node: ConstDef) -> AssocItem { AssocItem::ConstDef(node) }\n }\n-impl AstNode for ImplItem {\n+impl AstNode for AssocItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             FN_DEF | TYPE_ALIAS_DEF | CONST_DEF => true,\n@@ -3185,18 +3185,18 @@ impl AstNode for ImplItem {\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            FN_DEF => ImplItem::FnDef(FnDef { syntax }),\n-            TYPE_ALIAS_DEF => ImplItem::TypeAliasDef(TypeAliasDef { syntax }),\n-            CONST_DEF => ImplItem::ConstDef(ConstDef { syntax }),\n+            FN_DEF => AssocItem::FnDef(FnDef { syntax }),\n+            TYPE_ALIAS_DEF => AssocItem::TypeAliasDef(TypeAliasDef { syntax }),\n+            CONST_DEF => AssocItem::ConstDef(ConstDef { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            ImplItem::FnDef(it) => &it.syntax,\n-            ImplItem::TypeAliasDef(it) => &it.syntax,\n-            ImplItem::ConstDef(it) => &it.syntax,\n+            AssocItem::FnDef(it) => &it.syntax,\n+            AssocItem::TypeAliasDef(it) => &it.syntax,\n+            AssocItem::ConstDef(it) => &it.syntax,\n         }\n     }\n }\n@@ -3641,7 +3641,7 @@ impl std::fmt::Display for ModuleItem {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ImplItem {\n+impl std::fmt::Display for AssocItem {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "39f9b12ab20b916e1760129ce5940f5e6665537b", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -5,7 +5,7 @@ use std::{\n     str::{self, FromStr},\n };\n \n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{validation, AstNode, SourceFile, TextRange};\n \n@@ -22,7 +22,7 @@ pub fn check_parser(text: &str) {\n #[derive(Debug, Clone)]\n pub struct CheckReparse {\n     text: String,\n-    edit: AtomTextEdit,\n+    edit: Indel,\n     edited_text: String,\n }\n \n@@ -43,7 +43,7 @@ impl CheckReparse {\n             TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n         let edited_text =\n             format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n-        let edit = AtomTextEdit { delete, insert };\n+        let edit = Indel { delete, insert };\n         Some(CheckReparse { text, edit, edited_text })\n     }\n "}, {"sha": "61e686da5e6dc6108a14aa3b3d5054d85dc3af54", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -39,7 +39,7 @@ pub mod fuzz;\n \n use std::{marker::PhantomData, sync::Arc};\n \n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n use stdx::format_to;\n \n use crate::syntax_node::GreenNode;\n@@ -126,13 +126,13 @@ impl Parse<SourceFile> {\n         buf\n     }\n \n-    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n-        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    pub fn reparse(&self, indel: &Indel) -> Parse<SourceFile> {\n+        self.incremental_reparse(indel).unwrap_or_else(|| self.full_reparse(indel))\n     }\n \n-    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse<SourceFile>> {\n+    fn incremental_reparse(&self, indel: &Indel) -> Option<Parse<SourceFile>> {\n         // FIXME: validation errors are not handled here\n-        parsing::incremental_reparse(self.tree().syntax(), edit, self.errors.to_vec()).map(\n+        parsing::incremental_reparse(self.tree().syntax(), indel, self.errors.to_vec()).map(\n             |(green_node, errors, _reparsed_range)| Parse {\n                 green: green_node,\n                 errors: Arc::new(errors),\n@@ -141,8 +141,9 @@ impl Parse<SourceFile> {\n         )\n     }\n \n-    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n-        let text = edit.apply(self.tree().syntax().text().to_string());\n+    fn full_reparse(&self, indel: &Indel) -> Parse<SourceFile> {\n+        let mut text = self.tree().syntax().text().to_string();\n+        indel.apply(&mut text);\n         SourceFile::parse(&text)\n     }\n }"}, {"sha": "edbc190f855367d2c2c6fd8592bdac0e943e652e", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -7,7 +7,7 @@\n //!     and try to parse only this block.\n \n use ra_parser::Reparser;\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{\n     algo,\n@@ -24,7 +24,7 @@ use crate::{\n \n pub(crate) fn incremental_reparse(\n     node: &SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n     errors: Vec<SyntaxError>,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     if let Some((green, new_errors, old_range)) = reparse_token(node, &edit) {\n@@ -39,7 +39,7 @@ pub(crate) fn incremental_reparse(\n \n fn reparse_token<'node>(\n     root: &'node SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n@@ -88,7 +88,7 @@ fn reparse_token<'node>(\n \n fn reparse_block<'node>(\n     root: &'node SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;\n     let text = get_text_after_edit(node.clone().into(), edit);\n@@ -108,15 +108,15 @@ fn reparse_block<'node>(\n     Some((node.replace_with(green), new_parser_errors, node.text_range()))\n }\n \n-fn get_text_after_edit(element: SyntaxElement, edit: &AtomTextEdit) -> String {\n-    let edit =\n-        AtomTextEdit::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n+fn get_text_after_edit(element: SyntaxElement, edit: &Indel) -> String {\n+    let edit = Indel::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n \n-    let text = match element {\n+    let mut text = match element {\n         NodeOrToken::Token(token) => token.text().to_string(),\n         NodeOrToken::Node(node) => node.text().to_string(),\n     };\n-    edit.apply(text)\n+    edit.apply(&mut text);\n+    text\n }\n \n fn is_contextual_kw(text: &str) -> bool {\n@@ -167,7 +167,7 @@ fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n     range_before_reparse: TextRange,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n \n@@ -198,8 +198,12 @@ mod tests {\n \n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n         let (range, before) = extract_range(before);\n-        let edit = AtomTextEdit::replace(range, replace_with.to_owned());\n-        let after = edit.apply(before.clone());\n+        let edit = Indel::replace(range, replace_with.to_owned());\n+        let after = {\n+            let mut after = before.clone();\n+            edit.apply(&mut after);\n+            after\n+        };\n \n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed: Parse<SourceFile> = {"}, {"sha": "7138bbc65516f6dbd9c067359c678137cdc8c73c", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 127, "deletions": 19, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -1,36 +1,144 @@\n-//! FIXME: write short doc here\n-\n-mod text_edit;\n+//! Representation of a `TextEdit`.\n+//!\n+//! `rust-analyzer` never mutates text itself and only sends diffs to clients,\n+//! so `TextEdit` is the ultimate representation of the work done by\n+//! rust-analyzer.\n \n use text_size::{TextRange, TextSize};\n \n-pub use crate::text_edit::{TextEdit, TextEditBuilder};\n-\n-/// Must not overlap with other `AtomTextEdit`s\n+/// `InsertDelete` -- a single \"atomic\" change to text\n+///\n+/// Must not overlap with other `InDel`s\n #[derive(Debug, Clone)]\n-pub struct AtomTextEdit {\n+pub struct Indel {\n+    pub insert: String,\n     /// Refers to offsets in the original text\n     pub delete: TextRange,\n-    pub insert: String,\n }\n \n-impl AtomTextEdit {\n-    pub fn replace(range: TextRange, replace_with: String) -> AtomTextEdit {\n-        AtomTextEdit { delete: range, insert: replace_with }\n-    }\n+#[derive(Debug, Clone)]\n+pub struct TextEdit {\n+    indels: Vec<Indel>,\n+}\n \n-    pub fn delete(range: TextRange) -> AtomTextEdit {\n-        AtomTextEdit::replace(range, String::new())\n-    }\n+#[derive(Debug, Default)]\n+pub struct TextEditBuilder {\n+    indels: Vec<Indel>,\n+}\n \n-    pub fn insert(offset: TextSize, text: String) -> AtomTextEdit {\n-        AtomTextEdit::replace(TextRange::empty(offset), text)\n+impl Indel {\n+    pub fn insert(offset: TextSize, text: String) -> Indel {\n+        Indel::replace(TextRange::empty(offset), text)\n+    }\n+    pub fn delete(range: TextRange) -> Indel {\n+        Indel::replace(range, String::new())\n+    }\n+    pub fn replace(range: TextRange, replace_with: String) -> Indel {\n+        Indel { delete: range, insert: replace_with }\n     }\n \n-    pub fn apply(&self, mut text: String) -> String {\n+    pub fn apply(&self, text: &mut String) {\n         let start: usize = self.delete.start().into();\n         let end: usize = self.delete.end().into();\n         text.replace_range(start..end, &self.insert);\n-        text\n+    }\n+}\n+\n+impl TextEdit {\n+    pub fn insert(offset: TextSize, text: String) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.insert(offset, text);\n+        builder.finish()\n+    }\n+\n+    pub fn delete(range: TextRange) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.delete(range);\n+        builder.finish()\n+    }\n+\n+    pub fn replace(range: TextRange, replace_with: String) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.replace(range, replace_with);\n+        builder.finish()\n+    }\n+\n+    pub(crate) fn from_indels(mut indels: Vec<Indel>) -> TextEdit {\n+        indels.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n+        for (a1, a2) in indels.iter().zip(indels.iter().skip(1)) {\n+            assert!(a1.delete.end() <= a2.delete.start())\n+        }\n+        TextEdit { indels }\n+    }\n+\n+    pub fn as_indels(&self) -> &[Indel] {\n+        &self.indels\n+    }\n+\n+    pub fn apply(&self, text: &mut String) {\n+        match self.indels.len() {\n+            0 => return,\n+            1 => {\n+                self.indels[0].apply(text);\n+                return;\n+            }\n+            _ => (),\n+        }\n+\n+        let mut total_len = TextSize::of(&*text);\n+        for indel in self.indels.iter() {\n+            total_len += TextSize::of(&indel.insert);\n+            total_len -= indel.delete.end() - indel.delete.start();\n+        }\n+        let mut buf = String::with_capacity(total_len.into());\n+        let mut prev = 0;\n+        for indel in self.indels.iter() {\n+            let start: usize = indel.delete.start().into();\n+            let end: usize = indel.delete.end().into();\n+            if start > prev {\n+                buf.push_str(&text[prev..start]);\n+            }\n+            buf.push_str(&indel.insert);\n+            prev = end;\n+        }\n+        buf.push_str(&text[prev..text.len()]);\n+        assert_eq!(TextSize::of(&buf), total_len);\n+\n+        // FIXME: figure out a way to mutate the text in-place or reuse the\n+        // memory in some other way\n+        *text = buf\n+    }\n+\n+    pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n+        let mut res = offset;\n+        for indel in self.indels.iter() {\n+            if indel.delete.start() >= offset {\n+                break;\n+            }\n+            if offset < indel.delete.end() {\n+                return None;\n+            }\n+            res += TextSize::of(&indel.insert);\n+            res -= indel.delete.len();\n+        }\n+        Some(res)\n+    }\n+}\n+\n+impl TextEditBuilder {\n+    pub fn replace(&mut self, range: TextRange, replace_with: String) {\n+        self.indels.push(Indel::replace(range, replace_with))\n+    }\n+    pub fn delete(&mut self, range: TextRange) {\n+        self.indels.push(Indel::delete(range))\n+    }\n+    pub fn insert(&mut self, offset: TextSize, text: String) {\n+        self.indels.push(Indel::insert(offset, text))\n+    }\n+    pub fn finish(self) -> TextEdit {\n+        TextEdit::from_indels(self.indels)\n+    }\n+    pub fn invalidates_offset(&self, offset: TextSize) -> bool {\n+        self.indels.iter().any(|indel| indel.delete.contains_inclusive(offset))\n     }\n }"}, {"sha": "eabab4b4d117e215f2e35403a52065f3413b83d9", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=0bf02f5ccac99c91f10ef46bb06ff2ea316c382c", "patch": "@@ -1,102 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use crate::AtomTextEdit;\n-\n-use text_size::{TextRange, TextSize};\n-\n-#[derive(Debug, Clone)]\n-pub struct TextEdit {\n-    atoms: Vec<AtomTextEdit>,\n-}\n-\n-#[derive(Debug, Default)]\n-pub struct TextEditBuilder {\n-    atoms: Vec<AtomTextEdit>,\n-}\n-\n-impl TextEditBuilder {\n-    pub fn replace(&mut self, range: TextRange, replace_with: String) {\n-        self.atoms.push(AtomTextEdit::replace(range, replace_with))\n-    }\n-    pub fn delete(&mut self, range: TextRange) {\n-        self.atoms.push(AtomTextEdit::delete(range))\n-    }\n-    pub fn insert(&mut self, offset: TextSize, text: String) {\n-        self.atoms.push(AtomTextEdit::insert(offset, text))\n-    }\n-    pub fn finish(self) -> TextEdit {\n-        TextEdit::from_atoms(self.atoms)\n-    }\n-    pub fn invalidates_offset(&self, offset: TextSize) -> bool {\n-        self.atoms.iter().any(|atom| atom.delete.contains_inclusive(offset))\n-    }\n-}\n-\n-impl TextEdit {\n-    pub fn insert(offset: TextSize, text: String) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.insert(offset, text);\n-        builder.finish()\n-    }\n-\n-    pub fn delete(range: TextRange) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.delete(range);\n-        builder.finish()\n-    }\n-\n-    pub fn replace(range: TextRange, replace_with: String) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.replace(range, replace_with);\n-        builder.finish()\n-    }\n-\n-    pub(crate) fn from_atoms(mut atoms: Vec<AtomTextEdit>) -> TextEdit {\n-        atoms.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n-        for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n-            assert!(a1.delete.end() <= a2.delete.start())\n-        }\n-        TextEdit { atoms }\n-    }\n-\n-    pub fn as_atoms(&self) -> &[AtomTextEdit] {\n-        &self.atoms\n-    }\n-\n-    pub fn apply(&self, text: &str) -> String {\n-        let mut total_len = TextSize::of(text);\n-        for atom in self.atoms.iter() {\n-            total_len += TextSize::of(&atom.insert);\n-            total_len -= atom.delete.end() - atom.delete.start();\n-        }\n-        let mut buf = String::with_capacity(total_len.into());\n-        let mut prev = 0;\n-        for atom in self.atoms.iter() {\n-            let start: usize = atom.delete.start().into();\n-            let end: usize = atom.delete.end().into();\n-            if start > prev {\n-                buf.push_str(&text[prev..start]);\n-            }\n-            buf.push_str(&atom.insert);\n-            prev = end;\n-        }\n-        buf.push_str(&text[prev..text.len()]);\n-        assert_eq!(TextSize::of(&buf), total_len);\n-        buf\n-    }\n-\n-    pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n-        let mut res = offset;\n-        for atom in self.atoms.iter() {\n-            if atom.delete.start() >= offset {\n-                break;\n-            }\n-            if offset < atom.delete.end() {\n-                return None;\n-            }\n-            res += TextSize::of(&atom.insert);\n-            res -= atom.delete.len();\n-        }\n-        Some(res)\n-    }\n-}"}, {"sha": "110c9a44297515fc699d322e6052aa835634e431", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -17,10 +17,10 @@ pub fn server_capabilities() -> ServerCapabilities {\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n-            change: Some(if env::var(\"RA_PROFILE\").is_ok() {\n-                TextDocumentSyncKind::Incremental\n-            } else {\n+            change: Some(if env::var(\"RA_NO_INCREMENTAL_SYNC\").is_ok() {\n                 TextDocumentSyncKind::Full\n+            } else {\n+                TextDocumentSyncKind::Incremental\n             }),\n             will_save: None,\n             will_save_wait_until: None,"}, {"sha": "5e5a17943d2aee5bc3d2cd5b7cb89132dcaf3629", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -27,40 +27,49 @@ impl CargoTargetSpec {\n             RunnableKind::Test { test_id, attr } => {\n                 args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n                 }\n                 extra_args.push(\"--nocapture\".to_string());\n                 if attr.ignore {\n-                    extra_args.push(\"--ignored\".to_string())\n+                    extra_args.push(\"--ignored\".to_string());\n                 }\n             }\n             RunnableKind::TestMod { path } => {\n                 args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(path.to_string());\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bench { test_id } => {\n                 args.push(\"bench\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n                 }\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n+            RunnableKind::DocTest { test_id } => {\n+                args.push(\"test\".to_string());\n+                args.push(\"--doc\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut args, kind);\n+                }\n+                extra_args.push(test_id.to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n+            }\n             RunnableKind::Bin => {\n                 args.push(\"run\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n             }\n         }\n@@ -91,9 +100,14 @@ impl CargoTargetSpec {\n         Ok(res)\n     }\n \n-    pub(crate) fn push_to(self, buf: &mut Vec<String>) {\n+    pub(crate) fn push_to(self, buf: &mut Vec<String>, kind: &RunnableKind) {\n         buf.push(\"--package\".to_string());\n         buf.push(self.package);\n+\n+        // Can't mix --doc with other target flags\n+        if let RunnableKind::DocTest { .. } = kind {\n+            return;\n+        }\n         match self.target_kind {\n             TargetKind::Bin => {\n                 buf.push(\"--bin\".to_string());"}, {"sha": "023ced6cfb9f02f135d5614559ef24117057211e", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -149,7 +149,7 @@ pub(crate) fn load(\n \n     // FIXME: cfg options?\n     let default_cfg_options = {\n-        let mut opts = get_rustc_cfg_options();\n+        let mut opts = get_rustc_cfg_options(None);\n         opts.insert_atom(\"test\".into());\n         opts.insert_atom(\"debug_assertion\".into());\n         opts"}, {"sha": "ccc38e3bbac701c71677579c71ab2a3bb6b99c44", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -89,6 +89,7 @@ impl Default for Config {\n             check: Some(FlycheckConfig::CargoCommand {\n                 command: \"check\".to_string(),\n                 all_targets: true,\n+                all_features: true,\n                 extra_args: Vec::new(),\n             }),\n \n@@ -131,6 +132,7 @@ impl Config {\n         set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n         set(value, \"/cargo/features\", &mut self.cargo.features);\n         set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        set(value, \"/cargo/target\", &mut self.cargo.target);\n \n         match get(value, \"/procMacro/enable\") {\n             Some(true) => {\n@@ -172,12 +174,13 @@ impl Config {\n                 }\n                 // otherwise configure command customizations\n                 _ => {\n-                    if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets })\n+                    if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets, all_features })\n                         = &mut self.check\n                     {\n                         set(value, \"/checkOnSave/extraArgs\", extra_args);\n                         set(value, \"/checkOnSave/command\", command);\n                         set(value, \"/checkOnSave/allTargets\", all_targets);\n+                        set(value, \"/checkOnSave/allFeatures\", all_features);\n                     }\n                 }\n             };"}, {"sha": "f64c90b5b17ad2bbbccdbdd92f5e44f4dbacc35d", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -15,7 +15,7 @@ use ra_ide::{\n     ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n-use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_text_edit::{Indel, TextEdit};\n use ra_vfs::LineEndings;\n \n use crate::{\n@@ -124,23 +124,22 @@ impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n         // non-trivial mapping here.\n-        for atom_edit in self.text_edit().as_atoms() {\n-            if atom_edit.delete.contains_range(self.source_range()) {\n-                text_edit = Some(if atom_edit.delete == self.source_range() {\n-                    atom_edit.conv_with((ctx.0, ctx.1))\n+        for indel in self.text_edit().as_indels() {\n+            if indel.delete.contains_range(self.source_range()) {\n+                text_edit = Some(if indel.delete == self.source_range() {\n+                    indel.conv_with((ctx.0, ctx.1))\n                 } else {\n-                    assert!(self.source_range().end() == atom_edit.delete.end());\n-                    let range1 =\n-                        TextRange::new(atom_edit.delete.start(), self.source_range().start());\n+                    assert!(self.source_range().end() == indel.delete.end());\n+                    let range1 = TextRange::new(indel.delete.start(), self.source_range().start());\n                     let range2 = self.source_range();\n-                    let edit1 = AtomTextEdit::replace(range1, String::new());\n-                    let edit2 = AtomTextEdit::replace(range2, atom_edit.insert.clone());\n+                    let edit1 = Indel::replace(range1, String::new());\n+                    let edit2 = Indel::replace(range2, indel.insert.clone());\n                     additional_text_edits.push(edit1.conv_with((ctx.0, ctx.1)));\n                     edit2.conv_with((ctx.0, ctx.1))\n                 })\n             } else {\n-                assert!(self.source_range().intersect(atom_edit.delete).is_none());\n-                additional_text_edits.push(atom_edit.conv_with((ctx.0, ctx.1)));\n+                assert!(self.source_range().intersect(indel.delete).is_none());\n+                additional_text_edits.push(indel.conv_with((ctx.0, ctx.1)));\n             }\n         }\n         let text_edit = text_edit.unwrap();\n@@ -257,11 +256,11 @@ impl ConvWith<(&LineIndex, LineEndings)> for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n     fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> Vec<lsp_types::TextEdit> {\n-        self.as_atoms().iter().map_conv_with(ctx).collect()\n+        self.as_indels().iter().map_conv_with(ctx).collect()\n     }\n }\n \n-impl ConvWith<(&LineIndex, LineEndings)> for &AtomTextEdit {\n+impl ConvWith<(&LineIndex, LineEndings)> for &Indel {\n     type Output = lsp_types::TextEdit;\n \n     fn conv_with(\n@@ -522,7 +521,7 @@ impl TryConvWith<&WorldSnapshot> for SourceFileEdit {\n         let line_index = world.analysis().file_line_index(self.file_id)?;\n         let line_endings = world.file_line_endings(self.file_id);\n         let edits =\n-            self.edit.as_atoms().iter().map_conv_with((&line_index, line_endings)).collect();\n+            self.edit.as_indels().iter().map_conv_with((&line_index, line_endings)).collect();\n         Ok(TextDocumentEdit { text_document, edits })\n     }\n }"}, {"sha": "b77f0c5a9cf8ca85d75bc2268e6440cbdbaf39dd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -676,13 +676,13 @@ fn apply_document_changes(\n     // remember the last valid line in the index and only rebuild it if needed.\n     enum IndexValid {\n         All,\n-        UpToLine(u64),\n+        UpToLineExclusive(u64),\n     }\n \n     impl IndexValid {\n         fn covers(&self, line: u64) -> bool {\n             match *self {\n-                IndexValid::UpToLine(to) => to >= line,\n+                IndexValid::UpToLineExclusive(to) => to > line,\n                 _ => true,\n             }\n         }\n@@ -692,10 +692,10 @@ fn apply_document_changes(\n     for change in content_changes {\n         match change.range {\n             Some(range) => {\n-                if !index_valid.covers(range.start.line) {\n+                if !index_valid.covers(range.end.line) {\n                     line_index = Cow::Owned(LineIndex::new(&old_text));\n                 }\n-                index_valid = IndexValid::UpToLine(range.start.line);\n+                index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = range.conv_with(&line_index);\n                 let mut text = old_text.to_owned();\n                 match std::panic::catch_unwind(move || {\n@@ -713,7 +713,7 @@ fn apply_document_changes(\n             }\n             None => {\n                 *old_text = change.text;\n-                index_valid = IndexValid::UpToLine(0);\n+                index_valid = IndexValid::UpToLineExclusive(0);\n             }\n         }\n     }\n@@ -1083,5 +1083,17 @@ mod tests {\n         assert_eq!(text, \"the quick foxes\\nDREAM\\nthey have quiet dreams\\nDON'T THEY?\\n\");\n         run(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n         assert_eq!(text, \"the quick \\nthey have quiet dreams\\n\");\n+\n+        text = String::from(\"\u2764\ufe0f\");\n+        run(&mut text, c![0, 0; 0, 0 => \"a\"]);\n+        assert_eq!(text, \"a\u2764\ufe0f\");\n+\n+        text = String::from(\"a\\nb\");\n+        run(&mut text, c![0, 1; 1, 0 => \"\\n\u021bc\", 0, 1; 1, 1 => \"d\"]);\n+        assert_eq!(text, \"adcb\");\n+\n+        text = String::from(\"a\\nb\");\n+        run(&mut text, c![0, 1; 1, 0 => \"\u021b\\nc\", 0, 2; 0, 2 => \"c\"]);\n+        assert_eq!(text, \"a\u021bc\\ncb\");\n     }\n }"}, {"sha": "15e8305f884d52fa492b67859a82d0f808aaa630", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -835,6 +835,7 @@ pub fn handle_code_lens(\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Test\",\n+            RunnableKind::DocTest { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Doctest\",\n             RunnableKind::Bench { .. } => \"Run Bench\",\n             RunnableKind::Bin => \"Run\",\n         }\n@@ -1018,6 +1019,7 @@ fn to_lsp_runnable(\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n         RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n+        RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n         RunnableKind::Bin => \"run binary\".to_string(),\n     };\n     Ok(req::Runnable {"}, {"sha": "16020648df68aefab0b75dabc17eebd5241fa71f", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -131,7 +131,7 @@ impl WorldState {\n \n         // FIXME: Read default cfgs from config\n         let default_cfg_options = {\n-            let mut opts = get_rustc_cfg_options();\n+            let mut opts = get_rustc_cfg_options(config.cargo.target.as_ref());\n             opts.insert_atom(\"test\".into());\n             opts.insert_atom(\"debug_assertion\".into());\n             opts"}, {"sha": "1efa5dd632d3805b0f1331c35b3036d14d5056dc", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -337,7 +337,7 @@ fn main() {}\n               \"arguments\": [\n                 {\n                   \"cursorPosition\": null,\n-                  \"label\": \"create module\",\n+                  \"label\": \"Create module\",\n                   \"workspaceEdit\": {\n                     \"documentChanges\": [\n                       {\n@@ -349,9 +349,9 @@ fn main() {}\n                 }\n               ],\n               \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"create module\"\n+              \"title\": \"Create module\"\n             },\n-            \"title\": \"create module\"\n+            \"title\": \"Create module\"\n           }\n         ]),\n     );\n@@ -420,7 +420,7 @@ fn main() {{}}\n               \"arguments\": [\n                 {\n                   \"cursorPosition\": null,\n-                  \"label\": \"create module\",\n+                  \"label\": \"Create module\",\n                   \"workspaceEdit\": {\n                     \"documentChanges\": [\n                       {\n@@ -432,9 +432,9 @@ fn main() {{}}\n                 }\n               ],\n               \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"create module\"\n+              \"title\": \"Create module\"\n             },\n-            \"title\": \"create module\"\n+            \"title\": \"Create module\"\n           }\n         ]),\n     );\n@@ -500,7 +500,7 @@ fn main() {{}}\n             \"position\": { \"character\": 4, \"line\": 1 },\n             \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\" }\n           },\n-          \"label\": \"on enter\",\n+          \"label\": \"On enter\",\n           \"workspaceEdit\": {\n             \"documentChanges\": [\n               {\n@@ -552,7 +552,7 @@ version = \\\"0.0.0\\\"\n             \"position\": { \"line\": 1, \"character\": 4 },\n             \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\" }\n           },\n-          \"label\": \"on enter\",\n+          \"label\": \"On enter\",\n           \"workspaceEdit\": {\n             \"documentChanges\": [\n               {"}, {"sha": "69f5b13d6b816121bf4e12dcc884a5523e55108d", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -57,7 +57,11 @@ To disable this notification put the following to `settings.json`\n ----\n ====\n \n-The server binary is stored in `~/.config/Code/User/globalStorage/matklad.rust-analyzer` (Linux) or in `~/.Library/Application Support/Code/User/globalStorage/matklad.rust-analyzer` (macOS) or in `%APPDATA%\\Code\\User\\globalStorage` (Windows).\n+The server binary is stored in:\n+\n+* Linux: `~/.config/Code/User/globalStorage/matklad.rust-analyzer`\n+* macOS: `~/Library/Application Support/Code/User/globalStorage/matklad.rust-analyzer`\n+* Windows: `%APPDATA%\\Code\\User\\globalStorage`\n \n Note that we only support the latest version of VS Code.\n \n@@ -159,11 +163,11 @@ Emacs support is maintained as part of the https://github.com/emacs-lsp/lsp-mode\n 3. Run `lsp` in a Rust buffer.\n 4. (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys.\n \n-=== Vim\n+=== Vim/NeoVim\n \n-Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n+Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>. Not needed if the extension can install/update it on its own, coc-rust-analyzer is one example.\n \n-The are several LSP client implementations for vim:\n+The are several LSP client implementations for vim or neovim:\n \n ==== coc-rust-analyzer\n "}, {"sha": "71c627a2a063910ad12855b17475ea1935030d7d", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -1066,11 +1066,6 @@\n             \"integrity\": \"sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=\",\n             \"dev\": true\n         },\n-        \"jsonc-parser\": {\n-            \"version\": \"2.2.1\",\n-            \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.2.1.tgz\",\n-            \"integrity\": \"sha512-o6/yDBYccGvTz1+QFevz6l6OBZ2+fMVu2JZ9CIhzsYRX4mjaK5IyX9eldUdCmga16zlgQxyrj5pt9kzuj2C02w==\"\n-        },\n         \"leven\": {\n             \"version\": \"3.1.0\",\n             \"resolved\": \"https://registry.npmjs.org/leven/-/leven-3.1.0.tgz\","}, {"sha": "eeb3d3513fe6ab0daad1de9e70fb7be7aa427eff", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -33,7 +33,6 @@\n         \"fix\": \" tsfmt -r       && eslint -c .eslintrc.js --ext ts ./src --fix\"\n     },\n     \"dependencies\": {\n-        \"jsonc-parser\": \"^2.2.1\",\n         \"node-fetch\": \"^2.6.0\",\n         \"vscode-languageclient\": \"7.0.0-next.1\"\n     },\n@@ -233,6 +232,14 @@\n                     \"default\": false,\n                     \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n                 },\n+                \"rust-analyzer.cargo.target\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Specify the compilation target\"\n+                },\n                 \"rust-analyzer.rustfmt.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n@@ -288,6 +295,11 @@\n                     \"default\": true,\n                     \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\"\n                 },\n+                \"rust-analyzer.checkOnSave.allFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`)\"\n+                },\n                 \"rust-analyzer.inlayHints.typeHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "5b9327b28a4a77c75015373f851c17fecbc22594", "filename": "editors/code/src/color_theme.ts", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0bf02f5ccac99c91f10ef46bb06ff2ea316c382c/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=0bf02f5ccac99c91f10ef46bb06ff2ea316c382c", "patch": "@@ -1,129 +0,0 @@\n-import * as fs from 'fs';\n-import * as jsonc from 'jsonc-parser';\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-\n-export interface TextMateRuleSettings {\n-    foreground?: string;\n-    background?: string;\n-    fontStyle?: string;\n-}\n-\n-export class ColorTheme {\n-    private rules: Map<string, TextMateRuleSettings> = new Map();\n-\n-    static load(): ColorTheme {\n-        // Find out current color theme\n-        const themeName = vscode.workspace\n-            .getConfiguration('workbench')\n-            .get('colorTheme');\n-\n-        if (typeof themeName !== 'string') {\n-            // console.warn('workbench.colorTheme is', themeName)\n-            return new ColorTheme();\n-        }\n-        return loadThemeNamed(themeName);\n-    }\n-\n-    static fromRules(rules: TextMateRule[]): ColorTheme {\n-        const res = new ColorTheme();\n-        for (const rule of rules) {\n-            const scopes = typeof rule.scope === 'undefined'\n-                ? []\n-                : typeof rule.scope === 'string'\n-                    ? [rule.scope]\n-                    : rule.scope;\n-\n-            for (const scope of scopes) {\n-                res.rules.set(scope, rule.settings);\n-            }\n-        }\n-        return res;\n-    }\n-\n-    lookup(scopes: string[]): TextMateRuleSettings {\n-        let res: TextMateRuleSettings = {};\n-        for (const scope of scopes) {\n-            this.rules.forEach((value, key) => {\n-                if (scope.startsWith(key)) {\n-                    res = mergeRuleSettings(res, value);\n-                }\n-            });\n-        }\n-        return res;\n-    }\n-\n-    mergeFrom(other: ColorTheme) {\n-        other.rules.forEach((value, key) => {\n-            const merged = mergeRuleSettings(this.rules.get(key), value);\n-            this.rules.set(key, merged);\n-        });\n-    }\n-}\n-\n-function loadThemeNamed(themeName: string): ColorTheme {\n-    function isTheme(extension: vscode.Extension<unknown>): boolean {\n-        return (\n-            extension.extensionKind === vscode.ExtensionKind.UI &&\n-            extension.packageJSON.contributes &&\n-            extension.packageJSON.contributes.themes\n-        );\n-    }\n-\n-    const themePaths: string[] = vscode.extensions.all\n-        .filter(isTheme)\n-        .flatMap(\n-            ext => ext.packageJSON.contributes.themes\n-                .filter((it: any) => (it.id || it.label) === themeName)\n-                .map((it: any) => path.join(ext.extensionPath, it.path))\n-        );\n-\n-    const res = new ColorTheme();\n-    for (const themePath of themePaths) {\n-        res.mergeFrom(loadThemeFile(themePath));\n-    }\n-\n-    const globalCustomizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n-    res.mergeFrom(ColorTheme.fromRules(globalCustomizations?.textMateRules ?? []));\n-\n-    const themeCustomizations: any = vscode.workspace.getConfiguration('editor.tokenColorCustomizations').get(`[${themeName}]`);\n-    res.mergeFrom(ColorTheme.fromRules(themeCustomizations?.textMateRules ?? []));\n-\n-\n-    return res;\n-}\n-\n-function loadThemeFile(themePath: string): ColorTheme {\n-    let text;\n-    try {\n-        text = fs.readFileSync(themePath, 'utf8');\n-    } catch {\n-        return new ColorTheme();\n-    }\n-    const obj = jsonc.parse(text);\n-    const tokenColors: TextMateRule[] = obj?.tokenColors ?? [];\n-    const res = ColorTheme.fromRules(tokenColors);\n-\n-    for (const include of obj?.include ?? []) {\n-        const includePath = path.join(path.dirname(themePath), include);\n-        res.mergeFrom(loadThemeFile(includePath));\n-    }\n-\n-    return res;\n-}\n-\n-interface TextMateRule {\n-    scope: string | string[];\n-    settings: TextMateRuleSettings;\n-}\n-\n-function mergeRuleSettings(\n-    defaultSetting: TextMateRuleSettings | undefined,\n-    override: TextMateRuleSettings,\n-): TextMateRuleSettings {\n-    return {\n-        foreground: override.foreground ?? defaultSetting?.foreground,\n-        background: override.background ?? defaultSetting?.background,\n-        fontStyle: override.fontStyle ?? defaultSetting?.fontStyle,\n-    };\n-}"}, {"sha": "fe3eb85de19ab3a64b971ff7e655b06b034efe38", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -373,7 +373,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n \n         struct ItemList: ModuleItemOwner {\n             T!['{'],\n-            impl_items: [ImplItem],\n+            assoc_items: [AssocItem],\n             T!['}']\n         }\n \n@@ -685,7 +685,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         /* impl blocks can also contain MacroCall */\n-        enum ImplItem: NameOwner, AttrsOwner {\n+        enum AssocItem: NameOwner, AttrsOwner {\n             FnDef, TypeAliasDef, ConstDef\n         }\n "}, {"sha": "3213c4dfa3c3833a7c80bbcb8ac456cd9e41bf20", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4d128e454448191c4b21d8e151c673e4c42376e/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d128e454448191c4b21d8e151c673e4c42376e/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=c4d128e454448191c4b21d8e151c673e4c42376e", "patch": "@@ -115,7 +115,6 @@ impl TidyDocs {\n             \"ra_prof\",\n             \"ra_project_model\",\n             \"ra_syntax\",\n-            \"ra_text_edit\",\n             \"ra_tt\",\n             \"ra_hir_ty\",\n         ];"}]}