{"sha": "9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjExYmE1MTEzNWIwMzk4YjVhOGI5ZmVjYTI0MTQ5ZDk2ZmE1ZTg=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-17T19:33:31Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-17T20:35:38Z"}, "message": "Remove an unnecessary `Mutex` around argument initialization.\n\nIn the command-line argument initialization code, remove the Mutex\naround the `ARGV` and `ARGC` variables, and simply check whether\nARGV is non-null before dereferencing it. This way, if either of\nARGV or ARGC is not initialized, we'll get an empty argument list.\n\nThis allows simple cdylibs to avoid having\n`pthread_mutex_lock`/`pthread_mutex_unlock` appear in their symbol\ntables if they don't otherwise use threads.", "tree": {"sha": "06c9d5764401c31d6aab9d83736e54987dee7dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c9d5764401c31d6aab9d83736e54987dee7dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "html_url": "https://github.com/rust-lang/rust/commit/9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb11ba51135b0398b5a8b9feca24149d96fa5e8/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46010c4618d4602cd6999c613fce7081fad438c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/46010c4618d4602cd6999c613fce7081fad438c2", "html_url": "https://github.com/rust-lang/rust/commit/46010c4618d4602cd6999c613fce7081fad438c2"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "a6480199e7048d96d0ca58fd7f4119eb011e8851", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9bb11ba51135b0398b5a8b9feca24149d96fa5e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb11ba51135b0398b5a8b9feca24149d96fa5e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "patch": "@@ -77,16 +77,10 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n-    use crate::sys_common::mutex::StaticMutex;\n-\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n-    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n-    // acquire this mutex reentrantly!\n-    static LOCK: StaticMutex = StaticMutex::new();\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n-        let _guard = LOCK.lock();\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -128,9 +122,14 @@ mod imp {\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            let _guard = LOCK.lock();\n-            let argc = ARGC.load(Ordering::Relaxed);\n+            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n+            // ARGC isn't visible yet, we'll return an empty argument list.\n             let argv = ARGV.load(Ordering::Relaxed);\n+            let argc = if argv.is_null() {\n+                0\n+            } else {\n+                ARGC.load(Ordering::Relaxed)\n+            };\n             (0..argc)\n                 .map(|i| {\n                     let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);"}]}