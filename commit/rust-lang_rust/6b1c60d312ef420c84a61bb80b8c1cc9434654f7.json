{"sha": "6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWM2MGQzMTJlZjQyMGM4NGE2MWJiODBiOGMxY2M5NDM0NjU0Zjc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-12-19T17:46:09Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-12-19T18:22:07Z"}, "message": "libcore: Add vec any2 and all2 functions.", "tree": {"sha": "6703e5f96b477f2c0ba15dd8274dbf0dc523964f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6703e5f96b477f2c0ba15dd8274dbf0dc523964f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "html_url": "https://github.com/rust-lang/rust/commit/6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c60d312ef420c84a61bb80b8c1cc9434654f7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9df32adac8568cf021f6645c41d6d9a20824b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9df32adac8568cf021f6645c41d6d9a20824b63", "html_url": "https://github.com/rust-lang/rust/commit/f9df32adac8568cf021f6645c41d6d9a20824b63"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "91621b8991d24fe0465562929ca42368d908da66", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c60d312ef420c84a61bb80b8c1cc9434654f7/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c60d312ef420c84a61bb80b8c1cc9434654f7/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "patch": "@@ -507,6 +507,24 @@ fn any<T>(v: [T], f: block(T) -> bool) -> bool {\n     ret false;\n }\n \n+/*\n+Function: any2\n+\n+Return true if a predicate matches any elements in both vectors.\n+\n+If the vectors contains no elements then false is returned.\n+*/\n+fn any2<T, U>(v0: [T], v1: [U], f: block(T, U) -> bool) -> bool {\n+    let v0_len = len(v0);\n+    let v1_len = len(v1);\n+    let i = 0u;\n+    while i < v0_len && i < v1_len {\n+        if f(v0[i], v1[i]) { ret true; };\n+        i += 1u;\n+    }\n+    ret false;\n+}\n+\n /*\n Function: all\n \n@@ -519,6 +537,21 @@ fn all<T>(v: [T], f: block(T) -> bool) -> bool {\n     ret true;\n }\n \n+/*\n+Function: all2\n+\n+Return true if a predicate matches all elements in both vectors.\n+\n+If the vectors are not the same size then false is returned.\n+*/\n+fn all2<T, U>(v0: [T], v1: [U], f: block(T, U) -> bool) -> bool {\n+    let v0_len = len(v0);\n+    if v0_len != len(v1) { ret false; }\n+    let i = 0u;\n+    while i < v0_len { if !f(v0[i], v1[i]) { ret false; }; i += 1u; }\n+    ret true;\n+}\n+\n /*\n Function: member\n "}, {"sha": "4d53f1b3aa74576fd61623d30bf9699afa8b58fd", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c60d312ef420c84a61bb80b8c1cc9434654f7/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c60d312ef420c84a61bb80b8c1cc9434654f7/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=6b1c60d312ef420c84a61bb80b8c1cc9434654f7", "patch": "@@ -16,6 +16,8 @@ pure fn is_three(&&n: uint) -> bool { ret n == 3u; }\n \n pure fn is_odd(&&n: uint) -> bool { ret n % 2u == 1u; }\n \n+pure fn is_equal(&&x: uint, &&y:uint) -> bool { ret x == y; }\n+\n fn square_if_odd(&&n: uint) -> option::t<uint> {\n     ret if n % 2u == 1u { some(n * n) } else { none };\n }\n@@ -401,6 +403,20 @@ fn test_any_and_all() {\n     assert (!vec::all([3u, 3u, 0u, 1u, 2u], is_three));\n }\n \n+#[test]\n+fn test_any2_and_all2() {\n+\n+    assert (vec::any2([2u, 4u, 6u], [2u, 4u, 6u], is_equal));\n+    assert (vec::any2([1u, 2u, 3u], [4u, 5u, 3u], is_equal));\n+    assert (!vec::any2([1u, 2u, 3u], [4u, 5u, 6u], is_equal));\n+    assert (vec::any2([2u, 4u, 6u], [2u, 4u], is_equal));\n+\n+    assert (vec::all2([2u, 4u, 6u], [2u, 4u, 6u], is_equal));\n+    assert (!vec::all2([1u, 2u, 3u], [4u, 5u, 3u], is_equal));\n+    assert (!vec::all2([1u, 2u, 3u], [4u, 5u, 6u], is_equal));\n+    assert (!vec::all2([2u, 4u, 6u], [2u, 4u], is_equal));\n+}\n+\n #[test]\n fn test_zip_unzip() {\n     let v1 = [1, 2, 3];"}]}