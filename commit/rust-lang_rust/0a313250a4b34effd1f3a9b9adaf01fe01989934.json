{"sha": "0a313250a4b34effd1f3a9b9adaf01fe01989934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMzEzMjUwYTRiMzRlZmZkMWYzYTliOWFkYWYwMWZlMDE5ODk5MzQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T15:25:35Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T15:25:35Z"}, "message": "Improve non_fmt_panics suggestion based on trait impls.", "tree": {"sha": "ede7e071d16b9483dc40f21d3d700e94e3cbae58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede7e071d16b9483dc40f21d3d700e94e3cbae58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a313250a4b34effd1f3a9b9adaf01fe01989934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a313250a4b34effd1f3a9b9adaf01fe01989934", "html_url": "https://github.com/rust-lang/rust/commit/0a313250a4b34effd1f3a9b9adaf01fe01989934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a313250a4b34effd1f3a9b9adaf01fe01989934/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23461b210f1b0a121592a18fc4fb666106006668", "url": "https://api.github.com/repos/rust-lang/rust/commits/23461b210f1b0a121592a18fc4fb666106006668", "html_url": "https://github.com/rust-lang/rust/commit/23461b210f1b0a121592a18fc4fb666106006668"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "30b59d7378b10e564660d46b8b4824b0ea7e4135", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a313250a4b34effd1f3a9b9adaf01fe01989934/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0a313250a4b34effd1f3a9b9adaf01fe01989934/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0a313250a4b34effd1f3a9b9adaf01fe01989934", "patch": "@@ -3932,6 +3932,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n  \"rustc_serialize\","}, {"sha": "8269c56e4290f18b4426d5731992f3bf591a18b5", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a313250a4b34effd1f3a9b9adaf01fe01989934/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0a313250a4b34effd1f3a9b9adaf01fe01989934/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=0a313250a4b34effd1f3a9b9adaf01fe01989934", "patch": "@@ -21,3 +21,4 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }\n+rustc_infer = { path = \"../rustc_infer\" }"}, {"sha": "7e2b62f00cce19a773308b55dd147ff1ca521d16", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0a313250a4b34effd1f3a9b9adaf01fe01989934/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a313250a4b34effd1f3a9b9adaf01fe01989934/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=0a313250a4b34effd1f3a9b9adaf01fe01989934", "patch": "@@ -2,12 +2,15 @@ use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n+use rustc_trait_selection::infer::InferCtxtExt;\n \n declare_lint! {\n     /// The `non_fmt_panics` lint detects `panic!(..)` invocations where the first\n@@ -129,20 +132,57 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 ty.ty_adt_def(),\n                 Some(ty_def) if cx.tcx.is_diagnostic_item(sym::string_type, ty_def.did),\n             );\n-            l.span_suggestion_verbose(\n-                arg_span.shrink_to_lo(),\n-                \"add a \\\"{}\\\" format string to Display the message\",\n-                \"\\\"{}\\\", \".into(),\n-                if is_str {\n-                    Applicability::MachineApplicable\n-                } else {\n-                    Applicability::MaybeIncorrect\n-                },\n-            );\n-            if !is_str && panic == sym::std_panic_macro {\n+\n+            let (suggest_display, suggest_debug) = cx.tcx.infer_ctxt().enter(|infcx| {\n+                let display = is_str || cx.tcx.get_diagnostic_item(sym::display_trait).map(|t| {\n+                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n+                }) == Some(true);\n+                let debug = !display && cx.tcx.get_diagnostic_item(sym::debug_trait).map(|t| {\n+                    infcx.type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env).may_apply()\n+                }) == Some(true);\n+                (display, debug)\n+            });\n+\n+            let suggest_panic_any = !is_str && panic == sym::std_panic_macro;\n+\n+            let fmt_applicability = if suggest_panic_any {\n+                // If we can use panic_any, use that as the MachineApplicable suggestion.\n+                Applicability::MaybeIncorrect\n+            } else {\n+                // If we don't suggest panic_any, using a format string is our best bet.\n+                Applicability::MachineApplicable\n+            };\n+\n+            if suggest_display {\n+                l.span_suggestion_verbose(\n+                    arg_span.shrink_to_lo(),\n+                    \"add a \\\"{}\\\" format string to Display the message\",\n+                    \"\\\"{}\\\", \".into(),\n+                    fmt_applicability,\n+                );\n+            } else if suggest_debug {\n+                l.span_suggestion_verbose(\n+                    arg_span.shrink_to_lo(),\n+                    &format!(\n+                        \"add a \\\"{{:?}}\\\" format string to use the Debug implementation of `{}`\",\n+                        ty,\n+                    ),\n+                    \"\\\"{:?}\\\", \".into(),\n+                    fmt_applicability,\n+                );\n+            }\n+\n+            if suggest_panic_any {\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n                     l.multipart_suggestion(\n-                        \"or use std::panic::panic_any instead\",\n+                        &format!(\n+                            \"{}use std::panic::panic_any instead\",\n+                            if suggest_display || suggest_debug {\n+                                \"or \"\n+                            } else {\n+                                \"\"\n+                            },\n+                        ),\n                         if del == '(' {\n                             vec![(span.until(open), \"std::panic::panic_any\".into())]\n                         } else {"}]}