{"sha": "0c8ee65020a9d6ef60506741d9db1582dc8f6834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOGVlNjUwMjBhOWQ2ZWY2MDUwNjc0MWQ5ZGIxNTgyZGM4ZjY4MzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-06T15:16:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-06T15:16:58Z"}, "message": "Use `memoized` helper more often.", "tree": {"sha": "bec29a9918c84e68fa29e049f886a23ba307b44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec29a9918c84e68fa29e049f886a23ba307b44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8ee65020a9d6ef60506741d9db1582dc8f6834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8ee65020a9d6ef60506741d9db1582dc8f6834", "html_url": "https://github.com/rust-lang/rust/commit/0c8ee65020a9d6ef60506741d9db1582dc8f6834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8ee65020a9d6ef60506741d9db1582dc8f6834/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d7e366681c0157a557ff0083aa56fae9469fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d7e366681c0157a557ff0083aa56fae9469fbf", "html_url": "https://github.com/rust-lang/rust/commit/a9d7e366681c0157a557ff0083aa56fae9469fbf"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "d1504d25288a8d93c4db24aee8e3ccdd5ed74006", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0c8ee65020a9d6ef60506741d9db1582dc8f6834/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8ee65020a9d6ef60506741d9db1582dc8f6834/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=0c8ee65020a9d6ef60506741d9db1582dc8f6834", "patch": "@@ -13,7 +13,7 @@\n // FIXME: (@jroesch) @eddyb should remove this when he renames ctxt\n #![allow(non_camel_case_types)]\n \n-use dep_graph::{DepGraph, DepNode, DepTrackingMap};\n+use dep_graph::{DepGraph, DepTrackingMap};\n use front::map as ast_map;\n use session::Session;\n use lint;\n@@ -256,9 +256,8 @@ pub struct ctxt<'tcx> {\n     pub trait_item_def_ids: RefCell<DepTrackingMap<maps::TraitItemDefIds<'tcx>>>,\n \n     /// A cache for the trait_items() routine; note that the routine\n-    /// itself pushes the `TraitItems` dependency node. This cache is\n-    /// \"encapsulated\" and thus does not need to be itself tracked.\n-    trait_items_cache: RefCell<DefIdMap<Rc<Vec<ty::ImplOrTraitItem<'tcx>>>>>,\n+    /// itself pushes the `TraitItems` dependency node.\n+    trait_items_cache: RefCell<DepTrackingMap<maps::TraitItems<'tcx>>>,\n \n     pub impl_trait_refs: RefCell<DepTrackingMap<maps::ImplTraitRefs<'tcx>>>,\n     pub trait_defs: RefCell<DepTrackingMap<maps::TraitDefs<'tcx>>>,\n@@ -371,9 +370,7 @@ pub struct ctxt<'tcx> {\n     pub fulfilled_predicates: RefCell<traits::FulfilledPredicates<'tcx>>,\n \n     /// Caches the representation hints for struct definitions.\n-    ///\n-    /// This is encapsulated by the `ReprHints` task and hence is not tracked.\n-    repr_hint_cache: RefCell<DefIdMap<Rc<Vec<attr::ReprAttr>>>>,\n+    repr_hint_cache: RefCell<DepTrackingMap<maps::ReprHints<'tcx>>>,\n \n     /// Maps Expr NodeId's to their constant qualification.\n     pub const_qualif_map: RefCell<NodeMap<middle::check_const::ConstQualif>>,\n@@ -544,7 +541,7 @@ impl<'tcx> ctxt<'tcx> {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             impl_or_trait_items: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_item_def_ids: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n-            trait_items_cache: RefCell::new(DefIdMap()),\n+            trait_items_cache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             ty_param_defs: RefCell::new(NodeMap()),\n             normalized_cache: RefCell::new(FnvHashMap()),\n             lang_items: lang_items,\n@@ -561,7 +558,7 @@ impl<'tcx> ctxt<'tcx> {\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n-            repr_hint_cache: RefCell::new(DefIdMap()),\n+            repr_hint_cache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             const_qualif_map: RefCell::new(NodeMap()),\n             custom_coerce_unsized_kinds: RefCell::new(DefIdMap()),\n             cast_kinds: RefCell::new(NodeMap()),\n@@ -1032,28 +1029,16 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     pub fn trait_items(&self, trait_did: DefId) -> Rc<Vec<ty::ImplOrTraitItem<'tcx>>> {\n-        // since this is cached, pushing a dep-node for the\n-        // computation yields the correct dependencies.\n-        let _task = self.dep_graph.in_task(DepNode::TraitItems(trait_did));\n-\n-        let mut trait_items = self.trait_items_cache.borrow_mut();\n-        match trait_items.get(&trait_did).cloned() {\n-            Some(trait_items) => trait_items,\n-            None => {\n-                let def_ids = self.trait_item_def_ids(trait_did);\n-                let items: Rc<Vec<_>> =\n-                    Rc::new(def_ids.iter()\n-                                   .map(|d| self.impl_or_trait_item(d.def_id()))\n-                                   .collect());\n-                trait_items.insert(trait_did, items.clone());\n-                items\n-            }\n-        }\n+        self.trait_items_cache.memoize(trait_did, || {\n+            let def_ids = self.trait_item_def_ids(trait_did);\n+            Rc::new(def_ids.iter()\n+                           .map(|d| self.impl_or_trait_item(d.def_id()))\n+                           .collect())\n+        })\n     }\n \n     /// Obtain the representation annotation for a struct definition.\n     pub fn lookup_repr_hints(&self, did: DefId) -> Rc<Vec<attr::ReprAttr>> {\n-        let _task = self.dep_graph.in_task(DepNode::ReprHints(did));\n         self.repr_hint_cache.memoize(did, || {\n             Rc::new(if did.is_local() {\n                 self.get_attrs(did).iter().flat_map(|meta| {"}, {"sha": "7d5276f379ffe83050e23d4bf9d246ff4b1fc9d2", "filename": "src/librustc/middle/ty/maps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c8ee65020a9d6ef60506741d9db1582dc8f6834/src%2Flibrustc%2Fmiddle%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8ee65020a9d6ef60506741d9db1582dc8f6834/src%2Flibrustc%2Fmiddle%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmaps.rs?ref=0c8ee65020a9d6ef60506741d9db1582dc8f6834", "patch": "@@ -13,6 +13,7 @@ use middle::def_id::DefId;\n use middle::ty;\n use std::marker::PhantomData;\n use std::rc::Rc;\n+use syntax::attr;\n \n macro_rules! dep_map_ty {\n     ($ty_name:ident : $node_name:ident ($key:ty) -> $value:ty) => {\n@@ -39,3 +40,5 @@ dep_map_ty! { AdtDefs: ItemSignature(DefId) -> ty::AdtDefMaster<'tcx> }\n dep_map_ty! { ItemVariances: ItemSignature(DefId) -> Rc<ty::ItemVariances> }\n dep_map_ty! { InherentImpls: InherentImpls(DefId) -> Rc<Vec<DefId>> }\n dep_map_ty! { ImplItems: ImplItems(DefId) -> Vec<ty::ImplOrTraitItemId> }\n+dep_map_ty! { TraitItems: TraitItems(DefId) -> Rc<Vec<ty::ImplOrTraitItem<'tcx>>> }\n+dep_map_ty! { ReprHints: ReprHints(DefId) -> Rc<Vec<attr::ReprAttr>> }"}]}