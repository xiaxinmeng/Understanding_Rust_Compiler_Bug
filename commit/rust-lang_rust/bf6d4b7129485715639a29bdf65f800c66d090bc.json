{"sha": "bf6d4b7129485715639a29bdf65f800c66d090bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNmQ0YjcxMjk0ODU3MTU2MzlhMjliZGY2NWY4MDBjNjZkMDkwYmM=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T14:41:40Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/regex.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "94009d38a4e3bef3086f92b7dde66950eb4bc8f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94009d38a4e3bef3086f92b7dde66950eb4bc8f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf6d4b7129485715639a29bdf65f800c66d090bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6d4b7129485715639a29bdf65f800c66d090bc", "html_url": "https://github.com/rust-lang/rust/commit/bf6d4b7129485715639a29bdf65f800c66d090bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf6d4b7129485715639a29bdf65f800c66d090bc/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ba4885abc4cb6243560535988bd774f744f566", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ba4885abc4cb6243560535988bd774f744f566", "html_url": "https://github.com/rust-lang/rust/commit/36ba4885abc4cb6243560535988bd774f744f566"}], "stats": {"total": 120, "additions": 44, "deletions": 76}, "files": [{"sha": "154fef54cea9bf47c4fc9fb981f7e750f8ef2066", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bf6d4b7129485715639a29bdf65f800c66d090bc/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6d4b7129485715639a29bdf65f800c66d090bc/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=bf6d4b7129485715639a29bdf65f800c66d090bc", "patch": "@@ -14,24 +14,16 @@ const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n \n fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n-\n     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n-\n     let wrong_char_ranice = Regex::new(\"[z-a]\");\n-\n     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n \n-\n     let some_regex = Regex::new(OPENING_PAREN);\n \n-\n     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n-\n     let some_binary_regex = BRegex::new(OPENING_PAREN);\n-\n     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n \n-\n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n \n@@ -46,62 +38,38 @@ fn syntax_error() {\n \n     let set_error = RegexSet::new(&[\n         OPENING_PAREN,\n-\n         r\"[a-z]+\\.(com|org|net)\",\n     ]);\n     let bset_error = BRegexSet::new(&[\n         OPENING_PAREN,\n-\n         r\"[a-z]+\\.(com|org|net)\",\n     ]);\n }\n \n fn trivial_regex() {\n     let trivial_eq = Regex::new(\"^foobar$\");\n \n-\n-\n     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n \n-\n-\n     let trivial_starts_with = Regex::new(\"^foobar\");\n \n-\n-\n     let trivial_ends_with = Regex::new(\"foobar$\");\n \n-\n-\n     let trivial_contains = Regex::new(\"foobar\");\n \n-\n-\n     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n \n-\n-\n     let trivial_backslash = Regex::new(\"a\\\\.b\");\n \n-\n-\n     // unlikely corner cases\n     let trivial_empty = Regex::new(\"\");\n \n-\n-\n     let trivial_empty = Regex::new(\"^\");\n \n-\n-\n     let trivial_empty = Regex::new(\"^$\");\n \n-\n-\n     let binary_trivial_empty = BRegex::new(\"^$\");\n \n-\n-\n     // non-trivial regexes\n     let non_trivial_dot = Regex::new(\"a.b\");\n     let non_trivial_dot_builder = RegexBuilder::new(\"a.b\");"}, {"sha": "ad9e7ba4c75a6561be906d0be813434e86835e12", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/bf6d4b7129485715639a29bdf65f800c66d090bc/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf6d4b7129485715639a29bdf65f800c66d090bc/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=bf6d4b7129485715639a29bdf65f800c66d090bc", "patch": "@@ -7,81 +7,81 @@ error: regex syntax error: empty alternate\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error: empty alternate\n-  --> $DIR/regex.rs:18:60\n+  --> $DIR/regex.rs:17:60\n    |\n-18 |     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n+17 |     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n    |                                                            ^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error: invalid character class range\n-  --> $DIR/regex.rs:20:40\n+  --> $DIR/regex.rs:18:40\n    |\n-20 |     let wrong_char_ranice = Regex::new(\"[z-a]\");\n+18 |     let wrong_char_ranice = Regex::new(\"[z-a]\");\n    |                                        ^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error: invalid character class range\n-  --> $DIR/regex.rs:22:35\n+  --> $DIR/regex.rs:19:35\n    |\n-22 |     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n+19 |     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n    |                                   ^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error on position 0: unclosed parenthesis\n-  --> $DIR/regex.rs:25:33\n+  --> $DIR/regex.rs:21:33\n    |\n-25 |     let some_regex = Regex::new(OPENING_PAREN);\n+21 |     let some_regex = Regex::new(OPENING_PAREN);\n    |                                 ^^^^^^^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error: empty alternate\n-  --> $DIR/regex.rs:28:53\n+  --> $DIR/regex.rs:23:53\n    |\n-28 |     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n+23 |     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n    |                                                     ^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error on position 0: unclosed parenthesis\n-  --> $DIR/regex.rs:30:41\n+  --> $DIR/regex.rs:24:41\n    |\n-30 |     let some_binary_regex = BRegex::new(OPENING_PAREN);\n+24 |     let some_binary_regex = BRegex::new(OPENING_PAREN);\n    |                                         ^^^^^^^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error on position 0: unclosed parenthesis\n-  --> $DIR/regex.rs:32:56\n+  --> $DIR/regex.rs:25:56\n    |\n-32 |     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n+25 |     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n    |                                                        ^^^^^^^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error on position 0: unclosed parenthesis\n-  --> $DIR/regex.rs:48:9\n+  --> $DIR/regex.rs:40:9\n    |\n-48 |         OPENING_PAREN,\n+40 |         OPENING_PAREN,\n    |         ^^^^^^^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: regex syntax error on position 0: unclosed parenthesis\n-  --> $DIR/regex.rs:53:9\n+  --> $DIR/regex.rs:44:9\n    |\n-53 |         OPENING_PAREN,\n+44 |         OPENING_PAREN,\n    |         ^^^^^^^^^^^^^\n    |\n    = note: #[deny(invalid_regex)] on by default\n \n error: trivial regex\n-  --> $DIR/regex.rs:60:33\n+  --> $DIR/regex.rs:50:33\n    |\n-60 |     let trivial_eq = Regex::new(\"^foobar$\");\n+50 |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -92,84 +92,84 @@ note: lint level defined here\n    = help: consider using consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:64:48\n+  --> $DIR/regex.rs:52:48\n    |\n-64 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+52 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:68:42\n+  --> $DIR/regex.rs:54:42\n    |\n-68 |     let trivial_starts_with = Regex::new(\"^foobar\");\n+54 |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:72:40\n+  --> $DIR/regex.rs:56:40\n    |\n-72 |     let trivial_ends_with = Regex::new(\"foobar$\");\n+56 |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:76:39\n+  --> $DIR/regex.rs:58:39\n    |\n-76 |     let trivial_contains = Regex::new(\"foobar\");\n+58 |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:80:39\n+  --> $DIR/regex.rs:60:39\n    |\n-80 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+60 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:84:40\n+  --> $DIR/regex.rs:62:40\n    |\n-84 |     let trivial_backslash = Regex::new(\"a//.b\");\n+62 |     let trivial_backslash = Regex::new(\"a//.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:89:36\n+  --> $DIR/regex.rs:65:36\n    |\n-89 |     let trivial_empty = Regex::new(\"\");\n+65 |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: consider using the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:93:36\n+  --> $DIR/regex.rs:67:36\n    |\n-93 |     let trivial_empty = Regex::new(\"^\");\n+67 |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: consider using the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:97:36\n+  --> $DIR/regex.rs:69:36\n    |\n-97 |     let trivial_empty = Regex::new(\"^$\");\n+69 |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using consider using `str::is_empty`\n \n error: trivial regex\n-   --> $DIR/regex.rs:101:44\n-    |\n-101 |     let binary_trivial_empty = BRegex::new(\"^$\");\n-    |                                            ^^^^\n-    |\n-    = help: consider using consider using `str::is_empty`\n+  --> $DIR/regex.rs:71:44\n+   |\n+71 |     let binary_trivial_empty = BRegex::new(\"^$\");\n+   |                                            ^^^^\n+   |\n+   = help: consider using consider using `str::is_empty`\n \n error: aborting due to 21 previous errors\n "}]}