{"sha": "47e4a62ac50aecc36671c0c2cbfb90d82947c827", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTRhNjJhYzUwYWVjYzM2NjcxYzBjMmNiZmI5MGQ4Mjk0N2M4Mjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-20T19:43:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-20T19:43:53Z"}, "message": "Move all code out of backend.rs", "tree": {"sha": "93707d48e227e6c9ee1e55a3ae99169c4aa6533f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93707d48e227e6c9ee1e55a3ae99169c4aa6533f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e4a62ac50aecc36671c0c2cbfb90d82947c827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e4a62ac50aecc36671c0c2cbfb90d82947c827", "html_url": "https://github.com/rust-lang/rust/commit/47e4a62ac50aecc36671c0c2cbfb90d82947c827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e4a62ac50aecc36671c0c2cbfb90d82947c827/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14617516f8e3346ef5b6251c5ec9360cf81b7bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/14617516f8e3346ef5b6251c5ec9360cf81b7bbb", "html_url": "https://github.com/rust-lang/rust/commit/14617516f8e3346ef5b6251c5ec9360cf81b7bbb"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "c8c2d50b03409619bcc05a668f4e0002a5d3e0d4", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -6,8 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n use gimli::{RunTimeEndian, SectionId};\n \n-use crate::backend::WriteDebugInfo;\n-\n+use super::object::WriteDebugInfo;\n use super::DebugContext;\n \n impl DebugContext<'_> {"}, {"sha": "3eba732e8823a150526ccf2deccd2672a00d8f53", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -2,6 +2,7 @@\n \n mod emit;\n mod line_info;\n+mod object;\n mod unwind;\n \n use crate::prelude::*;"}, {"sha": "9984dc92c44d09b15d7dec2ae66322388d9ea72e", "filename": "src/debuginfo/object.rs", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Fobject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Fobject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fobject.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -1,13 +1,9 @@\n-//! Abstraction around the object writing crate\n-\n use std::convert::{TryFrom, TryInto};\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_session::Session;\n \n-use cranelift_codegen::isa::TargetIsa;\n use cranelift_module::FuncId;\n-use cranelift_object::{ObjectBuilder, ObjectModule, ObjectProduct};\n+use cranelift_object::ObjectProduct;\n \n use object::write::{Relocation, StandardSegment};\n use object::{RelocationEncoding, SectionKind};\n@@ -16,7 +12,7 @@ use gimli::SectionId;\n \n use crate::debuginfo::{DebugReloc, DebugRelocName};\n \n-pub(crate) trait WriteDebugInfo {\n+pub(super) trait WriteDebugInfo {\n     type SectionId: Copy;\n \n     fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n@@ -87,13 +83,3 @@ impl WriteDebugInfo for ObjectProduct {\n             .unwrap();\n     }\n }\n-\n-pub(crate) fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectModule {\n-    let mut builder =\n-        ObjectBuilder::new(isa, name + \".o\", cranelift_module::default_libcall_names()).unwrap();\n-    // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n-    // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n-    // can easily double the amount of time necessary to perform linking.\n-    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n-    ObjectModule::new(builder)\n-}", "previous_filename": "src/backend.rs"}, {"sha": "f0896ea0e167fd09d2ec81e8f29b04e86484cdee", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -8,7 +8,7 @@ use cranelift_object::ObjectProduct;\n use gimli::write::{Address, CieId, EhFrame, FrameTable, Section};\n use gimli::RunTimeEndian;\n \n-use crate::backend::WriteDebugInfo;\n+use super::object::WriteDebugInfo;\n \n pub(crate) struct UnwindContext {\n     endian: RunTimeEndian,"}, {"sha": "8564e2e7adf30ce90f54152bd6b60c66a7f50acd", "filename": "src/driver/aot.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -11,8 +11,10 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{CodegenUnit, MonoItem};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{DebugInfo, OutputType};\n+use rustc_session::Session;\n \n-use cranelift_object::ObjectModule;\n+use cranelift_codegen::isa::TargetIsa;\n+use cranelift_object::{ObjectBuilder, ObjectModule};\n \n use crate::{prelude::*, BackendConfig};\n \n@@ -24,6 +26,16 @@ impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n     }\n }\n \n+fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectModule {\n+    let mut builder =\n+        ObjectBuilder::new(isa, name + \".o\", cranelift_module::default_libcall_names()).unwrap();\n+    // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n+    // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n+    // can easily double the amount of time necessary to perform linking.\n+    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n+    ObjectModule::new(builder)\n+}\n+\n fn emit_module(\n     tcx: TyCtxt<'_>,\n     backend_config: &BackendConfig,\n@@ -105,7 +117,7 @@ fn module_codegen(\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n     let isa = crate::build_isa(tcx.sess, &backend_config);\n-    let mut module = crate::backend::make_module(tcx.sess, isa, cgu_name.as_str().to_string());\n+    let mut module = make_module(tcx.sess, isa, cgu_name.as_str().to_string());\n \n     let mut cx = crate::CodegenCx::new(\n         tcx,\n@@ -228,8 +240,7 @@ pub(crate) fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let isa = crate::build_isa(tcx.sess, &backend_config);\n-    let mut allocator_module =\n-        crate::backend::make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n+    let mut allocator_module = make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n     assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n     let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n     let created_alloc_shim ="}, {"sha": "0f145d3ea70ee26e12909bd52a4759e680f22099", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4a62ac50aecc36671c0c2cbfb90d82947c827/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=47e4a62ac50aecc36671c0c2cbfb90d82947c827", "patch": "@@ -45,7 +45,6 @@ mod abi;\n mod allocator;\n mod analyze;\n mod archive;\n-mod backend;\n mod base;\n mod cast;\n mod codegen_i128;"}]}