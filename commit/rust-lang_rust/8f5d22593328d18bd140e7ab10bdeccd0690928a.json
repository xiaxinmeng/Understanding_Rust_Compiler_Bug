{"sha": "8f5d22593328d18bd140e7ab10bdeccd0690928a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNWQyMjU5MzMyOGQxOGJkMTQwZTdhYjEwYmRlY2NkMDY5MDkyOGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-09T13:54:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-23T20:28:26Z"}, "message": "Extend object safety so that methods with Sized:Self are exempt.", "tree": {"sha": "5dd8173a8b1df18e50f030cd74ef1f672576b109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd8173a8b1df18e50f030cd74ef1f672576b109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5d22593328d18bd140e7ab10bdeccd0690928a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5d22593328d18bd140e7ab10bdeccd0690928a", "html_url": "https://github.com/rust-lang/rust/commit/8f5d22593328d18bd140e7ab10bdeccd0690928a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5d22593328d18bd140e7ab10bdeccd0690928a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f7ca27de6b4e03f30012656dad270cda55a363", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "html_url": "https://github.com/rust-lang/rust/commit/f0f7ca27de6b4e03f30012656dad270cda55a363"}], "stats": {"total": 213, "additions": 201, "deletions": 12}, "files": [{"sha": "765682802826894b2b01318e5ccb95edf34ead04", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -157,19 +157,25 @@ fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               trait_def_id: ast::DefId)\n                               -> bool\n+{\n+    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n+    let trait_predicates = ty::lookup_predicates(tcx, trait_def_id);\n+    generics_require_sized_self(tcx, &trait_def.generics, &trait_predicates)\n+}\n+\n+fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                     generics: &ty::Generics<'tcx>,\n+                                     predicates: &ty::GenericPredicates<'tcx>)\n+                                     -> bool\n {\n     let sized_def_id = match tcx.lang_items.sized_trait() {\n         Some(def_id) => def_id,\n         None => { return false; /* No Sized trait, can't require it! */ }\n     };\n \n     // Search for a predicate like `Self : Sized` amongst the trait bounds.\n-    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n-    let free_substs = ty::construct_free_substs(tcx, &trait_def.generics, ast::DUMMY_NODE_ID);\n-\n-    let trait_predicates = ty::lookup_predicates(tcx, trait_def_id);\n-    let predicates = trait_predicates.instantiate(tcx, &free_substs).predicates.into_vec();\n-\n+    let free_substs = ty::construct_free_substs(tcx, generics, ast::DUMMY_NODE_ID);\n+    let predicates = predicates.instantiate(tcx, &free_substs).predicates.into_vec();\n     elaborate_predicates(tcx, predicates)\n         .any(|predicate| {\n             match predicate {\n@@ -192,6 +198,12 @@ fn object_safety_violations_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                              method: &ty::Method<'tcx>)\n                                              -> Option<MethodViolationCode>\n {\n+    // Any method that has a `Self : Sized` requisite is otherwise\n+    // exempt from the regulations.\n+    if generics_require_sized_self(tcx, &method.generics, &method.predicates) {\n+        return None;\n+    }\n+\n     // The method's first parameter must be something that derefs to\n     // `&self`. For now, we only accept `&self` and `Box<Self>`.\n     match method.explicit_self {"}, {"sha": "643649cceda530c6dee4421054404aea363680aa", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -815,9 +815,6 @@ fn emit_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                         param_substs,\n                         substs.clone()).val;\n \n-                    // currently, at least, by-value self is not object safe\n-                    assert!(m.explicit_self != ty::ByValueExplicitSelfCategory);\n-\n                     Some(fn_ref).into_iter()\n                 }\n             }"}, {"sha": "71dedbe2799c9af8ae566716678e2e4c627e900c", "filename": "src/test/compile-fail/object-safety-by-value-self.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // Check that we correctly prevent users from making trait objects\n-// from traits with a `fn(self)` method.\n+// from traits with a `fn(self)` method, unless `where Self : Sized`\n+// is present on the method.\n \n trait Bar {\n     fn bar(self);\n@@ -19,6 +20,11 @@ trait Baz {\n     fn baz(self: Self);\n }\n \n+trait Quux {\n+    // Legal because of the where clause:\n+    fn baz(self: Self) where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n         //~^ ERROR `Bar` is not object-safe\n@@ -43,5 +49,13 @@ fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n         //~| NOTE method `baz` has a receiver type of `Self`\n }\n \n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n+}\n+\n fn main() {\n }"}, {"sha": "fd20accfa1e6b562bd319e86b3a987a86baefcaf", "filename": "src/test/compile-fail/object-safety-generics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -9,12 +9,18 @@\n // except according to those terms.\n \n // Check that we correctly prevent users from making trait objects\n-// from traits with generic methods.\n+// from traits with generic methods, unless `where Self : Sized` is\n+// present.\n \n trait Bar {\n     fn bar<T>(&self, t: T);\n }\n \n+trait Quux {\n+    fn bar<T>(&self, t: T)\n+        where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n         //~^ ERROR `Bar` is not object-safe\n@@ -27,5 +33,13 @@ fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n         //~| NOTE method `bar` has generic type parameters\n }\n \n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n+}\n+\n fn main() {\n }"}, {"sha": "b546774ccbd8cae8deb49bb638bf3e8fa886fac1", "filename": "src/test/compile-fail/object-safety-mentions-Self.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // Check that we correctly prevent users from making trait objects\n-// form traits that make use of `Self` in an argument or return position.\n+// form traits that make use of `Self` in an argument or return\n+// position, unless `where Self : Sized` is present..\n \n trait Bar {\n     fn bar(&self, x: &Self);\n@@ -19,6 +20,10 @@ trait Baz {\n     fn bar(&self) -> Self;\n }\n \n+trait Quux {\n+    fn get(&self, s: &Self) -> Self where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n         //~^ ERROR `Bar` is not object-safe\n@@ -43,5 +48,13 @@ fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n }\n \n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n+}\n+\n fn main() {\n }"}, {"sha": "ae092333134ea0f0b53c988058387c4bfdb41c18", "filename": "src/test/run-pass/object-safety-sized-self-by-value-self.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// methods with by-value self so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn tick(&mut self) -> u32;\n+    fn get(self) -> u32 where Self : Sized;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+    fn get(self) -> u32 where Self : Sized { self.c }\n+}\n+\n+fn tick1<C:Counter>(mut c: C) -> u32 {\n+    tick2(&mut c);\n+    c.get()\n+}\n+\n+fn tick2(c: &mut Counter) {\n+    tick3(c);\n+}\n+\n+fn tick3<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = CCounter { c: 0 };\n+    let value = tick1(c);\n+    assert_eq!(value, 2);\n+}"}, {"sha": "1a42c4b6ef6649be36b0e8bae0b765c4e2b1b150", "filename": "src/test/run-pass/object-safety-sized-self-generic-method.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// generic methods so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn tick(&mut self) -> u32;\n+    fn with<F:FnOnce(u32)>(&self, f: F) where Self : Sized;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+    fn with<F:FnOnce(u32)>(&self, f: F) { f(self.c); }\n+}\n+\n+fn tick1<C:Counter>(c: &mut C) {\n+    tick2(c);\n+    c.with(|i| ());\n+}\n+\n+fn tick2(c: &mut Counter) {\n+    tick3(c);\n+}\n+\n+fn tick3<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = CCounter { c: 0 };\n+    tick1(&mut c);\n+    assert_eq!(c.tick(), 3);\n+}"}, {"sha": "7f075bbb6c2f226bb1a38ef4b1cd9193e737fdf3", "filename": "src/test/run-pass/object-safety-sized-self-return-Self.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5d22593328d18bd140e7ab10bdeccd0690928a/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs?ref=8f5d22593328d18bd140e7ab10bdeccd0690928a", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// methods that return `Self` so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn new() -> Self where Self : Sized;\n+    fn tick(&mut self) -> u32;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn new() -> CCounter { CCounter { c: 0 } }\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+}\n+\n+fn preticked<C:Counter>() -> C {\n+    let mut c: C = Counter::new();\n+    tick(&mut c);\n+    c\n+}\n+\n+fn tick(c: &mut Counter) {\n+    tick_generic(c);\n+}\n+\n+fn tick_generic<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = preticked::<CCounter>();\n+    tick(&mut c);\n+    assert_eq!(c.tick(), 5);\n+}"}]}